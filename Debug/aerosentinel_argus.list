
aerosentinel_argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015864  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08015b08  08015b08  00016b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016030  08016030  00017030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016038  08016038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801603c  0801603c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e0  24000000  08016040  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000136c  240002e0  08016320  000182e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400164c  08016320  0001864c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000182e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031f03  00000000  00000000  0001830e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000063c0  00000000  00000000  0004a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028b0  00000000  00000000  000505d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fe7  00000000  00000000  00052e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041a5a  00000000  00000000  00054e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003952c  00000000  00000000  000968c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a614  00000000  00000000  000cfdf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0024a409  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd48  00000000  00000000  0024a44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00256194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e0 	.word	0x240002e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015aec 	.word	0x08015aec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002e4 	.word	0x240002e4
 80002dc:	08015aec 	.word	0x08015aec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SensorManager_Init>:
    {MS5607_Init, "MS5607"},
//    {GPS_Init, "ATGM336H"}
};


telemetry_init_status SensorManager_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
    printf("Sensors Initialization routine started.\n");
 8000686:	4826      	ldr	r0, [pc, #152]	@ (8000720 <SensorManager_Init+0xa0>)
 8000688:	f013 fb30 	bl	8013cec <puts>

    size_t num_sensors = sizeof(sensors) / sizeof(sensors[0]);
 800068c:	2302      	movs	r3, #2
 800068e:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	e024      	b.n	80006e8 <SensorManager_Init+0x68>
        int8_t status = sensors[i].init_function();
 800069e:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SensorManager_Init+0xa4>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006a6:	4798      	blx	r3
 80006a8:	4603      	mov	r3, r0
 80006aa:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 80006ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <SensorManager_Init+0x4c>
            printf("%s initialization failed.\n", sensors[i].sensor_name);
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <SensorManager_Init+0xa4>)
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <SensorManager_Init+0xa8>)
 80006c2:	f013 faab 	bl	8013c1c <iprintf>
            all_success = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e00a      	b.n	80006e2 <SensorManager_Init+0x62>
        } else {
            printf("[%s] device found! Initialization succeeded.\n", sensors[i].sensor_name);
 80006cc:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <SensorManager_Init+0xa4>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	4413      	add	r3, r2
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4814      	ldr	r0, [pc, #80]	@ (800072c <SensorManager_Init+0xac>)
 80006da:	f013 fa9f 	bl	8013c1c <iprintf>
            any_success = true;
 80006de:	2301      	movs	r3, #1
 80006e0:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3d6      	bcc.n	800069e <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d004      	beq.n	8000700 <SensorManager_Init+0x80>
        printf("All sensors initialized successfully.\n");
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <SensorManager_Init+0xb0>)
 80006f8:	f013 faf8 	bl	8013cec <puts>
        return TELEMETRY_INIT_SUCCESS;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e00b      	b.n	8000718 <SensorManager_Init+0x98>
    } else if (any_success) {
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <SensorManager_Init+0x90>
        printf("Partial initialization success.\n");
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <SensorManager_Init+0xb4>)
 8000708:	f013 faf0 	bl	8013cec <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 800070c:	2301      	movs	r3, #1
 800070e:	e003      	b.n	8000718 <SensorManager_Init+0x98>
    } else {
        printf("All sensors initialization failed.\n");
 8000710:	4809      	ldr	r0, [pc, #36]	@ (8000738 <SensorManager_Init+0xb8>)
 8000712:	f013 faeb 	bl	8013cec <puts>
        return TELEMETRY_INIT_FAILURE;
 8000716:	2302      	movs	r3, #2
    }
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08015b18 	.word	0x08015b18
 8000724:	24000000 	.word	0x24000000
 8000728:	08015b40 	.word	0x08015b40
 800072c:	08015b5c 	.word	0x08015b5c
 8000730:	08015b8c 	.word	0x08015b8c
 8000734:	08015bb4 	.word	0x08015bb4
 8000738:	08015bd4 	.word	0x08015bd4

0800073c <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000744:	23ff      	movs	r3, #255	@ 0xff
 8000746:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000748:	2300      	movs	r3, #0
 800074a:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 800074c:	2300      	movs	r3, #0
 800074e:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000750:	2300      	movs	r3, #0
 8000752:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000754:	4a58      	ldr	r2, [pc, #352]	@ (80008b8 <bno055_init+0x17c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800075a:	4b57      	ldr	r3, [pc, #348]	@ (80008b8 <bno055_init+0x17c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68dc      	ldr	r4, [r3, #12]
 8000760:	4b55      	ldr	r3, [pc, #340]	@ (80008b8 <bno055_init+0x17c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	7a58      	ldrb	r0, [r3, #9]
 8000766:	f107 020d 	add.w	r2, r7, #13
 800076a:	2301      	movs	r3, #1
 800076c:	2107      	movs	r1, #7
 800076e:	47a0      	blx	r4
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000774:	4b50      	ldr	r3, [pc, #320]	@ (80008b8 <bno055_init+0x17c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	691c      	ldr	r4, [r3, #16]
 800077a:	4b4f      	ldr	r3, [pc, #316]	@ (80008b8 <bno055_init+0x17c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	7a58      	ldrb	r0, [r3, #9]
 8000780:	f107 020e 	add.w	r2, r7, #14
 8000784:	2301      	movs	r3, #1
 8000786:	2100      	movs	r1, #0
 8000788:	47a0      	blx	r4
 800078a:	4603      	mov	r3, r0
 800078c:	b2da      	uxtb	r2, r3
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	4413      	add	r3, r2
 8000792:	b2db      	uxtb	r3, r3
 8000794:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000796:	4b48      	ldr	r3, [pc, #288]	@ (80008b8 <bno055_init+0x17c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	7bba      	ldrb	r2, [r7, #14]
 800079c:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800079e:	4b46      	ldr	r3, [pc, #280]	@ (80008b8 <bno055_init+0x17c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	691c      	ldr	r4, [r3, #16]
 80007a4:	4b44      	ldr	r3, [pc, #272]	@ (80008b8 <bno055_init+0x17c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	7a58      	ldrb	r0, [r3, #9]
 80007aa:	f107 020e 	add.w	r2, r7, #14
 80007ae:	2301      	movs	r3, #1
 80007b0:	2101      	movs	r1, #1
 80007b2:	47a0      	blx	r4
 80007b4:	4603      	mov	r3, r0
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	4413      	add	r3, r2
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80007c0:	4b3d      	ldr	r3, [pc, #244]	@ (80008b8 <bno055_init+0x17c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	7bba      	ldrb	r2, [r7, #14]
 80007c6:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80007c8:	4b3b      	ldr	r3, [pc, #236]	@ (80008b8 <bno055_init+0x17c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	691c      	ldr	r4, [r3, #16]
 80007ce:	4b3a      	ldr	r3, [pc, #232]	@ (80008b8 <bno055_init+0x17c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	7a58      	ldrb	r0, [r3, #9]
 80007d4:	f107 020e 	add.w	r2, r7, #14
 80007d8:	2301      	movs	r3, #1
 80007da:	2102      	movs	r1, #2
 80007dc:	47a0      	blx	r4
 80007de:	4603      	mov	r3, r0
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	4413      	add	r3, r2
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 80007ea:	4b33      	ldr	r3, [pc, #204]	@ (80008b8 <bno055_init+0x17c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	7bba      	ldrb	r2, [r7, #14]
 80007f0:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80007f2:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <bno055_init+0x17c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	691c      	ldr	r4, [r3, #16]
 80007f8:	4b2f      	ldr	r3, [pc, #188]	@ (80008b8 <bno055_init+0x17c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	7a58      	ldrb	r0, [r3, #9]
 80007fe:	f107 020e 	add.w	r2, r7, #14
 8000802:	2301      	movs	r3, #1
 8000804:	2103      	movs	r1, #3
 8000806:	47a0      	blx	r4
 8000808:	4603      	mov	r3, r0
 800080a:	b2da      	uxtb	r2, r3
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	4413      	add	r3, r2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000814:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <bno055_init+0x17c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	7bba      	ldrb	r2, [r7, #14]
 800081a:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800081c:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <bno055_init+0x17c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	691c      	ldr	r4, [r3, #16]
 8000822:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <bno055_init+0x17c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	7a58      	ldrb	r0, [r3, #9]
 8000828:	f107 020e 	add.w	r2, r7, #14
 800082c:	2301      	movs	r3, #1
 800082e:	2106      	movs	r1, #6
 8000830:	47a0      	blx	r4
 8000832:	4603      	mov	r3, r0
 8000834:	b2da      	uxtb	r2, r3
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	4413      	add	r3, r2
 800083a:	b2db      	uxtb	r3, r3
 800083c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <bno055_init+0x17c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	7bba      	ldrb	r2, [r7, #14]
 8000844:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000846:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <bno055_init+0x17c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	691c      	ldr	r4, [r3, #16]
 800084c:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <bno055_init+0x17c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	7a58      	ldrb	r0, [r3, #9]
 8000852:	f107 0208 	add.w	r2, r7, #8
 8000856:	2302      	movs	r3, #2
 8000858:	2104      	movs	r1, #4
 800085a:	47a0      	blx	r4
 800085c:	4603      	mov	r3, r0
 800085e:	b2da      	uxtb	r2, r3
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	4413      	add	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000868:	7a3b      	ldrb	r3, [r7, #8]
 800086a:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 800086c:	7a7b      	ldrb	r3, [r7, #9]
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	b29a      	uxth	r2, r3
 8000872:	7a3b      	ldrb	r3, [r7, #8]
 8000874:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <bno055_init+0x17c>)
 8000878:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 800087a:	430a      	orrs	r2, r1
 800087c:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 800087e:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <bno055_init+0x17c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	691c      	ldr	r4, [r3, #16]
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <bno055_init+0x17c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	7a58      	ldrb	r0, [r3, #9]
 800088c:	f107 020e 	add.w	r2, r7, #14
 8000890:	2301      	movs	r3, #1
 8000892:	2107      	movs	r1, #7
 8000894:	47a0      	blx	r4
 8000896:	4603      	mov	r3, r0
 8000898:	b2da      	uxtb	r2, r3
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	4413      	add	r3, r2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 80008a2:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <bno055_init+0x17c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	7bba      	ldrb	r2, [r7, #14]
 80008a8:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80008aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}
 80008b6:	bf00      	nop
 80008b8:	240002fc 	.word	0x240002fc

080008bc <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80008cc:	23ff      	movs	r3, #255	@ 0xff
 80008ce:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <bno055_write_register+0x48>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 80008d8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80008dc:	e00d      	b.n	80008fa <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <bno055_write_register+0x48>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68dc      	ldr	r4, [r3, #12]
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <bno055_write_register+0x48>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	7a58      	ldrb	r0, [r3, #9]
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	79f9      	ldrb	r1, [r7, #7]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	47a0      	blx	r4
 80008f2:	4603      	mov	r3, r0
 80008f4:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	bf00      	nop
 8000904:	240002fc 	.word	0x240002fc

08000908 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000912:	23ff      	movs	r3, #255	@ 0xff
 8000914:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000916:	2300      	movs	r3, #0
 8000918:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800091a:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <bno055_write_page_id+0x8c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000922:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000926:	e030      	b.n	800098a <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000928:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <bno055_write_page_id+0x8c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	691c      	ldr	r4, [r3, #16]
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <bno055_write_page_id+0x8c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	7a58      	ldrb	r0, [r3, #9]
 8000934:	f107 020e 	add.w	r2, r7, #14
 8000938:	2301      	movs	r3, #1
 800093a:	2107      	movs	r1, #7
 800093c:	47a0      	blx	r4
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d11b      	bne.n	8000982 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <bno055_write_page_id+0x8c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68dc      	ldr	r4, [r3, #12]
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <bno055_write_page_id+0x8c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	7a58      	ldrb	r0, [r3, #9]
 800095a:	f107 020e 	add.w	r2, r7, #14
 800095e:	2301      	movs	r3, #1
 8000960:	2107      	movs	r1, #7
 8000962:	47a0      	blx	r4
 8000964:	4603      	mov	r3, r0
 8000966:	b2da      	uxtb	r2, r3
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	4413      	add	r3, r2
 800096c:	b2db      	uxtb	r3, r3
 800096e:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d106      	bne.n	8000986 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <bno055_write_page_id+0x8c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	711a      	strb	r2, [r3, #4]
 8000980:	e001      	b.n	8000986 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000982:	23ff      	movs	r3, #255	@ 0xff
 8000984:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bd90      	pop	{r4, r7, pc}
 8000992:	bf00      	nop
 8000994:	240002fc 	.word	0x240002fc

08000998 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80009a0:	23ff      	movs	r3, #255	@ 0xff
 80009a2:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80009a8:	23ff      	movs	r3, #255	@ 0xff
 80009aa:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <bno055_get_operation_mode+0x80>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80009b4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80009b8:	e02a      	b.n	8000a10 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <bno055_get_operation_mode+0x80>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	791b      	ldrb	r3, [r3, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d004      	beq.n	80009ce <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff ff9f 	bl	8000908 <bno055_write_page_id>
 80009ca:	4603      	mov	r3, r0
 80009cc:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80009ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <bno055_get_operation_mode+0x48>
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <bno055_get_operation_mode+0x80>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d113      	bne.n	8000a08 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <bno055_get_operation_mode+0x80>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	691c      	ldr	r4, [r3, #16]
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <bno055_get_operation_mode+0x80>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	7a58      	ldrb	r0, [r3, #9]
 80009ec:	f107 020d 	add.w	r2, r7, #13
 80009f0:	2301      	movs	r3, #1
 80009f2:	213d      	movs	r1, #61	@ 0x3d
 80009f4:	47a0      	blx	r4
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 80009fa:	7b7b      	ldrb	r3, [r7, #13]
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e001      	b.n	8000a0c <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000a08:	23ff      	movs	r3, #255	@ 0xff
 8000a0a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	240002fc 	.word	0x240002fc

08000a1c <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a26:	23ff      	movs	r3, #255	@ 0xff
 8000a28:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000a32:	23ff      	movs	r3, #255	@ 0xff
 8000a34:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000a36:	4b5c      	ldr	r3, [pc, #368]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d102      	bne.n	8000a44 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000a3e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000a42:	e0ac      	b.n	8000b9e <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ffa5 	bl	8000998 <bno055_get_operation_mode>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f040 809d 	bne.w	8000b96 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000a5c:	7b3b      	ldrb	r3, [r7, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d137      	bne.n	8000ad2 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a62:	4b51      	ldr	r3, [pc, #324]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	691c      	ldr	r4, [r3, #16]
 8000a68:	4b4f      	ldr	r3, [pc, #316]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	7a58      	ldrb	r0, [r3, #9]
 8000a6e:	f107 020d 	add.w	r2, r7, #13
 8000a72:	2301      	movs	r3, #1
 8000a74:	213d      	movs	r1, #61	@ 0x3d
 8000a76:	47a0      	blx	r4
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f040 808a 	bne.w	8000b9a <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	f023 030f 	bic.w	r3, r3, #15
 8000a8e:	b25a      	sxtb	r2, r3
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000aa2:	4b41      	ldr	r3, [pc, #260]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68dc      	ldr	r4, [r3, #12]
 8000aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	7a58      	ldrb	r0, [r3, #9]
 8000aae:	f107 020d 	add.w	r2, r7, #13
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	213d      	movs	r1, #61	@ 0x3d
 8000ab6:	47a0      	blx	r4
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	4413      	add	r3, r2
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000ac4:	4b38      	ldr	r3, [pc, #224]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000ace:	4798      	blx	r3
 8000ad0:	e063      	b.n	8000b9a <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ad2:	4b35      	ldr	r3, [pc, #212]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	691c      	ldr	r4, [r3, #16]
 8000ad8:	4b33      	ldr	r3, [pc, #204]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	7a58      	ldrb	r0, [r3, #9]
 8000ade:	f107 020d 	add.w	r2, r7, #13
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	213d      	movs	r1, #61	@ 0x3d
 8000ae6:	47a0      	blx	r4
 8000ae8:	4603      	mov	r3, r0
 8000aea:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d116      	bne.n	8000b22 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	f023 030f 	bic.w	r3, r3, #15
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000afe:	f107 030d 	add.w	r3, r7, #13
 8000b02:	2201      	movs	r2, #1
 8000b04:	4619      	mov	r1, r3
 8000b06:	203d      	movs	r0, #61	@ 0x3d
 8000b08:	f7ff fed8 	bl	80008bc <bno055_write_register>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	4413      	add	r3, r2
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000b18:	4b23      	ldr	r3, [pc, #140]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	2014      	movs	r0, #20
 8000b20:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d038      	beq.n	8000b9a <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	691c      	ldr	r4, [r3, #16]
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	7a58      	ldrb	r0, [r3, #9]
 8000b34:	f107 020d 	add.w	r2, r7, #13
 8000b38:	2301      	movs	r3, #1
 8000b3a:	213d      	movs	r1, #61	@ 0x3d
 8000b3c:	47a0      	blx	r4
 8000b3e:	4603      	mov	r3, r0
 8000b40:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d127      	bne.n	8000b9a <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000b4a:	7b7b      	ldrb	r3, [r7, #13]
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	f023 030f 	bic.w	r3, r3, #15
 8000b52:	b25a      	sxtb	r2, r3
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	f003 030f 	and.w	r3, r3, #15
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68dc      	ldr	r4, [r3, #12]
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	7a58      	ldrb	r0, [r3, #9]
 8000b72:	f107 020d 	add.w	r2, r7, #13
 8000b76:	2301      	movs	r3, #1
 8000b78:	213d      	movs	r1, #61	@ 0x3d
 8000b7a:	47a0      	blx	r4
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	4413      	add	r3, r2
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <bno055_set_operation_mode+0x18c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000b92:	4798      	blx	r3
 8000b94:	e001      	b.n	8000b9a <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b96:	23ff      	movs	r3, #255	@ 0xff
 8000b98:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd90      	pop	{r4, r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	240002fc 	.word	0x240002fc

08000bac <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000bb6:	23ff      	movs	r3, #255	@ 0xff
 8000bb8:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000bc2:	23ff      	movs	r3, #255	@ 0xff
 8000bc4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000bc6:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <bno055_set_power_mode+0xf0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000bce:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000bd2:	e05f      	b.n	8000c94 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fedd 	bl	8000998 <bno055_get_operation_mode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000be2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d143      	bne.n	8000c72 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000bea:	7b3b      	ldrb	r3, [r7, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d008      	beq.n	8000c02 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ff13 	bl	8000a1c <bno055_set_operation_mode>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	7bbb      	ldrb	r3, [r7, #14]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000c02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d130      	bne.n	8000c6c <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c0a:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <bno055_set_power_mode+0xf0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	691c      	ldr	r4, [r3, #16]
 8000c10:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <bno055_set_power_mode+0xf0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	7a58      	ldrb	r0, [r3, #9]
 8000c16:	f107 020d 	add.w	r2, r7, #13
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	213e      	movs	r1, #62	@ 0x3e
 8000c1e:	47a0      	blx	r4
 8000c20:	4603      	mov	r3, r0
 8000c22:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d124      	bne.n	8000c76 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8000c2c:	7b7b      	ldrb	r3, [r7, #13]
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	f023 0303 	bic.w	r3, r3, #3
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <bno055_set_power_mode+0xf0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68dc      	ldr	r4, [r3, #12]
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <bno055_set_power_mode+0xf0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	7a58      	ldrb	r0, [r3, #9]
 8000c54:	f107 020d 	add.w	r2, r7, #13
 8000c58:	2301      	movs	r3, #1
 8000c5a:	213e      	movs	r1, #62	@ 0x3e
 8000c5c:	47a0      	blx	r4
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	4413      	add	r3, r2
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e004      	b.n	8000c76 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000c6c:	23ff      	movs	r3, #255	@ 0xff
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e001      	b.n	8000c76 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000c72:	23ff      	movs	r3, #255	@ 0xff
 8000c74:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000c76:	7b3b      	ldrb	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d009      	beq.n	8000c90 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000c7c:	7b3b      	ldrb	r3, [r7, #12]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fecc 	bl	8000a1c <bno055_set_operation_mode>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	240002fc 	.word	0x240002fc

08000ca0 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	603a      	str	r2, [r7, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71bb      	strb	r3, [r7, #6]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8000cbe:	1dba      	adds	r2, r7, #6
 8000cc0:	89f9      	ldrh	r1, [r7, #14]
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <bno055_platform_read+0x50>)
 8000ccc:	f001 ff8e 	bl	8002bec <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	89f9      	ldrh	r1, [r7, #14]
 8000cd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cda:	9200      	str	r2, [sp, #0]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <bno055_platform_read+0x50>)
 8000ce0:	f002 f89c 	bl	8002e1c <HAL_I2C_Master_Receive>
    return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	240005d4 	.word	0x240005d4

08000cf4 <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	603a      	str	r2, [r7, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	460b      	mov	r3, r1
 8000d04:	71bb      	strb	r3, [r7, #6]
 8000d06:	4613      	mov	r3, r2
 8000d08:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 8000d12:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <bno055_platform_write+0x54>)
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 8000d18:	797b      	ldrb	r3, [r7, #5]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <bno055_platform_write+0x58>)
 8000d20:	f013 f943 	bl	8013faa <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	89f9      	ldrh	r1, [r7, #14]
 8000d2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d32:	9200      	str	r2, [sp, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <bno055_platform_write+0x54>)
 8000d36:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <bno055_platform_write+0x5c>)
 8000d38:	f001 ff58 	bl	8002bec <HAL_I2C_Master_Transmit>
    return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000318 	.word	0x24000318
 8000d4c:	24000319 	.word	0x24000319
 8000d50:	240005d4 	.word	0x240005d4

08000d54 <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
//		{
//			;
//		}
//	}

	HAL_Delay(Delay);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f001 fb0f 	bl	8002380 <HAL_Delay>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
int8_t BNO055_Init(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 8000d72:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <BNO055_Init+0x94>)
 8000d74:	4a23      	ldr	r2, [pc, #140]	@ (8000e04 <BNO055_Init+0x98>)
 8000d76:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8000d78:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <BNO055_Init+0x94>)
 8000d7a:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <BNO055_Init+0x9c>)
 8000d7c:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <BNO055_Init+0x94>)
 8000d80:	4a22      	ldr	r2, [pc, #136]	@ (8000e0c <BNO055_Init+0xa0>)
 8000d82:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <BNO055_Init+0x94>)
 8000d86:	2228      	movs	r2, #40	@ 0x28
 8000d88:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 8000d8a:	1dfa      	adds	r2, r7, #7
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2028      	movs	r0, #40	@ 0x28
 8000d92:	f7ff ff85 	bl	8000ca0 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 8000d96:	481a      	ldr	r0, [pc, #104]	@ (8000e00 <BNO055_Init+0x94>)
 8000d98:	f7ff fcd0 	bl	800073c <bno055_init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <BNO055_Init+0xa4>)
 8000da2:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <BNO055_Init+0xa8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <BNO055_Init+0xa8>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fefc 	bl	8000bac <bno055_set_power_mode>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <BNO055_Init+0xa4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <BNO055_Init+0xa4>)
 8000dc0:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
	    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8000dc2:	200c      	movs	r0, #12
 8000dc4:	f7ff fe2a 	bl	8000a1c <bno055_set_operation_mode>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <BNO055_Init+0xa4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e10 <BNO055_Init+0xa4>)
 8000dd4:	6013      	str	r3, [r2, #0]
	    comres += bno055_get_operation_mode(&op_mode_current);
 8000dd6:	4810      	ldr	r0, [pc, #64]	@ (8000e18 <BNO055_Init+0xac>)
 8000dd8:	f7ff fdde 	bl	8000998 <bno055_get_operation_mode>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <BNO055_Init+0xa4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <BNO055_Init+0xa4>)
 8000de8:	6013      	str	r3, [r2, #0]
//		}
//		else
//		{
//			printf("bno055_init failed, comres=%d\r\n", comres);
//		}
	    DelayUs(1000); // 1 second
 8000dea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dee:	f7ff ffb1 	bl	8000d54 <DelayUs>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <BNO055_Init+0xa4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	24000300 	.word	0x24000300
 8000e04:	08000cf5 	.word	0x08000cf5
 8000e08:	08000ca1 	.word	0x08000ca1
 8000e0c:	08000d55 	.word	0x08000d55
 8000e10:	24000010 	.word	0x24000010
 8000e14:	24000519 	.word	0x24000519
 8000e18:	24000518 	.word	0x24000518

08000e1c <ms5607_delay_func>:
#define STANDARD_TEMP 288.15         // Standard temperature at sea level in K
#define PASCAL_TO_HECTOPASCAL 100 	 //Divide the pressure by this number to get hPa
#define PASCAL_TO_KILOPASCAL 1000	 //Divide the pressure by this number to get kPa

void ms5607_delay_func(uint32_t period)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8000e24:	e008      	b.n	8000e38 <ms5607_delay_func+0x1c>
	{
		for(i = 0; i < 64; i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	e002      	b.n	8000e32 <ms5607_delay_func+0x16>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e36:	d9f9      	bls.n	8000e2c <ms5607_delay_func+0x10>
	while(period--)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1e5a      	subs	r2, r3, #1
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f1      	bne.n	8000e26 <ms5607_delay_func+0xa>
		{
			;
		}
	}
//	HAL_Delay(period/1000);
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  enableCSB();
 8000e54:	f000 f87c 	bl	8000f50 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <MS5607_Init+0x54>)
 8000e5a:	221e      	movs	r2, #30
 8000e5c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000e5e:	230a      	movs	r3, #10
 8000e60:	2201      	movs	r2, #1
 8000e62:	4910      	ldr	r1, [pc, #64]	@ (8000ea4 <MS5607_Init+0x54>)
 8000e64:	4810      	ldr	r0, [pc, #64]	@ (8000ea8 <MS5607_Init+0x58>)
 8000e66:	f009 f907 	bl	800a078 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000e6a:	bf00      	nop
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MS5607_Init+0x58>)
 8000e6e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d0f9      	beq.n	8000e6c <MS5607_Init+0x1c>
//  HAL_Delay(3);
  ms5607_delay_func(3000);
 8000e78:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e7c:	f7ff ffce 	bl	8000e1c <ms5607_delay_func>
  disableCSB();
 8000e80:	f000 f872 	bl	8000f68 <disableCSB>

  MS5607PromRead(&promData);
 8000e84:	4809      	ldr	r0, [pc, #36]	@ (8000eac <MS5607_Init+0x5c>)
 8000e86:	f000 f813 	bl	8000eb0 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <MS5607_Init+0x5c>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <MS5607_Init+0x4a>
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MS5607_Init+0x5c>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	2bff      	cmp	r3, #255	@ 0xff
 8000e98:	d101      	bne.n	8000e9e <MS5607_Init+0x4e>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <MS5607_Init+0x50>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8000e9e:	2300      	movs	r3, #0
  }
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2400051a 	.word	0x2400051a
 8000ea8:	2400072c 	.word	0x2400072c
 8000eac:	2400051c 	.word	0x2400051c

08000eb0 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	75fb      	strb	r3, [r7, #23]
 8000ec0:	e01e      	b.n	8000f00 <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MS5607PromRead+0x98>)
 8000ed2:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8000ed4:	f000 f83c 	bl	8000f50 <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000ed8:	230a      	movs	r3, #10
 8000eda:	2201      	movs	r2, #1
 8000edc:	491a      	ldr	r1, [pc, #104]	@ (8000f48 <MS5607PromRead+0x98>)
 8000ede:	481b      	ldr	r0, [pc, #108]	@ (8000f4c <MS5607PromRead+0x9c>)
 8000ee0:	f009 f8ca 	bl	800a078 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	6939      	ldr	r1, [r7, #16]
 8000eea:	4818      	ldr	r0, [pc, #96]	@ (8000f4c <MS5607PromRead+0x9c>)
 8000eec:	f009 fab2 	bl	800a454 <HAL_SPI_Receive>
    disableCSB();
 8000ef0:	f000 f83a 	bl	8000f68 <disableCSB>
    structPointer++;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	3301      	adds	r3, #1
 8000efe:	75fb      	strb	r3, [r7, #23]
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
 8000f02:	2b07      	cmp	r3, #7
 8000f04:	d9dd      	bls.n	8000ec2 <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]
 8000f0e:	e012      	b.n	8000f36 <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	785a      	ldrb	r2, [r3, #1]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3301      	adds	r3, #1
 8000f26:	7afa      	ldrb	r2, [r7, #11]
 8000f28:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	3301      	adds	r3, #1
 8000f34:	75fb      	strb	r3, [r7, #23]
 8000f36:	7dfb      	ldrb	r3, [r7, #23]
 8000f38:	2b07      	cmp	r3, #7
 8000f3a:	d9e9      	bls.n	8000f10 <MS5607PromRead+0x60>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2400051a 	.word	0x2400051a
 8000f4c:	2400072c 	.word	0x2400072c

08000f50 <enableCSB>:
int32_t MS5607GetPressurePa(void){
  return readings.pressure;
}

/* Sets the CS pin */
void enableCSB(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2108      	movs	r1, #8
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <enableCSB+0x14>)
 8000f5a:	f001 fd91 	bl	8002a80 <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	58021000 	.word	0x58021000

08000f68 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <disableCSB+0x14>)
 8000f72:	f001 fd85 	bl	8002a80 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	58021000 	.word	0x58021000

08000f80 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f88:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f8c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f98:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f9c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fa0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa8:	e000      	b.n	8000fac <ITM_SendChar+0x2c>
    {
      __NOP();
 8000faa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f9      	beq.n	8000faa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fb6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
	int i=0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ffc7 	bl	8000f80 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x16>
	}
	return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800100e:	f000 fbfb 	bl	8001808 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f001 f923 	bl	800225c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f81d 	bl	8001054 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800101a:	f000 f89f 	bl	800115c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 faf3 	bl	8001608 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001022:	f000 f8b9 	bl	8001198 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001026:	f000 f8f7 	bl	8001218 <MX_I2C2_Init>
  MX_I2C4_Init();
 800102a:	f000 f935 	bl	8001298 <MX_I2C4_Init>
  MX_SDMMC1_SD_Init();
 800102e:	f000 f973 	bl	8001318 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001032:	f000 f993 	bl	800135c <MX_SPI1_Init>
  MX_SPI4_Init();
 8001036:	f000 f9e7 	bl	8001408 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 800103a:	f000 fa3b 	bl	80014b4 <MX_USART2_UART_Init>
  MX_USART3_Init();
 800103e:	f000 fa85 	bl	800154c <MX_USART3_Init>
  MX_FATFS_Init();
 8001042:	f00d fed1 	bl	800ede8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001046:	f011 fbb9 	bl	80127bc <MX_USB_DEVICE_Init>
//  HAL_GPIO_WritePin(GPIOE, RED_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOE, GREEN_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(GPIOE, WHITE_Pin, GPIO_PIN_RESET);

  SensorManager_Init();
 800104a:	f7ff fb19 	bl	8000680 <SensorManager_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <main+0x44>
	...

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09c      	sub	sp, #112	@ 0x70
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	224c      	movs	r2, #76	@ 0x4c
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f012 ff22 	bl	8013eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2220      	movs	r2, #32
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f012 ff1c 	bl	8013eac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001074:	2002      	movs	r0, #2
 8001076:	f003 fdcf 	bl	8004c18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <SystemClock_Config+0x100>)
 8001080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001082:	4a34      	ldr	r2, [pc, #208]	@ (8001154 <SystemClock_Config+0x100>)
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800108a:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <SystemClock_Config+0x100>)
 800108c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <SystemClock_Config+0x104>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800109c:	4a2e      	ldr	r2, [pc, #184]	@ (8001158 <SystemClock_Config+0x104>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001158 <SystemClock_Config+0x104>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010b0:	bf00      	nop
 80010b2:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <SystemClock_Config+0x104>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010be:	d1f8      	bne.n	80010b2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80010c0:	2323      	movs	r3, #35	@ 0x23
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ce:	2340      	movs	r3, #64	@ 0x40
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010d2:	2301      	movs	r3, #1
 80010d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	2302      	movs	r3, #2
 80010dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80010e2:	230c      	movs	r3, #12
 80010e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010ea:	2303      	movs	r3, #3
 80010ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010f2:	230c      	movs	r3, #12
 80010f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80010f6:	2302      	movs	r3, #2
 80010f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fdd2 	bl	8004cac <HAL_RCC_OscConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800110e:	f000 fba7 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001112:	233f      	movs	r3, #63	@ 0x3f
 8001114:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001116:	2303      	movs	r3, #3
 8001118:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001126:	2340      	movs	r3, #64	@ 0x40
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800112a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001130:	2340      	movs	r3, #64	@ 0x40
 8001132:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2101      	movs	r1, #1
 8001138:	4618      	mov	r0, r3
 800113a:	f004 fa11 	bl	8005560 <HAL_RCC_ClockConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001144:	f000 fb8c 	bl	8001860 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001148:	f004 fbc0 	bl	80058cc <HAL_RCC_EnableCSS>
}
 800114c:	bf00      	nop
 800114e:	3770      	adds	r7, #112	@ 0x70
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	58000400 	.word	0x58000400
 8001158:	58024800 	.word	0x58024800

0800115c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0b0      	sub	sp, #192	@ 0xc0
 8001160:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	22c0      	movs	r2, #192	@ 0xc0
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f012 fe9f 	bl	8013eac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800116e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800117a:	2300      	movs	r3, #0
 800117c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fda5 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 800118c:	f000 fb68 	bl	8001860 <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	37c0      	adds	r7, #192	@ 0xc0
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <MX_I2C1_Init+0x74>)
 800119e:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <MX_I2C1_Init+0x78>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_I2C1_Init+0x74>)
 80011a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001214 <MX_I2C1_Init+0x7c>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <MX_I2C1_Init+0x74>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <MX_I2C1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_I2C1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <MX_I2C1_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_I2C1_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d2:	480e      	ldr	r0, [pc, #56]	@ (800120c <MX_I2C1_Init+0x74>)
 80011d4:	f001 fc6e 	bl	8002ab4 <HAL_I2C_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011de:	f000 fb3f 	bl	8001860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4809      	ldr	r0, [pc, #36]	@ (800120c <MX_I2C1_Init+0x74>)
 80011e6:	f002 f9b5 	bl	8003554 <HAL_I2CEx_ConfigAnalogFilter>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011f0:	f000 fb36 	bl	8001860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f4:	2100      	movs	r1, #0
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_I2C1_Init+0x74>)
 80011f8:	f002 f9f7 	bl	80035ea <HAL_I2CEx_ConfigDigitalFilter>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001202:	f000 fb2d 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2400052c 	.word	0x2400052c
 8001210:	40005400 	.word	0x40005400
 8001214:	00909fce 	.word	0x00909fce

08001218 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <MX_I2C2_Init+0x74>)
 800121e:	4a1c      	ldr	r2, [pc, #112]	@ (8001290 <MX_I2C2_Init+0x78>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <MX_I2C2_Init+0x74>)
 8001224:	4a1b      	ldr	r2, [pc, #108]	@ (8001294 <MX_I2C2_Init+0x7c>)
 8001226:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_I2C2_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <MX_I2C2_Init+0x74>)
 8001230:	2201      	movs	r2, #1
 8001232:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <MX_I2C2_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <MX_I2C2_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_I2C2_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_I2C2_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_I2C2_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001252:	480e      	ldr	r0, [pc, #56]	@ (800128c <MX_I2C2_Init+0x74>)
 8001254:	f001 fc2e 	bl	8002ab4 <HAL_I2C_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800125e:	f000 faff 	bl	8001860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4809      	ldr	r0, [pc, #36]	@ (800128c <MX_I2C2_Init+0x74>)
 8001266:	f002 f975 	bl	8003554 <HAL_I2CEx_ConfigAnalogFilter>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001270:	f000 faf6 	bl	8001860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_I2C2_Init+0x74>)
 8001278:	f002 f9b7 	bl	80035ea <HAL_I2CEx_ConfigDigitalFilter>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001282:	f000 faed 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24000580 	.word	0x24000580
 8001290:	40005800 	.word	0x40005800
 8001294:	00909fce 	.word	0x00909fce

08001298 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <MX_I2C4_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <MX_I2C4_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_I2C4_Init+0x74>)
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <MX_I2C4_Init+0x7c>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_I2C4_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_I2C4_Init+0x74>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_I2C4_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_I2C4_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_I2C4_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_I2C4_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_I2C4_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80012d2:	480e      	ldr	r0, [pc, #56]	@ (800130c <MX_I2C4_Init+0x74>)
 80012d4:	f001 fbee 	bl	8002ab4 <HAL_I2C_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80012de:	f000 fabf 	bl	8001860 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4809      	ldr	r0, [pc, #36]	@ (800130c <MX_I2C4_Init+0x74>)
 80012e6:	f002 f935 	bl	8003554 <HAL_I2CEx_ConfigAnalogFilter>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80012f0:	f000 fab6 	bl	8001860 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_I2C4_Init+0x74>)
 80012f8:	f002 f977 	bl	80035ea <HAL_I2CEx_ConfigDigitalFilter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001302:	f000 faad 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	240005d4 	.word	0x240005d4
 8001310:	58001c00 	.word	0x58001c00
 8001314:	00909fce 	.word	0x00909fce

08001318 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <MX_SDMMC1_SD_Init+0x3c>)
 800131e:	4a0e      	ldr	r2, [pc, #56]	@ (8001358 <MX_SDMMC1_SD_Init+0x40>)
 8001320:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_SDMMC1_SD_Init+0x3c>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <MX_SDMMC1_SD_Init+0x3c>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_SDMMC1_SD_Init+0x3c>)
 8001330:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001334:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <MX_SDMMC1_SD_Init+0x3c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <MX_SDMMC1_SD_Init+0x3c>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  HAL_SD_Init(&hsd1);
 8001342:	4804      	ldr	r0, [pc, #16]	@ (8001354 <MX_SDMMC1_SD_Init+0x3c>)
 8001344:	f007 f9c2 	bl	80086cc <HAL_SD_Init>
  HAL_SD_InitCard(&hsd1);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <MX_SDMMC1_SD_Init+0x3c>)
 800134a:	f007 fa43 	bl	80087d4 <HAL_SD_InitCard>
  //printf("%d \n",ret);
  /* USER CODE END SDMMC1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	24000628 	.word	0x24000628
 8001358:	52007000 	.word	0x52007000

0800135c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001362:	4a28      	ldr	r2, [pc, #160]	@ (8001404 <MX_SPI1_Init+0xa8>)
 8001364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001366:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001368:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800136c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001376:	2203      	movs	r2, #3
 8001378:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <MX_SPI1_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001386:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001388:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800138c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001396:	2200      	movs	r2, #0
 8001398:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <MX_SPI1_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013ec:	f008 fd20 	bl	8009e30 <HAL_SPI_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80013f6:	f000 fa33 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	240006a4 	.word	0x240006a4
 8001404:	40013000 	.word	0x40013000

08001408 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <MX_SPI4_Init+0xa4>)
 800140e:	4a28      	ldr	r2, [pc, #160]	@ (80014b0 <MX_SPI4_Init+0xa8>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001414:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001418:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <MX_SPI4_Init+0xa4>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001420:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001422:	2203      	movs	r2, #3
 8001424:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001426:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <MX_SPI4_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001432:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001434:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001438:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800143a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <MX_SPI4_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001440:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_SPI4_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001452:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001458:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_SPI4_Init+0xa4>)
 800145a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_SPI4_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_SPI4_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <MX_SPI4_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_SPI4_Init+0xa4>)
 8001498:	f008 fcca 	bl	8009e30 <HAL_SPI_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80014a2:	f000 f9dd 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2400072c 	.word	0x2400072c
 80014b0:	40013400 	.word	0x40013400

080014b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b8:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014ba:	4a23      	ldr	r2, [pc, #140]	@ (8001548 <MX_USART2_UART_Init+0x94>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014be:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ea:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014f0:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fc:	4811      	ldr	r0, [pc, #68]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 80014fe:	f009 fb04 	bl	800ab0a <HAL_UART_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001508:	f000 f9aa 	bl	8001860 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150c:	2100      	movs	r1, #0
 800150e:	480d      	ldr	r0, [pc, #52]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 8001510:	f00a fb0d 	bl	800bb2e <HAL_UARTEx_SetTxFifoThreshold>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800151a:	f000 f9a1 	bl	8001860 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800151e:	2100      	movs	r1, #0
 8001520:	4808      	ldr	r0, [pc, #32]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 8001522:	f00a fb42 	bl	800bbaa <HAL_UARTEx_SetRxFifoThreshold>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800152c:	f000 f998 	bl	8001860 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <MX_USART2_UART_Init+0x90>)
 8001532:	f00a fac3 	bl	800babc <HAL_UARTEx_DisableFifoMode>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800153c:	f000 f990 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	240007b4 	.word	0x240007b4
 8001548:	40004400 	.word	0x40004400

0800154c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <MX_USART3_Init+0xb4>)
 8001552:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <MX_USART3_Init+0xb8>)
 8001554:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <MX_USART3_Init+0xb4>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800155e:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <MX_USART3_Init+0xb4>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001564:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <MX_USART3_Init+0xb4>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <MX_USART3_Init+0xb4>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001570:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <MX_USART3_Init+0xb4>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001576:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <MX_USART3_Init+0xb4>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 800157c:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <MX_USART3_Init+0xb4>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001582:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <MX_USART3_Init+0xb4>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001588:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <MX_USART3_Init+0xb4>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <MX_USART3_Init+0xb4>)
 8001590:	2201      	movs	r2, #1
 8001592:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001594:	481a      	ldr	r0, [pc, #104]	@ (8001600 <MX_USART3_Init+0xb4>)
 8001596:	f00a fb95 	bl	800bcc4 <HAL_USART_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 80015a0:	f000 f95e 	bl	8001860 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4816      	ldr	r0, [pc, #88]	@ (8001600 <MX_USART3_Init+0xb4>)
 80015a8:	f00b fa3a 	bl	800ca20 <HAL_USARTEx_SetTxFifoThreshold>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 80015b2:	f000 f955 	bl	8001860 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b6:	2100      	movs	r1, #0
 80015b8:	4811      	ldr	r0, [pc, #68]	@ (8001600 <MX_USART3_Init+0xb4>)
 80015ba:	f00b fa6f 	bl	800ca9c <HAL_USARTEx_SetRxFifoThreshold>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 80015c4:	f000 f94c 	bl	8001860 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 80015c8:	2100      	movs	r1, #0
 80015ca:	480d      	ldr	r0, [pc, #52]	@ (8001600 <MX_USART3_Init+0xb4>)
 80015cc:	f00b f9b2 	bl	800c934 <HAL_USARTEx_ConfigNSS>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 80015d6:	f000 f943 	bl	8001860 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80015da:	4809      	ldr	r0, [pc, #36]	@ (8001600 <MX_USART3_Init+0xb4>)
 80015dc:	f00b f9e7 	bl	800c9ae <HAL_USARTEx_DisableFifoMode>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 80015e6:	f000 f93b 	bl	8001860 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_USART3_Init+0xb4>)
 80015ec:	f00b f94d 	bl	800c88a <HAL_USARTEx_EnableSlaveMode>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART3_Init+0xae>
  {
    Error_Handler();
 80015f6:	f000 f933 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	24000848 	.word	0x24000848
 8001604:	40004800 	.word	0x40004800

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08c      	sub	sp, #48	@ 0x30
 800160c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161e:	4b74      	ldr	r3, [pc, #464]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	4a72      	ldr	r2, [pc, #456]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800162e:	4b70      	ldr	r3, [pc, #448]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	4b6c      	ldr	r3, [pc, #432]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001642:	4a6b      	ldr	r2, [pc, #428]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800164c:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 800164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165a:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001660:	4a63      	ldr	r2, [pc, #396]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 8001662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001666:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800166a:	4b61      	ldr	r3, [pc, #388]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b5d      	ldr	r3, [pc, #372]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167e:	4a5c      	ldr	r2, [pc, #368]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001688:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b56      	ldr	r3, [pc, #344]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169c:	4a54      	ldr	r2, [pc, #336]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a6:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ba:	4a4d      	ldr	r2, [pc, #308]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c4:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <MX_GPIO_Init+0x1e8>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2108      	movs	r1, #8
 80016d6:	4847      	ldr	r0, [pc, #284]	@ (80017f4 <MX_GPIO_Init+0x1ec>)
 80016d8:	f001 f9d2 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5607_ON_GPIO_Port, MS5607_ON_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016e2:	4845      	ldr	r0, [pc, #276]	@ (80017f8 <MX_GPIO_Init+0x1f0>)
 80016e4:	f001 f9cc 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADXL375_ON_Pin|BNO055_ON_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f248 0108 	movw	r1, #32776	@ 0x8008
 80016ee:	4843      	ldr	r0, [pc, #268]	@ (80017fc <MX_GPIO_Init+0x1f4>)
 80016f0:	f001 f9c6 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2110      	movs	r1, #16
 80016f8:	483f      	ldr	r0, [pc, #252]	@ (80017f8 <MX_GPIO_Init+0x1f0>)
 80016fa:	f001 f9c1 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MPL311_ON_Pin|BNO086_ON_Pin, GPIO_PIN_SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001704:	483b      	ldr	r0, [pc, #236]	@ (80017f4 <MX_GPIO_Init+0x1ec>)
 8001706:	f001 f9bb 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BNO086_RST_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001710:	483b      	ldr	r0, [pc, #236]	@ (8001800 <MX_GPIO_Init+0x1f8>)
 8001712:	f001 f9b5 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO055_RST_Pin|GPS_RST_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2118      	movs	r1, #24
 800171a:	483a      	ldr	r0, [pc, #232]	@ (8001804 <MX_GPIO_Init+0x1fc>)
 800171c:	f001 f9b0 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS_Pin MPL311_ON_Pin BNO086_ON_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|MPL311_ON_Pin|BNO086_ON_Pin;
 8001720:	f244 030a 	movw	r3, #16394	@ 0x400a
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	482e      	ldr	r0, [pc, #184]	@ (80017f4 <MX_GPIO_Init+0x1ec>)
 800173a:	f000 ffd9 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS5607_ON_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = MS5607_ON_Pin|SPI1_CS_Pin;
 800173e:	f242 0310 	movw	r3, #8208	@ 0x2010
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4828      	ldr	r0, [pc, #160]	@ (80017f8 <MX_GPIO_Init+0x1f0>)
 8001758:	f000 ffca 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001764:	2302      	movs	r3, #2
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	4823      	ldr	r0, [pc, #140]	@ (80017fc <MX_GPIO_Init+0x1f4>)
 8001770:	f000 ffbe 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_ON_Pin BNO055_ON_Pin */
  GPIO_InitStruct.Pin = ADXL375_ON_Pin|BNO055_ON_Pin;
 8001774:	f248 0308 	movw	r3, #32776	@ 0x8008
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	481b      	ldr	r0, [pc, #108]	@ (80017fc <MX_GPIO_Init+0x1f4>)
 800178e:	f000 ffaf 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HEARTBEAT_Pin BNO086_RST_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin|BNO086_RST_Pin;
 8001792:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4815      	ldr	r0, [pc, #84]	@ (8001800 <MX_GPIO_Init+0x1f8>)
 80017ac:	f000 ffa0 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	480d      	ldr	r0, [pc, #52]	@ (80017fc <MX_GPIO_Init+0x1f4>)
 80017c6:	f000 ff93 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO055_RST_Pin GPS_RST_Pin */
  GPIO_InitStruct.Pin = BNO055_RST_Pin|GPS_RST_Pin;
 80017ca:	2318      	movs	r3, #24
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	4808      	ldr	r0, [pc, #32]	@ (8001804 <MX_GPIO_Init+0x1fc>)
 80017e2:	f000 ff85 	bl	80026f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	@ 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	58024400 	.word	0x58024400
 80017f4:	58021000 	.word	0x58021000
 80017f8:	58020800 	.word	0x58020800
 80017fc:	58020000 	.word	0x58020000
 8001800:	58020400 	.word	0x58020400
 8001804:	58020c00 	.word	0x58020c00

08001808 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800180e:	463b      	mov	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800181a:	f000 fef1 	bl	8002600 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800181e:	2301      	movs	r3, #1
 8001820:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001822:	2300      	movs	r3, #0
 8001824:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800182a:	231f      	movs	r3, #31
 800182c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800182e:	2387      	movs	r3, #135	@ 0x87
 8001830:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001832:	2300      	movs	r3, #0
 8001834:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001836:	2300      	movs	r3, #0
 8001838:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800183a:	2301      	movs	r3, #1
 800183c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800183e:	2301      	movs	r3, #1
 8001840:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800184a:	463b      	mov	r3, r7
 800184c:	4618      	mov	r0, r3
 800184e:	f000 ff0f 	bl	8002670 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001852:	2004      	movs	r0, #4
 8001854:	f000 feec 	bl	8002630 <HAL_MPU_Enable>

}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <Error_Handler+0x8>

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_MspInit+0x30>)
 8001874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001878:	4a08      	ldr	r2, [pc, #32]	@ (800189c <HAL_MspInit+0x30>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_MspInit+0x30>)
 8001884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	58024400 	.word	0x58024400

080018a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0be      	sub	sp, #248	@ 0xf8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	22c0      	movs	r2, #192	@ 0xc0
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f012 faf3 	bl	8013eac <memset>
  if(hi2c->Instance==I2C1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a73      	ldr	r2, [pc, #460]	@ (8001a98 <HAL_I2C_MspInit+0x1f8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d146      	bne.n	800195e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018d0:	f04f 0208 	mov.w	r2, #8
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 f9f2 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80018f2:	f7ff ffb5 	bl	8001860 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	4b69      	ldr	r3, [pc, #420]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fc:	4a67      	ldr	r2, [pc, #412]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001906:	4b65      	ldr	r3, [pc, #404]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001914:	23c0      	movs	r3, #192	@ 0xc0
 8001916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191a:	2312      	movs	r3, #18
 800191c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192c:	2304      	movs	r3, #4
 800192e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001936:	4619      	mov	r1, r3
 8001938:	4859      	ldr	r0, [pc, #356]	@ (8001aa0 <HAL_I2C_MspInit+0x200>)
 800193a:	f000 fed9 	bl	80026f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800193e:	4b57      	ldr	r3, [pc, #348]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001944:	4a55      	ldr	r2, [pc, #340]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001946:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800194a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800194e:	4b53      	ldr	r3, [pc, #332]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800195c:	e098      	b.n	8001a90 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a50      	ldr	r2, [pc, #320]	@ (8001aa4 <HAL_I2C_MspInit+0x204>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d147      	bne.n	80019f8 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001968:	f04f 0208 	mov.w	r2, #8
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	4618      	mov	r0, r3
 8001980:	f004 f9a6 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800198a:	f7ff ff69 	bl	8001860 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	4b43      	ldr	r3, [pc, #268]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001994:	4a41      	ldr	r2, [pc, #260]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800199e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b4:	2312      	movs	r3, #18
 80019b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019c6:	2304      	movs	r3, #4
 80019c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4833      	ldr	r0, [pc, #204]	@ (8001aa0 <HAL_I2C_MspInit+0x200>)
 80019d4:	f000 fe8c 	bl	80026f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019d8:	4b30      	ldr	r3, [pc, #192]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 80019da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019de:	4a2f      	ldr	r2, [pc, #188]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 80019e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019e8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 80019ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
}
 80019f6:	e04b      	b.n	8001a90 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C4)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa8 <HAL_I2C_MspInit+0x208>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d146      	bne.n	8001a90 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001a02:	f04f 0210 	mov.w	r2, #16
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 f959 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8001a24:	f7ff ff1c 	bl	8001860 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a28:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a38:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a46:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4e:	2312      	movs	r3, #18
 8001a50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a60:	2304      	movs	r3, #4
 8001a62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a66:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480f      	ldr	r0, [pc, #60]	@ (8001aac <HAL_I2C_MspInit+0x20c>)
 8001a6e:	f000 fe3f 	bl	80026f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a78:	4a08      	ldr	r2, [pc, #32]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_I2C_MspInit+0x1fc>)
 8001a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
}
 8001a90:	bf00      	nop
 8001a92:	37f8      	adds	r7, #248	@ 0xf8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	58020400 	.word	0x58020400
 8001aa4:	40005800 	.word	0x40005800
 8001aa8:	58001c00 	.word	0x58001c00
 8001aac:	58020c00 	.word	0x58020c00

08001ab0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0bc      	sub	sp, #240	@ 0xf0
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	22c0      	movs	r2, #192	@ 0xc0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f012 f9eb 	bl	8013eac <memset>
  if(hsd->Instance==SDMMC1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a38      	ldr	r2, [pc, #224]	@ (8001bbc <HAL_SD_MspInit+0x10c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d169      	bne.n	8001bb4 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001ae0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 f8eb 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001b00:	f7ff feae 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001b04:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc0 <HAL_SD_MspInit+0x110>)
 8001b06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc0 <HAL_SD_MspInit+0x110>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b10:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001b14:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <HAL_SD_MspInit+0x110>)
 8001b16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <HAL_SD_MspInit+0x110>)
 8001b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b28:	4a25      	ldr	r2, [pc, #148]	@ (8001bc0 <HAL_SD_MspInit+0x110>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b32:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <HAL_SD_MspInit+0x110>)
 8001b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b40:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <HAL_SD_MspInit+0x110>)
 8001b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b46:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc0 <HAL_SD_MspInit+0x110>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_SD_MspInit+0x110>)
 8001b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b5e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001b62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b78:	230c      	movs	r3, #12
 8001b7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b82:	4619      	mov	r1, r3
 8001b84:	480f      	ldr	r0, [pc, #60]	@ (8001bc4 <HAL_SD_MspInit+0x114>)
 8001b86:	f000 fdb3 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bac:	4619      	mov	r1, r3
 8001bae:	4806      	ldr	r0, [pc, #24]	@ (8001bc8 <HAL_SD_MspInit+0x118>)
 8001bb0:	f000 fd9e 	bl	80026f0 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001bb4:	bf00      	nop
 8001bb6:	37f0      	adds	r7, #240	@ 0xf0
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	52007000 	.word	0x52007000
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	58020c00 	.word	0x58020c00

08001bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0bc      	sub	sp, #240	@ 0xf0
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	22c0      	movs	r2, #192	@ 0xc0
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f012 f95d 	bl	8013eac <memset>
  if(hspi->Instance==SPI1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a4c      	ldr	r2, [pc, #304]	@ (8001d28 <HAL_SPI_MspInit+0x15c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d146      	bne.n	8001c8a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001bfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001c08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0e:	f107 0318 	add.w	r3, r7, #24
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f85c 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001c1e:	f7ff fe1f 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c22:	4b42      	ldr	r3, [pc, #264]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c28:	4a40      	ldr	r2, [pc, #256]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001c2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c32:	4b3e      	ldr	r3, [pc, #248]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	4b3a      	ldr	r3, [pc, #232]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c46:	4a39      	ldr	r2, [pc, #228]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c50:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c5e:	23e0      	movs	r3, #224	@ 0xe0
 8001c60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c76:	2305      	movs	r3, #5
 8001c78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c80:	4619      	mov	r1, r3
 8001c82:	482b      	ldr	r0, [pc, #172]	@ (8001d30 <HAL_SPI_MspInit+0x164>)
 8001c84:	f000 fd34 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001c88:	e049      	b.n	8001d1e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI4)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a29      	ldr	r2, [pc, #164]	@ (8001d34 <HAL_SPI_MspInit+0x168>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d144      	bne.n	8001d1e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001c94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca4:	f107 0318 	add.w	r3, r7, #24
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f004 f811 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001cb4:	f7ff fdd4 	bl	8001860 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001cc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cc8:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cdc:	4a13      	ldr	r2, [pc, #76]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001cde:	f043 0310 	orr.w	r3, r3, #16
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_SPI_MspInit+0x160>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001cf4:	2364      	movs	r3, #100	@ 0x64
 8001cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d0c:	2305      	movs	r3, #5
 8001d0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d12:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d16:	4619      	mov	r1, r3
 8001d18:	4807      	ldr	r0, [pc, #28]	@ (8001d38 <HAL_SPI_MspInit+0x16c>)
 8001d1a:	f000 fce9 	bl	80026f0 <HAL_GPIO_Init>
}
 8001d1e:	bf00      	nop
 8001d20:	37f0      	adds	r7, #240	@ 0xf0
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40013000 	.word	0x40013000
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	58020000 	.word	0x58020000
 8001d34:	40013400 	.word	0x40013400
 8001d38:	58021000 	.word	0x58021000

08001d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0ba      	sub	sp, #232	@ 0xe8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	22c0      	movs	r2, #192	@ 0xc0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f012 f8a5 	bl	8013eac <memset>
  if(huart->Instance==USART2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a26      	ldr	r2, [pc, #152]	@ (8001e00 <HAL_UART_MspInit+0xc4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d145      	bne.n	8001df8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d6c:	f04f 0202 	mov.w	r2, #2
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 ffa4 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d8e:	f7ff fd67 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d92:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <HAL_UART_MspInit+0xc8>)
 8001d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d98:	4a1a      	ldr	r2, [pc, #104]	@ (8001e04 <HAL_UART_MspInit+0xc8>)
 8001d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <HAL_UART_MspInit+0xc8>)
 8001da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_UART_MspInit+0xc8>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db6:	4a13      	ldr	r2, [pc, #76]	@ (8001e04 <HAL_UART_MspInit+0xc8>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_UART_MspInit+0xc8>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001dce:	2360      	movs	r3, #96	@ 0x60
 8001dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de6:	2307      	movs	r3, #7
 8001de8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <HAL_UART_MspInit+0xcc>)
 8001df4:	f000 fc7c 	bl	80026f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001df8:	bf00      	nop
 8001dfa:	37e8      	adds	r7, #232	@ 0xe8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40004400 	.word	0x40004400
 8001e04:	58024400 	.word	0x58024400
 8001e08:	58020c00 	.word	0x58020c00

08001e0c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0bc      	sub	sp, #240	@ 0xf0
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	22c0      	movs	r2, #192	@ 0xc0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f012 f83d 	bl	8013eac <memset>
  if(husart->Instance==USART3)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a39      	ldr	r2, [pc, #228]	@ (8001f1c <HAL_USART_MspInit+0x110>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d16b      	bne.n	8001f14 <HAL_USART_MspInit+0x108>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e3c:	f04f 0202 	mov.w	r2, #2
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e4e:	f107 0318 	add.w	r3, r7, #24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 ff3c 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8001e5e:	f7ff fcff 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e62:	4b2f      	ldr	r3, [pc, #188]	@ (8001f20 <HAL_USART_MspInit+0x114>)
 8001e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e68:	4a2d      	ldr	r2, [pc, #180]	@ (8001f20 <HAL_USART_MspInit+0x114>)
 8001e6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e72:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <HAL_USART_MspInit+0x114>)
 8001e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e80:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <HAL_USART_MspInit+0x114>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e86:	4a26      	ldr	r2, [pc, #152]	@ (8001f20 <HAL_USART_MspInit+0x114>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e90:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_USART_MspInit+0x114>)
 8001e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_USART_MspInit+0x114>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f20 <HAL_USART_MspInit+0x114>)
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <HAL_USART_MspInit+0x114>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4810      	ldr	r0, [pc, #64]	@ (8001f24 <HAL_USART_MspInit+0x118>)
 8001ee4:	f000 fc04 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8001ee8:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8001eec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f02:	2307      	movs	r3, #7
 8001f04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4806      	ldr	r0, [pc, #24]	@ (8001f28 <HAL_USART_MspInit+0x11c>)
 8001f10:	f000 fbee 	bl	80026f0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001f14:	bf00      	nop
 8001f16:	37f0      	adds	r7, #240	@ 0xf0
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40004800 	.word	0x40004800
 8001f20:	58024400 	.word	0x58024400
 8001f24:	58020400 	.word	0x58020400
 8001f28:	58020c00 	.word	0x58020c00

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f30:	f003 feb2 	bl	8005c98 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <NMI_Handler+0x8>

08001f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <MemManage_Handler+0x4>

08001f48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <BusFault_Handler+0x4>

08001f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <UsageFault_Handler+0x4>

08001f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f86:	f000 f9db 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f94:	4802      	ldr	r0, [pc, #8]	@ (8001fa0 <OTG_FS_IRQHandler+0x10>)
 8001f96:	f001 fcb5 	bl	8003904 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	24000da4 	.word	0x24000da4

08001fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return 1;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_kill>:

int _kill(int pid, int sig)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fbe:	f011 ffc7 	bl	8013f50 <__errno>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2216      	movs	r2, #22
 8001fc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_exit>:

void _exit (int status)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffe7 	bl	8001fb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fe6:	bf00      	nop
 8001fe8:	e7fd      	b.n	8001fe6 <_exit+0x12>

08001fea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e00a      	b.n	8002012 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ffc:	f3af 8000 	nop.w
 8002000:	4601      	mov	r1, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	60ba      	str	r2, [r7, #8]
 8002008:	b2ca      	uxtb	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	dbf0      	blt.n	8001ffc <_read+0x12>
  }

  return len;
 800201a:	687b      	ldr	r3, [r7, #4]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800204c:	605a      	str	r2, [r3, #4]
  return 0;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_isatty>:

int _isatty(int file)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002064:	2301      	movs	r3, #1
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002072:	b480      	push	{r7}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f011 ff48 	bl	8013f50 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	24080000 	.word	0x24080000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	240008a8 	.word	0x240008a8
 80020f4:	24001650 	.word	0x24001650

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020fc:	4b37      	ldr	r3, [pc, #220]	@ (80021dc <SystemInit+0xe4>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002102:	4a36      	ldr	r2, [pc, #216]	@ (80021dc <SystemInit+0xe4>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800210c:	4b34      	ldr	r3, [pc, #208]	@ (80021e0 <SystemInit+0xe8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	2b06      	cmp	r3, #6
 8002116:	d807      	bhi.n	8002128 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002118:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <SystemInit+0xe8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 030f 	bic.w	r3, r3, #15
 8002120:	4a2f      	ldr	r2, [pc, #188]	@ (80021e0 <SystemInit+0xe8>)
 8002122:	f043 0307 	orr.w	r3, r3, #7
 8002126:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002128:	4b2e      	ldr	r3, [pc, #184]	@ (80021e4 <SystemInit+0xec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2d      	ldr	r2, [pc, #180]	@ (80021e4 <SystemInit+0xec>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002134:	4b2b      	ldr	r3, [pc, #172]	@ (80021e4 <SystemInit+0xec>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800213a:	4b2a      	ldr	r3, [pc, #168]	@ (80021e4 <SystemInit+0xec>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4929      	ldr	r1, [pc, #164]	@ (80021e4 <SystemInit+0xec>)
 8002140:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <SystemInit+0xf0>)
 8002142:	4013      	ands	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002146:	4b26      	ldr	r3, [pc, #152]	@ (80021e0 <SystemInit+0xe8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002152:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <SystemInit+0xe8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 030f 	bic.w	r3, r3, #15
 800215a:	4a21      	ldr	r2, [pc, #132]	@ (80021e0 <SystemInit+0xe8>)
 800215c:	f043 0307 	orr.w	r3, r3, #7
 8002160:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002162:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <SystemInit+0xec>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002168:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <SystemInit+0xec>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800216e:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <SystemInit+0xec>)
 8002170:	2200      	movs	r2, #0
 8002172:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <SystemInit+0xec>)
 8002176:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <SystemInit+0xf4>)
 8002178:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800217a:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <SystemInit+0xec>)
 800217c:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <SystemInit+0xf8>)
 800217e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002180:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <SystemInit+0xec>)
 8002182:	4a1c      	ldr	r2, [pc, #112]	@ (80021f4 <SystemInit+0xfc>)
 8002184:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002186:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <SystemInit+0xec>)
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800218c:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <SystemInit+0xec>)
 800218e:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <SystemInit+0xfc>)
 8002190:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002192:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <SystemInit+0xec>)
 8002194:	2200      	movs	r2, #0
 8002196:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <SystemInit+0xec>)
 800219a:	4a16      	ldr	r2, [pc, #88]	@ (80021f4 <SystemInit+0xfc>)
 800219c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800219e:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <SystemInit+0xec>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <SystemInit+0xec>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0e      	ldr	r2, [pc, #56]	@ (80021e4 <SystemInit+0xec>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <SystemInit+0xec>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <SystemInit+0x100>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <SystemInit+0x104>)
 80021bc:	4013      	ands	r3, r2
 80021be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021c2:	d202      	bcs.n	80021ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <SystemInit+0x108>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <SystemInit+0x10c>)
 80021cc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80021d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	52002000 	.word	0x52002000
 80021e4:	58024400 	.word	0x58024400
 80021e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80021ec:	02020200 	.word	0x02020200
 80021f0:	01ff0000 	.word	0x01ff0000
 80021f4:	01010280 	.word	0x01010280
 80021f8:	5c001000 	.word	0x5c001000
 80021fc:	ffff0000 	.word	0xffff0000
 8002200:	51008108 	.word	0x51008108
 8002204:	52004000 	.word	0x52004000

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002240 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800220c:	f7ff ff74 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	@ (8002248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	@ (8002254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002236:	f011 fe91 	bl	8013f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7fe fee6 	bl	800100a <main>
  bx  lr
 800223e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002240:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002244:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002248:	240002e0 	.word	0x240002e0
  ldr r2, =_sidata
 800224c:	08016040 	.word	0x08016040
  ldr r2, =_sbss
 8002250:	240002e0 	.word	0x240002e0
  ldr r4, =_ebss
 8002254:	2400164c 	.word	0x2400164c

08002258 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC3_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002262:	2003      	movs	r0, #3
 8002264:	f000 f98c 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002268:	f003 fb40 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <HAL_Init+0x68>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	4913      	ldr	r1, [pc, #76]	@ (80022c8 <HAL_Init+0x6c>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <HAL_Init+0x68>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	4a0e      	ldr	r2, [pc, #56]	@ (80022c8 <HAL_Init+0x6c>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
 800229c:	4a0b      	ldr	r2, [pc, #44]	@ (80022cc <HAL_Init+0x70>)
 800229e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022a0:	4a0b      	ldr	r2, [pc, #44]	@ (80022d0 <HAL_Init+0x74>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a6:	200f      	movs	r0, #15
 80022a8:	f000 f814 	bl	80022d4 <HAL_InitTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e002      	b.n	80022bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022b6:	f7ff fad9 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	58024400 	.word	0x58024400
 80022c8:	08015c3c 	.word	0x08015c3c
 80022cc:	24000018 	.word	0x24000018
 80022d0:	24000014 	.word	0x24000014

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022dc:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <HAL_InitTick+0x60>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e021      	b.n	800232c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022e8:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <HAL_InitTick+0x64>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_InitTick+0x60>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f971 	bl	80025e6 <HAL_SYSTICK_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e00e      	b.n	800232c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d80a      	bhi.n	800232a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f000 f93b 	bl	8002596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002320:	4a06      	ldr	r2, [pc, #24]	@ (800233c <HAL_InitTick+0x68>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	24000020 	.word	0x24000020
 8002338:	24000014 	.word	0x24000014
 800233c:	2400001c 	.word	0x2400001c

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	24000020 	.word	0x24000020
 8002364:	240008ac 	.word	0x240008ac

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	240008ac 	.word	0x240008ac

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	24000020 	.word	0x24000020

080023c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023cc:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <HAL_GetREVID+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0c1b      	lsrs	r3, r3, #16
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	5c001000 	.word	0x5c001000

080023e0 <__NVIC_SetPriorityGrouping>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <__NVIC_SetPriorityGrouping+0x40>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	4313      	orrs	r3, r2
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <__NVIC_SetPriorityGrouping+0x40>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00
 8002424:	05fa0000 	.word	0x05fa0000

08002428 <__NVIC_GetPriorityGrouping>:
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800242c:	4b04      	ldr	r3, [pc, #16]	@ (8002440 <__NVIC_GetPriorityGrouping+0x18>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	f003 0307 	and.w	r3, r3, #7
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_EnableIRQ>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db0b      	blt.n	800246e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4907      	ldr	r1, [pc, #28]	@ (800247c <__NVIC_EnableIRQ+0x38>)
 800245e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000e100 	.word	0xe000e100

08002480 <__NVIC_SetPriority>:
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800248c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	490c      	ldr	r1, [pc, #48]	@ (80024cc <__NVIC_SetPriority+0x4c>)
 800249a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024a8:	e00a      	b.n	80024c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4908      	ldr	r1, [pc, #32]	@ (80024d0 <__NVIC_SetPriority+0x50>)
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3b04      	subs	r3, #4
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	440b      	add	r3, r1
 80024be:	761a      	strb	r2, [r3, #24]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <NVIC_EncodePriority>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	@ 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f1c3 0307 	rsb	r3, r3, #7
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf28      	it	cs
 80024f2:	2304      	movcs	r3, #4
 80024f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d902      	bls.n	8002504 <NVIC_EncodePriority+0x30>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3b03      	subs	r3, #3
 8002502:	e000      	b.n	8002506 <NVIC_EncodePriority+0x32>
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	f04f 32ff 	mov.w	r2, #4294967295
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	401a      	ands	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800251c:	f04f 31ff 	mov.w	r1, #4294967295
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43d9      	mvns	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	4313      	orrs	r3, r2
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	@ 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <SysTick_Config>:
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff8e 	bl	8002480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	@ (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff29 	bl	80023e0 <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff40 	bl	8002428 <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff90 	bl	80024d4 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5f 	bl	8002480 <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff33 	bl	8002444 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa4 	bl	800253c <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002604:	f3bf 8f5f 	dmb	sy
}
 8002608:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800260a:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <HAL_MPU_Disable+0x28>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	4a06      	ldr	r2, [pc, #24]	@ (8002628 <HAL_MPU_Disable+0x28>)
 8002610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002614:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002616:	4b05      	ldr	r3, [pc, #20]	@ (800262c <HAL_MPU_Disable+0x2c>)
 8002618:	2200      	movs	r2, #0
 800261a:	605a      	str	r2, [r3, #4]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000ed00 	.word	0xe000ed00
 800262c:	e000ed90 	.word	0xe000ed90

08002630 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002638:	4a0b      	ldr	r2, [pc, #44]	@ (8002668 <HAL_MPU_Enable+0x38>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002642:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <HAL_MPU_Enable+0x3c>)
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	4a09      	ldr	r2, [pc, #36]	@ (800266c <HAL_MPU_Enable+0x3c>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800264e:	f3bf 8f4f 	dsb	sy
}
 8002652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002654:	f3bf 8f6f 	isb	sy
}
 8002658:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed90 	.word	0xe000ed90
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	785a      	ldrb	r2, [r3, #1]
 800267c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HAL_MPU_ConfigRegion+0x7c>)
 800267e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002680:	4b1a      	ldr	r3, [pc, #104]	@ (80026ec <HAL_MPU_ConfigRegion+0x7c>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	4a19      	ldr	r2, [pc, #100]	@ (80026ec <HAL_MPU_ConfigRegion+0x7c>)
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800268c:	4a17      	ldr	r2, [pc, #92]	@ (80026ec <HAL_MPU_ConfigRegion+0x7c>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7b1b      	ldrb	r3, [r3, #12]
 8002698:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7adb      	ldrb	r3, [r3, #11]
 800269e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7a9b      	ldrb	r3, [r3, #10]
 80026a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	7b5b      	ldrb	r3, [r3, #13]
 80026ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7b9b      	ldrb	r3, [r3, #14]
 80026b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7bdb      	ldrb	r3, [r3, #15]
 80026be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	7a5b      	ldrb	r3, [r3, #9]
 80026c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7a1b      	ldrb	r3, [r3, #8]
 80026ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026d8:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026dc:	6113      	str	r3, [r2, #16]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed90 	.word	0xe000ed90

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026fe:	4b89      	ldr	r3, [pc, #548]	@ (8002924 <HAL_GPIO_Init+0x234>)
 8002700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002702:	e194      	b.n	8002a2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8186 	beq.w	8002a28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d005      	beq.n	8002734 <HAL_GPIO_Init+0x44>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d130      	bne.n	8002796 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800276a:	2201      	movs	r2, #1
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	f003 0201 	and.w	r2, r3, #1
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d017      	beq.n	80027d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2203      	movs	r2, #3
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d123      	bne.n	8002826 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	69b9      	ldr	r1, [r7, #24]
 8002822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	2203      	movs	r2, #3
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0203 	and.w	r2, r3, #3
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80e0 	beq.w	8002a28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002868:	4b2f      	ldr	r3, [pc, #188]	@ (8002928 <HAL_GPIO_Init+0x238>)
 800286a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800286e:	4a2e      	ldr	r2, [pc, #184]	@ (8002928 <HAL_GPIO_Init+0x238>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002878:	4b2b      	ldr	r3, [pc, #172]	@ (8002928 <HAL_GPIO_Init+0x238>)
 800287a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a29      	ldr	r2, [pc, #164]	@ (800292c <HAL_GPIO_Init+0x23c>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a20      	ldr	r2, [pc, #128]	@ (8002930 <HAL_GPIO_Init+0x240>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d052      	beq.n	8002958 <HAL_GPIO_Init+0x268>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <HAL_GPIO_Init+0x244>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d031      	beq.n	800291e <HAL_GPIO_Init+0x22e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002938 <HAL_GPIO_Init+0x248>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d02b      	beq.n	800291a <HAL_GPIO_Init+0x22a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1d      	ldr	r2, [pc, #116]	@ (800293c <HAL_GPIO_Init+0x24c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d025      	beq.n	8002916 <HAL_GPIO_Init+0x226>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002940 <HAL_GPIO_Init+0x250>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d01f      	beq.n	8002912 <HAL_GPIO_Init+0x222>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002944 <HAL_GPIO_Init+0x254>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d019      	beq.n	800290e <HAL_GPIO_Init+0x21e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <HAL_GPIO_Init+0x258>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_Init+0x21a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a19      	ldr	r2, [pc, #100]	@ (800294c <HAL_GPIO_Init+0x25c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00d      	beq.n	8002906 <HAL_GPIO_Init+0x216>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_GPIO_Init+0x260>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <HAL_GPIO_Init+0x212>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <HAL_GPIO_Init+0x264>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d101      	bne.n	80028fe <HAL_GPIO_Init+0x20e>
 80028fa:	2309      	movs	r3, #9
 80028fc:	e02d      	b.n	800295a <HAL_GPIO_Init+0x26a>
 80028fe:	230a      	movs	r3, #10
 8002900:	e02b      	b.n	800295a <HAL_GPIO_Init+0x26a>
 8002902:	2308      	movs	r3, #8
 8002904:	e029      	b.n	800295a <HAL_GPIO_Init+0x26a>
 8002906:	2307      	movs	r3, #7
 8002908:	e027      	b.n	800295a <HAL_GPIO_Init+0x26a>
 800290a:	2306      	movs	r3, #6
 800290c:	e025      	b.n	800295a <HAL_GPIO_Init+0x26a>
 800290e:	2305      	movs	r3, #5
 8002910:	e023      	b.n	800295a <HAL_GPIO_Init+0x26a>
 8002912:	2304      	movs	r3, #4
 8002914:	e021      	b.n	800295a <HAL_GPIO_Init+0x26a>
 8002916:	2303      	movs	r3, #3
 8002918:	e01f      	b.n	800295a <HAL_GPIO_Init+0x26a>
 800291a:	2302      	movs	r3, #2
 800291c:	e01d      	b.n	800295a <HAL_GPIO_Init+0x26a>
 800291e:	2301      	movs	r3, #1
 8002920:	e01b      	b.n	800295a <HAL_GPIO_Init+0x26a>
 8002922:	bf00      	nop
 8002924:	58000080 	.word	0x58000080
 8002928:	58024400 	.word	0x58024400
 800292c:	58000400 	.word	0x58000400
 8002930:	58020000 	.word	0x58020000
 8002934:	58020400 	.word	0x58020400
 8002938:	58020800 	.word	0x58020800
 800293c:	58020c00 	.word	0x58020c00
 8002940:	58021000 	.word	0x58021000
 8002944:	58021400 	.word	0x58021400
 8002948:	58021800 	.word	0x58021800
 800294c:	58021c00 	.word	0x58021c00
 8002950:	58022000 	.word	0x58022000
 8002954:	58022400 	.word	0x58022400
 8002958:	2300      	movs	r3, #0
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	f002 0203 	and.w	r2, r2, #3
 8002960:	0092      	lsls	r2, r2, #2
 8002962:	4093      	lsls	r3, r2
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800296a:	4938      	ldr	r1, [pc, #224]	@ (8002a4c <HAL_GPIO_Init+0x35c>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800299e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f47f ae63 	bne.w	8002704 <HAL_GPIO_Init+0x14>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	3724      	adds	r7, #36	@ 0x24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	58000400 	.word	0x58000400

08002a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e001      	b.n	8002a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08b      	b.n	8002bde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fee0 	bl	80018a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	@ 0x24
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e006      	b.n	8002b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d108      	bne.n	8002b56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	e007      	b.n	8002b66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <HAL_I2C_Init+0x134>)
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	02008000 	.word	0x02008000

08002bec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	817b      	strh	r3, [r7, #10]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	f040 80fd 	bne.w	8002e08 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_I2C_Master_Transmit+0x30>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0f6      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c24:	f7ff fba0 	bl	8002368 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2319      	movs	r3, #25
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fa0a 	bl	8003050 <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0e1      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2221      	movs	r2, #33	@ 0x21
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2210      	movs	r2, #16
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	893a      	ldrh	r2, [r7, #8]
 8002c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2bff      	cmp	r3, #255	@ 0xff
 8002c76:	d906      	bls.n	8002c86 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	22ff      	movs	r2, #255	@ 0xff
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e007      	b.n	8002c96 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c94:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d024      	beq.n	8002ce8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	4b4e      	ldr	r3, [pc, #312]	@ (8002e14 <HAL_I2C_Master_Transmit+0x228>)
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fc05 	bl	80034f0 <I2C_TransferConfig>
 8002ce6:	e066      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	8979      	ldrh	r1, [r7, #10]
 8002cf0:	4b48      	ldr	r3, [pc, #288]	@ (8002e14 <HAL_I2C_Master_Transmit+0x228>)
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fbfa 	bl	80034f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002cfc:	e05b      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f9fd 	bl	8003102 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e07b      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d034      	beq.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d130      	bne.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2180      	movs	r1, #128	@ 0x80
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f976 	bl	8003050 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e04d      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2bff      	cmp	r3, #255	@ 0xff
 8002d76:	d90e      	bls.n	8002d96 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	22ff      	movs	r2, #255	@ 0xff
 8002d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	8979      	ldrh	r1, [r7, #10]
 8002d86:	2300      	movs	r3, #0
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fbae 	bl	80034f0 <I2C_TransferConfig>
 8002d94:	e00f      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	8979      	ldrh	r1, [r7, #10]
 8002da8:	2300      	movs	r3, #0
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fb9d 	bl	80034f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d19e      	bne.n	8002cfe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	6a39      	ldr	r1, [r7, #32]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f9e3 	bl	8003190 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e01a      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <HAL_I2C_Master_Transmit+0x22c>)
 8002de8:	400b      	ands	r3, r1
 8002dea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	80002000 	.word	0x80002000
 8002e18:	fe00e800 	.word	0xfe00e800

08002e1c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	461a      	mov	r2, r3
 8002e28:	460b      	mov	r3, r1
 8002e2a:	817b      	strh	r3, [r7, #10]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	f040 80db 	bne.w	8002ff4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_I2C_Master_Receive+0x30>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e0d4      	b.n	8002ff6 <HAL_I2C_Master_Receive+0x1da>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e54:	f7ff fa88 	bl	8002368 <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2319      	movs	r3, #25
 8002e60:	2201      	movs	r2, #1
 8002e62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8f2 	bl	8003050 <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0bf      	b.n	8002ff6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2222      	movs	r2, #34	@ 0x22
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2210      	movs	r2, #16
 8002e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	893a      	ldrh	r2, [r7, #8]
 8002e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2bff      	cmp	r3, #255	@ 0xff
 8002ea6:	d90e      	bls.n	8002ec6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	22ff      	movs	r2, #255	@ 0xff
 8002eac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	8979      	ldrh	r1, [r7, #10]
 8002eb6:	4b52      	ldr	r3, [pc, #328]	@ (8003000 <HAL_I2C_Master_Receive+0x1e4>)
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fb16 	bl	80034f0 <I2C_TransferConfig>
 8002ec4:	e06d      	b.n	8002fa2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	4b49      	ldr	r3, [pc, #292]	@ (8003000 <HAL_I2C_Master_Receive+0x1e4>)
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fb05 	bl	80034f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ee6:	e05c      	b.n	8002fa2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	6a39      	ldr	r1, [r7, #32]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f993 	bl	8003218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e07c      	b.n	8002ff6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d034      	beq.n	8002fa2 <HAL_I2C_Master_Receive+0x186>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d130      	bne.n	8002fa2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2200      	movs	r2, #0
 8002f48:	2180      	movs	r1, #128	@ 0x80
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f880 	bl	8003050 <I2C_WaitOnFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e04d      	b.n	8002ff6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2bff      	cmp	r3, #255	@ 0xff
 8002f62:	d90e      	bls.n	8002f82 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	22ff      	movs	r2, #255	@ 0xff
 8002f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	2300      	movs	r3, #0
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fab8 	bl	80034f0 <I2C_TransferConfig>
 8002f80:	e00f      	b.n	8002fa2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	8979      	ldrh	r1, [r7, #10]
 8002f94:	2300      	movs	r3, #0
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 faa7 	bl	80034f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d19d      	bne.n	8002ee8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	6a39      	ldr	r1, [r7, #32]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f8ed 	bl	8003190 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e01a      	b.n	8002ff6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <HAL_I2C_Master_Receive+0x1e8>)
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e000      	b.n	8002ff6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	80002400 	.word	0x80002400
 8003004:	fe00e800 	.word	0xfe00e800

08003008 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d103      	bne.n	8003026 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d007      	beq.n	8003044 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	619a      	str	r2, [r3, #24]
  }
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003060:	e03b      	b.n	80030da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f962 	bl	8003330 <I2C_IsErrorOccurred>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e041      	b.n	80030fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d02d      	beq.n	80030da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7ff f973 	bl	8002368 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x44>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d122      	bne.n	80030da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d113      	bne.n	80030da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e00f      	b.n	80030fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d0b4      	beq.n	8003062 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800310e:	e033      	b.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f90b 	bl	8003330 <I2C_IsErrorOccurred>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e031      	b.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d025      	beq.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7ff f91c 	bl	8002368 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11a      	bne.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b02      	cmp	r3, #2
 800314e:	d013      	beq.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e007      	b.n	8003188 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d1c4      	bne.n	8003110 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800319c:	e02f      	b.n	80031fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8c4 	bl	8003330 <I2C_IsErrorOccurred>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e02d      	b.n	800320e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7ff f8d9 	bl	8002368 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11a      	bne.n	80031fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d013      	beq.n	80031fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	f043 0220 	orr.w	r2, r3, #32
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e007      	b.n	800320e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b20      	cmp	r3, #32
 800320a:	d1c8      	bne.n	800319e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003228:	e071      	b.n	800330e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f87e 	bl	8003330 <I2C_IsErrorOccurred>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b20      	cmp	r3, #32
 800324a:	d13b      	bne.n	80032c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d138      	bne.n	80032c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b04      	cmp	r3, #4
 800325e:	d105      	bne.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b10      	cmp	r3, #16
 8003278:	d121      	bne.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2210      	movs	r2, #16
 8003280:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2204      	movs	r2, #4
 8003286:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2220      	movs	r2, #32
 800328e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b24      	ldr	r3, [pc, #144]	@ (800332c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800329c:	400b      	ands	r3, r1
 800329e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
 80032bc:	e002      	b.n	80032c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80032c4:	f7ff f850 	bl	8002368 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d302      	bcc.n	80032da <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d119      	bne.n	800330e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d116      	bne.n	800330e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d00f      	beq.n	800330e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d002      	beq.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d083      	beq.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003322:	7dfb      	ldrb	r3, [r7, #23]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	fe00e800 	.word	0xfe00e800

08003330 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d068      	beq.n	800342e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2210      	movs	r2, #16
 8003362:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003364:	e049      	b.n	80033fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d045      	beq.n	80033fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7fe fffb 	bl	8002368 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <I2C_IsErrorOccurred+0x54>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d13a      	bne.n	80033fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003396:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a6:	d121      	bne.n	80033ec <I2C_IsErrorOccurred+0xbc>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ae:	d01d      	beq.n	80033ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d01a      	beq.n	80033ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033c6:	f7fe ffcf 	bl	8002368 <HAL_GetTick>
 80033ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033cc:	e00e      	b.n	80033ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ce:	f7fe ffcb 	bl	8002368 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b19      	cmp	r3, #25
 80033da:	d907      	bls.n	80033ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	f043 0320 	orr.w	r3, r3, #32
 80033e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033ea:	e006      	b.n	80033fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d1e9      	bne.n	80033ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b20      	cmp	r3, #32
 8003406:	d003      	beq.n	8003410 <I2C_IsErrorOccurred+0xe0>
 8003408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0aa      	beq.n	8003366 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2220      	movs	r2, #32
 800341e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f043 0308 	orr.w	r3, r3, #8
 8003468:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003472:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800349c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01c      	beq.n	80034de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff fdaf 	bl	8003008 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <I2C_IsErrorOccurred+0x1bc>)
 80034b6:	400b      	ands	r3, r1
 80034b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80034de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3728      	adds	r7, #40	@ 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	fe00e800 	.word	0xfe00e800

080034f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	817b      	strh	r3, [r7, #10]
 80034fe:	4613      	mov	r3, r2
 8003500:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003508:	7a7b      	ldrb	r3, [r7, #9]
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003510:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	4313      	orrs	r3, r2
 800351a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800351e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	0d5b      	lsrs	r3, r3, #21
 800352a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <I2C_TransferConfig+0x60>)
 8003530:	430b      	orrs	r3, r1
 8003532:	43db      	mvns	r3, r3
 8003534:	ea02 0103 	and.w	r1, r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	03ff63ff 	.word	0x03ff63ff

08003554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	d138      	bne.n	80035dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003574:	2302      	movs	r3, #2
 8003576:	e032      	b.n	80035de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	@ 0x24
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6819      	ldr	r1, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d139      	bne.n	8003674 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800360a:	2302      	movs	r3, #2
 800360c:	e033      	b.n	8003676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2224      	movs	r2, #36	@ 0x24
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800363c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af02      	add	r7, sp, #8
 8003688:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0fe      	b.n	8003892 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f00f fa67 	bl	8012b7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2203      	movs	r2, #3
 80036b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f00a f965 	bl	800d98a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7c1a      	ldrb	r2, [r3, #16]
 80036c8:	f88d 2000 	strb.w	r2, [sp]
 80036cc:	3304      	adds	r3, #4
 80036ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d0:	f00a f836 	bl	800d740 <USB_CoreInit>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0d5      	b.n	8003892 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f00a f95d 	bl	800d9ac <USB_SetCurrentMode>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0c6      	b.n	8003892 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	e04a      	b.n	80037a0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3315      	adds	r3, #21
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3314      	adds	r3, #20
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	b298      	uxth	r0, r3
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	332e      	adds	r3, #46	@ 0x2e
 8003746:	4602      	mov	r2, r0
 8003748:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3318      	adds	r3, #24
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	331c      	adds	r3, #28
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3320      	adds	r3, #32
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3324      	adds	r3, #36	@ 0x24
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	3301      	adds	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	791b      	ldrb	r3, [r3, #4]
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3af      	bcc.n	800370a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	e044      	b.n	800383a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	3301      	adds	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	791b      	ldrb	r3, [r3, #4]
 800383e:	7bfa      	ldrb	r2, [r7, #15]
 8003840:	429a      	cmp	r2, r3
 8003842:	d3b5      	bcc.n	80037b0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7c1a      	ldrb	r2, [r3, #16]
 800384c:	f88d 2000 	strb.w	r2, [sp]
 8003850:	3304      	adds	r3, #4
 8003852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003854:	f00a f8f6 	bl	800da44 <USB_DevInit>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e013      	b.n	8003892 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7b1b      	ldrb	r3, [r3, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d102      	bne.n	8003886 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f001 f999 	bl	8004bb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f00b f935 	bl	800eafa <USB_DevDisconnect>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_PCD_Start+0x1c>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e022      	b.n	80038fc <HAL_PCD_Start+0x62>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f00a f840 	bl	800d968 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f00b f8e3 	bl	800eab8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b08d      	sub	sp, #52	@ 0x34
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f00b f9a1 	bl	800ec62 <USB_GetMode>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 84b9 	bne.w	800429a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f00b f905 	bl	800eb3c <USB_ReadInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 84af 	beq.w	8004298 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f00b f8f2 	bl	800eb3c <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d107      	bne.n	8003972 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f002 0202 	and.w	r2, r2, #2
 8003970:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f00b f8e0 	bl	800eb3c <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b10      	cmp	r3, #16
 8003984:	d161      	bne.n	8003a4a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0210 	bic.w	r2, r2, #16
 8003994:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f003 020f 	and.w	r2, r3, #15
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	3304      	adds	r3, #4
 80039b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	0c5b      	lsrs	r3, r3, #17
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d124      	bne.n	8003a0c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d035      	beq.n	8003a3a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039dc:	b29b      	uxth	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	6a38      	ldr	r0, [r7, #32]
 80039e2:	f00a ff17 	bl	800e814 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039f2:	441a      	add	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a04:	441a      	add	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	615a      	str	r2, [r3, #20]
 8003a0a:	e016      	b.n	8003a3a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	0c5b      	lsrs	r3, r3, #17
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	2b06      	cmp	r3, #6
 8003a16:	d110      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a1e:	2208      	movs	r2, #8
 8003a20:	4619      	mov	r1, r3
 8003a22:	6a38      	ldr	r0, [r7, #32]
 8003a24:	f00a fef6 	bl	800e814 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a34:	441a      	add	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0210 	orr.w	r2, r2, #16
 8003a48:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00b f874 	bl	800eb3c <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a5a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a5e:	f040 80a7 	bne.w	8003bb0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f00b f879 	bl	800eb62 <USB_ReadDevAllOutEpInterrupt>
 8003a70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003a72:	e099      	b.n	8003ba8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 808e 	beq.w	8003b9c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f00b f89d 	bl	800ebca <USB_ReadDevOutEPInterrupt>
 8003a90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2301      	movs	r3, #1
 8003aac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003aae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fefb 	bl	80048ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	2308      	movs	r3, #8
 8003ad0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ad2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 ffd1 	bl	8004a7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af0:	461a      	mov	r2, r3
 8003af2:	2310      	movs	r3, #16
 8003af4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d030      	beq.n	8003b62 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b08:	2b80      	cmp	r3, #128	@ 0x80
 8003b0a:	d109      	bne.n	8003b20 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b1e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	78db      	ldrb	r3, [r3, #3]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d108      	bne.n	8003b50 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2200      	movs	r2, #0
 8003b42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f00f f93c 	bl	8012dc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2302      	movs	r3, #2
 8003b60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b94:	461a      	mov	r2, r3
 8003b96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f47f af62 	bne.w	8003a74 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f00a ffc1 	bl	800eb3c <USB_ReadInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bc4:	f040 80db 	bne.w	8003d7e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f00a ffe2 	bl	800eb96 <USB_ReadDevAllInEpInterrupt>
 8003bd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003bd8:	e0cd      	b.n	8003d76 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80c2 	beq.w	8003d6a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00b f808 	bl	800ec06 <USB_ReadDevInEPInterrupt>
 8003bf6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d057      	beq.n	8003cb2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	2201      	movs	r2, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69f9      	ldr	r1, [r7, #28]
 8003c1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c22:	4013      	ands	r3, r2
 8003c24:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c32:	461a      	mov	r2, r3
 8003c34:	2301      	movs	r3, #1
 8003c36:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	799b      	ldrb	r3, [r3, #6]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d132      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3320      	adds	r3, #32
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4403      	add	r3, r0
 8003c60:	331c      	adds	r3, #28
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4419      	add	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4403      	add	r3, r0
 8003c74:	3320      	adds	r3, #32
 8003c76:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x3a2>
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3324      	adds	r3, #36	@ 0x24
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	f00b f811 	bl	800ecc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	4619      	mov	r1, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f00f f806 	bl	8012cbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2308      	movs	r3, #8
 8003ccc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d00:	461a      	mov	r2, r3
 8003d02:	2340      	movs	r3, #64	@ 0x40
 8003d04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d023      	beq.n	8003d58 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d12:	6a38      	ldr	r0, [r7, #32]
 8003d14:	f009 fff4 	bl	800dd00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	3310      	adds	r3, #16
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4413      	add	r3, r2
 8003d28:	3304      	adds	r3, #4
 8003d2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	78db      	ldrb	r3, [r3, #3]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2200      	movs	r2, #0
 8003d38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f00f f853 	bl	8012dec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d52:	461a      	mov	r2, r3
 8003d54:	2302      	movs	r3, #2
 8003d56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fd15 	bl	8004794 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f47f af2e 	bne.w	8003bda <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f00a feda 	bl	800eb3c <USB_ReadInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d92:	d122      	bne.n	8003dda <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d108      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 ff1f 	bl	8004c00 <HAL_PCDEx_LPM_Callback>
 8003dc2:	e002      	b.n	8003dca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f00e fff1 	bl	8012dac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f00a feac 	bl	800eb3c <USB_ReadInterrupts>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dee:	d112      	bne.n	8003e16 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f00e ffad 	bl	8012d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f00a fe8e 	bl	800eb3c <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e2a:	d121      	bne.n	8003e70 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003e3a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d111      	bne.n	8003e6a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	f003 020f 	and.w	r2, r3, #15
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e60:	2101      	movs	r1, #1
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fecc 	bl	8004c00 <HAL_PCDEx_LPM_Callback>
 8003e68:	e002      	b.n	8003e70 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f00e ff78 	bl	8012d60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f00a fe61 	bl	800eb3c <USB_ReadInterrupts>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e84:	f040 80b7 	bne.w	8003ff6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2110      	movs	r1, #16
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f009 ff2c 	bl	800dd00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eac:	e046      	b.n	8003f3c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ec0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003edc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ee0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ef4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f10:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f26:	0151      	lsls	r1, r2, #5
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	440a      	add	r2, r1
 8003f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f34:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f38:	3301      	adds	r3, #1
 8003f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	791b      	ldrb	r3, [r3, #4]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d3b2      	bcc.n	8003eae <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f56:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f5a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	7bdb      	ldrb	r3, [r3, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d016      	beq.n	8003f92 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f74:	f043 030b 	orr.w	r3, r3, #11
 8003f78:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f8a:	f043 030b 	orr.w	r3, r3, #11
 8003f8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f90:	e015      	b.n	8003fbe <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fb8:	f043 030b 	orr.w	r3, r3, #11
 8003fbc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fcc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003fd0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f00a fe71 	bl	800ecc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f00a fd9e 	bl	800eb3c <USB_ReadInterrupts>
 8004000:	4603      	mov	r3, r0
 8004002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800400a:	d123      	bne.n	8004054 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f00a fe35 	bl	800ec80 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f009 fee9 	bl	800ddf2 <USB_GetDevSpeed>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681c      	ldr	r4, [r3, #0]
 800402c:	f001 fdd8 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8004030:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004036:	461a      	mov	r2, r3
 8004038:	4620      	mov	r0, r4
 800403a:	f009 fbf3 	bl	800d824 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f00e fe65 	bl	8012d0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004052:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f00a fd6f 	bl	800eb3c <USB_ReadInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b08      	cmp	r3, #8
 8004066:	d10a      	bne.n	800407e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f00e fe42 	bl	8012cf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f002 0208 	and.w	r2, r2, #8
 800407c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f00a fd5a 	bl	800eb3c <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408e:	2b80      	cmp	r3, #128	@ 0x80
 8004090:	d123      	bne.n	80040da <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800409e:	2301      	movs	r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a2:	e014      	b.n	80040ce <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fb08 	bl	80046d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	3301      	adds	r3, #1
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	791b      	ldrb	r3, [r3, #4]
 80040d2:	461a      	mov	r2, r3
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d3e4      	bcc.n	80040a4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f00a fd2c 	bl	800eb3c <USB_ReadInterrupts>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ee:	d13c      	bne.n	800416a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040f0:	2301      	movs	r3, #1
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f4:	e02b      	b.n	800414e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	3318      	adds	r3, #24
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d115      	bne.n	8004148 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800411c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800411e:	2b00      	cmp	r3, #0
 8004120:	da12      	bge.n	8004148 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	3317      	adds	r3, #23
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800413e:	b2db      	uxtb	r3, r3
 8004140:	4619      	mov	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fac8 	bl	80046d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	3301      	adds	r3, #1
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	791b      	ldrb	r3, [r3, #4]
 8004152:	461a      	mov	r2, r3
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	4293      	cmp	r3, r2
 8004158:	d3cd      	bcc.n	80040f6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f00a fce4 	bl	800eb3c <USB_ReadInterrupts>
 8004174:	4603      	mov	r3, r0
 8004176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800417a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800417e:	d156      	bne.n	800422e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004180:	2301      	movs	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
 8004184:	e045      	b.n	8004212 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d12e      	bne.n	800420c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	da2b      	bge.n	800420c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80041c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d121      	bne.n	800420c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004204:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004208:	6053      	str	r3, [r2, #4]
            break;
 800420a:	e008      	b.n	800421e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	3301      	adds	r3, #1
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	791b      	ldrb	r3, [r3, #4]
 8004216:	461a      	mov	r2, r3
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	4293      	cmp	r3, r2
 800421c:	d3b3      	bcc.n	8004186 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800422c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f00a fc82 	bl	800eb3c <USB_ReadInterrupts>
 8004238:	4603      	mov	r3, r0
 800423a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004242:	d10a      	bne.n	800425a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f00e fde3 	bl	8012e10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f00a fc6c 	bl	800eb3c <USB_ReadInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d115      	bne.n	800429a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f00e fdd3 	bl	8012e2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	e000      	b.n	800429a <HAL_PCD_IRQHandler+0x996>
      return;
 8004298:	bf00      	nop
    }
  }
}
 800429a:	3734      	adds	r7, #52	@ 0x34
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}

080042a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_PCD_SetAddress+0x1a>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e012      	b.n	80042e0 <HAL_PCD_SetAddress+0x40>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f00a fbcb 	bl	800ea6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	4608      	mov	r0, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	70fb      	strb	r3, [r7, #3]
 80042fa:	460b      	mov	r3, r1
 80042fc:	803b      	strh	r3, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800430a:	2b00      	cmp	r3, #0
 800430c:	da0f      	bge.n	800432e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	f003 020f 	and.w	r2, r3, #15
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	3310      	adds	r3, #16
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	3304      	adds	r3, #4
 8004324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	705a      	strb	r2, [r3, #1]
 800432c:	e00f      	b.n	800434e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	f003 020f 	and.w	r2, r3, #15
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800435a:	883a      	ldrh	r2, [r7, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	78ba      	ldrb	r2, [r7, #2]
 8004364:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	785b      	ldrb	r3, [r3, #1]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004378:	78bb      	ldrb	r3, [r7, #2]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d102      	bne.n	8004384 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_PCD_EP_Open+0xaa>
 800438e:	2302      	movs	r3, #2
 8004390:	e00e      	b.n	80043b0 <HAL_PCD_EP_Open+0xc8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68f9      	ldr	r1, [r7, #12]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f009 fd4b 	bl	800de3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80043ae:	7afb      	ldrb	r3, [r7, #11]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	da0f      	bge.n	80043ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	3310      	adds	r3, #16
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	4413      	add	r3, r2
 80043e0:	3304      	adds	r3, #4
 80043e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	705a      	strb	r2, [r3, #1]
 80043ea:	e00f      	b.n	800440c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	f003 020f 	and.w	r2, r3, #15
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	3304      	adds	r3, #4
 8004404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_PCD_EP_Close+0x6e>
 8004422:	2302      	movs	r3, #2
 8004424:	e00e      	b.n	8004444 <HAL_PCD_EP_Close+0x8c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	4618      	mov	r0, r3
 8004436:	f009 fd89 	bl	800df4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	460b      	mov	r3, r1
 800445a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800445c:	7afb      	ldrb	r3, [r7, #11]
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	4613      	mov	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	3304      	adds	r3, #4
 8004474:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2200      	movs	r2, #0
 800448c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800448e:	7afb      	ldrb	r3, [r7, #11]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	b2da      	uxtb	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	799b      	ldrb	r3, [r3, #6]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d102      	bne.n	80044a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	799b      	ldrb	r3, [r3, #6]
 80044b0:	461a      	mov	r2, r3
 80044b2:	6979      	ldr	r1, [r7, #20]
 80044b4:	f009 fe26 	bl	800e104 <USB_EPStartXfer>

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 020f 	and.w	r2, r3, #15
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80044e4:	681b      	ldr	r3, [r3, #0]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	460b      	mov	r3, r1
 8004500:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	3310      	adds	r3, #16
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	3304      	adds	r3, #4
 8004518:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2200      	movs	r2, #0
 800452a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2201      	movs	r2, #1
 8004530:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004532:	7afb      	ldrb	r3, [r7, #11]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	b2da      	uxtb	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	799b      	ldrb	r3, [r3, #6]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d102      	bne.n	800454c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	799b      	ldrb	r3, [r3, #6]
 8004554:	461a      	mov	r2, r3
 8004556:	6979      	ldr	r1, [r7, #20]
 8004558:	f009 fdd4 	bl	800e104 <USB_EPStartXfer>

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	460b      	mov	r3, r1
 8004570:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	7912      	ldrb	r2, [r2, #4]
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e04f      	b.n	8004624 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004588:	2b00      	cmp	r3, #0
 800458a:	da0f      	bge.n	80045ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f003 020f 	and.w	r2, r3, #15
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	3310      	adds	r3, #16
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	3304      	adds	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	705a      	strb	r2, [r3, #1]
 80045aa:	e00d      	b.n	80045c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	3304      	adds	r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_PCD_EP_SetStall+0x82>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e01d      	b.n	8004624 <HAL_PCD_EP_SetStall+0xbe>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68f9      	ldr	r1, [r7, #12]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f00a f964 	bl	800e8c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	7999      	ldrb	r1, [r3, #6]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004614:	461a      	mov	r2, r3
 8004616:	f00a fb57 	bl	800ecc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	7912      	ldrb	r2, [r2, #4]
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e042      	b.n	80046d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800464a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800464e:	2b00      	cmp	r3, #0
 8004650:	da0f      	bge.n	8004672 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	f003 020f 	and.w	r2, r3, #15
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	3310      	adds	r3, #16
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	3304      	adds	r3, #4
 8004668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	705a      	strb	r2, [r3, #1]
 8004670:	e00f      	b.n	8004692 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 020f 	and.w	r2, r3, #15
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4413      	add	r3, r2
 8004688:	3304      	adds	r3, #4
 800468a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_PCD_EP_ClrStall+0x86>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e00e      	b.n	80046d0 <HAL_PCD_EP_ClrStall+0xa4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68f9      	ldr	r1, [r7, #12]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f00a f96d 	bl	800e9a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da0c      	bge.n	8004706 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	f003 020f 	and.w	r2, r3, #15
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	3310      	adds	r3, #16
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4413      	add	r3, r2
 8004700:	3304      	adds	r3, #4
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e00c      	b.n	8004720 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	4413      	add	r3, r2
 800471c:	3304      	adds	r3, #4
 800471e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	4618      	mov	r0, r3
 8004728:	f009 ff8c 	bl	800e644 <USB_EPStopXfer>
 800472c:	4603      	mov	r3, r0
 800472e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004730:	7afb      	ldrb	r3, [r7, #11]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_PCD_EP_Flush+0x1a>
 8004750:	2302      	movs	r3, #2
 8004752:	e01b      	b.n	800478c <HAL_PCD_EP_Flush+0x52>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800475c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004760:	2b00      	cmp	r3, #0
 8004762:	da09      	bge.n	8004778 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f009 fac5 	bl	800dd00 <USB_FlushTxFifo>
 8004776:	e004      	b.n	8004782 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f009 faf1 	bl	800dd64 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	@ 0x28
 8004798:	af02      	add	r7, sp, #8
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	3310      	adds	r3, #16
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4413      	add	r3, r2
 80047b8:	3304      	adds	r3, #4
 80047ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d901      	bls.n	80047cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e06b      	b.n	80048a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d902      	bls.n	80047e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3303      	adds	r3, #3
 80047ec:	089b      	lsrs	r3, r3, #2
 80047ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047f0:	e02a      	b.n	8004848 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	429a      	cmp	r2, r3
 8004806:	d902      	bls.n	800480e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3303      	adds	r3, #3
 8004812:	089b      	lsrs	r3, r3, #2
 8004814:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	68d9      	ldr	r1, [r3, #12]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	4603      	mov	r3, r0
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	f009 ffb4 	bl	800e798 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	441a      	add	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	695a      	ldr	r2, [r3, #20]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	441a      	add	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	429a      	cmp	r2, r3
 800485c:	d809      	bhi.n	8004872 <PCD_WriteEmptyTxFifo+0xde>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004866:	429a      	cmp	r2, r3
 8004868:	d203      	bcs.n	8004872 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1bf      	bne.n	80047f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	429a      	cmp	r2, r3
 800487c:	d811      	bhi.n	80048a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	2201      	movs	r2, #1
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	43db      	mvns	r3, r3
 8004898:	6939      	ldr	r1, [r7, #16]
 800489a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800489e:	4013      	ands	r3, r2
 80048a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	333c      	adds	r3, #60	@ 0x3c
 80048c4:	3304      	adds	r3, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	799b      	ldrb	r3, [r3, #6]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d17b      	bne.n	80049da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d015      	beq.n	8004918 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	4a61      	ldr	r2, [pc, #388]	@ (8004a74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f240 80b9 	bls.w	8004a68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80b3 	beq.w	8004a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490e:	461a      	mov	r2, r3
 8004910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004914:	6093      	str	r3, [r2, #8]
 8004916:	e0a7      	b.n	8004a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	2320      	movs	r3, #32
 8004932:	6093      	str	r3, [r2, #8]
 8004934:	e098      	b.n	8004a68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 8093 	bne.w	8004a68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	4a4b      	ldr	r2, [pc, #300]	@ (8004a74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d90f      	bls.n	800496a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004960:	461a      	mov	r2, r3
 8004962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004966:	6093      	str	r3, [r2, #8]
 8004968:	e07e      	b.n	8004a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4413      	add	r3, r2
 800497c:	3304      	adds	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	0159      	lsls	r1, r3, #5
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	440b      	add	r3, r1
 800498c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004996:	1ad2      	subs	r2, r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d114      	bne.n	80049cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049b4:	461a      	mov	r2, r3
 80049b6:	2101      	movs	r1, #1
 80049b8:	f00a f986 	bl	800ecc8 <USB_EP0_OutStart>
 80049bc:	e006      	b.n	80049cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	441a      	add	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f00e f958 	bl	8012c88 <HAL_PCD_DataOutStageCallback>
 80049d8:	e046      	b.n	8004a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4a26      	ldr	r2, [pc, #152]	@ (8004a78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d124      	bne.n	8004a2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f8:	461a      	mov	r2, r3
 80049fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049fe:	6093      	str	r3, [r2, #8]
 8004a00:	e032      	b.n	8004a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2320      	movs	r3, #32
 8004a1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f00e f92f 	bl	8012c88 <HAL_PCD_DataOutStageCallback>
 8004a2a:	e01d      	b.n	8004a68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d114      	bne.n	8004a5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a54:	461a      	mov	r2, r3
 8004a56:	2100      	movs	r1, #0
 8004a58:	f00a f936 	bl	800ecc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f00e f910 	bl	8012c88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	4f54300a 	.word	0x4f54300a
 8004a78:	4f54310a 	.word	0x4f54310a

08004a7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	333c      	adds	r3, #60	@ 0x3c
 8004a94:	3304      	adds	r3, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a15      	ldr	r2, [pc, #84]	@ (8004b04 <PCD_EP_OutSetupPacket_int+0x88>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d90e      	bls.n	8004ad0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d009      	beq.n	8004ad0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ace:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f00e f8c7 	bl	8012c64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8004b04 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d90c      	bls.n	8004af8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	799b      	ldrb	r3, [r3, #6]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d108      	bne.n	8004af8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004af0:	461a      	mov	r2, r3
 8004af2:	2101      	movs	r1, #1
 8004af4:	f00a f8e8 	bl	800ecc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	4f54300a 	.word	0x4f54300a

08004b08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
 8004b14:	4613      	mov	r3, r2
 8004b16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d107      	bne.n	8004b36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b26:	883b      	ldrh	r3, [r7, #0]
 8004b28:	0419      	lsls	r1, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b34:	e028      	b.n	8004b88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	4413      	add	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b44:	2300      	movs	r3, #0
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e00d      	b.n	8004b66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	3340      	adds	r3, #64	@ 0x40
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	0c1b      	lsrs	r3, r3, #16
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	3301      	adds	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
 8004b66:	7bfa      	ldrb	r2, [r7, #15]
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d3ec      	bcc.n	8004b4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b70:	883b      	ldrh	r3, [r7, #0]
 8004b72:	0418      	lsls	r0, r3, #16
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6819      	ldr	r1, [r3, #0]
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	4302      	orrs	r2, r0
 8004b80:	3340      	adds	r3, #64	@ 0x40
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004be6:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <HAL_PCDEx_ActivateLPM+0x44>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	10000003 	.word	0x10000003

08004c00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c20:	4b19      	ldr	r3, [pc, #100]	@ (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d00a      	beq.n	8004c42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c2c:	4b16      	ldr	r3, [pc, #88]	@ (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d001      	beq.n	8004c3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e01f      	b.n	8004c7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e01d      	b.n	8004c7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c42:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f023 0207 	bic.w	r2, r3, #7
 8004c4a:	490f      	ldr	r1, [pc, #60]	@ (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c52:	f7fd fb89 	bl	8002368 <HAL_GetTick>
 8004c56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c58:	e009      	b.n	8004c6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c5a:	f7fd fb85 	bl	8002368 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c68:	d901      	bls.n	8004c6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e007      	b.n	8004c7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c7a:	d1ee      	bne.n	8004c5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	58024800 	.word	0x58024800

08004c8c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004c90:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4a04      	ldr	r2, [pc, #16]	@ (8004ca8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c9a:	60d3      	str	r3, [r2, #12]
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	58024800 	.word	0x58024800

08004cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08c      	sub	sp, #48	@ 0x30
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f000 bc48 	b.w	8005550 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8088 	beq.w	8004dde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cce:	4b99      	ldr	r3, [pc, #612]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cd8:	4b96      	ldr	r3, [pc, #600]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d007      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x48>
 8004ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce6:	2b18      	cmp	r3, #24
 8004ce8:	d111      	bne.n	8004d0e <HAL_RCC_OscConfig+0x62>
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d10c      	bne.n	8004d0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d06d      	beq.n	8004ddc <HAL_RCC_OscConfig+0x130>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d169      	bne.n	8004ddc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f000 bc21 	b.w	8005550 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x7a>
 8004d18:	4b86      	ldr	r3, [pc, #536]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a85      	ldr	r2, [pc, #532]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e02e      	b.n	8004d84 <HAL_RCC_OscConfig+0xd8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x9c>
 8004d2e:	4b81      	ldr	r3, [pc, #516]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a80      	ldr	r2, [pc, #512]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	4b7e      	ldr	r3, [pc, #504]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e01d      	b.n	8004d84 <HAL_RCC_OscConfig+0xd8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCC_OscConfig+0xc0>
 8004d52:	4b78      	ldr	r3, [pc, #480]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a77      	ldr	r2, [pc, #476]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b75      	ldr	r3, [pc, #468]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a74      	ldr	r2, [pc, #464]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0xd8>
 8004d6c:	4b71      	ldr	r3, [pc, #452]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a70      	ldr	r2, [pc, #448]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	4b6e      	ldr	r3, [pc, #440]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6d      	ldr	r2, [pc, #436]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd faec 	bl	8002368 <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fd fae8 	bl	8002368 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	@ 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e3d4      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004da6:	4b63      	ldr	r3, [pc, #396]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0xe8>
 8004db2:	e014      	b.n	8004dde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fd fad8 	bl	8002368 <HAL_GetTick>
 8004db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dbc:	f7fd fad4 	bl	8002368 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	@ 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e3c0      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dce:	4b59      	ldr	r3, [pc, #356]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x110>
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80ca 	beq.w	8004f80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dec:	4b51      	ldr	r3, [pc, #324]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004df4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004df6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <HAL_RCC_OscConfig+0x166>
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	2b18      	cmp	r3, #24
 8004e06:	d156      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x20a>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d151      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e12:	4b48      	ldr	r3, [pc, #288]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_RCC_OscConfig+0x17e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e392      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e2a:	4b42      	ldr	r3, [pc, #264]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 0219 	bic.w	r2, r3, #25
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	493f      	ldr	r1, [pc, #252]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fd fa94 	bl	8002368 <HAL_GetTick>
 8004e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e44:	f7fd fa90 	bl	8002368 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e37c      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e56:	4b37      	ldr	r3, [pc, #220]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	f7fd fab1 	bl	80023c8 <HAL_GetREVID>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d817      	bhi.n	8004ea0 <HAL_RCC_OscConfig+0x1f4>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b40      	cmp	r3, #64	@ 0x40
 8004e76:	d108      	bne.n	8004e8a <HAL_RCC_OscConfig+0x1de>
 8004e78:	4b2e      	ldr	r3, [pc, #184]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e80:	4a2c      	ldr	r2, [pc, #176]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e86:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e88:	e07a      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	031b      	lsls	r3, r3, #12
 8004e98:	4926      	ldr	r1, [pc, #152]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9e:	e06f      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea0:	4b24      	ldr	r3, [pc, #144]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	061b      	lsls	r3, r3, #24
 8004eae:	4921      	ldr	r1, [pc, #132]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb4:	e064      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d047      	beq.n	8004f4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 0219 	bic.w	r2, r3, #25
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	491a      	ldr	r1, [pc, #104]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fd fa4a 	bl	8002368 <HAL_GetTick>
 8004ed4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed8:	f7fd fa46 	bl	8002368 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e332      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eea:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef6:	f7fd fa67 	bl	80023c8 <HAL_GetREVID>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d819      	bhi.n	8004f38 <HAL_RCC_OscConfig+0x28c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b40      	cmp	r3, #64	@ 0x40
 8004f0a:	d108      	bne.n	8004f1e <HAL_RCC_OscConfig+0x272>
 8004f0c:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f14:	4a07      	ldr	r2, [pc, #28]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f1a:	6053      	str	r3, [r2, #4]
 8004f1c:	e030      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
 8004f1e:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	031b      	lsls	r3, r3, #12
 8004f2c:	4901      	ldr	r1, [pc, #4]	@ (8004f34 <HAL_RCC_OscConfig+0x288>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
 8004f32:	e025      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
 8004f34:	58024400 	.word	0x58024400
 8004f38:	4b9a      	ldr	r3, [pc, #616]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	4997      	ldr	r1, [pc, #604]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
 8004f4c:	e018      	b.n	8004f80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4e:	4b95      	ldr	r3, [pc, #596]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a94      	ldr	r2, [pc, #592]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fd fa05 	bl	8002368 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fd fa01 	bl	8002368 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e2ed      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f74:	4b8b      	ldr	r3, [pc, #556]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f0      	bne.n	8004f62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80a9 	beq.w	80050e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8e:	4b85      	ldr	r3, [pc, #532]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f98:	4b82      	ldr	r3, [pc, #520]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d007      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x308>
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b18      	cmp	r3, #24
 8004fa8:	d13a      	bne.n	8005020 <HAL_RCC_OscConfig+0x374>
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d135      	bne.n	8005020 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fb4:	4b7b      	ldr	r3, [pc, #492]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_OscConfig+0x320>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	2b80      	cmp	r3, #128	@ 0x80
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e2c1      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fcc:	f7fd f9fc 	bl	80023c8 <HAL_GetREVID>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d817      	bhi.n	800500a <HAL_RCC_OscConfig+0x35e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d108      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x348>
 8004fe2:	4b70      	ldr	r3, [pc, #448]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004fea:	4a6e      	ldr	r2, [pc, #440]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004fec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ff0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ff2:	e075      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ff4:	4b6b      	ldr	r3, [pc, #428]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	069b      	lsls	r3, r3, #26
 8005002:	4968      	ldr	r1, [pc, #416]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005004:	4313      	orrs	r3, r2
 8005006:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005008:	e06a      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800500a:	4b66      	ldr	r3, [pc, #408]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	4962      	ldr	r1, [pc, #392]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800501a:	4313      	orrs	r3, r2
 800501c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800501e:	e05f      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d042      	beq.n	80050ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005028:	4b5e      	ldr	r3, [pc, #376]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a5d      	ldr	r2, [pc, #372]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800502e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fd f998 	bl	8002368 <HAL_GetTick>
 8005038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800503c:	f7fd f994 	bl	8002368 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e280      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800504e:	4b55      	ldr	r3, [pc, #340]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800505a:	f7fd f9b5 	bl	80023c8 <HAL_GetREVID>
 800505e:	4603      	mov	r3, r0
 8005060:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005064:	4293      	cmp	r3, r2
 8005066:	d817      	bhi.n	8005098 <HAL_RCC_OscConfig+0x3ec>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	2b20      	cmp	r3, #32
 800506e:	d108      	bne.n	8005082 <HAL_RCC_OscConfig+0x3d6>
 8005070:	4b4c      	ldr	r3, [pc, #304]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005078:	4a4a      	ldr	r2, [pc, #296]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800507a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800507e:	6053      	str	r3, [r2, #4]
 8005080:	e02e      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
 8005082:	4b48      	ldr	r3, [pc, #288]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	069b      	lsls	r3, r3, #26
 8005090:	4944      	ldr	r1, [pc, #272]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
 8005096:	e023      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
 8005098:	4b42      	ldr	r3, [pc, #264]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	493f      	ldr	r1, [pc, #252]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60cb      	str	r3, [r1, #12]
 80050ac:	e018      	b.n	80050e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80050ae:	4b3d      	ldr	r3, [pc, #244]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3c      	ldr	r2, [pc, #240]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fd f955 	bl	8002368 <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050c2:	f7fd f951 	bl	8002368 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e23d      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050d4:	4b33      	ldr	r3, [pc, #204]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f0      	bne.n	80050c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d036      	beq.n	800515a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d019      	beq.n	8005128 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050f4:	4b2b      	ldr	r3, [pc, #172]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f8:	4a2a      	ldr	r2, [pc, #168]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fd f932 	bl	8002368 <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005108:	f7fd f92e 	bl	8002368 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e21a      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800511a:	4b22      	ldr	r3, [pc, #136]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800511c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0x45c>
 8005126:	e018      	b.n	800515a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005128:	4b1e      	ldr	r3, [pc, #120]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800512a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512c:	4a1d      	ldr	r2, [pc, #116]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fd f918 	bl	8002368 <HAL_GetTick>
 8005138:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513c:	f7fd f914 	bl	8002368 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e200      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800514e:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d039      	beq.n	80051da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01c      	beq.n	80051a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800516e:	4b0d      	ldr	r3, [pc, #52]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a0c      	ldr	r2, [pc, #48]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005174:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005178:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800517a:	f7fd f8f5 	bl	8002368 <HAL_GetTick>
 800517e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005182:	f7fd f8f1 	bl	8002368 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e1dd      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005194:	4b03      	ldr	r3, [pc, #12]	@ (80051a4 <HAL_RCC_OscConfig+0x4f8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCC_OscConfig+0x4d6>
 80051a0:	e01b      	b.n	80051da <HAL_RCC_OscConfig+0x52e>
 80051a2:	bf00      	nop
 80051a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051a8:	4b9b      	ldr	r3, [pc, #620]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a9a      	ldr	r2, [pc, #616]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80051ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051b4:	f7fd f8d8 	bl	8002368 <HAL_GetTick>
 80051b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051bc:	f7fd f8d4 	bl	8002368 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e1c0      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051ce:	4b92      	ldr	r3, [pc, #584]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8081 	beq.w	80052ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051e8:	4b8c      	ldr	r3, [pc, #560]	@ (800541c <HAL_RCC_OscConfig+0x770>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a8b      	ldr	r2, [pc, #556]	@ (800541c <HAL_RCC_OscConfig+0x770>)
 80051ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f4:	f7fd f8b8 	bl	8002368 <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fc:	f7fd f8b4 	bl	8002368 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	@ 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e1a0      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800520e:	4b83      	ldr	r3, [pc, #524]	@ (800541c <HAL_RCC_OscConfig+0x770>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d106      	bne.n	8005230 <HAL_RCC_OscConfig+0x584>
 8005222:	4b7d      	ldr	r3, [pc, #500]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005226:	4a7c      	ldr	r2, [pc, #496]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	6713      	str	r3, [r2, #112]	@ 0x70
 800522e:	e02d      	b.n	800528c <HAL_RCC_OscConfig+0x5e0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10c      	bne.n	8005252 <HAL_RCC_OscConfig+0x5a6>
 8005238:	4b77      	ldr	r3, [pc, #476]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	4a76      	ldr	r2, [pc, #472]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	@ 0x70
 8005244:	4b74      	ldr	r3, [pc, #464]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4a73      	ldr	r2, [pc, #460]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 800524a:	f023 0304 	bic.w	r3, r3, #4
 800524e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005250:	e01c      	b.n	800528c <HAL_RCC_OscConfig+0x5e0>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b05      	cmp	r3, #5
 8005258:	d10c      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c8>
 800525a:	4b6f      	ldr	r3, [pc, #444]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	4a6e      	ldr	r2, [pc, #440]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005260:	f043 0304 	orr.w	r3, r3, #4
 8005264:	6713      	str	r3, [r2, #112]	@ 0x70
 8005266:	4b6c      	ldr	r3, [pc, #432]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526a:	4a6b      	ldr	r2, [pc, #428]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6713      	str	r3, [r2, #112]	@ 0x70
 8005272:	e00b      	b.n	800528c <HAL_RCC_OscConfig+0x5e0>
 8005274:	4b68      	ldr	r3, [pc, #416]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005278:	4a67      	ldr	r2, [pc, #412]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005280:	4b65      	ldr	r3, [pc, #404]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005284:	4a64      	ldr	r2, [pc, #400]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005286:	f023 0304 	bic.w	r3, r3, #4
 800528a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d015      	beq.n	80052c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fd f868 	bl	8002368 <HAL_GetTick>
 8005298:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529c:	f7fd f864 	bl	8002368 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e14e      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052b2:	4b59      	ldr	r3, [pc, #356]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ee      	beq.n	800529c <HAL_RCC_OscConfig+0x5f0>
 80052be:	e014      	b.n	80052ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fd f852 	bl	8002368 <HAL_GetTick>
 80052c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052c6:	e00a      	b.n	80052de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fd f84e 	bl	8002368 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e138      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052de:	4b4e      	ldr	r3, [pc, #312]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1ee      	bne.n	80052c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 812d 	beq.w	800554e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052f4:	4b48      	ldr	r3, [pc, #288]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052fc:	2b18      	cmp	r3, #24
 80052fe:	f000 80bd 	beq.w	800547c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	2b02      	cmp	r3, #2
 8005308:	f040 809e 	bne.w	8005448 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530c:	4b42      	ldr	r3, [pc, #264]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a41      	ldr	r2, [pc, #260]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fd f826 	bl	8002368 <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005320:	f7fd f822 	bl	8002368 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e10e      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005332:	4b39      	ldr	r3, [pc, #228]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800533e:	4b36      	ldr	r3, [pc, #216]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005342:	4b37      	ldr	r3, [pc, #220]	@ (8005420 <HAL_RCC_OscConfig+0x774>)
 8005344:	4013      	ands	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800534e:	0112      	lsls	r2, r2, #4
 8005350:	430a      	orrs	r2, r1
 8005352:	4931      	ldr	r1, [pc, #196]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	628b      	str	r3, [r1, #40]	@ 0x28
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	3b01      	subs	r3, #1
 800535e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005366:	3b01      	subs	r3, #1
 8005368:	025b      	lsls	r3, r3, #9
 800536a:	b29b      	uxth	r3, r3
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005372:	3b01      	subs	r3, #1
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005380:	3b01      	subs	r3, #1
 8005382:	061b      	lsls	r3, r3, #24
 8005384:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005388:	4923      	ldr	r1, [pc, #140]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 800538a:	4313      	orrs	r3, r2
 800538c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800538e:	4b22      	ldr	r3, [pc, #136]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	4a21      	ldr	r2, [pc, #132]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800539a:	4b1f      	ldr	r3, [pc, #124]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 800539c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800539e:	4b21      	ldr	r3, [pc, #132]	@ (8005424 <HAL_RCC_OscConfig+0x778>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053a6:	00d2      	lsls	r2, r2, #3
 80053a8:	491b      	ldr	r1, [pc, #108]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80053ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	f023 020c 	bic.w	r2, r3, #12
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	4917      	ldr	r1, [pc, #92]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053c0:	4b15      	ldr	r3, [pc, #84]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	f023 0202 	bic.w	r2, r3, #2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053cc:	4912      	ldr	r1, [pc, #72]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053d2:	4b11      	ldr	r3, [pc, #68]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	4a10      	ldr	r2, [pc, #64]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053de:	4b0e      	ldr	r3, [pc, #56]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053f6:	4b08      	ldr	r3, [pc, #32]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fa:	4a07      	ldr	r2, [pc, #28]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005402:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a04      	ldr	r2, [pc, #16]	@ (8005418 <HAL_RCC_OscConfig+0x76c>)
 8005408:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800540c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fc ffab 	bl	8002368 <HAL_GetTick>
 8005412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005414:	e011      	b.n	800543a <HAL_RCC_OscConfig+0x78e>
 8005416:	bf00      	nop
 8005418:	58024400 	.word	0x58024400
 800541c:	58024800 	.word	0x58024800
 8005420:	fffffc0c 	.word	0xfffffc0c
 8005424:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005428:	f7fc ff9e 	bl	8002368 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e08a      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800543a:	4b47      	ldr	r3, [pc, #284]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x77c>
 8005446:	e082      	b.n	800554e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005448:	4b43      	ldr	r3, [pc, #268]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a42      	ldr	r2, [pc, #264]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fc ff88 	bl	8002368 <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fc ff84 	bl	8002368 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e070      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800546e:	4b3a      	ldr	r3, [pc, #232]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x7b0>
 800547a:	e068      	b.n	800554e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800547c:	4b36      	ldr	r3, [pc, #216]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005482:	4b35      	ldr	r3, [pc, #212]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005486:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	2b01      	cmp	r3, #1
 800548e:	d031      	beq.n	80054f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f003 0203 	and.w	r2, r3, #3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d12a      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d122      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d11a      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	0a5b      	lsrs	r3, r3, #9
 80054c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d111      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d108      	bne.n	80054f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	0e1b      	lsrs	r3, r3, #24
 80054e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e02b      	b.n	8005550 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054f8:	4b17      	ldr	r3, [pc, #92]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 80054fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fc:	08db      	lsrs	r3, r3, #3
 80054fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005502:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	429a      	cmp	r2, r3
 800550c:	d01f      	beq.n	800554e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800550e:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005512:	4a11      	ldr	r2, [pc, #68]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800551a:	f7fc ff25 	bl	8002368 <HAL_GetTick>
 800551e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005520:	bf00      	nop
 8005522:	f7fc ff21 	bl	8002368 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	4293      	cmp	r3, r2
 800552c:	d0f9      	beq.n	8005522 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800552e:	4b0a      	ldr	r3, [pc, #40]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005532:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <HAL_RCC_OscConfig+0x8b0>)
 8005534:	4013      	ands	r3, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800553a:	00d2      	lsls	r2, r2, #3
 800553c:	4906      	ldr	r1, [pc, #24]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 800553e:	4313      	orrs	r3, r2
 8005540:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005542:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005546:	4a04      	ldr	r2, [pc, #16]	@ (8005558 <HAL_RCC_OscConfig+0x8ac>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3730      	adds	r7, #48	@ 0x30
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	58024400 	.word	0x58024400
 800555c:	ffff0007 	.word	0xffff0007

08005560 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e19c      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005574:	4b8a      	ldr	r3, [pc, #552]	@ (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d910      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005582:	4b87      	ldr	r3, [pc, #540]	@ (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 020f 	bic.w	r2, r3, #15
 800558a:	4985      	ldr	r1, [pc, #532]	@ (80057a0 <HAL_RCC_ClockConfig+0x240>)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	4313      	orrs	r3, r2
 8005590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b83      	ldr	r3, [pc, #524]	@ (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e184      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	4b7b      	ldr	r3, [pc, #492]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055bc:	429a      	cmp	r2, r3
 80055be:	d908      	bls.n	80055d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055c0:	4b78      	ldr	r3, [pc, #480]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	4975      	ldr	r1, [pc, #468]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	4b70      	ldr	r3, [pc, #448]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d908      	bls.n	8005600 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055ee:	4b6d      	ldr	r3, [pc, #436]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	496a      	ldr	r1, [pc, #424]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	4b64      	ldr	r3, [pc, #400]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005618:	429a      	cmp	r2, r3
 800561a:	d908      	bls.n	800562e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800561c:	4b61      	ldr	r3, [pc, #388]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	495e      	ldr	r1, [pc, #376]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800562a:	4313      	orrs	r3, r2
 800562c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	4b59      	ldr	r3, [pc, #356]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005646:	429a      	cmp	r2, r3
 8005648:	d908      	bls.n	800565c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800564a:	4b56      	ldr	r3, [pc, #344]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	4953      	ldr	r1, [pc, #332]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005658:	4313      	orrs	r3, r2
 800565a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d010      	beq.n	800568a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	4b4d      	ldr	r3, [pc, #308]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	429a      	cmp	r2, r3
 8005676:	d908      	bls.n	800568a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005678:	4b4a      	ldr	r3, [pc, #296]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f023 020f 	bic.w	r2, r3, #15
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4947      	ldr	r1, [pc, #284]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005686:	4313      	orrs	r3, r2
 8005688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d055      	beq.n	8005742 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005696:	4b43      	ldr	r3, [pc, #268]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	4940      	ldr	r1, [pc, #256]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056b0:	4b3c      	ldr	r3, [pc, #240]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d121      	bne.n	8005700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0f6      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056c8:	4b36      	ldr	r3, [pc, #216]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d115      	bne.n	8005700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e0ea      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d107      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056e0:	4b30      	ldr	r3, [pc, #192]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0de      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056f0:	4b2c      	ldr	r3, [pc, #176]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0d6      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005700:	4b28      	ldr	r3, [pc, #160]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f023 0207 	bic.w	r2, r3, #7
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4925      	ldr	r1, [pc, #148]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005712:	f7fc fe29 	bl	8002368 <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005718:	e00a      	b.n	8005730 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800571a:	f7fc fe25 	bl	8002368 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e0be      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005730:	4b1c      	ldr	r3, [pc, #112]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	429a      	cmp	r2, r3
 8005740:	d1eb      	bne.n	800571a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d010      	beq.n	8005770 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	4b14      	ldr	r3, [pc, #80]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	429a      	cmp	r2, r3
 800575c:	d208      	bcs.n	8005770 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800575e:	4b11      	ldr	r3, [pc, #68]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f023 020f 	bic.w	r2, r3, #15
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	490e      	ldr	r1, [pc, #56]	@ (80057a4 <HAL_RCC_ClockConfig+0x244>)
 800576c:	4313      	orrs	r3, r2
 800576e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005770:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d214      	bcs.n	80057a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b08      	ldr	r3, [pc, #32]	@ (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 020f 	bic.w	r2, r3, #15
 8005786:	4906      	ldr	r1, [pc, #24]	@ (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b04      	ldr	r3, [pc, #16]	@ (80057a0 <HAL_RCC_ClockConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d005      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e086      	b.n	80058ae <HAL_RCC_ClockConfig+0x34e>
 80057a0:	52002000 	.word	0x52002000
 80057a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d010      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	4b3f      	ldr	r3, [pc, #252]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d208      	bcs.n	80057d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057c4:	4b3c      	ldr	r3, [pc, #240]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	4939      	ldr	r1, [pc, #228]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d010      	beq.n	8005804 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	4b34      	ldr	r3, [pc, #208]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d208      	bcs.n	8005804 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057f2:	4b31      	ldr	r3, [pc, #196]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	492e      	ldr	r1, [pc, #184]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005800:	4313      	orrs	r3, r2
 8005802:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	d010      	beq.n	8005832 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	4b28      	ldr	r3, [pc, #160]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800581c:	429a      	cmp	r2, r3
 800581e:	d208      	bcs.n	8005832 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005820:	4b25      	ldr	r3, [pc, #148]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	4922      	ldr	r1, [pc, #136]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 800582e:	4313      	orrs	r3, r2
 8005830:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69da      	ldr	r2, [r3, #28]
 8005842:	4b1d      	ldr	r3, [pc, #116]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800584a:	429a      	cmp	r2, r3
 800584c:	d208      	bcs.n	8005860 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800584e:	4b1a      	ldr	r3, [pc, #104]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	4917      	ldr	r1, [pc, #92]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 800585c:	4313      	orrs	r3, r2
 800585e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005860:	f000 f844 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 8005864:	4602      	mov	r2, r0
 8005866:	4b14      	ldr	r3, [pc, #80]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	4912      	ldr	r1, [pc, #72]	@ (80058bc <HAL_RCC_ClockConfig+0x35c>)
 8005872:	5ccb      	ldrb	r3, [r1, r3]
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
 800587c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800587e:	4b0e      	ldr	r3, [pc, #56]	@ (80058b8 <HAL_RCC_ClockConfig+0x358>)
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	4a0d      	ldr	r2, [pc, #52]	@ (80058bc <HAL_RCC_ClockConfig+0x35c>)
 8005888:	5cd3      	ldrb	r3, [r2, r3]
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
 8005894:	4a0a      	ldr	r2, [pc, #40]	@ (80058c0 <HAL_RCC_ClockConfig+0x360>)
 8005896:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005898:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <HAL_RCC_ClockConfig+0x364>)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800589e:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <HAL_RCC_ClockConfig+0x368>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fc fd16 	bl	80022d4 <HAL_InitTick>
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	58024400 	.word	0x58024400
 80058bc:	08015c3c 	.word	0x08015c3c
 80058c0:	24000018 	.word	0x24000018
 80058c4:	24000014 	.word	0x24000014
 80058c8:	2400001c 	.word	0x2400001c

080058cc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80058d0:	4b05      	ldr	r3, [pc, #20]	@ (80058e8 <HAL_RCC_EnableCSS+0x1c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a04      	ldr	r2, [pc, #16]	@ (80058e8 <HAL_RCC_EnableCSS+0x1c>)
 80058d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	58024400 	.word	0x58024400

080058ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b089      	sub	sp, #36	@ 0x24
 80058f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058f2:	4bb3      	ldr	r3, [pc, #716]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058fa:	2b18      	cmp	r3, #24
 80058fc:	f200 8155 	bhi.w	8005baa <HAL_RCC_GetSysClockFreq+0x2be>
 8005900:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	0800596d 	.word	0x0800596d
 800590c:	08005bab 	.word	0x08005bab
 8005910:	08005bab 	.word	0x08005bab
 8005914:	08005bab 	.word	0x08005bab
 8005918:	08005bab 	.word	0x08005bab
 800591c:	08005bab 	.word	0x08005bab
 8005920:	08005bab 	.word	0x08005bab
 8005924:	08005bab 	.word	0x08005bab
 8005928:	08005993 	.word	0x08005993
 800592c:	08005bab 	.word	0x08005bab
 8005930:	08005bab 	.word	0x08005bab
 8005934:	08005bab 	.word	0x08005bab
 8005938:	08005bab 	.word	0x08005bab
 800593c:	08005bab 	.word	0x08005bab
 8005940:	08005bab 	.word	0x08005bab
 8005944:	08005bab 	.word	0x08005bab
 8005948:	08005999 	.word	0x08005999
 800594c:	08005bab 	.word	0x08005bab
 8005950:	08005bab 	.word	0x08005bab
 8005954:	08005bab 	.word	0x08005bab
 8005958:	08005bab 	.word	0x08005bab
 800595c:	08005bab 	.word	0x08005bab
 8005960:	08005bab 	.word	0x08005bab
 8005964:	08005bab 	.word	0x08005bab
 8005968:	0800599f 	.word	0x0800599f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800596c:	4b94      	ldr	r3, [pc, #592]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d009      	beq.n	800598c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005978:	4b91      	ldr	r3, [pc, #580]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	08db      	lsrs	r3, r3, #3
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	4a90      	ldr	r2, [pc, #576]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
 8005988:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800598a:	e111      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800598c:	4b8d      	ldr	r3, [pc, #564]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800598e:	61bb      	str	r3, [r7, #24]
      break;
 8005990:	e10e      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005992:	4b8d      	ldr	r3, [pc, #564]	@ (8005bc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005994:	61bb      	str	r3, [r7, #24]
      break;
 8005996:	e10b      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005998:	4b8c      	ldr	r3, [pc, #560]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800599a:	61bb      	str	r3, [r7, #24]
      break;
 800599c:	e108      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800599e:	4b88      	ldr	r3, [pc, #544]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80059a8:	4b85      	ldr	r3, [pc, #532]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80059b4:	4b82      	ldr	r3, [pc, #520]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80059be:	4b80      	ldr	r3, [pc, #512]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c2:	08db      	lsrs	r3, r3, #3
 80059c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80e1 	beq.w	8005ba4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	f000 8083 	beq.w	8005af0 <HAL_RCC_GetSysClockFreq+0x204>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	f200 80a1 	bhi.w	8005b34 <HAL_RCC_GetSysClockFreq+0x248>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0x114>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d056      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x1c0>
 80059fe:	e099      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a00:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02d      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	08db      	lsrs	r3, r3, #3
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	4a6b      	ldr	r2, [pc, #428]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a18:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b62      	ldr	r3, [pc, #392]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a4a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a66:	e087      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005bd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7a:	4b51      	ldr	r3, [pc, #324]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a8e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aaa:	e065      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005bd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005abe:	4b40      	ldr	r3, [pc, #256]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ad2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aee:	e043      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005bdc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b02:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b16:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b32:	e021      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005bd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b46:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b5a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005bd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b78:	4b11      	ldr	r3, [pc, #68]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	0a5b      	lsrs	r3, r3, #9
 8005b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b82:	3301      	adds	r3, #1
 8005b84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	ee07 3a90 	vmov	s15, r3
 8005b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9c:	ee17 3a90 	vmov	r3, s15
 8005ba0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005ba2:	e005      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	61bb      	str	r3, [r7, #24]
      break;
 8005ba8:	e002      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005baa:	4b07      	ldr	r3, [pc, #28]	@ (8005bc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bac:	61bb      	str	r3, [r7, #24]
      break;
 8005bae:	bf00      	nop
  }

  return sysclockfreq;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3724      	adds	r7, #36	@ 0x24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	03d09000 	.word	0x03d09000
 8005bc8:	003d0900 	.word	0x003d0900
 8005bcc:	017d7840 	.word	0x017d7840
 8005bd0:	46000000 	.word	0x46000000
 8005bd4:	4c742400 	.word	0x4c742400
 8005bd8:	4a742400 	.word	0x4a742400
 8005bdc:	4bbebc20 	.word	0x4bbebc20

08005be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005be6:	f7ff fe81 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 8005bea:	4602      	mov	r2, r0
 8005bec:	4b10      	ldr	r3, [pc, #64]	@ (8005c30 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	490f      	ldr	r1, [pc, #60]	@ (8005c34 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bf8:	5ccb      	ldrb	r3, [r1, r3]
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005c02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c04:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	4a09      	ldr	r2, [pc, #36]	@ (8005c34 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c0e:	5cd3      	ldrb	r3, [r2, r3]
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1a:	4a07      	ldr	r2, [pc, #28]	@ (8005c38 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c1e:	4a07      	ldr	r2, [pc, #28]	@ (8005c3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c24:	4b04      	ldr	r3, [pc, #16]	@ (8005c38 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c26:	681b      	ldr	r3, [r3, #0]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	58024400 	.word	0x58024400
 8005c34:	08015c3c 	.word	0x08015c3c
 8005c38:	24000018 	.word	0x24000018
 8005c3c:	24000014 	.word	0x24000014

08005c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c44:	f7ff ffcc 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	091b      	lsrs	r3, r3, #4
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	4904      	ldr	r1, [pc, #16]	@ (8005c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c56:	5ccb      	ldrb	r3, [r1, r3]
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	58024400 	.word	0x58024400
 8005c68:	08015c3c 	.word	0x08015c3c

08005c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c70:	f7ff ffb6 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b06      	ldr	r3, [pc, #24]	@ (8005c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4904      	ldr	r1, [pc, #16]	@ (8005c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	58024400 	.word	0x58024400
 8005c94:	08015c3c 	.word	0x08015c3c

08005c98 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005c9c:	4b07      	ldr	r3, [pc, #28]	@ (8005cbc <HAL_RCC_NMI_IRQHandler+0x24>)
 8005c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca8:	d105      	bne.n	8005cb6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005caa:	f000 f809 	bl	8005cc0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005cae:	4b03      	ldr	r3, [pc, #12]	@ (8005cbc <HAL_RCC_NMI_IRQHandler+0x24>)
 8005cb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cb4:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	58024400 	.word	0x58024400

08005cc0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd4:	b0ca      	sub	sp, #296	@ 0x128
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	ea54 0305 	orrs.w	r3, r4, r5
 8005cfa:	d049      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d06:	d02f      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d0c:	d828      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d12:	d01a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d18:	d822      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d22:	d007      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d24:	e01c      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d26:	4bb8      	ldr	r3, [pc, #736]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2a:	4ab7      	ldr	r2, [pc, #732]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d32:	e01a      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	3308      	adds	r3, #8
 8005d3a:	2102      	movs	r1, #2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f002 fb61 	bl	8008404 <RCCEx_PLL2_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d48:	e00f      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	3328      	adds	r3, #40	@ 0x28
 8005d50:	2102      	movs	r1, #2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f002 fc08 	bl	8008568 <RCCEx_PLL3_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d5e:	e004      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d66:	e000      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d72:	4ba5      	ldr	r3, [pc, #660]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d80:	4aa1      	ldr	r2, [pc, #644]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d82:	430b      	orrs	r3, r1
 8005d84:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d86:	e003      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005d9c:	f04f 0900 	mov.w	r9, #0
 8005da0:	ea58 0309 	orrs.w	r3, r8, r9
 8005da4:	d047      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d82a      	bhi.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005db0:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005dcd 	.word	0x08005dcd
 8005dbc:	08005ddb 	.word	0x08005ddb
 8005dc0:	08005df1 	.word	0x08005df1
 8005dc4:	08005e0f 	.word	0x08005e0f
 8005dc8:	08005e0f 	.word	0x08005e0f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dcc:	4b8e      	ldr	r3, [pc, #568]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	4a8d      	ldr	r2, [pc, #564]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dd8:	e01a      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dde:	3308      	adds	r3, #8
 8005de0:	2100      	movs	r1, #0
 8005de2:	4618      	mov	r0, r3
 8005de4:	f002 fb0e 	bl	8008404 <RCCEx_PLL2_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dee:	e00f      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df4:	3328      	adds	r3, #40	@ 0x28
 8005df6:	2100      	movs	r1, #0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f002 fbb5 	bl	8008568 <RCCEx_PLL3_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e04:	e004      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e18:	4b7b      	ldr	r3, [pc, #492]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1c:	f023 0107 	bic.w	r1, r3, #7
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e26:	4a78      	ldr	r2, [pc, #480]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e2c:	e003      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005e42:	f04f 0b00 	mov.w	fp, #0
 8005e46:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e4a:	d04c      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e56:	d030      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e5c:	d829      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e60:	d02d      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e64:	d825      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e66:	2b80      	cmp	r3, #128	@ 0x80
 8005e68:	d018      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005e6a:	2b80      	cmp	r3, #128	@ 0x80
 8005e6c:	d821      	bhi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005e72:	2b40      	cmp	r3, #64	@ 0x40
 8005e74:	d007      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005e76:	e01c      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e78:	4b63      	ldr	r3, [pc, #396]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	4a62      	ldr	r2, [pc, #392]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e84:	e01c      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f002 fab8 	bl	8008404 <RCCEx_PLL2_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e9a:	e011      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea0:	3328      	adds	r3, #40	@ 0x28
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f002 fb5f 	bl	8008568 <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e006      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eb8:	e002      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ecc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed6:	4a4c      	ldr	r2, [pc, #304]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6513      	str	r3, [r2, #80]	@ 0x50
 8005edc:	e003      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005ef2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005efc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005f00:	460b      	mov	r3, r1
 8005f02:	4313      	orrs	r3, r2
 8005f04:	d053      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f12:	d035      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005f14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f18:	d82e      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f1e:	d031      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005f20:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f24:	d828      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f2a:	d01a      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005f2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f30:	d822      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005f36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f3a:	d007      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005f3c:	e01c      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3e:	4b32      	ldr	r3, [pc, #200]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f42:	4a31      	ldr	r2, [pc, #196]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f4a:	e01c      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f50:	3308      	adds	r3, #8
 8005f52:	2100      	movs	r1, #0
 8005f54:	4618      	mov	r0, r3
 8005f56:	f002 fa55 	bl	8008404 <RCCEx_PLL2_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f60:	e011      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f66:	3328      	adds	r3, #40	@ 0x28
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f002 fafc 	bl	8008568 <RCCEx_PLL3_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f76:	e006      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f7e:	e002      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f80:	bf00      	nop
 8005f82:	e000      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10b      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f92:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005fba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005fc4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d056      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fda:	d038      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005fdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fe0:	d831      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fe2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fe6:	d034      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005fe8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fec:	d82b      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ff2:	d01d      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ff8:	d825      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d006      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005ffe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006002:	d00a      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006004:	e01f      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006006:	bf00      	nop
 8006008:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600c:	4ba2      	ldr	r3, [pc, #648]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	4aa1      	ldr	r2, [pc, #644]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006018:	e01c      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	3308      	adds	r3, #8
 8006020:	2100      	movs	r1, #0
 8006022:	4618      	mov	r0, r3
 8006024:	f002 f9ee 	bl	8008404 <RCCEx_PLL2_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800602e:	e011      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006034:	3328      	adds	r3, #40	@ 0x28
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f002 fa95 	bl	8008568 <RCCEx_PLL3_Config>
 800603e:	4603      	mov	r3, r0
 8006040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006044:	e006      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800604c:	e002      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800605c:	4b8e      	ldr	r3, [pc, #568]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800605e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006060:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006068:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800606c:	4a8a      	ldr	r2, [pc, #552]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800606e:	430b      	orrs	r3, r1
 8006070:	6593      	str	r3, [r2, #88]	@ 0x58
 8006072:	e003      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006088:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006092:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006096:	460b      	mov	r3, r1
 8006098:	4313      	orrs	r3, r2
 800609a:	d03a      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800609c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a2:	2b30      	cmp	r3, #48	@ 0x30
 80060a4:	d01f      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80060a6:	2b30      	cmp	r3, #48	@ 0x30
 80060a8:	d819      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d00c      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d815      	bhi.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d019      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80060b6:	2b10      	cmp	r3, #16
 80060b8:	d111      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ba:	4b77      	ldr	r3, [pc, #476]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	4a76      	ldr	r2, [pc, #472]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060c6:	e011      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060cc:	3308      	adds	r3, #8
 80060ce:	2102      	movs	r1, #2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f002 f997 	bl	8008404 <RCCEx_PLL2_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060dc:	e006      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060e4:	e002      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80060e6:	bf00      	nop
 80060e8:	e000      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80060ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060f4:	4b68      	ldr	r3, [pc, #416]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006102:	4a65      	ldr	r2, [pc, #404]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006104:	430b      	orrs	r3, r1
 8006106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006108:	e003      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800611e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006122:	2300      	movs	r3, #0
 8006124:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006128:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800612c:	460b      	mov	r3, r1
 800612e:	4313      	orrs	r3, r2
 8006130:	d051      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006138:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800613c:	d035      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800613e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006142:	d82e      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006144:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006148:	d031      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800614a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800614e:	d828      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006154:	d01a      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800615a:	d822      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006164:	d007      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006166:	e01c      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006168:	4b4b      	ldr	r3, [pc, #300]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	4a4a      	ldr	r2, [pc, #296]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800616e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006174:	e01c      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617a:	3308      	adds	r3, #8
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f002 f940 	bl	8008404 <RCCEx_PLL2_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800618a:	e011      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800618c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006190:	3328      	adds	r3, #40	@ 0x28
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f002 f9e7 	bl	8008568 <RCCEx_PLL3_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061a0:	e006      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061a8:	e002      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061aa:	bf00      	nop
 80061ac:	e000      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061b8:	4b37      	ldr	r3, [pc, #220]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c6:	4a34      	ldr	r2, [pc, #208]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80061e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80061f0:	460b      	mov	r3, r1
 80061f2:	4313      	orrs	r3, r2
 80061f4:	d056      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006200:	d033      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006202:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006206:	d82c      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006208:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800620c:	d02f      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800620e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006212:	d826      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006214:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006218:	d02b      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800621a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800621e:	d820      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006220:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006224:	d012      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006226:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800622a:	d81a      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d022      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006234:	d115      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623a:	3308      	adds	r3, #8
 800623c:	2101      	movs	r1, #1
 800623e:	4618      	mov	r0, r3
 8006240:	f002 f8e0 	bl	8008404 <RCCEx_PLL2_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800624a:	e015      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006250:	3328      	adds	r3, #40	@ 0x28
 8006252:	2101      	movs	r1, #1
 8006254:	4618      	mov	r0, r3
 8006256:	f002 f987 	bl	8008568 <RCCEx_PLL3_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006260:	e00a      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006268:	e006      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800626a:	bf00      	nop
 800626c:	e004      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800626e:	bf00      	nop
 8006270:	e002      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10d      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006280:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006284:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800628e:	4a02      	ldr	r2, [pc, #8]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006290:	430b      	orrs	r3, r1
 8006292:	6513      	str	r3, [r2, #80]	@ 0x50
 8006294:	e006      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80062b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062b4:	2300      	movs	r3, #0
 80062b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062be:	460b      	mov	r3, r1
 80062c0:	4313      	orrs	r3, r2
 80062c2:	d055      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062d0:	d033      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80062d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062d6:	d82c      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062dc:	d02f      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e2:	d826      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062e8:	d02b      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80062ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062ee:	d820      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062f4:	d012      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80062f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fa:	d81a      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d022      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006304:	d115      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630a:	3308      	adds	r3, #8
 800630c:	2101      	movs	r1, #1
 800630e:	4618      	mov	r0, r3
 8006310:	f002 f878 	bl	8008404 <RCCEx_PLL2_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800631a:	e015      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800631c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006320:	3328      	adds	r3, #40	@ 0x28
 8006322:	2101      	movs	r1, #1
 8006324:	4618      	mov	r0, r3
 8006326:	f002 f91f 	bl	8008568 <RCCEx_PLL3_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006330:	e00a      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006338:	e006      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800633a:	bf00      	nop
 800633c:	e004      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800633e:	bf00      	nop
 8006340:	e002      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10b      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006350:	4ba3      	ldr	r3, [pc, #652]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006354:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006360:	4a9f      	ldr	r2, [pc, #636]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006362:	430b      	orrs	r3, r1
 8006364:	6593      	str	r3, [r2, #88]	@ 0x58
 8006366:	e003      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800636c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800637c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006380:	2300      	movs	r3, #0
 8006382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006386:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	d037      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800639a:	d00e      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800639c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063a0:	d816      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d018      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80063a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063aa:	d111      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ac:	4b8c      	ldr	r3, [pc, #560]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b0:	4a8b      	ldr	r2, [pc, #556]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063b8:	e00f      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063be:	3308      	adds	r3, #8
 80063c0:	2101      	movs	r1, #1
 80063c2:	4618      	mov	r0, r3
 80063c4:	f002 f81e 	bl	8008404 <RCCEx_PLL2_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063ce:	e004      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063d6:	e000      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80063d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063e2:	4b7f      	ldr	r3, [pc, #508]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f0:	4a7b      	ldr	r2, [pc, #492]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063f2:	430b      	orrs	r3, r1
 80063f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80063f6:	e003      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800640c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006410:	2300      	movs	r3, #0
 8006412:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006416:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800641a:	460b      	mov	r3, r1
 800641c:	4313      	orrs	r3, r2
 800641e:	d039      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006426:	2b03      	cmp	r3, #3
 8006428:	d81c      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800642a:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	0800646d 	.word	0x0800646d
 8006434:	08006441 	.word	0x08006441
 8006438:	0800644f 	.word	0x0800644f
 800643c:	0800646d 	.word	0x0800646d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006440:	4b67      	ldr	r3, [pc, #412]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006444:	4a66      	ldr	r2, [pc, #408]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800644a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800644c:	e00f      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	3308      	adds	r3, #8
 8006454:	2102      	movs	r1, #2
 8006456:	4618      	mov	r0, r3
 8006458:	f001 ffd4 	bl	8008404 <RCCEx_PLL2_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006462:	e004      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800646a:	e000      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800646c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006476:	4b5a      	ldr	r3, [pc, #360]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800647a:	f023 0103 	bic.w	r1, r3, #3
 800647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006484:	4a56      	ldr	r2, [pc, #344]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006486:	430b      	orrs	r3, r1
 8006488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800648a:	e003      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80064a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064a4:	2300      	movs	r3, #0
 80064a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064ae:	460b      	mov	r3, r1
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f000 809f 	beq.w	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064b6:	4b4b      	ldr	r3, [pc, #300]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a4a      	ldr	r2, [pc, #296]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064c2:	f7fb ff51 	bl	8002368 <HAL_GetTick>
 80064c6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064ca:	e00b      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064cc:	f7fb ff4c 	bl	8002368 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b64      	cmp	r3, #100	@ 0x64
 80064da:	d903      	bls.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064e2:	e005      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064e4:	4b3f      	ldr	r3, [pc, #252]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0ed      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80064f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d179      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80064f8:	4b39      	ldr	r3, [pc, #228]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006504:	4053      	eors	r3, r2
 8006506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800650a:	2b00      	cmp	r3, #0
 800650c:	d015      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800650e:	4b34      	ldr	r3, [pc, #208]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006516:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800651a:	4b31      	ldr	r3, [pc, #196]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651e:	4a30      	ldr	r2, [pc, #192]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006524:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006526:	4b2e      	ldr	r3, [pc, #184]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652a:	4a2d      	ldr	r2, [pc, #180]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800652c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006530:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006532:	4a2b      	ldr	r2, [pc, #172]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006534:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006538:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006546:	d118      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7fb ff0e 	bl	8002368 <HAL_GetTick>
 800654c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006550:	e00d      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006552:	f7fb ff09 	bl	8002368 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800655c:	1ad2      	subs	r2, r2, r3
 800655e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006562:	429a      	cmp	r2, r3
 8006564:	d903      	bls.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800656c:	e005      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800656e:	4b1c      	ldr	r3, [pc, #112]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0eb      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800657a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800657e:	2b00      	cmp	r3, #0
 8006580:	d129      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800658a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800658e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006592:	d10e      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006594:	4b12      	ldr	r3, [pc, #72]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065a4:	091a      	lsrs	r2, r3, #4
 80065a6:	4b10      	ldr	r3, [pc, #64]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80065a8:	4013      	ands	r3, r2
 80065aa:	4a0d      	ldr	r2, [pc, #52]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6113      	str	r3, [r2, #16]
 80065b0:	e005      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80065b2:	4b0b      	ldr	r3, [pc, #44]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	4a0a      	ldr	r2, [pc, #40]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065bc:	6113      	str	r3, [r2, #16]
 80065be:	4b08      	ldr	r3, [pc, #32]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065c0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ce:	4a04      	ldr	r2, [pc, #16]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d4:	e00e      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80065de:	e009      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80065e0:	58024400 	.word	0x58024400
 80065e4:	58024800 	.word	0x58024800
 80065e8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f002 0301 	and.w	r3, r2, #1
 8006600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800660a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800660e:	460b      	mov	r3, r1
 8006610:	4313      	orrs	r3, r2
 8006612:	f000 8089 	beq.w	8006728 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800661c:	2b28      	cmp	r3, #40	@ 0x28
 800661e:	d86b      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006620:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	08006701 	.word	0x08006701
 800662c:	080066f9 	.word	0x080066f9
 8006630:	080066f9 	.word	0x080066f9
 8006634:	080066f9 	.word	0x080066f9
 8006638:	080066f9 	.word	0x080066f9
 800663c:	080066f9 	.word	0x080066f9
 8006640:	080066f9 	.word	0x080066f9
 8006644:	080066f9 	.word	0x080066f9
 8006648:	080066cd 	.word	0x080066cd
 800664c:	080066f9 	.word	0x080066f9
 8006650:	080066f9 	.word	0x080066f9
 8006654:	080066f9 	.word	0x080066f9
 8006658:	080066f9 	.word	0x080066f9
 800665c:	080066f9 	.word	0x080066f9
 8006660:	080066f9 	.word	0x080066f9
 8006664:	080066f9 	.word	0x080066f9
 8006668:	080066e3 	.word	0x080066e3
 800666c:	080066f9 	.word	0x080066f9
 8006670:	080066f9 	.word	0x080066f9
 8006674:	080066f9 	.word	0x080066f9
 8006678:	080066f9 	.word	0x080066f9
 800667c:	080066f9 	.word	0x080066f9
 8006680:	080066f9 	.word	0x080066f9
 8006684:	080066f9 	.word	0x080066f9
 8006688:	08006701 	.word	0x08006701
 800668c:	080066f9 	.word	0x080066f9
 8006690:	080066f9 	.word	0x080066f9
 8006694:	080066f9 	.word	0x080066f9
 8006698:	080066f9 	.word	0x080066f9
 800669c:	080066f9 	.word	0x080066f9
 80066a0:	080066f9 	.word	0x080066f9
 80066a4:	080066f9 	.word	0x080066f9
 80066a8:	08006701 	.word	0x08006701
 80066ac:	080066f9 	.word	0x080066f9
 80066b0:	080066f9 	.word	0x080066f9
 80066b4:	080066f9 	.word	0x080066f9
 80066b8:	080066f9 	.word	0x080066f9
 80066bc:	080066f9 	.word	0x080066f9
 80066c0:	080066f9 	.word	0x080066f9
 80066c4:	080066f9 	.word	0x080066f9
 80066c8:	08006701 	.word	0x08006701
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d0:	3308      	adds	r3, #8
 80066d2:	2101      	movs	r1, #1
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 fe95 	bl	8008404 <RCCEx_PLL2_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066e0:	e00f      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	3328      	adds	r3, #40	@ 0x28
 80066e8:	2101      	movs	r1, #1
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 ff3c 	bl	8008568 <RCCEx_PLL3_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066f6:	e004      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066fe:	e000      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800670a:	4bbf      	ldr	r3, [pc, #764]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800670c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006718:	4abb      	ldr	r2, [pc, #748]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800671a:	430b      	orrs	r3, r1
 800671c:	6553      	str	r3, [r2, #84]	@ 0x54
 800671e:	e003      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f002 0302 	and.w	r3, r2, #2
 8006734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006738:	2300      	movs	r3, #0
 800673a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800673e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006742:	460b      	mov	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	d041      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800674e:	2b05      	cmp	r3, #5
 8006750:	d824      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006752:	a201      	add	r2, pc, #4	@ (adr r2, 8006758 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	080067a5 	.word	0x080067a5
 800675c:	08006771 	.word	0x08006771
 8006760:	08006787 	.word	0x08006787
 8006764:	080067a5 	.word	0x080067a5
 8006768:	080067a5 	.word	0x080067a5
 800676c:	080067a5 	.word	0x080067a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006774:	3308      	adds	r3, #8
 8006776:	2101      	movs	r1, #1
 8006778:	4618      	mov	r0, r3
 800677a:	f001 fe43 	bl	8008404 <RCCEx_PLL2_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006784:	e00f      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678a:	3328      	adds	r3, #40	@ 0x28
 800678c:	2101      	movs	r1, #1
 800678e:	4618      	mov	r0, r3
 8006790:	f001 feea 	bl	8008568 <RCCEx_PLL3_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800679a:	e004      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067a2:	e000      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80067a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067ae:	4b96      	ldr	r3, [pc, #600]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b2:	f023 0107 	bic.w	r1, r3, #7
 80067b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067bc:	4a92      	ldr	r2, [pc, #584]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067be:	430b      	orrs	r3, r1
 80067c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80067c2:	e003      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f002 0304 	and.w	r3, r2, #4
 80067d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4313      	orrs	r3, r2
 80067ea:	d044      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f4:	2b05      	cmp	r3, #5
 80067f6:	d825      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80067f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006800 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80067fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fe:	bf00      	nop
 8006800:	0800684d 	.word	0x0800684d
 8006804:	08006819 	.word	0x08006819
 8006808:	0800682f 	.word	0x0800682f
 800680c:	0800684d 	.word	0x0800684d
 8006810:	0800684d 	.word	0x0800684d
 8006814:	0800684d 	.word	0x0800684d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681c:	3308      	adds	r3, #8
 800681e:	2101      	movs	r1, #1
 8006820:	4618      	mov	r0, r3
 8006822:	f001 fdef 	bl	8008404 <RCCEx_PLL2_Config>
 8006826:	4603      	mov	r3, r0
 8006828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800682c:	e00f      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006832:	3328      	adds	r3, #40	@ 0x28
 8006834:	2101      	movs	r1, #1
 8006836:	4618      	mov	r0, r3
 8006838:	f001 fe96 	bl	8008568 <RCCEx_PLL3_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006842:	e004      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800684a:	e000      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800684c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10b      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006856:	4b6c      	ldr	r3, [pc, #432]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685a:	f023 0107 	bic.w	r1, r3, #7
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006866:	4a68      	ldr	r2, [pc, #416]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006868:	430b      	orrs	r3, r1
 800686a:	6593      	str	r3, [r2, #88]	@ 0x58
 800686c:	e003      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f002 0320 	and.w	r3, r2, #32
 8006882:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006886:	2300      	movs	r3, #0
 8006888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800688c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006890:	460b      	mov	r3, r1
 8006892:	4313      	orrs	r3, r2
 8006894:	d055      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800689e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068a2:	d033      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80068a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068a8:	d82c      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ae:	d02f      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80068b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b4:	d826      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068ba:	d02b      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80068bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068c0:	d820      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068c6:	d012      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80068c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068cc:	d81a      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d022      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80068d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068d6:	d115      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068dc:	3308      	adds	r3, #8
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 fd8f 	bl	8008404 <RCCEx_PLL2_Config>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068ec:	e015      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f2:	3328      	adds	r3, #40	@ 0x28
 80068f4:	2102      	movs	r1, #2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 fe36 	bl	8008568 <RCCEx_PLL3_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006902:	e00a      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800690a:	e006      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800690c:	bf00      	nop
 800690e:	e004      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006910:	bf00      	nop
 8006912:	e002      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006914:	bf00      	nop
 8006916:	e000      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10b      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006922:	4b39      	ldr	r3, [pc, #228]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006926:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006932:	4a35      	ldr	r2, [pc, #212]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006934:	430b      	orrs	r3, r1
 8006936:	6553      	str	r3, [r2, #84]	@ 0x54
 8006938:	e003      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800694e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006952:	2300      	movs	r3, #0
 8006954:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006958:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800695c:	460b      	mov	r3, r1
 800695e:	4313      	orrs	r3, r2
 8006960:	d058      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006966:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800696a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800696e:	d033      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006970:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006974:	d82c      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800697a:	d02f      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006980:	d826      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006982:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006986:	d02b      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006988:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800698c:	d820      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800698e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006992:	d012      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006998:	d81a      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d022      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800699e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a2:	d115      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a8:	3308      	adds	r3, #8
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fd29 	bl	8008404 <RCCEx_PLL2_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069b8:	e015      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	3328      	adds	r3, #40	@ 0x28
 80069c0:	2102      	movs	r1, #2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fdd0 	bl	8008568 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069ce:	e00a      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d6:	e006      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069d8:	bf00      	nop
 80069da:	e004      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069dc:	bf00      	nop
 80069de:	e002      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069e0:	bf00      	nop
 80069e2:	e000      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10e      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069ee:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069fe:	4a02      	ldr	r2, [pc, #8]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a04:	e006      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006a06:	bf00      	nop
 8006a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a24:	2300      	movs	r3, #0
 8006a26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4313      	orrs	r3, r2
 8006a32:	d055      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a3c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a40:	d033      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006a42:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a46:	d82c      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a4c:	d02f      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a52:	d826      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a54:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a58:	d02b      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006a5a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a5e:	d820      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a64:	d012      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006a66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a6a:	d81a      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d022      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a74:	d115      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 fcc0 	bl	8008404 <RCCEx_PLL2_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a8a:	e015      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a90:	3328      	adds	r3, #40	@ 0x28
 8006a92:	2102      	movs	r1, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 fd67 	bl	8008568 <RCCEx_PLL3_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006aa0:	e00a      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aa8:	e006      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006aaa:	bf00      	nop
 8006aac:	e004      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006aae:	bf00      	nop
 8006ab0:	e002      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ab2:	bf00      	nop
 8006ab4:	e000      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10b      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ac0:	4ba1      	ldr	r3, [pc, #644]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ad0:	4a9d      	ldr	r2, [pc, #628]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ad6:	e003      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f002 0308 	and.w	r3, r2, #8
 8006aec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006af0:	2300      	movs	r3, #0
 8006af2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006af6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006afa:	460b      	mov	r3, r1
 8006afc:	4313      	orrs	r3, r2
 8006afe:	d01e      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b0c:	d10c      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	3328      	adds	r3, #40	@ 0x28
 8006b14:	2102      	movs	r1, #2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f001 fd26 	bl	8008568 <RCCEx_PLL3_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b28:	4b87      	ldr	r3, [pc, #540]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b2c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b38:	4a83      	ldr	r2, [pc, #524]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f002 0310 	and.w	r3, r2, #16
 8006b4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b54:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	d01e      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b6a:	d10c      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b70:	3328      	adds	r3, #40	@ 0x28
 8006b72:	2102      	movs	r1, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 fcf7 	bl	8008568 <RCCEx_PLL3_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b86:	4b70      	ldr	r3, [pc, #448]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b96:	4a6c      	ldr	r2, [pc, #432]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bac:	2300      	movs	r3, #0
 8006bae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bb2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	d03e      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bc8:	d022      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bce:	d81b      	bhi.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006bda:	e015      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be0:	3308      	adds	r3, #8
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 fc0d 	bl	8008404 <RCCEx_PLL2_Config>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bf0:	e00f      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	3328      	adds	r3, #40	@ 0x28
 8006bf8:	2102      	movs	r1, #2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 fcb4 	bl	8008568 <RCCEx_PLL3_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c06:	e004      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c0e:	e000      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10b      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c2a:	4a47      	ldr	r2, [pc, #284]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c30:	e003      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c48:	2300      	movs	r3, #0
 8006c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c4c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c50:	460b      	mov	r3, r1
 8006c52:	4313      	orrs	r3, r2
 8006c54:	d03b      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c62:	d01f      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006c64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c68:	d818      	bhi.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c6e:	d003      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006c70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c74:	d007      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c76:	e011      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c78:	4b33      	ldr	r3, [pc, #204]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7c:	4a32      	ldr	r2, [pc, #200]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c84:	e00f      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	3328      	adds	r3, #40	@ 0x28
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fc6a 	bl	8008568 <RCCEx_PLL3_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c9a:	e004      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cae:	4b26      	ldr	r3, [pc, #152]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cbe:	4a22      	ldr	r2, [pc, #136]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cc4:	e003      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006cda:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cdc:	2300      	movs	r3, #0
 8006cde:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ce0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	d034      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cf8:	d007      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006cfa:	e011      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cfc:	4b12      	ldr	r3, [pc, #72]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d00:	4a11      	ldr	r2, [pc, #68]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d08:	e00e      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0e:	3308      	adds	r3, #8
 8006d10:	2102      	movs	r1, #2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 fb76 	bl	8008404 <RCCEx_PLL2_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d1e:	e003      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10d      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d30:	4b05      	ldr	r3, [pc, #20]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d34:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d3e:	4a02      	ldr	r2, [pc, #8]	@ (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d40:	430b      	orrs	r3, r1
 8006d42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d44:	e006      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006d46:	bf00      	nop
 8006d48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d62:	2300      	movs	r3, #0
 8006d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d66:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	d00c      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d74:	3328      	adds	r3, #40	@ 0x28
 8006d76:	2102      	movs	r1, #2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 fbf5 	bl	8008568 <RCCEx_PLL3_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d96:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d98:	2300      	movs	r3, #0
 8006d9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006da0:	460b      	mov	r3, r1
 8006da2:	4313      	orrs	r3, r2
 8006da4:	d038      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006db2:	d018      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006db4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006db8:	d811      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dbe:	d014      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc4:	d80b      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d011      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dce:	d106      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd0:	4bc3      	ldr	r3, [pc, #780]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	4ac2      	ldr	r2, [pc, #776]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ddc:	e008      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006de4:	e004      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006de6:	bf00      	nop
 8006de8:	e002      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dea:	bf00      	nop
 8006dec:	e000      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10b      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006df8:	4bb9      	ldr	r3, [pc, #740]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dfc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e08:	4ab5      	ldr	r2, [pc, #724]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e0e:	e003      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e26:	2300      	movs	r3, #0
 8006e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e2a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4313      	orrs	r3, r2
 8006e32:	d009      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e34:	4baa      	ldr	r3, [pc, #680]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e42:	4aa7      	ldr	r2, [pc, #668]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e44:	430b      	orrs	r3, r1
 8006e46:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006e54:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e56:	2300      	movs	r3, #0
 8006e58:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4313      	orrs	r3, r2
 8006e62:	d00a      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e64:	4b9e      	ldr	r3, [pc, #632]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e74:	4a9a      	ldr	r2, [pc, #616]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e76:	430b      	orrs	r3, r1
 8006e78:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e88:	2300      	movs	r3, #0
 8006e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e8c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e90:	460b      	mov	r3, r1
 8006e92:	4313      	orrs	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e96:	4b92      	ldr	r3, [pc, #584]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ea4:	4a8e      	ldr	r2, [pc, #568]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006eb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eb8:	2300      	movs	r3, #0
 8006eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ebc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	d00e      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ec6:	4b86      	ldr	r3, [pc, #536]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	4a85      	ldr	r2, [pc, #532]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ecc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ed0:	6113      	str	r3, [r2, #16]
 8006ed2:	4b83      	ldr	r3, [pc, #524]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ed4:	6919      	ldr	r1, [r3, #16]
 8006ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ede:	4a80      	ldr	r2, [pc, #512]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ef6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006efa:	460b      	mov	r3, r1
 8006efc:	4313      	orrs	r3, r2
 8006efe:	d009      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f00:	4b77      	ldr	r3, [pc, #476]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f04:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0e:	4a74      	ldr	r2, [pc, #464]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f10:	430b      	orrs	r3, r1
 8006f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f22:	2300      	movs	r3, #0
 8006f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f26:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	d00a      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f30:	4b6b      	ldr	r3, [pc, #428]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f34:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f40:	4a67      	ldr	r2, [pc, #412]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f42:	430b      	orrs	r3, r1
 8006f44:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	2100      	movs	r1, #0
 8006f50:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f58:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	d011      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	3308      	adds	r3, #8
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 fa4a 	bl	8008404 <RCCEx_PLL2_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	2100      	movs	r1, #0
 8006f90:	6239      	str	r1, [r7, #32]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f98:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	d011      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	2101      	movs	r1, #1
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 fa2a 	bl	8008404 <RCCEx_PLL2_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	2100      	movs	r1, #0
 8006fd0:	61b9      	str	r1, [r7, #24]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	d011      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	2102      	movs	r1, #2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 fa0a 	bl	8008404 <RCCEx_PLL2_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007002:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	2100      	movs	r1, #0
 8007010:	6139      	str	r1, [r7, #16]
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800701c:	460b      	mov	r3, r1
 800701e:	4313      	orrs	r3, r2
 8007020:	d011      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007026:	3328      	adds	r3, #40	@ 0x28
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f001 fa9c 	bl	8008568 <RCCEx_PLL3_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	2100      	movs	r1, #0
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800705c:	460b      	mov	r3, r1
 800705e:	4313      	orrs	r3, r2
 8007060:	d011      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007066:	3328      	adds	r3, #40	@ 0x28
 8007068:	2101      	movs	r1, #1
 800706a:	4618      	mov	r0, r3
 800706c:	f001 fa7c 	bl	8008568 <RCCEx_PLL3_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	2100      	movs	r1, #0
 8007090:	6039      	str	r1, [r7, #0]
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	607b      	str	r3, [r7, #4]
 8007098:	e9d7 1200 	ldrd	r1, r2, [r7]
 800709c:	460b      	mov	r3, r1
 800709e:	4313      	orrs	r3, r2
 80070a0:	d011      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	3328      	adds	r3, #40	@ 0x28
 80070a8:	2102      	movs	r1, #2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 fa5c 	bl	8008568 <RCCEx_PLL3_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80070c6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e000      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80070da:	46bd      	mov	sp, r7
 80070dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e0:	58024400 	.word	0x58024400

080070e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b090      	sub	sp, #64	@ 0x40
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80070ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80070f6:	430b      	orrs	r3, r1
 80070f8:	f040 8094 	bne.w	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80070fc:	4b9e      	ldr	r3, [pc, #632]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	2b04      	cmp	r3, #4
 800710a:	f200 8087 	bhi.w	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800710e:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	08007129 	.word	0x08007129
 8007118:	08007151 	.word	0x08007151
 800711c:	08007179 	.word	0x08007179
 8007120:	08007215 	.word	0x08007215
 8007124:	080071a1 	.word	0x080071a1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007128:	4b93      	ldr	r3, [pc, #588]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007130:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007134:	d108      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800713a:	4618      	mov	r0, r3
 800713c:	f001 f810 	bl	8008160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007144:	f000 bd45 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800714c:	f000 bd41 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007150:	4b89      	ldr	r3, [pc, #548]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800715c:	d108      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800715e:	f107 0318 	add.w	r3, r7, #24
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fd54 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800716c:	f000 bd31 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007174:	f000 bd2d 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007178:	4b7f      	ldr	r3, [pc, #508]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007184:	d108      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007186:	f107 030c 	add.w	r3, r7, #12
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fe94 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007194:	f000 bd1d 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800719c:	f000 bd19 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071a0:	4b75      	ldr	r3, [pc, #468]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071aa:	4b73      	ldr	r3, [pc, #460]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d10c      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80071b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d109      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071bc:	4b6e      	ldr	r3, [pc, #440]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	08db      	lsrs	r3, r3, #3
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	4a6d      	ldr	r2, [pc, #436]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071ce:	e01f      	b.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071d0:	4b69      	ldr	r3, [pc, #420]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071dc:	d106      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071e4:	d102      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071e6:	4b66      	ldr	r3, [pc, #408]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80071e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071ea:	e011      	b.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071ec:	4b62      	ldr	r3, [pc, #392]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071f8:	d106      	bne.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80071fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007200:	d102      	bne.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007202:	4b60      	ldr	r3, [pc, #384]	@ (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007206:	e003      	b.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800720c:	f000 bce1 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007210:	f000 bcdf 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007214:	4b5c      	ldr	r3, [pc, #368]	@ (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007218:	f000 bcdb 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007220:	f000 bcd7 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007228:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800722c:	430b      	orrs	r3, r1
 800722e:	f040 80ad 	bne.w	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007232:	4b51      	ldr	r3, [pc, #324]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007236:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800723a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007242:	d056      	beq.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724a:	f200 8090 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	2bc0      	cmp	r3, #192	@ 0xc0
 8007252:	f000 8088 	beq.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007258:	2bc0      	cmp	r3, #192	@ 0xc0
 800725a:	f200 8088 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	2b80      	cmp	r3, #128	@ 0x80
 8007262:	d032      	beq.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	2b80      	cmp	r3, #128	@ 0x80
 8007268:	f200 8081 	bhi.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	2b40      	cmp	r3, #64	@ 0x40
 8007276:	d014      	beq.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007278:	e079      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800727a:	4b3f      	ldr	r3, [pc, #252]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007286:	d108      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800728c:	4618      	mov	r0, r3
 800728e:	f000 ff67 	bl	8008160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007296:	f000 bc9c 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800729e:	f000 bc98 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072a2:	4b35      	ldr	r3, [pc, #212]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072ae:	d108      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072b0:	f107 0318 	add.w	r3, r7, #24
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fcab 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072be:	f000 bc88 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072c6:	f000 bc84 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072ca:	4b2b      	ldr	r3, [pc, #172]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d6:	d108      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072d8:	f107 030c 	add.w	r3, r7, #12
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 fdeb 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e6:	f000 bc74 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ee:	f000 bc70 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072f2:	4b21      	ldr	r3, [pc, #132]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b04      	cmp	r3, #4
 8007306:	d10c      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730a:	2b00      	cmp	r3, #0
 800730c:	d109      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800730e:	4b1a      	ldr	r3, [pc, #104]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	08db      	lsrs	r3, r3, #3
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	4a18      	ldr	r2, [pc, #96]	@ (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800731a:	fa22 f303 	lsr.w	r3, r2, r3
 800731e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007320:	e01f      	b.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007322:	4b15      	ldr	r3, [pc, #84]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800732a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800732e:	d106      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007336:	d102      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007338:	4b11      	ldr	r3, [pc, #68]	@ (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800733c:	e011      	b.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800733e:	4b0e      	ldr	r3, [pc, #56]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800734a:	d106      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800734c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007352:	d102      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007354:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800735e:	f000 bc38 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007362:	f000 bc36 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007366:	4b08      	ldr	r3, [pc, #32]	@ (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800736a:	f000 bc32 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007372:	f000 bc2e 	b.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007376:	bf00      	nop
 8007378:	58024400 	.word	0x58024400
 800737c:	03d09000 	.word	0x03d09000
 8007380:	003d0900 	.word	0x003d0900
 8007384:	017d7840 	.word	0x017d7840
 8007388:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800738c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007390:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007394:	430b      	orrs	r3, r1
 8007396:	f040 809c 	bne.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800739a:	4b9e      	ldr	r3, [pc, #632]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800739c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80073a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073aa:	d054      	beq.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073b2:	f200 808b 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80073bc:	f000 8083 	beq.w	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80073c6:	f200 8081 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80073ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073d0:	d02f      	beq.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073d8:	d878      	bhi.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d004      	beq.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073e6:	d012      	beq.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80073e8:	e070      	b.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073ea:	4b8a      	ldr	r3, [pc, #552]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073f6:	d107      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 feaf 	bl	8008160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007406:	e3e4      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800740c:	e3e1      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800740e:	4b81      	ldr	r3, [pc, #516]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800741a:	d107      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800741c:	f107 0318 	add.w	r3, r7, #24
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fbf5 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800742a:	e3d2      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007430:	e3cf      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007432:	4b78      	ldr	r3, [pc, #480]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800743a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800743e:	d107      	bne.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007440:	f107 030c 	add.w	r3, r7, #12
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fd37 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800744e:	e3c0      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007454:	e3bd      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007456:	4b6f      	ldr	r3, [pc, #444]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800745a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800745e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007460:	4b6c      	ldr	r3, [pc, #432]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d10c      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800746c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746e:	2b00      	cmp	r3, #0
 8007470:	d109      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007472:	4b68      	ldr	r3, [pc, #416]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	08db      	lsrs	r3, r3, #3
 8007478:	f003 0303 	and.w	r3, r3, #3
 800747c:	4a66      	ldr	r2, [pc, #408]	@ (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800747e:	fa22 f303 	lsr.w	r3, r2, r3
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007484:	e01e      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007486:	4b63      	ldr	r3, [pc, #396]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800748e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007492:	d106      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800749a:	d102      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800749c:	4b5f      	ldr	r3, [pc, #380]	@ (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800749e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074a0:	e010      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074a2:	4b5c      	ldr	r3, [pc, #368]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ae:	d106      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80074b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b6:	d102      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074b8:	4b59      	ldr	r3, [pc, #356]	@ (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80074ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074bc:	e002      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80074c2:	e386      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074c4:	e385      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80074c6:	4b57      	ldr	r3, [pc, #348]	@ (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80074c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ca:	e382      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d0:	e37f      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80074d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80074da:	430b      	orrs	r3, r1
 80074dc:	f040 80a7 	bne.w	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80074e0:	4b4c      	ldr	r3, [pc, #304]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80074e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074f0:	d055      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074f8:	f200 8096 	bhi.w	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007502:	f000 8084 	beq.w	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007508:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800750c:	f200 808c 	bhi.w	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007512:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007516:	d030      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800751e:	f200 8083 	bhi.w	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	2b00      	cmp	r3, #0
 8007526:	d004      	beq.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800752e:	d012      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007530:	e07a      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007532:	4b38      	ldr	r3, [pc, #224]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800753e:	d107      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fe0b 	bl	8008160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800754a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800754e:	e340      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007554:	e33d      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007556:	4b2f      	ldr	r3, [pc, #188]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800755e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007562:	d107      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007564:	f107 0318 	add.w	r3, r7, #24
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fb51 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007572:	e32e      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007578:	e32b      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800757a:	4b26      	ldr	r3, [pc, #152]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007586:	d107      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007588:	f107 030c 	add.w	r3, r7, #12
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fc93 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007596:	e31c      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800759c:	e319      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800759e:	4b1d      	ldr	r3, [pc, #116]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d10c      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80075b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075ba:	4b16      	ldr	r3, [pc, #88]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	08db      	lsrs	r3, r3, #3
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	4a14      	ldr	r2, [pc, #80]	@ (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80075c6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075cc:	e01e      	b.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075ce:	4b11      	ldr	r3, [pc, #68]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075da:	d106      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80075dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075e2:	d102      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80075e4:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80075e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075e8:	e010      	b.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075f6:	d106      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80075f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075fe:	d102      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007600:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007604:	e002      	b.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800760a:	e2e2      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800760c:	e2e1      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800760e:	4b05      	ldr	r3, [pc, #20]	@ (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007612:	e2de      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007614:	58024400 	.word	0x58024400
 8007618:	03d09000 	.word	0x03d09000
 800761c:	003d0900 	.word	0x003d0900
 8007620:	017d7840 	.word	0x017d7840
 8007624:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800762c:	e2d1      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800762e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007632:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007636:	430b      	orrs	r3, r1
 8007638:	f040 809c 	bne.w	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800763c:	4b93      	ldr	r3, [pc, #588]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800763e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007640:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007644:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800764c:	d054      	beq.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800764e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007650:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007654:	f200 808b 	bhi.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800765e:	f000 8083 	beq.w	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007664:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007668:	f200 8081 	bhi.w	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800766c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007672:	d02f      	beq.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800767a:	d878      	bhi.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800767c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767e:	2b00      	cmp	r3, #0
 8007680:	d004      	beq.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007688:	d012      	beq.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800768a:	e070      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800768c:	4b7f      	ldr	r3, [pc, #508]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007694:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007698:	d107      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800769a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fd5e 	bl	8008160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076a8:	e293      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ae:	e290      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076b0:	4b76      	ldr	r3, [pc, #472]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076bc:	d107      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076be:	f107 0318 	add.w	r3, r7, #24
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 faa4 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076cc:	e281      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d2:	e27e      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076d4:	4b6d      	ldr	r3, [pc, #436]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e0:	d107      	bne.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e2:	f107 030c 	add.w	r3, r7, #12
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fbe6 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f0:	e26f      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076f6:	e26c      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076f8:	4b64      	ldr	r3, [pc, #400]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007700:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007702:	4b62      	ldr	r3, [pc, #392]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0304 	and.w	r3, r3, #4
 800770a:	2b04      	cmp	r3, #4
 800770c:	d10c      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800770e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007710:	2b00      	cmp	r3, #0
 8007712:	d109      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007714:	4b5d      	ldr	r3, [pc, #372]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	08db      	lsrs	r3, r3, #3
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	4a5c      	ldr	r2, [pc, #368]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007720:	fa22 f303 	lsr.w	r3, r2, r3
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007726:	e01e      	b.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007728:	4b58      	ldr	r3, [pc, #352]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007734:	d106      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800773c:	d102      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800773e:	4b55      	ldr	r3, [pc, #340]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007742:	e010      	b.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007744:	4b51      	ldr	r3, [pc, #324]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800774c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007750:	d106      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007758:	d102      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800775a:	4b4f      	ldr	r3, [pc, #316]	@ (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800775c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800775e:	e002      	b.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007764:	e235      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007766:	e234      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007768:	4b4c      	ldr	r3, [pc, #304]	@ (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800776a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776c:	e231      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007772:	e22e      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007778:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800777c:	430b      	orrs	r3, r1
 800777e:	f040 808f 	bne.w	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007782:	4b42      	ldr	r3, [pc, #264]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007786:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800778a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800778c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007792:	d06b      	beq.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800779a:	d874      	bhi.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077a2:	d056      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077aa:	d86c      	bhi.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80077ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077b2:	d03b      	beq.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077ba:	d864      	bhi.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80077bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077c2:	d021      	beq.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ca:	d85c      	bhi.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80077d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d8:	d004      	beq.n	80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80077da:	e054      	b.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80077dc:	f7fe fa30 	bl	8005c40 <HAL_RCC_GetPCLK1Freq>
 80077e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077e2:	e1f6      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077e4:	4b29      	ldr	r3, [pc, #164]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077f0:	d107      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077f2:	f107 0318 	add.w	r3, r7, #24
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fa0a 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007800:	e1e7      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007806:	e1e4      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007808:	4b20      	ldr	r3, [pc, #128]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007814:	d107      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007816:	f107 030c 	add.w	r3, r7, #12
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fb4c 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007824:	e1d5      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800782a:	e1d2      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800782c:	4b17      	ldr	r3, [pc, #92]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b04      	cmp	r3, #4
 8007836:	d109      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007838:	4b14      	ldr	r3, [pc, #80]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	08db      	lsrs	r3, r3, #3
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	4a13      	ldr	r2, [pc, #76]	@ (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007844:	fa22 f303 	lsr.w	r3, r2, r3
 8007848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800784a:	e1c2      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007850:	e1bf      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007852:	4b0e      	ldr	r3, [pc, #56]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800785a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800785e:	d102      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007860:	4b0c      	ldr	r3, [pc, #48]	@ (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007864:	e1b5      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800786a:	e1b2      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800786c:	4b07      	ldr	r3, [pc, #28]	@ (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007878:	d102      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800787a:	4b07      	ldr	r3, [pc, #28]	@ (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800787c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800787e:	e1a8      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007884:	e1a5      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800788a:	e1a2      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800788c:	58024400 	.word	0x58024400
 8007890:	03d09000 	.word	0x03d09000
 8007894:	003d0900 	.word	0x003d0900
 8007898:	017d7840 	.word	0x017d7840
 800789c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80078a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80078a8:	430b      	orrs	r3, r1
 80078aa:	d173      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80078ac:	4b9c      	ldr	r3, [pc, #624]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80078b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078bc:	d02f      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078c4:	d863      	bhi.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d004      	beq.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d2:	d012      	beq.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80078d4:	e05b      	b.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078d6:	4b92      	ldr	r3, [pc, #584]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078e2:	d107      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e4:	f107 0318 	add.w	r3, r7, #24
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 f991 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078f2:	e16e      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f8:	e16b      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078fa:	4b89      	ldr	r3, [pc, #548]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007906:	d107      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007908:	f107 030c 	add.w	r3, r7, #12
 800790c:	4618      	mov	r0, r3
 800790e:	f000 fad3 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007916:	e15c      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800791c:	e159      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800791e:	4b80      	ldr	r3, [pc, #512]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007922:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007928:	4b7d      	ldr	r3, [pc, #500]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b04      	cmp	r3, #4
 8007932:	d10c      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007936:	2b00      	cmp	r3, #0
 8007938:	d109      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800793a:	4b79      	ldr	r3, [pc, #484]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	08db      	lsrs	r3, r3, #3
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	4a77      	ldr	r2, [pc, #476]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007946:	fa22 f303 	lsr.w	r3, r2, r3
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800794c:	e01e      	b.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800794e:	4b74      	ldr	r3, [pc, #464]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800795a:	d106      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800795c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007962:	d102      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007964:	4b70      	ldr	r3, [pc, #448]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007968:	e010      	b.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800796a:	4b6d      	ldr	r3, [pc, #436]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007972:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007976:	d106      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800797a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800797e:	d102      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007980:	4b6a      	ldr	r3, [pc, #424]	@ (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007984:	e002      	b.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800798a:	e122      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800798c:	e121      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007992:	e11e      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007998:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800799c:	430b      	orrs	r3, r1
 800799e:	d133      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80079a0:	4b5f      	ldr	r3, [pc, #380]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80079aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079b6:	d012      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80079b8:	e023      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079ba:	4b59      	ldr	r3, [pc, #356]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079c6:	d107      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fbc7 	bl	8008160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079d6:	e0fc      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079dc:	e0f9      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079de:	4b50      	ldr	r3, [pc, #320]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079ea:	d107      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ec:	f107 0318 	add.w	r3, r7, #24
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f90d 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079fa:	e0ea      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a00:	e0e7      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a06:	e0e4      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a0c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007a10:	430b      	orrs	r3, r1
 8007a12:	f040 808d 	bne.w	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007a16:	4b42      	ldr	r3, [pc, #264]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a1a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007a1e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a26:	d06b      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a2e:	d874      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a36:	d056      	beq.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3e:	d86c      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a46:	d03b      	beq.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a4e:	d864      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a56:	d021      	beq.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a5e:	d85c      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d004      	beq.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a6c:	d004      	beq.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007a6e:	e054      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007a70:	f000 f8b8 	bl	8007be4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a74:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a76:	e0ac      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a78:	4b29      	ldr	r3, [pc, #164]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a84:	d107      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a86:	f107 0318 	add.w	r3, r7, #24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f8c0 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a94:	e09d      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a9a:	e09a      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a9c:	4b20      	ldr	r3, [pc, #128]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007aa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aa8:	d107      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aaa:	f107 030c 	add.w	r3, r7, #12
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fa02 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ab8:	e08b      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007abe:	e088      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ac0:	4b17      	ldr	r3, [pc, #92]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d109      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007acc:	4b14      	ldr	r3, [pc, #80]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	08db      	lsrs	r3, r3, #3
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	4a13      	ldr	r2, [pc, #76]	@ (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8007adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ade:	e078      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae4:	e075      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007af2:	d102      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007af4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007af8:	e06b      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007afe:	e068      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b00:	4b07      	ldr	r3, [pc, #28]	@ (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b0c:	d102      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007b0e:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b12:	e05e      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b18:	e05b      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b1e:	e058      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b20:	58024400 	.word	0x58024400
 8007b24:	03d09000 	.word	0x03d09000
 8007b28:	003d0900 	.word	0x003d0900
 8007b2c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b34:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	d148      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007b3c:	4b27      	ldr	r3, [pc, #156]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b4c:	d02a      	beq.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b54:	d838      	bhi.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b62:	d00d      	beq.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007b64:	e030      	b.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b66:	4b1d      	ldr	r3, [pc, #116]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b72:	d102      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007b74:	4b1a      	ldr	r3, [pc, #104]	@ (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b78:	e02b      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b7e:	e028      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b80:	4b16      	ldr	r3, [pc, #88]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b8c:	d107      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fae4 	bl	8008160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b9c:	e019      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba2:	e016      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bb0:	d107      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bb2:	f107 0318 	add.w	r3, r7, #24
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 f82a 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc0:	e007      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc6:	e004      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bcc:	e001      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3740      	adds	r7, #64	@ 0x40
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	017d7840 	.word	0x017d7840

08007be4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007be8:	f7fd fffa 	bl	8005be0 <HAL_RCC_GetHCLKFreq>
 8007bec:	4602      	mov	r2, r0
 8007bee:	4b06      	ldr	r3, [pc, #24]	@ (8007c08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	091b      	lsrs	r3, r3, #4
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	4904      	ldr	r1, [pc, #16]	@ (8007c0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007bfa:	5ccb      	ldrb	r3, [r1, r3]
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	08015c3c 	.word	0x08015c3c

08007c10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b089      	sub	sp, #36	@ 0x24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c18:	4ba1      	ldr	r3, [pc, #644]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c22:	4b9f      	ldr	r3, [pc, #636]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c26:	0b1b      	lsrs	r3, r3, #12
 8007c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c2e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	091b      	lsrs	r3, r3, #4
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c3a:	4b99      	ldr	r3, [pc, #612]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3e:	08db      	lsrs	r3, r3, #3
 8007c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	fb02 f303 	mul.w	r3, r2, r3
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8111 	beq.w	8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	f000 8083 	beq.w	8007d6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	f200 80a1 	bhi.w	8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d056      	beq.n	8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c7a:	e099      	b.n	8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c7c:	4b88      	ldr	r3, [pc, #544]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0320 	and.w	r3, r3, #32
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d02d      	beq.n	8007ce4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c88:	4b85      	ldr	r3, [pc, #532]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	08db      	lsrs	r3, r3, #3
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	4a84      	ldr	r2, [pc, #528]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c94:	fa22 f303 	lsr.w	r3, r2, r3
 8007c98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	ee07 3a90 	vmov	s15, r3
 8007ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ce2:	e087      	b.n	8007df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d26:	e065      	b.n	8007df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3a:	4b59      	ldr	r3, [pc, #356]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d6a:	e043      	b.n	8007df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7e:	4b48      	ldr	r3, [pc, #288]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dae:	e021      	b.n	8007df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc2:	4b37      	ldr	r3, [pc, #220]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007df2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007df4:	4b2a      	ldr	r3, [pc, #168]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df8:	0a5b      	lsrs	r3, r3, #9
 8007dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e1a:	ee17 2a90 	vmov	r2, s15
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e22:	4b1f      	ldr	r3, [pc, #124]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e26:	0c1b      	lsrs	r3, r3, #16
 8007e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e48:	ee17 2a90 	vmov	r2, s15
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e50:	4b13      	ldr	r3, [pc, #76]	@ (8007ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e54:	0e1b      	lsrs	r3, r3, #24
 8007e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e5a:	ee07 3a90 	vmov	s15, r3
 8007e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e76:	ee17 2a90 	vmov	r2, s15
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e7e:	e008      	b.n	8007e92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	609a      	str	r2, [r3, #8]
}
 8007e92:	bf00      	nop
 8007e94:	3724      	adds	r7, #36	@ 0x24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	58024400 	.word	0x58024400
 8007ea4:	03d09000 	.word	0x03d09000
 8007ea8:	46000000 	.word	0x46000000
 8007eac:	4c742400 	.word	0x4c742400
 8007eb0:	4a742400 	.word	0x4a742400
 8007eb4:	4bbebc20 	.word	0x4bbebc20

08007eb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b089      	sub	sp, #36	@ 0x24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007eca:	4b9f      	ldr	r3, [pc, #636]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ece:	0d1b      	lsrs	r3, r3, #20
 8007ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007ee2:	4b99      	ldr	r3, [pc, #612]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee6:	08db      	lsrs	r3, r3, #3
 8007ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 8111 	beq.w	8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	f000 8083 	beq.w	8008014 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	f200 80a1 	bhi.w	8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d056      	beq.n	8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f22:	e099      	b.n	8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f24:	4b88      	ldr	r3, [pc, #544]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d02d      	beq.n	8007f8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f30:	4b85      	ldr	r3, [pc, #532]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	08db      	lsrs	r3, r3, #3
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	4a84      	ldr	r2, [pc, #528]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	ee07 3a90 	vmov	s15, r3
 8007f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	ee07 3a90 	vmov	s15, r3
 8007f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f8a:	e087      	b.n	800809c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fce:	e065      	b.n	800809c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008158 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe2:	4b59      	ldr	r3, [pc, #356]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008012:	e043      	b.n	800809c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800815c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008026:	4b48      	ldr	r3, [pc, #288]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800802a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008036:	ed97 6a03 	vldr	s12, [r7, #12]
 800803a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800803e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800804a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008056:	e021      	b.n	800809c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008158 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806a:	4b37      	ldr	r3, [pc, #220]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800806c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807a:	ed97 6a03 	vldr	s12, [r7, #12]
 800807e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800808e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800809a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800809c:	4b2a      	ldr	r3, [pc, #168]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800809e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a0:	0a5b      	lsrs	r3, r3, #9
 80080a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c2:	ee17 2a90 	vmov	r2, s15
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80080ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ce:	0c1b      	lsrs	r3, r3, #16
 80080d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080d4:	ee07 3a90 	vmov	s15, r3
 80080d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f0:	ee17 2a90 	vmov	r2, s15
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80080f8:	4b13      	ldr	r3, [pc, #76]	@ (8008148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fc:	0e1b      	lsrs	r3, r3, #24
 80080fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800810e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008112:	edd7 6a07 	vldr	s13, [r7, #28]
 8008116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800811a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800811e:	ee17 2a90 	vmov	r2, s15
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008126:	e008      	b.n	800813a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	609a      	str	r2, [r3, #8]
}
 800813a:	bf00      	nop
 800813c:	3724      	adds	r7, #36	@ 0x24
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	58024400 	.word	0x58024400
 800814c:	03d09000 	.word	0x03d09000
 8008150:	46000000 	.word	0x46000000
 8008154:	4c742400 	.word	0x4c742400
 8008158:	4a742400 	.word	0x4a742400
 800815c:	4bbebc20 	.word	0x4bbebc20

08008160 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008160:	b480      	push	{r7}
 8008162:	b089      	sub	sp, #36	@ 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008168:	4ba0      	ldr	r3, [pc, #640]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800816a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008172:	4b9e      	ldr	r3, [pc, #632]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008176:	091b      	lsrs	r3, r3, #4
 8008178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800817c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800817e:	4b9b      	ldr	r3, [pc, #620]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008188:	4b98      	ldr	r3, [pc, #608]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800818a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800818c:	08db      	lsrs	r3, r3, #3
 800818e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	fb02 f303 	mul.w	r3, r2, r3
 8008198:	ee07 3a90 	vmov	s15, r3
 800819c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 8111 	beq.w	80083ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	f000 8083 	beq.w	80082ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	f200 80a1 	bhi.w	80082fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d056      	beq.n	8008276 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80081c8:	e099      	b.n	80082fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081ca:	4b88      	ldr	r3, [pc, #544]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d02d      	beq.n	8008232 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081d6:	4b85      	ldr	r3, [pc, #532]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	08db      	lsrs	r3, r3, #3
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	4a83      	ldr	r2, [pc, #524]	@ (80083f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80081e2:	fa22 f303 	lsr.w	r3, r2, r3
 80081e6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	ee07 3a90 	vmov	s15, r3
 80081f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008200:	4b7a      	ldr	r3, [pc, #488]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008208:	ee07 3a90 	vmov	s15, r3
 800820c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008210:	ed97 6a03 	vldr	s12, [r7, #12]
 8008214:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80083f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800821c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800822c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008230:	e087      	b.n	8008342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	ee07 3a90 	vmov	s15, r3
 8008238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80083f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008244:	4b69      	ldr	r3, [pc, #420]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824c:	ee07 3a90 	vmov	s15, r3
 8008250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008254:	ed97 6a03 	vldr	s12, [r7, #12]
 8008258:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80083f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800825c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008264:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800826c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008270:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008274:	e065      	b.n	8008342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	ee07 3a90 	vmov	s15, r3
 800827c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008280:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80083fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008288:	4b58      	ldr	r3, [pc, #352]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800828a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008290:	ee07 3a90 	vmov	s15, r3
 8008294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008298:	ed97 6a03 	vldr	s12, [r7, #12]
 800829c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80083f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082b8:	e043      	b.n	8008342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	ee07 3a90 	vmov	s15, r3
 80082c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008400 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80082c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082cc:	4b47      	ldr	r3, [pc, #284]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80083f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082fc:	e021      	b.n	8008342 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	ee07 3a90 	vmov	s15, r3
 8008304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008308:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80083f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800830c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008310:	4b36      	ldr	r3, [pc, #216]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008320:	ed97 6a03 	vldr	s12, [r7, #12]
 8008324:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80083f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008330:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008340:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008342:	4b2a      	ldr	r3, [pc, #168]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008346:	0a5b      	lsrs	r3, r3, #9
 8008348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800834c:	ee07 3a90 	vmov	s15, r3
 8008350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800835c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008368:	ee17 2a90 	vmov	r2, s15
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008370:	4b1e      	ldr	r3, [pc, #120]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008374:	0c1b      	lsrs	r3, r3, #16
 8008376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800838a:	edd7 6a07 	vldr	s13, [r7, #28]
 800838e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008396:	ee17 2a90 	vmov	r2, s15
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800839e:	4b13      	ldr	r3, [pc, #76]	@ (80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a2:	0e1b      	lsrs	r3, r3, #24
 80083a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a8:	ee07 3a90 	vmov	s15, r3
 80083ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083c4:	ee17 2a90 	vmov	r2, s15
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80083cc:	e008      	b.n	80083e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	609a      	str	r2, [r3, #8]
}
 80083e0:	bf00      	nop
 80083e2:	3724      	adds	r7, #36	@ 0x24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	58024400 	.word	0x58024400
 80083f0:	03d09000 	.word	0x03d09000
 80083f4:	46000000 	.word	0x46000000
 80083f8:	4c742400 	.word	0x4c742400
 80083fc:	4a742400 	.word	0x4a742400
 8008400:	4bbebc20 	.word	0x4bbebc20

08008404 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008412:	4b53      	ldr	r3, [pc, #332]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	2b03      	cmp	r3, #3
 800841c:	d101      	bne.n	8008422 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e099      	b.n	8008556 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008422:	4b4f      	ldr	r3, [pc, #316]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a4e      	ldr	r2, [pc, #312]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 8008428:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800842c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800842e:	f7f9 ff9b 	bl	8002368 <HAL_GetTick>
 8008432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008434:	e008      	b.n	8008448 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008436:	f7f9 ff97 	bl	8002368 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e086      	b.n	8008556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008448:	4b45      	ldr	r3, [pc, #276]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1f0      	bne.n	8008436 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008454:	4b42      	ldr	r3, [pc, #264]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 8008456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008458:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	031b      	lsls	r3, r3, #12
 8008462:	493f      	ldr	r1, [pc, #252]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 8008464:	4313      	orrs	r3, r2
 8008466:	628b      	str	r3, [r1, #40]	@ 0x28
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	3b01      	subs	r3, #1
 800846e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	3b01      	subs	r3, #1
 8008478:	025b      	lsls	r3, r3, #9
 800847a:	b29b      	uxth	r3, r3
 800847c:	431a      	orrs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	3b01      	subs	r3, #1
 8008484:	041b      	lsls	r3, r3, #16
 8008486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	3b01      	subs	r3, #1
 8008492:	061b      	lsls	r3, r3, #24
 8008494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008498:	4931      	ldr	r1, [pc, #196]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800849e:	4b30      	ldr	r3, [pc, #192]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	492d      	ldr	r1, [pc, #180]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80084b0:	4b2b      	ldr	r3, [pc, #172]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b4:	f023 0220 	bic.w	r2, r3, #32
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	4928      	ldr	r1, [pc, #160]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80084c2:	4b27      	ldr	r3, [pc, #156]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c6:	4a26      	ldr	r2, [pc, #152]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084c8:	f023 0310 	bic.w	r3, r3, #16
 80084cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80084ce:	4b24      	ldr	r3, [pc, #144]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084d2:	4b24      	ldr	r3, [pc, #144]	@ (8008564 <RCCEx_PLL2_Config+0x160>)
 80084d4:	4013      	ands	r3, r2
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	69d2      	ldr	r2, [r2, #28]
 80084da:	00d2      	lsls	r2, r2, #3
 80084dc:	4920      	ldr	r1, [pc, #128]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80084e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084e8:	f043 0310 	orr.w	r3, r3, #16
 80084ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d106      	bne.n	8008502 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80084f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f8:	4a19      	ldr	r2, [pc, #100]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 80084fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008500:	e00f      	b.n	8008522 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d106      	bne.n	8008516 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008508:	4b15      	ldr	r3, [pc, #84]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 800850a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850c:	4a14      	ldr	r2, [pc, #80]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 800850e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008514:	e005      	b.n	8008522 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008516:	4b12      	ldr	r3, [pc, #72]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 8008518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851a:	4a11      	ldr	r2, [pc, #68]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 800851c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008520:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008522:	4b0f      	ldr	r3, [pc, #60]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a0e      	ldr	r2, [pc, #56]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 8008528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800852c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852e:	f7f9 ff1b 	bl	8002368 <HAL_GetTick>
 8008532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008534:	e008      	b.n	8008548 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008536:	f7f9 ff17 	bl	8002368 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e006      	b.n	8008556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008548:	4b05      	ldr	r3, [pc, #20]	@ (8008560 <RCCEx_PLL2_Config+0x15c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0f0      	beq.n	8008536 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	58024400 	.word	0x58024400
 8008564:	ffff0007 	.word	0xffff0007

08008568 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008576:	4b53      	ldr	r3, [pc, #332]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857a:	f003 0303 	and.w	r3, r3, #3
 800857e:	2b03      	cmp	r3, #3
 8008580:	d101      	bne.n	8008586 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e099      	b.n	80086ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008586:	4b4f      	ldr	r3, [pc, #316]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a4e      	ldr	r2, [pc, #312]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 800858c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008592:	f7f9 fee9 	bl	8002368 <HAL_GetTick>
 8008596:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008598:	e008      	b.n	80085ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800859a:	f7f9 fee5 	bl	8002368 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d901      	bls.n	80085ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e086      	b.n	80086ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085ac:	4b45      	ldr	r3, [pc, #276]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1f0      	bne.n	800859a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80085b8:	4b42      	ldr	r3, [pc, #264]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 80085ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	051b      	lsls	r3, r3, #20
 80085c6:	493f      	ldr	r1, [pc, #252]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	3b01      	subs	r3, #1
 80085dc:	025b      	lsls	r3, r3, #9
 80085de:	b29b      	uxth	r3, r3
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	041b      	lsls	r3, r3, #16
 80085ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80085ee:	431a      	orrs	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	061b      	lsls	r3, r3, #24
 80085f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80085fc:	4931      	ldr	r1, [pc, #196]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008602:	4b30      	ldr	r3, [pc, #192]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008606:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	492d      	ldr	r1, [pc, #180]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008610:	4313      	orrs	r3, r2
 8008612:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008614:	4b2b      	ldr	r3, [pc, #172]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008618:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	4928      	ldr	r1, [pc, #160]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008622:	4313      	orrs	r3, r2
 8008624:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008626:	4b27      	ldr	r3, [pc, #156]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862a:	4a26      	ldr	r2, [pc, #152]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 800862c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008630:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008632:	4b24      	ldr	r3, [pc, #144]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008636:	4b24      	ldr	r3, [pc, #144]	@ (80086c8 <RCCEx_PLL3_Config+0x160>)
 8008638:	4013      	ands	r3, r2
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	69d2      	ldr	r2, [r2, #28]
 800863e:	00d2      	lsls	r2, r2, #3
 8008640:	4920      	ldr	r1, [pc, #128]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008642:	4313      	orrs	r3, r2
 8008644:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008646:	4b1f      	ldr	r3, [pc, #124]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864a:	4a1e      	ldr	r2, [pc, #120]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 800864c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008658:	4b1a      	ldr	r3, [pc, #104]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 800865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865c:	4a19      	ldr	r2, [pc, #100]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 800865e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008662:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008664:	e00f      	b.n	8008686 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d106      	bne.n	800867a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800866c:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 800866e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008670:	4a14      	ldr	r2, [pc, #80]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008672:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008676:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008678:	e005      	b.n	8008686 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800867a:	4b12      	ldr	r3, [pc, #72]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 800867c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867e:	4a11      	ldr	r2, [pc, #68]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008680:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008684:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008686:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a0e      	ldr	r2, [pc, #56]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 800868c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008692:	f7f9 fe69 	bl	8002368 <HAL_GetTick>
 8008696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008698:	e008      	b.n	80086ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800869a:	f7f9 fe65 	bl	8002368 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d901      	bls.n	80086ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e006      	b.n	80086ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086ac:	4b05      	ldr	r3, [pc, #20]	@ (80086c4 <RCCEx_PLL3_Config+0x15c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0f0      	beq.n	800869a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	58024400 	.word	0x58024400
 80086c8:	ffff0007 	.word	0xffff0007

080086cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08a      	sub	sp, #40	@ 0x28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e075      	b.n	80087ca <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d105      	bne.n	80086f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7f9 f9dd 	bl	8001ab0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2204      	movs	r2, #4
 80086fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f868 	bl	80087d4 <HAL_SD_InitCard>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e05d      	b.n	80087ca <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800870e:	f107 0308 	add.w	r3, r7, #8
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fdb5 	bl	8009284 <HAL_SD_GetCardStatus>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e052      	b.n	80087ca <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008724:	7e3b      	ldrb	r3, [r7, #24]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800872a:	7e7b      	ldrb	r3, [r7, #25]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008734:	2b01      	cmp	r3, #1
 8008736:	d10a      	bne.n	800874e <HAL_SD_Init+0x82>
 8008738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	d102      	bne.n	8008744 <HAL_SD_Init+0x78>
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d004      	beq.n	800874e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800874a:	659a      	str	r2, [r3, #88]	@ 0x58
 800874c:	e00b      	b.n	8008766 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008752:	2b01      	cmp	r3, #1
 8008754:	d104      	bne.n	8008760 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800875c:	659a      	str	r2, [r3, #88]	@ 0x58
 800875e:	e002      	b.n	8008766 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fe73 	bl	8009458 <HAL_SD_ConfigWideBusOperation>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e026      	b.n	80087ca <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800877c:	f7f9 fdf4 	bl	8002368 <HAL_GetTick>
 8008780:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008782:	e011      	b.n	80087a8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008784:	f7f9 fdf0 	bl	8002368 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008792:	d109      	bne.n	80087a8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800879a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e010      	b.n	80087ca <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 ff67 	bl	800967c <HAL_SD_GetCardState>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d1e7      	bne.n	8008784 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3728      	adds	r7, #40	@ 0x28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b08d      	sub	sp, #52	@ 0x34
 80087d8:	af02      	add	r7, sp, #8
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80087dc:	2300      	movs	r3, #0
 80087de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80087ec:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80087f0:	f04f 0100 	mov.w	r1, #0
 80087f4:	f7fe fc76 	bl	80070e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80087f8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d109      	bne.n	8008814 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800880e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e070      	b.n	80088f6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	4a39      	ldr	r2, [pc, #228]	@ (8008900 <HAL_SD_InitCard+0x12c>)
 800881a:	fba2 2303 	umull	r2, r3, r2, r3
 800881e:	091b      	lsrs	r3, r3, #4
 8008820:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681c      	ldr	r4, [r3, #0]
 8008826:	466a      	mov	r2, sp
 8008828:	f107 0318 	add.w	r3, r7, #24
 800882c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008830:	e882 0003 	stmia.w	r2, {r0, r1}
 8008834:	f107 030c 	add.w	r3, r7, #12
 8008838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800883a:	4620      	mov	r0, r4
 800883c:	f004 f9b6 	bl	800cbac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4618      	mov	r0, r3
 8008846:	f004 f9f9 	bl	800cc3c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008856:	fbb2 f3f3 	udiv	r3, r2, r3
 800885a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800885c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d007      	beq.n	8008872 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008862:	4a28      	ldr	r2, [pc, #160]	@ (8008904 <HAL_SD_InitCard+0x130>)
 8008864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008866:	fbb2 f3f3 	udiv	r3, r2, r3
 800886a:	3301      	adds	r3, #1
 800886c:	4618      	mov	r0, r3
 800886e:	f7f9 fd87 	bl	8002380 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fff0 	bl	8009858 <SD_PowerON>
 8008878:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e02e      	b.n	80088f6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 ff0f 	bl	80096bc <SD_InitCard>
 800889e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00b      	beq.n	80088be <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e01b      	b.n	80088f6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80088c6:	4618      	mov	r0, r3
 80088c8:	f004 fa4e 	bl	800cd68 <SDMMC_CmdBlockLength>
 80088cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00f      	beq.n	80088f4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008908 <HAL_SD_InitCard+0x134>)
 80088da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e000      	b.n	80088f6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	372c      	adds	r7, #44	@ 0x2c
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd90      	pop	{r4, r7, pc}
 80088fe:	bf00      	nop
 8008900:	014f8b59 	.word	0x014f8b59
 8008904:	00012110 	.word	0x00012110
 8008908:	1fe00fff 	.word	0x1fe00fff

0800890c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b092      	sub	sp, #72	@ 0x48
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800891a:	f7f9 fd25 	bl	8002368 <HAL_GetTick>
 800891e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d107      	bne.n	800893e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008932:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e167      	b.n	8008c0e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b01      	cmp	r3, #1
 8008948:	f040 815a 	bne.w	8008c00 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008952:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	441a      	add	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800895c:	429a      	cmp	r2, r3
 800895e:	d907      	bls.n	8008970 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008964:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e14e      	b.n	8008c0e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2203      	movs	r2, #3
 8008974:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2200      	movs	r2, #0
 800897e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008984:	2b01      	cmp	r3, #1
 8008986:	d002      	beq.n	800898e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898a:	025b      	lsls	r3, r3, #9
 800898c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800898e:	f04f 33ff 	mov.w	r3, #4294967295
 8008992:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	025b      	lsls	r3, r3, #9
 8008998:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800899a:	2390      	movs	r3, #144	@ 0x90
 800899c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800899e:	2302      	movs	r3, #2
 80089a0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80089a6:	2300      	movs	r3, #0
 80089a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f107 0214 	add.w	r2, r7, #20
 80089b2:	4611      	mov	r1, r2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f004 f9ab 	bl	800cd10 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089c8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d90a      	bls.n	80089e6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2202      	movs	r2, #2
 80089d4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80089dc:	4618      	mov	r0, r3
 80089de:	f004 fa09 	bl	800cdf4 <SDMMC_CmdReadMultiBlock>
 80089e2:	6478      	str	r0, [r7, #68]	@ 0x44
 80089e4:	e009      	b.n	80089fa <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80089f2:	4618      	mov	r0, r3
 80089f4:	f004 f9db 	bl	800cdae <SDMMC_CmdReadSingleBlock>
 80089f8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80089fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d012      	beq.n	8008a26 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a84      	ldr	r2, [pc, #528]	@ (8008c18 <HAL_SD_ReadBlocks+0x30c>)
 8008a06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e0f3      	b.n	8008c0e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a2a:	e058      	b.n	8008ade <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d033      	beq.n	8008aa2 <HAL_SD_ReadBlocks+0x196>
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a3c:	2b1f      	cmp	r3, #31
 8008a3e:	d930      	bls.n	8008aa2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008a40:	2300      	movs	r3, #0
 8008a42:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a44:	e027      	b.n	8008a96 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f004 f8d8 	bl	800cc00 <SDMMC_ReadFIFO>
 8008a50:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a72:	0c1b      	lsrs	r3, r3, #16
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a82:	0e1b      	lsrs	r3, r3, #24
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a88:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8008a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a92:	3301      	adds	r3, #1
 8008a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a98:	2b07      	cmp	r3, #7
 8008a9a:	d9d4      	bls.n	8008a46 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a9e:	3b20      	subs	r3, #32
 8008aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008aa2:	f7f9 fc61 	bl	8002368 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d902      	bls.n	8008ab8 <HAL_SD_ReadBlocks+0x1ac>
 8008ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d112      	bne.n	8008ade <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a56      	ldr	r2, [pc, #344]	@ (8008c18 <HAL_SD_ReadBlocks+0x30c>)
 8008abe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e097      	b.n	8008c0e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae4:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d09f      	beq.n	8008a2c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008afa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d022      	beq.n	8008b50 <HAL_SD_ReadBlocks+0x244>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d91f      	bls.n	8008b50 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d01b      	beq.n	8008b50 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f004 f9d3 	bl	800cec8 <SDMMC_CmdStopTransfer>
 8008b22:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d012      	beq.n	8008b50 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8008c18 <HAL_SD_ReadBlocks+0x30c>)
 8008b30:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e05e      	b.n	8008c0e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d012      	beq.n	8008b84 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a2d      	ldr	r2, [pc, #180]	@ (8008c18 <HAL_SD_ReadBlocks+0x30c>)
 8008b64:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b6a:	f043 0208 	orr.w	r2, r3, #8
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e044      	b.n	8008c0e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d012      	beq.n	8008bb8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a20      	ldr	r2, [pc, #128]	@ (8008c18 <HAL_SD_ReadBlocks+0x30c>)
 8008b98:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b9e:	f043 0202 	orr.w	r2, r3, #2
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e02a      	b.n	8008c0e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d012      	beq.n	8008bec <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a13      	ldr	r2, [pc, #76]	@ (8008c18 <HAL_SD_ReadBlocks+0x30c>)
 8008bcc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd2:	f043 0220 	orr.w	r2, r3, #32
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e010      	b.n	8008c0e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8008c1c <HAL_SD_ReadBlocks+0x310>)
 8008bf2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e006      	b.n	8008c0e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
  }
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3748      	adds	r7, #72	@ 0x48
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	1fe00fff 	.word	0x1fe00fff
 8008c1c:	18000f3a 	.word	0x18000f3a

08008c20 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b092      	sub	sp, #72	@ 0x48
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c2e:	f7f9 fb9b 	bl	8002368 <HAL_GetTick>
 8008c32:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d107      	bne.n	8008c52 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e16b      	b.n	8008f2a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	f040 815e 	bne.w	8008f1c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	441a      	add	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d907      	bls.n	8008c84 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c78:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e152      	b.n	8008f2a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2203      	movs	r2, #3
 8008c88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2200      	movs	r2, #0
 8008c92:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d002      	beq.n	8008ca2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9e:	025b      	lsls	r3, r3, #9
 8008ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	025b      	lsls	r3, r3, #9
 8008cac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008cae:	2390      	movs	r3, #144	@ 0x90
 8008cb0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f107 0218 	add.w	r2, r7, #24
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f004 f821 	bl	800cd10 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68da      	ldr	r2, [r3, #12]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cdc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d90a      	bls.n	8008cfa <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f004 f8c5 	bl	800ce80 <SDMMC_CmdWriteMultiBlock>
 8008cf6:	6478      	str	r0, [r7, #68]	@ 0x44
 8008cf8:	e009      	b.n	8008d0e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2210      	movs	r2, #16
 8008cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d06:	4618      	mov	r0, r3
 8008d08:	f004 f897 	bl	800ce3a <SDMMC_CmdWriteSingleBlock>
 8008d0c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d012      	beq.n	8008d3a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a86      	ldr	r2, [pc, #536]	@ (8008f34 <HAL_SD_WriteBlocks+0x314>)
 8008d1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d22:	431a      	orrs	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e0f7      	b.n	8008f2a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008d3e:	e05c      	b.n	8008dfa <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d037      	beq.n	8008dbe <HAL_SD_WriteBlocks+0x19e>
 8008d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d50:	2b1f      	cmp	r3, #31
 8008d52:	d934      	bls.n	8008dbe <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8008d54:	2300      	movs	r3, #0
 8008d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d58:	e02b      	b.n	8008db2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d62:	3301      	adds	r3, #1
 8008d64:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	021a      	lsls	r2, r3, #8
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d74:	3301      	adds	r3, #1
 8008d76:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	041a      	lsls	r2, r3, #16
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d86:	3301      	adds	r3, #1
 8008d88:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	061a      	lsls	r2, r3, #24
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d98:	3301      	adds	r3, #1
 8008d9a:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f107 0214 	add.w	r2, r7, #20
 8008da4:	4611      	mov	r1, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f003 ff37 	bl	800cc1a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dae:	3301      	adds	r3, #1
 8008db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008db4:	2b07      	cmp	r3, #7
 8008db6:	d9d0      	bls.n	8008d5a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dba:	3b20      	subs	r3, #32
 8008dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008dbe:	f7f9 fad3 	bl	8002368 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d902      	bls.n	8008dd4 <HAL_SD_WriteBlocks+0x1b4>
 8008dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d112      	bne.n	8008dfa <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a56      	ldr	r2, [pc, #344]	@ (8008f34 <HAL_SD_WriteBlocks+0x314>)
 8008dda:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008de2:	431a      	orrs	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e097      	b.n	8008f2a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e00:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d09b      	beq.n	8008d40 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e16:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d022      	beq.n	8008e6c <HAL_SD_WriteBlocks+0x24c>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d91f      	bls.n	8008e6c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e30:	2b03      	cmp	r3, #3
 8008e32:	d01b      	beq.n	8008e6c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f004 f845 	bl	800cec8 <SDMMC_CmdStopTransfer>
 8008e3e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d012      	beq.n	8008e6c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a3a      	ldr	r2, [pc, #232]	@ (8008f34 <HAL_SD_WriteBlocks+0x314>)
 8008e4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e54:	431a      	orrs	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e05e      	b.n	8008f2a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e72:	f003 0308 	and.w	r3, r3, #8
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d012      	beq.n	8008ea0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8008f34 <HAL_SD_WriteBlocks+0x314>)
 8008e80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e86:	f043 0208 	orr.w	r2, r3, #8
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e044      	b.n	8008f2a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d012      	beq.n	8008ed4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a20      	ldr	r2, [pc, #128]	@ (8008f34 <HAL_SD_WriteBlocks+0x314>)
 8008eb4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eba:	f043 0202 	orr.w	r2, r3, #2
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e02a      	b.n	8008f2a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eda:	f003 0310 	and.w	r3, r3, #16
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d012      	beq.n	8008f08 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a13      	ldr	r2, [pc, #76]	@ (8008f34 <HAL_SD_WriteBlocks+0x314>)
 8008ee8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eee:	f043 0210 	orr.w	r2, r3, #16
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e010      	b.n	8008f2a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f38 <HAL_SD_WriteBlocks+0x318>)
 8008f0e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e006      	b.n	8008f2a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
  }
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3748      	adds	r7, #72	@ 0x48
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	1fe00fff 	.word	0x1fe00fff
 8008f38:	18000f3a 	.word	0x18000f3a

08008f3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f4a:	0f9b      	lsrs	r3, r3, #30
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f56:	0e9b      	lsrs	r3, r3, #26
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f68:	0e1b      	lsrs	r3, r3, #24
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f7a:	0c1b      	lsrs	r3, r3, #16
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f86:	0a1b      	lsrs	r3, r3, #8
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f9c:	0d1b      	lsrs	r3, r3, #20
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fa8:	0c1b      	lsrs	r3, r3, #16
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fba:	0bdb      	lsrs	r3, r3, #15
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fcc:	0b9b      	lsrs	r3, r3, #14
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fde:	0b5b      	lsrs	r3, r3, #13
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ff0:	0b1b      	lsrs	r3, r3, #12
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2200      	movs	r2, #0
 8009002:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009008:	2b00      	cmp	r3, #0
 800900a:	d163      	bne.n	80090d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009010:	009a      	lsls	r2, r3, #2
 8009012:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009016:	4013      	ands	r3, r2
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800901c:	0f92      	lsrs	r2, r2, #30
 800901e:	431a      	orrs	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009028:	0edb      	lsrs	r3, r3, #27
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	b2da      	uxtb	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800903a:	0e1b      	lsrs	r3, r3, #24
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	b2da      	uxtb	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800904c:	0d5b      	lsrs	r3, r3, #21
 800904e:	b2db      	uxtb	r3, r3
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	b2da      	uxtb	r2, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800905e:	0c9b      	lsrs	r3, r3, #18
 8009060:	b2db      	uxtb	r3, r3
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	b2da      	uxtb	r2, r3
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009070:	0bdb      	lsrs	r3, r3, #15
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f003 0307 	and.w	r3, r3, #7
 8009078:	b2da      	uxtb	r2, r3
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	7e1b      	ldrb	r3, [r3, #24]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	3302      	adds	r3, #2
 8009094:	2201      	movs	r2, #1
 8009096:	fa02 f303 	lsl.w	r3, r2, r3
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800909e:	fb03 f202 	mul.w	r2, r3, r2
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	7a1b      	ldrb	r3, [r3, #8]
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	2201      	movs	r2, #1
 80090b2:	409a      	lsls	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80090c0:	0a52      	lsrs	r2, r2, #9
 80090c2:	fb03 f202 	mul.w	r2, r3, r2
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80090d2:	e031      	b.n	8009138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d11d      	bne.n	8009118 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090e0:	041b      	lsls	r3, r3, #16
 80090e2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ea:	0c1b      	lsrs	r3, r3, #16
 80090ec:	431a      	orrs	r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	3301      	adds	r3, #1
 80090f8:	029a      	lsls	r2, r3, #10
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800910c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	655a      	str	r2, [r3, #84]	@ 0x54
 8009116:	e00f      	b.n	8009138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a58      	ldr	r2, [pc, #352]	@ (8009280 <HAL_SD_GetCardCSD+0x344>)
 800911e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009124:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e09d      	b.n	8009274 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800913c:	0b9b      	lsrs	r3, r3, #14
 800913e:	b2db      	uxtb	r3, r3
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	b2da      	uxtb	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800914e:	09db      	lsrs	r3, r3, #7
 8009150:	b2db      	uxtb	r3, r3
 8009152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009156:	b2da      	uxtb	r2, r3
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009166:	b2da      	uxtb	r2, r3
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009170:	0fdb      	lsrs	r3, r3, #31
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800917c:	0f5b      	lsrs	r3, r3, #29
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f003 0303 	and.w	r3, r3, #3
 8009184:	b2da      	uxtb	r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800918e:	0e9b      	lsrs	r3, r3, #26
 8009190:	b2db      	uxtb	r3, r3
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	b2da      	uxtb	r2, r3
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091a0:	0d9b      	lsrs	r3, r3, #22
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091b2:	0d5b      	lsrs	r3, r3, #21
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091ce:	0c1b      	lsrs	r3, r3, #16
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091e2:	0bdb      	lsrs	r3, r3, #15
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091f6:	0b9b      	lsrs	r3, r3, #14
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800920a:	0b5b      	lsrs	r3, r3, #13
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800921e:	0b1b      	lsrs	r3, r3, #12
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	b2da      	uxtb	r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009232:	0a9b      	lsrs	r3, r3, #10
 8009234:	b2db      	uxtb	r3, r3
 8009236:	f003 0303 	and.w	r3, r3, #3
 800923a:	b2da      	uxtb	r2, r3
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	b2db      	uxtb	r3, r3
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	b2da      	uxtb	r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009262:	b2da      	uxtb	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	1fe00fff 	.word	0x1fe00fff

08009284 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b094      	sub	sp, #80	@ 0x50
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b03      	cmp	r3, #3
 800929e:	d101      	bne.n	80092a4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e0a7      	b.n	80093f4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80092a4:	f107 0308 	add.w	r3, r7, #8
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fb62 	bl	8009974 <SD_SendSDStatus>
 80092b0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80092b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d011      	beq.n	80092dc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a4f      	ldr	r2, [pc, #316]	@ (80093fc <HAL_SD_GetCardStatus+0x178>)
 80092be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80092da:	e070      	b.n	80093be <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	099b      	lsrs	r3, r3, #6
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	0a1b      	lsrs	r3, r3, #8
 8009300:	b29b      	uxth	r3, r3
 8009302:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009306:	b29a      	uxth	r2, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	0e1b      	lsrs	r3, r3, #24
 800930c:	b29b      	uxth	r3, r3
 800930e:	4313      	orrs	r3, r2
 8009310:	b29a      	uxth	r2, r3
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	061a      	lsls	r2, r3, #24
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009322:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	0a1b      	lsrs	r3, r3, #8
 8009328:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800932c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	0e1b      	lsrs	r3, r3, #24
 8009332:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	b2da      	uxtb	r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	0a1b      	lsrs	r3, r3, #8
 8009344:	b2da      	uxtb	r2, r3
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	0d1b      	lsrs	r3, r3, #20
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 030f 	and.w	r3, r3, #15
 8009354:	b2da      	uxtb	r2, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	b29b      	uxth	r3, r3
 8009360:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009364:	b29a      	uxth	r2, r3
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	b29b      	uxth	r3, r3
 800936a:	b2db      	uxtb	r3, r3
 800936c:	b29b      	uxth	r3, r3
 800936e:	4313      	orrs	r3, r2
 8009370:	b29a      	uxth	r2, r3
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	0a9b      	lsrs	r3, r3, #10
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009380:	b2da      	uxtb	r2, r3
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	0a1b      	lsrs	r3, r3, #8
 800938a:	b2db      	uxtb	r3, r3
 800938c:	f003 0303 	and.w	r3, r3, #3
 8009390:	b2da      	uxtb	r2, r3
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	091b      	lsrs	r3, r3, #4
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	f003 030f 	and.w	r3, r3, #15
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	0e1b      	lsrs	r3, r3, #24
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80093c6:	4618      	mov	r0, r3
 80093c8:	f003 fcce 	bl	800cd68 <SDMMC_CmdBlockLength>
 80093cc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80093ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00d      	beq.n	80093f0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a08      	ldr	r2, [pc, #32]	@ (80093fc <HAL_SD_GetCardStatus+0x178>)
 80093da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093e0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80093f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3750      	adds	r7, #80	@ 0x50
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	1fe00fff 	.word	0x1fe00fff

08009400 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009458:	b590      	push	{r4, r7, lr}
 800945a:	b08d      	sub	sp, #52	@ 0x34
 800945c:	af02      	add	r7, sp, #8
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2203      	movs	r2, #3
 800946c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009474:	2b03      	cmp	r3, #3
 8009476:	d02e      	beq.n	80094d6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800947e:	d106      	bne.n	800948e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009484:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	635a      	str	r2, [r3, #52]	@ 0x34
 800948c:	e029      	b.n	80094e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009494:	d10a      	bne.n	80094ac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fb64 	bl	8009b64 <SD_WideBus_Enable>
 800949c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80094aa:	e01a      	b.n	80094e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fba1 	bl	8009bfa <SD_WideBus_Disable>
 80094b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094be:	6a3b      	ldr	r3, [r7, #32]
 80094c0:	431a      	orrs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80094c6:	e00c      	b.n	80094e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80094d4:	e005      	b.n	80094e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094da:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d007      	beq.n	80094fa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a5f      	ldr	r2, [pc, #380]	@ (800966c <HAL_SD_ConfigWideBusOperation+0x214>)
 80094f0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80094f8:	e096      	b.n	8009628 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80094fa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80094fe:	f04f 0100 	mov.w	r1, #0
 8009502:	f7fd fdef 	bl	80070e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009506:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 8083 	beq.w	8009616 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	695a      	ldr	r2, [r3, #20]
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4950      	ldr	r1, [pc, #320]	@ (8009670 <HAL_SD_ConfigWideBusOperation+0x218>)
 800952e:	fba1 1303 	umull	r1, r3, r1, r3
 8009532:	0e1b      	lsrs	r3, r3, #24
 8009534:	429a      	cmp	r2, r3
 8009536:	d303      	bcc.n	8009540 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	e05a      	b.n	80095f6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009548:	d103      	bne.n	8009552 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	61bb      	str	r3, [r7, #24]
 8009550:	e051      	b.n	80095f6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800955a:	d126      	bne.n	80095aa <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10e      	bne.n	8009582 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	4a43      	ldr	r2, [pc, #268]	@ (8009674 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d906      	bls.n	800957a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	4a40      	ldr	r2, [pc, #256]	@ (8009670 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009570:	fba2 2303 	umull	r2, r3, r2, r3
 8009574:	0e5b      	lsrs	r3, r3, #25
 8009576:	61bb      	str	r3, [r7, #24]
 8009578:	e03d      	b.n	80095f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	61bb      	str	r3, [r7, #24]
 8009580:	e039      	b.n	80095f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	69fa      	ldr	r2, [r7, #28]
 800958a:	fbb2 f3f3 	udiv	r3, r2, r3
 800958e:	4a39      	ldr	r2, [pc, #228]	@ (8009674 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d906      	bls.n	80095a2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	4a36      	ldr	r2, [pc, #216]	@ (8009670 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009598:	fba2 2303 	umull	r2, r3, r2, r3
 800959c:	0e5b      	lsrs	r3, r3, #25
 800959e:	61bb      	str	r3, [r7, #24]
 80095a0:	e029      	b.n	80095f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	61bb      	str	r3, [r7, #24]
 80095a8:	e025      	b.n	80095f6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10e      	bne.n	80095d0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	4a30      	ldr	r2, [pc, #192]	@ (8009678 <HAL_SD_ConfigWideBusOperation+0x220>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d906      	bls.n	80095c8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	4a2c      	ldr	r2, [pc, #176]	@ (8009670 <HAL_SD_ConfigWideBusOperation+0x218>)
 80095be:	fba2 2303 	umull	r2, r3, r2, r3
 80095c2:	0e1b      	lsrs	r3, r3, #24
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	e016      	b.n	80095f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	61bb      	str	r3, [r7, #24]
 80095ce:	e012      	b.n	80095f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	69fa      	ldr	r2, [r7, #28]
 80095d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095dc:	4a26      	ldr	r2, [pc, #152]	@ (8009678 <HAL_SD_ConfigWideBusOperation+0x220>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d906      	bls.n	80095f0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	4a22      	ldr	r2, [pc, #136]	@ (8009670 <HAL_SD_ConfigWideBusOperation+0x218>)
 80095e6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ea:	0e1b      	lsrs	r3, r3, #24
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	e002      	b.n	80095f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681c      	ldr	r4, [r3, #0]
 80095fa:	466a      	mov	r2, sp
 80095fc:	f107 0314 	add.w	r3, r7, #20
 8009600:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009604:	e882 0003 	stmia.w	r2, {r0, r1}
 8009608:	f107 0308 	add.w	r3, r7, #8
 800960c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800960e:	4620      	mov	r0, r4
 8009610:	f003 facc 	bl	800cbac <SDMMC_Init>
 8009614:	e008      	b.n	8009628 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800961a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009630:	4618      	mov	r0, r3
 8009632:	f003 fb99 	bl	800cd68 <SDMMC_CmdBlockLength>
 8009636:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00c      	beq.n	8009658 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a0a      	ldr	r2, [pc, #40]	@ (800966c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009644:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009664:	4618      	mov	r0, r3
 8009666:	372c      	adds	r7, #44	@ 0x2c
 8009668:	46bd      	mov	sp, r7
 800966a:	bd90      	pop	{r4, r7, pc}
 800966c:	1fe00fff 	.word	0x1fe00fff
 8009670:	55e63b89 	.word	0x55e63b89
 8009674:	02faf080 	.word	0x02faf080
 8009678:	017d7840 	.word	0x017d7840

0800967c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009688:	f107 030c 	add.w	r3, r7, #12
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fa40 	bl	8009b14 <SD_SendStatus>
 8009694:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d005      	beq.n	80096a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	0a5b      	lsrs	r3, r3, #9
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80096b2:	693b      	ldr	r3, [r7, #16]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b090      	sub	sp, #64	@ 0x40
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80096c8:	f7f8 fe4e 	bl	8002368 <HAL_GetTick>
 80096cc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f003 fac3 	bl	800cc5e <SDMMC_GetPowerState>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80096de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80096e2:	e0b5      	b.n	8009850 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d02e      	beq.n	800974a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f003 fd0e 	bl	800d112 <SDMMC_CmdSendCID>
 80096f6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80096f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <SD_InitCard+0x46>
    {
      return errorstate;
 80096fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009700:	e0a6      	b.n	8009850 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2100      	movs	r1, #0
 8009708:	4618      	mov	r0, r3
 800970a:	f003 faee 	bl	800ccea <SDMMC_GetResponse>
 800970e:	4602      	mov	r2, r0
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2104      	movs	r1, #4
 800971a:	4618      	mov	r0, r3
 800971c:	f003 fae5 	bl	800ccea <SDMMC_GetResponse>
 8009720:	4602      	mov	r2, r0
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2108      	movs	r1, #8
 800972c:	4618      	mov	r0, r3
 800972e:	f003 fadc 	bl	800ccea <SDMMC_GetResponse>
 8009732:	4602      	mov	r2, r0
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	210c      	movs	r1, #12
 800973e:	4618      	mov	r0, r3
 8009740:	f003 fad3 	bl	800ccea <SDMMC_GetResponse>
 8009744:	4602      	mov	r2, r0
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974e:	2b03      	cmp	r3, #3
 8009750:	d01d      	beq.n	800978e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009752:	e019      	b.n	8009788 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f107 020a 	add.w	r2, r7, #10
 800975c:	4611      	mov	r1, r2
 800975e:	4618      	mov	r0, r3
 8009760:	f003 fd16 	bl	800d190 <SDMMC_CmdSetRelAdd>
 8009764:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <SD_InitCard+0xb4>
      {
        return errorstate;
 800976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976e:	e06f      	b.n	8009850 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009770:	f7f8 fdfa 	bl	8002368 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800977e:	4293      	cmp	r3, r2
 8009780:	d902      	bls.n	8009788 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009782:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009786:	e063      	b.n	8009850 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009788:	897b      	ldrh	r3, [r7, #10]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0e2      	beq.n	8009754 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009792:	2b03      	cmp	r3, #3
 8009794:	d036      	beq.n	8009804 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009796:	897b      	ldrh	r3, [r7, #10]
 8009798:	461a      	mov	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a6:	041b      	lsls	r3, r3, #16
 80097a8:	4619      	mov	r1, r3
 80097aa:	4610      	mov	r0, r2
 80097ac:	f003 fcd0 	bl	800d150 <SDMMC_CmdSendCSD>
 80097b0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80097b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <SD_InitCard+0x100>
    {
      return errorstate;
 80097b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ba:	e049      	b.n	8009850 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2100      	movs	r1, #0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f003 fa91 	bl	800ccea <SDMMC_GetResponse>
 80097c8:	4602      	mov	r2, r0
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2104      	movs	r1, #4
 80097d4:	4618      	mov	r0, r3
 80097d6:	f003 fa88 	bl	800ccea <SDMMC_GetResponse>
 80097da:	4602      	mov	r2, r0
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2108      	movs	r1, #8
 80097e6:	4618      	mov	r0, r3
 80097e8:	f003 fa7f 	bl	800ccea <SDMMC_GetResponse>
 80097ec:	4602      	mov	r2, r0
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	210c      	movs	r1, #12
 80097f8:	4618      	mov	r0, r3
 80097fa:	f003 fa76 	bl	800ccea <SDMMC_GetResponse>
 80097fe:	4602      	mov	r2, r0
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2104      	movs	r1, #4
 800980a:	4618      	mov	r0, r3
 800980c:	f003 fa6d 	bl	800ccea <SDMMC_GetResponse>
 8009810:	4603      	mov	r3, r0
 8009812:	0d1a      	lsrs	r2, r3, #20
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009818:	f107 030c 	add.w	r3, r7, #12
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff fb8c 	bl	8008f3c <HAL_SD_GetCardCSD>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800982a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800982e:	e00f      	b.n	8009850 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009838:	041b      	lsls	r3, r3, #16
 800983a:	4619      	mov	r1, r3
 800983c:	4610      	mov	r0, r2
 800983e:	f003 fb7f 	bl	800cf40 <SDMMC_CmdSelDesel>
 8009842:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <SD_InitCard+0x192>
  {
    return errorstate;
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	e000      	b.n	8009850 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3740      	adds	r7, #64	@ 0x40
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009868:	2300      	movs	r3, #0
 800986a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4618      	mov	r0, r3
 8009872:	f003 fb88 	bl	800cf86 <SDMMC_CmdGoIdleState>
 8009876:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <SD_PowerON+0x2a>
  {
    return errorstate;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	e072      	b.n	8009968 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f003 fb9b 	bl	800cfc2 <SDMMC_CmdOperCond>
 800988c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009894:	d10d      	bne.n	80098b2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f003 fb70 	bl	800cf86 <SDMMC_CmdGoIdleState>
 80098a6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d004      	beq.n	80098b8 <SD_PowerON+0x60>
    {
      return errorstate;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	e05a      	b.n	8009968 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d137      	bne.n	8009930 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2100      	movs	r1, #0
 80098c6:	4618      	mov	r0, r3
 80098c8:	f003 fb9b 	bl	800d002 <SDMMC_CmdAppCommand>
 80098cc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d02d      	beq.n	8009930 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80098d8:	e046      	b.n	8009968 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f003 fb8e 	bl	800d002 <SDMMC_CmdAppCommand>
 80098e6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <SD_PowerON+0x9a>
    {
      return errorstate;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	e03a      	b.n	8009968 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	491e      	ldr	r1, [pc, #120]	@ (8009970 <SD_PowerON+0x118>)
 80098f8:	4618      	mov	r0, r3
 80098fa:	f003 fba5 	bl	800d048 <SDMMC_CmdAppOperCommand>
 80098fe:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009906:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800990a:	e02d      	b.n	8009968 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f003 f9e9 	bl	800ccea <SDMMC_GetResponse>
 8009918:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	0fdb      	lsrs	r3, r3, #31
 800991e:	2b01      	cmp	r3, #1
 8009920:	d101      	bne.n	8009926 <SD_PowerON+0xce>
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <SD_PowerON+0xd0>
 8009926:	2300      	movs	r3, #0
 8009928:	613b      	str	r3, [r7, #16]

    count++;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	3301      	adds	r3, #1
 800992e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009936:	4293      	cmp	r3, r2
 8009938:	d802      	bhi.n	8009940 <SD_PowerON+0xe8>
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d0cc      	beq.n	80098da <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009946:	4293      	cmp	r3, r2
 8009948:	d902      	bls.n	8009950 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800994a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800994e:	e00b      	b.n	8009968 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	c1100000 	.word	0xc1100000

08009974 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08c      	sub	sp, #48	@ 0x30
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800997e:	f7f8 fcf3 	bl	8002368 <HAL_GetTick>
 8009982:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2100      	movs	r1, #0
 800998e:	4618      	mov	r0, r3
 8009990:	f003 f9ab 	bl	800ccea <SDMMC_GetResponse>
 8009994:	4603      	mov	r3, r0
 8009996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800999a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800999e:	d102      	bne.n	80099a6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80099a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80099a4:	e0b0      	b.n	8009b08 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2140      	movs	r1, #64	@ 0x40
 80099ac:	4618      	mov	r0, r3
 80099ae:	f003 f9db 	bl	800cd68 <SDMMC_CmdBlockLength>
 80099b2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	e0a0      	b.n	8009b08 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ce:	041b      	lsls	r3, r3, #16
 80099d0:	4619      	mov	r1, r3
 80099d2:	4610      	mov	r0, r2
 80099d4:	f003 fb15 	bl	800d002 <SDMMC_CmdAppCommand>
 80099d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	e08d      	b.n	8009b08 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099ec:	f04f 33ff 	mov.w	r3, #4294967295
 80099f0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80099f2:	2340      	movs	r3, #64	@ 0x40
 80099f4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80099f6:	2360      	movs	r3, #96	@ 0x60
 80099f8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80099fa:	2302      	movs	r3, #2
 80099fc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a02:	2301      	movs	r3, #1
 8009a04:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f107 0208 	add.w	r2, r7, #8
 8009a0e:	4611      	mov	r1, r2
 8009a10:	4618      	mov	r0, r3
 8009a12:	f003 f97d 	bl	800cd10 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f003 fbfd 	bl	800d21a <SDMMC_CmdStatusRegister>
 8009a20:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d02b      	beq.n	8009a80 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	e069      	b.n	8009b08 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d013      	beq.n	8009a6a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009a42:	2300      	movs	r3, #0
 8009a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a46:	e00d      	b.n	8009a64 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f003 f8d7 	bl	800cc00 <SDMMC_ReadFIFO>
 8009a52:	4602      	mov	r2, r0
 8009a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a56:	601a      	str	r2, [r3, #0]
        pData++;
 8009a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a60:	3301      	adds	r3, #1
 8009a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a66:	2b07      	cmp	r3, #7
 8009a68:	d9ee      	bls.n	8009a48 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a6a:	f7f8 fc7d 	bl	8002368 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a78:	d102      	bne.n	8009a80 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009a7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a7e:	e043      	b.n	8009b08 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a86:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0d2      	beq.n	8009a34 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a94:	f003 0308 	and.w	r3, r3, #8
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009a9c:	2308      	movs	r3, #8
 8009a9e:	e033      	b.n	8009b08 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa6:	f003 0302 	and.w	r3, r3, #2
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e02a      	b.n	8009b08 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab8:	f003 0320 	and.w	r3, r3, #32
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d017      	beq.n	8009af0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	e021      	b.n	8009b08 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f003 f899 	bl	800cc00 <SDMMC_ReadFIFO>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad2:	601a      	str	r2, [r3, #0]
    pData++;
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ada:	f7f8 fc45 	bl	8002368 <HAL_GetTick>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae8:	d102      	bne.n	8009af0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009aea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009aee:	e00b      	b.n	8009b08 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e2      	bne.n	8009ac4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a03      	ldr	r2, [pc, #12]	@ (8009b10 <SD_SendSDStatus+0x19c>)
 8009b04:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3730      	adds	r7, #48	@ 0x30
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	18000f3a 	.word	0x18000f3a

08009b14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009b24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b28:	e018      	b.n	8009b5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b32:	041b      	lsls	r3, r3, #16
 8009b34:	4619      	mov	r1, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	f003 fb4c 	bl	800d1d4 <SDMMC_CmdSendStatus>
 8009b3c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	e009      	b.n	8009b5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f003 f8cb 	bl	800ccea <SDMMC_GetResponse>
 8009b54:	4602      	mov	r2, r0
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	2300      	movs	r3, #0
 8009b72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f003 f8b5 	bl	800ccea <SDMMC_GetResponse>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b8a:	d102      	bne.n	8009b92 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b90:	e02f      	b.n	8009bf2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b92:	f107 030c 	add.w	r3, r7, #12
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f879 	bl	8009c90 <SD_FindSCR>
 8009b9e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	e023      	b.n	8009bf2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01c      	beq.n	8009bee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bbc:	041b      	lsls	r3, r3, #16
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f003 fa1e 	bl	800d002 <SDMMC_CmdAppCommand>
 8009bc6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	e00f      	b.n	8009bf2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2102      	movs	r1, #2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f003 fa55 	bl	800d088 <SDMMC_CmdBusWidth>
 8009bde:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	e003      	b.n	8009bf2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bea:	2300      	movs	r3, #0
 8009bec:	e001      	b.n	8009bf2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b086      	sub	sp, #24
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009c02:	2300      	movs	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	2300      	movs	r3, #0
 8009c08:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2100      	movs	r1, #0
 8009c10:	4618      	mov	r0, r3
 8009c12:	f003 f86a 	bl	800ccea <SDMMC_GetResponse>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c20:	d102      	bne.n	8009c28 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c26:	e02f      	b.n	8009c88 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c28:	f107 030c 	add.w	r3, r7, #12
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f82e 	bl	8009c90 <SD_FindSCR>
 8009c34:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	e023      	b.n	8009c88 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d01c      	beq.n	8009c84 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c52:	041b      	lsls	r3, r3, #16
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f003 f9d3 	bl	800d002 <SDMMC_CmdAppCommand>
 8009c5c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	e00f      	b.n	8009c88 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f003 fa0a 	bl	800d088 <SDMMC_CmdBusWidth>
 8009c74:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	e003      	b.n	8009c88 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e001      	b.n	8009c88 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08e      	sub	sp, #56	@ 0x38
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c9a:	f7f8 fb65 	bl	8002368 <HAL_GetTick>
 8009c9e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	60bb      	str	r3, [r7, #8]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2108      	movs	r1, #8
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f003 f856 	bl	800cd68 <SDMMC_CmdBlockLength>
 8009cbc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc6:	e0ad      	b.n	8009e24 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd0:	041b      	lsls	r3, r3, #16
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	f003 f994 	bl	800d002 <SDMMC_CmdAppCommand>
 8009cda:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce4:	e09e      	b.n	8009e24 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009cec:	2308      	movs	r3, #8
 8009cee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009cf0:	2330      	movs	r3, #48	@ 0x30
 8009cf2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f107 0210 	add.w	r2, r7, #16
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f003 f800 	bl	800cd10 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f003 f9da 	bl	800d0ce <SDMMC_CmdSendSCR>
 8009d1a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d027      	beq.n	8009d72 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d24:	e07e      	b.n	8009e24 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d113      	bne.n	8009d5c <SD_FindSCR+0xcc>
 8009d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d110      	bne.n	8009d5c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f002 ff5e 	bl	800cc00 <SDMMC_ReadFIFO>
 8009d44:	4603      	mov	r3, r0
 8009d46:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f002 ff57 	bl	800cc00 <SDMMC_ReadFIFO>
 8009d52:	4603      	mov	r3, r0
 8009d54:	60fb      	str	r3, [r7, #12]
      index++;
 8009d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d58:	3301      	adds	r3, #1
 8009d5a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d5c:	f7f8 fb04 	bl	8002368 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6a:	d102      	bne.n	8009d72 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d70:	e058      	b.n	8009e24 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d78:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0d1      	beq.n	8009d26 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2208      	movs	r2, #8
 8009d96:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d98:	2308      	movs	r3, #8
 8009d9a:	e043      	b.n	8009e24 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da2:	f003 0302 	and.w	r3, r3, #2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d005      	beq.n	8009db6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2202      	movs	r2, #2
 8009db0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009db2:	2302      	movs	r3, #2
 8009db4:	e036      	b.n	8009e24 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dbc:	f003 0320 	and.w	r3, r3, #32
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009dcc:	2320      	movs	r3, #32
 8009dce:	e029      	b.n	8009e24 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a15      	ldr	r2, [pc, #84]	@ (8009e2c <SD_FindSCR+0x19c>)
 8009dd6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	061a      	lsls	r2, r3, #24
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	021b      	lsls	r3, r3, #8
 8009de0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009de4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	0a1b      	lsrs	r3, r3, #8
 8009dea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009dee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	0e1b      	lsrs	r3, r3, #24
 8009df4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df8:	601a      	str	r2, [r3, #0]
    scr++;
 8009dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	061a      	lsls	r2, r3, #24
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	021b      	lsls	r3, r3, #8
 8009e08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009e0c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	0a1b      	lsrs	r3, r3, #8
 8009e12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009e16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	0e1b      	lsrs	r3, r3, #24
 8009e1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e20:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3738      	adds	r7, #56	@ 0x38
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	18000f3a 	.word	0x18000f3a

08009e30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e10f      	b.n	800a062 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a87      	ldr	r2, [pc, #540]	@ (800a06c <HAL_SPI_Init+0x23c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00f      	beq.n	8009e72 <HAL_SPI_Init+0x42>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a86      	ldr	r2, [pc, #536]	@ (800a070 <HAL_SPI_Init+0x240>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d00a      	beq.n	8009e72 <HAL_SPI_Init+0x42>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a84      	ldr	r2, [pc, #528]	@ (800a074 <HAL_SPI_Init+0x244>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d005      	beq.n	8009e72 <HAL_SPI_Init+0x42>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	2b0f      	cmp	r3, #15
 8009e6c:	d901      	bls.n	8009e72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e0f7      	b.n	800a062 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fe2e 	bl	800aad4 <SPI_GetPacketSize>
 8009e78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a7b      	ldr	r2, [pc, #492]	@ (800a06c <HAL_SPI_Init+0x23c>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d00c      	beq.n	8009e9e <HAL_SPI_Init+0x6e>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a79      	ldr	r2, [pc, #484]	@ (800a070 <HAL_SPI_Init+0x240>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d007      	beq.n	8009e9e <HAL_SPI_Init+0x6e>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a78      	ldr	r2, [pc, #480]	@ (800a074 <HAL_SPI_Init+0x244>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d002      	beq.n	8009e9e <HAL_SPI_Init+0x6e>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b08      	cmp	r3, #8
 8009e9c:	d811      	bhi.n	8009ec2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ea2:	4a72      	ldr	r2, [pc, #456]	@ (800a06c <HAL_SPI_Init+0x23c>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d009      	beq.n	8009ebc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a70      	ldr	r2, [pc, #448]	@ (800a070 <HAL_SPI_Init+0x240>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d004      	beq.n	8009ebc <HAL_SPI_Init+0x8c>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a6f      	ldr	r2, [pc, #444]	@ (800a074 <HAL_SPI_Init+0x244>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d104      	bne.n	8009ec6 <HAL_SPI_Init+0x96>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b10      	cmp	r3, #16
 8009ec0:	d901      	bls.n	8009ec6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e0cd      	b.n	800a062 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d106      	bne.n	8009ee0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7f7 fe76 	bl	8001bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0201 	bic.w	r2, r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009f02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f0c:	d119      	bne.n	8009f42 <HAL_SPI_Init+0x112>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f16:	d103      	bne.n	8009f20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d008      	beq.n	8009f32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10c      	bne.n	8009f42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009f2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f30:	d107      	bne.n	8009f42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00f      	beq.n	8009f6e <HAL_SPI_Init+0x13e>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	2b06      	cmp	r3, #6
 8009f54:	d90b      	bls.n	8009f6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	e007      	b.n	8009f7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	69da      	ldr	r2, [r3, #28]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f86:	431a      	orrs	r2, r3
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f90:	ea42 0103 	orr.w	r1, r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68da      	ldr	r2, [r3, #12]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa8:	431a      	orrs	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fae:	431a      	orrs	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fde:	ea42 0103 	orr.w	r1, r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d113      	bne.n	800a01e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a008:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a01c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 0201 	bic.w	r2, r2, #1
 800a02c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00a      	beq.n	800a050 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	40013000 	.word	0x40013000
 800a070:	40003800 	.word	0x40003800
 800a074:	40003c00 	.word	0x40003c00

0800a078 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	4613      	mov	r3, r2
 800a086:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3320      	adds	r3, #32
 800a08e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a090:	f7f8 f96a 	bl	8002368 <HAL_GetTick>
 800a094:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d001      	beq.n	800a0a6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e1d1      	b.n	800a44a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <HAL_SPI_Transmit+0x3a>
 800a0ac:	88fb      	ldrh	r3, [r7, #6]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e1c9      	b.n	800a44a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d101      	bne.n	800a0c4 <HAL_SPI_Transmit+0x4c>
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	e1c2      	b.n	800a44a <HAL_SPI_Transmit+0x3d2>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2203      	movs	r2, #3
 800a0d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	88fa      	ldrh	r2, [r7, #6]
 800a0e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	88fa      	ldrh	r2, [r7, #6]
 800a0ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a11c:	d108      	bne.n	800a130 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	e009      	b.n	800a144 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a142:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	4b96      	ldr	r3, [pc, #600]	@ (800a3a4 <HAL_SPI_Transmit+0x32c>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	88f9      	ldrh	r1, [r7, #6]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	6812      	ldr	r2, [r2, #0]
 800a154:	430b      	orrs	r3, r1
 800a156:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0201 	orr.w	r2, r2, #1
 800a166:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a170:	d107      	bne.n	800a182 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a180:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	2b0f      	cmp	r3, #15
 800a188:	d947      	bls.n	800a21a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a18a:	e03f      	b.n	800a20c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	f003 0302 	and.w	r3, r3, #2
 800a196:	2b02      	cmp	r3, #2
 800a198:	d114      	bne.n	800a1c4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6812      	ldr	r2, [r2, #0]
 800a1a4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1aa:	1d1a      	adds	r2, r3, #4
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a1c2:	e023      	b.n	800a20c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1c4:	f7f8 f8d0 	bl	8002368 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d803      	bhi.n	800a1dc <HAL_SPI_Transmit+0x164>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d102      	bne.n	800a1e2 <HAL_SPI_Transmit+0x16a>
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d114      	bne.n	800a20c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 fba8 	bl	800a938 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e11e      	b.n	800a44a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a212:	b29b      	uxth	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1b9      	bne.n	800a18c <HAL_SPI_Transmit+0x114>
 800a218:	e0f1      	b.n	800a3fe <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	2b07      	cmp	r3, #7
 800a220:	f240 80e6 	bls.w	800a3f0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a224:	e05d      	b.n	800a2e2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	2b02      	cmp	r3, #2
 800a232:	d132      	bne.n	800a29a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d918      	bls.n	800a272 <HAL_SPI_Transmit+0x1fa>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d014      	beq.n	800a272 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a258:	1d1a      	adds	r2, r3, #4
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a264:	b29b      	uxth	r3, r3
 800a266:	3b02      	subs	r3, #2
 800a268:	b29a      	uxth	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a270:	e037      	b.n	800a2e2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a276:	881a      	ldrh	r2, [r3, #0]
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a280:	1c9a      	adds	r2, r3, #2
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	3b01      	subs	r3, #1
 800a290:	b29a      	uxth	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a298:	e023      	b.n	800a2e2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a29a:	f7f8 f865 	bl	8002368 <HAL_GetTick>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d803      	bhi.n	800a2b2 <HAL_SPI_Transmit+0x23a>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b0:	d102      	bne.n	800a2b8 <HAL_SPI_Transmit+0x240>
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d114      	bne.n	800a2e2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 fb3d 	bl	800a938 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e0b3      	b.n	800a44a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d19b      	bne.n	800a226 <HAL_SPI_Transmit+0x1ae>
 800a2ee:	e086      	b.n	800a3fe <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d154      	bne.n	800a3a8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a304:	b29b      	uxth	r3, r3
 800a306:	2b03      	cmp	r3, #3
 800a308:	d918      	bls.n	800a33c <HAL_SPI_Transmit+0x2c4>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30e:	2b40      	cmp	r3, #64	@ 0x40
 800a310:	d914      	bls.n	800a33c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6812      	ldr	r2, [r2, #0]
 800a31c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a322:	1d1a      	adds	r2, r3, #4
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a32e:	b29b      	uxth	r3, r3
 800a330:	3b04      	subs	r3, #4
 800a332:	b29a      	uxth	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a33a:	e059      	b.n	800a3f0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a342:	b29b      	uxth	r3, r3
 800a344:	2b01      	cmp	r3, #1
 800a346:	d917      	bls.n	800a378 <HAL_SPI_Transmit+0x300>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d013      	beq.n	800a378 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a354:	881a      	ldrh	r2, [r3, #0]
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a35e:	1c9a      	adds	r2, r3, #2
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3b02      	subs	r3, #2
 800a36e:	b29a      	uxth	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a376:	e03b      	b.n	800a3f0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3320      	adds	r3, #32
 800a382:	7812      	ldrb	r2, [r2, #0]
 800a384:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a396:	b29b      	uxth	r3, r3
 800a398:	3b01      	subs	r3, #1
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a3a2:	e025      	b.n	800a3f0 <HAL_SPI_Transmit+0x378>
 800a3a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3a8:	f7f7 ffde 	bl	8002368 <HAL_GetTick>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d803      	bhi.n	800a3c0 <HAL_SPI_Transmit+0x348>
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3be:	d102      	bne.n	800a3c6 <HAL_SPI_Transmit+0x34e>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d114      	bne.n	800a3f0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 fab6 	bl	800a938 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e02c      	b.n	800a44a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f47f af79 	bne.w	800a2f0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2200      	movs	r2, #0
 800a406:	2108      	movs	r1, #8
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 fb35 	bl	800aa78 <SPI_WaitOnFlagUntilTimeout>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d007      	beq.n	800a424 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a41a:	f043 0220 	orr.w	r2, r3, #32
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 fa87 	bl	800a938 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	e000      	b.n	800a44a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a448:	2300      	movs	r3, #0
  }
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop

0800a454 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	603b      	str	r3, [r7, #0]
 800a460:	4613      	mov	r3, r2
 800a462:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a468:	095b      	lsrs	r3, r3, #5
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	3301      	adds	r3, #1
 800a46e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3330      	adds	r3, #48	@ 0x30
 800a476:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a478:	f7f7 ff76 	bl	8002368 <HAL_GetTick>
 800a47c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b01      	cmp	r3, #1
 800a488:	d001      	beq.n	800a48e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a48a:	2302      	movs	r3, #2
 800a48c:	e250      	b.n	800a930 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <HAL_SPI_Receive+0x46>
 800a494:	88fb      	ldrh	r3, [r7, #6]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e248      	b.n	800a930 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d101      	bne.n	800a4ac <HAL_SPI_Receive+0x58>
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	e241      	b.n	800a930 <HAL_SPI_Receive+0x4dc>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2204      	movs	r2, #4
 800a4b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	88fa      	ldrh	r2, [r7, #6]
 800a4ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	88fa      	ldrh	r2, [r7, #6]
 800a4d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a504:	d108      	bne.n	800a518 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	e009      	b.n	800a52c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a52a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	4b95      	ldr	r3, [pc, #596]	@ (800a788 <HAL_SPI_Receive+0x334>)
 800a534:	4013      	ands	r3, r2
 800a536:	88f9      	ldrh	r1, [r7, #6]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	430b      	orrs	r3, r1
 800a53e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f042 0201 	orr.w	r2, r2, #1
 800a54e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a558:	d107      	bne.n	800a56a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a568:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	2b0f      	cmp	r3, #15
 800a570:	d96c      	bls.n	800a64c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a572:	e064      	b.n	800a63e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b01      	cmp	r3, #1
 800a588:	d114      	bne.n	800a5b4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a592:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a594:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a59a:	1d1a      	adds	r2, r3, #4
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5b2:	e044      	b.n	800a63e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	8bfa      	ldrh	r2, [r7, #30]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d919      	bls.n	800a5f6 <HAL_SPI_Receive+0x1a2>
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d014      	beq.n	800a5f6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a5d6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5dc:	1d1a      	adds	r2, r3, #4
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5f4:	e023      	b.n	800a63e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5f6:	f7f7 feb7 	bl	8002368 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d803      	bhi.n	800a60e <HAL_SPI_Receive+0x1ba>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60c:	d102      	bne.n	800a614 <HAL_SPI_Receive+0x1c0>
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d114      	bne.n	800a63e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 f98f 	bl	800a938 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a620:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e178      	b.n	800a930 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a644:	b29b      	uxth	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d194      	bne.n	800a574 <HAL_SPI_Receive+0x120>
 800a64a:	e15e      	b.n	800a90a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	2b07      	cmp	r3, #7
 800a652:	f240 8153 	bls.w	800a8fc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a656:	e08f      	b.n	800a778 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d114      	bne.n	800a698 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a672:	69ba      	ldr	r2, [r7, #24]
 800a674:	8812      	ldrh	r2, [r2, #0]
 800a676:	b292      	uxth	r2, r2
 800a678:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a67e:	1c9a      	adds	r2, r3, #2
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	3b01      	subs	r3, #1
 800a68e:	b29a      	uxth	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a696:	e06f      	b.n	800a778 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	8bfa      	ldrh	r2, [r7, #30]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d924      	bls.n	800a6f0 <HAL_SPI_Receive+0x29c>
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01f      	beq.n	800a6f0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	8812      	ldrh	r2, [r2, #0]
 800a6b8:	b292      	uxth	r2, r2
 800a6ba:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6c0:	1c9a      	adds	r2, r3, #2
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	8812      	ldrh	r2, [r2, #0]
 800a6ce:	b292      	uxth	r2, r2
 800a6d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6d6:	1c9a      	adds	r2, r3, #2
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	3b02      	subs	r3, #2
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a6ee:	e043      	b.n	800a778 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d119      	bne.n	800a730 <HAL_SPI_Receive+0x2dc>
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d014      	beq.n	800a730 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a70a:	69ba      	ldr	r2, [r7, #24]
 800a70c:	8812      	ldrh	r2, [r2, #0]
 800a70e:	b292      	uxth	r2, r2
 800a710:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a716:	1c9a      	adds	r2, r3, #2
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a722:	b29b      	uxth	r3, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	b29a      	uxth	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a72e:	e023      	b.n	800a778 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a730:	f7f7 fe1a 	bl	8002368 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d803      	bhi.n	800a748 <HAL_SPI_Receive+0x2f4>
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a746:	d102      	bne.n	800a74e <HAL_SPI_Receive+0x2fa>
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d114      	bne.n	800a778 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f000 f8f2 	bl	800a938 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a75a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	e0db      	b.n	800a930 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a77e:	b29b      	uxth	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	f47f af69 	bne.w	800a658 <HAL_SPI_Receive+0x204>
 800a786:	e0c0      	b.n	800a90a <HAL_SPI_Receive+0x4b6>
 800a788:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d117      	bne.n	800a7d2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7ae:	7812      	ldrb	r2, [r2, #0]
 800a7b0:	b2d2      	uxtb	r2, r2
 800a7b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a7d0:	e094      	b.n	800a8fc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	8bfa      	ldrh	r2, [r7, #30]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d946      	bls.n	800a86e <HAL_SPI_Receive+0x41a>
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d041      	beq.n	800a86e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7f6:	7812      	ldrb	r2, [r2, #0]
 800a7f8:	b2d2      	uxtb	r2, r2
 800a7fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a812:	7812      	ldrb	r2, [r2, #0]
 800a814:	b2d2      	uxtb	r2, r2
 800a816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a82e:	7812      	ldrb	r2, [r2, #0]
 800a830:	b2d2      	uxtb	r2, r2
 800a832:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a84a:	7812      	ldrb	r2, [r2, #0]
 800a84c:	b2d2      	uxtb	r2, r2
 800a84e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a860:	b29b      	uxth	r3, r3
 800a862:	3b04      	subs	r3, #4
 800a864:	b29a      	uxth	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a86c:	e046      	b.n	800a8fc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a874:	b29b      	uxth	r3, r3
 800a876:	2b03      	cmp	r3, #3
 800a878:	d81c      	bhi.n	800a8b4 <HAL_SPI_Receive+0x460>
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d017      	beq.n	800a8b4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a890:	7812      	ldrb	r2, [r2, #0]
 800a892:	b2d2      	uxtb	r2, r2
 800a894:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a89a:	1c5a      	adds	r2, r3, #1
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a8b2:	e023      	b.n	800a8fc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8b4:	f7f7 fd58 	bl	8002368 <HAL_GetTick>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d803      	bhi.n	800a8cc <HAL_SPI_Receive+0x478>
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ca:	d102      	bne.n	800a8d2 <HAL_SPI_Receive+0x47e>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d114      	bne.n	800a8fc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 f830 	bl	800a938 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e019      	b.n	800a930 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a902:	b29b      	uxth	r3, r3
 800a904:	2b00      	cmp	r3, #0
 800a906:	f47f af41 	bne.w	800a78c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 f814 	bl	800a938 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a926:	2b00      	cmp	r3, #0
 800a928:	d001      	beq.n	800a92e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e000      	b.n	800a930 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a92e:	2300      	movs	r3, #0
  }
}
 800a930:	4618      	mov	r0, r3
 800a932:	3720      	adds	r7, #32
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	699a      	ldr	r2, [r3, #24]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0208 	orr.w	r2, r2, #8
 800a956:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	699a      	ldr	r2, [r3, #24]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f042 0210 	orr.w	r2, r2, #16
 800a966:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f022 0201 	bic.w	r2, r2, #1
 800a976:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6919      	ldr	r1, [r3, #16]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	4b3c      	ldr	r3, [pc, #240]	@ (800aa74 <SPI_CloseTransfer+0x13c>)
 800a984:	400b      	ands	r3, r1
 800a986:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a996:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d014      	beq.n	800a9ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f003 0320 	and.w	r3, r3, #32
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00f      	beq.n	800a9ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	699a      	ldr	r2, [r3, #24]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f042 0220 	orr.w	r2, r2, #32
 800a9cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d014      	beq.n	800aa04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00f      	beq.n	800aa04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9ea:	f043 0204 	orr.w	r2, r3, #4
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	699a      	ldr	r2, [r3, #24]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa02:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00f      	beq.n	800aa2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa14:	f043 0201 	orr.w	r2, r3, #1
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	699a      	ldr	r2, [r3, #24]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa2c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00f      	beq.n	800aa58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa3e:	f043 0208 	orr.w	r2, r3, #8
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800aa68:	bf00      	nop
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	fffffc90 	.word	0xfffffc90

0800aa78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	4613      	mov	r3, r2
 800aa86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa88:	e010      	b.n	800aaac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa8a:	f7f7 fc6d 	bl	8002368 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d803      	bhi.n	800aaa2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa0:	d102      	bne.n	800aaa8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e00f      	b.n	800aacc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	695a      	ldr	r2, [r3, #20]
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	4013      	ands	r3, r2
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	bf0c      	ite	eq
 800aabc:	2301      	moveq	r3, #1
 800aabe:	2300      	movne	r3, #0
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	461a      	mov	r2, r3
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d0df      	beq.n	800aa8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae0:	095b      	lsrs	r3, r3, #5
 800aae2:	3301      	adds	r3, #1
 800aae4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	3301      	adds	r3, #1
 800aaec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	3307      	adds	r3, #7
 800aaf2:	08db      	lsrs	r3, r3, #3
 800aaf4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	fb02 f303 	mul.w	r3, r2, r3
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b082      	sub	sp, #8
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e042      	b.n	800aba2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d106      	bne.n	800ab34 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7f7 f904 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2224      	movs	r2, #36	@ 0x24
 800ab38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 0201 	bic.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fd91 	bl	800b67c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f826 	bl	800abac <UART_SetConfig>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d101      	bne.n	800ab6a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e01b      	b.n	800aba2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	689a      	ldr	r2, [r3, #8]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f042 0201 	orr.w	r2, r2, #1
 800ab98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fe10 	bl	800b7c0 <UART_CheckIdleState>
 800aba0:	4603      	mov	r3, r0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abb0:	b092      	sub	sp, #72	@ 0x48
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	689a      	ldr	r2, [r3, #8]
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	431a      	orrs	r2, r3
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	431a      	orrs	r2, r3
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	4bbe      	ldr	r3, [pc, #760]	@ (800aed4 <UART_SetConfig+0x328>)
 800abdc:	4013      	ands	r3, r2
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	6812      	ldr	r2, [r2, #0]
 800abe2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abe4:	430b      	orrs	r3, r1
 800abe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	68da      	ldr	r2, [r3, #12]
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4ab3      	ldr	r2, [pc, #716]	@ (800aed8 <UART_SetConfig+0x32c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d004      	beq.n	800ac18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac14:	4313      	orrs	r3, r2
 800ac16:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689a      	ldr	r2, [r3, #8]
 800ac1e:	4baf      	ldr	r3, [pc, #700]	@ (800aedc <UART_SetConfig+0x330>)
 800ac20:	4013      	ands	r3, r2
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	6812      	ldr	r2, [r2, #0]
 800ac26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac28:	430b      	orrs	r3, r1
 800ac2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac32:	f023 010f 	bic.w	r1, r3, #15
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4aa6      	ldr	r2, [pc, #664]	@ (800aee0 <UART_SetConfig+0x334>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d177      	bne.n	800ad3c <UART_SetConfig+0x190>
 800ac4c:	4ba5      	ldr	r3, [pc, #660]	@ (800aee4 <UART_SetConfig+0x338>)
 800ac4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac54:	2b28      	cmp	r3, #40	@ 0x28
 800ac56:	d86d      	bhi.n	800ad34 <UART_SetConfig+0x188>
 800ac58:	a201      	add	r2, pc, #4	@ (adr r2, 800ac60 <UART_SetConfig+0xb4>)
 800ac5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5e:	bf00      	nop
 800ac60:	0800ad05 	.word	0x0800ad05
 800ac64:	0800ad35 	.word	0x0800ad35
 800ac68:	0800ad35 	.word	0x0800ad35
 800ac6c:	0800ad35 	.word	0x0800ad35
 800ac70:	0800ad35 	.word	0x0800ad35
 800ac74:	0800ad35 	.word	0x0800ad35
 800ac78:	0800ad35 	.word	0x0800ad35
 800ac7c:	0800ad35 	.word	0x0800ad35
 800ac80:	0800ad0d 	.word	0x0800ad0d
 800ac84:	0800ad35 	.word	0x0800ad35
 800ac88:	0800ad35 	.word	0x0800ad35
 800ac8c:	0800ad35 	.word	0x0800ad35
 800ac90:	0800ad35 	.word	0x0800ad35
 800ac94:	0800ad35 	.word	0x0800ad35
 800ac98:	0800ad35 	.word	0x0800ad35
 800ac9c:	0800ad35 	.word	0x0800ad35
 800aca0:	0800ad15 	.word	0x0800ad15
 800aca4:	0800ad35 	.word	0x0800ad35
 800aca8:	0800ad35 	.word	0x0800ad35
 800acac:	0800ad35 	.word	0x0800ad35
 800acb0:	0800ad35 	.word	0x0800ad35
 800acb4:	0800ad35 	.word	0x0800ad35
 800acb8:	0800ad35 	.word	0x0800ad35
 800acbc:	0800ad35 	.word	0x0800ad35
 800acc0:	0800ad1d 	.word	0x0800ad1d
 800acc4:	0800ad35 	.word	0x0800ad35
 800acc8:	0800ad35 	.word	0x0800ad35
 800accc:	0800ad35 	.word	0x0800ad35
 800acd0:	0800ad35 	.word	0x0800ad35
 800acd4:	0800ad35 	.word	0x0800ad35
 800acd8:	0800ad35 	.word	0x0800ad35
 800acdc:	0800ad35 	.word	0x0800ad35
 800ace0:	0800ad25 	.word	0x0800ad25
 800ace4:	0800ad35 	.word	0x0800ad35
 800ace8:	0800ad35 	.word	0x0800ad35
 800acec:	0800ad35 	.word	0x0800ad35
 800acf0:	0800ad35 	.word	0x0800ad35
 800acf4:	0800ad35 	.word	0x0800ad35
 800acf8:	0800ad35 	.word	0x0800ad35
 800acfc:	0800ad35 	.word	0x0800ad35
 800ad00:	0800ad2d 	.word	0x0800ad2d
 800ad04:	2301      	movs	r3, #1
 800ad06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0a:	e222      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad0c:	2304      	movs	r3, #4
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad12:	e21e      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad14:	2308      	movs	r3, #8
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1a:	e21a      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad1c:	2310      	movs	r3, #16
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad22:	e216      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad24:	2320      	movs	r3, #32
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad2a:	e212      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad2c:	2340      	movs	r3, #64	@ 0x40
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e20e      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad34:	2380      	movs	r3, #128	@ 0x80
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e20a      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a69      	ldr	r2, [pc, #420]	@ (800aee8 <UART_SetConfig+0x33c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d130      	bne.n	800ada8 <UART_SetConfig+0x1fc>
 800ad46:	4b67      	ldr	r3, [pc, #412]	@ (800aee4 <UART_SetConfig+0x338>)
 800ad48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	d826      	bhi.n	800ada0 <UART_SetConfig+0x1f4>
 800ad52:	a201      	add	r2, pc, #4	@ (adr r2, 800ad58 <UART_SetConfig+0x1ac>)
 800ad54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad58:	0800ad71 	.word	0x0800ad71
 800ad5c:	0800ad79 	.word	0x0800ad79
 800ad60:	0800ad81 	.word	0x0800ad81
 800ad64:	0800ad89 	.word	0x0800ad89
 800ad68:	0800ad91 	.word	0x0800ad91
 800ad6c:	0800ad99 	.word	0x0800ad99
 800ad70:	2300      	movs	r3, #0
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad76:	e1ec      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad78:	2304      	movs	r3, #4
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7e:	e1e8      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad80:	2308      	movs	r3, #8
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad86:	e1e4      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad88:	2310      	movs	r3, #16
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8e:	e1e0      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad90:	2320      	movs	r3, #32
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad96:	e1dc      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ad98:	2340      	movs	r3, #64	@ 0x40
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e1d8      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ada0:	2380      	movs	r3, #128	@ 0x80
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e1d4      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a4f      	ldr	r2, [pc, #316]	@ (800aeec <UART_SetConfig+0x340>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d130      	bne.n	800ae14 <UART_SetConfig+0x268>
 800adb2:	4b4c      	ldr	r3, [pc, #304]	@ (800aee4 <UART_SetConfig+0x338>)
 800adb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adb6:	f003 0307 	and.w	r3, r3, #7
 800adba:	2b05      	cmp	r3, #5
 800adbc:	d826      	bhi.n	800ae0c <UART_SetConfig+0x260>
 800adbe:	a201      	add	r2, pc, #4	@ (adr r2, 800adc4 <UART_SetConfig+0x218>)
 800adc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc4:	0800addd 	.word	0x0800addd
 800adc8:	0800ade5 	.word	0x0800ade5
 800adcc:	0800aded 	.word	0x0800aded
 800add0:	0800adf5 	.word	0x0800adf5
 800add4:	0800adfd 	.word	0x0800adfd
 800add8:	0800ae05 	.word	0x0800ae05
 800addc:	2300      	movs	r3, #0
 800adde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade2:	e1b6      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ade4:	2304      	movs	r3, #4
 800ade6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adea:	e1b2      	b.n	800b152 <UART_SetConfig+0x5a6>
 800adec:	2308      	movs	r3, #8
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf2:	e1ae      	b.n	800b152 <UART_SetConfig+0x5a6>
 800adf4:	2310      	movs	r3, #16
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfa:	e1aa      	b.n	800b152 <UART_SetConfig+0x5a6>
 800adfc:	2320      	movs	r3, #32
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae02:	e1a6      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae04:	2340      	movs	r3, #64	@ 0x40
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e1a2      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae0c:	2380      	movs	r3, #128	@ 0x80
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e19e      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a35      	ldr	r2, [pc, #212]	@ (800aef0 <UART_SetConfig+0x344>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d130      	bne.n	800ae80 <UART_SetConfig+0x2d4>
 800ae1e:	4b31      	ldr	r3, [pc, #196]	@ (800aee4 <UART_SetConfig+0x338>)
 800ae20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae22:	f003 0307 	and.w	r3, r3, #7
 800ae26:	2b05      	cmp	r3, #5
 800ae28:	d826      	bhi.n	800ae78 <UART_SetConfig+0x2cc>
 800ae2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae30 <UART_SetConfig+0x284>)
 800ae2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae30:	0800ae49 	.word	0x0800ae49
 800ae34:	0800ae51 	.word	0x0800ae51
 800ae38:	0800ae59 	.word	0x0800ae59
 800ae3c:	0800ae61 	.word	0x0800ae61
 800ae40:	0800ae69 	.word	0x0800ae69
 800ae44:	0800ae71 	.word	0x0800ae71
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4e:	e180      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae50:	2304      	movs	r3, #4
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae56:	e17c      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae58:	2308      	movs	r3, #8
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5e:	e178      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae60:	2310      	movs	r3, #16
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae66:	e174      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae68:	2320      	movs	r3, #32
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6e:	e170      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae70:	2340      	movs	r3, #64	@ 0x40
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae76:	e16c      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae78:	2380      	movs	r3, #128	@ 0x80
 800ae7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae7e:	e168      	b.n	800b152 <UART_SetConfig+0x5a6>
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a1b      	ldr	r2, [pc, #108]	@ (800aef4 <UART_SetConfig+0x348>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d142      	bne.n	800af10 <UART_SetConfig+0x364>
 800ae8a:	4b16      	ldr	r3, [pc, #88]	@ (800aee4 <UART_SetConfig+0x338>)
 800ae8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae8e:	f003 0307 	and.w	r3, r3, #7
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	d838      	bhi.n	800af08 <UART_SetConfig+0x35c>
 800ae96:	a201      	add	r2, pc, #4	@ (adr r2, 800ae9c <UART_SetConfig+0x2f0>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aeb5 	.word	0x0800aeb5
 800aea0:	0800aebd 	.word	0x0800aebd
 800aea4:	0800aec5 	.word	0x0800aec5
 800aea8:	0800aecd 	.word	0x0800aecd
 800aeac:	0800aef9 	.word	0x0800aef9
 800aeb0:	0800af01 	.word	0x0800af01
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeba:	e14a      	b.n	800b152 <UART_SetConfig+0x5a6>
 800aebc:	2304      	movs	r3, #4
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec2:	e146      	b.n	800b152 <UART_SetConfig+0x5a6>
 800aec4:	2308      	movs	r3, #8
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeca:	e142      	b.n	800b152 <UART_SetConfig+0x5a6>
 800aecc:	2310      	movs	r3, #16
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed2:	e13e      	b.n	800b152 <UART_SetConfig+0x5a6>
 800aed4:	cfff69f3 	.word	0xcfff69f3
 800aed8:	58000c00 	.word	0x58000c00
 800aedc:	11fff4ff 	.word	0x11fff4ff
 800aee0:	40011000 	.word	0x40011000
 800aee4:	58024400 	.word	0x58024400
 800aee8:	40004400 	.word	0x40004400
 800aeec:	40004800 	.word	0x40004800
 800aef0:	40004c00 	.word	0x40004c00
 800aef4:	40005000 	.word	0x40005000
 800aef8:	2320      	movs	r3, #32
 800aefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aefe:	e128      	b.n	800b152 <UART_SetConfig+0x5a6>
 800af00:	2340      	movs	r3, #64	@ 0x40
 800af02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af06:	e124      	b.n	800b152 <UART_SetConfig+0x5a6>
 800af08:	2380      	movs	r3, #128	@ 0x80
 800af0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af0e:	e120      	b.n	800b152 <UART_SetConfig+0x5a6>
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4acb      	ldr	r2, [pc, #812]	@ (800b244 <UART_SetConfig+0x698>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d176      	bne.n	800b008 <UART_SetConfig+0x45c>
 800af1a:	4bcb      	ldr	r3, [pc, #812]	@ (800b248 <UART_SetConfig+0x69c>)
 800af1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af22:	2b28      	cmp	r3, #40	@ 0x28
 800af24:	d86c      	bhi.n	800b000 <UART_SetConfig+0x454>
 800af26:	a201      	add	r2, pc, #4	@ (adr r2, 800af2c <UART_SetConfig+0x380>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800afd1 	.word	0x0800afd1
 800af30:	0800b001 	.word	0x0800b001
 800af34:	0800b001 	.word	0x0800b001
 800af38:	0800b001 	.word	0x0800b001
 800af3c:	0800b001 	.word	0x0800b001
 800af40:	0800b001 	.word	0x0800b001
 800af44:	0800b001 	.word	0x0800b001
 800af48:	0800b001 	.word	0x0800b001
 800af4c:	0800afd9 	.word	0x0800afd9
 800af50:	0800b001 	.word	0x0800b001
 800af54:	0800b001 	.word	0x0800b001
 800af58:	0800b001 	.word	0x0800b001
 800af5c:	0800b001 	.word	0x0800b001
 800af60:	0800b001 	.word	0x0800b001
 800af64:	0800b001 	.word	0x0800b001
 800af68:	0800b001 	.word	0x0800b001
 800af6c:	0800afe1 	.word	0x0800afe1
 800af70:	0800b001 	.word	0x0800b001
 800af74:	0800b001 	.word	0x0800b001
 800af78:	0800b001 	.word	0x0800b001
 800af7c:	0800b001 	.word	0x0800b001
 800af80:	0800b001 	.word	0x0800b001
 800af84:	0800b001 	.word	0x0800b001
 800af88:	0800b001 	.word	0x0800b001
 800af8c:	0800afe9 	.word	0x0800afe9
 800af90:	0800b001 	.word	0x0800b001
 800af94:	0800b001 	.word	0x0800b001
 800af98:	0800b001 	.word	0x0800b001
 800af9c:	0800b001 	.word	0x0800b001
 800afa0:	0800b001 	.word	0x0800b001
 800afa4:	0800b001 	.word	0x0800b001
 800afa8:	0800b001 	.word	0x0800b001
 800afac:	0800aff1 	.word	0x0800aff1
 800afb0:	0800b001 	.word	0x0800b001
 800afb4:	0800b001 	.word	0x0800b001
 800afb8:	0800b001 	.word	0x0800b001
 800afbc:	0800b001 	.word	0x0800b001
 800afc0:	0800b001 	.word	0x0800b001
 800afc4:	0800b001 	.word	0x0800b001
 800afc8:	0800b001 	.word	0x0800b001
 800afcc:	0800aff9 	.word	0x0800aff9
 800afd0:	2301      	movs	r3, #1
 800afd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd6:	e0bc      	b.n	800b152 <UART_SetConfig+0x5a6>
 800afd8:	2304      	movs	r3, #4
 800afda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afde:	e0b8      	b.n	800b152 <UART_SetConfig+0x5a6>
 800afe0:	2308      	movs	r3, #8
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe6:	e0b4      	b.n	800b152 <UART_SetConfig+0x5a6>
 800afe8:	2310      	movs	r3, #16
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afee:	e0b0      	b.n	800b152 <UART_SetConfig+0x5a6>
 800aff0:	2320      	movs	r3, #32
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff6:	e0ac      	b.n	800b152 <UART_SetConfig+0x5a6>
 800aff8:	2340      	movs	r3, #64	@ 0x40
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affe:	e0a8      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b000:	2380      	movs	r3, #128	@ 0x80
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b006:	e0a4      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a8f      	ldr	r2, [pc, #572]	@ (800b24c <UART_SetConfig+0x6a0>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d130      	bne.n	800b074 <UART_SetConfig+0x4c8>
 800b012:	4b8d      	ldr	r3, [pc, #564]	@ (800b248 <UART_SetConfig+0x69c>)
 800b014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b016:	f003 0307 	and.w	r3, r3, #7
 800b01a:	2b05      	cmp	r3, #5
 800b01c:	d826      	bhi.n	800b06c <UART_SetConfig+0x4c0>
 800b01e:	a201      	add	r2, pc, #4	@ (adr r2, 800b024 <UART_SetConfig+0x478>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b03d 	.word	0x0800b03d
 800b028:	0800b045 	.word	0x0800b045
 800b02c:	0800b04d 	.word	0x0800b04d
 800b030:	0800b055 	.word	0x0800b055
 800b034:	0800b05d 	.word	0x0800b05d
 800b038:	0800b065 	.word	0x0800b065
 800b03c:	2300      	movs	r3, #0
 800b03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b042:	e086      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b044:	2304      	movs	r3, #4
 800b046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04a:	e082      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b04c:	2308      	movs	r3, #8
 800b04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b052:	e07e      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b054:	2310      	movs	r3, #16
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05a:	e07a      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b05c:	2320      	movs	r3, #32
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b062:	e076      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b064:	2340      	movs	r3, #64	@ 0x40
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06a:	e072      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b06c:	2380      	movs	r3, #128	@ 0x80
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b072:	e06e      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a75      	ldr	r2, [pc, #468]	@ (800b250 <UART_SetConfig+0x6a4>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d130      	bne.n	800b0e0 <UART_SetConfig+0x534>
 800b07e:	4b72      	ldr	r3, [pc, #456]	@ (800b248 <UART_SetConfig+0x69c>)
 800b080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b082:	f003 0307 	and.w	r3, r3, #7
 800b086:	2b05      	cmp	r3, #5
 800b088:	d826      	bhi.n	800b0d8 <UART_SetConfig+0x52c>
 800b08a:	a201      	add	r2, pc, #4	@ (adr r2, 800b090 <UART_SetConfig+0x4e4>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b0a9 	.word	0x0800b0a9
 800b094:	0800b0b1 	.word	0x0800b0b1
 800b098:	0800b0b9 	.word	0x0800b0b9
 800b09c:	0800b0c1 	.word	0x0800b0c1
 800b0a0:	0800b0c9 	.word	0x0800b0c9
 800b0a4:	0800b0d1 	.word	0x0800b0d1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ae:	e050      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b0b0:	2304      	movs	r3, #4
 800b0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0b6:	e04c      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b0b8:	2308      	movs	r3, #8
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0be:	e048      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c6:	e044      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ce:	e040      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b0d0:	2340      	movs	r3, #64	@ 0x40
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e03c      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b0d8:	2380      	movs	r3, #128	@ 0x80
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e038      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a5b      	ldr	r2, [pc, #364]	@ (800b254 <UART_SetConfig+0x6a8>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d130      	bne.n	800b14c <UART_SetConfig+0x5a0>
 800b0ea:	4b57      	ldr	r3, [pc, #348]	@ (800b248 <UART_SetConfig+0x69c>)
 800b0ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	d826      	bhi.n	800b144 <UART_SetConfig+0x598>
 800b0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <UART_SetConfig+0x550>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b115 	.word	0x0800b115
 800b100:	0800b11d 	.word	0x0800b11d
 800b104:	0800b125 	.word	0x0800b125
 800b108:	0800b12d 	.word	0x0800b12d
 800b10c:	0800b135 	.word	0x0800b135
 800b110:	0800b13d 	.word	0x0800b13d
 800b114:	2302      	movs	r3, #2
 800b116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11a:	e01a      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b11c:	2304      	movs	r3, #4
 800b11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b122:	e016      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b124:	2308      	movs	r3, #8
 800b126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b12a:	e012      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b12c:	2310      	movs	r3, #16
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b132:	e00e      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b134:	2320      	movs	r3, #32
 800b136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b13a:	e00a      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b13c:	2340      	movs	r3, #64	@ 0x40
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b142:	e006      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b144:	2380      	movs	r3, #128	@ 0x80
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b14a:	e002      	b.n	800b152 <UART_SetConfig+0x5a6>
 800b14c:	2380      	movs	r3, #128	@ 0x80
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a3f      	ldr	r2, [pc, #252]	@ (800b254 <UART_SetConfig+0x6a8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	f040 80f8 	bne.w	800b34e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b15e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b162:	2b20      	cmp	r3, #32
 800b164:	dc46      	bgt.n	800b1f4 <UART_SetConfig+0x648>
 800b166:	2b02      	cmp	r3, #2
 800b168:	f2c0 8082 	blt.w	800b270 <UART_SetConfig+0x6c4>
 800b16c:	3b02      	subs	r3, #2
 800b16e:	2b1e      	cmp	r3, #30
 800b170:	d87e      	bhi.n	800b270 <UART_SetConfig+0x6c4>
 800b172:	a201      	add	r2, pc, #4	@ (adr r2, 800b178 <UART_SetConfig+0x5cc>)
 800b174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b178:	0800b1fb 	.word	0x0800b1fb
 800b17c:	0800b271 	.word	0x0800b271
 800b180:	0800b203 	.word	0x0800b203
 800b184:	0800b271 	.word	0x0800b271
 800b188:	0800b271 	.word	0x0800b271
 800b18c:	0800b271 	.word	0x0800b271
 800b190:	0800b213 	.word	0x0800b213
 800b194:	0800b271 	.word	0x0800b271
 800b198:	0800b271 	.word	0x0800b271
 800b19c:	0800b271 	.word	0x0800b271
 800b1a0:	0800b271 	.word	0x0800b271
 800b1a4:	0800b271 	.word	0x0800b271
 800b1a8:	0800b271 	.word	0x0800b271
 800b1ac:	0800b271 	.word	0x0800b271
 800b1b0:	0800b223 	.word	0x0800b223
 800b1b4:	0800b271 	.word	0x0800b271
 800b1b8:	0800b271 	.word	0x0800b271
 800b1bc:	0800b271 	.word	0x0800b271
 800b1c0:	0800b271 	.word	0x0800b271
 800b1c4:	0800b271 	.word	0x0800b271
 800b1c8:	0800b271 	.word	0x0800b271
 800b1cc:	0800b271 	.word	0x0800b271
 800b1d0:	0800b271 	.word	0x0800b271
 800b1d4:	0800b271 	.word	0x0800b271
 800b1d8:	0800b271 	.word	0x0800b271
 800b1dc:	0800b271 	.word	0x0800b271
 800b1e0:	0800b271 	.word	0x0800b271
 800b1e4:	0800b271 	.word	0x0800b271
 800b1e8:	0800b271 	.word	0x0800b271
 800b1ec:	0800b271 	.word	0x0800b271
 800b1f0:	0800b263 	.word	0x0800b263
 800b1f4:	2b40      	cmp	r3, #64	@ 0x40
 800b1f6:	d037      	beq.n	800b268 <UART_SetConfig+0x6bc>
 800b1f8:	e03a      	b.n	800b270 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b1fa:	f7fc fcf3 	bl	8007be4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b200:	e03c      	b.n	800b27c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b206:	4618      	mov	r0, r3
 800b208:	f7fc fd02 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b210:	e034      	b.n	800b27c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b212:	f107 0318 	add.w	r3, r7, #24
 800b216:	4618      	mov	r0, r3
 800b218:	f7fc fe4e 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b220:	e02c      	b.n	800b27c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b222:	4b09      	ldr	r3, [pc, #36]	@ (800b248 <UART_SetConfig+0x69c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0320 	and.w	r3, r3, #32
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d016      	beq.n	800b25c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b22e:	4b06      	ldr	r3, [pc, #24]	@ (800b248 <UART_SetConfig+0x69c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	08db      	lsrs	r3, r3, #3
 800b234:	f003 0303 	and.w	r3, r3, #3
 800b238:	4a07      	ldr	r2, [pc, #28]	@ (800b258 <UART_SetConfig+0x6ac>)
 800b23a:	fa22 f303 	lsr.w	r3, r2, r3
 800b23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b240:	e01c      	b.n	800b27c <UART_SetConfig+0x6d0>
 800b242:	bf00      	nop
 800b244:	40011400 	.word	0x40011400
 800b248:	58024400 	.word	0x58024400
 800b24c:	40007800 	.word	0x40007800
 800b250:	40007c00 	.word	0x40007c00
 800b254:	58000c00 	.word	0x58000c00
 800b258:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b25c:	4b9d      	ldr	r3, [pc, #628]	@ (800b4d4 <UART_SetConfig+0x928>)
 800b25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b260:	e00c      	b.n	800b27c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b262:	4b9d      	ldr	r3, [pc, #628]	@ (800b4d8 <UART_SetConfig+0x92c>)
 800b264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b266:	e009      	b.n	800b27c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b26e:	e005      	b.n	800b27c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b270:	2300      	movs	r3, #0
 800b272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b27a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b27c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 81de 	beq.w	800b640 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b288:	4a94      	ldr	r2, [pc, #592]	@ (800b4dc <UART_SetConfig+0x930>)
 800b28a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b28e:	461a      	mov	r2, r3
 800b290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b292:	fbb3 f3f2 	udiv	r3, r3, r2
 800b296:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	4613      	mov	r3, r2
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	4413      	add	r3, r2
 800b2a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d305      	bcc.n	800b2b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d903      	bls.n	800b2bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2ba:	e1c1      	b.n	800b640 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2be:	2200      	movs	r2, #0
 800b2c0:	60bb      	str	r3, [r7, #8]
 800b2c2:	60fa      	str	r2, [r7, #12]
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c8:	4a84      	ldr	r2, [pc, #528]	@ (800b4dc <UART_SetConfig+0x930>)
 800b2ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	603b      	str	r3, [r7, #0]
 800b2d4:	607a      	str	r2, [r7, #4]
 800b2d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b2de:	f7f5 f857 	bl	8000390 <__aeabi_uldivmod>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	f04f 0200 	mov.w	r2, #0
 800b2ee:	f04f 0300 	mov.w	r3, #0
 800b2f2:	020b      	lsls	r3, r1, #8
 800b2f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2f8:	0202      	lsls	r2, r0, #8
 800b2fa:	6979      	ldr	r1, [r7, #20]
 800b2fc:	6849      	ldr	r1, [r1, #4]
 800b2fe:	0849      	lsrs	r1, r1, #1
 800b300:	2000      	movs	r0, #0
 800b302:	460c      	mov	r4, r1
 800b304:	4605      	mov	r5, r0
 800b306:	eb12 0804 	adds.w	r8, r2, r4
 800b30a:	eb43 0905 	adc.w	r9, r3, r5
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	469a      	mov	sl, r3
 800b316:	4693      	mov	fp, r2
 800b318:	4652      	mov	r2, sl
 800b31a:	465b      	mov	r3, fp
 800b31c:	4640      	mov	r0, r8
 800b31e:	4649      	mov	r1, r9
 800b320:	f7f5 f836 	bl	8000390 <__aeabi_uldivmod>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	4613      	mov	r3, r2
 800b32a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b332:	d308      	bcc.n	800b346 <UART_SetConfig+0x79a>
 800b334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b33a:	d204      	bcs.n	800b346 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b342:	60da      	str	r2, [r3, #12]
 800b344:	e17c      	b.n	800b640 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b34c:	e178      	b.n	800b640 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b356:	f040 80c5 	bne.w	800b4e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b35a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b35e:	2b20      	cmp	r3, #32
 800b360:	dc48      	bgt.n	800b3f4 <UART_SetConfig+0x848>
 800b362:	2b00      	cmp	r3, #0
 800b364:	db7b      	blt.n	800b45e <UART_SetConfig+0x8b2>
 800b366:	2b20      	cmp	r3, #32
 800b368:	d879      	bhi.n	800b45e <UART_SetConfig+0x8b2>
 800b36a:	a201      	add	r2, pc, #4	@ (adr r2, 800b370 <UART_SetConfig+0x7c4>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b3fb 	.word	0x0800b3fb
 800b374:	0800b403 	.word	0x0800b403
 800b378:	0800b45f 	.word	0x0800b45f
 800b37c:	0800b45f 	.word	0x0800b45f
 800b380:	0800b40b 	.word	0x0800b40b
 800b384:	0800b45f 	.word	0x0800b45f
 800b388:	0800b45f 	.word	0x0800b45f
 800b38c:	0800b45f 	.word	0x0800b45f
 800b390:	0800b41b 	.word	0x0800b41b
 800b394:	0800b45f 	.word	0x0800b45f
 800b398:	0800b45f 	.word	0x0800b45f
 800b39c:	0800b45f 	.word	0x0800b45f
 800b3a0:	0800b45f 	.word	0x0800b45f
 800b3a4:	0800b45f 	.word	0x0800b45f
 800b3a8:	0800b45f 	.word	0x0800b45f
 800b3ac:	0800b45f 	.word	0x0800b45f
 800b3b0:	0800b42b 	.word	0x0800b42b
 800b3b4:	0800b45f 	.word	0x0800b45f
 800b3b8:	0800b45f 	.word	0x0800b45f
 800b3bc:	0800b45f 	.word	0x0800b45f
 800b3c0:	0800b45f 	.word	0x0800b45f
 800b3c4:	0800b45f 	.word	0x0800b45f
 800b3c8:	0800b45f 	.word	0x0800b45f
 800b3cc:	0800b45f 	.word	0x0800b45f
 800b3d0:	0800b45f 	.word	0x0800b45f
 800b3d4:	0800b45f 	.word	0x0800b45f
 800b3d8:	0800b45f 	.word	0x0800b45f
 800b3dc:	0800b45f 	.word	0x0800b45f
 800b3e0:	0800b45f 	.word	0x0800b45f
 800b3e4:	0800b45f 	.word	0x0800b45f
 800b3e8:	0800b45f 	.word	0x0800b45f
 800b3ec:	0800b45f 	.word	0x0800b45f
 800b3f0:	0800b451 	.word	0x0800b451
 800b3f4:	2b40      	cmp	r3, #64	@ 0x40
 800b3f6:	d02e      	beq.n	800b456 <UART_SetConfig+0x8aa>
 800b3f8:	e031      	b.n	800b45e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3fa:	f7fa fc21 	bl	8005c40 <HAL_RCC_GetPCLK1Freq>
 800b3fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b400:	e033      	b.n	800b46a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b402:	f7fa fc33 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 800b406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b408:	e02f      	b.n	800b46a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b40a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fc fbfe 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b418:	e027      	b.n	800b46a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b41a:	f107 0318 	add.w	r3, r7, #24
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fc fd4a 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b428:	e01f      	b.n	800b46a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b42a:	4b2d      	ldr	r3, [pc, #180]	@ (800b4e0 <UART_SetConfig+0x934>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0320 	and.w	r3, r3, #32
 800b432:	2b00      	cmp	r3, #0
 800b434:	d009      	beq.n	800b44a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b436:	4b2a      	ldr	r3, [pc, #168]	@ (800b4e0 <UART_SetConfig+0x934>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	08db      	lsrs	r3, r3, #3
 800b43c:	f003 0303 	and.w	r3, r3, #3
 800b440:	4a24      	ldr	r2, [pc, #144]	@ (800b4d4 <UART_SetConfig+0x928>)
 800b442:	fa22 f303 	lsr.w	r3, r2, r3
 800b446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b448:	e00f      	b.n	800b46a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b44a:	4b22      	ldr	r3, [pc, #136]	@ (800b4d4 <UART_SetConfig+0x928>)
 800b44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b44e:	e00c      	b.n	800b46a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b450:	4b21      	ldr	r3, [pc, #132]	@ (800b4d8 <UART_SetConfig+0x92c>)
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b454:	e009      	b.n	800b46a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b45c:	e005      	b.n	800b46a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b45e:	2300      	movs	r3, #0
 800b460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f000 80e7 	beq.w	800b640 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b476:	4a19      	ldr	r2, [pc, #100]	@ (800b4dc <UART_SetConfig+0x930>)
 800b478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b47c:	461a      	mov	r2, r3
 800b47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b480:	fbb3 f3f2 	udiv	r3, r3, r2
 800b484:	005a      	lsls	r2, r3, #1
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	085b      	lsrs	r3, r3, #1
 800b48c:	441a      	add	r2, r3
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	fbb2 f3f3 	udiv	r3, r2, r3
 800b496:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49a:	2b0f      	cmp	r3, #15
 800b49c:	d916      	bls.n	800b4cc <UART_SetConfig+0x920>
 800b49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4a4:	d212      	bcs.n	800b4cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	f023 030f 	bic.w	r3, r3, #15
 800b4ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	085b      	lsrs	r3, r3, #1
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	f003 0307 	and.w	r3, r3, #7
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b4c8:	60da      	str	r2, [r3, #12]
 800b4ca:	e0b9      	b.n	800b640 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b4d2:	e0b5      	b.n	800b640 <UART_SetConfig+0xa94>
 800b4d4:	03d09000 	.word	0x03d09000
 800b4d8:	003d0900 	.word	0x003d0900
 800b4dc:	08015c4c 	.word	0x08015c4c
 800b4e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4e8:	2b20      	cmp	r3, #32
 800b4ea:	dc49      	bgt.n	800b580 <UART_SetConfig+0x9d4>
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	db7c      	blt.n	800b5ea <UART_SetConfig+0xa3e>
 800b4f0:	2b20      	cmp	r3, #32
 800b4f2:	d87a      	bhi.n	800b5ea <UART_SetConfig+0xa3e>
 800b4f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b4fc <UART_SetConfig+0x950>)
 800b4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fa:	bf00      	nop
 800b4fc:	0800b587 	.word	0x0800b587
 800b500:	0800b58f 	.word	0x0800b58f
 800b504:	0800b5eb 	.word	0x0800b5eb
 800b508:	0800b5eb 	.word	0x0800b5eb
 800b50c:	0800b597 	.word	0x0800b597
 800b510:	0800b5eb 	.word	0x0800b5eb
 800b514:	0800b5eb 	.word	0x0800b5eb
 800b518:	0800b5eb 	.word	0x0800b5eb
 800b51c:	0800b5a7 	.word	0x0800b5a7
 800b520:	0800b5eb 	.word	0x0800b5eb
 800b524:	0800b5eb 	.word	0x0800b5eb
 800b528:	0800b5eb 	.word	0x0800b5eb
 800b52c:	0800b5eb 	.word	0x0800b5eb
 800b530:	0800b5eb 	.word	0x0800b5eb
 800b534:	0800b5eb 	.word	0x0800b5eb
 800b538:	0800b5eb 	.word	0x0800b5eb
 800b53c:	0800b5b7 	.word	0x0800b5b7
 800b540:	0800b5eb 	.word	0x0800b5eb
 800b544:	0800b5eb 	.word	0x0800b5eb
 800b548:	0800b5eb 	.word	0x0800b5eb
 800b54c:	0800b5eb 	.word	0x0800b5eb
 800b550:	0800b5eb 	.word	0x0800b5eb
 800b554:	0800b5eb 	.word	0x0800b5eb
 800b558:	0800b5eb 	.word	0x0800b5eb
 800b55c:	0800b5eb 	.word	0x0800b5eb
 800b560:	0800b5eb 	.word	0x0800b5eb
 800b564:	0800b5eb 	.word	0x0800b5eb
 800b568:	0800b5eb 	.word	0x0800b5eb
 800b56c:	0800b5eb 	.word	0x0800b5eb
 800b570:	0800b5eb 	.word	0x0800b5eb
 800b574:	0800b5eb 	.word	0x0800b5eb
 800b578:	0800b5eb 	.word	0x0800b5eb
 800b57c:	0800b5dd 	.word	0x0800b5dd
 800b580:	2b40      	cmp	r3, #64	@ 0x40
 800b582:	d02e      	beq.n	800b5e2 <UART_SetConfig+0xa36>
 800b584:	e031      	b.n	800b5ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b586:	f7fa fb5b 	bl	8005c40 <HAL_RCC_GetPCLK1Freq>
 800b58a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b58c:	e033      	b.n	800b5f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b58e:	f7fa fb6d 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 800b592:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b594:	e02f      	b.n	800b5f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fc fb38 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a4:	e027      	b.n	800b5f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a6:	f107 0318 	add.w	r3, r7, #24
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fc fc84 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5b4:	e01f      	b.n	800b5f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5b6:	4b2d      	ldr	r3, [pc, #180]	@ (800b66c <UART_SetConfig+0xac0>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5c2:	4b2a      	ldr	r3, [pc, #168]	@ (800b66c <UART_SetConfig+0xac0>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	08db      	lsrs	r3, r3, #3
 800b5c8:	f003 0303 	and.w	r3, r3, #3
 800b5cc:	4a28      	ldr	r2, [pc, #160]	@ (800b670 <UART_SetConfig+0xac4>)
 800b5ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5d4:	e00f      	b.n	800b5f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b5d6:	4b26      	ldr	r3, [pc, #152]	@ (800b670 <UART_SetConfig+0xac4>)
 800b5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5da:	e00c      	b.n	800b5f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5dc:	4b25      	ldr	r3, [pc, #148]	@ (800b674 <UART_SetConfig+0xac8>)
 800b5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e0:	e009      	b.n	800b5f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e8:	e005      	b.n	800b5f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b5f4:	bf00      	nop
    }

    if (pclk != 0U)
 800b5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d021      	beq.n	800b640 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b600:	4a1d      	ldr	r2, [pc, #116]	@ (800b678 <UART_SetConfig+0xacc>)
 800b602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b606:	461a      	mov	r2, r3
 800b608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b60a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	085b      	lsrs	r3, r3, #1
 800b614:	441a      	add	r2, r3
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b622:	2b0f      	cmp	r3, #15
 800b624:	d909      	bls.n	800b63a <UART_SetConfig+0xa8e>
 800b626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b62c:	d205      	bcs.n	800b63a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b630:	b29a      	uxth	r2, r3
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60da      	str	r2, [r3, #12]
 800b638:	e002      	b.n	800b640 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2201      	movs	r2, #1
 800b644:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2200      	movs	r2, #0
 800b654:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	2200      	movs	r2, #0
 800b65a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b65c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b660:	4618      	mov	r0, r3
 800b662:	3748      	adds	r7, #72	@ 0x48
 800b664:	46bd      	mov	sp, r7
 800b666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b66a:	bf00      	nop
 800b66c:	58024400 	.word	0x58024400
 800b670:	03d09000 	.word	0x03d09000
 800b674:	003d0900 	.word	0x003d0900
 800b678:	08015c4c 	.word	0x08015c4c

0800b67c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b688:	f003 0308 	and.w	r3, r3, #8
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00a      	beq.n	800b6a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00a      	beq.n	800b6c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6cc:	f003 0302 	and.w	r3, r3, #2
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00a      	beq.n	800b6ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	430a      	orrs	r2, r1
 800b6e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ee:	f003 0304 	and.w	r3, r3, #4
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00a      	beq.n	800b70c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	430a      	orrs	r2, r1
 800b70a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b710:	f003 0310 	and.w	r3, r3, #16
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00a      	beq.n	800b72e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	430a      	orrs	r2, r1
 800b72c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b732:	f003 0320 	and.w	r3, r3, #32
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	430a      	orrs	r2, r1
 800b74e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d01a      	beq.n	800b792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	430a      	orrs	r2, r1
 800b770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b77a:	d10a      	bne.n	800b792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	430a      	orrs	r2, r1
 800b790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00a      	beq.n	800b7b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	430a      	orrs	r2, r1
 800b7b2:	605a      	str	r2, [r3, #4]
  }
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b098      	sub	sp, #96	@ 0x60
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7d0:	f7f6 fdca 	bl	8002368 <HAL_GetTick>
 800b7d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0308 	and.w	r3, r3, #8
 800b7e0:	2b08      	cmp	r3, #8
 800b7e2:	d12f      	bne.n	800b844 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f88e 	bl	800b914 <UART_WaitOnFlagUntilTimeout>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d022      	beq.n	800b844 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b806:	e853 3f00 	ldrex	r3, [r3]
 800b80a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b812:	653b      	str	r3, [r7, #80]	@ 0x50
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	461a      	mov	r2, r3
 800b81a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b81c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b81e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b820:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b824:	e841 2300 	strex	r3, r2, [r1]
 800b828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b82a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e6      	bne.n	800b7fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2220      	movs	r2, #32
 800b834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e063      	b.n	800b90c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0304 	and.w	r3, r3, #4
 800b84e:	2b04      	cmp	r3, #4
 800b850:	d149      	bne.n	800b8e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b852:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b85a:	2200      	movs	r2, #0
 800b85c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f857 	bl	800b914 <UART_WaitOnFlagUntilTimeout>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d03c      	beq.n	800b8e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b874:	e853 3f00 	ldrex	r3, [r3]
 800b878:	623b      	str	r3, [r7, #32]
   return(result);
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b88a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b88c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e6      	bne.n	800b86c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	e853 3f00 	ldrex	r3, [r3]
 800b8ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f023 0301 	bic.w	r3, r3, #1
 800b8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8be:	61fa      	str	r2, [r7, #28]
 800b8c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c2:	69b9      	ldr	r1, [r7, #24]
 800b8c4:	69fa      	ldr	r2, [r7, #28]
 800b8c6:	e841 2300 	strex	r3, r2, [r1]
 800b8ca:	617b      	str	r3, [r7, #20]
   return(result);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1e5      	bne.n	800b89e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2220      	movs	r2, #32
 800b8d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	e012      	b.n	800b90c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2220      	movs	r2, #32
 800b8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2220      	movs	r2, #32
 800b8f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3758      	adds	r7, #88	@ 0x58
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	603b      	str	r3, [r7, #0]
 800b920:	4613      	mov	r3, r2
 800b922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b924:	e04f      	b.n	800b9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92c:	d04b      	beq.n	800b9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b92e:	f7f6 fd1b 	bl	8002368 <HAL_GetTick>
 800b932:	4602      	mov	r2, r0
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	69ba      	ldr	r2, [r7, #24]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d302      	bcc.n	800b944 <UART_WaitOnFlagUntilTimeout+0x30>
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b944:	2303      	movs	r3, #3
 800b946:	e04e      	b.n	800b9e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 0304 	and.w	r3, r3, #4
 800b952:	2b00      	cmp	r3, #0
 800b954:	d037      	beq.n	800b9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	2b80      	cmp	r3, #128	@ 0x80
 800b95a:	d034      	beq.n	800b9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	2b40      	cmp	r3, #64	@ 0x40
 800b960:	d031      	beq.n	800b9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	69db      	ldr	r3, [r3, #28]
 800b968:	f003 0308 	and.w	r3, r3, #8
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d110      	bne.n	800b992 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2208      	movs	r2, #8
 800b976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f000 f839 	bl	800b9f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2208      	movs	r2, #8
 800b982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e029      	b.n	800b9e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	69db      	ldr	r3, [r3, #28]
 800b998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b99c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9a0:	d111      	bne.n	800b9c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 f81f 	bl	800b9f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2220      	movs	r2, #32
 800b9b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e00f      	b.n	800b9e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	69da      	ldr	r2, [r3, #28]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	bf0c      	ite	eq
 800b9d6:	2301      	moveq	r3, #1
 800b9d8:	2300      	movne	r3, #0
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	461a      	mov	r2, r3
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d0a0      	beq.n	800b926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
	...

0800b9f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b095      	sub	sp, #84	@ 0x54
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba00:	e853 3f00 	ldrex	r3, [r3]
 800ba04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba16:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba1e:	e841 2300 	strex	r3, r2, [r1]
 800ba22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e6      	bne.n	800b9f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3308      	adds	r3, #8
 800ba30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba3a:	69fa      	ldr	r2, [r7, #28]
 800ba3c:	4b1e      	ldr	r3, [pc, #120]	@ (800bab8 <UART_EndRxTransfer+0xc8>)
 800ba3e:	4013      	ands	r3, r2
 800ba40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3308      	adds	r3, #8
 800ba48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba52:	e841 2300 	strex	r3, r2, [r1]
 800ba56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e5      	bne.n	800ba2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d118      	bne.n	800ba98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	e853 3f00 	ldrex	r3, [r3]
 800ba72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	f023 0310 	bic.w	r3, r3, #16
 800ba7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	461a      	mov	r2, r3
 800ba82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba84:	61bb      	str	r3, [r7, #24]
 800ba86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba88:	6979      	ldr	r1, [r7, #20]
 800ba8a:	69ba      	ldr	r2, [r7, #24]
 800ba8c:	e841 2300 	strex	r3, r2, [r1]
 800ba90:	613b      	str	r3, [r7, #16]
   return(result);
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1e6      	bne.n	800ba66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800baac:	bf00      	nop
 800baae:	3754      	adds	r7, #84	@ 0x54
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr
 800bab8:	effffffe 	.word	0xeffffffe

0800babc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d101      	bne.n	800bad2 <HAL_UARTEx_DisableFifoMode+0x16>
 800bace:	2302      	movs	r3, #2
 800bad0:	e027      	b.n	800bb22 <HAL_UARTEx_DisableFifoMode+0x66>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2224      	movs	r2, #36	@ 0x24
 800bade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f022 0201 	bic.w	r2, r2, #1
 800baf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2220      	movs	r2, #32
 800bb14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b084      	sub	sp, #16
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d101      	bne.n	800bb46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb42:	2302      	movs	r3, #2
 800bb44:	e02d      	b.n	800bba2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2224      	movs	r2, #36	@ 0x24
 800bb52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f022 0201 	bic.w	r2, r2, #1
 800bb6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f850 	bl	800bc28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2220      	movs	r2, #32
 800bb94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d101      	bne.n	800bbc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	e02d      	b.n	800bc1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2224      	movs	r2, #36	@ 0x24
 800bbce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f022 0201 	bic.w	r2, r2, #1
 800bbe8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f812 	bl	800bc28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d108      	bne.n	800bc4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc48:	e031      	b.n	800bcae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc4a:	2310      	movs	r3, #16
 800bc4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc4e:	2310      	movs	r3, #16
 800bc50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	0e5b      	lsrs	r3, r3, #25
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	f003 0307 	and.w	r3, r3, #7
 800bc60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	0f5b      	lsrs	r3, r3, #29
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	f003 0307 	and.w	r3, r3, #7
 800bc70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc72:	7bbb      	ldrb	r3, [r7, #14]
 800bc74:	7b3a      	ldrb	r2, [r7, #12]
 800bc76:	4911      	ldr	r1, [pc, #68]	@ (800bcbc <UARTEx_SetNbDataToProcess+0x94>)
 800bc78:	5c8a      	ldrb	r2, [r1, r2]
 800bc7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc7e:	7b3a      	ldrb	r2, [r7, #12]
 800bc80:	490f      	ldr	r1, [pc, #60]	@ (800bcc0 <UARTEx_SetNbDataToProcess+0x98>)
 800bc82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc84:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
 800bc92:	7b7a      	ldrb	r2, [r7, #13]
 800bc94:	4909      	ldr	r1, [pc, #36]	@ (800bcbc <UARTEx_SetNbDataToProcess+0x94>)
 800bc96:	5c8a      	ldrb	r2, [r1, r2]
 800bc98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc9c:	7b7a      	ldrb	r2, [r7, #13]
 800bc9e:	4908      	ldr	r1, [pc, #32]	@ (800bcc0 <UARTEx_SetNbDataToProcess+0x98>)
 800bca0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bca2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bcae:	bf00      	nop
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	08015c64 	.word	0x08015c64
 800bcc0:	08015c6c 	.word	0x08015c6c

0800bcc4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e03c      	b.n	800bd50 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7f6 f88e 	bl	8001e0c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f022 0201 	bic.w	r2, r2, #1
 800bd06:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f85b 	bl	800bdc4 <USART_SetConfig>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d101      	bne.n	800bd18 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	e01b      	b.n	800bd50 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bd26:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	689a      	ldr	r2, [r3, #8]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bd36:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f042 0201 	orr.w	r2, r2, #1
 800bd46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fd5b 	bl	800c804 <USART_CheckIdleState>
 800bd4e:	4603      	mov	r3, r0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	4613      	mov	r3, r2
 800bd66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bd68:	e018      	b.n	800bd9c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd70:	d014      	beq.n	800bd9c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd72:	f7f6 faf9 	bl	8002368 <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	69ba      	ldr	r2, [r7, #24]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d302      	bcc.n	800bd88 <USART_WaitOnFlagUntilTimeout+0x30>
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d109      	bne.n	800bd9c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e00f      	b.n	800bdbc <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	69da      	ldr	r2, [r3, #28]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	4013      	ands	r3, r2
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	bf0c      	ite	eq
 800bdac:	2301      	moveq	r3, #1
 800bdae:	2300      	movne	r3, #0
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d0d7      	beq.n	800bd6a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b08e      	sub	sp, #56	@ 0x38
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	431a      	orrs	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	4bc9      	ldr	r3, [pc, #804]	@ (800c118 <USART_SetConfig+0x354>)
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	6812      	ldr	r2, [r2, #0]
 800bdfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdfc:	430b      	orrs	r3, r1
 800bdfe:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800be00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800be04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be0c:	4313      	orrs	r3, r2
 800be0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699a      	ldr	r2, [r3, #24]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	4313      	orrs	r3, r2
 800be1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be1c:	4313      	orrs	r3, r2
 800be1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be26:	4313      	orrs	r3, r2
 800be28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	4bba      	ldr	r3, [pc, #744]	@ (800c11c <USART_SetConfig+0x358>)
 800be32:	4013      	ands	r3, r2
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	6812      	ldr	r2, [r2, #0]
 800be38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be3a:	430b      	orrs	r3, r1
 800be3c:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be44:	f023 010f 	bic.w	r1, r3, #15
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	430a      	orrs	r2, r1
 800be52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4ab1      	ldr	r2, [pc, #708]	@ (800c120 <USART_SetConfig+0x35c>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d176      	bne.n	800bf4c <USART_SetConfig+0x188>
 800be5e:	4bb1      	ldr	r3, [pc, #708]	@ (800c124 <USART_SetConfig+0x360>)
 800be60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be66:	2b28      	cmp	r3, #40	@ 0x28
 800be68:	d86c      	bhi.n	800bf44 <USART_SetConfig+0x180>
 800be6a:	a201      	add	r2, pc, #4	@ (adr r2, 800be70 <USART_SetConfig+0xac>)
 800be6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be70:	0800bf15 	.word	0x0800bf15
 800be74:	0800bf45 	.word	0x0800bf45
 800be78:	0800bf45 	.word	0x0800bf45
 800be7c:	0800bf45 	.word	0x0800bf45
 800be80:	0800bf45 	.word	0x0800bf45
 800be84:	0800bf45 	.word	0x0800bf45
 800be88:	0800bf45 	.word	0x0800bf45
 800be8c:	0800bf45 	.word	0x0800bf45
 800be90:	0800bf1d 	.word	0x0800bf1d
 800be94:	0800bf45 	.word	0x0800bf45
 800be98:	0800bf45 	.word	0x0800bf45
 800be9c:	0800bf45 	.word	0x0800bf45
 800bea0:	0800bf45 	.word	0x0800bf45
 800bea4:	0800bf45 	.word	0x0800bf45
 800bea8:	0800bf45 	.word	0x0800bf45
 800beac:	0800bf45 	.word	0x0800bf45
 800beb0:	0800bf25 	.word	0x0800bf25
 800beb4:	0800bf45 	.word	0x0800bf45
 800beb8:	0800bf45 	.word	0x0800bf45
 800bebc:	0800bf45 	.word	0x0800bf45
 800bec0:	0800bf45 	.word	0x0800bf45
 800bec4:	0800bf45 	.word	0x0800bf45
 800bec8:	0800bf45 	.word	0x0800bf45
 800becc:	0800bf45 	.word	0x0800bf45
 800bed0:	0800bf2d 	.word	0x0800bf2d
 800bed4:	0800bf45 	.word	0x0800bf45
 800bed8:	0800bf45 	.word	0x0800bf45
 800bedc:	0800bf45 	.word	0x0800bf45
 800bee0:	0800bf45 	.word	0x0800bf45
 800bee4:	0800bf45 	.word	0x0800bf45
 800bee8:	0800bf45 	.word	0x0800bf45
 800beec:	0800bf45 	.word	0x0800bf45
 800bef0:	0800bf35 	.word	0x0800bf35
 800bef4:	0800bf45 	.word	0x0800bf45
 800bef8:	0800bf45 	.word	0x0800bf45
 800befc:	0800bf45 	.word	0x0800bf45
 800bf00:	0800bf45 	.word	0x0800bf45
 800bf04:	0800bf45 	.word	0x0800bf45
 800bf08:	0800bf45 	.word	0x0800bf45
 800bf0c:	0800bf45 	.word	0x0800bf45
 800bf10:	0800bf3d 	.word	0x0800bf3d
 800bf14:	2301      	movs	r3, #1
 800bf16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf1a:	e112      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf22:	e10e      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf24:	2304      	movs	r3, #4
 800bf26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf2a:	e10a      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf2c:	2308      	movs	r3, #8
 800bf2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf32:	e106      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf34:	2310      	movs	r3, #16
 800bf36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf3a:	e102      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf3c:	2320      	movs	r3, #32
 800bf3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf42:	e0fe      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf44:	2340      	movs	r3, #64	@ 0x40
 800bf46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf4a:	e0fa      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a75      	ldr	r2, [pc, #468]	@ (800c128 <USART_SetConfig+0x364>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d130      	bne.n	800bfb8 <USART_SetConfig+0x1f4>
 800bf56:	4b73      	ldr	r3, [pc, #460]	@ (800c124 <USART_SetConfig+0x360>)
 800bf58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf5a:	f003 0307 	and.w	r3, r3, #7
 800bf5e:	2b05      	cmp	r3, #5
 800bf60:	d826      	bhi.n	800bfb0 <USART_SetConfig+0x1ec>
 800bf62:	a201      	add	r2, pc, #4	@ (adr r2, 800bf68 <USART_SetConfig+0x1a4>)
 800bf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf68:	0800bf81 	.word	0x0800bf81
 800bf6c:	0800bf89 	.word	0x0800bf89
 800bf70:	0800bf91 	.word	0x0800bf91
 800bf74:	0800bf99 	.word	0x0800bf99
 800bf78:	0800bfa1 	.word	0x0800bfa1
 800bf7c:	0800bfa9 	.word	0x0800bfa9
 800bf80:	2300      	movs	r3, #0
 800bf82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf86:	e0dc      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf88:	2302      	movs	r3, #2
 800bf8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf8e:	e0d8      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf90:	2304      	movs	r3, #4
 800bf92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf96:	e0d4      	b.n	800c142 <USART_SetConfig+0x37e>
 800bf98:	2308      	movs	r3, #8
 800bf9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bf9e:	e0d0      	b.n	800c142 <USART_SetConfig+0x37e>
 800bfa0:	2310      	movs	r3, #16
 800bfa2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bfa6:	e0cc      	b.n	800c142 <USART_SetConfig+0x37e>
 800bfa8:	2320      	movs	r3, #32
 800bfaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bfae:	e0c8      	b.n	800c142 <USART_SetConfig+0x37e>
 800bfb0:	2340      	movs	r3, #64	@ 0x40
 800bfb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bfb6:	e0c4      	b.n	800c142 <USART_SetConfig+0x37e>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a5b      	ldr	r2, [pc, #364]	@ (800c12c <USART_SetConfig+0x368>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d130      	bne.n	800c024 <USART_SetConfig+0x260>
 800bfc2:	4b58      	ldr	r3, [pc, #352]	@ (800c124 <USART_SetConfig+0x360>)
 800bfc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	2b05      	cmp	r3, #5
 800bfcc:	d826      	bhi.n	800c01c <USART_SetConfig+0x258>
 800bfce:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd4 <USART_SetConfig+0x210>)
 800bfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd4:	0800bfed 	.word	0x0800bfed
 800bfd8:	0800bff5 	.word	0x0800bff5
 800bfdc:	0800bffd 	.word	0x0800bffd
 800bfe0:	0800c005 	.word	0x0800c005
 800bfe4:	0800c00d 	.word	0x0800c00d
 800bfe8:	0800c015 	.word	0x0800c015
 800bfec:	2300      	movs	r3, #0
 800bfee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bff2:	e0a6      	b.n	800c142 <USART_SetConfig+0x37e>
 800bff4:	2302      	movs	r3, #2
 800bff6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bffa:	e0a2      	b.n	800c142 <USART_SetConfig+0x37e>
 800bffc:	2304      	movs	r3, #4
 800bffe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c002:	e09e      	b.n	800c142 <USART_SetConfig+0x37e>
 800c004:	2308      	movs	r3, #8
 800c006:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c00a:	e09a      	b.n	800c142 <USART_SetConfig+0x37e>
 800c00c:	2310      	movs	r3, #16
 800c00e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c012:	e096      	b.n	800c142 <USART_SetConfig+0x37e>
 800c014:	2320      	movs	r3, #32
 800c016:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c01a:	e092      	b.n	800c142 <USART_SetConfig+0x37e>
 800c01c:	2340      	movs	r3, #64	@ 0x40
 800c01e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c022:	e08e      	b.n	800c142 <USART_SetConfig+0x37e>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a41      	ldr	r2, [pc, #260]	@ (800c130 <USART_SetConfig+0x36c>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	f040 8086 	bne.w	800c13c <USART_SetConfig+0x378>
 800c030:	4b3c      	ldr	r3, [pc, #240]	@ (800c124 <USART_SetConfig+0x360>)
 800c032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c034:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c038:	2b28      	cmp	r3, #40	@ 0x28
 800c03a:	d87b      	bhi.n	800c134 <USART_SetConfig+0x370>
 800c03c:	a201      	add	r2, pc, #4	@ (adr r2, 800c044 <USART_SetConfig+0x280>)
 800c03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c042:	bf00      	nop
 800c044:	0800c0e9 	.word	0x0800c0e9
 800c048:	0800c135 	.word	0x0800c135
 800c04c:	0800c135 	.word	0x0800c135
 800c050:	0800c135 	.word	0x0800c135
 800c054:	0800c135 	.word	0x0800c135
 800c058:	0800c135 	.word	0x0800c135
 800c05c:	0800c135 	.word	0x0800c135
 800c060:	0800c135 	.word	0x0800c135
 800c064:	0800c0f1 	.word	0x0800c0f1
 800c068:	0800c135 	.word	0x0800c135
 800c06c:	0800c135 	.word	0x0800c135
 800c070:	0800c135 	.word	0x0800c135
 800c074:	0800c135 	.word	0x0800c135
 800c078:	0800c135 	.word	0x0800c135
 800c07c:	0800c135 	.word	0x0800c135
 800c080:	0800c135 	.word	0x0800c135
 800c084:	0800c0f9 	.word	0x0800c0f9
 800c088:	0800c135 	.word	0x0800c135
 800c08c:	0800c135 	.word	0x0800c135
 800c090:	0800c135 	.word	0x0800c135
 800c094:	0800c135 	.word	0x0800c135
 800c098:	0800c135 	.word	0x0800c135
 800c09c:	0800c135 	.word	0x0800c135
 800c0a0:	0800c135 	.word	0x0800c135
 800c0a4:	0800c101 	.word	0x0800c101
 800c0a8:	0800c135 	.word	0x0800c135
 800c0ac:	0800c135 	.word	0x0800c135
 800c0b0:	0800c135 	.word	0x0800c135
 800c0b4:	0800c135 	.word	0x0800c135
 800c0b8:	0800c135 	.word	0x0800c135
 800c0bc:	0800c135 	.word	0x0800c135
 800c0c0:	0800c135 	.word	0x0800c135
 800c0c4:	0800c109 	.word	0x0800c109
 800c0c8:	0800c135 	.word	0x0800c135
 800c0cc:	0800c135 	.word	0x0800c135
 800c0d0:	0800c135 	.word	0x0800c135
 800c0d4:	0800c135 	.word	0x0800c135
 800c0d8:	0800c135 	.word	0x0800c135
 800c0dc:	0800c135 	.word	0x0800c135
 800c0e0:	0800c135 	.word	0x0800c135
 800c0e4:	0800c111 	.word	0x0800c111
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0ee:	e028      	b.n	800c142 <USART_SetConfig+0x37e>
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0f6:	e024      	b.n	800c142 <USART_SetConfig+0x37e>
 800c0f8:	2304      	movs	r3, #4
 800c0fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0fe:	e020      	b.n	800c142 <USART_SetConfig+0x37e>
 800c100:	2308      	movs	r3, #8
 800c102:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c106:	e01c      	b.n	800c142 <USART_SetConfig+0x37e>
 800c108:	2310      	movs	r3, #16
 800c10a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c10e:	e018      	b.n	800c142 <USART_SetConfig+0x37e>
 800c110:	2320      	movs	r3, #32
 800c112:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c116:	e014      	b.n	800c142 <USART_SetConfig+0x37e>
 800c118:	cfff69f3 	.word	0xcfff69f3
 800c11c:	ffffc0f6 	.word	0xffffc0f6
 800c120:	40011000 	.word	0x40011000
 800c124:	58024400 	.word	0x58024400
 800c128:	40004400 	.word	0x40004400
 800c12c:	40004800 	.word	0x40004800
 800c130:	40011400 	.word	0x40011400
 800c134:	2340      	movs	r3, #64	@ 0x40
 800c136:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c13a:	e002      	b.n	800c142 <USART_SetConfig+0x37e>
 800c13c:	2340      	movs	r3, #64	@ 0x40
 800c13e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800c142:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c146:	2b20      	cmp	r3, #32
 800c148:	f200 8329 	bhi.w	800c79e <USART_SetConfig+0x9da>
 800c14c:	a201      	add	r2, pc, #4	@ (adr r2, 800c154 <USART_SetConfig+0x390>)
 800c14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c152:	bf00      	nop
 800c154:	0800c1d9 	.word	0x0800c1d9
 800c158:	0800c28f 	.word	0x0800c28f
 800c15c:	0800c345 	.word	0x0800c345
 800c160:	0800c79f 	.word	0x0800c79f
 800c164:	0800c3ff 	.word	0x0800c3ff
 800c168:	0800c79f 	.word	0x0800c79f
 800c16c:	0800c79f 	.word	0x0800c79f
 800c170:	0800c79f 	.word	0x0800c79f
 800c174:	0800c4b9 	.word	0x0800c4b9
 800c178:	0800c79f 	.word	0x0800c79f
 800c17c:	0800c79f 	.word	0x0800c79f
 800c180:	0800c79f 	.word	0x0800c79f
 800c184:	0800c79f 	.word	0x0800c79f
 800c188:	0800c79f 	.word	0x0800c79f
 800c18c:	0800c79f 	.word	0x0800c79f
 800c190:	0800c79f 	.word	0x0800c79f
 800c194:	0800c631 	.word	0x0800c631
 800c198:	0800c79f 	.word	0x0800c79f
 800c19c:	0800c79f 	.word	0x0800c79f
 800c1a0:	0800c79f 	.word	0x0800c79f
 800c1a4:	0800c79f 	.word	0x0800c79f
 800c1a8:	0800c79f 	.word	0x0800c79f
 800c1ac:	0800c79f 	.word	0x0800c79f
 800c1b0:	0800c79f 	.word	0x0800c79f
 800c1b4:	0800c79f 	.word	0x0800c79f
 800c1b8:	0800c79f 	.word	0x0800c79f
 800c1bc:	0800c79f 	.word	0x0800c79f
 800c1c0:	0800c79f 	.word	0x0800c79f
 800c1c4:	0800c79f 	.word	0x0800c79f
 800c1c8:	0800c79f 	.word	0x0800c79f
 800c1cc:	0800c79f 	.word	0x0800c79f
 800c1d0:	0800c79f 	.word	0x0800c79f
 800c1d4:	0800c6ed 	.word	0x0800c6ed
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800c1d8:	f7f9 fd32 	bl	8005c40 <HAL_RCC_GetPCLK1Freq>
 800c1dc:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d044      	beq.n	800c270 <USART_SetConfig+0x4ac>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d03e      	beq.n	800c26c <USART_SetConfig+0x4a8>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d038      	beq.n	800c268 <USART_SetConfig+0x4a4>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1fa:	2b03      	cmp	r3, #3
 800c1fc:	d032      	beq.n	800c264 <USART_SetConfig+0x4a0>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c202:	2b04      	cmp	r3, #4
 800c204:	d02c      	beq.n	800c260 <USART_SetConfig+0x49c>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c20a:	2b05      	cmp	r3, #5
 800c20c:	d026      	beq.n	800c25c <USART_SetConfig+0x498>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c212:	2b06      	cmp	r3, #6
 800c214:	d020      	beq.n	800c258 <USART_SetConfig+0x494>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c21a:	2b07      	cmp	r3, #7
 800c21c:	d01a      	beq.n	800c254 <USART_SetConfig+0x490>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c222:	2b08      	cmp	r3, #8
 800c224:	d014      	beq.n	800c250 <USART_SetConfig+0x48c>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c22a:	2b09      	cmp	r3, #9
 800c22c:	d00e      	beq.n	800c24c <USART_SetConfig+0x488>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c232:	2b0a      	cmp	r3, #10
 800c234:	d008      	beq.n	800c248 <USART_SetConfig+0x484>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c23a:	2b0b      	cmp	r3, #11
 800c23c:	d102      	bne.n	800c244 <USART_SetConfig+0x480>
 800c23e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c242:	e016      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c244:	2301      	movs	r3, #1
 800c246:	e014      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c248:	2380      	movs	r3, #128	@ 0x80
 800c24a:	e012      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c24c:	2340      	movs	r3, #64	@ 0x40
 800c24e:	e010      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c250:	2320      	movs	r3, #32
 800c252:	e00e      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c254:	2310      	movs	r3, #16
 800c256:	e00c      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c258:	230c      	movs	r3, #12
 800c25a:	e00a      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c25c:	230a      	movs	r3, #10
 800c25e:	e008      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c260:	2308      	movs	r3, #8
 800c262:	e006      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c264:	2306      	movs	r3, #6
 800c266:	e004      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c268:	2304      	movs	r3, #4
 800c26a:	e002      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c26c:	2302      	movs	r3, #2
 800c26e:	e000      	b.n	800c272 <USART_SetConfig+0x4ae>
 800c270:	2301      	movs	r3, #1
 800c272:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c274:	fbb2 f3f3 	udiv	r3, r2, r3
 800c278:	005a      	lsls	r2, r3, #1
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	085b      	lsrs	r3, r3, #1
 800c280:	441a      	add	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c28c:	e28b      	b.n	800c7a6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800c28e:	f7f9 fced 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 800c292:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d044      	beq.n	800c326 <USART_SetConfig+0x562>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d03e      	beq.n	800c322 <USART_SetConfig+0x55e>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d038      	beq.n	800c31e <USART_SetConfig+0x55a>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b0:	2b03      	cmp	r3, #3
 800c2b2:	d032      	beq.n	800c31a <USART_SetConfig+0x556>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b8:	2b04      	cmp	r3, #4
 800c2ba:	d02c      	beq.n	800c316 <USART_SetConfig+0x552>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2c0:	2b05      	cmp	r3, #5
 800c2c2:	d026      	beq.n	800c312 <USART_SetConfig+0x54e>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2c8:	2b06      	cmp	r3, #6
 800c2ca:	d020      	beq.n	800c30e <USART_SetConfig+0x54a>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d0:	2b07      	cmp	r3, #7
 800c2d2:	d01a      	beq.n	800c30a <USART_SetConfig+0x546>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d014      	beq.n	800c306 <USART_SetConfig+0x542>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e0:	2b09      	cmp	r3, #9
 800c2e2:	d00e      	beq.n	800c302 <USART_SetConfig+0x53e>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e8:	2b0a      	cmp	r3, #10
 800c2ea:	d008      	beq.n	800c2fe <USART_SetConfig+0x53a>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f0:	2b0b      	cmp	r3, #11
 800c2f2:	d102      	bne.n	800c2fa <USART_SetConfig+0x536>
 800c2f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c2f8:	e016      	b.n	800c328 <USART_SetConfig+0x564>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e014      	b.n	800c328 <USART_SetConfig+0x564>
 800c2fe:	2380      	movs	r3, #128	@ 0x80
 800c300:	e012      	b.n	800c328 <USART_SetConfig+0x564>
 800c302:	2340      	movs	r3, #64	@ 0x40
 800c304:	e010      	b.n	800c328 <USART_SetConfig+0x564>
 800c306:	2320      	movs	r3, #32
 800c308:	e00e      	b.n	800c328 <USART_SetConfig+0x564>
 800c30a:	2310      	movs	r3, #16
 800c30c:	e00c      	b.n	800c328 <USART_SetConfig+0x564>
 800c30e:	230c      	movs	r3, #12
 800c310:	e00a      	b.n	800c328 <USART_SetConfig+0x564>
 800c312:	230a      	movs	r3, #10
 800c314:	e008      	b.n	800c328 <USART_SetConfig+0x564>
 800c316:	2308      	movs	r3, #8
 800c318:	e006      	b.n	800c328 <USART_SetConfig+0x564>
 800c31a:	2306      	movs	r3, #6
 800c31c:	e004      	b.n	800c328 <USART_SetConfig+0x564>
 800c31e:	2304      	movs	r3, #4
 800c320:	e002      	b.n	800c328 <USART_SetConfig+0x564>
 800c322:	2302      	movs	r3, #2
 800c324:	e000      	b.n	800c328 <USART_SetConfig+0x564>
 800c326:	2301      	movs	r3, #1
 800c328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c32e:	005a      	lsls	r2, r3, #1
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	085b      	lsrs	r3, r3, #1
 800c336:	441a      	add	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c340:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c342:	e230      	b.n	800c7a6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c344:	f107 0318 	add.w	r3, r7, #24
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fb fc61 	bl	8007c10 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800c34e:	69fa      	ldr	r2, [r7, #28]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c354:	2b00      	cmp	r3, #0
 800c356:	d044      	beq.n	800c3e2 <USART_SetConfig+0x61e>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d03e      	beq.n	800c3de <USART_SetConfig+0x61a>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c364:	2b02      	cmp	r3, #2
 800c366:	d038      	beq.n	800c3da <USART_SetConfig+0x616>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d032      	beq.n	800c3d6 <USART_SetConfig+0x612>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c374:	2b04      	cmp	r3, #4
 800c376:	d02c      	beq.n	800c3d2 <USART_SetConfig+0x60e>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c37c:	2b05      	cmp	r3, #5
 800c37e:	d026      	beq.n	800c3ce <USART_SetConfig+0x60a>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c384:	2b06      	cmp	r3, #6
 800c386:	d020      	beq.n	800c3ca <USART_SetConfig+0x606>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c38c:	2b07      	cmp	r3, #7
 800c38e:	d01a      	beq.n	800c3c6 <USART_SetConfig+0x602>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c394:	2b08      	cmp	r3, #8
 800c396:	d014      	beq.n	800c3c2 <USART_SetConfig+0x5fe>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c39c:	2b09      	cmp	r3, #9
 800c39e:	d00e      	beq.n	800c3be <USART_SetConfig+0x5fa>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a4:	2b0a      	cmp	r3, #10
 800c3a6:	d008      	beq.n	800c3ba <USART_SetConfig+0x5f6>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ac:	2b0b      	cmp	r3, #11
 800c3ae:	d102      	bne.n	800c3b6 <USART_SetConfig+0x5f2>
 800c3b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c3b4:	e016      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e014      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3ba:	2380      	movs	r3, #128	@ 0x80
 800c3bc:	e012      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3be:	2340      	movs	r3, #64	@ 0x40
 800c3c0:	e010      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3c2:	2320      	movs	r3, #32
 800c3c4:	e00e      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3c6:	2310      	movs	r3, #16
 800c3c8:	e00c      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3ca:	230c      	movs	r3, #12
 800c3cc:	e00a      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3ce:	230a      	movs	r3, #10
 800c3d0:	e008      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3d2:	2308      	movs	r3, #8
 800c3d4:	e006      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3d6:	2306      	movs	r3, #6
 800c3d8:	e004      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3da:	2304      	movs	r3, #4
 800c3dc:	e002      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e000      	b.n	800c3e4 <USART_SetConfig+0x620>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e8:	005a      	lsls	r2, r3, #1
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	085b      	lsrs	r3, r3, #1
 800c3f0:	441a      	add	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3fa:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c3fc:	e1d3      	b.n	800c7a6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3fe:	f107 030c 	add.w	r3, r7, #12
 800c402:	4618      	mov	r0, r3
 800c404:	f7fb fd58 	bl	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d044      	beq.n	800c49c <USART_SetConfig+0x6d8>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c416:	2b01      	cmp	r3, #1
 800c418:	d03e      	beq.n	800c498 <USART_SetConfig+0x6d4>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d038      	beq.n	800c494 <USART_SetConfig+0x6d0>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c426:	2b03      	cmp	r3, #3
 800c428:	d032      	beq.n	800c490 <USART_SetConfig+0x6cc>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c42e:	2b04      	cmp	r3, #4
 800c430:	d02c      	beq.n	800c48c <USART_SetConfig+0x6c8>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c436:	2b05      	cmp	r3, #5
 800c438:	d026      	beq.n	800c488 <USART_SetConfig+0x6c4>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43e:	2b06      	cmp	r3, #6
 800c440:	d020      	beq.n	800c484 <USART_SetConfig+0x6c0>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c446:	2b07      	cmp	r3, #7
 800c448:	d01a      	beq.n	800c480 <USART_SetConfig+0x6bc>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c44e:	2b08      	cmp	r3, #8
 800c450:	d014      	beq.n	800c47c <USART_SetConfig+0x6b8>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c456:	2b09      	cmp	r3, #9
 800c458:	d00e      	beq.n	800c478 <USART_SetConfig+0x6b4>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45e:	2b0a      	cmp	r3, #10
 800c460:	d008      	beq.n	800c474 <USART_SetConfig+0x6b0>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c466:	2b0b      	cmp	r3, #11
 800c468:	d102      	bne.n	800c470 <USART_SetConfig+0x6ac>
 800c46a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c46e:	e016      	b.n	800c49e <USART_SetConfig+0x6da>
 800c470:	2301      	movs	r3, #1
 800c472:	e014      	b.n	800c49e <USART_SetConfig+0x6da>
 800c474:	2380      	movs	r3, #128	@ 0x80
 800c476:	e012      	b.n	800c49e <USART_SetConfig+0x6da>
 800c478:	2340      	movs	r3, #64	@ 0x40
 800c47a:	e010      	b.n	800c49e <USART_SetConfig+0x6da>
 800c47c:	2320      	movs	r3, #32
 800c47e:	e00e      	b.n	800c49e <USART_SetConfig+0x6da>
 800c480:	2310      	movs	r3, #16
 800c482:	e00c      	b.n	800c49e <USART_SetConfig+0x6da>
 800c484:	230c      	movs	r3, #12
 800c486:	e00a      	b.n	800c49e <USART_SetConfig+0x6da>
 800c488:	230a      	movs	r3, #10
 800c48a:	e008      	b.n	800c49e <USART_SetConfig+0x6da>
 800c48c:	2308      	movs	r3, #8
 800c48e:	e006      	b.n	800c49e <USART_SetConfig+0x6da>
 800c490:	2306      	movs	r3, #6
 800c492:	e004      	b.n	800c49e <USART_SetConfig+0x6da>
 800c494:	2304      	movs	r3, #4
 800c496:	e002      	b.n	800c49e <USART_SetConfig+0x6da>
 800c498:	2302      	movs	r3, #2
 800c49a:	e000      	b.n	800c49e <USART_SetConfig+0x6da>
 800c49c:	2301      	movs	r3, #1
 800c49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a2:	005a      	lsls	r2, r3, #1
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	085b      	lsrs	r3, r3, #1
 800c4aa:	441a      	add	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4b4:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c4b6:	e176      	b.n	800c7a6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4b8:	4b89      	ldr	r3, [pc, #548]	@ (800c6e0 <USART_SetConfig+0x91c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f003 0320 	and.w	r3, r3, #32
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d05d      	beq.n	800c580 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800c4c4:	4b86      	ldr	r3, [pc, #536]	@ (800c6e0 <USART_SetConfig+0x91c>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	08db      	lsrs	r3, r3, #3
 800c4ca:	f003 0303 	and.w	r3, r3, #3
 800c4ce:	4a85      	ldr	r2, [pc, #532]	@ (800c6e4 <USART_SetConfig+0x920>)
 800c4d0:	40da      	lsrs	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d044      	beq.n	800c564 <USART_SetConfig+0x7a0>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d03e      	beq.n	800c560 <USART_SetConfig+0x79c>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d038      	beq.n	800c55c <USART_SetConfig+0x798>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d032      	beq.n	800c558 <USART_SetConfig+0x794>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4f6:	2b04      	cmp	r3, #4
 800c4f8:	d02c      	beq.n	800c554 <USART_SetConfig+0x790>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4fe:	2b05      	cmp	r3, #5
 800c500:	d026      	beq.n	800c550 <USART_SetConfig+0x78c>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c506:	2b06      	cmp	r3, #6
 800c508:	d020      	beq.n	800c54c <USART_SetConfig+0x788>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c50e:	2b07      	cmp	r3, #7
 800c510:	d01a      	beq.n	800c548 <USART_SetConfig+0x784>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c516:	2b08      	cmp	r3, #8
 800c518:	d014      	beq.n	800c544 <USART_SetConfig+0x780>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c51e:	2b09      	cmp	r3, #9
 800c520:	d00e      	beq.n	800c540 <USART_SetConfig+0x77c>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c526:	2b0a      	cmp	r3, #10
 800c528:	d008      	beq.n	800c53c <USART_SetConfig+0x778>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c52e:	2b0b      	cmp	r3, #11
 800c530:	d102      	bne.n	800c538 <USART_SetConfig+0x774>
 800c532:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c536:	e016      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c538:	2301      	movs	r3, #1
 800c53a:	e014      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c53c:	2380      	movs	r3, #128	@ 0x80
 800c53e:	e012      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c540:	2340      	movs	r3, #64	@ 0x40
 800c542:	e010      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c544:	2320      	movs	r3, #32
 800c546:	e00e      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c548:	2310      	movs	r3, #16
 800c54a:	e00c      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c54c:	230c      	movs	r3, #12
 800c54e:	e00a      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c550:	230a      	movs	r3, #10
 800c552:	e008      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c554:	2308      	movs	r3, #8
 800c556:	e006      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c558:	2306      	movs	r3, #6
 800c55a:	e004      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c55c:	2304      	movs	r3, #4
 800c55e:	e002      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c560:	2302      	movs	r3, #2
 800c562:	e000      	b.n	800c566 <USART_SetConfig+0x7a2>
 800c564:	2301      	movs	r3, #1
 800c566:	fbb2 f3f3 	udiv	r3, r2, r3
 800c56a:	005a      	lsls	r2, r3, #1
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	085b      	lsrs	r3, r3, #1
 800c572:	441a      	add	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	fbb2 f3f3 	udiv	r3, r2, r3
 800c57c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800c57e:	e112      	b.n	800c7a6 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c584:	2b00      	cmp	r3, #0
 800c586:	d044      	beq.n	800c612 <USART_SetConfig+0x84e>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d03e      	beq.n	800c60e <USART_SetConfig+0x84a>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c594:	2b02      	cmp	r3, #2
 800c596:	d038      	beq.n	800c60a <USART_SetConfig+0x846>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d032      	beq.n	800c606 <USART_SetConfig+0x842>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a4:	2b04      	cmp	r3, #4
 800c5a6:	d02c      	beq.n	800c602 <USART_SetConfig+0x83e>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ac:	2b05      	cmp	r3, #5
 800c5ae:	d026      	beq.n	800c5fe <USART_SetConfig+0x83a>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b4:	2b06      	cmp	r3, #6
 800c5b6:	d020      	beq.n	800c5fa <USART_SetConfig+0x836>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5bc:	2b07      	cmp	r3, #7
 800c5be:	d01a      	beq.n	800c5f6 <USART_SetConfig+0x832>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c4:	2b08      	cmp	r3, #8
 800c5c6:	d014      	beq.n	800c5f2 <USART_SetConfig+0x82e>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5cc:	2b09      	cmp	r3, #9
 800c5ce:	d00e      	beq.n	800c5ee <USART_SetConfig+0x82a>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d4:	2b0a      	cmp	r3, #10
 800c5d6:	d008      	beq.n	800c5ea <USART_SetConfig+0x826>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5dc:	2b0b      	cmp	r3, #11
 800c5de:	d102      	bne.n	800c5e6 <USART_SetConfig+0x822>
 800c5e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c5e4:	e016      	b.n	800c614 <USART_SetConfig+0x850>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e014      	b.n	800c614 <USART_SetConfig+0x850>
 800c5ea:	2380      	movs	r3, #128	@ 0x80
 800c5ec:	e012      	b.n	800c614 <USART_SetConfig+0x850>
 800c5ee:	2340      	movs	r3, #64	@ 0x40
 800c5f0:	e010      	b.n	800c614 <USART_SetConfig+0x850>
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	e00e      	b.n	800c614 <USART_SetConfig+0x850>
 800c5f6:	2310      	movs	r3, #16
 800c5f8:	e00c      	b.n	800c614 <USART_SetConfig+0x850>
 800c5fa:	230c      	movs	r3, #12
 800c5fc:	e00a      	b.n	800c614 <USART_SetConfig+0x850>
 800c5fe:	230a      	movs	r3, #10
 800c600:	e008      	b.n	800c614 <USART_SetConfig+0x850>
 800c602:	2308      	movs	r3, #8
 800c604:	e006      	b.n	800c614 <USART_SetConfig+0x850>
 800c606:	2306      	movs	r3, #6
 800c608:	e004      	b.n	800c614 <USART_SetConfig+0x850>
 800c60a:	2304      	movs	r3, #4
 800c60c:	e002      	b.n	800c614 <USART_SetConfig+0x850>
 800c60e:	2302      	movs	r3, #2
 800c610:	e000      	b.n	800c614 <USART_SetConfig+0x850>
 800c612:	2301      	movs	r3, #1
 800c614:	4a33      	ldr	r2, [pc, #204]	@ (800c6e4 <USART_SetConfig+0x920>)
 800c616:	fbb2 f3f3 	udiv	r3, r2, r3
 800c61a:	005a      	lsls	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	085b      	lsrs	r3, r3, #1
 800c622:	441a      	add	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	fbb2 f3f3 	udiv	r3, r2, r3
 800c62c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c62e:	e0ba      	b.n	800c7a6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c634:	2b00      	cmp	r3, #0
 800c636:	d044      	beq.n	800c6c2 <USART_SetConfig+0x8fe>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d03e      	beq.n	800c6be <USART_SetConfig+0x8fa>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c644:	2b02      	cmp	r3, #2
 800c646:	d038      	beq.n	800c6ba <USART_SetConfig+0x8f6>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d032      	beq.n	800c6b6 <USART_SetConfig+0x8f2>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c654:	2b04      	cmp	r3, #4
 800c656:	d02c      	beq.n	800c6b2 <USART_SetConfig+0x8ee>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c65c:	2b05      	cmp	r3, #5
 800c65e:	d026      	beq.n	800c6ae <USART_SetConfig+0x8ea>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c664:	2b06      	cmp	r3, #6
 800c666:	d020      	beq.n	800c6aa <USART_SetConfig+0x8e6>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66c:	2b07      	cmp	r3, #7
 800c66e:	d01a      	beq.n	800c6a6 <USART_SetConfig+0x8e2>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c674:	2b08      	cmp	r3, #8
 800c676:	d014      	beq.n	800c6a2 <USART_SetConfig+0x8de>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c67c:	2b09      	cmp	r3, #9
 800c67e:	d00e      	beq.n	800c69e <USART_SetConfig+0x8da>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c684:	2b0a      	cmp	r3, #10
 800c686:	d008      	beq.n	800c69a <USART_SetConfig+0x8d6>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c68c:	2b0b      	cmp	r3, #11
 800c68e:	d102      	bne.n	800c696 <USART_SetConfig+0x8d2>
 800c690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c694:	e016      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c696:	2301      	movs	r3, #1
 800c698:	e014      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c69a:	2380      	movs	r3, #128	@ 0x80
 800c69c:	e012      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c69e:	2340      	movs	r3, #64	@ 0x40
 800c6a0:	e010      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c6a2:	2320      	movs	r3, #32
 800c6a4:	e00e      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c6a6:	2310      	movs	r3, #16
 800c6a8:	e00c      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c6aa:	230c      	movs	r3, #12
 800c6ac:	e00a      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c6ae:	230a      	movs	r3, #10
 800c6b0:	e008      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c6b2:	2308      	movs	r3, #8
 800c6b4:	e006      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c6b6:	2306      	movs	r3, #6
 800c6b8:	e004      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c6ba:	2304      	movs	r3, #4
 800c6bc:	e002      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c6be:	2302      	movs	r3, #2
 800c6c0:	e000      	b.n	800c6c4 <USART_SetConfig+0x900>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	4a08      	ldr	r2, [pc, #32]	@ (800c6e8 <USART_SetConfig+0x924>)
 800c6c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6ca:	005a      	lsls	r2, r3, #1
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	085b      	lsrs	r3, r3, #1
 800c6d2:	441a      	add	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6dc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c6de:	e062      	b.n	800c7a6 <USART_SetConfig+0x9e2>
 800c6e0:	58024400 	.word	0x58024400
 800c6e4:	03d09000 	.word	0x03d09000
 800c6e8:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d044      	beq.n	800c77e <USART_SetConfig+0x9ba>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d03e      	beq.n	800c77a <USART_SetConfig+0x9b6>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c700:	2b02      	cmp	r3, #2
 800c702:	d038      	beq.n	800c776 <USART_SetConfig+0x9b2>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c708:	2b03      	cmp	r3, #3
 800c70a:	d032      	beq.n	800c772 <USART_SetConfig+0x9ae>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c710:	2b04      	cmp	r3, #4
 800c712:	d02c      	beq.n	800c76e <USART_SetConfig+0x9aa>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c718:	2b05      	cmp	r3, #5
 800c71a:	d026      	beq.n	800c76a <USART_SetConfig+0x9a6>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c720:	2b06      	cmp	r3, #6
 800c722:	d020      	beq.n	800c766 <USART_SetConfig+0x9a2>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c728:	2b07      	cmp	r3, #7
 800c72a:	d01a      	beq.n	800c762 <USART_SetConfig+0x99e>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c730:	2b08      	cmp	r3, #8
 800c732:	d014      	beq.n	800c75e <USART_SetConfig+0x99a>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c738:	2b09      	cmp	r3, #9
 800c73a:	d00e      	beq.n	800c75a <USART_SetConfig+0x996>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c740:	2b0a      	cmp	r3, #10
 800c742:	d008      	beq.n	800c756 <USART_SetConfig+0x992>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c748:	2b0b      	cmp	r3, #11
 800c74a:	d102      	bne.n	800c752 <USART_SetConfig+0x98e>
 800c74c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c750:	e016      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c752:	2301      	movs	r3, #1
 800c754:	e014      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c756:	2380      	movs	r3, #128	@ 0x80
 800c758:	e012      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c75a:	2340      	movs	r3, #64	@ 0x40
 800c75c:	e010      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c75e:	2320      	movs	r3, #32
 800c760:	e00e      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c762:	2310      	movs	r3, #16
 800c764:	e00c      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c766:	230c      	movs	r3, #12
 800c768:	e00a      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c76a:	230a      	movs	r3, #10
 800c76c:	e008      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c76e:	2308      	movs	r3, #8
 800c770:	e006      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c772:	2306      	movs	r3, #6
 800c774:	e004      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c776:	2304      	movs	r3, #4
 800c778:	e002      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c77a:	2302      	movs	r3, #2
 800c77c:	e000      	b.n	800c780 <USART_SetConfig+0x9bc>
 800c77e:	2301      	movs	r3, #1
 800c780:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800c784:	fbb2 f3f3 	udiv	r3, r2, r3
 800c788:	005a      	lsls	r2, r3, #1
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	085b      	lsrs	r3, r3, #1
 800c790:	441a      	add	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	fbb2 f3f3 	udiv	r3, r2, r3
 800c79a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c79c:	e003      	b.n	800c7a6 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800c7a4:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a8:	2b0f      	cmp	r3, #15
 800c7aa:	d916      	bls.n	800c7da <USART_SetConfig+0xa16>
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7b2:	d212      	bcs.n	800c7da <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	f023 030f 	bic.w	r3, r3, #15
 800c7bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	085b      	lsrs	r3, r3, #1
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	f003 0307 	and.w	r3, r3, #7
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c7d6:	60da      	str	r2, [r3, #12]
 800c7d8:	e002      	b.n	800c7e0 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800c7f8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3738      	adds	r7, #56	@ 0x38
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af02      	add	r7, sp, #8
 800c80a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c812:	f7f5 fda9 	bl	8002368 <HAL_GetTick>
 800c816:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 0308 	and.w	r3, r3, #8
 800c822:	2b08      	cmp	r3, #8
 800c824:	d10e      	bne.n	800c844 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff fa8f 	bl	800bd58 <USART_WaitOnFlagUntilTimeout>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d001      	beq.n	800c844 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c840:	2303      	movs	r3, #3
 800c842:	e01e      	b.n	800c882 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 0304 	and.w	r3, r3, #4
 800c84e:	2b04      	cmp	r3, #4
 800c850:	d10e      	bne.n	800c870 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7ff fa79 	bl	800bd58 <USART_WaitOnFlagUntilTimeout>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c86c:	2303      	movs	r3, #3
 800c86e:	e008      	b.n	800c882 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d101      	bne.n	800c8a0 <HAL_USARTEx_EnableSlaveMode+0x16>
 800c89c:	2302      	movs	r3, #2
 800c89e:	e043      	b.n	800c928 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f022 0201 	bic.w	r2, r2, #1
 800c8c6:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c8d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	689a      	ldr	r2, [r3, #8]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c8e6:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f042 0201 	orr.w	r2, r2, #1
 800c8f6:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f042 0201 	orr.w	r2, r2, #1
 800c91c:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3714      	adds	r7, #20
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c944:	2b01      	cmp	r3, #1
 800c946:	d101      	bne.n	800c94c <HAL_USARTEx_ConfigNSS+0x18>
 800c948:	2302      	movs	r3, #2
 800c94a:	e02a      	b.n	800c9a2 <HAL_USARTEx_ConfigNSS+0x6e>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f022 0201 	bic.w	r2, r2, #1
 800c972:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	f023 0108 	bic.w	r1, r3, #8
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	430a      	orrs	r2, r1
 800c986:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3714      	adds	r7, #20
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b085      	sub	sp, #20
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d101      	bne.n	800c9c4 <HAL_USARTEx_DisableFifoMode+0x16>
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	e027      	b.n	800ca14 <HAL_USARTEx_DisableFifoMode+0x66>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2202      	movs	r2, #2
 800c9d0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f022 0201 	bic.w	r2, r2, #1
 800c9ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c9f2:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d101      	bne.n	800ca38 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800ca34:	2302      	movs	r3, #2
 800ca36:	e02d      	b.n	800ca94 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2202      	movs	r2, #2
 800ca44:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f022 0201 	bic.w	r2, r2, #1
 800ca5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	430a      	orrs	r2, r1
 800ca72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 f84f 	bl	800cb18 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800caac:	2b01      	cmp	r3, #1
 800caae:	d101      	bne.n	800cab4 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800cab0:	2302      	movs	r3, #2
 800cab2:	e02d      	b.n	800cb10 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2202      	movs	r2, #2
 800cac0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f022 0201 	bic.w	r2, r2, #1
 800cada:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	430a      	orrs	r2, r1
 800caee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f811 	bl	800cb18 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d106      	bne.n	800cb36 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb34:	e02f      	b.n	800cb96 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb36:	2310      	movs	r3, #16
 800cb38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb3a:	2310      	movs	r3, #16
 800cb3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800cb44:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	f003 0307 	and.w	r3, r3, #7
 800cb4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800cb54:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	f003 0307 	and.w	r3, r3, #7
 800cb5c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb5e:	7bbb      	ldrb	r3, [r7, #14]
 800cb60:	7b3a      	ldrb	r2, [r7, #12]
 800cb62:	4910      	ldr	r1, [pc, #64]	@ (800cba4 <USARTEx_SetNbDataToProcess+0x8c>)
 800cb64:	5c8a      	ldrb	r2, [r1, r2]
 800cb66:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800cb6a:	7b3a      	ldrb	r2, [r7, #12]
 800cb6c:	490e      	ldr	r1, [pc, #56]	@ (800cba8 <USARTEx_SetNbDataToProcess+0x90>)
 800cb6e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb70:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb7a:	7bfb      	ldrb	r3, [r7, #15]
 800cb7c:	7b7a      	ldrb	r2, [r7, #13]
 800cb7e:	4909      	ldr	r1, [pc, #36]	@ (800cba4 <USARTEx_SetNbDataToProcess+0x8c>)
 800cb80:	5c8a      	ldrb	r2, [r1, r2]
 800cb82:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800cb86:	7b7a      	ldrb	r2, [r7, #13]
 800cb88:	4907      	ldr	r1, [pc, #28]	@ (800cba8 <USARTEx_SetNbDataToProcess+0x90>)
 800cb8a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800cb96:	bf00      	nop
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	08015c74 	.word	0x08015c74
 800cba8:	08015c7c 	.word	0x08015c7c

0800cbac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cbac:	b084      	sub	sp, #16
 800cbae:	b480      	push	{r7}
 800cbb0:	b085      	sub	sp, #20
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	f107 001c 	add.w	r0, r7, #28
 800cbba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800cbc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800cbc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800cbc6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800cbca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800cbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800cbce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800cbd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	4b07      	ldr	r3, [pc, #28]	@ (800cbfc <SDMMC_Init+0x50>)
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	431a      	orrs	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3714      	adds	r7, #20
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	b004      	add	sp, #16
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	ffc02c00 	.word	0xffc02c00

0800cc00 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	370c      	adds	r7, #12
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr

0800cc1a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b083      	sub	sp, #12
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
 800cc22:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f043 0203 	orr.w	r2, r3, #3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	370c      	adds	r7, #12
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cc5e:	b480      	push	{r7}
 800cc60:	b083      	sub	sp, #12
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f003 0303 	and.w	r3, r3, #3
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
	...

0800cc7c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cc9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800cca0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800cca6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68da      	ldr	r2, [r3, #12]
 800ccb2:	4b06      	ldr	r3, [pc, #24]	@ (800cccc <SDMMC_SendCommand+0x50>)
 800ccb4:	4013      	ands	r3, r2
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	431a      	orrs	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr
 800cccc:	fffee0c0 	.word	0xfffee0c0

0800ccd0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	b2db      	uxtb	r3, r3
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr

0800ccea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ccea:	b480      	push	{r7}
 800ccec:	b085      	sub	sp, #20
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
 800ccf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	3314      	adds	r3, #20
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3714      	adds	r7, #20
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	685a      	ldr	r2, [r3, #4]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cd36:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800cd3c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800cd42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	4313      	orrs	r3, r2
 800cd48:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	431a      	orrs	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cd5a:	2300      	movs	r3, #0

}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3714      	adds	r7, #20
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b088      	sub	sp, #32
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cd76:	2310      	movs	r3, #16
 800cd78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd80:	2300      	movs	r3, #0
 800cd82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd8a:	f107 0308 	add.w	r3, r7, #8
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7ff ff73 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cd96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd9a:	2110      	movs	r1, #16
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fa5f 	bl	800d260 <SDMMC_GetCmdResp1>
 800cda2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cda4:	69fb      	ldr	r3, [r7, #28]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3720      	adds	r7, #32
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b088      	sub	sp, #32
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cdbc:	2311      	movs	r3, #17
 800cdbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cdc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cdce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdd0:	f107 0308 	add.w	r3, r7, #8
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff ff50 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cde0:	2111      	movs	r1, #17
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 fa3c 	bl	800d260 <SDMMC_GetCmdResp1>
 800cde8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdea:	69fb      	ldr	r3, [r7, #28]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3720      	adds	r7, #32
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ce02:	2312      	movs	r3, #18
 800ce04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce16:	f107 0308 	add.w	r3, r7, #8
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7ff ff2d 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ce22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce26:	2112      	movs	r1, #18
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fa19 	bl	800d260 <SDMMC_GetCmdResp1>
 800ce2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce30:	69fb      	ldr	r3, [r7, #28]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3720      	adds	r7, #32
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b088      	sub	sp, #32
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ce48:	2318      	movs	r3, #24
 800ce4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce52:	2300      	movs	r3, #0
 800ce54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce5c:	f107 0308 	add.w	r3, r7, #8
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff ff0a 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ce68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce6c:	2118      	movs	r1, #24
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f9f6 	bl	800d260 <SDMMC_GetCmdResp1>
 800ce74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce76:	69fb      	ldr	r3, [r7, #28]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3720      	adds	r7, #32
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b088      	sub	sp, #32
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ce8e:	2319      	movs	r3, #25
 800ce90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cea0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cea2:	f107 0308 	add.w	r3, r7, #8
 800cea6:	4619      	mov	r1, r3
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7ff fee7 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ceae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ceb2:	2119      	movs	r1, #25
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 f9d3 	bl	800d260 <SDMMC_GetCmdResp1>
 800ceba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cebc:	69fb      	ldr	r3, [r7, #28]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3720      	adds	r7, #32
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
	...

0800cec8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ced0:	2300      	movs	r3, #0
 800ced2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ced4:	230c      	movs	r3, #12
 800ced6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ced8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cedc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cede:	2300      	movs	r3, #0
 800cee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cee6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf00:	f107 0308 	add.w	r3, r7, #8
 800cf04:	4619      	mov	r1, r3
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7ff feb8 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cf0c:	4a0b      	ldr	r2, [pc, #44]	@ (800cf3c <SDMMC_CmdStopTransfer+0x74>)
 800cf0e:	210c      	movs	r1, #12
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f9a5 	bl	800d260 <SDMMC_GetCmdResp1>
 800cf16:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf2a:	d101      	bne.n	800cf30 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800cf30:	69fb      	ldr	r3, [r7, #28]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3720      	adds	r7, #32
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	05f5e100 	.word	0x05f5e100

0800cf40 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cf4e:	2307      	movs	r3, #7
 800cf50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf62:	f107 0308 	add.w	r3, r7, #8
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff fe87 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cf6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf72:	2107      	movs	r1, #7
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f973 	bl	800d260 <SDMMC_GetCmdResp1>
 800cf7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf7c:	69fb      	ldr	r3, [r7, #28]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3720      	adds	r7, #32
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b088      	sub	sp, #32
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cf92:	2300      	movs	r3, #0
 800cf94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cf96:	2300      	movs	r3, #0
 800cf98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfa4:	f107 0308 	add.w	r3, r7, #8
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7ff fe66 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fb97 	bl	800d6e4 <SDMMC_GetCmdError>
 800cfb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfb8:	69fb      	ldr	r3, [r7, #28]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3720      	adds	r7, #32
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b088      	sub	sp, #32
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cfca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cfce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cfd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfe4:	f107 0308 	add.w	r3, r7, #8
 800cfe8:	4619      	mov	r1, r3
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7ff fe46 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fb29 	bl	800d648 <SDMMC_GetCmdResp7>
 800cff6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cff8:	69fb      	ldr	r3, [r7, #28]
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3720      	adds	r7, #32
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b088      	sub	sp, #32
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
 800d00a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d010:	2337      	movs	r3, #55	@ 0x37
 800d012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d01a:	2300      	movs	r3, #0
 800d01c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d01e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d022:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d024:	f107 0308 	add.w	r3, r7, #8
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff fe26 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d030:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d034:	2137      	movs	r1, #55	@ 0x37
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f912 	bl	800d260 <SDMMC_GetCmdResp1>
 800d03c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d03e:	69fb      	ldr	r3, [r7, #28]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3720      	adds	r7, #32
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b088      	sub	sp, #32
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d056:	2329      	movs	r3, #41	@ 0x29
 800d058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d05a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d05e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d060:	2300      	movs	r3, #0
 800d062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d068:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d06a:	f107 0308 	add.w	r3, r7, #8
 800d06e:	4619      	mov	r1, r3
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff fe03 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fa2e 	bl	800d4d8 <SDMMC_GetCmdResp3>
 800d07c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d07e:	69fb      	ldr	r3, [r7, #28]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3720      	adds	r7, #32
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b088      	sub	sp, #32
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d096:	2306      	movs	r3, #6
 800d098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d09a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d09e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d0a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0aa:	f107 0308 	add.w	r3, r7, #8
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7ff fde3 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d0b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0ba:	2106      	movs	r1, #6
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 f8cf 	bl	800d260 <SDMMC_GetCmdResp1>
 800d0c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3720      	adds	r7, #32
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b088      	sub	sp, #32
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d0da:	2333      	movs	r3, #51	@ 0x33
 800d0dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d0ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ee:	f107 0308 	add.w	r3, r7, #8
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7ff fdc1 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d0fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0fe:	2133      	movs	r1, #51	@ 0x33
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f8ad 	bl	800d260 <SDMMC_GetCmdResp1>
 800d106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d108:	69fb      	ldr	r3, [r7, #28]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3720      	adds	r7, #32
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b088      	sub	sp, #32
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d11a:	2300      	movs	r3, #0
 800d11c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d11e:	2302      	movs	r3, #2
 800d120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d122:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d128:	2300      	movs	r3, #0
 800d12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d12c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d132:	f107 0308 	add.w	r3, r7, #8
 800d136:	4619      	mov	r1, r3
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7ff fd9f 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f980 	bl	800d444 <SDMMC_GetCmdResp2>
 800d144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d146:	69fb      	ldr	r3, [r7, #28]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3720      	adds	r7, #32
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b088      	sub	sp, #32
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d15e:	2309      	movs	r3, #9
 800d160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d162:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d168:	2300      	movs	r3, #0
 800d16a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d16c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d170:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d172:	f107 0308 	add.w	r3, r7, #8
 800d176:	4619      	mov	r1, r3
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff fd7f 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f960 	bl	800d444 <SDMMC_GetCmdResp2>
 800d184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d186:	69fb      	ldr	r3, [r7, #28]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3720      	adds	r7, #32
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b088      	sub	sp, #32
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d19a:	2300      	movs	r3, #0
 800d19c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1b2:	f107 0308 	add.w	r3, r7, #8
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff fd5f 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	2103      	movs	r1, #3
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 f9c8 	bl	800d558 <SDMMC_GetCmdResp6>
 800d1c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1ca:	69fb      	ldr	r3, [r7, #28]
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3720      	adds	r7, #32
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d1e2:	230d      	movs	r3, #13
 800d1e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1f6:	f107 0308 	add.w	r3, r7, #8
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff fd3d 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d202:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d206:	210d      	movs	r1, #13
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 f829 	bl	800d260 <SDMMC_GetCmdResp1>
 800d20e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d210:	69fb      	ldr	r3, [r7, #28]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3720      	adds	r7, #32
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b088      	sub	sp, #32
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d222:	2300      	movs	r3, #0
 800d224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d226:	230d      	movs	r3, #13
 800d228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d22a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d22e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d230:	2300      	movs	r3, #0
 800d232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d238:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d23a:	f107 0308 	add.w	r3, r7, #8
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7ff fd1b 	bl	800cc7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d24a:	210d      	movs	r1, #13
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 f807 	bl	800d260 <SDMMC_GetCmdResp1>
 800d252:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d254:	69fb      	ldr	r3, [r7, #28]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3720      	adds	r7, #32
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
	...

0800d260 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b088      	sub	sp, #32
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	460b      	mov	r3, r1
 800d26a:	607a      	str	r2, [r7, #4]
 800d26c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d26e:	4b70      	ldr	r3, [pc, #448]	@ (800d430 <SDMMC_GetCmdResp1+0x1d0>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a70      	ldr	r2, [pc, #448]	@ (800d434 <SDMMC_GetCmdResp1+0x1d4>)
 800d274:	fba2 2303 	umull	r2, r3, r2, r3
 800d278:	0a5a      	lsrs	r2, r3, #9
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	fb02 f303 	mul.w	r3, r2, r3
 800d280:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	1e5a      	subs	r2, r3, #1
 800d286:	61fa      	str	r2, [r7, #28]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d102      	bne.n	800d292 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d28c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d290:	e0c9      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d296:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d298:	69ba      	ldr	r2, [r7, #24]
 800d29a:	4b67      	ldr	r3, [pc, #412]	@ (800d438 <SDMMC_GetCmdResp1+0x1d8>)
 800d29c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d0ef      	beq.n	800d282 <SDMMC_GetCmdResp1+0x22>
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1ea      	bne.n	800d282 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2b0:	f003 0304 	and.w	r3, r3, #4
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d004      	beq.n	800d2c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2204      	movs	r2, #4
 800d2bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2be:	2304      	movs	r3, #4
 800d2c0:	e0b1      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2c6:	f003 0301 	and.w	r3, r3, #1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e0a6      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	4a58      	ldr	r2, [pc, #352]	@ (800d43c <SDMMC_GetCmdResp1+0x1dc>)
 800d2dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f7ff fcf6 	bl	800ccd0 <SDMMC_GetCommandResponse>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	7afb      	ldrb	r3, [r7, #11]
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d001      	beq.n	800d2f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e099      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f7ff fcf8 	bl	800ccea <SDMMC_GetResponse>
 800d2fa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	4b50      	ldr	r3, [pc, #320]	@ (800d440 <SDMMC_GetCmdResp1+0x1e0>)
 800d300:	4013      	ands	r3, r2
 800d302:	2b00      	cmp	r3, #0
 800d304:	d101      	bne.n	800d30a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d306:	2300      	movs	r3, #0
 800d308:	e08d      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	da02      	bge.n	800d316 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d310:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d314:	e087      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d320:	2340      	movs	r3, #64	@ 0x40
 800d322:	e080      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d001      	beq.n	800d332 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d32e:	2380      	movs	r3, #128	@ 0x80
 800d330:	e079      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d33c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d340:	e071      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d34c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d350:	e069      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d35c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d360:	e061      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d36c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d370:	e059      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d002      	beq.n	800d382 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d37c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d380:	e051      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d002      	beq.n	800d392 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d38c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d390:	e049      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d39c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d3a0:	e041      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d3ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3b0:	e039      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d3bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d3c0:	e031      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d3cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d3d0:	e029      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d3dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d3e0:	e021      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d002      	beq.n	800d3f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d3ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d3f0:	e019      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d3fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d400:	e011      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d002      	beq.n	800d412 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d40c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d410:	e009      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f003 0308 	and.w	r3, r3, #8
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d41c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d420:	e001      	b.n	800d426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d422:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d426:	4618      	mov	r0, r3
 800d428:	3720      	adds	r7, #32
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	24000014 	.word	0x24000014
 800d434:	10624dd3 	.word	0x10624dd3
 800d438:	00200045 	.word	0x00200045
 800d43c:	002000c5 	.word	0x002000c5
 800d440:	fdffe008 	.word	0xfdffe008

0800d444 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d44c:	4b1f      	ldr	r3, [pc, #124]	@ (800d4cc <SDMMC_GetCmdResp2+0x88>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a1f      	ldr	r2, [pc, #124]	@ (800d4d0 <SDMMC_GetCmdResp2+0x8c>)
 800d452:	fba2 2303 	umull	r2, r3, r2, r3
 800d456:	0a5b      	lsrs	r3, r3, #9
 800d458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d45c:	fb02 f303 	mul.w	r3, r2, r3
 800d460:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	1e5a      	subs	r2, r3, #1
 800d466:	60fa      	str	r2, [r7, #12]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d102      	bne.n	800d472 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d46c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d470:	e026      	b.n	800d4c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d476:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d0ef      	beq.n	800d462 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1ea      	bne.n	800d462 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d490:	f003 0304 	and.w	r3, r3, #4
 800d494:	2b00      	cmp	r3, #0
 800d496:	d004      	beq.n	800d4a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2204      	movs	r2, #4
 800d49c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d49e:	2304      	movs	r3, #4
 800d4a0:	e00e      	b.n	800d4c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d004      	beq.n	800d4b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e003      	b.n	800d4c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4a06      	ldr	r2, [pc, #24]	@ (800d4d4 <SDMMC_GetCmdResp2+0x90>)
 800d4bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d4be:	2300      	movs	r3, #0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3714      	adds	r7, #20
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	24000014 	.word	0x24000014
 800d4d0:	10624dd3 	.word	0x10624dd3
 800d4d4:	002000c5 	.word	0x002000c5

0800d4d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d4e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d54c <SDMMC_GetCmdResp3+0x74>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a1a      	ldr	r2, [pc, #104]	@ (800d550 <SDMMC_GetCmdResp3+0x78>)
 800d4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ea:	0a5b      	lsrs	r3, r3, #9
 800d4ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4f0:	fb02 f303 	mul.w	r3, r2, r3
 800d4f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	1e5a      	subs	r2, r3, #1
 800d4fa:	60fa      	str	r2, [r7, #12]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d500:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d504:	e01b      	b.n	800d53e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d50a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d512:	2b00      	cmp	r3, #0
 800d514:	d0ef      	beq.n	800d4f6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1ea      	bne.n	800d4f6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d524:	f003 0304 	and.w	r3, r3, #4
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d004      	beq.n	800d536 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2204      	movs	r2, #4
 800d530:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d532:	2304      	movs	r3, #4
 800d534:	e003      	b.n	800d53e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a06      	ldr	r2, [pc, #24]	@ (800d554 <SDMMC_GetCmdResp3+0x7c>)
 800d53a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3714      	adds	r7, #20
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	24000014 	.word	0x24000014
 800d550:	10624dd3 	.word	0x10624dd3
 800d554:	002000c5 	.word	0x002000c5

0800d558 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b088      	sub	sp, #32
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	460b      	mov	r3, r1
 800d562:	607a      	str	r2, [r7, #4]
 800d564:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d566:	4b35      	ldr	r3, [pc, #212]	@ (800d63c <SDMMC_GetCmdResp6+0xe4>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a35      	ldr	r2, [pc, #212]	@ (800d640 <SDMMC_GetCmdResp6+0xe8>)
 800d56c:	fba2 2303 	umull	r2, r3, r2, r3
 800d570:	0a5b      	lsrs	r3, r3, #9
 800d572:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d576:	fb02 f303 	mul.w	r3, r2, r3
 800d57a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	1e5a      	subs	r2, r3, #1
 800d580:	61fa      	str	r2, [r7, #28]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d102      	bne.n	800d58c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d586:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d58a:	e052      	b.n	800d632 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d590:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d0ef      	beq.n	800d57c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1ea      	bne.n	800d57c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5aa:	f003 0304 	and.w	r3, r3, #4
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d004      	beq.n	800d5bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2204      	movs	r2, #4
 800d5b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5b8:	2304      	movs	r3, #4
 800d5ba:	e03a      	b.n	800d632 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d004      	beq.n	800d5d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e02f      	b.n	800d632 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f7ff fb7c 	bl	800ccd0 <SDMMC_GetCommandResponse>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	461a      	mov	r2, r3
 800d5dc:	7afb      	ldrb	r3, [r7, #11]
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d001      	beq.n	800d5e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e025      	b.n	800d632 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	4a16      	ldr	r2, [pc, #88]	@ (800d644 <SDMMC_GetCmdResp6+0xec>)
 800d5ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f7ff fb7b 	bl	800ccea <SDMMC_GetResponse>
 800d5f4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d106      	bne.n	800d60e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	0c1b      	lsrs	r3, r3, #16
 800d604:	b29a      	uxth	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d60a:	2300      	movs	r3, #0
 800d60c:	e011      	b.n	800d632 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d61c:	e009      	b.n	800d632 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d62c:	e001      	b.n	800d632 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d62e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d632:	4618      	mov	r0, r3
 800d634:	3720      	adds	r7, #32
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	24000014 	.word	0x24000014
 800d640:	10624dd3 	.word	0x10624dd3
 800d644:	002000c5 	.word	0x002000c5

0800d648 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d650:	4b22      	ldr	r3, [pc, #136]	@ (800d6dc <SDMMC_GetCmdResp7+0x94>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a22      	ldr	r2, [pc, #136]	@ (800d6e0 <SDMMC_GetCmdResp7+0x98>)
 800d656:	fba2 2303 	umull	r2, r3, r2, r3
 800d65a:	0a5b      	lsrs	r3, r3, #9
 800d65c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d660:	fb02 f303 	mul.w	r3, r2, r3
 800d664:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	1e5a      	subs	r2, r3, #1
 800d66a:	60fa      	str	r2, [r7, #12]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d102      	bne.n	800d676 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d670:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d674:	e02c      	b.n	800d6d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d67a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d682:	2b00      	cmp	r3, #0
 800d684:	d0ef      	beq.n	800d666 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1ea      	bne.n	800d666 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d694:	f003 0304 	and.w	r3, r3, #4
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d004      	beq.n	800d6a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2204      	movs	r2, #4
 800d6a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6a2:	2304      	movs	r3, #4
 800d6a4:	e014      	b.n	800d6d0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6aa:	f003 0301 	and.w	r3, r3, #1
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d004      	beq.n	800d6bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e009      	b.n	800d6d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2240      	movs	r2, #64	@ 0x40
 800d6cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d6ce:	2300      	movs	r3, #0

}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr
 800d6dc:	24000014 	.word	0x24000014
 800d6e0:	10624dd3 	.word	0x10624dd3

0800d6e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d6ec:	4b11      	ldr	r3, [pc, #68]	@ (800d734 <SDMMC_GetCmdError+0x50>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a11      	ldr	r2, [pc, #68]	@ (800d738 <SDMMC_GetCmdError+0x54>)
 800d6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6f6:	0a5b      	lsrs	r3, r3, #9
 800d6f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6fc:	fb02 f303 	mul.w	r3, r2, r3
 800d700:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	1e5a      	subs	r2, r3, #1
 800d706:	60fa      	str	r2, [r7, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d102      	bne.n	800d712 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d70c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d710:	e009      	b.n	800d726 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d0f1      	beq.n	800d702 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a06      	ldr	r2, [pc, #24]	@ (800d73c <SDMMC_GetCmdError+0x58>)
 800d722:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d724:	2300      	movs	r3, #0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3714      	adds	r7, #20
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr
 800d732:	bf00      	nop
 800d734:	24000014 	.word	0x24000014
 800d738:	10624dd3 	.word	0x10624dd3
 800d73c:	002000c5 	.word	0x002000c5

0800d740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d740:	b084      	sub	sp, #16
 800d742:	b580      	push	{r7, lr}
 800d744:	b084      	sub	sp, #16
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	f107 001c 	add.w	r0, r7, #28
 800d74e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d752:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d756:	2b01      	cmp	r3, #1
 800d758:	d121      	bne.n	800d79e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d75e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	68da      	ldr	r2, [r3, #12]
 800d76a:	4b2c      	ldr	r3, [pc, #176]	@ (800d81c <USB_CoreInit+0xdc>)
 800d76c:	4013      	ands	r3, r2
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d77e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d782:	2b01      	cmp	r3, #1
 800d784:	d105      	bne.n	800d792 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f001 faf6 	bl	800ed84 <USB_CoreReset>
 800d798:	4603      	mov	r3, r0
 800d79a:	73fb      	strb	r3, [r7, #15]
 800d79c:	e01b      	b.n	800d7d6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f001 faea 	bl	800ed84 <USB_CoreReset>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d7b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	639a      	str	r2, [r3, #56]	@ 0x38
 800d7c8:	e005      	b.n	800d7d6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d7d6:	7fbb      	ldrb	r3, [r7, #30]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d116      	bne.n	800d80a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d820 <USB_CoreInit+0xe0>)
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f043 0206 	orr.w	r2, r3, #6
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	f043 0220 	orr.w	r2, r3, #32
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d816:	b004      	add	sp, #16
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	ffbdffbf 	.word	0xffbdffbf
 800d820:	03ee0000 	.word	0x03ee0000

0800d824 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d824:	b480      	push	{r7}
 800d826:	b087      	sub	sp, #28
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	4613      	mov	r3, r2
 800d830:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d832:	79fb      	ldrb	r3, [r7, #7]
 800d834:	2b02      	cmp	r3, #2
 800d836:	d165      	bne.n	800d904 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	4a41      	ldr	r2, [pc, #260]	@ (800d940 <USB_SetTurnaroundTime+0x11c>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d906      	bls.n	800d84e <USB_SetTurnaroundTime+0x2a>
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	4a40      	ldr	r2, [pc, #256]	@ (800d944 <USB_SetTurnaroundTime+0x120>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d202      	bcs.n	800d84e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d848:	230f      	movs	r3, #15
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	e062      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	4a3c      	ldr	r2, [pc, #240]	@ (800d944 <USB_SetTurnaroundTime+0x120>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d306      	bcc.n	800d864 <USB_SetTurnaroundTime+0x40>
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	4a3b      	ldr	r2, [pc, #236]	@ (800d948 <USB_SetTurnaroundTime+0x124>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d202      	bcs.n	800d864 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d85e:	230e      	movs	r3, #14
 800d860:	617b      	str	r3, [r7, #20]
 800d862:	e057      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4a38      	ldr	r2, [pc, #224]	@ (800d948 <USB_SetTurnaroundTime+0x124>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d306      	bcc.n	800d87a <USB_SetTurnaroundTime+0x56>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	4a37      	ldr	r2, [pc, #220]	@ (800d94c <USB_SetTurnaroundTime+0x128>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d202      	bcs.n	800d87a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d874:	230d      	movs	r3, #13
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e04c      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	4a33      	ldr	r2, [pc, #204]	@ (800d94c <USB_SetTurnaroundTime+0x128>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d306      	bcc.n	800d890 <USB_SetTurnaroundTime+0x6c>
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	4a32      	ldr	r2, [pc, #200]	@ (800d950 <USB_SetTurnaroundTime+0x12c>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d802      	bhi.n	800d890 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d88a:	230c      	movs	r3, #12
 800d88c:	617b      	str	r3, [r7, #20]
 800d88e:	e041      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	4a2f      	ldr	r2, [pc, #188]	@ (800d950 <USB_SetTurnaroundTime+0x12c>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d906      	bls.n	800d8a6 <USB_SetTurnaroundTime+0x82>
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	4a2e      	ldr	r2, [pc, #184]	@ (800d954 <USB_SetTurnaroundTime+0x130>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d802      	bhi.n	800d8a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d8a0:	230b      	movs	r3, #11
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	e036      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	4a2a      	ldr	r2, [pc, #168]	@ (800d954 <USB_SetTurnaroundTime+0x130>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d906      	bls.n	800d8bc <USB_SetTurnaroundTime+0x98>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	4a29      	ldr	r2, [pc, #164]	@ (800d958 <USB_SetTurnaroundTime+0x134>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d802      	bhi.n	800d8bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d8b6:	230a      	movs	r3, #10
 800d8b8:	617b      	str	r3, [r7, #20]
 800d8ba:	e02b      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	4a26      	ldr	r2, [pc, #152]	@ (800d958 <USB_SetTurnaroundTime+0x134>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d906      	bls.n	800d8d2 <USB_SetTurnaroundTime+0xae>
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	4a25      	ldr	r2, [pc, #148]	@ (800d95c <USB_SetTurnaroundTime+0x138>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d202      	bcs.n	800d8d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d8cc:	2309      	movs	r3, #9
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	e020      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	4a21      	ldr	r2, [pc, #132]	@ (800d95c <USB_SetTurnaroundTime+0x138>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d306      	bcc.n	800d8e8 <USB_SetTurnaroundTime+0xc4>
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	4a20      	ldr	r2, [pc, #128]	@ (800d960 <USB_SetTurnaroundTime+0x13c>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d802      	bhi.n	800d8e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d8e2:	2308      	movs	r3, #8
 800d8e4:	617b      	str	r3, [r7, #20]
 800d8e6:	e015      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	4a1d      	ldr	r2, [pc, #116]	@ (800d960 <USB_SetTurnaroundTime+0x13c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d906      	bls.n	800d8fe <USB_SetTurnaroundTime+0xda>
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	4a1c      	ldr	r2, [pc, #112]	@ (800d964 <USB_SetTurnaroundTime+0x140>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d202      	bcs.n	800d8fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d8f8:	2307      	movs	r3, #7
 800d8fa:	617b      	str	r3, [r7, #20]
 800d8fc:	e00a      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d8fe:	2306      	movs	r3, #6
 800d900:	617b      	str	r3, [r7, #20]
 800d902:	e007      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d904:	79fb      	ldrb	r3, [r7, #7]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d102      	bne.n	800d910 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d90a:	2309      	movs	r3, #9
 800d90c:	617b      	str	r3, [r7, #20]
 800d90e:	e001      	b.n	800d914 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d910:	2309      	movs	r3, #9
 800d912:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	68da      	ldr	r2, [r3, #12]
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	029b      	lsls	r3, r3, #10
 800d928:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d92c:	431a      	orrs	r2, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	371c      	adds	r7, #28
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	00d8acbf 	.word	0x00d8acbf
 800d944:	00e4e1c0 	.word	0x00e4e1c0
 800d948:	00f42400 	.word	0x00f42400
 800d94c:	01067380 	.word	0x01067380
 800d950:	011a499f 	.word	0x011a499f
 800d954:	01312cff 	.word	0x01312cff
 800d958:	014ca43f 	.word	0x014ca43f
 800d95c:	016e3600 	.word	0x016e3600
 800d960:	01a6ab1f 	.word	0x01a6ab1f
 800d964:	01e84800 	.word	0x01e84800

0800d968 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	f043 0201 	orr.w	r2, r3, #1
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d98a:	b480      	push	{r7}
 800d98c:	b083      	sub	sp, #12
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	f023 0201 	bic.w	r2, r3, #1
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d9c8:	78fb      	ldrb	r3, [r7, #3]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d115      	bne.n	800d9fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d9da:	200a      	movs	r0, #10
 800d9dc:	f7f4 fcd0 	bl	8002380 <HAL_Delay>
      ms += 10U;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	330a      	adds	r3, #10
 800d9e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f001 f93b 	bl	800ec62 <USB_GetMode>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d01e      	beq.n	800da30 <USB_SetCurrentMode+0x84>
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2bc7      	cmp	r3, #199	@ 0xc7
 800d9f6:	d9f0      	bls.n	800d9da <USB_SetCurrentMode+0x2e>
 800d9f8:	e01a      	b.n	800da30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d9fa:	78fb      	ldrb	r3, [r7, #3]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d115      	bne.n	800da2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800da0c:	200a      	movs	r0, #10
 800da0e:	f7f4 fcb7 	bl	8002380 <HAL_Delay>
      ms += 10U;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	330a      	adds	r3, #10
 800da16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f001 f922 	bl	800ec62 <USB_GetMode>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d005      	beq.n	800da30 <USB_SetCurrentMode+0x84>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2bc7      	cmp	r3, #199	@ 0xc7
 800da28:	d9f0      	bls.n	800da0c <USB_SetCurrentMode+0x60>
 800da2a:	e001      	b.n	800da30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800da2c:	2301      	movs	r3, #1
 800da2e:	e005      	b.n	800da3c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2bc8      	cmp	r3, #200	@ 0xc8
 800da34:	d101      	bne.n	800da3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800da36:	2301      	movs	r3, #1
 800da38:	e000      	b.n	800da3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3710      	adds	r7, #16
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da44:	b084      	sub	sp, #16
 800da46:	b580      	push	{r7, lr}
 800da48:	b086      	sub	sp, #24
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
 800da4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800da52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800da5e:	2300      	movs	r3, #0
 800da60:	613b      	str	r3, [r7, #16]
 800da62:	e009      	b.n	800da78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	3340      	adds	r3, #64	@ 0x40
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	2200      	movs	r2, #0
 800da70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	3301      	adds	r3, #1
 800da76:	613b      	str	r3, [r7, #16]
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	2b0e      	cmp	r3, #14
 800da7c:	d9f2      	bls.n	800da64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800da7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800da82:	2b00      	cmp	r3, #0
 800da84:	d11c      	bne.n	800dac0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800da94:	f043 0302 	orr.w	r3, r3, #2
 800da98:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da9e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	e005      	b.n	800dacc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dac4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dad2:	461a      	mov	r2, r3
 800dad4:	2300      	movs	r3, #0
 800dad6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dad8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d10d      	bne.n	800dafc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d104      	bne.n	800daf2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dae8:	2100      	movs	r1, #0
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f968 	bl	800ddc0 <USB_SetDevSpeed>
 800daf0:	e008      	b.n	800db04 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800daf2:	2101      	movs	r1, #1
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f963 	bl	800ddc0 <USB_SetDevSpeed>
 800dafa:	e003      	b.n	800db04 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dafc:	2103      	movs	r1, #3
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f95e 	bl	800ddc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800db04:	2110      	movs	r1, #16
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f8fa 	bl	800dd00 <USB_FlushTxFifo>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d001      	beq.n	800db16 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f924 	bl	800dd64 <USB_FlushRxFifo>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d001      	beq.n	800db26 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800db22:	2301      	movs	r3, #1
 800db24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db2c:	461a      	mov	r2, r3
 800db2e:	2300      	movs	r3, #0
 800db30:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db38:	461a      	mov	r2, r3
 800db3a:	2300      	movs	r3, #0
 800db3c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db44:	461a      	mov	r2, r3
 800db46:	2300      	movs	r3, #0
 800db48:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db4a:	2300      	movs	r3, #0
 800db4c:	613b      	str	r3, [r7, #16]
 800db4e:	e043      	b.n	800dbd8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	015a      	lsls	r2, r3, #5
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	4413      	add	r3, r2
 800db58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db66:	d118      	bne.n	800db9a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10a      	bne.n	800db84 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	015a      	lsls	r2, r3, #5
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	4413      	add	r3, r2
 800db76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db7a:	461a      	mov	r2, r3
 800db7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db80:	6013      	str	r3, [r2, #0]
 800db82:	e013      	b.n	800dbac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	015a      	lsls	r2, r3, #5
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	4413      	add	r3, r2
 800db8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db90:	461a      	mov	r2, r3
 800db92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800db96:	6013      	str	r3, [r2, #0]
 800db98:	e008      	b.n	800dbac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	015a      	lsls	r2, r3, #5
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	4413      	add	r3, r2
 800dba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dba6:	461a      	mov	r2, r3
 800dba8:	2300      	movs	r3, #0
 800dbaa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	015a      	lsls	r2, r3, #5
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbb8:	461a      	mov	r2, r3
 800dbba:	2300      	movs	r3, #0
 800dbbc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	015a      	lsls	r2, r3, #5
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dbd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	613b      	str	r3, [r7, #16]
 800dbd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dbdc:	461a      	mov	r2, r3
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d3b5      	bcc.n	800db50 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	613b      	str	r3, [r7, #16]
 800dbe8:	e043      	b.n	800dc72 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	015a      	lsls	r2, r3, #5
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dbfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc00:	d118      	bne.n	800dc34 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d10a      	bne.n	800dc1e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	015a      	lsls	r2, r3, #5
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	4413      	add	r3, r2
 800dc10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc14:	461a      	mov	r2, r3
 800dc16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dc1a:	6013      	str	r3, [r2, #0]
 800dc1c:	e013      	b.n	800dc46 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	015a      	lsls	r2, r3, #5
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	4413      	add	r3, r2
 800dc26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dc30:	6013      	str	r3, [r2, #0]
 800dc32:	e008      	b.n	800dc46 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	015a      	lsls	r2, r3, #5
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc40:	461a      	mov	r2, r3
 800dc42:	2300      	movs	r3, #0
 800dc44:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc52:	461a      	mov	r2, r3
 800dc54:	2300      	movs	r3, #0
 800dc56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	015a      	lsls	r2, r3, #5
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc64:	461a      	mov	r2, r3
 800dc66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dc6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	613b      	str	r3, [r7, #16]
 800dc72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dc76:	461a      	mov	r2, r3
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d3b5      	bcc.n	800dbea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc84:	691b      	ldr	r3, [r3, #16]
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc90:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dc9e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dca0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d105      	bne.n	800dcb4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	f043 0210 	orr.w	r2, r3, #16
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	699a      	ldr	r2, [r3, #24]
 800dcb8:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf8 <USB_DevInit+0x2b4>)
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dcc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d005      	beq.n	800dcd4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	699b      	ldr	r3, [r3, #24]
 800dccc:	f043 0208 	orr.w	r2, r3, #8
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dcd4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d105      	bne.n	800dce8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	699a      	ldr	r2, [r3, #24]
 800dce0:	4b06      	ldr	r3, [pc, #24]	@ (800dcfc <USB_DevInit+0x2b8>)
 800dce2:	4313      	orrs	r3, r2
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dce8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3718      	adds	r7, #24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcf4:	b004      	add	sp, #16
 800dcf6:	4770      	bx	lr
 800dcf8:	803c3800 	.word	0x803c3800
 800dcfc:	40000004 	.word	0x40000004

0800dd00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3301      	adds	r3, #1
 800dd12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dd1a:	d901      	bls.n	800dd20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dd1c:	2303      	movs	r3, #3
 800dd1e:	e01b      	b.n	800dd58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	daf2      	bge.n	800dd0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	019b      	lsls	r3, r3, #6
 800dd30:	f043 0220 	orr.w	r2, r3, #32
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dd44:	d901      	bls.n	800dd4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dd46:	2303      	movs	r3, #3
 800dd48:	e006      	b.n	800dd58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	691b      	ldr	r3, [r3, #16]
 800dd4e:	f003 0320 	and.w	r3, r3, #32
 800dd52:	2b20      	cmp	r3, #32
 800dd54:	d0f0      	beq.n	800dd38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	3301      	adds	r3, #1
 800dd74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dd7c:	d901      	bls.n	800dd82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	e018      	b.n	800ddb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	daf2      	bge.n	800dd70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2210      	movs	r2, #16
 800dd92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	3301      	adds	r3, #1
 800dd98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dda0:	d901      	bls.n	800dda6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dda2:	2303      	movs	r3, #3
 800dda4:	e006      	b.n	800ddb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	f003 0310 	and.w	r3, r3, #16
 800ddae:	2b10      	cmp	r3, #16
 800ddb0:	d0f0      	beq.n	800dd94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ddb2:	2300      	movs	r3, #0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3714      	adds	r7, #20
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	78fb      	ldrb	r3, [r7, #3]
 800ddda:	68f9      	ldr	r1, [r7, #12]
 800dddc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dde0:	4313      	orrs	r3, r2
 800dde2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b087      	sub	sp, #28
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	f003 0306 	and.w	r3, r3, #6
 800de0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d102      	bne.n	800de18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800de12:	2300      	movs	r3, #0
 800de14:	75fb      	strb	r3, [r7, #23]
 800de16:	e00a      	b.n	800de2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d002      	beq.n	800de24 <USB_GetDevSpeed+0x32>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2b06      	cmp	r3, #6
 800de22:	d102      	bne.n	800de2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800de24:	2302      	movs	r3, #2
 800de26:	75fb      	strb	r3, [r7, #23]
 800de28:	e001      	b.n	800de2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800de2a:	230f      	movs	r3, #15
 800de2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800de2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de30:	4618      	mov	r0, r3
 800de32:	371c      	adds	r7, #28
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	785b      	ldrb	r3, [r3, #1]
 800de54:	2b01      	cmp	r3, #1
 800de56:	d139      	bne.n	800decc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de5e:	69da      	ldr	r2, [r3, #28]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	f003 030f 	and.w	r3, r3, #15
 800de68:	2101      	movs	r1, #1
 800de6a:	fa01 f303 	lsl.w	r3, r1, r3
 800de6e:	b29b      	uxth	r3, r3
 800de70:	68f9      	ldr	r1, [r7, #12]
 800de72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800de76:	4313      	orrs	r3, r2
 800de78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	015a      	lsls	r2, r3, #5
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	4413      	add	r3, r2
 800de82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d153      	bne.n	800df38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	015a      	lsls	r2, r3, #5
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	4413      	add	r3, r2
 800de98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	791b      	ldrb	r3, [r3, #4]
 800deaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800deac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	059b      	lsls	r3, r3, #22
 800deb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800deb4:	431a      	orrs	r2, r3
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	0159      	lsls	r1, r3, #5
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	440b      	add	r3, r1
 800debe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dec2:	4619      	mov	r1, r3
 800dec4:	4b20      	ldr	r3, [pc, #128]	@ (800df48 <USB_ActivateEndpoint+0x10c>)
 800dec6:	4313      	orrs	r3, r2
 800dec8:	600b      	str	r3, [r1, #0]
 800deca:	e035      	b.n	800df38 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ded2:	69da      	ldr	r2, [r3, #28]
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	f003 030f 	and.w	r3, r3, #15
 800dedc:	2101      	movs	r1, #1
 800dede:	fa01 f303 	lsl.w	r3, r1, r3
 800dee2:	041b      	lsls	r3, r3, #16
 800dee4:	68f9      	ldr	r1, [r7, #12]
 800dee6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800deea:	4313      	orrs	r3, r2
 800deec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	015a      	lsls	r2, r3, #5
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	4413      	add	r3, r2
 800def6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800df00:	2b00      	cmp	r3, #0
 800df02:	d119      	bne.n	800df38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	015a      	lsls	r2, r3, #5
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4413      	add	r3, r2
 800df0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	791b      	ldrb	r3, [r3, #4]
 800df1e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800df20:	430b      	orrs	r3, r1
 800df22:	431a      	orrs	r2, r3
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	0159      	lsls	r1, r3, #5
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	440b      	add	r3, r1
 800df2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df30:	4619      	mov	r1, r3
 800df32:	4b05      	ldr	r3, [pc, #20]	@ (800df48 <USB_ActivateEndpoint+0x10c>)
 800df34:	4313      	orrs	r3, r2
 800df36:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3714      	adds	r7, #20
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr
 800df46:	bf00      	nop
 800df48:	10008000 	.word	0x10008000

0800df4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	785b      	ldrb	r3, [r3, #1]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d161      	bne.n	800e02c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	015a      	lsls	r2, r3, #5
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	4413      	add	r3, r2
 800df70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800df7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df7e:	d11f      	bne.n	800dfc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	015a      	lsls	r2, r3, #5
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	4413      	add	r3, r2
 800df88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	0151      	lsls	r1, r2, #5
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	440a      	add	r2, r1
 800df96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800df9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	015a      	lsls	r2, r3, #5
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68ba      	ldr	r2, [r7, #8]
 800dfb0:	0151      	lsls	r1, r2, #5
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	440a      	add	r2, r1
 800dfb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dfbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	f003 030f 	and.w	r3, r3, #15
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	fa01 f303 	lsl.w	r3, r1, r3
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	43db      	mvns	r3, r3
 800dfda:	68f9      	ldr	r1, [r7, #12]
 800dfdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dfe0:	4013      	ands	r3, r2
 800dfe2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfea:	69da      	ldr	r2, [r3, #28]
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	f003 030f 	and.w	r3, r3, #15
 800dff4:	2101      	movs	r1, #1
 800dff6:	fa01 f303 	lsl.w	r3, r1, r3
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	43db      	mvns	r3, r3
 800dffe:	68f9      	ldr	r1, [r7, #12]
 800e000:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e004:	4013      	ands	r3, r2
 800e006:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	015a      	lsls	r2, r3, #5
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	4413      	add	r3, r2
 800e010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	0159      	lsls	r1, r3, #5
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	440b      	add	r3, r1
 800e01e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e022:	4619      	mov	r1, r3
 800e024:	4b35      	ldr	r3, [pc, #212]	@ (800e0fc <USB_DeactivateEndpoint+0x1b0>)
 800e026:	4013      	ands	r3, r2
 800e028:	600b      	str	r3, [r1, #0]
 800e02a:	e060      	b.n	800e0ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	015a      	lsls	r2, r3, #5
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	4413      	add	r3, r2
 800e034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e03e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e042:	d11f      	bne.n	800e084 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	015a      	lsls	r2, r3, #5
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	4413      	add	r3, r2
 800e04c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	0151      	lsls	r1, r2, #5
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	440a      	add	r2, r1
 800e05a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e05e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e062:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	015a      	lsls	r2, r3, #5
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	4413      	add	r3, r2
 800e06c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	0151      	lsls	r1, r2, #5
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	440a      	add	r2, r1
 800e07a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e07e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e082:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e08a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	f003 030f 	and.w	r3, r3, #15
 800e094:	2101      	movs	r1, #1
 800e096:	fa01 f303 	lsl.w	r3, r1, r3
 800e09a:	041b      	lsls	r3, r3, #16
 800e09c:	43db      	mvns	r3, r3
 800e09e:	68f9      	ldr	r1, [r7, #12]
 800e0a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0ae:	69da      	ldr	r2, [r3, #28]
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	f003 030f 	and.w	r3, r3, #15
 800e0b8:	2101      	movs	r1, #1
 800e0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800e0be:	041b      	lsls	r3, r3, #16
 800e0c0:	43db      	mvns	r3, r3
 800e0c2:	68f9      	ldr	r1, [r7, #12]
 800e0c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0c8:	4013      	ands	r3, r2
 800e0ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	015a      	lsls	r2, r3, #5
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	0159      	lsls	r1, r3, #5
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	440b      	add	r3, r1
 800e0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4b05      	ldr	r3, [pc, #20]	@ (800e100 <USB_DeactivateEndpoint+0x1b4>)
 800e0ea:	4013      	ands	r3, r2
 800e0ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr
 800e0fc:	ec337800 	.word	0xec337800
 800e100:	eff37800 	.word	0xeff37800

0800e104 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b08a      	sub	sp, #40	@ 0x28
 800e108:	af02      	add	r7, sp, #8
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	4613      	mov	r3, r2
 800e110:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	785b      	ldrb	r3, [r3, #1]
 800e120:	2b01      	cmp	r3, #1
 800e122:	f040 8181 	bne.w	800e428 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d132      	bne.n	800e194 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	015a      	lsls	r2, r3, #5
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	4413      	add	r3, r2
 800e136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e13a:	691a      	ldr	r2, [r3, #16]
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	0159      	lsls	r1, r3, #5
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	440b      	add	r3, r1
 800e144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e148:	4619      	mov	r1, r3
 800e14a:	4ba5      	ldr	r3, [pc, #660]	@ (800e3e0 <USB_EPStartXfer+0x2dc>)
 800e14c:	4013      	ands	r3, r2
 800e14e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	015a      	lsls	r2, r3, #5
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	4413      	add	r3, r2
 800e158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e15c:	691b      	ldr	r3, [r3, #16]
 800e15e:	69ba      	ldr	r2, [r7, #24]
 800e160:	0151      	lsls	r1, r2, #5
 800e162:	69fa      	ldr	r2, [r7, #28]
 800e164:	440a      	add	r2, r1
 800e166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e16a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e16e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	015a      	lsls	r2, r3, #5
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	4413      	add	r3, r2
 800e178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e17c:	691a      	ldr	r2, [r3, #16]
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	0159      	lsls	r1, r3, #5
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	440b      	add	r3, r1
 800e186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e18a:	4619      	mov	r1, r3
 800e18c:	4b95      	ldr	r3, [pc, #596]	@ (800e3e4 <USB_EPStartXfer+0x2e0>)
 800e18e:	4013      	ands	r3, r2
 800e190:	610b      	str	r3, [r1, #16]
 800e192:	e092      	b.n	800e2ba <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	015a      	lsls	r2, r3, #5
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	4413      	add	r3, r2
 800e19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1a0:	691a      	ldr	r2, [r3, #16]
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	0159      	lsls	r1, r3, #5
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	440b      	add	r3, r1
 800e1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4b8c      	ldr	r3, [pc, #560]	@ (800e3e4 <USB_EPStartXfer+0x2e0>)
 800e1b2:	4013      	ands	r3, r2
 800e1b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	015a      	lsls	r2, r3, #5
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	4413      	add	r3, r2
 800e1be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1c2:	691a      	ldr	r2, [r3, #16]
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	0159      	lsls	r1, r3, #5
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	440b      	add	r3, r1
 800e1cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4b83      	ldr	r3, [pc, #524]	@ (800e3e0 <USB_EPStartXfer+0x2dc>)
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d11a      	bne.n	800e214 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	691a      	ldr	r2, [r3, #16]
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d903      	bls.n	800e1f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	689a      	ldr	r2, [r3, #8]
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	015a      	lsls	r2, r3, #5
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1fe:	691b      	ldr	r3, [r3, #16]
 800e200:	69ba      	ldr	r2, [r7, #24]
 800e202:	0151      	lsls	r1, r2, #5
 800e204:	69fa      	ldr	r2, [r7, #28]
 800e206:	440a      	add	r2, r1
 800e208:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e20c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e210:	6113      	str	r3, [r2, #16]
 800e212:	e01b      	b.n	800e24c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	015a      	lsls	r2, r3, #5
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	4413      	add	r3, r2
 800e21c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e220:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	6919      	ldr	r1, [r3, #16]
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	440b      	add	r3, r1
 800e22c:	1e59      	subs	r1, r3, #1
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	fbb1 f3f3 	udiv	r3, r1, r3
 800e236:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e238:	4b6b      	ldr	r3, [pc, #428]	@ (800e3e8 <USB_EPStartXfer+0x2e4>)
 800e23a:	400b      	ands	r3, r1
 800e23c:	69b9      	ldr	r1, [r7, #24]
 800e23e:	0148      	lsls	r0, r1, #5
 800e240:	69f9      	ldr	r1, [r7, #28]
 800e242:	4401      	add	r1, r0
 800e244:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e248:	4313      	orrs	r3, r2
 800e24a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	015a      	lsls	r2, r3, #5
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	4413      	add	r3, r2
 800e254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e258:	691a      	ldr	r2, [r3, #16]
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	691b      	ldr	r3, [r3, #16]
 800e25e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e262:	69b9      	ldr	r1, [r7, #24]
 800e264:	0148      	lsls	r0, r1, #5
 800e266:	69f9      	ldr	r1, [r7, #28]
 800e268:	4401      	add	r1, r0
 800e26a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e26e:	4313      	orrs	r3, r2
 800e270:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	791b      	ldrb	r3, [r3, #4]
 800e276:	2b01      	cmp	r3, #1
 800e278:	d11f      	bne.n	800e2ba <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	015a      	lsls	r2, r3, #5
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	4413      	add	r3, r2
 800e282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	69ba      	ldr	r2, [r7, #24]
 800e28a:	0151      	lsls	r1, r2, #5
 800e28c:	69fa      	ldr	r2, [r7, #28]
 800e28e:	440a      	add	r2, r1
 800e290:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e294:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e298:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	015a      	lsls	r2, r3, #5
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	69ba      	ldr	r2, [r7, #24]
 800e2aa:	0151      	lsls	r1, r2, #5
 800e2ac:	69fa      	ldr	r2, [r7, #28]
 800e2ae:	440a      	add	r2, r1
 800e2b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e2b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d14b      	bne.n	800e358 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	69db      	ldr	r3, [r3, #28]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d009      	beq.n	800e2dc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	015a      	lsls	r2, r3, #5
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	69db      	ldr	r3, [r3, #28]
 800e2da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	791b      	ldrb	r3, [r3, #4]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d128      	bne.n	800e336 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d110      	bne.n	800e316 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	015a      	lsls	r2, r3, #5
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	69ba      	ldr	r2, [r7, #24]
 800e304:	0151      	lsls	r1, r2, #5
 800e306:	69fa      	ldr	r2, [r7, #28]
 800e308:	440a      	add	r2, r1
 800e30a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e30e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e312:	6013      	str	r3, [r2, #0]
 800e314:	e00f      	b.n	800e336 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	015a      	lsls	r2, r3, #5
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	4413      	add	r3, r2
 800e31e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	69ba      	ldr	r2, [r7, #24]
 800e326:	0151      	lsls	r1, r2, #5
 800e328:	69fa      	ldr	r2, [r7, #28]
 800e32a:	440a      	add	r2, r1
 800e32c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e334:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	015a      	lsls	r2, r3, #5
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	4413      	add	r3, r2
 800e33e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	69ba      	ldr	r2, [r7, #24]
 800e346:	0151      	lsls	r1, r2, #5
 800e348:	69fa      	ldr	r2, [r7, #28]
 800e34a:	440a      	add	r2, r1
 800e34c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e350:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e354:	6013      	str	r3, [r2, #0]
 800e356:	e16a      	b.n	800e62e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	015a      	lsls	r2, r3, #5
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	4413      	add	r3, r2
 800e360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	69ba      	ldr	r2, [r7, #24]
 800e368:	0151      	lsls	r1, r2, #5
 800e36a:	69fa      	ldr	r2, [r7, #28]
 800e36c:	440a      	add	r2, r1
 800e36e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e372:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e376:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	791b      	ldrb	r3, [r3, #4]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d015      	beq.n	800e3ac <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	f000 8152 	beq.w	800e62e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	f003 030f 	and.w	r3, r3, #15
 800e39a:	2101      	movs	r1, #1
 800e39c:	fa01 f303 	lsl.w	r3, r1, r3
 800e3a0:	69f9      	ldr	r1, [r7, #28]
 800e3a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	634b      	str	r3, [r1, #52]	@ 0x34
 800e3aa:	e140      	b.n	800e62e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d117      	bne.n	800e3ec <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	015a      	lsls	r2, r3, #5
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	69ba      	ldr	r2, [r7, #24]
 800e3cc:	0151      	lsls	r1, r2, #5
 800e3ce:	69fa      	ldr	r2, [r7, #28]
 800e3d0:	440a      	add	r2, r1
 800e3d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	e016      	b.n	800e40c <USB_EPStartXfer+0x308>
 800e3de:	bf00      	nop
 800e3e0:	e007ffff 	.word	0xe007ffff
 800e3e4:	fff80000 	.word	0xfff80000
 800e3e8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	015a      	lsls	r2, r3, #5
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	69ba      	ldr	r2, [r7, #24]
 800e3fc:	0151      	lsls	r1, r2, #5
 800e3fe:	69fa      	ldr	r2, [r7, #28]
 800e400:	440a      	add	r2, r1
 800e402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e40a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	68d9      	ldr	r1, [r3, #12]
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	781a      	ldrb	r2, [r3, #0]
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	b298      	uxth	r0, r3
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	4603      	mov	r3, r0
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f000 f9b9 	bl	800e798 <USB_WritePacket>
 800e426:	e102      	b.n	800e62e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	015a      	lsls	r2, r3, #5
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	4413      	add	r3, r2
 800e430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e434:	691a      	ldr	r2, [r3, #16]
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	0159      	lsls	r1, r3, #5
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	440b      	add	r3, r1
 800e43e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e442:	4619      	mov	r1, r3
 800e444:	4b7c      	ldr	r3, [pc, #496]	@ (800e638 <USB_EPStartXfer+0x534>)
 800e446:	4013      	ands	r3, r2
 800e448:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	015a      	lsls	r2, r3, #5
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	4413      	add	r3, r2
 800e452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e456:	691a      	ldr	r2, [r3, #16]
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	0159      	lsls	r1, r3, #5
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	440b      	add	r3, r1
 800e460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e464:	4619      	mov	r1, r3
 800e466:	4b75      	ldr	r3, [pc, #468]	@ (800e63c <USB_EPStartXfer+0x538>)
 800e468:	4013      	ands	r3, r2
 800e46a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d12f      	bne.n	800e4d2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d003      	beq.n	800e482 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	689a      	ldr	r2, [r3, #8]
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	689a      	ldr	r2, [r3, #8]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	015a      	lsls	r2, r3, #5
 800e48e:	69fb      	ldr	r3, [r7, #28]
 800e490:	4413      	add	r3, r2
 800e492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e496:	691a      	ldr	r2, [r3, #16]
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	6a1b      	ldr	r3, [r3, #32]
 800e49c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4a0:	69b9      	ldr	r1, [r7, #24]
 800e4a2:	0148      	lsls	r0, r1, #5
 800e4a4:	69f9      	ldr	r1, [r7, #28]
 800e4a6:	4401      	add	r1, r0
 800e4a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	015a      	lsls	r2, r3, #5
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	69ba      	ldr	r2, [r7, #24]
 800e4c0:	0151      	lsls	r1, r2, #5
 800e4c2:	69fa      	ldr	r2, [r7, #28]
 800e4c4:	440a      	add	r2, r1
 800e4c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e4ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e4ce:	6113      	str	r3, [r2, #16]
 800e4d0:	e05f      	b.n	800e592 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	691b      	ldr	r3, [r3, #16]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d123      	bne.n	800e522 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	015a      	lsls	r2, r3, #5
 800e4de:	69fb      	ldr	r3, [r7, #28]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4e6:	691a      	ldr	r2, [r3, #16]
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4f0:	69b9      	ldr	r1, [r7, #24]
 800e4f2:	0148      	lsls	r0, r1, #5
 800e4f4:	69f9      	ldr	r1, [r7, #28]
 800e4f6:	4401      	add	r1, r0
 800e4f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	015a      	lsls	r2, r3, #5
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	4413      	add	r3, r2
 800e508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e50c:	691b      	ldr	r3, [r3, #16]
 800e50e:	69ba      	ldr	r2, [r7, #24]
 800e510:	0151      	lsls	r1, r2, #5
 800e512:	69fa      	ldr	r2, [r7, #28]
 800e514:	440a      	add	r2, r1
 800e516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e51a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e51e:	6113      	str	r3, [r2, #16]
 800e520:	e037      	b.n	800e592 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	691a      	ldr	r2, [r3, #16]
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	4413      	add	r3, r2
 800e52c:	1e5a      	subs	r2, r3, #1
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	fbb2 f3f3 	udiv	r3, r2, r3
 800e536:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	8afa      	ldrh	r2, [r7, #22]
 800e53e:	fb03 f202 	mul.w	r2, r3, r2
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	015a      	lsls	r2, r3, #5
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	4413      	add	r3, r2
 800e54e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e552:	691a      	ldr	r2, [r3, #16]
 800e554:	8afb      	ldrh	r3, [r7, #22]
 800e556:	04d9      	lsls	r1, r3, #19
 800e558:	4b39      	ldr	r3, [pc, #228]	@ (800e640 <USB_EPStartXfer+0x53c>)
 800e55a:	400b      	ands	r3, r1
 800e55c:	69b9      	ldr	r1, [r7, #24]
 800e55e:	0148      	lsls	r0, r1, #5
 800e560:	69f9      	ldr	r1, [r7, #28]
 800e562:	4401      	add	r1, r0
 800e564:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e568:	4313      	orrs	r3, r2
 800e56a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	015a      	lsls	r2, r3, #5
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	4413      	add	r3, r2
 800e574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e578:	691a      	ldr	r2, [r3, #16]
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	6a1b      	ldr	r3, [r3, #32]
 800e57e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e582:	69b9      	ldr	r1, [r7, #24]
 800e584:	0148      	lsls	r0, r1, #5
 800e586:	69f9      	ldr	r1, [r7, #28]
 800e588:	4401      	add	r1, r0
 800e58a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e58e:	4313      	orrs	r3, r2
 800e590:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e592:	79fb      	ldrb	r3, [r7, #7]
 800e594:	2b01      	cmp	r3, #1
 800e596:	d10d      	bne.n	800e5b4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d009      	beq.n	800e5b4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	68d9      	ldr	r1, [r3, #12]
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	015a      	lsls	r2, r3, #5
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5b0:	460a      	mov	r2, r1
 800e5b2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	791b      	ldrb	r3, [r3, #4]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d128      	bne.n	800e60e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5c2:	689b      	ldr	r3, [r3, #8]
 800e5c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d110      	bne.n	800e5ee <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	015a      	lsls	r2, r3, #5
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	0151      	lsls	r1, r2, #5
 800e5de:	69fa      	ldr	r2, [r7, #28]
 800e5e0:	440a      	add	r2, r1
 800e5e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e5ea:	6013      	str	r3, [r2, #0]
 800e5ec:	e00f      	b.n	800e60e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	69ba      	ldr	r2, [r7, #24]
 800e5fe:	0151      	lsls	r1, r2, #5
 800e600:	69fa      	ldr	r2, [r7, #28]
 800e602:	440a      	add	r2, r1
 800e604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e60c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	015a      	lsls	r2, r3, #5
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	4413      	add	r3, r2
 800e616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	69ba      	ldr	r2, [r7, #24]
 800e61e:	0151      	lsls	r1, r2, #5
 800e620:	69fa      	ldr	r2, [r7, #28]
 800e622:	440a      	add	r2, r1
 800e624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e628:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e62c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3720      	adds	r7, #32
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	fff80000 	.word	0xfff80000
 800e63c:	e007ffff 	.word	0xe007ffff
 800e640:	1ff80000 	.word	0x1ff80000

0800e644 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e644:	b480      	push	{r7}
 800e646:	b087      	sub	sp, #28
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e64e:	2300      	movs	r3, #0
 800e650:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	785b      	ldrb	r3, [r3, #1]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d14a      	bne.n	800e6f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	015a      	lsls	r2, r3, #5
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	4413      	add	r3, r2
 800e66c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e67a:	f040 8086 	bne.w	800e78a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	015a      	lsls	r2, r3, #5
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	4413      	add	r3, r2
 800e688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	7812      	ldrb	r2, [r2, #0]
 800e692:	0151      	lsls	r1, r2, #5
 800e694:	693a      	ldr	r2, [r7, #16]
 800e696:	440a      	add	r2, r1
 800e698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e69c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e6a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	015a      	lsls	r2, r3, #5
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	683a      	ldr	r2, [r7, #0]
 800e6b4:	7812      	ldrb	r2, [r2, #0]
 800e6b6:	0151      	lsls	r1, r2, #5
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	440a      	add	r2, r1
 800e6bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e6c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d902      	bls.n	800e6dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	75fb      	strb	r3, [r7, #23]
          break;
 800e6da:	e056      	b.n	800e78a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	015a      	lsls	r2, r3, #5
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6f4:	d0e7      	beq.n	800e6c6 <USB_EPStopXfer+0x82>
 800e6f6:	e048      	b.n	800e78a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	015a      	lsls	r2, r3, #5
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	4413      	add	r3, r2
 800e702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e70c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e710:	d13b      	bne.n	800e78a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	015a      	lsls	r2, r3, #5
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	4413      	add	r3, r2
 800e71c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	683a      	ldr	r2, [r7, #0]
 800e724:	7812      	ldrb	r2, [r2, #0]
 800e726:	0151      	lsls	r1, r2, #5
 800e728:	693a      	ldr	r2, [r7, #16]
 800e72a:	440a      	add	r2, r1
 800e72c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e734:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	015a      	lsls	r2, r3, #5
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	4413      	add	r3, r2
 800e740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	683a      	ldr	r2, [r7, #0]
 800e748:	7812      	ldrb	r2, [r2, #0]
 800e74a:	0151      	lsls	r1, r2, #5
 800e74c:	693a      	ldr	r2, [r7, #16]
 800e74e:	440a      	add	r2, r1
 800e750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e754:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e758:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	3301      	adds	r3, #1
 800e75e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e766:	4293      	cmp	r3, r2
 800e768:	d902      	bls.n	800e770 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	75fb      	strb	r3, [r7, #23]
          break;
 800e76e:	e00c      	b.n	800e78a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	015a      	lsls	r2, r3, #5
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	4413      	add	r3, r2
 800e77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e788:	d0e7      	beq.n	800e75a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	371c      	adds	r7, #28
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e798:	b480      	push	{r7}
 800e79a:	b089      	sub	sp, #36	@ 0x24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	71fb      	strb	r3, [r7, #7]
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e7b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d123      	bne.n	800e806 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e7be:	88bb      	ldrh	r3, [r7, #4]
 800e7c0:	3303      	adds	r3, #3
 800e7c2:	089b      	lsrs	r3, r3, #2
 800e7c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	61bb      	str	r3, [r7, #24]
 800e7ca:	e018      	b.n	800e7fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e7cc:	79fb      	ldrb	r3, [r7, #7]
 800e7ce:	031a      	lsls	r2, r3, #12
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e7d8:	461a      	mov	r2, r3
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	61bb      	str	r3, [r7, #24]
 800e7fe:	69ba      	ldr	r2, [r7, #24]
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	429a      	cmp	r2, r3
 800e804:	d3e2      	bcc.n	800e7cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3724      	adds	r7, #36	@ 0x24
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e814:	b480      	push	{r7}
 800e816:	b08b      	sub	sp, #44	@ 0x2c
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	4613      	mov	r3, r2
 800e820:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e82a:	88fb      	ldrh	r3, [r7, #6]
 800e82c:	089b      	lsrs	r3, r3, #2
 800e82e:	b29b      	uxth	r3, r3
 800e830:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e832:	88fb      	ldrh	r3, [r7, #6]
 800e834:	f003 0303 	and.w	r3, r3, #3
 800e838:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e83a:	2300      	movs	r3, #0
 800e83c:	623b      	str	r3, [r7, #32]
 800e83e:	e014      	b.n	800e86a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e84a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e84e:	3301      	adds	r3, #1
 800e850:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e854:	3301      	adds	r3, #1
 800e856:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e85a:	3301      	adds	r3, #1
 800e85c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e860:	3301      	adds	r3, #1
 800e862:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e864:	6a3b      	ldr	r3, [r7, #32]
 800e866:	3301      	adds	r3, #1
 800e868:	623b      	str	r3, [r7, #32]
 800e86a:	6a3a      	ldr	r2, [r7, #32]
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d3e6      	bcc.n	800e840 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e872:	8bfb      	ldrh	r3, [r7, #30]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d01e      	beq.n	800e8b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e878:	2300      	movs	r3, #0
 800e87a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e882:	461a      	mov	r2, r3
 800e884:	f107 0310 	add.w	r3, r7, #16
 800e888:	6812      	ldr	r2, [r2, #0]
 800e88a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	6a3b      	ldr	r3, [r7, #32]
 800e890:	b2db      	uxtb	r3, r3
 800e892:	00db      	lsls	r3, r3, #3
 800e894:	fa22 f303 	lsr.w	r3, r2, r3
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89c:	701a      	strb	r2, [r3, #0]
      i++;
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e8aa:	8bfb      	ldrh	r3, [r7, #30]
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e8b0:	8bfb      	ldrh	r3, [r7, #30]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1ea      	bne.n	800e88c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	372c      	adds	r7, #44	@ 0x2c
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	785b      	ldrb	r3, [r3, #1]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d12c      	bne.n	800e93a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	015a      	lsls	r2, r3, #5
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	db12      	blt.n	800e918 <USB_EPSetStall+0x54>
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00f      	beq.n	800e918 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	015a      	lsls	r2, r3, #5
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	4413      	add	r3, r2
 800e900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68ba      	ldr	r2, [r7, #8]
 800e908:	0151      	lsls	r1, r2, #5
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	440a      	add	r2, r1
 800e90e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e916:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	015a      	lsls	r2, r3, #5
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	4413      	add	r3, r2
 800e920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	0151      	lsls	r1, r2, #5
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	440a      	add	r2, r1
 800e92e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	e02b      	b.n	800e992 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	015a      	lsls	r2, r3, #5
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	4413      	add	r3, r2
 800e942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	db12      	blt.n	800e972 <USB_EPSetStall+0xae>
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00f      	beq.n	800e972 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	015a      	lsls	r2, r3, #5
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	4413      	add	r3, r2
 800e95a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68ba      	ldr	r2, [r7, #8]
 800e962:	0151      	lsls	r1, r2, #5
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	440a      	add	r2, r1
 800e968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e96c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e970:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	015a      	lsls	r2, r3, #5
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	4413      	add	r3, r2
 800e97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	0151      	lsls	r1, r2, #5
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	440a      	add	r2, r1
 800e988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e98c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e990:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	3714      	adds	r7, #20
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	785b      	ldrb	r3, [r3, #1]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d128      	bne.n	800ea0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	015a      	lsls	r2, r3, #5
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	0151      	lsls	r1, r2, #5
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	440a      	add	r2, r1
 800e9d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e9da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	791b      	ldrb	r3, [r3, #4]
 800e9e0:	2b03      	cmp	r3, #3
 800e9e2:	d003      	beq.n	800e9ec <USB_EPClearStall+0x4c>
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	791b      	ldrb	r3, [r3, #4]
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	d138      	bne.n	800ea5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	015a      	lsls	r2, r3, #5
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	0151      	lsls	r1, r2, #5
 800e9fe:	68fa      	ldr	r2, [r7, #12]
 800ea00:	440a      	add	r2, r1
 800ea02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea0a:	6013      	str	r3, [r2, #0]
 800ea0c:	e027      	b.n	800ea5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	015a      	lsls	r2, r3, #5
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	4413      	add	r3, r2
 800ea16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	68ba      	ldr	r2, [r7, #8]
 800ea1e:	0151      	lsls	r1, r2, #5
 800ea20:	68fa      	ldr	r2, [r7, #12]
 800ea22:	440a      	add	r2, r1
 800ea24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ea2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	791b      	ldrb	r3, [r3, #4]
 800ea32:	2b03      	cmp	r3, #3
 800ea34:	d003      	beq.n	800ea3e <USB_EPClearStall+0x9e>
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	791b      	ldrb	r3, [r3, #4]
 800ea3a:	2b02      	cmp	r3, #2
 800ea3c:	d10f      	bne.n	800ea5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	015a      	lsls	r2, r3, #5
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	4413      	add	r3, r2
 800ea46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	0151      	lsls	r1, r2, #5
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	440a      	add	r2, r1
 800ea54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	460b      	mov	r3, r1
 800ea76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ea8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ea8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	78fb      	ldrb	r3, [r7, #3]
 800ea9a:	011b      	lsls	r3, r3, #4
 800ea9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800eaa0:	68f9      	ldr	r1, [r7, #12]
 800eaa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3714      	adds	r7, #20
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ead2:	f023 0303 	bic.w	r3, r3, #3
 800ead6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eae6:	f023 0302 	bic.w	r3, r3, #2
 800eaea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3714      	adds	r7, #20
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr

0800eafa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800eafa:	b480      	push	{r7}
 800eafc:	b085      	sub	sp, #20
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eb14:	f023 0303 	bic.w	r3, r3, #3
 800eb18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eb28:	f043 0302 	orr.w	r3, r3, #2
 800eb2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	695b      	ldr	r3, [r3, #20]
 800eb48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	4013      	ands	r3, r2
 800eb52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eb54:	68fb      	ldr	r3, [r7, #12]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800eb62:	b480      	push	{r7}
 800eb64:	b085      	sub	sp, #20
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb7e:	69db      	ldr	r3, [r3, #28]
 800eb80:	68ba      	ldr	r2, [r7, #8]
 800eb82:	4013      	ands	r3, r2
 800eb84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	0c1b      	lsrs	r3, r3, #16
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr

0800eb96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800eb96:	b480      	push	{r7}
 800eb98:	b085      	sub	sp, #20
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eba8:	699b      	ldr	r3, [r3, #24]
 800ebaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebb2:	69db      	ldr	r3, [r3, #28]
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	b29b      	uxth	r3, r3
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ebca:	b480      	push	{r7}
 800ebcc:	b085      	sub	sp, #20
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ebda:	78fb      	ldrb	r3, [r7, #3]
 800ebdc:	015a      	lsls	r2, r3, #5
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	68ba      	ldr	r2, [r7, #8]
 800ebf4:	4013      	ands	r3, r2
 800ebf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ebf8:	68bb      	ldr	r3, [r7, #8]
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3714      	adds	r7, #20
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec06:	b480      	push	{r7}
 800ec08:	b087      	sub	sp, #28
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
 800ec0e:	460b      	mov	r3, r1
 800ec10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec1c:	691b      	ldr	r3, [r3, #16]
 800ec1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ec2a:	78fb      	ldrb	r3, [r7, #3]
 800ec2c:	f003 030f 	and.w	r3, r3, #15
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	fa22 f303 	lsr.w	r3, r2, r3
 800ec36:	01db      	lsls	r3, r3, #7
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	693a      	ldr	r2, [r7, #16]
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ec40:	78fb      	ldrb	r3, [r7, #3]
 800ec42:	015a      	lsls	r2, r3, #5
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	4413      	add	r3, r2
 800ec48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	693a      	ldr	r2, [r7, #16]
 800ec50:	4013      	ands	r3, r2
 800ec52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec54:	68bb      	ldr	r3, [r7, #8]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	371c      	adds	r7, #28
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr

0800ec62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ec62:	b480      	push	{r7}
 800ec64:	b083      	sub	sp, #12
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	695b      	ldr	r3, [r3, #20]
 800ec6e:	f003 0301 	and.w	r3, r3, #1
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	370c      	adds	r7, #12
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr
	...

0800ec80 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	4b09      	ldr	r3, [pc, #36]	@ (800ecc4 <USB_ActivateSetup+0x44>)
 800ec9e:	4013      	ands	r3, r2
 800eca0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ecb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ecb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ecb6:	2300      	movs	r3, #0
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3714      	adds	r7, #20
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr
 800ecc4:	fffff800 	.word	0xfffff800

0800ecc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b087      	sub	sp, #28
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	333c      	adds	r3, #60	@ 0x3c
 800ecde:	3304      	adds	r3, #4
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	4a26      	ldr	r2, [pc, #152]	@ (800ed80 <USB_EP0_OutStart+0xb8>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d90a      	bls.n	800ed02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ecf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecfc:	d101      	bne.n	800ed02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	e037      	b.n	800ed72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed08:	461a      	mov	r2, r3
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ed20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed30:	f043 0318 	orr.w	r3, r3, #24
 800ed34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	697a      	ldr	r2, [r7, #20]
 800ed40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed44:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ed48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ed4a:	7afb      	ldrb	r3, [r7, #11]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d10f      	bne.n	800ed70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed56:	461a      	mov	r2, r3
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	697a      	ldr	r2, [r7, #20]
 800ed66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed6a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ed6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	371c      	adds	r7, #28
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	4f54300a 	.word	0x4f54300a

0800ed84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b085      	sub	sp, #20
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	3301      	adds	r3, #1
 800ed94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ed9c:	d901      	bls.n	800eda2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	e01b      	b.n	800edda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	daf2      	bge.n	800ed90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800edaa:	2300      	movs	r3, #0
 800edac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	f043 0201 	orr.w	r2, r3, #1
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	3301      	adds	r3, #1
 800edbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800edc6:	d901      	bls.n	800edcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800edc8:	2303      	movs	r3, #3
 800edca:	e006      	b.n	800edda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	f003 0301 	and.w	r3, r3, #1
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d0f0      	beq.n	800edba <USB_CoreReset+0x36>

  return HAL_OK;
 800edd8:	2300      	movs	r3, #0
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3714      	adds	r7, #20
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
	...

0800ede8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800edec:	4904      	ldr	r1, [pc, #16]	@ (800ee00 <MX_FATFS_Init+0x18>)
 800edee:	4805      	ldr	r0, [pc, #20]	@ (800ee04 <MX_FATFS_Init+0x1c>)
 800edf0:	f003 fcd4 	bl	801279c <FATFS_LinkDriver>
 800edf4:	4603      	mov	r3, r0
 800edf6:	461a      	mov	r2, r3
 800edf8:	4b03      	ldr	r3, [pc, #12]	@ (800ee08 <MX_FATFS_Init+0x20>)
 800edfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800edfc:	bf00      	nop
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	240008b4 	.word	0x240008b4
 800ee04:	08015c84 	.word	0x08015c84
 800ee08:	240008b0 	.word	0x240008b0

0800ee0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ee16:	f000 f879 	bl	800ef0c <BSP_SD_IsDetected>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d001      	beq.n	800ee24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ee20:	2302      	movs	r3, #2
 800ee22:	e012      	b.n	800ee4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ee24:	480b      	ldr	r0, [pc, #44]	@ (800ee54 <BSP_SD_Init+0x48>)
 800ee26:	f7f9 fc51 	bl	80086cc <HAL_SD_Init>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ee2e:	79fb      	ldrb	r3, [r7, #7]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d109      	bne.n	800ee48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ee34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ee38:	4806      	ldr	r0, [pc, #24]	@ (800ee54 <BSP_SD_Init+0x48>)
 800ee3a:	f7fa fb0d 	bl	8009458 <HAL_SD_ConfigWideBusOperation>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d001      	beq.n	800ee48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ee44:	2301      	movs	r3, #1
 800ee46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ee48:	79fb      	ldrb	r3, [r7, #7]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	24000628 	.word	0x24000628

0800ee58 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af02      	add	r7, sp, #8
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
 800ee64:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	68f9      	ldr	r1, [r7, #12]
 800ee74:	4806      	ldr	r0, [pc, #24]	@ (800ee90 <BSP_SD_ReadBlocks+0x38>)
 800ee76:	f7f9 fd49 	bl	800890c <HAL_SD_ReadBlocks>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d001      	beq.n	800ee84 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ee80:	2301      	movs	r3, #1
 800ee82:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ee84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3718      	adds	r7, #24
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	24000628 	.word	0x24000628

0800ee94 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b088      	sub	sp, #32
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
 800eea0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	9300      	str	r3, [sp, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	68f9      	ldr	r1, [r7, #12]
 800eeb0:	4806      	ldr	r0, [pc, #24]	@ (800eecc <BSP_SD_WriteBlocks+0x38>)
 800eeb2:	f7f9 feb5 	bl	8008c20 <HAL_SD_WriteBlocks>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d001      	beq.n	800eec0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800eebc:	2301      	movs	r3, #1
 800eebe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eec0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3718      	adds	r7, #24
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	24000628 	.word	0x24000628

0800eed0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800eed4:	4805      	ldr	r0, [pc, #20]	@ (800eeec <BSP_SD_GetCardState+0x1c>)
 800eed6:	f7fa fbd1 	bl	800967c <HAL_SD_GetCardState>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b04      	cmp	r3, #4
 800eede:	bf14      	ite	ne
 800eee0:	2301      	movne	r3, #1
 800eee2:	2300      	moveq	r3, #0
 800eee4:	b2db      	uxtb	r3, r3
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	24000628 	.word	0x24000628

0800eef0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800eef8:	6879      	ldr	r1, [r7, #4]
 800eefa:	4803      	ldr	r0, [pc, #12]	@ (800ef08 <BSP_SD_GetCardInfo+0x18>)
 800eefc:	f7fa fa80 	bl	8009400 <HAL_SD_GetCardInfo>
}
 800ef00:	bf00      	nop
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	24000628 	.word	0x24000628

0800ef0c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ef12:	2301      	movs	r3, #1
 800ef14:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ef16:	f000 f80b 	bl	800ef30 <BSP_PlatformIsDetected>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d101      	bne.n	800ef24 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ef20:	2300      	movs	r3, #0
 800ef22:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ef24:	79fb      	ldrb	r3, [r7, #7]
 800ef26:	b2db      	uxtb	r3, r3
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ef36:	2301      	movs	r3, #1
 800ef38:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ef3a:	2102      	movs	r1, #2
 800ef3c:	4806      	ldr	r0, [pc, #24]	@ (800ef58 <BSP_PlatformIsDetected+0x28>)
 800ef3e:	f7f3 fd87 	bl	8002a50 <HAL_GPIO_ReadPin>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d001      	beq.n	800ef4c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ef4c:	79fb      	ldrb	r3, [r7, #7]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	58020000 	.word	0x58020000

0800ef5c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	4603      	mov	r3, r0
 800ef64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ef66:	4b0b      	ldr	r3, [pc, #44]	@ (800ef94 <SD_CheckStatus+0x38>)
 800ef68:	2201      	movs	r2, #1
 800ef6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ef6c:	f7ff ffb0 	bl	800eed0 <BSP_SD_GetCardState>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d107      	bne.n	800ef86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ef76:	4b07      	ldr	r3, [pc, #28]	@ (800ef94 <SD_CheckStatus+0x38>)
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	f023 0301 	bic.w	r3, r3, #1
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	4b04      	ldr	r3, [pc, #16]	@ (800ef94 <SD_CheckStatus+0x38>)
 800ef84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ef86:	4b03      	ldr	r3, [pc, #12]	@ (800ef94 <SD_CheckStatus+0x38>)
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	b2db      	uxtb	r3, r3
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	24000021 	.word	0x24000021

0800ef98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	4603      	mov	r3, r0
 800efa0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800efa2:	4b0b      	ldr	r3, [pc, #44]	@ (800efd0 <SD_initialize+0x38>)
 800efa4:	2201      	movs	r2, #1
 800efa6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800efa8:	f7ff ff30 	bl	800ee0c <BSP_SD_Init>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d107      	bne.n	800efc2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800efb2:	79fb      	ldrb	r3, [r7, #7]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7ff ffd1 	bl	800ef5c <SD_CheckStatus>
 800efba:	4603      	mov	r3, r0
 800efbc:	461a      	mov	r2, r3
 800efbe:	4b04      	ldr	r3, [pc, #16]	@ (800efd0 <SD_initialize+0x38>)
 800efc0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800efc2:	4b03      	ldr	r3, [pc, #12]	@ (800efd0 <SD_initialize+0x38>)
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	b2db      	uxtb	r3, r3
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	24000021 	.word	0x24000021

0800efd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	4603      	mov	r3, r0
 800efdc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800efde:	79fb      	ldrb	r3, [r7, #7]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7ff ffbb 	bl	800ef5c <SD_CheckStatus>
 800efe6:	4603      	mov	r3, r0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b086      	sub	sp, #24
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60b9      	str	r1, [r7, #8]
 800eff8:	607a      	str	r2, [r7, #4]
 800effa:	603b      	str	r3, [r7, #0]
 800effc:	4603      	mov	r3, r0
 800effe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f000:	2301      	movs	r3, #1
 800f002:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f004:	f04f 33ff 	mov.w	r3, #4294967295
 800f008:	683a      	ldr	r2, [r7, #0]
 800f00a:	6879      	ldr	r1, [r7, #4]
 800f00c:	68b8      	ldr	r0, [r7, #8]
 800f00e:	f7ff ff23 	bl	800ee58 <BSP_SD_ReadBlocks>
 800f012:	4603      	mov	r3, r0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d107      	bne.n	800f028 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f018:	bf00      	nop
 800f01a:	f7ff ff59 	bl	800eed0 <BSP_SD_GetCardState>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d1fa      	bne.n	800f01a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f028:	7dfb      	ldrb	r3, [r7, #23]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3718      	adds	r7, #24
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b086      	sub	sp, #24
 800f036:	af00      	add	r7, sp, #0
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
 800f03c:	603b      	str	r3, [r7, #0]
 800f03e:	4603      	mov	r3, r0
 800f040:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f042:	2301      	movs	r3, #1
 800f044:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f046:	f04f 33ff 	mov.w	r3, #4294967295
 800f04a:	683a      	ldr	r2, [r7, #0]
 800f04c:	6879      	ldr	r1, [r7, #4]
 800f04e:	68b8      	ldr	r0, [r7, #8]
 800f050:	f7ff ff20 	bl	800ee94 <BSP_SD_WriteBlocks>
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d107      	bne.n	800f06a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f05a:	bf00      	nop
 800f05c:	f7ff ff38 	bl	800eed0 <BSP_SD_GetCardState>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1fa      	bne.n	800f05c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3718      	adds	r7, #24
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b08c      	sub	sp, #48	@ 0x30
 800f078:	af00      	add	r7, sp, #0
 800f07a:	4603      	mov	r3, r0
 800f07c:	603a      	str	r2, [r7, #0]
 800f07e:	71fb      	strb	r3, [r7, #7]
 800f080:	460b      	mov	r3, r1
 800f082:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f08a:	4b25      	ldr	r3, [pc, #148]	@ (800f120 <SD_ioctl+0xac>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	f003 0301 	and.w	r3, r3, #1
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <SD_ioctl+0x28>
 800f098:	2303      	movs	r3, #3
 800f09a:	e03c      	b.n	800f116 <SD_ioctl+0xa2>

  switch (cmd)
 800f09c:	79bb      	ldrb	r3, [r7, #6]
 800f09e:	2b03      	cmp	r3, #3
 800f0a0:	d834      	bhi.n	800f10c <SD_ioctl+0x98>
 800f0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f0a8 <SD_ioctl+0x34>)
 800f0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a8:	0800f0b9 	.word	0x0800f0b9
 800f0ac:	0800f0c1 	.word	0x0800f0c1
 800f0b0:	0800f0d9 	.word	0x0800f0d9
 800f0b4:	0800f0f3 	.word	0x0800f0f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f0be:	e028      	b.n	800f112 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0c0:	f107 0308 	add.w	r3, r7, #8
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7ff ff13 	bl	800eef0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f0ca:	6a3a      	ldr	r2, [r7, #32]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f0d6:	e01c      	b.n	800f112 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0d8:	f107 0308 	add.w	r3, r7, #8
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7ff ff07 	bl	800eef0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f0f0:	e00f      	b.n	800f112 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0f2:	f107 0308 	add.w	r3, r7, #8
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff fefa 	bl	800eef0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fe:	0a5a      	lsrs	r2, r3, #9
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f104:	2300      	movs	r3, #0
 800f106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f10a:	e002      	b.n	800f112 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f10c:	2304      	movs	r3, #4
 800f10e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f112:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f116:	4618      	mov	r0, r3
 800f118:	3730      	adds	r7, #48	@ 0x30
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	24000021 	.word	0x24000021

0800f124 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800f130:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800f134:	f004 f836 	bl	80131a4 <USBD_static_malloc>
 800f138:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d109      	bne.n	800f154 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	32b0      	adds	r2, #176	@ 0xb0
 800f14a:	2100      	movs	r1, #0
 800f14c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f150:	2302      	movs	r3, #2
 800f152:	e06e      	b.n	800f232 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	32b0      	adds	r2, #176	@ 0xb0
 800f15e:	68f9      	ldr	r1, [r7, #12]
 800f160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	32b0      	adds	r2, #176	@ 0xb0
 800f16e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	7c1b      	ldrb	r3, [r3, #16]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d12b      	bne.n	800f1d8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800f180:	4b2e      	ldr	r3, [pc, #184]	@ (800f23c <USBD_MSC_Init+0x118>)
 800f182:	7819      	ldrb	r1, [r3, #0]
 800f184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f188:	2202      	movs	r2, #2
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f003 fec7 	bl	8012f1e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800f190:	4b2a      	ldr	r3, [pc, #168]	@ (800f23c <USBD_MSC_Init+0x118>)
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	f003 020f 	and.w	r2, r3, #15
 800f198:	6879      	ldr	r1, [r7, #4]
 800f19a:	4613      	mov	r3, r2
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	4413      	add	r3, r2
 800f1a0:	009b      	lsls	r3, r3, #2
 800f1a2:	440b      	add	r3, r1
 800f1a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800f1ac:	4b24      	ldr	r3, [pc, #144]	@ (800f240 <USBD_MSC_Init+0x11c>)
 800f1ae:	7819      	ldrb	r1, [r3, #0]
 800f1b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f1b4:	2202      	movs	r2, #2
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f003 feb1 	bl	8012f1e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800f1bc:	4b20      	ldr	r3, [pc, #128]	@ (800f240 <USBD_MSC_Init+0x11c>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	f003 020f 	and.w	r2, r3, #15
 800f1c4:	6879      	ldr	r1, [r7, #4]
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	4413      	add	r3, r2
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	440b      	add	r3, r1
 800f1d0:	3324      	adds	r3, #36	@ 0x24
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	801a      	strh	r2, [r3, #0]
 800f1d6:	e028      	b.n	800f22a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800f1d8:	4b18      	ldr	r3, [pc, #96]	@ (800f23c <USBD_MSC_Init+0x118>)
 800f1da:	7819      	ldrb	r1, [r3, #0]
 800f1dc:	2340      	movs	r3, #64	@ 0x40
 800f1de:	2202      	movs	r2, #2
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f003 fe9c 	bl	8012f1e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800f1e6:	4b15      	ldr	r3, [pc, #84]	@ (800f23c <USBD_MSC_Init+0x118>)
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	f003 020f 	and.w	r2, r3, #15
 800f1ee:	6879      	ldr	r1, [r7, #4]
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	4413      	add	r3, r2
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	440b      	add	r3, r1
 800f1fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f1fe:	2201      	movs	r2, #1
 800f200:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800f202:	4b0f      	ldr	r3, [pc, #60]	@ (800f240 <USBD_MSC_Init+0x11c>)
 800f204:	7819      	ldrb	r1, [r3, #0]
 800f206:	2340      	movs	r3, #64	@ 0x40
 800f208:	2202      	movs	r2, #2
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f003 fe87 	bl	8012f1e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800f210:	4b0b      	ldr	r3, [pc, #44]	@ (800f240 <USBD_MSC_Init+0x11c>)
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	f003 020f 	and.w	r2, r3, #15
 800f218:	6879      	ldr	r1, [r7, #4]
 800f21a:	4613      	mov	r3, r2
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	4413      	add	r3, r2
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	440b      	add	r3, r1
 800f224:	3324      	adds	r3, #36	@ 0x24
 800f226:	2201      	movs	r2, #1
 800f228:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 fa2c 	bl	800f688 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800f230:	2300      	movs	r3, #0
}
 800f232:	4618      	mov	r0, r3
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	24000087 	.word	0x24000087
 800f240:	24000086 	.word	0x24000086

0800f244 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	460b      	mov	r3, r1
 800f24e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800f250:	4b26      	ldr	r3, [pc, #152]	@ (800f2ec <USBD_MSC_DeInit+0xa8>)
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	4619      	mov	r1, r3
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f003 fe87 	bl	8012f6a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800f25c:	4b23      	ldr	r3, [pc, #140]	@ (800f2ec <USBD_MSC_DeInit+0xa8>)
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	f003 020f 	and.w	r2, r3, #15
 800f264:	6879      	ldr	r1, [r7, #4]
 800f266:	4613      	mov	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	4413      	add	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	440b      	add	r3, r1
 800f270:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f274:	2200      	movs	r2, #0
 800f276:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800f278:	4b1d      	ldr	r3, [pc, #116]	@ (800f2f0 <USBD_MSC_DeInit+0xac>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	4619      	mov	r1, r3
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f003 fe73 	bl	8012f6a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800f284:	4b1a      	ldr	r3, [pc, #104]	@ (800f2f0 <USBD_MSC_DeInit+0xac>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	f003 020f 	and.w	r2, r3, #15
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	4613      	mov	r3, r2
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	4413      	add	r3, r2
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	440b      	add	r3, r1
 800f298:	3324      	adds	r3, #36	@ 0x24
 800f29a:	2200      	movs	r2, #0
 800f29c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	32b0      	adds	r2, #176	@ 0xb0
 800f2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d018      	beq.n	800f2e2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 fa67 	bl	800f784 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	32b0      	adds	r2, #176	@ 0xb0
 800f2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f003 ff7b 	bl	80131c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	32b0      	adds	r2, #176	@ 0xb0
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f2e2:	2300      	movs	r3, #0
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	24000087 	.word	0x24000087
 800f2f0:	24000086 	.word	0x24000086

0800f2f4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	32b0      	adds	r2, #176	@ 0xb0
 800f308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f30c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800f30e:	2300      	movs	r3, #0
 800f310:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800f312:	2300      	movs	r3, #0
 800f314:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d101      	bne.n	800f320 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800f31c:	2303      	movs	r3, #3
 800f31e:	e0e1      	b.n	800f4e4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d053      	beq.n	800f3d4 <USBD_MSC_Setup+0xe0>
 800f32c:	2b20      	cmp	r3, #32
 800f32e:	f040 80d1 	bne.w	800f4d4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	785b      	ldrb	r3, [r3, #1]
 800f336:	2bfe      	cmp	r3, #254	@ 0xfe
 800f338:	d002      	beq.n	800f340 <USBD_MSC_Setup+0x4c>
 800f33a:	2bff      	cmp	r3, #255	@ 0xff
 800f33c:	d02a      	beq.n	800f394 <USBD_MSC_Setup+0xa0>
 800f33e:	e041      	b.n	800f3c4 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	885b      	ldrh	r3, [r3, #2]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d11e      	bne.n	800f386 <USBD_MSC_Setup+0x92>
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	88db      	ldrh	r3, [r3, #6]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d11a      	bne.n	800f386 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800f356:	2b00      	cmp	r3, #0
 800f358:	da15      	bge.n	800f386 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	33b0      	adds	r3, #176	@ 0xb0
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4413      	add	r3, r2
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	4798      	blx	r3
 800f36e:	4603      	mov	r3, r0
 800f370:	461a      	mov	r2, r3
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	2201      	movs	r2, #1
 800f37a:	4619      	mov	r1, r3
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f003 f95d 	bl	801263c <USBD_CtlSendData>
 800f382:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f384:	e025      	b.n	800f3d2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800f386:	6839      	ldr	r1, [r7, #0]
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f003 f8da 	bl	8012542 <USBD_CtlError>
            ret = USBD_FAIL;
 800f38e:	2303      	movs	r3, #3
 800f390:	75fb      	strb	r3, [r7, #23]
          break;
 800f392:	e01e      	b.n	800f3d2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	885b      	ldrh	r3, [r3, #2]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d10c      	bne.n	800f3b6 <USBD_MSC_Setup+0xc2>
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	88db      	ldrh	r3, [r3, #6]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d108      	bne.n	800f3b6 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	db03      	blt.n	800f3b6 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 f9b4 	bl	800f71c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f3b4:	e00d      	b.n	800f3d2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800f3b6:	6839      	ldr	r1, [r7, #0]
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f003 f8c2 	bl	8012542 <USBD_CtlError>
            ret = USBD_FAIL;
 800f3be:	2303      	movs	r3, #3
 800f3c0:	75fb      	strb	r3, [r7, #23]
          break;
 800f3c2:	e006      	b.n	800f3d2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800f3c4:	6839      	ldr	r1, [r7, #0]
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f003 f8bb 	bl	8012542 <USBD_CtlError>
          ret = USBD_FAIL;
 800f3cc:	2303      	movs	r3, #3
 800f3ce:	75fb      	strb	r3, [r7, #23]
          break;
 800f3d0:	bf00      	nop
      }
      break;
 800f3d2:	e086      	b.n	800f4e2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	785b      	ldrb	r3, [r3, #1]
 800f3d8:	2b0b      	cmp	r3, #11
 800f3da:	d872      	bhi.n	800f4c2 <USBD_MSC_Setup+0x1ce>
 800f3dc:	a201      	add	r2, pc, #4	@ (adr r2, 800f3e4 <USBD_MSC_Setup+0xf0>)
 800f3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e2:	bf00      	nop
 800f3e4:	0800f415 	.word	0x0800f415
 800f3e8:	0800f491 	.word	0x0800f491
 800f3ec:	0800f4c3 	.word	0x0800f4c3
 800f3f0:	0800f4c3 	.word	0x0800f4c3
 800f3f4:	0800f4c3 	.word	0x0800f4c3
 800f3f8:	0800f4c3 	.word	0x0800f4c3
 800f3fc:	0800f4c3 	.word	0x0800f4c3
 800f400:	0800f4c3 	.word	0x0800f4c3
 800f404:	0800f4c3 	.word	0x0800f4c3
 800f408:	0800f4c3 	.word	0x0800f4c3
 800f40c:	0800f43f 	.word	0x0800f43f
 800f410:	0800f469 	.word	0x0800f469
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	2b03      	cmp	r3, #3
 800f41e:	d107      	bne.n	800f430 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f420:	f107 030e 	add.w	r3, r7, #14
 800f424:	2202      	movs	r2, #2
 800f426:	4619      	mov	r1, r3
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f003 f907 	bl	801263c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f42e:	e050      	b.n	800f4d2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800f430:	6839      	ldr	r1, [r7, #0]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f003 f885 	bl	8012542 <USBD_CtlError>
            ret = USBD_FAIL;
 800f438:	2303      	movs	r3, #3
 800f43a:	75fb      	strb	r3, [r7, #23]
          break;
 800f43c:	e049      	b.n	800f4d2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f444:	b2db      	uxtb	r3, r3
 800f446:	2b03      	cmp	r3, #3
 800f448:	d107      	bne.n	800f45a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	3304      	adds	r3, #4
 800f44e:	2201      	movs	r2, #1
 800f450:	4619      	mov	r1, r3
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f003 f8f2 	bl	801263c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f458:	e03b      	b.n	800f4d2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f003 f870 	bl	8012542 <USBD_CtlError>
            ret = USBD_FAIL;
 800f462:	2303      	movs	r3, #3
 800f464:	75fb      	strb	r3, [r7, #23]
          break;
 800f466:	e034      	b.n	800f4d2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	2b03      	cmp	r3, #3
 800f472:	d106      	bne.n	800f482 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	885b      	ldrh	r3, [r3, #2]
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	461a      	mov	r2, r3
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f480:	e027      	b.n	800f4d2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800f482:	6839      	ldr	r1, [r7, #0]
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f003 f85c 	bl	8012542 <USBD_CtlError>
            ret = USBD_FAIL;
 800f48a:	2303      	movs	r3, #3
 800f48c:	75fb      	strb	r3, [r7, #23]
          break;
 800f48e:	e020      	b.n	800f4d2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f496:	b2db      	uxtb	r3, r3
 800f498:	2b03      	cmp	r3, #3
 800f49a:	d119      	bne.n	800f4d0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	885b      	ldrh	r3, [r3, #2]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d115      	bne.n	800f4d0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	889b      	ldrh	r3, [r3, #4]
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f003 fd7b 	bl	8012fa8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	889b      	ldrh	r3, [r3, #4]
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fb2e 	bl	800fb1c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800f4c0:	e006      	b.n	800f4d0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800f4c2:	6839      	ldr	r1, [r7, #0]
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f003 f83c 	bl	8012542 <USBD_CtlError>
          ret = USBD_FAIL;
 800f4ca:	2303      	movs	r3, #3
 800f4cc:	75fb      	strb	r3, [r7, #23]
          break;
 800f4ce:	e000      	b.n	800f4d2 <USBD_MSC_Setup+0x1de>
          break;
 800f4d0:	bf00      	nop
      }
      break;
 800f4d2:	e006      	b.n	800f4e2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f003 f833 	bl	8012542 <USBD_CtlError>
      ret = USBD_FAIL;
 800f4dc:	2303      	movs	r3, #3
 800f4de:	75fb      	strb	r3, [r7, #23]
      break;
 800f4e0:	bf00      	nop
  }

  return (uint8_t)ret;
 800f4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3718      	adds	r7, #24
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800f4f8:	78fb      	ldrb	r3, [r7, #3]
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 f959 	bl	800f7b4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800f502:	2300      	movs	r3, #0
}
 800f504:	4618      	mov	r0, r3
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	460b      	mov	r3, r1
 800f516:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800f518:	78fb      	ldrb	r3, [r7, #3]
 800f51a:	4619      	mov	r1, r3
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f983 	bl	800f828 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800f522:	2300      	movs	r3, #0
}
 800f524:	4618      	mov	r0, r3
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800f534:	2181      	movs	r1, #129	@ 0x81
 800f536:	4812      	ldr	r0, [pc, #72]	@ (800f580 <USBD_MSC_GetHSCfgDesc+0x54>)
 800f538:	f002 f9a4 	bl	8011884 <USBD_GetEpDesc>
 800f53c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800f53e:	2101      	movs	r1, #1
 800f540:	480f      	ldr	r0, [pc, #60]	@ (800f580 <USBD_MSC_GetHSCfgDesc+0x54>)
 800f542:	f002 f99f 	bl	8011884 <USBD_GetEpDesc>
 800f546:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d006      	beq.n	800f55c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	711a      	strb	r2, [r3, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	f042 0202 	orr.w	r2, r2, #2
 800f55a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d006      	beq.n	800f570 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	2200      	movs	r2, #0
 800f566:	711a      	strb	r2, [r3, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	f042 0202 	orr.w	r2, r2, #2
 800f56e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2220      	movs	r2, #32
 800f574:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800f576:	4b02      	ldr	r3, [pc, #8]	@ (800f580 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3710      	adds	r7, #16
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	2400005c 	.word	0x2400005c

0800f584 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800f58c:	2181      	movs	r1, #129	@ 0x81
 800f58e:	4812      	ldr	r0, [pc, #72]	@ (800f5d8 <USBD_MSC_GetFSCfgDesc+0x54>)
 800f590:	f002 f978 	bl	8011884 <USBD_GetEpDesc>
 800f594:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800f596:	2101      	movs	r1, #1
 800f598:	480f      	ldr	r0, [pc, #60]	@ (800f5d8 <USBD_MSC_GetFSCfgDesc+0x54>)
 800f59a:	f002 f973 	bl	8011884 <USBD_GetEpDesc>
 800f59e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d006      	beq.n	800f5b4 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f5ae:	711a      	strb	r2, [r3, #4]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d006      	beq.n	800f5c8 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f5c2:	711a      	strb	r2, [r3, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2220      	movs	r2, #32
 800f5cc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800f5ce:	4b02      	ldr	r3, [pc, #8]	@ (800f5d8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	2400005c 	.word	0x2400005c

0800f5dc <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800f5e4:	2181      	movs	r1, #129	@ 0x81
 800f5e6:	4812      	ldr	r0, [pc, #72]	@ (800f630 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800f5e8:	f002 f94c 	bl	8011884 <USBD_GetEpDesc>
 800f5ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800f5ee:	2101      	movs	r1, #1
 800f5f0:	480f      	ldr	r0, [pc, #60]	@ (800f630 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800f5f2:	f002 f947 	bl	8011884 <USBD_GetEpDesc>
 800f5f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d006      	beq.n	800f60c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2200      	movs	r2, #0
 800f602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f606:	711a      	strb	r2, [r3, #4]
 800f608:	2200      	movs	r2, #0
 800f60a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d006      	beq.n	800f620 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	2200      	movs	r2, #0
 800f616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f61a:	711a      	strb	r2, [r3, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2220      	movs	r2, #32
 800f624:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800f626:	4b02      	ldr	r3, [pc, #8]	@ (800f630 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3710      	adds	r7, #16
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	2400005c 	.word	0x2400005c

0800f634 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	220a      	movs	r2, #10
 800f640:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800f642:	4b03      	ldr	r3, [pc, #12]	@ (800f650 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f644:	4618      	mov	r0, r3
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr
 800f650:	2400007c 	.word	0x2400007c

0800f654 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d101      	bne.n	800f668 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f664:	2303      	movs	r3, #3
 800f666:	e009      	b.n	800f67c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	33b0      	adds	r3, #176	@ 0xb0
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4413      	add	r3, r2
 800f676:	683a      	ldr	r2, [r7, #0]
 800f678:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	32b0      	adds	r2, #176	@ 0xb0
 800f69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f69e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d032      	beq.n	800f70c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	33b0      	adds	r3, #176	@ 0xb0
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	4413      	add	r3, r2
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2000      	movs	r0, #0
 800f6de:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800f6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800f714 <MSC_BOT_Init+0x8c>)
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f003 fc5e 	bl	8012fa8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800f6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f718 <MSC_BOT_Init+0x90>)
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f003 fc58 	bl	8012fa8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800f6f8:	4b06      	ldr	r3, [pc, #24]	@ (800f714 <MSC_BOT_Init+0x8c>)
 800f6fa:	7819      	ldrb	r1, [r3, #0]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800f702:	231f      	movs	r3, #31
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f003 fd18 	bl	801313a <USBD_LL_PrepareReceive>
 800f70a:	e000      	b.n	800f70e <MSC_BOT_Init+0x86>
    return;
 800f70c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}
 800f714:	24000087 	.word	0x24000087
 800f718:	24000086 	.word	0x24000086

0800f71c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	32b0      	adds	r2, #176	@ 0xb0
 800f72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f732:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d01b      	beq.n	800f772 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2200      	movs	r2, #0
 800f73e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2201      	movs	r2, #1
 800f744:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800f746:	4b0d      	ldr	r3, [pc, #52]	@ (800f77c <MSC_BOT_Reset+0x60>)
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	4619      	mov	r1, r3
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f003 fc69 	bl	8013024 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800f752:	4b0b      	ldr	r3, [pc, #44]	@ (800f780 <MSC_BOT_Reset+0x64>)
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	4619      	mov	r1, r3
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f003 fc63 	bl	8013024 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800f75e:	4b08      	ldr	r3, [pc, #32]	@ (800f780 <MSC_BOT_Reset+0x64>)
 800f760:	7819      	ldrb	r1, [r3, #0]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800f768:	231f      	movs	r3, #31
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f003 fce5 	bl	801313a <USBD_LL_PrepareReceive>
 800f770:	e000      	b.n	800f774 <MSC_BOT_Reset+0x58>
    return;
 800f772:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	24000086 	.word	0x24000086
 800f780:	24000087 	.word	0x24000087

0800f784 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800f784:	b480      	push	{r7}
 800f786:	b085      	sub	sp, #20
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	32b0      	adds	r2, #176	@ 0xb0
 800f796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f79a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d002      	beq.n	800f7a8 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	721a      	strb	r2, [r3, #8]
  }
}
 800f7a8:	bf00      	nop
 800f7aa:	3714      	adds	r7, #20
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	32b0      	adds	r2, #176	@ 0xb0
 800f7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ce:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d020      	beq.n	800f818 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	7a1b      	ldrb	r3, [r3, #8]
 800f7da:	2b02      	cmp	r3, #2
 800f7dc:	d005      	beq.n	800f7ea <MSC_BOT_DataIn+0x36>
 800f7de:	2b02      	cmp	r3, #2
 800f7e0:	db1c      	blt.n	800f81c <MSC_BOT_DataIn+0x68>
 800f7e2:	3b03      	subs	r3, #3
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d819      	bhi.n	800f81c <MSC_BOT_DataIn+0x68>
 800f7e8:	e011      	b.n	800f80e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 f9c9 	bl	800fb90 <SCSI_ProcessCmd>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	da0d      	bge.n	800f820 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f804:	2101      	movs	r1, #1
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 f90c 	bl	800fa24 <MSC_BOT_SendCSW>
      }
      break;
 800f80c:	e008      	b.n	800f820 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f80e:	2100      	movs	r1, #0
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 f907 	bl	800fa24 <MSC_BOT_SendCSW>
      break;
 800f816:	e004      	b.n	800f822 <MSC_BOT_DataIn+0x6e>
    return;
 800f818:	bf00      	nop
 800f81a:	e002      	b.n	800f822 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800f81c:	bf00      	nop
 800f81e:	e000      	b.n	800f822 <MSC_BOT_DataIn+0x6e>
      break;
 800f820:	bf00      	nop
  }
}
 800f822:	3710      	adds	r7, #16
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	460b      	mov	r3, r1
 800f832:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	32b0      	adds	r2, #176	@ 0xb0
 800f83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f842:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d01c      	beq.n	800f884 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	7a1b      	ldrb	r3, [r3, #8]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d002      	beq.n	800f858 <MSC_BOT_DataOut+0x30>
 800f852:	2b01      	cmp	r3, #1
 800f854:	d004      	beq.n	800f860 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800f856:	e018      	b.n	800f88a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 f819 	bl	800f890 <MSC_BOT_CBW_Decode>
      break;
 800f85e:	e014      	b.n	800f88a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800f86c:	461a      	mov	r2, r3
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 f98e 	bl	800fb90 <SCSI_ProcessCmd>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	da06      	bge.n	800f888 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f87a:	2101      	movs	r1, #1
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 f8d1 	bl	800fa24 <MSC_BOT_SendCSW>
      break;
 800f882:	e001      	b.n	800f888 <MSC_BOT_DataOut+0x60>
    return;
 800f884:	bf00      	nop
 800f886:	e000      	b.n	800f88a <MSC_BOT_DataOut+0x62>
      break;
 800f888:	bf00      	nop
  }
}
 800f88a:	3710      	adds	r7, #16
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	32b0      	adds	r2, #176	@ 0xb0
 800f8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8a6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d079      	beq.n	800f9a2 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800f8c6:	4b3a      	ldr	r3, [pc, #232]	@ (800f9b0 <MSC_BOT_CBW_Decode+0x120>)
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f003 fc55 	bl	801317c <USBD_LL_GetRxDataSize>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b1f      	cmp	r3, #31
 800f8d6:	d114      	bne.n	800f902 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800f8de:	4a35      	ldr	r2, [pc, #212]	@ (800f9b4 <MSC_BOT_CBW_Decode+0x124>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d10e      	bne.n	800f902 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d809      	bhi.n	800f902 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d004      	beq.n	800f902 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800f8fe:	2b10      	cmp	r3, #16
 800f900:	d90e      	bls.n	800f920 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f908:	2320      	movs	r3, #32
 800f90a:	2205      	movs	r2, #5
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 fe54 	bl	80105ba <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2202      	movs	r2, #2
 800f916:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 f8bd 	bl	800fa98 <MSC_BOT_Abort>
 800f91e:	e043      	b.n	800f9a8 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800f92c:	461a      	mov	r2, r3
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 f92e 	bl	800fb90 <SCSI_ProcessCmd>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	da0c      	bge.n	800f954 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	7a1b      	ldrb	r3, [r3, #8]
 800f93e:	2b05      	cmp	r3, #5
 800f940:	d104      	bne.n	800f94c <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f942:	2101      	movs	r1, #1
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 f86d 	bl	800fa24 <MSC_BOT_SendCSW>
 800f94a:	e02d      	b.n	800f9a8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 f8a3 	bl	800fa98 <MSC_BOT_Abort>
 800f952:	e029      	b.n	800f9a8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	7a1b      	ldrb	r3, [r3, #8]
 800f958:	2b02      	cmp	r3, #2
 800f95a:	d024      	beq.n	800f9a6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f960:	2b01      	cmp	r3, #1
 800f962:	d020      	beq.n	800f9a6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f968:	2b03      	cmp	r3, #3
 800f96a:	d01c      	beq.n	800f9a6 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	68db      	ldr	r3, [r3, #12]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d009      	beq.n	800f988 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f103 0110 	add.w	r1, r3, #16
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	461a      	mov	r2, r3
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f000 f819 	bl	800f9b8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800f986:	e00f      	b.n	800f9a8 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d104      	bne.n	800f99a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f990:	2100      	movs	r1, #0
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 f846 	bl	800fa24 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800f998:	e006      	b.n	800f9a8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f87c 	bl	800fa98 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800f9a0:	e002      	b.n	800f9a8 <MSC_BOT_CBW_Decode+0x118>
    return;
 800f9a2:	bf00      	nop
 800f9a4:	e000      	b.n	800f9a8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800f9a6:	bf00      	nop
    }
  }
}
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	24000087 	.word	0x24000087
 800f9b4:	43425355 	.word	0x43425355

0800f9b8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b086      	sub	sp, #24
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	32b0      	adds	r2, #176	@ 0xb0
 800f9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9d2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d01e      	beq.n	800fa18 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	bf28      	it	cs
 800f9e6:	4613      	movcs	r3, r2
 800f9e8:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	1ad2      	subs	r2, r2, r3
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	2204      	movs	r2, #4
 800fa06:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800fa08:	4b05      	ldr	r3, [pc, #20]	@ (800fa20 <MSC_BOT_SendData+0x68>)
 800fa0a:	7819      	ldrb	r1, [r3, #0]
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	68f8      	ldr	r0, [r7, #12]
 800fa12:	f003 fb71 	bl	80130f8 <USBD_LL_Transmit>
 800fa16:	e000      	b.n	800fa1a <MSC_BOT_SendData+0x62>
    return;
 800fa18:	bf00      	nop
}
 800fa1a:	3718      	adds	r7, #24
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	24000086 	.word	0x24000086

0800fa24 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	32b0      	adds	r2, #176	@ 0xb0
 800fa3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa3e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d01d      	beq.n	800fa82 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	4a10      	ldr	r2, [pc, #64]	@ (800fa8c <MSC_BOT_SendCSW+0x68>)
 800fa4a:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	78fa      	ldrb	r2, [r7, #3]
 800fa52:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800fa5c:	4b0c      	ldr	r3, [pc, #48]	@ (800fa90 <MSC_BOT_SendCSW+0x6c>)
 800fa5e:	7819      	ldrb	r1, [r3, #0]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800fa66:	230d      	movs	r3, #13
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f003 fb45 	bl	80130f8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800fa6e:	4b09      	ldr	r3, [pc, #36]	@ (800fa94 <MSC_BOT_SendCSW+0x70>)
 800fa70:	7819      	ldrb	r1, [r3, #0]
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800fa78:	231f      	movs	r3, #31
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f003 fb5d 	bl	801313a <USBD_LL_PrepareReceive>
 800fa80:	e000      	b.n	800fa84 <MSC_BOT_SendCSW+0x60>
    return;
 800fa82:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	53425355 	.word	0x53425355
 800fa90:	24000086 	.word	0x24000086
 800fa94:	24000087 	.word	0x24000087

0800fa98 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	32b0      	adds	r2, #176	@ 0xb0
 800faaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d02a      	beq.n	800fb0c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d10e      	bne.n	800fade <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d009      	beq.n	800fade <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800face:	2b00      	cmp	r3, #0
 800fad0:	d105      	bne.n	800fade <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800fad2:	4b10      	ldr	r3, [pc, #64]	@ (800fb14 <MSC_BOT_Abort+0x7c>)
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	4619      	mov	r1, r3
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f003 fa84 	bl	8012fe6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800fade:	4b0e      	ldr	r3, [pc, #56]	@ (800fb18 <MSC_BOT_Abort+0x80>)
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	4619      	mov	r1, r3
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f003 fa7e 	bl	8012fe6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	7a5b      	ldrb	r3, [r3, #9]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	d10d      	bne.n	800fb0e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800faf2:	4b09      	ldr	r3, [pc, #36]	@ (800fb18 <MSC_BOT_Abort+0x80>)
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	4619      	mov	r1, r3
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f003 fa74 	bl	8012fe6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800fafe:	4b05      	ldr	r3, [pc, #20]	@ (800fb14 <MSC_BOT_Abort+0x7c>)
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	4619      	mov	r1, r3
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f003 fa6e 	bl	8012fe6 <USBD_LL_StallEP>
 800fb0a:	e000      	b.n	800fb0e <MSC_BOT_Abort+0x76>
    return;
 800fb0c:	bf00      	nop
  }
}
 800fb0e:	3710      	adds	r7, #16
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	24000087 	.word	0x24000087
 800fb18:	24000086 	.word	0x24000086

0800fb1c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	460b      	mov	r3, r1
 800fb26:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	32b0      	adds	r2, #176	@ 0xb0
 800fb32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb36:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d01d      	beq.n	800fb7a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	7a5b      	ldrb	r3, [r3, #9]
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	d10c      	bne.n	800fb60 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800fb46:	4b10      	ldr	r3, [pc, #64]	@ (800fb88 <MSC_BOT_CplClrFeature+0x6c>)
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f003 fa4a 	bl	8012fe6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800fb52:	4b0e      	ldr	r3, [pc, #56]	@ (800fb8c <MSC_BOT_CplClrFeature+0x70>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f003 fa44 	bl	8012fe6 <USBD_LL_StallEP>
 800fb5e:	e00f      	b.n	800fb80 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800fb60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	da0a      	bge.n	800fb7e <MSC_BOT_CplClrFeature+0x62>
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	7a5b      	ldrb	r3, [r3, #9]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d006      	beq.n	800fb7e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800fb70:	2101      	movs	r1, #1
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f7ff ff56 	bl	800fa24 <MSC_BOT_SendCSW>
 800fb78:	e002      	b.n	800fb80 <MSC_BOT_CplClrFeature+0x64>
    return;
 800fb7a:	bf00      	nop
 800fb7c:	e000      	b.n	800fb80 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800fb7e:	bf00      	nop
  }
}
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	24000086 	.word	0x24000086
 800fb8c:	24000087 	.word	0x24000087

0800fb90 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	607a      	str	r2, [r7, #4]
 800fb9c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	32b0      	adds	r2, #176	@ 0xb0
 800fba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d102      	bne.n	800fbba <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800fbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb8:	e168      	b.n	800fe8c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	2baa      	cmp	r3, #170	@ 0xaa
 800fbc0:	f000 8144 	beq.w	800fe4c <SCSI_ProcessCmd+0x2bc>
 800fbc4:	2baa      	cmp	r3, #170	@ 0xaa
 800fbc6:	f300 8153 	bgt.w	800fe70 <SCSI_ProcessCmd+0x2e0>
 800fbca:	2ba8      	cmp	r3, #168	@ 0xa8
 800fbcc:	f000 812c 	beq.w	800fe28 <SCSI_ProcessCmd+0x298>
 800fbd0:	2ba8      	cmp	r3, #168	@ 0xa8
 800fbd2:	f300 814d 	bgt.w	800fe70 <SCSI_ProcessCmd+0x2e0>
 800fbd6:	2b5a      	cmp	r3, #90	@ 0x5a
 800fbd8:	f300 80c0 	bgt.w	800fd5c <SCSI_ProcessCmd+0x1cc>
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f2c0 8147 	blt.w	800fe70 <SCSI_ProcessCmd+0x2e0>
 800fbe2:	2b5a      	cmp	r3, #90	@ 0x5a
 800fbe4:	f200 8144 	bhi.w	800fe70 <SCSI_ProcessCmd+0x2e0>
 800fbe8:	a201      	add	r2, pc, #4	@ (adr r2, 800fbf0 <SCSI_ProcessCmd+0x60>)
 800fbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbee:	bf00      	nop
 800fbf0:	0800fd63 	.word	0x0800fd63
 800fbf4:	0800fe71 	.word	0x0800fe71
 800fbf8:	0800fe71 	.word	0x0800fe71
 800fbfc:	0800fd75 	.word	0x0800fd75
 800fc00:	0800fe71 	.word	0x0800fe71
 800fc04:	0800fe71 	.word	0x0800fe71
 800fc08:	0800fe71 	.word	0x0800fe71
 800fc0c:	0800fe71 	.word	0x0800fe71
 800fc10:	0800fe71 	.word	0x0800fe71
 800fc14:	0800fe71 	.word	0x0800fe71
 800fc18:	0800fe71 	.word	0x0800fe71
 800fc1c:	0800fe71 	.word	0x0800fe71
 800fc20:	0800fe71 	.word	0x0800fe71
 800fc24:	0800fe71 	.word	0x0800fe71
 800fc28:	0800fe71 	.word	0x0800fe71
 800fc2c:	0800fe71 	.word	0x0800fe71
 800fc30:	0800fe71 	.word	0x0800fe71
 800fc34:	0800fe71 	.word	0x0800fe71
 800fc38:	0800fd87 	.word	0x0800fd87
 800fc3c:	0800fe71 	.word	0x0800fe71
 800fc40:	0800fe71 	.word	0x0800fe71
 800fc44:	0800fe71 	.word	0x0800fe71
 800fc48:	0800fe71 	.word	0x0800fe71
 800fc4c:	0800fe71 	.word	0x0800fe71
 800fc50:	0800fe71 	.word	0x0800fe71
 800fc54:	0800fe71 	.word	0x0800fe71
 800fc58:	0800fdbd 	.word	0x0800fdbd
 800fc5c:	0800fd99 	.word	0x0800fd99
 800fc60:	0800fe71 	.word	0x0800fe71
 800fc64:	0800fe71 	.word	0x0800fe71
 800fc68:	0800fdab 	.word	0x0800fdab
 800fc6c:	0800fe71 	.word	0x0800fe71
 800fc70:	0800fe71 	.word	0x0800fe71
 800fc74:	0800fe71 	.word	0x0800fe71
 800fc78:	0800fe71 	.word	0x0800fe71
 800fc7c:	0800fde1 	.word	0x0800fde1
 800fc80:	0800fe71 	.word	0x0800fe71
 800fc84:	0800fdf3 	.word	0x0800fdf3
 800fc88:	0800fe71 	.word	0x0800fe71
 800fc8c:	0800fe71 	.word	0x0800fe71
 800fc90:	0800fe17 	.word	0x0800fe17
 800fc94:	0800fe71 	.word	0x0800fe71
 800fc98:	0800fe3b 	.word	0x0800fe3b
 800fc9c:	0800fe71 	.word	0x0800fe71
 800fca0:	0800fe71 	.word	0x0800fe71
 800fca4:	0800fe71 	.word	0x0800fe71
 800fca8:	0800fe71 	.word	0x0800fe71
 800fcac:	0800fe5f 	.word	0x0800fe5f
 800fcb0:	0800fe71 	.word	0x0800fe71
 800fcb4:	0800fe71 	.word	0x0800fe71
 800fcb8:	0800fe71 	.word	0x0800fe71
 800fcbc:	0800fe71 	.word	0x0800fe71
 800fcc0:	0800fe71 	.word	0x0800fe71
 800fcc4:	0800fe71 	.word	0x0800fe71
 800fcc8:	0800fe71 	.word	0x0800fe71
 800fccc:	0800fe71 	.word	0x0800fe71
 800fcd0:	0800fe71 	.word	0x0800fe71
 800fcd4:	0800fe71 	.word	0x0800fe71
 800fcd8:	0800fe71 	.word	0x0800fe71
 800fcdc:	0800fe71 	.word	0x0800fe71
 800fce0:	0800fe71 	.word	0x0800fe71
 800fce4:	0800fe71 	.word	0x0800fe71
 800fce8:	0800fe71 	.word	0x0800fe71
 800fcec:	0800fe71 	.word	0x0800fe71
 800fcf0:	0800fe71 	.word	0x0800fe71
 800fcf4:	0800fe71 	.word	0x0800fe71
 800fcf8:	0800fe71 	.word	0x0800fe71
 800fcfc:	0800fe71 	.word	0x0800fe71
 800fd00:	0800fe71 	.word	0x0800fe71
 800fd04:	0800fe71 	.word	0x0800fe71
 800fd08:	0800fe71 	.word	0x0800fe71
 800fd0c:	0800fe71 	.word	0x0800fe71
 800fd10:	0800fe71 	.word	0x0800fe71
 800fd14:	0800fe71 	.word	0x0800fe71
 800fd18:	0800fe71 	.word	0x0800fe71
 800fd1c:	0800fe71 	.word	0x0800fe71
 800fd20:	0800fe71 	.word	0x0800fe71
 800fd24:	0800fe71 	.word	0x0800fe71
 800fd28:	0800fe71 	.word	0x0800fe71
 800fd2c:	0800fe71 	.word	0x0800fe71
 800fd30:	0800fe71 	.word	0x0800fe71
 800fd34:	0800fe71 	.word	0x0800fe71
 800fd38:	0800fe71 	.word	0x0800fe71
 800fd3c:	0800fe71 	.word	0x0800fe71
 800fd40:	0800fe71 	.word	0x0800fe71
 800fd44:	0800fe71 	.word	0x0800fe71
 800fd48:	0800fe71 	.word	0x0800fe71
 800fd4c:	0800fe71 	.word	0x0800fe71
 800fd50:	0800fe71 	.word	0x0800fe71
 800fd54:	0800fe71 	.word	0x0800fe71
 800fd58:	0800fdcf 	.word	0x0800fdcf
 800fd5c:	2b9e      	cmp	r3, #158	@ 0x9e
 800fd5e:	d051      	beq.n	800fe04 <SCSI_ProcessCmd+0x274>
 800fd60:	e086      	b.n	800fe70 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800fd62:	7afb      	ldrb	r3, [r7, #11]
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	4619      	mov	r1, r3
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f000 f893 	bl	800fe94 <SCSI_TestUnitReady>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	75fb      	strb	r3, [r7, #23]
      break;
 800fd72:	e089      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800fd74:	7afb      	ldrb	r3, [r7, #11]
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	4619      	mov	r1, r3
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	f000 fb9a 	bl	80104b4 <SCSI_RequestSense>
 800fd80:	4603      	mov	r3, r0
 800fd82:	75fb      	strb	r3, [r7, #23]
      break;
 800fd84:	e080      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800fd86:	7afb      	ldrb	r3, [r7, #11]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	68f8      	ldr	r0, [r7, #12]
 800fd8e:	f000 f8db 	bl	800ff48 <SCSI_Inquiry>
 800fd92:	4603      	mov	r3, r0
 800fd94:	75fb      	strb	r3, [r7, #23]
      break;
 800fd96:	e077      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800fd98:	7afb      	ldrb	r3, [r7, #11]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f000 fc56 	bl	8010650 <SCSI_StartStopUnit>
 800fda4:	4603      	mov	r3, r0
 800fda6:	75fb      	strb	r3, [r7, #23]
      break;
 800fda8:	e06e      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800fdaa:	7afb      	ldrb	r3, [r7, #11]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	4619      	mov	r1, r3
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f000 fca2 	bl	80106fa <SCSI_AllowPreventRemovable>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	75fb      	strb	r3, [r7, #23]
      break;
 800fdba:	e065      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800fdbc:	7afb      	ldrb	r3, [r7, #11]
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f000 faea 	bl	801039c <SCSI_ModeSense6>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	75fb      	strb	r3, [r7, #23]
      break;
 800fdcc:	e05c      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800fdce:	7afb      	ldrb	r3, [r7, #11]
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	68f8      	ldr	r0, [r7, #12]
 800fdd6:	f000 fb27 	bl	8010428 <SCSI_ModeSense10>
 800fdda:	4603      	mov	r3, r0
 800fddc:	75fb      	strb	r3, [r7, #23]
      break;
 800fdde:	e053      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800fde0:	7afb      	ldrb	r3, [r7, #11]
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	4619      	mov	r1, r3
 800fde6:	68f8      	ldr	r0, [r7, #12]
 800fde8:	f000 fa5c 	bl	80102a4 <SCSI_ReadFormatCapacity>
 800fdec:	4603      	mov	r3, r0
 800fdee:	75fb      	strb	r3, [r7, #23]
      break;
 800fdf0:	e04a      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800fdf2:	7afb      	ldrb	r3, [r7, #11]
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	f000 f921 	bl	8010040 <SCSI_ReadCapacity10>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	75fb      	strb	r3, [r7, #23]
      break;
 800fe02:	e041      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800fe04:	7afb      	ldrb	r3, [r7, #11]
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	4619      	mov	r1, r3
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f000 f996 	bl	801013c <SCSI_ReadCapacity16>
 800fe10:	4603      	mov	r3, r0
 800fe12:	75fb      	strb	r3, [r7, #23]
      break;
 800fe14:	e038      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800fe16:	7afb      	ldrb	r3, [r7, #11]
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f000 fc99 	bl	8010754 <SCSI_Read10>
 800fe22:	4603      	mov	r3, r0
 800fe24:	75fb      	strb	r3, [r7, #23]
      break;
 800fe26:	e02f      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800fe28:	7afb      	ldrb	r3, [r7, #11]
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	68f8      	ldr	r0, [r7, #12]
 800fe30:	f000 fd3a 	bl	80108a8 <SCSI_Read12>
 800fe34:	4603      	mov	r3, r0
 800fe36:	75fb      	strb	r3, [r7, #23]
      break;
 800fe38:	e026      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800fe3a:	7afb      	ldrb	r3, [r7, #11]
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	4619      	mov	r1, r3
 800fe40:	68f8      	ldr	r0, [r7, #12]
 800fe42:	f000 fde5 	bl	8010a10 <SCSI_Write10>
 800fe46:	4603      	mov	r3, r0
 800fe48:	75fb      	strb	r3, [r7, #23]
      break;
 800fe4a:	e01d      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800fe4c:	7afb      	ldrb	r3, [r7, #11]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	4619      	mov	r1, r3
 800fe52:	68f8      	ldr	r0, [r7, #12]
 800fe54:	f000 feb2 	bl	8010bbc <SCSI_Write12>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	75fb      	strb	r3, [r7, #23]
      break;
 800fe5c:	e014      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800fe5e:	7afb      	ldrb	r3, [r7, #11]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	4619      	mov	r1, r3
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f000 ff8f 	bl	8010d88 <SCSI_Verify10>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	75fb      	strb	r3, [r7, #23]
      break;
 800fe6e:	e00b      	b.n	800fe88 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800fe70:	7af9      	ldrb	r1, [r7, #11]
 800fe72:	2320      	movs	r3, #32
 800fe74:	2205      	movs	r2, #5
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f000 fb9f 	bl	80105ba <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	2202      	movs	r2, #2
 800fe80:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800fe82:	23ff      	movs	r3, #255	@ 0xff
 800fe84:	75fb      	strb	r3, [r7, #23]
      break;
 800fe86:	bf00      	nop
  }

  return ret;
 800fe88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3718      	adds	r7, #24
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b086      	sub	sp, #24
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	607a      	str	r2, [r7, #4]
 800fea0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	32b0      	adds	r2, #176	@ 0xb0
 800feac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feb0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d102      	bne.n	800febe <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800feb8:	f04f 33ff 	mov.w	r3, #4294967295
 800febc:	e03f      	b.n	800ff3e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00a      	beq.n	800fede <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800fece:	2320      	movs	r3, #32
 800fed0:	2205      	movs	r2, #5
 800fed2:	68f8      	ldr	r0, [r7, #12]
 800fed4:	f000 fb71 	bl	80105ba <SCSI_SenseCode>

    return -1;
 800fed8:	f04f 33ff 	mov.w	r3, #4294967295
 800fedc:	e02f      	b.n	800ff3e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d10b      	bne.n	800ff00 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fee8:	7af9      	ldrb	r1, [r7, #11]
 800feea:	233a      	movs	r3, #58	@ 0x3a
 800feec:	2202      	movs	r2, #2
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f000 fb63 	bl	80105ba <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	2205      	movs	r2, #5
 800fef8:	721a      	strb	r2, [r3, #8]
    return -1;
 800fefa:	f04f 33ff 	mov.w	r3, #4294967295
 800fefe:	e01e      	b.n	800ff3e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	33b0      	adds	r3, #176	@ 0xb0
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4413      	add	r3, r2
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	7afa      	ldrb	r2, [r7, #11]
 800ff14:	4610      	mov	r0, r2
 800ff16:	4798      	blx	r3
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d00b      	beq.n	800ff36 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ff1e:	7af9      	ldrb	r1, [r7, #11]
 800ff20:	233a      	movs	r3, #58	@ 0x3a
 800ff22:	2202      	movs	r2, #2
 800ff24:	68f8      	ldr	r0, [r7, #12]
 800ff26:	f000 fb48 	bl	80105ba <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	2205      	movs	r2, #5
 800ff2e:	721a      	strb	r2, [r3, #8]

    return -1;
 800ff30:	f04f 33ff 	mov.w	r3, #4294967295
 800ff34:	e003      	b.n	800ff3e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	60da      	str	r2, [r3, #12]

  return 0;
 800ff3c:	2300      	movs	r3, #0
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3718      	adds	r7, #24
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
	...

0800ff48 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b088      	sub	sp, #32
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	460b      	mov	r3, r1
 800ff52:	607a      	str	r2, [r7, #4]
 800ff54:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	32b0      	adds	r2, #176	@ 0xb0
 800ff60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff64:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d102      	bne.n	800ff72 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800ff6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff70:	e05e      	b.n	8010030 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d10a      	bne.n	800ff92 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ff7c:	69bb      	ldr	r3, [r7, #24]
 800ff7e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ff82:	2320      	movs	r3, #32
 800ff84:	2205      	movs	r2, #5
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f000 fb17 	bl	80105ba <SCSI_SenseCode>
    return -1;
 800ff8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff90:	e04e      	b.n	8010030 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	3301      	adds	r3, #1
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	f003 0301 	and.w	r3, r3, #1
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d020      	beq.n	800ffe2 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	3302      	adds	r3, #2
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d105      	bne.n	800ffb6 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800ffaa:	2206      	movs	r2, #6
 800ffac:	4922      	ldr	r1, [pc, #136]	@ (8010038 <SCSI_Inquiry+0xf0>)
 800ffae:	69b8      	ldr	r0, [r7, #24]
 800ffb0:	f001 f870 	bl	8011094 <SCSI_UpdateBotData>
 800ffb4:	e03b      	b.n	801002e <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	3302      	adds	r3, #2
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	2b80      	cmp	r3, #128	@ 0x80
 800ffbe:	d105      	bne.n	800ffcc <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800ffc0:	2208      	movs	r2, #8
 800ffc2:	491e      	ldr	r1, [pc, #120]	@ (801003c <SCSI_Inquiry+0xf4>)
 800ffc4:	69b8      	ldr	r0, [r7, #24]
 800ffc6:	f001 f865 	bl	8011094 <SCSI_UpdateBotData>
 800ffca:	e030      	b.n	801002e <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ffd2:	2324      	movs	r3, #36	@ 0x24
 800ffd4:	2205      	movs	r2, #5
 800ffd6:	68f8      	ldr	r0, [r7, #12]
 800ffd8:	f000 faef 	bl	80105ba <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800ffdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe0:	e026      	b.n	8010030 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	33b0      	adds	r3, #176	@ 0xb0
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	4413      	add	r3, r2
 800fff0:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800fff2:	69d9      	ldr	r1, [r3, #28]
 800fff4:	7afa      	ldrb	r2, [r7, #11]
 800fff6:	4613      	mov	r3, r2
 800fff8:	00db      	lsls	r3, r3, #3
 800fffa:	4413      	add	r3, r2
 800fffc:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800fffe:	440b      	add	r3, r1
 8010000:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	3304      	adds	r3, #4
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	3305      	adds	r3, #5
 801000a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	3304      	adds	r3, #4
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	461a      	mov	r2, r3
 8010014:	8bfb      	ldrh	r3, [r7, #30]
 8010016:	4293      	cmp	r3, r2
 8010018:	d303      	bcc.n	8010022 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	3304      	adds	r3, #4
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8010022:	8bfb      	ldrh	r3, [r7, #30]
 8010024:	461a      	mov	r2, r3
 8010026:	6979      	ldr	r1, [r7, #20]
 8010028:	69b8      	ldr	r0, [r7, #24]
 801002a:	f001 f833 	bl	8011094 <SCSI_UpdateBotData>
  }

  return 0;
 801002e:	2300      	movs	r3, #0
}
 8010030:	4618      	mov	r0, r3
 8010032:	3720      	adds	r7, #32
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	24000088 	.word	0x24000088
 801003c:	24000090 	.word	0x24000090

08010040 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b086      	sub	sp, #24
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	460b      	mov	r3, r1
 801004a:	607a      	str	r2, [r7, #4]
 801004c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	32b0      	adds	r2, #176	@ 0xb0
 8010058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801005c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d102      	bne.n	801006a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8010064:	f04f 33ff 	mov.w	r3, #4294967295
 8010068:	e064      	b.n	8010134 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	33b0      	adds	r3, #176	@ 0xb0
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	4413      	add	r3, r2
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	697a      	ldr	r2, [r7, #20]
 801007e:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 8010082:	697a      	ldr	r2, [r7, #20]
 8010084:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8010088:	7af8      	ldrb	r0, [r7, #11]
 801008a:	4798      	blx	r3
 801008c:	4603      	mov	r3, r0
 801008e:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010090:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d104      	bne.n	80100a2 <SCSI_ReadCapacity10+0x62>
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 801009e:	2b02      	cmp	r3, #2
 80100a0:	d108      	bne.n	80100b4 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80100a2:	7af9      	ldrb	r1, [r7, #11]
 80100a4:	233a      	movs	r3, #58	@ 0x3a
 80100a6:	2202      	movs	r2, #2
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f000 fa86 	bl	80105ba <SCSI_SenseCode>
    return -1;
 80100ae:	f04f 33ff 	mov.w	r3, #4294967295
 80100b2:	e03f      	b.n	8010134 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80100ba:	3b01      	subs	r3, #1
 80100bc:	0e1b      	lsrs	r3, r3, #24
 80100be:	b2da      	uxtb	r2, r3
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80100ca:	3b01      	subs	r3, #1
 80100cc:	0c1b      	lsrs	r3, r3, #16
 80100ce:	b2da      	uxtb	r2, r3
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80100da:	3b01      	subs	r3, #1
 80100dc:	0a1b      	lsrs	r3, r3, #8
 80100de:	b2da      	uxtb	r2, r3
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	3b01      	subs	r3, #1
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80100fa:	161b      	asrs	r3, r3, #24
 80100fc:	b2da      	uxtb	r2, r3
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010108:	141b      	asrs	r3, r3, #16
 801010a:	b2da      	uxtb	r2, r3
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010116:	0a1b      	lsrs	r3, r3, #8
 8010118:	b29b      	uxth	r3, r3
 801011a:	b2da      	uxtb	r2, r3
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010126:	b2da      	uxtb	r2, r3
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	2208      	movs	r2, #8
 8010130:	60da      	str	r2, [r3, #12]

  return 0;
 8010132:	2300      	movs	r3, #0

}
 8010134:	4618      	mov	r0, r3
 8010136:	3718      	adds	r7, #24
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b088      	sub	sp, #32
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	460b      	mov	r3, r1
 8010146:	607a      	str	r2, [r7, #4]
 8010148:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	32b0      	adds	r2, #176	@ 0xb0
 8010154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010158:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d102      	bne.n	8010166 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8010160:	f04f 33ff 	mov.w	r3, #4294967295
 8010164:	e09a      	b.n	801029c <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801016c:	68fa      	ldr	r2, [r7, #12]
 801016e:	33b0      	adds	r3, #176	@ 0xb0
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	4413      	add	r3, r2
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	685b      	ldr	r3, [r3, #4]
 8010178:	69ba      	ldr	r2, [r7, #24]
 801017a:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 801017e:	69ba      	ldr	r2, [r7, #24]
 8010180:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8010184:	7af8      	ldrb	r0, [r7, #11]
 8010186:	4798      	blx	r3
 8010188:	4603      	mov	r3, r0
 801018a:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801018c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d104      	bne.n	801019e <SCSI_ReadCapacity16+0x62>
 8010194:	69bb      	ldr	r3, [r7, #24]
 8010196:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 801019a:	2b02      	cmp	r3, #2
 801019c:	d108      	bne.n	80101b0 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801019e:	7af9      	ldrb	r1, [r7, #11]
 80101a0:	233a      	movs	r3, #58	@ 0x3a
 80101a2:	2202      	movs	r2, #2
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	f000 fa08 	bl	80105ba <SCSI_SenseCode>
    return -1;
 80101aa:	f04f 33ff 	mov.w	r3, #4294967295
 80101ae:	e075      	b.n	801029c <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	330a      	adds	r3, #10
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	330b      	adds	r3, #11
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80101c0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	330c      	adds	r3, #12
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80101ca:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	320d      	adds	r2, #13
 80101d0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80101d2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80101d8:	2300      	movs	r3, #0
 80101da:	61fb      	str	r3, [r7, #28]
 80101dc:	e008      	b.n	80101f0 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 80101de:	69ba      	ldr	r2, [r7, #24]
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	4413      	add	r3, r2
 80101e4:	3310      	adds	r3, #16
 80101e6:	2200      	movs	r2, #0
 80101e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80101ea:	69fb      	ldr	r3, [r7, #28]
 80101ec:	3301      	adds	r3, #1
 80101ee:	61fb      	str	r3, [r7, #28]
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	69fa      	ldr	r2, [r7, #28]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d3f1      	bcc.n	80101de <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010200:	3b01      	subs	r3, #1
 8010202:	0e1b      	lsrs	r3, r3, #24
 8010204:	b2da      	uxtb	r2, r3
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010210:	3b01      	subs	r3, #1
 8010212:	0c1b      	lsrs	r3, r3, #16
 8010214:	b2da      	uxtb	r2, r3
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010220:	3b01      	subs	r3, #1
 8010222:	0a1b      	lsrs	r3, r3, #8
 8010224:	b2da      	uxtb	r2, r3
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801022a:	69bb      	ldr	r3, [r7, #24]
 801022c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010230:	b2db      	uxtb	r3, r3
 8010232:	3b01      	subs	r3, #1
 8010234:	b2da      	uxtb	r2, r3
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010240:	161b      	asrs	r3, r3, #24
 8010242:	b2da      	uxtb	r2, r3
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 801024e:	141b      	asrs	r3, r3, #16
 8010250:	b2da      	uxtb	r2, r3
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 801025c:	0a1b      	lsrs	r3, r3, #8
 801025e:	b29b      	uxth	r3, r3
 8010260:	b2da      	uxtb	r2, r3
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 801026c:	b2da      	uxtb	r2, r3
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	330a      	adds	r3, #10
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	330b      	adds	r3, #11
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010282:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	330c      	adds	r3, #12
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801028c:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	320d      	adds	r2, #13
 8010292:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010294:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	60da      	str	r2, [r3, #12]

  return 0;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3720      	adds	r7, #32
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b088      	sub	sp, #32
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	460b      	mov	r3, r1
 80102ae:	607a      	str	r2, [r7, #4]
 80102b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	32b0      	adds	r2, #176	@ 0xb0
 80102bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102c0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80102c2:	69bb      	ldr	r3, [r7, #24]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d102      	bne.n	80102ce <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 80102c8:	f04f 33ff 	mov.w	r3, #4294967295
 80102cc:	e061      	b.n	8010392 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80102d4:	68fa      	ldr	r2, [r7, #12]
 80102d6:	33b0      	adds	r3, #176	@ 0xb0
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	4413      	add	r3, r2
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	f107 0214 	add.w	r2, r7, #20
 80102e4:	f107 0110 	add.w	r1, r7, #16
 80102e8:	7af8      	ldrb	r0, [r7, #11]
 80102ea:	4798      	blx	r3
 80102ec:	4603      	mov	r3, r0
 80102ee:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80102f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d104      	bne.n	8010302 <SCSI_ReadFormatCapacity+0x5e>
 80102f8:	69bb      	ldr	r3, [r7, #24]
 80102fa:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80102fe:	2b02      	cmp	r3, #2
 8010300:	d108      	bne.n	8010314 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010302:	7af9      	ldrb	r1, [r7, #11]
 8010304:	233a      	movs	r3, #58	@ 0x3a
 8010306:	2202      	movs	r2, #2
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f000 f956 	bl	80105ba <SCSI_SenseCode>
    return -1;
 801030e:	f04f 33ff 	mov.w	r3, #4294967295
 8010312:	e03e      	b.n	8010392 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8010314:	2300      	movs	r3, #0
 8010316:	83fb      	strh	r3, [r7, #30]
 8010318:	e007      	b.n	801032a <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 801031a:	8bfb      	ldrh	r3, [r7, #30]
 801031c:	69ba      	ldr	r2, [r7, #24]
 801031e:	4413      	add	r3, r2
 8010320:	2200      	movs	r2, #0
 8010322:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8010324:	8bfb      	ldrh	r3, [r7, #30]
 8010326:	3301      	adds	r3, #1
 8010328:	83fb      	strh	r3, [r7, #30]
 801032a:	8bfb      	ldrh	r3, [r7, #30]
 801032c:	2b0b      	cmp	r3, #11
 801032e:	d9f4      	bls.n	801031a <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	2208      	movs	r2, #8
 8010334:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	3b01      	subs	r3, #1
 801033a:	0e1b      	lsrs	r3, r3, #24
 801033c:	b2da      	uxtb	r2, r3
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	3b01      	subs	r3, #1
 8010346:	0c1b      	lsrs	r3, r3, #16
 8010348:	b2da      	uxtb	r2, r3
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	3b01      	subs	r3, #1
 8010352:	0a1b      	lsrs	r3, r3, #8
 8010354:	b2da      	uxtb	r2, r3
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	b2db      	uxtb	r3, r3
 801035e:	3b01      	subs	r3, #1
 8010360:	b2da      	uxtb	r2, r3
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	2202      	movs	r2, #2
 801036a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801036c:	8abb      	ldrh	r3, [r7, #20]
 801036e:	141b      	asrs	r3, r3, #16
 8010370:	b2da      	uxtb	r2, r3
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8010376:	8abb      	ldrh	r3, [r7, #20]
 8010378:	0a1b      	lsrs	r3, r3, #8
 801037a:	b29b      	uxth	r3, r3
 801037c:	b2da      	uxtb	r2, r3
 801037e:	69bb      	ldr	r3, [r7, #24]
 8010380:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8010382:	8abb      	ldrh	r3, [r7, #20]
 8010384:	b2da      	uxtb	r2, r3
 8010386:	69bb      	ldr	r3, [r7, #24]
 8010388:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	220c      	movs	r2, #12
 801038e:	60da      	str	r2, [r3, #12]

  return 0;
 8010390:	2300      	movs	r3, #0
}
 8010392:	4618      	mov	r0, r3
 8010394:	3720      	adds	r7, #32
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
	...

0801039c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	460b      	mov	r3, r1
 80103a6:	607a      	str	r2, [r7, #4]
 80103a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	32b0      	adds	r2, #176	@ 0xb0
 80103b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80103ba:	2304      	movs	r3, #4
 80103bc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d102      	bne.n	80103ca <SCSI_ModeSense6+0x2e>
  {
    return -1;
 80103c4:	f04f 33ff 	mov.w	r3, #4294967295
 80103c8:	e027      	b.n	801041a <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80103d0:	68fa      	ldr	r2, [r7, #12]
 80103d2:	33b0      	adds	r3, #176	@ 0xb0
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4413      	add	r3, r2
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	7afa      	ldrb	r2, [r7, #11]
 80103de:	4610      	mov	r0, r2
 80103e0:	4798      	blx	r3
 80103e2:	4603      	mov	r3, r0
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d006      	beq.n	80103f6 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 80103e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010424 <SCSI_ModeSense6+0x88>)
 80103ea:	789b      	ldrb	r3, [r3, #2]
 80103ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80103f0:	b2da      	uxtb	r2, r3
 80103f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010424 <SCSI_ModeSense6+0x88>)
 80103f4:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	3304      	adds	r3, #4
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	461a      	mov	r2, r3
 80103fe:	8afb      	ldrh	r3, [r7, #22]
 8010400:	4293      	cmp	r3, r2
 8010402:	d303      	bcc.n	801040c <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	3304      	adds	r3, #4
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801040c:	8afb      	ldrh	r3, [r7, #22]
 801040e:	461a      	mov	r2, r3
 8010410:	4904      	ldr	r1, [pc, #16]	@ (8010424 <SCSI_ModeSense6+0x88>)
 8010412:	6938      	ldr	r0, [r7, #16]
 8010414:	f000 fe3e 	bl	8011094 <SCSI_UpdateBotData>

  return 0;
 8010418:	2300      	movs	r3, #0
}
 801041a:	4618      	mov	r0, r3
 801041c:	3718      	adds	r7, #24
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
 8010422:	bf00      	nop
 8010424:	24000098 	.word	0x24000098

08010428 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b086      	sub	sp, #24
 801042c:	af00      	add	r7, sp, #0
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	460b      	mov	r3, r1
 8010432:	607a      	str	r2, [r7, #4]
 8010434:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	32b0      	adds	r2, #176	@ 0xb0
 8010440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010444:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8010446:	2308      	movs	r3, #8
 8010448:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d102      	bne.n	8010456 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8010450:	f04f 33ff 	mov.w	r3, #4294967295
 8010454:	e027      	b.n	80104a6 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801045c:	68fa      	ldr	r2, [r7, #12]
 801045e:	33b0      	adds	r3, #176	@ 0xb0
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	4413      	add	r3, r2
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	7afa      	ldrb	r2, [r7, #11]
 801046a:	4610      	mov	r0, r2
 801046c:	4798      	blx	r3
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d006      	beq.n	8010482 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8010474:	4b0e      	ldr	r3, [pc, #56]	@ (80104b0 <SCSI_ModeSense10+0x88>)
 8010476:	78db      	ldrb	r3, [r3, #3]
 8010478:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801047c:	b2da      	uxtb	r2, r3
 801047e:	4b0c      	ldr	r3, [pc, #48]	@ (80104b0 <SCSI_ModeSense10+0x88>)
 8010480:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	3308      	adds	r3, #8
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	461a      	mov	r2, r3
 801048a:	8afb      	ldrh	r3, [r7, #22]
 801048c:	4293      	cmp	r3, r2
 801048e:	d303      	bcc.n	8010498 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	3308      	adds	r3, #8
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8010498:	8afb      	ldrh	r3, [r7, #22]
 801049a:	461a      	mov	r2, r3
 801049c:	4904      	ldr	r1, [pc, #16]	@ (80104b0 <SCSI_ModeSense10+0x88>)
 801049e:	6938      	ldr	r0, [r7, #16]
 80104a0:	f000 fdf8 	bl	8011094 <SCSI_UpdateBotData>

  return 0;
 80104a4:	2300      	movs	r3, #0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3718      	adds	r7, #24
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	2400009c 	.word	0x2400009c

080104b4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b086      	sub	sp, #24
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	460b      	mov	r3, r1
 80104be:	607a      	str	r2, [r7, #4]
 80104c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	32b0      	adds	r2, #176	@ 0xb0
 80104cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104d0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d102      	bne.n	80104de <SCSI_RequestSense+0x2a>
  {
    return -1;
 80104d8:	f04f 33ff 	mov.w	r3, #4294967295
 80104dc:	e069      	b.n	80105b2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d10a      	bne.n	80104fe <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80104ee:	2320      	movs	r3, #32
 80104f0:	2205      	movs	r2, #5
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f000 f861 	bl	80105ba <SCSI_SenseCode>
    return -1;
 80104f8:	f04f 33ff 	mov.w	r3, #4294967295
 80104fc:	e059      	b.n	80105b2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80104fe:	2300      	movs	r3, #0
 8010500:	75fb      	strb	r3, [r7, #23]
 8010502:	e007      	b.n	8010514 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8010504:	7dfb      	ldrb	r3, [r7, #23]
 8010506:	693a      	ldr	r2, [r7, #16]
 8010508:	4413      	add	r3, r2
 801050a:	2200      	movs	r2, #0
 801050c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801050e:	7dfb      	ldrb	r3, [r7, #23]
 8010510:	3301      	adds	r3, #1
 8010512:	75fb      	strb	r3, [r7, #23]
 8010514:	7dfb      	ldrb	r3, [r7, #23]
 8010516:	2b11      	cmp	r3, #17
 8010518:	d9f4      	bls.n	8010504 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	2270      	movs	r2, #112	@ 0x70
 801051e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	220c      	movs	r2, #12
 8010524:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8010532:	429a      	cmp	r2, r3
 8010534:	d02e      	beq.n	8010594 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 801053c:	461a      	mov	r2, r3
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	3248      	adds	r2, #72	@ 0x48
 8010542:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	3348      	adds	r3, #72	@ 0x48
 8010554:	00db      	lsls	r3, r3, #3
 8010556:	4413      	add	r3, r2
 8010558:	791a      	ldrb	r2, [r3, #4]
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8010564:	693a      	ldr	r2, [r7, #16]
 8010566:	3348      	adds	r3, #72	@ 0x48
 8010568:	00db      	lsls	r3, r3, #3
 801056a:	4413      	add	r3, r2
 801056c:	795a      	ldrb	r2, [r3, #5]
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8010578:	3301      	adds	r3, #1
 801057a:	b2da      	uxtb	r2, r3
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8010588:	2b04      	cmp	r3, #4
 801058a:	d103      	bne.n	8010594 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	2200      	movs	r2, #0
 8010590:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	2212      	movs	r2, #18
 8010598:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	3304      	adds	r3, #4
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	2b12      	cmp	r3, #18
 80105a2:	d805      	bhi.n	80105b0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	3304      	adds	r3, #4
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	461a      	mov	r2, r3
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3718      	adds	r7, #24
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80105ba:	b480      	push	{r7}
 80105bc:	b085      	sub	sp, #20
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
 80105c2:	4608      	mov	r0, r1
 80105c4:	4611      	mov	r1, r2
 80105c6:	461a      	mov	r2, r3
 80105c8:	4603      	mov	r3, r0
 80105ca:	70fb      	strb	r3, [r7, #3]
 80105cc:	460b      	mov	r3, r1
 80105ce:	70bb      	strb	r3, [r7, #2]
 80105d0:	4613      	mov	r3, r2
 80105d2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	32b0      	adds	r2, #176	@ 0xb0
 80105de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105e2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d02c      	beq.n	8010644 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80105f0:	461a      	mov	r2, r3
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	3248      	adds	r2, #72	@ 0x48
 80105f6:	78b9      	ldrb	r1, [r7, #2]
 80105f8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8010602:	68fa      	ldr	r2, [r7, #12]
 8010604:	3348      	adds	r3, #72	@ 0x48
 8010606:	00db      	lsls	r3, r3, #3
 8010608:	4413      	add	r3, r2
 801060a:	787a      	ldrb	r2, [r7, #1]
 801060c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8010614:	68fa      	ldr	r2, [r7, #12]
 8010616:	3348      	adds	r3, #72	@ 0x48
 8010618:	00db      	lsls	r3, r3, #3
 801061a:	4413      	add	r3, r2
 801061c:	2200      	movs	r2, #0
 801061e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8010626:	3301      	adds	r3, #1
 8010628:	b2da      	uxtb	r2, r3
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8010636:	2b04      	cmp	r3, #4
 8010638:	d105      	bne.n	8010646 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2200      	movs	r2, #0
 801063e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8010642:	e000      	b.n	8010646 <SCSI_SenseCode+0x8c>
    return;
 8010644:	bf00      	nop
  }
}
 8010646:	3714      	adds	r7, #20
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af00      	add	r7, sp, #0
 8010656:	60f8      	str	r0, [r7, #12]
 8010658:	460b      	mov	r3, r1
 801065a:	607a      	str	r2, [r7, #4]
 801065c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	32b0      	adds	r2, #176	@ 0xb0
 8010668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801066c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d102      	bne.n	801067a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8010674:	f04f 33ff 	mov.w	r3, #4294967295
 8010678:	e03b      	b.n	80106f2 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8010680:	2b01      	cmp	r3, #1
 8010682:	d10f      	bne.n	80106a4 <SCSI_StartStopUnit+0x54>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	3304      	adds	r3, #4
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	f003 0303 	and.w	r3, r3, #3
 801068e:	2b02      	cmp	r3, #2
 8010690:	d108      	bne.n	80106a4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8010692:	7af9      	ldrb	r1, [r7, #11]
 8010694:	2324      	movs	r3, #36	@ 0x24
 8010696:	2205      	movs	r2, #5
 8010698:	68f8      	ldr	r0, [r7, #12]
 801069a:	f7ff ff8e 	bl	80105ba <SCSI_SenseCode>

    return -1;
 801069e:	f04f 33ff 	mov.w	r3, #4294967295
 80106a2:	e026      	b.n	80106f2 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	3304      	adds	r3, #4
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	f003 0303 	and.w	r3, r3, #3
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	d104      	bne.n	80106bc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	2200      	movs	r2, #0
 80106b6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80106ba:	e016      	b.n	80106ea <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	3304      	adds	r3, #4
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	f003 0303 	and.w	r3, r3, #3
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	d104      	bne.n	80106d4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	2202      	movs	r2, #2
 80106ce:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80106d2:	e00a      	b.n	80106ea <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	3304      	adds	r3, #4
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	f003 0303 	and.w	r3, r3, #3
 80106de:	2b03      	cmp	r3, #3
 80106e0:	d103      	bne.n	80106ea <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	2200      	movs	r2, #0
 80106e6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	2200      	movs	r2, #0
 80106ee:	60da      	str	r2, [r3, #12]

  return 0;
 80106f0:	2300      	movs	r3, #0
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3718      	adds	r7, #24
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80106fa:	b480      	push	{r7}
 80106fc:	b087      	sub	sp, #28
 80106fe:	af00      	add	r7, sp, #0
 8010700:	60f8      	str	r0, [r7, #12]
 8010702:	460b      	mov	r3, r1
 8010704:	607a      	str	r2, [r7, #4]
 8010706:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	32b0      	adds	r2, #176	@ 0xb0
 8010712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010716:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d102      	bne.n	8010724 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801071e:	f04f 33ff 	mov.w	r3, #4294967295
 8010722:	e011      	b.n	8010748 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	3304      	adds	r3, #4
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d104      	bne.n	8010738 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	2200      	movs	r2, #0
 8010732:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8010736:	e003      	b.n	8010740 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	2201      	movs	r2, #1
 801073c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	2200      	movs	r2, #0
 8010744:	60da      	str	r2, [r3, #12]

  return 0;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	371c      	adds	r7, #28
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b086      	sub	sp, #24
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	460b      	mov	r3, r1
 801075e:	607a      	str	r2, [r7, #4]
 8010760:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	32b0      	adds	r2, #176	@ 0xb0
 801076c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010770:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d102      	bne.n	801077e <SCSI_Read10+0x2a>
  {
    return -1;
 8010778:	f04f 33ff 	mov.w	r3, #4294967295
 801077c:	e090      	b.n	80108a0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	7a1b      	ldrb	r3, [r3, #8]
 8010782:	2b00      	cmp	r3, #0
 8010784:	f040 8082 	bne.w	801088c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 801078e:	b25b      	sxtb	r3, r3
 8010790:	2b00      	cmp	r3, #0
 8010792:	db0a      	blt.n	80107aa <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801079a:	2320      	movs	r3, #32
 801079c:	2205      	movs	r2, #5
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f7ff ff0b 	bl	80105ba <SCSI_SenseCode>
      return -1;
 80107a4:	f04f 33ff 	mov.w	r3, #4294967295
 80107a8:	e07a      	b.n	80108a0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	d108      	bne.n	80107c6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80107b4:	7af9      	ldrb	r1, [r7, #11]
 80107b6:	233a      	movs	r3, #58	@ 0x3a
 80107b8:	2202      	movs	r2, #2
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	f7ff fefd 	bl	80105ba <SCSI_SenseCode>

      return -1;
 80107c0:	f04f 33ff 	mov.w	r3, #4294967295
 80107c4:	e06c      	b.n	80108a0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	33b0      	adds	r3, #176	@ 0xb0
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	4413      	add	r3, r2
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	689b      	ldr	r3, [r3, #8]
 80107d8:	7afa      	ldrb	r2, [r7, #11]
 80107da:	4610      	mov	r0, r2
 80107dc:	4798      	blx	r3
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d008      	beq.n	80107f6 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80107e4:	7af9      	ldrb	r1, [r7, #11]
 80107e6:	233a      	movs	r3, #58	@ 0x3a
 80107e8:	2202      	movs	r2, #2
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	f7ff fee5 	bl	80105ba <SCSI_SenseCode>
      return -1;
 80107f0:	f04f 33ff 	mov.w	r3, #4294967295
 80107f4:	e054      	b.n	80108a0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	3302      	adds	r3, #2
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	3303      	adds	r3, #3
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010806:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	3304      	adds	r3, #4
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010810:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	3205      	adds	r2, #5
 8010816:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8010818:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	3307      	adds	r3, #7
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	021b      	lsls	r3, r3, #8
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	3208      	adds	r2, #8
 801082c:	7812      	ldrb	r2, [r2, #0]
 801082e:	431a      	orrs	r2, r3
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010842:	7af9      	ldrb	r1, [r7, #11]
 8010844:	68f8      	ldr	r0, [r7, #12]
 8010846:	f000 fadc 	bl	8010e02 <SCSI_CheckAddressRange>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	da02      	bge.n	8010856 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010850:	f04f 33ff 	mov.w	r3, #4294967295
 8010854:	e024      	b.n	80108a0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010862:	6979      	ldr	r1, [r7, #20]
 8010864:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8010868:	fb01 f303 	mul.w	r3, r1, r3
 801086c:	429a      	cmp	r2, r3
 801086e:	d00a      	beq.n	8010886 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010876:	2320      	movs	r3, #32
 8010878:	2205      	movs	r2, #5
 801087a:	68f8      	ldr	r0, [r7, #12]
 801087c:	f7ff fe9d 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010880:	f04f 33ff 	mov.w	r3, #4294967295
 8010884:	e00c      	b.n	80108a0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	2202      	movs	r2, #2
 801088a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010892:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8010894:	7afb      	ldrb	r3, [r7, #11]
 8010896:	4619      	mov	r1, r3
 8010898:	68f8      	ldr	r0, [r7, #12]
 801089a:	f000 fadf 	bl	8010e5c <SCSI_ProcessRead>
 801089e:	4603      	mov	r3, r0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3718      	adds	r7, #24
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b086      	sub	sp, #24
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	460b      	mov	r3, r1
 80108b2:	607a      	str	r2, [r7, #4]
 80108b4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	32b0      	adds	r2, #176	@ 0xb0
 80108c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d102      	bne.n	80108d2 <SCSI_Read12+0x2a>
  {
    return -1;
 80108cc:	f04f 33ff 	mov.w	r3, #4294967295
 80108d0:	e09a      	b.n	8010a08 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	7a1b      	ldrb	r3, [r3, #8]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f040 808c 	bne.w	80109f4 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80108e2:	b25b      	sxtb	r3, r3
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	db0a      	blt.n	80108fe <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80108ee:	2320      	movs	r3, #32
 80108f0:	2205      	movs	r2, #5
 80108f2:	68f8      	ldr	r0, [r7, #12]
 80108f4:	f7ff fe61 	bl	80105ba <SCSI_SenseCode>
      return -1;
 80108f8:	f04f 33ff 	mov.w	r3, #4294967295
 80108fc:	e084      	b.n	8010a08 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8010904:	2b02      	cmp	r3, #2
 8010906:	d108      	bne.n	801091a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010908:	7af9      	ldrb	r1, [r7, #11]
 801090a:	233a      	movs	r3, #58	@ 0x3a
 801090c:	2202      	movs	r2, #2
 801090e:	68f8      	ldr	r0, [r7, #12]
 8010910:	f7ff fe53 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010914:	f04f 33ff 	mov.w	r3, #4294967295
 8010918:	e076      	b.n	8010a08 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010920:	68fa      	ldr	r2, [r7, #12]
 8010922:	33b0      	adds	r3, #176	@ 0xb0
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	4413      	add	r3, r2
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	689b      	ldr	r3, [r3, #8]
 801092c:	7afa      	ldrb	r2, [r7, #11]
 801092e:	4610      	mov	r0, r2
 8010930:	4798      	blx	r3
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d008      	beq.n	801094a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010938:	7af9      	ldrb	r1, [r7, #11]
 801093a:	233a      	movs	r3, #58	@ 0x3a
 801093c:	2202      	movs	r2, #2
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f7ff fe3b 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010944:	f04f 33ff 	mov.w	r3, #4294967295
 8010948:	e05e      	b.n	8010a08 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	3302      	adds	r3, #2
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	3303      	adds	r3, #3
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801095a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	3304      	adds	r3, #4
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010964:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	3205      	adds	r2, #5
 801096a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801096c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	3306      	adds	r3, #6
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	3307      	adds	r3, #7
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010984:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	3308      	adds	r3, #8
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801098e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	3209      	adds	r2, #9
 8010994:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8010996:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80109aa:	7af9      	ldrb	r1, [r7, #11]
 80109ac:	68f8      	ldr	r0, [r7, #12]
 80109ae:	f000 fa28 	bl	8010e02 <SCSI_CheckAddressRange>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	da02      	bge.n	80109be <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80109b8:	f04f 33ff 	mov.w	r3, #4294967295
 80109bc:	e024      	b.n	8010a08 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80109ca:	6979      	ldr	r1, [r7, #20]
 80109cc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80109d0:	fb01 f303 	mul.w	r3, r1, r3
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d00a      	beq.n	80109ee <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80109de:	2320      	movs	r3, #32
 80109e0:	2205      	movs	r2, #5
 80109e2:	68f8      	ldr	r0, [r7, #12]
 80109e4:	f7ff fde9 	bl	80105ba <SCSI_SenseCode>
      return -1;
 80109e8:	f04f 33ff 	mov.w	r3, #4294967295
 80109ec:	e00c      	b.n	8010a08 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	2202      	movs	r2, #2
 80109f2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109fa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80109fc:	7afb      	ldrb	r3, [r7, #11]
 80109fe:	4619      	mov	r1, r3
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f000 fa2b 	bl	8010e5c <SCSI_ProcessRead>
 8010a06:	4603      	mov	r3, r0
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3718      	adds	r7, #24
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b086      	sub	sp, #24
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	460b      	mov	r3, r1
 8010a1a:	607a      	str	r2, [r7, #4]
 8010a1c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	32b0      	adds	r2, #176	@ 0xb0
 8010a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a2c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d102      	bne.n	8010a3a <SCSI_Write10+0x2a>
  {
    return -1;
 8010a34:	f04f 33ff 	mov.w	r3, #4294967295
 8010a38:	e0ba      	b.n	8010bb0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	7a1b      	ldrb	r3, [r3, #8]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	f040 80b0 	bne.w	8010ba4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d10a      	bne.n	8010a64 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010a54:	2320      	movs	r3, #32
 8010a56:	2205      	movs	r2, #5
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f7ff fdae 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a62:	e0a5      	b.n	8010bb0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8010a6a:	b25b      	sxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	da0a      	bge.n	8010a86 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010a76:	2320      	movs	r3, #32
 8010a78:	2205      	movs	r2, #5
 8010a7a:	68f8      	ldr	r0, [r7, #12]
 8010a7c:	f7ff fd9d 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010a80:	f04f 33ff 	mov.w	r3, #4294967295
 8010a84:	e094      	b.n	8010bb0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	33b0      	adds	r3, #176	@ 0xb0
 8010a90:	009b      	lsls	r3, r3, #2
 8010a92:	4413      	add	r3, r2
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	7afa      	ldrb	r2, [r7, #11]
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	4798      	blx	r3
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d008      	beq.n	8010ab6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010aa4:	7af9      	ldrb	r1, [r7, #11]
 8010aa6:	233a      	movs	r3, #58	@ 0x3a
 8010aa8:	2202      	movs	r2, #2
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f7ff fd85 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ab4:	e07c      	b.n	8010bb0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	33b0      	adds	r3, #176	@ 0xb0
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	4413      	add	r3, r2
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	68db      	ldr	r3, [r3, #12]
 8010ac8:	7afa      	ldrb	r2, [r7, #11]
 8010aca:	4610      	mov	r0, r2
 8010acc:	4798      	blx	r3
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d008      	beq.n	8010ae6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8010ad4:	7af9      	ldrb	r1, [r7, #11]
 8010ad6:	2327      	movs	r3, #39	@ 0x27
 8010ad8:	2202      	movs	r2, #2
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f7ff fd6d 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ae4:	e064      	b.n	8010bb0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	3302      	adds	r3, #2
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	3303      	adds	r3, #3
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010af6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	3304      	adds	r3, #4
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010b00:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	3205      	adds	r2, #5
 8010b06:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8010b08:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	3307      	adds	r3, #7
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	3208      	adds	r2, #8
 8010b1c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010b1e:	431a      	orrs	r2, r3
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010b32:	7af9      	ldrb	r1, [r7, #11]
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f000 f964 	bl	8010e02 <SCSI_CheckAddressRange>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	da02      	bge.n	8010b46 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010b40:	f04f 33ff 	mov.w	r3, #4294967295
 8010b44:	e034      	b.n	8010bb0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010b4c:	697a      	ldr	r2, [r7, #20]
 8010b4e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8010b52:	fb02 f303 	mul.w	r3, r2, r3
 8010b56:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010b5e:	693a      	ldr	r2, [r7, #16]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d00a      	beq.n	8010b7a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010b6a:	2320      	movs	r3, #32
 8010b6c:	2205      	movs	r2, #5
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f7ff fd23 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010b74:	f04f 33ff 	mov.w	r3, #4294967295
 8010b78:	e01a      	b.n	8010bb0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b80:	bf28      	it	cs
 8010b82:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8010b86:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8010b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8010bb8 <SCSI_Write10+0x1a8>)
 8010b90:	7819      	ldrb	r1, [r3, #0]
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	f103 0210 	add.w	r2, r3, #16
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	68f8      	ldr	r0, [r7, #12]
 8010b9c:	f002 facd 	bl	801313a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	e005      	b.n	8010bb0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8010ba4:	7afb      	ldrb	r3, [r7, #11]
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f000 f9dd 	bl	8010f68 <SCSI_ProcessWrite>
 8010bae:	4603      	mov	r3, r0
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3718      	adds	r7, #24
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	24000087 	.word	0x24000087

08010bbc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b086      	sub	sp, #24
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	607a      	str	r2, [r7, #4]
 8010bc8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	32b0      	adds	r2, #176	@ 0xb0
 8010bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bd8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d102      	bne.n	8010be6 <SCSI_Write12+0x2a>
  {
    return -1;
 8010be0:	f04f 33ff 	mov.w	r3, #4294967295
 8010be4:	e0ca      	b.n	8010d7c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	7a1b      	ldrb	r3, [r3, #8]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	f040 80c0 	bne.w	8010d70 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d10a      	bne.n	8010c10 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010c00:	2320      	movs	r3, #32
 8010c02:	2205      	movs	r2, #5
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f7ff fcd8 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8010c0e:	e0b5      	b.n	8010d7c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8010c16:	b25b      	sxtb	r3, r3
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	da0a      	bge.n	8010c32 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010c22:	2320      	movs	r3, #32
 8010c24:	2205      	movs	r2, #5
 8010c26:	68f8      	ldr	r0, [r7, #12]
 8010c28:	f7ff fcc7 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c30:	e0a4      	b.n	8010d7c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	33b0      	adds	r3, #176	@ 0xb0
 8010c3c:	009b      	lsls	r3, r3, #2
 8010c3e:	4413      	add	r3, r2
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	689b      	ldr	r3, [r3, #8]
 8010c44:	7afa      	ldrb	r2, [r7, #11]
 8010c46:	4610      	mov	r0, r2
 8010c48:	4798      	blx	r3
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00b      	beq.n	8010c68 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010c50:	7af9      	ldrb	r1, [r7, #11]
 8010c52:	233a      	movs	r3, #58	@ 0x3a
 8010c54:	2202      	movs	r2, #2
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f7ff fcaf 	bl	80105ba <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	2205      	movs	r2, #5
 8010c60:	721a      	strb	r2, [r3, #8]
      return -1;
 8010c62:	f04f 33ff 	mov.w	r3, #4294967295
 8010c66:	e089      	b.n	8010d7c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	33b0      	adds	r3, #176	@ 0xb0
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	4413      	add	r3, r2
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	7afa      	ldrb	r2, [r7, #11]
 8010c7c:	4610      	mov	r0, r2
 8010c7e:	4798      	blx	r3
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d00b      	beq.n	8010c9e <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8010c86:	7af9      	ldrb	r1, [r7, #11]
 8010c88:	2327      	movs	r3, #39	@ 0x27
 8010c8a:	2202      	movs	r2, #2
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f7ff fc94 	bl	80105ba <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	2205      	movs	r2, #5
 8010c96:	721a      	strb	r2, [r3, #8]
      return -1;
 8010c98:	f04f 33ff 	mov.w	r3, #4294967295
 8010c9c:	e06e      	b.n	8010d7c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	3302      	adds	r3, #2
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	3303      	adds	r3, #3
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010cae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010cb8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	3205      	adds	r2, #5
 8010cbe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8010cc0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	3306      	adds	r3, #6
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3307      	adds	r3, #7
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010cd8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	3308      	adds	r3, #8
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8010ce2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	3209      	adds	r2, #9
 8010ce8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8010cea:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010cfe:	7af9      	ldrb	r1, [r7, #11]
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f000 f87e 	bl	8010e02 <SCSI_CheckAddressRange>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	da02      	bge.n	8010d12 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d10:	e034      	b.n	8010d7c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010d18:	697a      	ldr	r2, [r7, #20]
 8010d1a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8010d1e:	fb02 f303 	mul.w	r3, r2, r3
 8010d22:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010d2a:	693a      	ldr	r2, [r7, #16]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d00a      	beq.n	8010d46 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010d36:	2320      	movs	r3, #32
 8010d38:	2205      	movs	r2, #5
 8010d3a:	68f8      	ldr	r0, [r7, #12]
 8010d3c:	f7ff fc3d 	bl	80105ba <SCSI_SenseCode>
      return -1;
 8010d40:	f04f 33ff 	mov.w	r3, #4294967295
 8010d44:	e01a      	b.n	8010d7c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d4c:	bf28      	it	cs
 8010d4e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8010d52:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	2201      	movs	r2, #1
 8010d58:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8010d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8010d84 <SCSI_Write12+0x1c8>)
 8010d5c:	7819      	ldrb	r1, [r3, #0]
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	f103 0210 	add.w	r2, r3, #16
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	68f8      	ldr	r0, [r7, #12]
 8010d68:	f002 f9e7 	bl	801313a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	e005      	b.n	8010d7c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8010d70:	7afb      	ldrb	r3, [r7, #11]
 8010d72:	4619      	mov	r1, r3
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f000 f8f7 	bl	8010f68 <SCSI_ProcessWrite>
 8010d7a:	4603      	mov	r3, r0
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3718      	adds	r7, #24
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	24000087 	.word	0x24000087

08010d88 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	460b      	mov	r3, r1
 8010d92:	607a      	str	r2, [r7, #4]
 8010d94:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	32b0      	adds	r2, #176	@ 0xb0
 8010da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010da4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d102      	bne.n	8010db2 <SCSI_Verify10+0x2a>
  {
    return -1;
 8010dac:	f04f 33ff 	mov.w	r3, #4294967295
 8010db0:	e023      	b.n	8010dfa <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	3301      	adds	r3, #1
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	f003 0302 	and.w	r3, r3, #2
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d008      	beq.n	8010dd2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8010dc0:	7af9      	ldrb	r1, [r7, #11]
 8010dc2:	2324      	movs	r3, #36	@ 0x24
 8010dc4:	2205      	movs	r2, #5
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f7ff fbf7 	bl	80105ba <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8010dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8010dd0:	e013      	b.n	8010dfa <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010dde:	7af9      	ldrb	r1, [r7, #11]
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f000 f80e 	bl	8010e02 <SCSI_CheckAddressRange>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	da02      	bge.n	8010df2 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8010dec:	f04f 33ff 	mov.w	r3, #4294967295
 8010df0:	e003      	b.n	8010dfa <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	2200      	movs	r2, #0
 8010df6:	60da      	str	r2, [r3, #12]

  return 0;
 8010df8:	2300      	movs	r3, #0
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3718      	adds	r7, #24
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}

08010e02 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8010e02:	b580      	push	{r7, lr}
 8010e04:	b086      	sub	sp, #24
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	60f8      	str	r0, [r7, #12]
 8010e0a:	607a      	str	r2, [r7, #4]
 8010e0c:	603b      	str	r3, [r7, #0]
 8010e0e:	460b      	mov	r3, r1
 8010e10:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	32b0      	adds	r2, #176	@ 0xb0
 8010e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e20:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d102      	bne.n	8010e2e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8010e28:	f04f 33ff 	mov.w	r3, #4294967295
 8010e2c:	e011      	b.n	8010e52 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	441a      	add	r2, r3
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d908      	bls.n	8010e50 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8010e3e:	7af9      	ldrb	r1, [r7, #11]
 8010e40:	2321      	movs	r3, #33	@ 0x21
 8010e42:	2205      	movs	r2, #5
 8010e44:	68f8      	ldr	r0, [r7, #12]
 8010e46:	f7ff fbb8 	bl	80105ba <SCSI_SenseCode>
    return -1;
 8010e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8010e4e:	e000      	b.n	8010e52 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8010e50:	2300      	movs	r3, #0
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
	...

08010e5c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8010e5c:	b590      	push	{r4, r7, lr}
 8010e5e:	b085      	sub	sp, #20
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	460b      	mov	r3, r1
 8010e66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	32b0      	adds	r2, #176	@ 0xb0
 8010e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e76:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d102      	bne.n	8010e84 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8010e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e82:	e06a      	b.n	8010f5a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010e8a:	68fa      	ldr	r2, [r7, #12]
 8010e8c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8010e90:	fb02 f303 	mul.w	r3, r2, r3
 8010e94:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e9c:	bf28      	it	cs
 8010e9e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8010ea2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	33b0      	adds	r3, #176	@ 0xb0
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	4413      	add	r3, r2
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	691c      	ldr	r4, [r3, #16]
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f103 0110 	add.w	r1, r3, #16
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010ec8:	4618      	mov	r0, r3
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	78f8      	ldrb	r0, [r7, #3]
 8010ed4:	47a0      	blx	r4
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	da08      	bge.n	8010eee <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8010edc:	78f9      	ldrb	r1, [r7, #3]
 8010ede:	2311      	movs	r3, #17
 8010ee0:	2204      	movs	r2, #4
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f7ff fb69 	bl	80105ba <SCSI_SenseCode>
    return -1;
 8010ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8010eec:	e035      	b.n	8010f5a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8010eee:	4b1d      	ldr	r3, [pc, #116]	@ (8010f64 <SCSI_ProcessRead+0x108>)
 8010ef0:	7819      	ldrb	r1, [r3, #0]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f103 0210 	add.w	r2, r3, #16
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f002 f8fc 	bl	80130f8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f14:	441a      	add	r2, r3
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010f28:	4619      	mov	r1, r3
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f30:	1ad2      	subs	r2, r2, r3
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	1ad2      	subs	r2, r2, r3
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d102      	bne.n	8010f58 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2203      	movs	r2, #3
 8010f56:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8010f58:	2300      	movs	r3, #0
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3714      	adds	r7, #20
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd90      	pop	{r4, r7, pc}
 8010f62:	bf00      	nop
 8010f64:	24000086 	.word	0x24000086

08010f68 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8010f68:	b590      	push	{r4, r7, lr}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	460b      	mov	r3, r1
 8010f72:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	32b0      	adds	r2, #176	@ 0xb0
 8010f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f82:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d102      	bne.n	8010f90 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8010f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f8e:	e07a      	b.n	8011086 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010f96:	68fa      	ldr	r2, [r7, #12]
 8010f98:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8010f9c:	fb02 f303 	mul.w	r3, r2, r3
 8010fa0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fa8:	bf28      	it	cs
 8010faa:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8010fae:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	33b0      	adds	r3, #176	@ 0xb0
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	4413      	add	r3, r2
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	695c      	ldr	r4, [r3, #20]
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f103 0110 	add.w	r1, r3, #16
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	78f8      	ldrb	r0, [r7, #3]
 8010fe0:	47a0      	blx	r4
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	da08      	bge.n	8010ffa <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8010fe8:	78f9      	ldrb	r1, [r7, #3]
 8010fea:	2303      	movs	r3, #3
 8010fec:	2204      	movs	r2, #4
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f7ff fae3 	bl	80105ba <SCSI_SenseCode>
    return -1;
 8010ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ff8:	e045      	b.n	8011086 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011006:	4619      	mov	r1, r3
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	fbb3 f3f1 	udiv	r3, r3, r1
 801100e:	441a      	add	r2, r3
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011022:	4619      	mov	r1, r3
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	fbb3 f3f1 	udiv	r3, r3, r1
 801102a:	1ad2      	subs	r2, r2, r3
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	1ad2      	subs	r2, r2, r3
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011048:	2b00      	cmp	r3, #0
 801104a:	d104      	bne.n	8011056 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801104c:	2100      	movs	r1, #0
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f7fe fce8 	bl	800fa24 <MSC_BOT_SendCSW>
 8011054:	e016      	b.n	8011084 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8011062:	fb02 f303 	mul.w	r3, r2, r3
 8011066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801106a:	bf28      	it	cs
 801106c:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8011070:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8011072:	4b07      	ldr	r3, [pc, #28]	@ (8011090 <SCSI_ProcessWrite+0x128>)
 8011074:	7819      	ldrb	r1, [r3, #0]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f103 0210 	add.w	r2, r3, #16
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f002 f85b 	bl	801313a <USBD_LL_PrepareReceive>
  }

  return 0;
 8011084:	2300      	movs	r3, #0
}
 8011086:	4618      	mov	r0, r3
 8011088:	3714      	adds	r7, #20
 801108a:	46bd      	mov	sp, r7
 801108c:	bd90      	pop	{r4, r7, pc}
 801108e:	bf00      	nop
 8011090:	24000087 	.word	0x24000087

08011094 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8011094:	b480      	push	{r7}
 8011096:	b087      	sub	sp, #28
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	4613      	mov	r3, r2
 80110a0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80110a2:	88fb      	ldrh	r3, [r7, #6]
 80110a4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d102      	bne.n	80110b2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80110ac:	f04f 33ff 	mov.w	r3, #4294967295
 80110b0:	e013      	b.n	80110da <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80110b2:	8afa      	ldrh	r2, [r7, #22]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80110b8:	e00b      	b.n	80110d2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80110ba:	8afb      	ldrh	r3, [r7, #22]
 80110bc:	3b01      	subs	r3, #1
 80110be:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80110c0:	8afb      	ldrh	r3, [r7, #22]
 80110c2:	68ba      	ldr	r2, [r7, #8]
 80110c4:	441a      	add	r2, r3
 80110c6:	8afb      	ldrh	r3, [r7, #22]
 80110c8:	7811      	ldrb	r1, [r2, #0]
 80110ca:	68fa      	ldr	r2, [r7, #12]
 80110cc:	4413      	add	r3, r2
 80110ce:	460a      	mov	r2, r1
 80110d0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80110d2:	8afb      	ldrh	r3, [r7, #22]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d1f0      	bne.n	80110ba <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80110d8:	2300      	movs	r3, #0
}
 80110da:	4618      	mov	r0, r3
 80110dc:	371c      	adds	r7, #28
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr

080110e6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b086      	sub	sp, #24
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	60f8      	str	r0, [r7, #12]
 80110ee:	60b9      	str	r1, [r7, #8]
 80110f0:	4613      	mov	r3, r2
 80110f2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d101      	bne.n	80110fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80110fa:	2303      	movs	r3, #3
 80110fc:	e01f      	b.n	801113e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2200      	movs	r2, #0
 8011102:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2200      	movs	r2, #0
 801110a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2200      	movs	r2, #0
 8011112:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d003      	beq.n	8011124 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	68ba      	ldr	r2, [r7, #8]
 8011120:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2201      	movs	r2, #1
 8011128:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	79fa      	ldrb	r2, [r7, #7]
 8011130:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011132:	68f8      	ldr	r0, [r7, #12]
 8011134:	f001 fe88 	bl	8012e48 <USBD_LL_Init>
 8011138:	4603      	mov	r3, r0
 801113a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801113c:	7dfb      	ldrb	r3, [r7, #23]
}
 801113e:	4618      	mov	r0, r3
 8011140:	3718      	adds	r7, #24
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}

08011146 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011146:	b580      	push	{r7, lr}
 8011148:	b084      	sub	sp, #16
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
 801114e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011150:	2300      	movs	r3, #0
 8011152:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d101      	bne.n	801115e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801115a:	2303      	movs	r3, #3
 801115c:	e025      	b.n	80111aa <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	683a      	ldr	r2, [r7, #0]
 8011162:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	32ae      	adds	r2, #174	@ 0xae
 8011170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011176:	2b00      	cmp	r3, #0
 8011178:	d00f      	beq.n	801119a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	32ae      	adds	r2, #174	@ 0xae
 8011184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801118a:	f107 020e 	add.w	r2, r7, #14
 801118e:	4610      	mov	r0, r2
 8011190:	4798      	blx	r3
 8011192:	4602      	mov	r2, r0
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80111a0:	1c5a      	adds	r2, r3, #1
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80111a8:	2300      	movs	r3, #0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3710      	adds	r7, #16
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b082      	sub	sp, #8
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f001 fe94 	bl	8012ee8 <USBD_LL_Start>
 80111c0:	4603      	mov	r3, r0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3708      	adds	r7, #8
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80111ca:	b480      	push	{r7}
 80111cc:	b083      	sub	sp, #12
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80111d2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	460b      	mov	r3, r1
 80111ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80111ec:	2300      	movs	r3, #0
 80111ee:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d009      	beq.n	801120e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	78fa      	ldrb	r2, [r7, #3]
 8011204:	4611      	mov	r1, r2
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	4798      	blx	r3
 801120a:	4603      	mov	r3, r0
 801120c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	460b      	mov	r3, r1
 8011222:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011224:	2300      	movs	r3, #0
 8011226:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	78fa      	ldrb	r2, [r7, #3]
 8011232:	4611      	mov	r1, r2
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	4798      	blx	r3
 8011238:	4603      	mov	r3, r0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d001      	beq.n	8011242 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801123e:	2303      	movs	r3, #3
 8011240:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011242:	7bfb      	ldrb	r3, [r7, #15]
}
 8011244:	4618      	mov	r0, r3
 8011246:	3710      	adds	r7, #16
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801125c:	6839      	ldr	r1, [r7, #0]
 801125e:	4618      	mov	r0, r3
 8011260:	f001 f935 	bl	80124ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2201      	movs	r2, #1
 8011268:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011272:	461a      	mov	r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011280:	f003 031f 	and.w	r3, r3, #31
 8011284:	2b02      	cmp	r3, #2
 8011286:	d01a      	beq.n	80112be <USBD_LL_SetupStage+0x72>
 8011288:	2b02      	cmp	r3, #2
 801128a:	d822      	bhi.n	80112d2 <USBD_LL_SetupStage+0x86>
 801128c:	2b00      	cmp	r3, #0
 801128e:	d002      	beq.n	8011296 <USBD_LL_SetupStage+0x4a>
 8011290:	2b01      	cmp	r3, #1
 8011292:	d00a      	beq.n	80112aa <USBD_LL_SetupStage+0x5e>
 8011294:	e01d      	b.n	80112d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801129c:	4619      	mov	r1, r3
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 fb62 	bl	8011968 <USBD_StdDevReq>
 80112a4:	4603      	mov	r3, r0
 80112a6:	73fb      	strb	r3, [r7, #15]
      break;
 80112a8:	e020      	b.n	80112ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80112b0:	4619      	mov	r1, r3
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 fbca 	bl	8011a4c <USBD_StdItfReq>
 80112b8:	4603      	mov	r3, r0
 80112ba:	73fb      	strb	r3, [r7, #15]
      break;
 80112bc:	e016      	b.n	80112ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80112c4:	4619      	mov	r1, r3
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 fc2c 	bl	8011b24 <USBD_StdEPReq>
 80112cc:	4603      	mov	r3, r0
 80112ce:	73fb      	strb	r3, [r7, #15]
      break;
 80112d0:	e00c      	b.n	80112ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80112d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	4619      	mov	r1, r3
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f001 fe80 	bl	8012fe6 <USBD_LL_StallEP>
 80112e6:	4603      	mov	r3, r0
 80112e8:	73fb      	strb	r3, [r7, #15]
      break;
 80112ea:	bf00      	nop
  }

  return ret;
 80112ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3710      	adds	r7, #16
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}

080112f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80112f6:	b580      	push	{r7, lr}
 80112f8:	b086      	sub	sp, #24
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	60f8      	str	r0, [r7, #12]
 80112fe:	460b      	mov	r3, r1
 8011300:	607a      	str	r2, [r7, #4]
 8011302:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011304:	2300      	movs	r3, #0
 8011306:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011308:	7afb      	ldrb	r3, [r7, #11]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d16e      	bne.n	80113ec <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011314:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801131c:	2b03      	cmp	r3, #3
 801131e:	f040 8098 	bne.w	8011452 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	689a      	ldr	r2, [r3, #8]
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	429a      	cmp	r2, r3
 801132c:	d913      	bls.n	8011356 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	689a      	ldr	r2, [r3, #8]
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	1ad2      	subs	r2, r2, r3
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	68da      	ldr	r2, [r3, #12]
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	4293      	cmp	r3, r2
 8011346:	bf28      	it	cs
 8011348:	4613      	movcs	r3, r2
 801134a:	461a      	mov	r2, r3
 801134c:	6879      	ldr	r1, [r7, #4]
 801134e:	68f8      	ldr	r0, [r7, #12]
 8011350:	f001 f9a0 	bl	8012694 <USBD_CtlContinueRx>
 8011354:	e07d      	b.n	8011452 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801135c:	f003 031f 	and.w	r3, r3, #31
 8011360:	2b02      	cmp	r3, #2
 8011362:	d014      	beq.n	801138e <USBD_LL_DataOutStage+0x98>
 8011364:	2b02      	cmp	r3, #2
 8011366:	d81d      	bhi.n	80113a4 <USBD_LL_DataOutStage+0xae>
 8011368:	2b00      	cmp	r3, #0
 801136a:	d002      	beq.n	8011372 <USBD_LL_DataOutStage+0x7c>
 801136c:	2b01      	cmp	r3, #1
 801136e:	d003      	beq.n	8011378 <USBD_LL_DataOutStage+0x82>
 8011370:	e018      	b.n	80113a4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011372:	2300      	movs	r3, #0
 8011374:	75bb      	strb	r3, [r7, #22]
            break;
 8011376:	e018      	b.n	80113aa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801137e:	b2db      	uxtb	r3, r3
 8011380:	4619      	mov	r1, r3
 8011382:	68f8      	ldr	r0, [r7, #12]
 8011384:	f000 fa64 	bl	8011850 <USBD_CoreFindIF>
 8011388:	4603      	mov	r3, r0
 801138a:	75bb      	strb	r3, [r7, #22]
            break;
 801138c:	e00d      	b.n	80113aa <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011394:	b2db      	uxtb	r3, r3
 8011396:	4619      	mov	r1, r3
 8011398:	68f8      	ldr	r0, [r7, #12]
 801139a:	f000 fa66 	bl	801186a <USBD_CoreFindEP>
 801139e:	4603      	mov	r3, r0
 80113a0:	75bb      	strb	r3, [r7, #22]
            break;
 80113a2:	e002      	b.n	80113aa <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80113a4:	2300      	movs	r3, #0
 80113a6:	75bb      	strb	r3, [r7, #22]
            break;
 80113a8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80113aa:	7dbb      	ldrb	r3, [r7, #22]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d119      	bne.n	80113e4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	2b03      	cmp	r3, #3
 80113ba:	d113      	bne.n	80113e4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80113bc:	7dba      	ldrb	r2, [r7, #22]
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	32ae      	adds	r2, #174	@ 0xae
 80113c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113c6:	691b      	ldr	r3, [r3, #16]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d00b      	beq.n	80113e4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80113cc:	7dba      	ldrb	r2, [r7, #22]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80113d4:	7dba      	ldrb	r2, [r7, #22]
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	32ae      	adds	r2, #174	@ 0xae
 80113da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113de:	691b      	ldr	r3, [r3, #16]
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f001 f966 	bl	80126b6 <USBD_CtlSendStatus>
 80113ea:	e032      	b.n	8011452 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80113ec:	7afb      	ldrb	r3, [r7, #11]
 80113ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	4619      	mov	r1, r3
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f000 fa37 	bl	801186a <USBD_CoreFindEP>
 80113fc:	4603      	mov	r3, r0
 80113fe:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011400:	7dbb      	ldrb	r3, [r7, #22]
 8011402:	2bff      	cmp	r3, #255	@ 0xff
 8011404:	d025      	beq.n	8011452 <USBD_LL_DataOutStage+0x15c>
 8011406:	7dbb      	ldrb	r3, [r7, #22]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d122      	bne.n	8011452 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011412:	b2db      	uxtb	r3, r3
 8011414:	2b03      	cmp	r3, #3
 8011416:	d117      	bne.n	8011448 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011418:	7dba      	ldrb	r2, [r7, #22]
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	32ae      	adds	r2, #174	@ 0xae
 801141e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011422:	699b      	ldr	r3, [r3, #24]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d00f      	beq.n	8011448 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011428:	7dba      	ldrb	r2, [r7, #22]
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011430:	7dba      	ldrb	r2, [r7, #22]
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	32ae      	adds	r2, #174	@ 0xae
 8011436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801143a:	699b      	ldr	r3, [r3, #24]
 801143c:	7afa      	ldrb	r2, [r7, #11]
 801143e:	4611      	mov	r1, r2
 8011440:	68f8      	ldr	r0, [r7, #12]
 8011442:	4798      	blx	r3
 8011444:	4603      	mov	r3, r0
 8011446:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011448:	7dfb      	ldrb	r3, [r7, #23]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d001      	beq.n	8011452 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801144e:	7dfb      	ldrb	r3, [r7, #23]
 8011450:	e000      	b.n	8011454 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011452:	2300      	movs	r3, #0
}
 8011454:	4618      	mov	r0, r3
 8011456:	3718      	adds	r7, #24
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b086      	sub	sp, #24
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	460b      	mov	r3, r1
 8011466:	607a      	str	r2, [r7, #4]
 8011468:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801146a:	7afb      	ldrb	r3, [r7, #11]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d16f      	bne.n	8011550 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	3314      	adds	r3, #20
 8011474:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801147c:	2b02      	cmp	r3, #2
 801147e:	d15a      	bne.n	8011536 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	689a      	ldr	r2, [r3, #8]
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	68db      	ldr	r3, [r3, #12]
 8011488:	429a      	cmp	r2, r3
 801148a:	d914      	bls.n	80114b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	689a      	ldr	r2, [r3, #8]
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	1ad2      	subs	r2, r2, r3
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	461a      	mov	r2, r3
 80114a0:	6879      	ldr	r1, [r7, #4]
 80114a2:	68f8      	ldr	r0, [r7, #12]
 80114a4:	f001 f8e5 	bl	8012672 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114a8:	2300      	movs	r3, #0
 80114aa:	2200      	movs	r2, #0
 80114ac:	2100      	movs	r1, #0
 80114ae:	68f8      	ldr	r0, [r7, #12]
 80114b0:	f001 fe43 	bl	801313a <USBD_LL_PrepareReceive>
 80114b4:	e03f      	b.n	8011536 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	68da      	ldr	r2, [r3, #12]
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	689b      	ldr	r3, [r3, #8]
 80114be:	429a      	cmp	r2, r3
 80114c0:	d11c      	bne.n	80114fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	685a      	ldr	r2, [r3, #4]
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d316      	bcc.n	80114fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	685a      	ldr	r2, [r3, #4]
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80114d8:	429a      	cmp	r2, r3
 80114da:	d20f      	bcs.n	80114fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80114dc:	2200      	movs	r2, #0
 80114de:	2100      	movs	r1, #0
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f001 f8c6 	bl	8012672 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2200      	movs	r2, #0
 80114ea:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114ee:	2300      	movs	r3, #0
 80114f0:	2200      	movs	r2, #0
 80114f2:	2100      	movs	r1, #0
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f001 fe20 	bl	801313a <USBD_LL_PrepareReceive>
 80114fa:	e01c      	b.n	8011536 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011502:	b2db      	uxtb	r3, r3
 8011504:	2b03      	cmp	r3, #3
 8011506:	d10f      	bne.n	8011528 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d009      	beq.n	8011528 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2200      	movs	r2, #0
 8011518:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011528:	2180      	movs	r1, #128	@ 0x80
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	f001 fd5b 	bl	8012fe6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f001 f8d3 	bl	80126dc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d03a      	beq.n	80115b6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f7ff fe42 	bl	80111ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2200      	movs	r2, #0
 801154a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801154e:	e032      	b.n	80115b6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011550:	7afb      	ldrb	r3, [r7, #11]
 8011552:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011556:	b2db      	uxtb	r3, r3
 8011558:	4619      	mov	r1, r3
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	f000 f985 	bl	801186a <USBD_CoreFindEP>
 8011560:	4603      	mov	r3, r0
 8011562:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011564:	7dfb      	ldrb	r3, [r7, #23]
 8011566:	2bff      	cmp	r3, #255	@ 0xff
 8011568:	d025      	beq.n	80115b6 <USBD_LL_DataInStage+0x15a>
 801156a:	7dfb      	ldrb	r3, [r7, #23]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d122      	bne.n	80115b6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011576:	b2db      	uxtb	r3, r3
 8011578:	2b03      	cmp	r3, #3
 801157a:	d11c      	bne.n	80115b6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801157c:	7dfa      	ldrb	r2, [r7, #23]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	32ae      	adds	r2, #174	@ 0xae
 8011582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011586:	695b      	ldr	r3, [r3, #20]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d014      	beq.n	80115b6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801158c:	7dfa      	ldrb	r2, [r7, #23]
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011594:	7dfa      	ldrb	r2, [r7, #23]
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	32ae      	adds	r2, #174	@ 0xae
 801159a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801159e:	695b      	ldr	r3, [r3, #20]
 80115a0:	7afa      	ldrb	r2, [r7, #11]
 80115a2:	4611      	mov	r1, r2
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	4798      	blx	r3
 80115a8:	4603      	mov	r3, r0
 80115aa:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80115ac:	7dbb      	ldrb	r3, [r7, #22]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80115b2:	7dbb      	ldrb	r3, [r7, #22]
 80115b4:	e000      	b.n	80115b8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80115b6:	2300      	movs	r3, #0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3718      	adds	r7, #24
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80115c8:	2300      	movs	r3, #0
 80115ca:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2201      	movs	r2, #1
 80115d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2200      	movs	r2, #0
 80115e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2200      	movs	r2, #0
 80115ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d014      	beq.n	8011626 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d00e      	beq.n	8011626 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	6852      	ldr	r2, [r2, #4]
 8011614:	b2d2      	uxtb	r2, r2
 8011616:	4611      	mov	r1, r2
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	4798      	blx	r3
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	d001      	beq.n	8011626 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011622:	2303      	movs	r3, #3
 8011624:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011626:	2340      	movs	r3, #64	@ 0x40
 8011628:	2200      	movs	r2, #0
 801162a:	2100      	movs	r1, #0
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f001 fc76 	bl	8012f1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2201      	movs	r2, #1
 8011636:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2240      	movs	r2, #64	@ 0x40
 801163e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011642:	2340      	movs	r3, #64	@ 0x40
 8011644:	2200      	movs	r2, #0
 8011646:	2180      	movs	r1, #128	@ 0x80
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f001 fc68 	bl	8012f1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2201      	movs	r2, #1
 8011652:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2240      	movs	r2, #64	@ 0x40
 8011658:	621a      	str	r2, [r3, #32]

  return ret;
 801165a:	7bfb      	ldrb	r3, [r7, #15]
}
 801165c:	4618      	mov	r0, r3
 801165e:	3710      	adds	r7, #16
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	460b      	mov	r3, r1
 801166e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	78fa      	ldrb	r2, [r7, #3]
 8011674:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011676:	2300      	movs	r3, #0
}
 8011678:	4618      	mov	r0, r3
 801167a:	370c      	adds	r7, #12
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011684:	b480      	push	{r7}
 8011686:	b083      	sub	sp, #12
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011692:	b2db      	uxtb	r3, r3
 8011694:	2b04      	cmp	r3, #4
 8011696:	d006      	beq.n	80116a6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2204      	movs	r2, #4
 80116aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80116ae:	2300      	movs	r3, #0
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	2b04      	cmp	r3, #4
 80116ce:	d106      	bne.n	80116de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80116d6:	b2da      	uxtb	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80116de:	2300      	movs	r3, #0
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	370c      	adds	r7, #12
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr

080116ec <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	2b03      	cmp	r3, #3
 80116fe:	d110      	bne.n	8011722 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00b      	beq.n	8011722 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011710:	69db      	ldr	r3, [r3, #28]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d005      	beq.n	8011722 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801171c:	69db      	ldr	r3, [r3, #28]
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	32ae      	adds	r2, #174	@ 0xae
 8011742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d101      	bne.n	801174e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801174a:	2303      	movs	r3, #3
 801174c:	e01c      	b.n	8011788 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011754:	b2db      	uxtb	r3, r3
 8011756:	2b03      	cmp	r3, #3
 8011758:	d115      	bne.n	8011786 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	32ae      	adds	r2, #174	@ 0xae
 8011764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011768:	6a1b      	ldr	r3, [r3, #32]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d00b      	beq.n	8011786 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	32ae      	adds	r2, #174	@ 0xae
 8011778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801177c:	6a1b      	ldr	r3, [r3, #32]
 801177e:	78fa      	ldrb	r2, [r7, #3]
 8011780:	4611      	mov	r1, r2
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	460b      	mov	r3, r1
 801179a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	32ae      	adds	r2, #174	@ 0xae
 80117a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d101      	bne.n	80117b2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80117ae:	2303      	movs	r3, #3
 80117b0:	e01c      	b.n	80117ec <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117b8:	b2db      	uxtb	r3, r3
 80117ba:	2b03      	cmp	r3, #3
 80117bc:	d115      	bne.n	80117ea <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	32ae      	adds	r2, #174	@ 0xae
 80117c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00b      	beq.n	80117ea <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	32ae      	adds	r2, #174	@ 0xae
 80117dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117e2:	78fa      	ldrb	r2, [r7, #3]
 80117e4:	4611      	mov	r1, r2
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80117fc:	2300      	movs	r3, #0
}
 80117fe:	4618      	mov	r0, r3
 8011800:	370c      	adds	r7, #12
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr

0801180a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b084      	sub	sp, #16
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011812:	2300      	movs	r3, #0
 8011814:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2201      	movs	r2, #1
 801181a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011824:	2b00      	cmp	r3, #0
 8011826:	d00e      	beq.n	8011846 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	6852      	ldr	r2, [r2, #4]
 8011834:	b2d2      	uxtb	r2, r2
 8011836:	4611      	mov	r1, r2
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	4798      	blx	r3
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d001      	beq.n	8011846 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011842:	2303      	movs	r3, #3
 8011844:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011846:	7bfb      	ldrb	r3, [r7, #15]
}
 8011848:	4618      	mov	r0, r3
 801184a:	3710      	adds	r7, #16
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011850:	b480      	push	{r7}
 8011852:	b083      	sub	sp, #12
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	460b      	mov	r3, r1
 801185a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801185c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801185e:	4618      	mov	r0, r3
 8011860:	370c      	adds	r7, #12
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr

0801186a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801186a:	b480      	push	{r7}
 801186c:	b083      	sub	sp, #12
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
 8011872:	460b      	mov	r3, r1
 8011874:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011876:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011878:	4618      	mov	r0, r3
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b086      	sub	sp, #24
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	460b      	mov	r3, r1
 801188e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011898:	2300      	movs	r3, #0
 801189a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	885b      	ldrh	r3, [r3, #2]
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	7812      	ldrb	r2, [r2, #0]
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d91f      	bls.n	80118ea <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80118b0:	e013      	b.n	80118da <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80118b2:	f107 030a 	add.w	r3, r7, #10
 80118b6:	4619      	mov	r1, r3
 80118b8:	6978      	ldr	r0, [r7, #20]
 80118ba:	f000 f81b 	bl	80118f4 <USBD_GetNextDesc>
 80118be:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80118c0:	697b      	ldr	r3, [r7, #20]
 80118c2:	785b      	ldrb	r3, [r3, #1]
 80118c4:	2b05      	cmp	r3, #5
 80118c6:	d108      	bne.n	80118da <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	789b      	ldrb	r3, [r3, #2]
 80118d0:	78fa      	ldrb	r2, [r7, #3]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d008      	beq.n	80118e8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80118d6:	2300      	movs	r3, #0
 80118d8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	885b      	ldrh	r3, [r3, #2]
 80118de:	b29a      	uxth	r2, r3
 80118e0:	897b      	ldrh	r3, [r7, #10]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d8e5      	bhi.n	80118b2 <USBD_GetEpDesc+0x2e>
 80118e6:	e000      	b.n	80118ea <USBD_GetEpDesc+0x66>
          break;
 80118e8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80118ea:	693b      	ldr	r3, [r7, #16]
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3718      	adds	r7, #24
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	881b      	ldrh	r3, [r3, #0]
 8011906:	68fa      	ldr	r2, [r7, #12]
 8011908:	7812      	ldrb	r2, [r2, #0]
 801190a:	4413      	add	r3, r2
 801190c:	b29a      	uxth	r2, r3
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	461a      	mov	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	4413      	add	r3, r2
 801191c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801191e:	68fb      	ldr	r3, [r7, #12]
}
 8011920:	4618      	mov	r0, r3
 8011922:	3714      	adds	r7, #20
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr

0801192c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801192c:	b480      	push	{r7}
 801192e:	b087      	sub	sp, #28
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	3301      	adds	r3, #1
 8011942:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801194a:	8a3b      	ldrh	r3, [r7, #16]
 801194c:	021b      	lsls	r3, r3, #8
 801194e:	b21a      	sxth	r2, r3
 8011950:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011954:	4313      	orrs	r3, r2
 8011956:	b21b      	sxth	r3, r3
 8011958:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801195a:	89fb      	ldrh	r3, [r7, #14]
}
 801195c:	4618      	mov	r0, r3
 801195e:	371c      	adds	r7, #28
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011972:	2300      	movs	r3, #0
 8011974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801197e:	2b40      	cmp	r3, #64	@ 0x40
 8011980:	d005      	beq.n	801198e <USBD_StdDevReq+0x26>
 8011982:	2b40      	cmp	r3, #64	@ 0x40
 8011984:	d857      	bhi.n	8011a36 <USBD_StdDevReq+0xce>
 8011986:	2b00      	cmp	r3, #0
 8011988:	d00f      	beq.n	80119aa <USBD_StdDevReq+0x42>
 801198a:	2b20      	cmp	r3, #32
 801198c:	d153      	bne.n	8011a36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	32ae      	adds	r2, #174	@ 0xae
 8011998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801199c:	689b      	ldr	r3, [r3, #8]
 801199e:	6839      	ldr	r1, [r7, #0]
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	4798      	blx	r3
 80119a4:	4603      	mov	r3, r0
 80119a6:	73fb      	strb	r3, [r7, #15]
      break;
 80119a8:	e04a      	b.n	8011a40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	785b      	ldrb	r3, [r3, #1]
 80119ae:	2b09      	cmp	r3, #9
 80119b0:	d83b      	bhi.n	8011a2a <USBD_StdDevReq+0xc2>
 80119b2:	a201      	add	r2, pc, #4	@ (adr r2, 80119b8 <USBD_StdDevReq+0x50>)
 80119b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b8:	08011a0d 	.word	0x08011a0d
 80119bc:	08011a21 	.word	0x08011a21
 80119c0:	08011a2b 	.word	0x08011a2b
 80119c4:	08011a17 	.word	0x08011a17
 80119c8:	08011a2b 	.word	0x08011a2b
 80119cc:	080119eb 	.word	0x080119eb
 80119d0:	080119e1 	.word	0x080119e1
 80119d4:	08011a2b 	.word	0x08011a2b
 80119d8:	08011a03 	.word	0x08011a03
 80119dc:	080119f5 	.word	0x080119f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80119e0:	6839      	ldr	r1, [r7, #0]
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f000 fa3c 	bl	8011e60 <USBD_GetDescriptor>
          break;
 80119e8:	e024      	b.n	8011a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80119ea:	6839      	ldr	r1, [r7, #0]
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f000 fbcb 	bl	8012188 <USBD_SetAddress>
          break;
 80119f2:	e01f      	b.n	8011a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80119f4:	6839      	ldr	r1, [r7, #0]
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f000 fc0a 	bl	8012210 <USBD_SetConfig>
 80119fc:	4603      	mov	r3, r0
 80119fe:	73fb      	strb	r3, [r7, #15]
          break;
 8011a00:	e018      	b.n	8011a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011a02:	6839      	ldr	r1, [r7, #0]
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 fcad 	bl	8012364 <USBD_GetConfig>
          break;
 8011a0a:	e013      	b.n	8011a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011a0c:	6839      	ldr	r1, [r7, #0]
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f000 fcde 	bl	80123d0 <USBD_GetStatus>
          break;
 8011a14:	e00e      	b.n	8011a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011a16:	6839      	ldr	r1, [r7, #0]
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f000 fd0d 	bl	8012438 <USBD_SetFeature>
          break;
 8011a1e:	e009      	b.n	8011a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011a20:	6839      	ldr	r1, [r7, #0]
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 fd31 	bl	801248a <USBD_ClrFeature>
          break;
 8011a28:	e004      	b.n	8011a34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011a2a:	6839      	ldr	r1, [r7, #0]
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 fd88 	bl	8012542 <USBD_CtlError>
          break;
 8011a32:	bf00      	nop
      }
      break;
 8011a34:	e004      	b.n	8011a40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011a36:	6839      	ldr	r1, [r7, #0]
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 fd82 	bl	8012542 <USBD_CtlError>
      break;
 8011a3e:	bf00      	nop
  }

  return ret;
 8011a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3710      	adds	r7, #16
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
 8011a4a:	bf00      	nop

08011a4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a56:	2300      	movs	r3, #0
 8011a58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011a62:	2b40      	cmp	r3, #64	@ 0x40
 8011a64:	d005      	beq.n	8011a72 <USBD_StdItfReq+0x26>
 8011a66:	2b40      	cmp	r3, #64	@ 0x40
 8011a68:	d852      	bhi.n	8011b10 <USBD_StdItfReq+0xc4>
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d001      	beq.n	8011a72 <USBD_StdItfReq+0x26>
 8011a6e:	2b20      	cmp	r3, #32
 8011a70:	d14e      	bne.n	8011b10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	2b02      	cmp	r3, #2
 8011a7e:	d840      	bhi.n	8011b02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	889b      	ldrh	r3, [r3, #4]
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d836      	bhi.n	8011af8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	889b      	ldrh	r3, [r3, #4]
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	4619      	mov	r1, r3
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f7ff fedc 	bl	8011850 <USBD_CoreFindIF>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011a9c:	7bbb      	ldrb	r3, [r7, #14]
 8011a9e:	2bff      	cmp	r3, #255	@ 0xff
 8011aa0:	d01d      	beq.n	8011ade <USBD_StdItfReq+0x92>
 8011aa2:	7bbb      	ldrb	r3, [r7, #14]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d11a      	bne.n	8011ade <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011aa8:	7bba      	ldrb	r2, [r7, #14]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	32ae      	adds	r2, #174	@ 0xae
 8011aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ab2:	689b      	ldr	r3, [r3, #8]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d00f      	beq.n	8011ad8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011ab8:	7bba      	ldrb	r2, [r7, #14]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011ac0:	7bba      	ldrb	r2, [r7, #14]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	32ae      	adds	r2, #174	@ 0xae
 8011ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011aca:	689b      	ldr	r3, [r3, #8]
 8011acc:	6839      	ldr	r1, [r7, #0]
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	4798      	blx	r3
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011ad6:	e004      	b.n	8011ae2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011ad8:	2303      	movs	r3, #3
 8011ada:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011adc:	e001      	b.n	8011ae2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011ade:	2303      	movs	r3, #3
 8011ae0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	88db      	ldrh	r3, [r3, #6]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d110      	bne.n	8011b0c <USBD_StdItfReq+0xc0>
 8011aea:	7bfb      	ldrb	r3, [r7, #15]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d10d      	bne.n	8011b0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 fde0 	bl	80126b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011af6:	e009      	b.n	8011b0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011af8:	6839      	ldr	r1, [r7, #0]
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f000 fd21 	bl	8012542 <USBD_CtlError>
          break;
 8011b00:	e004      	b.n	8011b0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011b02:	6839      	ldr	r1, [r7, #0]
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f000 fd1c 	bl	8012542 <USBD_CtlError>
          break;
 8011b0a:	e000      	b.n	8011b0e <USBD_StdItfReq+0xc2>
          break;
 8011b0c:	bf00      	nop
      }
      break;
 8011b0e:	e004      	b.n	8011b1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011b10:	6839      	ldr	r1, [r7, #0]
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f000 fd15 	bl	8012542 <USBD_CtlError>
      break;
 8011b18:	bf00      	nop
  }

  return ret;
 8011b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3710      	adds	r7, #16
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	889b      	ldrh	r3, [r3, #4]
 8011b36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011b40:	2b40      	cmp	r3, #64	@ 0x40
 8011b42:	d007      	beq.n	8011b54 <USBD_StdEPReq+0x30>
 8011b44:	2b40      	cmp	r3, #64	@ 0x40
 8011b46:	f200 817f 	bhi.w	8011e48 <USBD_StdEPReq+0x324>
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d02a      	beq.n	8011ba4 <USBD_StdEPReq+0x80>
 8011b4e:	2b20      	cmp	r3, #32
 8011b50:	f040 817a 	bne.w	8011e48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011b54:	7bbb      	ldrb	r3, [r7, #14]
 8011b56:	4619      	mov	r1, r3
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f7ff fe86 	bl	801186a <USBD_CoreFindEP>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011b62:	7b7b      	ldrb	r3, [r7, #13]
 8011b64:	2bff      	cmp	r3, #255	@ 0xff
 8011b66:	f000 8174 	beq.w	8011e52 <USBD_StdEPReq+0x32e>
 8011b6a:	7b7b      	ldrb	r3, [r7, #13]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	f040 8170 	bne.w	8011e52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011b72:	7b7a      	ldrb	r2, [r7, #13]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011b7a:	7b7a      	ldrb	r2, [r7, #13]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	32ae      	adds	r2, #174	@ 0xae
 8011b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f000 8163 	beq.w	8011e52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011b8c:	7b7a      	ldrb	r2, [r7, #13]
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	32ae      	adds	r2, #174	@ 0xae
 8011b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b96:	689b      	ldr	r3, [r3, #8]
 8011b98:	6839      	ldr	r1, [r7, #0]
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	4798      	blx	r3
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011ba2:	e156      	b.n	8011e52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	785b      	ldrb	r3, [r3, #1]
 8011ba8:	2b03      	cmp	r3, #3
 8011baa:	d008      	beq.n	8011bbe <USBD_StdEPReq+0x9a>
 8011bac:	2b03      	cmp	r3, #3
 8011bae:	f300 8145 	bgt.w	8011e3c <USBD_StdEPReq+0x318>
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f000 809b 	beq.w	8011cee <USBD_StdEPReq+0x1ca>
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d03c      	beq.n	8011c36 <USBD_StdEPReq+0x112>
 8011bbc:	e13e      	b.n	8011e3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bc4:	b2db      	uxtb	r3, r3
 8011bc6:	2b02      	cmp	r3, #2
 8011bc8:	d002      	beq.n	8011bd0 <USBD_StdEPReq+0xac>
 8011bca:	2b03      	cmp	r3, #3
 8011bcc:	d016      	beq.n	8011bfc <USBD_StdEPReq+0xd8>
 8011bce:	e02c      	b.n	8011c2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011bd0:	7bbb      	ldrb	r3, [r7, #14]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00d      	beq.n	8011bf2 <USBD_StdEPReq+0xce>
 8011bd6:	7bbb      	ldrb	r3, [r7, #14]
 8011bd8:	2b80      	cmp	r3, #128	@ 0x80
 8011bda:	d00a      	beq.n	8011bf2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bdc:	7bbb      	ldrb	r3, [r7, #14]
 8011bde:	4619      	mov	r1, r3
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f001 fa00 	bl	8012fe6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011be6:	2180      	movs	r1, #128	@ 0x80
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f001 f9fc 	bl	8012fe6 <USBD_LL_StallEP>
 8011bee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011bf0:	e020      	b.n	8011c34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011bf2:	6839      	ldr	r1, [r7, #0]
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f000 fca4 	bl	8012542 <USBD_CtlError>
              break;
 8011bfa:	e01b      	b.n	8011c34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	885b      	ldrh	r3, [r3, #2]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d10e      	bne.n	8011c22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011c04:	7bbb      	ldrb	r3, [r7, #14]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d00b      	beq.n	8011c22 <USBD_StdEPReq+0xfe>
 8011c0a:	7bbb      	ldrb	r3, [r7, #14]
 8011c0c:	2b80      	cmp	r3, #128	@ 0x80
 8011c0e:	d008      	beq.n	8011c22 <USBD_StdEPReq+0xfe>
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	88db      	ldrh	r3, [r3, #6]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d104      	bne.n	8011c22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c18:	7bbb      	ldrb	r3, [r7, #14]
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f001 f9e2 	bl	8012fe6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f000 fd47 	bl	80126b6 <USBD_CtlSendStatus>

              break;
 8011c28:	e004      	b.n	8011c34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011c2a:	6839      	ldr	r1, [r7, #0]
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f000 fc88 	bl	8012542 <USBD_CtlError>
              break;
 8011c32:	bf00      	nop
          }
          break;
 8011c34:	e107      	b.n	8011e46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	2b02      	cmp	r3, #2
 8011c40:	d002      	beq.n	8011c48 <USBD_StdEPReq+0x124>
 8011c42:	2b03      	cmp	r3, #3
 8011c44:	d016      	beq.n	8011c74 <USBD_StdEPReq+0x150>
 8011c46:	e04b      	b.n	8011ce0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c48:	7bbb      	ldrb	r3, [r7, #14]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d00d      	beq.n	8011c6a <USBD_StdEPReq+0x146>
 8011c4e:	7bbb      	ldrb	r3, [r7, #14]
 8011c50:	2b80      	cmp	r3, #128	@ 0x80
 8011c52:	d00a      	beq.n	8011c6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c54:	7bbb      	ldrb	r3, [r7, #14]
 8011c56:	4619      	mov	r1, r3
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f001 f9c4 	bl	8012fe6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c5e:	2180      	movs	r1, #128	@ 0x80
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f001 f9c0 	bl	8012fe6 <USBD_LL_StallEP>
 8011c66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c68:	e040      	b.n	8011cec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011c6a:	6839      	ldr	r1, [r7, #0]
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 fc68 	bl	8012542 <USBD_CtlError>
              break;
 8011c72:	e03b      	b.n	8011cec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	885b      	ldrh	r3, [r3, #2]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d136      	bne.n	8011cea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011c7c:	7bbb      	ldrb	r3, [r7, #14]
 8011c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d004      	beq.n	8011c90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011c86:	7bbb      	ldrb	r3, [r7, #14]
 8011c88:	4619      	mov	r1, r3
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f001 f9ca 	bl	8013024 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fd10 	bl	80126b6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011c96:	7bbb      	ldrb	r3, [r7, #14]
 8011c98:	4619      	mov	r1, r3
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f7ff fde5 	bl	801186a <USBD_CoreFindEP>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011ca4:	7b7b      	ldrb	r3, [r7, #13]
 8011ca6:	2bff      	cmp	r3, #255	@ 0xff
 8011ca8:	d01f      	beq.n	8011cea <USBD_StdEPReq+0x1c6>
 8011caa:	7b7b      	ldrb	r3, [r7, #13]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d11c      	bne.n	8011cea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011cb0:	7b7a      	ldrb	r2, [r7, #13]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011cb8:	7b7a      	ldrb	r2, [r7, #13]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	32ae      	adds	r2, #174	@ 0xae
 8011cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cc2:	689b      	ldr	r3, [r3, #8]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d010      	beq.n	8011cea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011cc8:	7b7a      	ldrb	r2, [r7, #13]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	32ae      	adds	r2, #174	@ 0xae
 8011cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cd2:	689b      	ldr	r3, [r3, #8]
 8011cd4:	6839      	ldr	r1, [r7, #0]
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	4798      	blx	r3
 8011cda:	4603      	mov	r3, r0
 8011cdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011cde:	e004      	b.n	8011cea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011ce0:	6839      	ldr	r1, [r7, #0]
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f000 fc2d 	bl	8012542 <USBD_CtlError>
              break;
 8011ce8:	e000      	b.n	8011cec <USBD_StdEPReq+0x1c8>
              break;
 8011cea:	bf00      	nop
          }
          break;
 8011cec:	e0ab      	b.n	8011e46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	2b02      	cmp	r3, #2
 8011cf8:	d002      	beq.n	8011d00 <USBD_StdEPReq+0x1dc>
 8011cfa:	2b03      	cmp	r3, #3
 8011cfc:	d032      	beq.n	8011d64 <USBD_StdEPReq+0x240>
 8011cfe:	e097      	b.n	8011e30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d00:	7bbb      	ldrb	r3, [r7, #14]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d007      	beq.n	8011d16 <USBD_StdEPReq+0x1f2>
 8011d06:	7bbb      	ldrb	r3, [r7, #14]
 8011d08:	2b80      	cmp	r3, #128	@ 0x80
 8011d0a:	d004      	beq.n	8011d16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011d0c:	6839      	ldr	r1, [r7, #0]
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 fc17 	bl	8012542 <USBD_CtlError>
                break;
 8011d14:	e091      	b.n	8011e3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	da0b      	bge.n	8011d36 <USBD_StdEPReq+0x212>
 8011d1e:	7bbb      	ldrb	r3, [r7, #14]
 8011d20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011d24:	4613      	mov	r3, r2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4413      	add	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	3310      	adds	r3, #16
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	4413      	add	r3, r2
 8011d32:	3304      	adds	r3, #4
 8011d34:	e00b      	b.n	8011d4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011d36:	7bbb      	ldrb	r3, [r7, #14]
 8011d38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d3c:	4613      	mov	r3, r2
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	4413      	add	r3, r2
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	4413      	add	r3, r2
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	2200      	movs	r2, #0
 8011d54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	2202      	movs	r2, #2
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 fc6d 	bl	801263c <USBD_CtlSendData>
              break;
 8011d62:	e06a      	b.n	8011e3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	da11      	bge.n	8011d90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011d6c:	7bbb      	ldrb	r3, [r7, #14]
 8011d6e:	f003 020f 	and.w	r2, r3, #15
 8011d72:	6879      	ldr	r1, [r7, #4]
 8011d74:	4613      	mov	r3, r2
 8011d76:	009b      	lsls	r3, r3, #2
 8011d78:	4413      	add	r3, r2
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	440b      	add	r3, r1
 8011d7e:	3324      	adds	r3, #36	@ 0x24
 8011d80:	881b      	ldrh	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d117      	bne.n	8011db6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011d86:	6839      	ldr	r1, [r7, #0]
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f000 fbda 	bl	8012542 <USBD_CtlError>
                  break;
 8011d8e:	e054      	b.n	8011e3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011d90:	7bbb      	ldrb	r3, [r7, #14]
 8011d92:	f003 020f 	and.w	r2, r3, #15
 8011d96:	6879      	ldr	r1, [r7, #4]
 8011d98:	4613      	mov	r3, r2
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	4413      	add	r3, r2
 8011d9e:	009b      	lsls	r3, r3, #2
 8011da0:	440b      	add	r3, r1
 8011da2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011da6:	881b      	ldrh	r3, [r3, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d104      	bne.n	8011db6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011dac:	6839      	ldr	r1, [r7, #0]
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 fbc7 	bl	8012542 <USBD_CtlError>
                  break;
 8011db4:	e041      	b.n	8011e3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	da0b      	bge.n	8011dd6 <USBD_StdEPReq+0x2b2>
 8011dbe:	7bbb      	ldrb	r3, [r7, #14]
 8011dc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011dc4:	4613      	mov	r3, r2
 8011dc6:	009b      	lsls	r3, r3, #2
 8011dc8:	4413      	add	r3, r2
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	3310      	adds	r3, #16
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	4413      	add	r3, r2
 8011dd2:	3304      	adds	r3, #4
 8011dd4:	e00b      	b.n	8011dee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011dd6:	7bbb      	ldrb	r3, [r7, #14]
 8011dd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ddc:	4613      	mov	r3, r2
 8011dde:	009b      	lsls	r3, r3, #2
 8011de0:	4413      	add	r3, r2
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	4413      	add	r3, r2
 8011dec:	3304      	adds	r3, #4
 8011dee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011df0:	7bbb      	ldrb	r3, [r7, #14]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d002      	beq.n	8011dfc <USBD_StdEPReq+0x2d8>
 8011df6:	7bbb      	ldrb	r3, [r7, #14]
 8011df8:	2b80      	cmp	r3, #128	@ 0x80
 8011dfa:	d103      	bne.n	8011e04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	e00e      	b.n	8011e22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011e04:	7bbb      	ldrb	r3, [r7, #14]
 8011e06:	4619      	mov	r1, r3
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f001 f92a 	bl	8013062 <USBD_LL_IsStallEP>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d003      	beq.n	8011e1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	2201      	movs	r2, #1
 8011e18:	601a      	str	r2, [r3, #0]
 8011e1a:	e002      	b.n	8011e22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	2200      	movs	r2, #0
 8011e20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	2202      	movs	r2, #2
 8011e26:	4619      	mov	r1, r3
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f000 fc07 	bl	801263c <USBD_CtlSendData>
              break;
 8011e2e:	e004      	b.n	8011e3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011e30:	6839      	ldr	r1, [r7, #0]
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f000 fb85 	bl	8012542 <USBD_CtlError>
              break;
 8011e38:	bf00      	nop
          }
          break;
 8011e3a:	e004      	b.n	8011e46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011e3c:	6839      	ldr	r1, [r7, #0]
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 fb7f 	bl	8012542 <USBD_CtlError>
          break;
 8011e44:	bf00      	nop
      }
      break;
 8011e46:	e005      	b.n	8011e54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011e48:	6839      	ldr	r1, [r7, #0]
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f000 fb79 	bl	8012542 <USBD_CtlError>
      break;
 8011e50:	e000      	b.n	8011e54 <USBD_StdEPReq+0x330>
      break;
 8011e52:	bf00      	nop
  }

  return ret;
 8011e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
	...

08011e60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011e72:	2300      	movs	r3, #0
 8011e74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	885b      	ldrh	r3, [r3, #2]
 8011e7a:	0a1b      	lsrs	r3, r3, #8
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	2b0e      	cmp	r3, #14
 8011e82:	f200 8152 	bhi.w	801212a <USBD_GetDescriptor+0x2ca>
 8011e86:	a201      	add	r2, pc, #4	@ (adr r2, 8011e8c <USBD_GetDescriptor+0x2c>)
 8011e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e8c:	08011efd 	.word	0x08011efd
 8011e90:	08011f15 	.word	0x08011f15
 8011e94:	08011f55 	.word	0x08011f55
 8011e98:	0801212b 	.word	0x0801212b
 8011e9c:	0801212b 	.word	0x0801212b
 8011ea0:	080120cb 	.word	0x080120cb
 8011ea4:	080120f7 	.word	0x080120f7
 8011ea8:	0801212b 	.word	0x0801212b
 8011eac:	0801212b 	.word	0x0801212b
 8011eb0:	0801212b 	.word	0x0801212b
 8011eb4:	0801212b 	.word	0x0801212b
 8011eb8:	0801212b 	.word	0x0801212b
 8011ebc:	0801212b 	.word	0x0801212b
 8011ec0:	0801212b 	.word	0x0801212b
 8011ec4:	08011ec9 	.word	0x08011ec9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ece:	69db      	ldr	r3, [r3, #28]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d00b      	beq.n	8011eec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011eda:	69db      	ldr	r3, [r3, #28]
 8011edc:	687a      	ldr	r2, [r7, #4]
 8011ede:	7c12      	ldrb	r2, [r2, #16]
 8011ee0:	f107 0108 	add.w	r1, r7, #8
 8011ee4:	4610      	mov	r0, r2
 8011ee6:	4798      	blx	r3
 8011ee8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011eea:	e126      	b.n	801213a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011eec:	6839      	ldr	r1, [r7, #0]
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f000 fb27 	bl	8012542 <USBD_CtlError>
        err++;
 8011ef4:	7afb      	ldrb	r3, [r7, #11]
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	72fb      	strb	r3, [r7, #11]
      break;
 8011efa:	e11e      	b.n	801213a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	7c12      	ldrb	r2, [r2, #16]
 8011f08:	f107 0108 	add.w	r1, r7, #8
 8011f0c:	4610      	mov	r0, r2
 8011f0e:	4798      	blx	r3
 8011f10:	60f8      	str	r0, [r7, #12]
      break;
 8011f12:	e112      	b.n	801213a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	7c1b      	ldrb	r3, [r3, #16]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d10d      	bne.n	8011f38 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f24:	f107 0208 	add.w	r2, r7, #8
 8011f28:	4610      	mov	r0, r2
 8011f2a:	4798      	blx	r3
 8011f2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	3301      	adds	r3, #1
 8011f32:	2202      	movs	r2, #2
 8011f34:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011f36:	e100      	b.n	801213a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f40:	f107 0208 	add.w	r2, r7, #8
 8011f44:	4610      	mov	r0, r2
 8011f46:	4798      	blx	r3
 8011f48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	2202      	movs	r2, #2
 8011f50:	701a      	strb	r2, [r3, #0]
      break;
 8011f52:	e0f2      	b.n	801213a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	885b      	ldrh	r3, [r3, #2]
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	2b05      	cmp	r3, #5
 8011f5c:	f200 80ac 	bhi.w	80120b8 <USBD_GetDescriptor+0x258>
 8011f60:	a201      	add	r2, pc, #4	@ (adr r2, 8011f68 <USBD_GetDescriptor+0x108>)
 8011f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f66:	bf00      	nop
 8011f68:	08011f81 	.word	0x08011f81
 8011f6c:	08011fb5 	.word	0x08011fb5
 8011f70:	08011fe9 	.word	0x08011fe9
 8011f74:	0801201d 	.word	0x0801201d
 8011f78:	08012051 	.word	0x08012051
 8011f7c:	08012085 	.word	0x08012085
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d00b      	beq.n	8011fa4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	7c12      	ldrb	r2, [r2, #16]
 8011f98:	f107 0108 	add.w	r1, r7, #8
 8011f9c:	4610      	mov	r0, r2
 8011f9e:	4798      	blx	r3
 8011fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fa2:	e091      	b.n	80120c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011fa4:	6839      	ldr	r1, [r7, #0]
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 facb 	bl	8012542 <USBD_CtlError>
            err++;
 8011fac:	7afb      	ldrb	r3, [r7, #11]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8011fb2:	e089      	b.n	80120c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d00b      	beq.n	8011fd8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fc6:	689b      	ldr	r3, [r3, #8]
 8011fc8:	687a      	ldr	r2, [r7, #4]
 8011fca:	7c12      	ldrb	r2, [r2, #16]
 8011fcc:	f107 0108 	add.w	r1, r7, #8
 8011fd0:	4610      	mov	r0, r2
 8011fd2:	4798      	blx	r3
 8011fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fd6:	e077      	b.n	80120c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011fd8:	6839      	ldr	r1, [r7, #0]
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f000 fab1 	bl	8012542 <USBD_CtlError>
            err++;
 8011fe0:	7afb      	ldrb	r3, [r7, #11]
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8011fe6:	e06f      	b.n	80120c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d00b      	beq.n	801200c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ffa:	68db      	ldr	r3, [r3, #12]
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	7c12      	ldrb	r2, [r2, #16]
 8012000:	f107 0108 	add.w	r1, r7, #8
 8012004:	4610      	mov	r0, r2
 8012006:	4798      	blx	r3
 8012008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801200a:	e05d      	b.n	80120c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801200c:	6839      	ldr	r1, [r7, #0]
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f000 fa97 	bl	8012542 <USBD_CtlError>
            err++;
 8012014:	7afb      	ldrb	r3, [r7, #11]
 8012016:	3301      	adds	r3, #1
 8012018:	72fb      	strb	r3, [r7, #11]
          break;
 801201a:	e055      	b.n	80120c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012022:	691b      	ldr	r3, [r3, #16]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d00b      	beq.n	8012040 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801202e:	691b      	ldr	r3, [r3, #16]
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	7c12      	ldrb	r2, [r2, #16]
 8012034:	f107 0108 	add.w	r1, r7, #8
 8012038:	4610      	mov	r0, r2
 801203a:	4798      	blx	r3
 801203c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801203e:	e043      	b.n	80120c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012040:	6839      	ldr	r1, [r7, #0]
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f000 fa7d 	bl	8012542 <USBD_CtlError>
            err++;
 8012048:	7afb      	ldrb	r3, [r7, #11]
 801204a:	3301      	adds	r3, #1
 801204c:	72fb      	strb	r3, [r7, #11]
          break;
 801204e:	e03b      	b.n	80120c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012056:	695b      	ldr	r3, [r3, #20]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d00b      	beq.n	8012074 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012062:	695b      	ldr	r3, [r3, #20]
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	7c12      	ldrb	r2, [r2, #16]
 8012068:	f107 0108 	add.w	r1, r7, #8
 801206c:	4610      	mov	r0, r2
 801206e:	4798      	blx	r3
 8012070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012072:	e029      	b.n	80120c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f000 fa63 	bl	8012542 <USBD_CtlError>
            err++;
 801207c:	7afb      	ldrb	r3, [r7, #11]
 801207e:	3301      	adds	r3, #1
 8012080:	72fb      	strb	r3, [r7, #11]
          break;
 8012082:	e021      	b.n	80120c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801208a:	699b      	ldr	r3, [r3, #24]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00b      	beq.n	80120a8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012096:	699b      	ldr	r3, [r3, #24]
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	7c12      	ldrb	r2, [r2, #16]
 801209c:	f107 0108 	add.w	r1, r7, #8
 80120a0:	4610      	mov	r0, r2
 80120a2:	4798      	blx	r3
 80120a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80120a6:	e00f      	b.n	80120c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80120a8:	6839      	ldr	r1, [r7, #0]
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f000 fa49 	bl	8012542 <USBD_CtlError>
            err++;
 80120b0:	7afb      	ldrb	r3, [r7, #11]
 80120b2:	3301      	adds	r3, #1
 80120b4:	72fb      	strb	r3, [r7, #11]
          break;
 80120b6:	e007      	b.n	80120c8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80120b8:	6839      	ldr	r1, [r7, #0]
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 fa41 	bl	8012542 <USBD_CtlError>
          err++;
 80120c0:	7afb      	ldrb	r3, [r7, #11]
 80120c2:	3301      	adds	r3, #1
 80120c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80120c6:	bf00      	nop
      }
      break;
 80120c8:	e037      	b.n	801213a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	7c1b      	ldrb	r3, [r3, #16]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d109      	bne.n	80120e6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80120da:	f107 0208 	add.w	r2, r7, #8
 80120de:	4610      	mov	r0, r2
 80120e0:	4798      	blx	r3
 80120e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80120e4:	e029      	b.n	801213a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80120e6:	6839      	ldr	r1, [r7, #0]
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 fa2a 	bl	8012542 <USBD_CtlError>
        err++;
 80120ee:	7afb      	ldrb	r3, [r7, #11]
 80120f0:	3301      	adds	r3, #1
 80120f2:	72fb      	strb	r3, [r7, #11]
      break;
 80120f4:	e021      	b.n	801213a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	7c1b      	ldrb	r3, [r3, #16]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d10d      	bne.n	801211a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012106:	f107 0208 	add.w	r2, r7, #8
 801210a:	4610      	mov	r0, r2
 801210c:	4798      	blx	r3
 801210e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	3301      	adds	r3, #1
 8012114:	2207      	movs	r2, #7
 8012116:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012118:	e00f      	b.n	801213a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801211a:	6839      	ldr	r1, [r7, #0]
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f000 fa10 	bl	8012542 <USBD_CtlError>
        err++;
 8012122:	7afb      	ldrb	r3, [r7, #11]
 8012124:	3301      	adds	r3, #1
 8012126:	72fb      	strb	r3, [r7, #11]
      break;
 8012128:	e007      	b.n	801213a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801212a:	6839      	ldr	r1, [r7, #0]
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f000 fa08 	bl	8012542 <USBD_CtlError>
      err++;
 8012132:	7afb      	ldrb	r3, [r7, #11]
 8012134:	3301      	adds	r3, #1
 8012136:	72fb      	strb	r3, [r7, #11]
      break;
 8012138:	bf00      	nop
  }

  if (err != 0U)
 801213a:	7afb      	ldrb	r3, [r7, #11]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d11e      	bne.n	801217e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	88db      	ldrh	r3, [r3, #6]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d016      	beq.n	8012176 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012148:	893b      	ldrh	r3, [r7, #8]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d00e      	beq.n	801216c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	88da      	ldrh	r2, [r3, #6]
 8012152:	893b      	ldrh	r3, [r7, #8]
 8012154:	4293      	cmp	r3, r2
 8012156:	bf28      	it	cs
 8012158:	4613      	movcs	r3, r2
 801215a:	b29b      	uxth	r3, r3
 801215c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801215e:	893b      	ldrh	r3, [r7, #8]
 8012160:	461a      	mov	r2, r3
 8012162:	68f9      	ldr	r1, [r7, #12]
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f000 fa69 	bl	801263c <USBD_CtlSendData>
 801216a:	e009      	b.n	8012180 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801216c:	6839      	ldr	r1, [r7, #0]
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f000 f9e7 	bl	8012542 <USBD_CtlError>
 8012174:	e004      	b.n	8012180 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f000 fa9d 	bl	80126b6 <USBD_CtlSendStatus>
 801217c:	e000      	b.n	8012180 <USBD_GetDescriptor+0x320>
    return;
 801217e:	bf00      	nop
  }
}
 8012180:	3710      	adds	r7, #16
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop

08012188 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	889b      	ldrh	r3, [r3, #4]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d131      	bne.n	80121fe <USBD_SetAddress+0x76>
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	88db      	ldrh	r3, [r3, #6]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d12d      	bne.n	80121fe <USBD_SetAddress+0x76>
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	885b      	ldrh	r3, [r3, #2]
 80121a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80121a8:	d829      	bhi.n	80121fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	885b      	ldrh	r3, [r3, #2]
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80121b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121bc:	b2db      	uxtb	r3, r3
 80121be:	2b03      	cmp	r3, #3
 80121c0:	d104      	bne.n	80121cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80121c2:	6839      	ldr	r1, [r7, #0]
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f000 f9bc 	bl	8012542 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121ca:	e01d      	b.n	8012208 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	7bfa      	ldrb	r2, [r7, #15]
 80121d0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80121d4:	7bfb      	ldrb	r3, [r7, #15]
 80121d6:	4619      	mov	r1, r3
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f000 ff6e 	bl	80130ba <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 fa69 	bl	80126b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d004      	beq.n	80121f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2202      	movs	r2, #2
 80121ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121f2:	e009      	b.n	8012208 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2201      	movs	r2, #1
 80121f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121fc:	e004      	b.n	8012208 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80121fe:	6839      	ldr	r1, [r7, #0]
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f000 f99e 	bl	8012542 <USBD_CtlError>
  }
}
 8012206:	bf00      	nop
 8012208:	bf00      	nop
 801220a:	3710      	adds	r7, #16
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801221a:	2300      	movs	r3, #0
 801221c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	885b      	ldrh	r3, [r3, #2]
 8012222:	b2da      	uxtb	r2, r3
 8012224:	4b4e      	ldr	r3, [pc, #312]	@ (8012360 <USBD_SetConfig+0x150>)
 8012226:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012228:	4b4d      	ldr	r3, [pc, #308]	@ (8012360 <USBD_SetConfig+0x150>)
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	2b01      	cmp	r3, #1
 801222e:	d905      	bls.n	801223c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 f985 	bl	8012542 <USBD_CtlError>
    return USBD_FAIL;
 8012238:	2303      	movs	r3, #3
 801223a:	e08c      	b.n	8012356 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012242:	b2db      	uxtb	r3, r3
 8012244:	2b02      	cmp	r3, #2
 8012246:	d002      	beq.n	801224e <USBD_SetConfig+0x3e>
 8012248:	2b03      	cmp	r3, #3
 801224a:	d029      	beq.n	80122a0 <USBD_SetConfig+0x90>
 801224c:	e075      	b.n	801233a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801224e:	4b44      	ldr	r3, [pc, #272]	@ (8012360 <USBD_SetConfig+0x150>)
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d020      	beq.n	8012298 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012256:	4b42      	ldr	r3, [pc, #264]	@ (8012360 <USBD_SetConfig+0x150>)
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	461a      	mov	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012260:	4b3f      	ldr	r3, [pc, #252]	@ (8012360 <USBD_SetConfig+0x150>)
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	4619      	mov	r1, r3
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f7fe ffba 	bl	80111e0 <USBD_SetClassConfig>
 801226c:	4603      	mov	r3, r0
 801226e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012270:	7bfb      	ldrb	r3, [r7, #15]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d008      	beq.n	8012288 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012276:	6839      	ldr	r1, [r7, #0]
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 f962 	bl	8012542 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2202      	movs	r2, #2
 8012282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012286:	e065      	b.n	8012354 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 fa14 	bl	80126b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2203      	movs	r2, #3
 8012292:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012296:	e05d      	b.n	8012354 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f000 fa0c 	bl	80126b6 <USBD_CtlSendStatus>
      break;
 801229e:	e059      	b.n	8012354 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80122a0:	4b2f      	ldr	r3, [pc, #188]	@ (8012360 <USBD_SetConfig+0x150>)
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d112      	bne.n	80122ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2202      	movs	r2, #2
 80122ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80122b0:	4b2b      	ldr	r3, [pc, #172]	@ (8012360 <USBD_SetConfig+0x150>)
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	461a      	mov	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80122ba:	4b29      	ldr	r3, [pc, #164]	@ (8012360 <USBD_SetConfig+0x150>)
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	4619      	mov	r1, r3
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f7fe ffa9 	bl	8011218 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 f9f5 	bl	80126b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80122cc:	e042      	b.n	8012354 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80122ce:	4b24      	ldr	r3, [pc, #144]	@ (8012360 <USBD_SetConfig+0x150>)
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	461a      	mov	r2, r3
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	685b      	ldr	r3, [r3, #4]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d02a      	beq.n	8012332 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	4619      	mov	r1, r3
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f7fe ff97 	bl	8011218 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80122ea:	4b1d      	ldr	r3, [pc, #116]	@ (8012360 <USBD_SetConfig+0x150>)
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	461a      	mov	r2, r3
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80122f4:	4b1a      	ldr	r3, [pc, #104]	@ (8012360 <USBD_SetConfig+0x150>)
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	4619      	mov	r1, r3
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f7fe ff70 	bl	80111e0 <USBD_SetClassConfig>
 8012300:	4603      	mov	r3, r0
 8012302:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012304:	7bfb      	ldrb	r3, [r7, #15]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d00f      	beq.n	801232a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801230a:	6839      	ldr	r1, [r7, #0]
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f000 f918 	bl	8012542 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	b2db      	uxtb	r3, r3
 8012318:	4619      	mov	r1, r3
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f7fe ff7c 	bl	8011218 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2202      	movs	r2, #2
 8012324:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012328:	e014      	b.n	8012354 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 f9c3 	bl	80126b6 <USBD_CtlSendStatus>
      break;
 8012330:	e010      	b.n	8012354 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 f9bf 	bl	80126b6 <USBD_CtlSendStatus>
      break;
 8012338:	e00c      	b.n	8012354 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801233a:	6839      	ldr	r1, [r7, #0]
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f000 f900 	bl	8012542 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012342:	4b07      	ldr	r3, [pc, #28]	@ (8012360 <USBD_SetConfig+0x150>)
 8012344:	781b      	ldrb	r3, [r3, #0]
 8012346:	4619      	mov	r1, r3
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7fe ff65 	bl	8011218 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801234e:	2303      	movs	r3, #3
 8012350:	73fb      	strb	r3, [r7, #15]
      break;
 8012352:	bf00      	nop
  }

  return ret;
 8012354:	7bfb      	ldrb	r3, [r7, #15]
}
 8012356:	4618      	mov	r0, r3
 8012358:	3710      	adds	r7, #16
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	240008b8 	.word	0x240008b8

08012364 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	88db      	ldrh	r3, [r3, #6]
 8012372:	2b01      	cmp	r3, #1
 8012374:	d004      	beq.n	8012380 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012376:	6839      	ldr	r1, [r7, #0]
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 f8e2 	bl	8012542 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801237e:	e023      	b.n	80123c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012386:	b2db      	uxtb	r3, r3
 8012388:	2b02      	cmp	r3, #2
 801238a:	dc02      	bgt.n	8012392 <USBD_GetConfig+0x2e>
 801238c:	2b00      	cmp	r3, #0
 801238e:	dc03      	bgt.n	8012398 <USBD_GetConfig+0x34>
 8012390:	e015      	b.n	80123be <USBD_GetConfig+0x5a>
 8012392:	2b03      	cmp	r3, #3
 8012394:	d00b      	beq.n	80123ae <USBD_GetConfig+0x4a>
 8012396:	e012      	b.n	80123be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2200      	movs	r2, #0
 801239c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	3308      	adds	r3, #8
 80123a2:	2201      	movs	r2, #1
 80123a4:	4619      	mov	r1, r3
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 f948 	bl	801263c <USBD_CtlSendData>
        break;
 80123ac:	e00c      	b.n	80123c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	3304      	adds	r3, #4
 80123b2:	2201      	movs	r2, #1
 80123b4:	4619      	mov	r1, r3
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 f940 	bl	801263c <USBD_CtlSendData>
        break;
 80123bc:	e004      	b.n	80123c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80123be:	6839      	ldr	r1, [r7, #0]
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f000 f8be 	bl	8012542 <USBD_CtlError>
        break;
 80123c6:	bf00      	nop
}
 80123c8:	bf00      	nop
 80123ca:	3708      	adds	r7, #8
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	3b01      	subs	r3, #1
 80123e4:	2b02      	cmp	r3, #2
 80123e6:	d81e      	bhi.n	8012426 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	88db      	ldrh	r3, [r3, #6]
 80123ec:	2b02      	cmp	r3, #2
 80123ee:	d004      	beq.n	80123fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80123f0:	6839      	ldr	r1, [r7, #0]
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f000 f8a5 	bl	8012542 <USBD_CtlError>
        break;
 80123f8:	e01a      	b.n	8012430 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2201      	movs	r2, #1
 80123fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012406:	2b00      	cmp	r3, #0
 8012408:	d005      	beq.n	8012416 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	68db      	ldr	r3, [r3, #12]
 801240e:	f043 0202 	orr.w	r2, r3, #2
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	330c      	adds	r3, #12
 801241a:	2202      	movs	r2, #2
 801241c:	4619      	mov	r1, r3
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 f90c 	bl	801263c <USBD_CtlSendData>
      break;
 8012424:	e004      	b.n	8012430 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012426:	6839      	ldr	r1, [r7, #0]
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 f88a 	bl	8012542 <USBD_CtlError>
      break;
 801242e:	bf00      	nop
  }
}
 8012430:	bf00      	nop
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	885b      	ldrh	r3, [r3, #2]
 8012446:	2b01      	cmp	r3, #1
 8012448:	d107      	bne.n	801245a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2201      	movs	r2, #1
 801244e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f92f 	bl	80126b6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012458:	e013      	b.n	8012482 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	885b      	ldrh	r3, [r3, #2]
 801245e:	2b02      	cmp	r3, #2
 8012460:	d10b      	bne.n	801247a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	889b      	ldrh	r3, [r3, #4]
 8012466:	0a1b      	lsrs	r3, r3, #8
 8012468:	b29b      	uxth	r3, r3
 801246a:	b2da      	uxtb	r2, r3
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f000 f91f 	bl	80126b6 <USBD_CtlSendStatus>
}
 8012478:	e003      	b.n	8012482 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801247a:	6839      	ldr	r1, [r7, #0]
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 f860 	bl	8012542 <USBD_CtlError>
}
 8012482:	bf00      	nop
 8012484:	3708      	adds	r7, #8
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b082      	sub	sp, #8
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
 8012492:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801249a:	b2db      	uxtb	r3, r3
 801249c:	3b01      	subs	r3, #1
 801249e:	2b02      	cmp	r3, #2
 80124a0:	d80b      	bhi.n	80124ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	885b      	ldrh	r3, [r3, #2]
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d10c      	bne.n	80124c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2200      	movs	r2, #0
 80124ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 f8ff 	bl	80126b6 <USBD_CtlSendStatus>
      }
      break;
 80124b8:	e004      	b.n	80124c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80124ba:	6839      	ldr	r1, [r7, #0]
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f000 f840 	bl	8012542 <USBD_CtlError>
      break;
 80124c2:	e000      	b.n	80124c6 <USBD_ClrFeature+0x3c>
      break;
 80124c4:	bf00      	nop
  }
}
 80124c6:	bf00      	nop
 80124c8:	3708      	adds	r7, #8
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}

080124ce <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80124ce:	b580      	push	{r7, lr}
 80124d0:	b084      	sub	sp, #16
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
 80124d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	781a      	ldrb	r2, [r3, #0]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	3301      	adds	r3, #1
 80124e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	781a      	ldrb	r2, [r3, #0]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	3301      	adds	r3, #1
 80124f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80124f8:	68f8      	ldr	r0, [r7, #12]
 80124fa:	f7ff fa17 	bl	801192c <SWAPBYTE>
 80124fe:	4603      	mov	r3, r0
 8012500:	461a      	mov	r2, r3
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	3301      	adds	r3, #1
 801250a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	3301      	adds	r3, #1
 8012510:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f7ff fa0a 	bl	801192c <SWAPBYTE>
 8012518:	4603      	mov	r3, r0
 801251a:	461a      	mov	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	3301      	adds	r3, #1
 8012524:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	3301      	adds	r3, #1
 801252a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f7ff f9fd 	bl	801192c <SWAPBYTE>
 8012532:	4603      	mov	r3, r0
 8012534:	461a      	mov	r2, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	80da      	strh	r2, [r3, #6]
}
 801253a:	bf00      	nop
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012542:	b580      	push	{r7, lr}
 8012544:	b082      	sub	sp, #8
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
 801254a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801254c:	2180      	movs	r1, #128	@ 0x80
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 fd49 	bl	8012fe6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012554:	2100      	movs	r1, #0
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 fd45 	bl	8012fe6 <USBD_LL_StallEP>
}
 801255c:	bf00      	nop
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b086      	sub	sp, #24
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	60b9      	str	r1, [r7, #8]
 801256e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012570:	2300      	movs	r3, #0
 8012572:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d042      	beq.n	8012600 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801257e:	6938      	ldr	r0, [r7, #16]
 8012580:	f000 f842 	bl	8012608 <USBD_GetLen>
 8012584:	4603      	mov	r3, r0
 8012586:	3301      	adds	r3, #1
 8012588:	005b      	lsls	r3, r3, #1
 801258a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801258e:	d808      	bhi.n	80125a2 <USBD_GetString+0x3e>
 8012590:	6938      	ldr	r0, [r7, #16]
 8012592:	f000 f839 	bl	8012608 <USBD_GetLen>
 8012596:	4603      	mov	r3, r0
 8012598:	3301      	adds	r3, #1
 801259a:	b29b      	uxth	r3, r3
 801259c:	005b      	lsls	r3, r3, #1
 801259e:	b29a      	uxth	r2, r3
 80125a0:	e001      	b.n	80125a6 <USBD_GetString+0x42>
 80125a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80125aa:	7dfb      	ldrb	r3, [r7, #23]
 80125ac:	68ba      	ldr	r2, [r7, #8]
 80125ae:	4413      	add	r3, r2
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	7812      	ldrb	r2, [r2, #0]
 80125b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80125b6:	7dfb      	ldrb	r3, [r7, #23]
 80125b8:	3301      	adds	r3, #1
 80125ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80125bc:	7dfb      	ldrb	r3, [r7, #23]
 80125be:	68ba      	ldr	r2, [r7, #8]
 80125c0:	4413      	add	r3, r2
 80125c2:	2203      	movs	r2, #3
 80125c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80125c6:	7dfb      	ldrb	r3, [r7, #23]
 80125c8:	3301      	adds	r3, #1
 80125ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80125cc:	e013      	b.n	80125f6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80125ce:	7dfb      	ldrb	r3, [r7, #23]
 80125d0:	68ba      	ldr	r2, [r7, #8]
 80125d2:	4413      	add	r3, r2
 80125d4:	693a      	ldr	r2, [r7, #16]
 80125d6:	7812      	ldrb	r2, [r2, #0]
 80125d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	3301      	adds	r3, #1
 80125de:	613b      	str	r3, [r7, #16]
    idx++;
 80125e0:	7dfb      	ldrb	r3, [r7, #23]
 80125e2:	3301      	adds	r3, #1
 80125e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80125e6:	7dfb      	ldrb	r3, [r7, #23]
 80125e8:	68ba      	ldr	r2, [r7, #8]
 80125ea:	4413      	add	r3, r2
 80125ec:	2200      	movs	r2, #0
 80125ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80125f0:	7dfb      	ldrb	r3, [r7, #23]
 80125f2:	3301      	adds	r3, #1
 80125f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80125f6:	693b      	ldr	r3, [r7, #16]
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d1e7      	bne.n	80125ce <USBD_GetString+0x6a>
 80125fe:	e000      	b.n	8012602 <USBD_GetString+0x9e>
    return;
 8012600:	bf00      	nop
  }
}
 8012602:	3718      	adds	r7, #24
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012608:	b480      	push	{r7}
 801260a:	b085      	sub	sp, #20
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012610:	2300      	movs	r3, #0
 8012612:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012618:	e005      	b.n	8012626 <USBD_GetLen+0x1e>
  {
    len++;
 801261a:	7bfb      	ldrb	r3, [r7, #15]
 801261c:	3301      	adds	r3, #1
 801261e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	3301      	adds	r3, #1
 8012624:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d1f5      	bne.n	801261a <USBD_GetLen+0x12>
  }

  return len;
 801262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012630:	4618      	mov	r0, r3
 8012632:	3714      	adds	r7, #20
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr

0801263c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	2202      	movs	r2, #2
 801264c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	687a      	ldr	r2, [r7, #4]
 8012654:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	68ba      	ldr	r2, [r7, #8]
 8012660:	2100      	movs	r1, #0
 8012662:	68f8      	ldr	r0, [r7, #12]
 8012664:	f000 fd48 	bl	80130f8 <USBD_LL_Transmit>

  return USBD_OK;
 8012668:	2300      	movs	r3, #0
}
 801266a:	4618      	mov	r0, r3
 801266c:	3710      	adds	r7, #16
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}

08012672 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012672:	b580      	push	{r7, lr}
 8012674:	b084      	sub	sp, #16
 8012676:	af00      	add	r7, sp, #0
 8012678:	60f8      	str	r0, [r7, #12]
 801267a:	60b9      	str	r1, [r7, #8]
 801267c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	68ba      	ldr	r2, [r7, #8]
 8012682:	2100      	movs	r1, #0
 8012684:	68f8      	ldr	r0, [r7, #12]
 8012686:	f000 fd37 	bl	80130f8 <USBD_LL_Transmit>

  return USBD_OK;
 801268a:	2300      	movs	r3, #0
}
 801268c:	4618      	mov	r0, r3
 801268e:	3710      	adds	r7, #16
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	60b9      	str	r1, [r7, #8]
 801269e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	68ba      	ldr	r2, [r7, #8]
 80126a4:	2100      	movs	r1, #0
 80126a6:	68f8      	ldr	r0, [r7, #12]
 80126a8:	f000 fd47 	bl	801313a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126ac:	2300      	movs	r3, #0
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3710      	adds	r7, #16
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80126b6:	b580      	push	{r7, lr}
 80126b8:	b082      	sub	sp, #8
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2204      	movs	r2, #4
 80126c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80126c6:	2300      	movs	r3, #0
 80126c8:	2200      	movs	r2, #0
 80126ca:	2100      	movs	r1, #0
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f000 fd13 	bl	80130f8 <USBD_LL_Transmit>

  return USBD_OK;
 80126d2:	2300      	movs	r3, #0
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	3708      	adds	r7, #8
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}

080126dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2205      	movs	r2, #5
 80126e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80126ec:	2300      	movs	r3, #0
 80126ee:	2200      	movs	r2, #0
 80126f0:	2100      	movs	r1, #0
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 fd21 	bl	801313a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
	...

08012704 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012704:	b480      	push	{r7}
 8012706:	b087      	sub	sp, #28
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	4613      	mov	r3, r2
 8012710:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012712:	2301      	movs	r3, #1
 8012714:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012716:	2300      	movs	r3, #0
 8012718:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801271a:	4b1f      	ldr	r3, [pc, #124]	@ (8012798 <FATFS_LinkDriverEx+0x94>)
 801271c:	7a5b      	ldrb	r3, [r3, #9]
 801271e:	b2db      	uxtb	r3, r3
 8012720:	2b00      	cmp	r3, #0
 8012722:	d131      	bne.n	8012788 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012724:	4b1c      	ldr	r3, [pc, #112]	@ (8012798 <FATFS_LinkDriverEx+0x94>)
 8012726:	7a5b      	ldrb	r3, [r3, #9]
 8012728:	b2db      	uxtb	r3, r3
 801272a:	461a      	mov	r2, r3
 801272c:	4b1a      	ldr	r3, [pc, #104]	@ (8012798 <FATFS_LinkDriverEx+0x94>)
 801272e:	2100      	movs	r1, #0
 8012730:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012732:	4b19      	ldr	r3, [pc, #100]	@ (8012798 <FATFS_LinkDriverEx+0x94>)
 8012734:	7a5b      	ldrb	r3, [r3, #9]
 8012736:	b2db      	uxtb	r3, r3
 8012738:	4a17      	ldr	r2, [pc, #92]	@ (8012798 <FATFS_LinkDriverEx+0x94>)
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	4413      	add	r3, r2
 801273e:	68fa      	ldr	r2, [r7, #12]
 8012740:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012742:	4b15      	ldr	r3, [pc, #84]	@ (8012798 <FATFS_LinkDriverEx+0x94>)
 8012744:	7a5b      	ldrb	r3, [r3, #9]
 8012746:	b2db      	uxtb	r3, r3
 8012748:	461a      	mov	r2, r3
 801274a:	4b13      	ldr	r3, [pc, #76]	@ (8012798 <FATFS_LinkDriverEx+0x94>)
 801274c:	4413      	add	r3, r2
 801274e:	79fa      	ldrb	r2, [r7, #7]
 8012750:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012752:	4b11      	ldr	r3, [pc, #68]	@ (8012798 <FATFS_LinkDriverEx+0x94>)
 8012754:	7a5b      	ldrb	r3, [r3, #9]
 8012756:	b2db      	uxtb	r3, r3
 8012758:	1c5a      	adds	r2, r3, #1
 801275a:	b2d1      	uxtb	r1, r2
 801275c:	4a0e      	ldr	r2, [pc, #56]	@ (8012798 <FATFS_LinkDriverEx+0x94>)
 801275e:	7251      	strb	r1, [r2, #9]
 8012760:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012762:	7dbb      	ldrb	r3, [r7, #22]
 8012764:	3330      	adds	r3, #48	@ 0x30
 8012766:	b2da      	uxtb	r2, r3
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	3301      	adds	r3, #1
 8012770:	223a      	movs	r2, #58	@ 0x3a
 8012772:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	3302      	adds	r3, #2
 8012778:	222f      	movs	r2, #47	@ 0x2f
 801277a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	3303      	adds	r3, #3
 8012780:	2200      	movs	r2, #0
 8012782:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012784:	2300      	movs	r3, #0
 8012786:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012788:	7dfb      	ldrb	r3, [r7, #23]
}
 801278a:	4618      	mov	r0, r3
 801278c:	371c      	adds	r7, #28
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop
 8012798:	240008bc 	.word	0x240008bc

0801279c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b082      	sub	sp, #8
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80127a6:	2200      	movs	r2, #0
 80127a8:	6839      	ldr	r1, [r7, #0]
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f7ff ffaa 	bl	8012704 <FATFS_LinkDriverEx>
 80127b0:	4603      	mov	r3, r0
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3708      	adds	r7, #8
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}
	...

080127bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80127c0:	2200      	movs	r2, #0
 80127c2:	4913      	ldr	r1, [pc, #76]	@ (8012810 <MX_USB_DEVICE_Init+0x54>)
 80127c4:	4813      	ldr	r0, [pc, #76]	@ (8012814 <MX_USB_DEVICE_Init+0x58>)
 80127c6:	f7fe fc8e 	bl	80110e6 <USBD_Init>
 80127ca:	4603      	mov	r3, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d001      	beq.n	80127d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80127d0:	f7ef f846 	bl	8001860 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80127d4:	4910      	ldr	r1, [pc, #64]	@ (8012818 <MX_USB_DEVICE_Init+0x5c>)
 80127d6:	480f      	ldr	r0, [pc, #60]	@ (8012814 <MX_USB_DEVICE_Init+0x58>)
 80127d8:	f7fe fcb5 	bl	8011146 <USBD_RegisterClass>
 80127dc:	4603      	mov	r3, r0
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d001      	beq.n	80127e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80127e2:	f7ef f83d 	bl	8001860 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80127e6:	490d      	ldr	r1, [pc, #52]	@ (801281c <MX_USB_DEVICE_Init+0x60>)
 80127e8:	480a      	ldr	r0, [pc, #40]	@ (8012814 <MX_USB_DEVICE_Init+0x58>)
 80127ea:	f7fc ff33 	bl	800f654 <USBD_MSC_RegisterStorage>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d001      	beq.n	80127f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80127f4:	f7ef f834 	bl	8001860 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80127f8:	4806      	ldr	r0, [pc, #24]	@ (8012814 <MX_USB_DEVICE_Init+0x58>)
 80127fa:	f7fe fcda 	bl	80111b2 <USBD_Start>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d001      	beq.n	8012808 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012804:	f7ef f82c 	bl	8001860 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012808:	f7f2 fa40 	bl	8004c8c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801280c:	bf00      	nop
 801280e:	bd80      	pop	{r7, pc}
 8012810:	240000a4 	.word	0x240000a4
 8012814:	240008c8 	.word	0x240008c8
 8012818:	24000024 	.word	0x24000024
 801281c:	240000f8 	.word	0x240000f8

08012820 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	4603      	mov	r3, r0
 8012828:	6039      	str	r1, [r7, #0]
 801282a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	2212      	movs	r2, #18
 8012830:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012832:	4b03      	ldr	r3, [pc, #12]	@ (8012840 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012834:	4618      	mov	r0, r3
 8012836:	370c      	adds	r7, #12
 8012838:	46bd      	mov	sp, r7
 801283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283e:	4770      	bx	lr
 8012840:	240000c4 	.word	0x240000c4

08012844 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012844:	b480      	push	{r7}
 8012846:	b083      	sub	sp, #12
 8012848:	af00      	add	r7, sp, #0
 801284a:	4603      	mov	r3, r0
 801284c:	6039      	str	r1, [r7, #0]
 801284e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	2204      	movs	r2, #4
 8012854:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012856:	4b03      	ldr	r3, [pc, #12]	@ (8012864 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012858:	4618      	mov	r0, r3
 801285a:	370c      	adds	r7, #12
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr
 8012864:	240000d8 	.word	0x240000d8

08012868 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	4603      	mov	r3, r0
 8012870:	6039      	str	r1, [r7, #0]
 8012872:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012874:	79fb      	ldrb	r3, [r7, #7]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d105      	bne.n	8012886 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801287a:	683a      	ldr	r2, [r7, #0]
 801287c:	4907      	ldr	r1, [pc, #28]	@ (801289c <USBD_FS_ProductStrDescriptor+0x34>)
 801287e:	4808      	ldr	r0, [pc, #32]	@ (80128a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012880:	f7ff fe70 	bl	8012564 <USBD_GetString>
 8012884:	e004      	b.n	8012890 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012886:	683a      	ldr	r2, [r7, #0]
 8012888:	4904      	ldr	r1, [pc, #16]	@ (801289c <USBD_FS_ProductStrDescriptor+0x34>)
 801288a:	4805      	ldr	r0, [pc, #20]	@ (80128a0 <USBD_FS_ProductStrDescriptor+0x38>)
 801288c:	f7ff fe6a 	bl	8012564 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012890:	4b02      	ldr	r3, [pc, #8]	@ (801289c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012892:	4618      	mov	r0, r3
 8012894:	3708      	adds	r7, #8
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	24000ba4 	.word	0x24000ba4
 80128a0:	08015bf8 	.word	0x08015bf8

080128a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	4603      	mov	r3, r0
 80128ac:	6039      	str	r1, [r7, #0]
 80128ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80128b0:	683a      	ldr	r2, [r7, #0]
 80128b2:	4904      	ldr	r1, [pc, #16]	@ (80128c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80128b4:	4804      	ldr	r0, [pc, #16]	@ (80128c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80128b6:	f7ff fe55 	bl	8012564 <USBD_GetString>
  return USBD_StrDesc;
 80128ba:	4b02      	ldr	r3, [pc, #8]	@ (80128c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	24000ba4 	.word	0x24000ba4
 80128c8:	08015c0c 	.word	0x08015c0c

080128cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	4603      	mov	r3, r0
 80128d4:	6039      	str	r1, [r7, #0]
 80128d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	221a      	movs	r2, #26
 80128dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80128de:	f000 f843 	bl	8012968 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80128e2:	4b02      	ldr	r3, [pc, #8]	@ (80128ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	240000dc 	.word	0x240000dc

080128f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	4603      	mov	r3, r0
 80128f8:	6039      	str	r1, [r7, #0]
 80128fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80128fc:	79fb      	ldrb	r3, [r7, #7]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d105      	bne.n	801290e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012902:	683a      	ldr	r2, [r7, #0]
 8012904:	4907      	ldr	r1, [pc, #28]	@ (8012924 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012906:	4808      	ldr	r0, [pc, #32]	@ (8012928 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012908:	f7ff fe2c 	bl	8012564 <USBD_GetString>
 801290c:	e004      	b.n	8012918 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801290e:	683a      	ldr	r2, [r7, #0]
 8012910:	4904      	ldr	r1, [pc, #16]	@ (8012924 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012912:	4805      	ldr	r0, [pc, #20]	@ (8012928 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012914:	f7ff fe26 	bl	8012564 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012918:	4b02      	ldr	r3, [pc, #8]	@ (8012924 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801291a:	4618      	mov	r0, r3
 801291c:	3708      	adds	r7, #8
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	24000ba4 	.word	0x24000ba4
 8012928:	08015c20 	.word	0x08015c20

0801292c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	4603      	mov	r3, r0
 8012934:	6039      	str	r1, [r7, #0]
 8012936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012938:	79fb      	ldrb	r3, [r7, #7]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d105      	bne.n	801294a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801293e:	683a      	ldr	r2, [r7, #0]
 8012940:	4907      	ldr	r1, [pc, #28]	@ (8012960 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012942:	4808      	ldr	r0, [pc, #32]	@ (8012964 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012944:	f7ff fe0e 	bl	8012564 <USBD_GetString>
 8012948:	e004      	b.n	8012954 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801294a:	683a      	ldr	r2, [r7, #0]
 801294c:	4904      	ldr	r1, [pc, #16]	@ (8012960 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801294e:	4805      	ldr	r0, [pc, #20]	@ (8012964 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012950:	f7ff fe08 	bl	8012564 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012954:	4b02      	ldr	r3, [pc, #8]	@ (8012960 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012956:	4618      	mov	r0, r3
 8012958:	3708      	adds	r7, #8
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	24000ba4 	.word	0x24000ba4
 8012964:	08015c2c 	.word	0x08015c2c

08012968 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801296e:	4b0f      	ldr	r3, [pc, #60]	@ (80129ac <Get_SerialNum+0x44>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012974:	4b0e      	ldr	r3, [pc, #56]	@ (80129b0 <Get_SerialNum+0x48>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801297a:	4b0e      	ldr	r3, [pc, #56]	@ (80129b4 <Get_SerialNum+0x4c>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012980:	68fa      	ldr	r2, [r7, #12]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	4413      	add	r3, r2
 8012986:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d009      	beq.n	80129a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801298e:	2208      	movs	r2, #8
 8012990:	4909      	ldr	r1, [pc, #36]	@ (80129b8 <Get_SerialNum+0x50>)
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f000 f814 	bl	80129c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012998:	2204      	movs	r2, #4
 801299a:	4908      	ldr	r1, [pc, #32]	@ (80129bc <Get_SerialNum+0x54>)
 801299c:	68b8      	ldr	r0, [r7, #8]
 801299e:	f000 f80f 	bl	80129c0 <IntToUnicode>
  }
}
 80129a2:	bf00      	nop
 80129a4:	3710      	adds	r7, #16
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	1ff1e800 	.word	0x1ff1e800
 80129b0:	1ff1e804 	.word	0x1ff1e804
 80129b4:	1ff1e808 	.word	0x1ff1e808
 80129b8:	240000de 	.word	0x240000de
 80129bc:	240000ee 	.word	0x240000ee

080129c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b087      	sub	sp, #28
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	60f8      	str	r0, [r7, #12]
 80129c8:	60b9      	str	r1, [r7, #8]
 80129ca:	4613      	mov	r3, r2
 80129cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80129ce:	2300      	movs	r3, #0
 80129d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80129d2:	2300      	movs	r3, #0
 80129d4:	75fb      	strb	r3, [r7, #23]
 80129d6:	e027      	b.n	8012a28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	0f1b      	lsrs	r3, r3, #28
 80129dc:	2b09      	cmp	r3, #9
 80129de:	d80b      	bhi.n	80129f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	0f1b      	lsrs	r3, r3, #28
 80129e4:	b2da      	uxtb	r2, r3
 80129e6:	7dfb      	ldrb	r3, [r7, #23]
 80129e8:	005b      	lsls	r3, r3, #1
 80129ea:	4619      	mov	r1, r3
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	440b      	add	r3, r1
 80129f0:	3230      	adds	r2, #48	@ 0x30
 80129f2:	b2d2      	uxtb	r2, r2
 80129f4:	701a      	strb	r2, [r3, #0]
 80129f6:	e00a      	b.n	8012a0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	0f1b      	lsrs	r3, r3, #28
 80129fc:	b2da      	uxtb	r2, r3
 80129fe:	7dfb      	ldrb	r3, [r7, #23]
 8012a00:	005b      	lsls	r3, r3, #1
 8012a02:	4619      	mov	r1, r3
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	440b      	add	r3, r1
 8012a08:	3237      	adds	r2, #55	@ 0x37
 8012a0a:	b2d2      	uxtb	r2, r2
 8012a0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	011b      	lsls	r3, r3, #4
 8012a12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012a14:	7dfb      	ldrb	r3, [r7, #23]
 8012a16:	005b      	lsls	r3, r3, #1
 8012a18:	3301      	adds	r3, #1
 8012a1a:	68ba      	ldr	r2, [r7, #8]
 8012a1c:	4413      	add	r3, r2
 8012a1e:	2200      	movs	r2, #0
 8012a20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012a22:	7dfb      	ldrb	r3, [r7, #23]
 8012a24:	3301      	adds	r3, #1
 8012a26:	75fb      	strb	r3, [r7, #23]
 8012a28:	7dfa      	ldrb	r2, [r7, #23]
 8012a2a:	79fb      	ldrb	r3, [r7, #7]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d3d3      	bcc.n	80129d8 <IntToUnicode+0x18>
  }
}
 8012a30:	bf00      	nop
 8012a32:	bf00      	nop
 8012a34:	371c      	adds	r7, #28
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr

08012a3e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8012a3e:	b480      	push	{r7}
 8012a40:	b083      	sub	sp, #12
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	4603      	mov	r3, r0
 8012a46:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8012a48:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	370c      	adds	r7, #12
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a54:	4770      	bx	lr
	...

08012a58 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b08e      	sub	sp, #56	@ 0x38
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	4603      	mov	r3, r0
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	607a      	str	r2, [r7, #4]
 8012a64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
    HAL_SD_CardInfoTypeDef info;
    int8_t ret = -1;
 8012a66:	23ff      	movs	r3, #255	@ 0xff
 8012a68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Retrieve the card info
    if (HAL_SD_GetCardInfo(&hsd1, &info) == HAL_OK)
 8012a6c:	f107 0310 	add.w	r3, r7, #16
 8012a70:	4619      	mov	r1, r3
 8012a72:	480b      	ldr	r0, [pc, #44]	@ (8012aa0 <STORAGE_GetCapacity_FS+0x48>)
 8012a74:	f7f6 fcc4 	bl	8009400 <HAL_SD_GetCardInfo>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d10a      	bne.n	8012a94 <STORAGE_GetCapacity_FS+0x3c>
    {
        // Ensure the correct values are returned
        *block_num = info.LogBlockNbr - 1;
 8012a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a80:	1e5a      	subs	r2, r3, #1
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	601a      	str	r2, [r3, #0]
        *block_size = info.LogBlockSize;
 8012a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a88:	b29a      	uxth	r2, r3
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	801a      	strh	r2, [r3, #0]
        ret = USBD_OK;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return ret;
 8012a94:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3738      	adds	r7, #56	@ 0x38
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	24000628 	.word	0x24000628

08012aa4 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	4603      	mov	r3, r0
 8012aac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 8012aae:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	370c      	adds	r7, #12
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr

08012abc <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8012abc:	b480      	push	{r7}
 8012abe:	b083      	sub	sp, #12
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8012ac6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	370c      	adds	r7, #12
 8012acc:	46bd      	mov	sp, r7
 8012ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad2:	4770      	bx	lr

08012ad4 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b088      	sub	sp, #32
 8012ad8:	af02      	add	r7, sp, #8
 8012ada:	60b9      	str	r1, [r7, #8]
 8012adc:	607a      	str	r2, [r7, #4]
 8012ade:	461a      	mov	r2, r3
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	73fb      	strb	r3, [r7, #15]
 8012ae4:	4613      	mov	r3, r2
 8012ae6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 8012ae8:	23ff      	movs	r3, #255	@ 0xff
 8012aea:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8012aec:	89bb      	ldrh	r3, [r7, #12]
 8012aee:	f04f 32ff 	mov.w	r2, #4294967295
 8012af2:	9200      	str	r2, [sp, #0]
 8012af4:	687a      	ldr	r2, [r7, #4]
 8012af6:	68b9      	ldr	r1, [r7, #8]
 8012af8:	4808      	ldr	r0, [pc, #32]	@ (8012b1c <STORAGE_Read_FS+0x48>)
 8012afa:	f7f5 ff07 	bl	800890c <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8012afe:	bf00      	nop
 8012b00:	4806      	ldr	r0, [pc, #24]	@ (8012b1c <STORAGE_Read_FS+0x48>)
 8012b02:	f7f6 fdbb 	bl	800967c <HAL_SD_GetCardState>
 8012b06:	4603      	mov	r3, r0
 8012b08:	2b04      	cmp	r3, #4
 8012b0a:	d1f9      	bne.n	8012b00 <STORAGE_Read_FS+0x2c>
	  ret = 0;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8012b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3718      	adds	r7, #24
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}
 8012b1c:	24000628 	.word	0x24000628

08012b20 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b088      	sub	sp, #32
 8012b24:	af02      	add	r7, sp, #8
 8012b26:	60b9      	str	r1, [r7, #8]
 8012b28:	607a      	str	r2, [r7, #4]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	73fb      	strb	r3, [r7, #15]
 8012b30:	4613      	mov	r3, r2
 8012b32:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	  int8_t ret = -1;
 8012b34:	23ff      	movs	r3, #255	@ 0xff
 8012b36:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8012b38:	89bb      	ldrh	r3, [r7, #12]
 8012b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b3e:	9200      	str	r2, [sp, #0]
 8012b40:	687a      	ldr	r2, [r7, #4]
 8012b42:	68b9      	ldr	r1, [r7, #8]
 8012b44:	4808      	ldr	r0, [pc, #32]	@ (8012b68 <STORAGE_Write_FS+0x48>)
 8012b46:	f7f6 f86b 	bl	8008c20 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8012b4a:	bf00      	nop
 8012b4c:	4806      	ldr	r0, [pc, #24]	@ (8012b68 <STORAGE_Write_FS+0x48>)
 8012b4e:	f7f6 fd95 	bl	800967c <HAL_SD_GetCardState>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b04      	cmp	r3, #4
 8012b56:	d1f9      	bne.n	8012b4c <STORAGE_Write_FS+0x2c>
	  ret = 0;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8012b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3718      	adds	r7, #24
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	24000628 	.word	0x24000628

08012b6c <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8012b70:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	46bd      	mov	sp, r7
 8012b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7a:	4770      	bx	lr

08012b7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b0ba      	sub	sp, #232	@ 0xe8
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012b88:	2200      	movs	r2, #0
 8012b8a:	601a      	str	r2, [r3, #0]
 8012b8c:	605a      	str	r2, [r3, #4]
 8012b8e:	609a      	str	r2, [r3, #8]
 8012b90:	60da      	str	r2, [r3, #12]
 8012b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012b94:	f107 0310 	add.w	r3, r7, #16
 8012b98:	22c0      	movs	r2, #192	@ 0xc0
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f001 f985 	bl	8013eac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8012c58 <HAL_PCD_MspInit+0xdc>)
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d151      	bne.n	8012c50 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012bac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8012bb0:	f04f 0300 	mov.w	r3, #0
 8012bb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012bb8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8012bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012bc0:	f107 0310 	add.w	r3, r7, #16
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7f3 f883 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d001      	beq.n	8012bd4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8012bd0:	f7ee fe46 	bl	8001860 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012bd4:	f7f2 f85a 	bl	8004c8c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012bd8:	4b20      	ldr	r3, [pc, #128]	@ (8012c5c <HAL_PCD_MspInit+0xe0>)
 8012bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012bde:	4a1f      	ldr	r2, [pc, #124]	@ (8012c5c <HAL_PCD_MspInit+0xe0>)
 8012be0:	f043 0301 	orr.w	r3, r3, #1
 8012be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012be8:	4b1c      	ldr	r3, [pc, #112]	@ (8012c5c <HAL_PCD_MspInit+0xe0>)
 8012bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012bee:	f003 0301 	and.w	r3, r3, #1
 8012bf2:	60fb      	str	r3, [r7, #12]
 8012bf4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012bf6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bfe:	2302      	movs	r3, #2
 8012c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c04:	2300      	movs	r3, #0
 8012c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012c10:	230a      	movs	r3, #10
 8012c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012c16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	4810      	ldr	r0, [pc, #64]	@ (8012c60 <HAL_PCD_MspInit+0xe4>)
 8012c1e:	f7ef fd67 	bl	80026f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012c22:	4b0e      	ldr	r3, [pc, #56]	@ (8012c5c <HAL_PCD_MspInit+0xe0>)
 8012c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012c28:	4a0c      	ldr	r2, [pc, #48]	@ (8012c5c <HAL_PCD_MspInit+0xe0>)
 8012c2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012c2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8012c32:	4b0a      	ldr	r3, [pc, #40]	@ (8012c5c <HAL_PCD_MspInit+0xe0>)
 8012c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012c3c:	60bb      	str	r3, [r7, #8]
 8012c3e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012c40:	2200      	movs	r2, #0
 8012c42:	2100      	movs	r1, #0
 8012c44:	2065      	movs	r0, #101	@ 0x65
 8012c46:	f7ef fca6 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012c4a:	2065      	movs	r0, #101	@ 0x65
 8012c4c:	f7ef fcbd 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012c50:	bf00      	nop
 8012c52:	37e8      	adds	r7, #232	@ 0xe8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	40080000 	.word	0x40080000
 8012c5c:	58024400 	.word	0x58024400
 8012c60:	58020000 	.word	0x58020000

08012c64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012c78:	4619      	mov	r1, r3
 8012c7a:	4610      	mov	r0, r2
 8012c7c:	f7fe fae6 	bl	801124c <USBD_LL_SetupStage>
}
 8012c80:	bf00      	nop
 8012c82:	3708      	adds	r7, #8
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	460b      	mov	r3, r1
 8012c92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012c9a:	78fa      	ldrb	r2, [r7, #3]
 8012c9c:	6879      	ldr	r1, [r7, #4]
 8012c9e:	4613      	mov	r3, r2
 8012ca0:	00db      	lsls	r3, r3, #3
 8012ca2:	4413      	add	r3, r2
 8012ca4:	009b      	lsls	r3, r3, #2
 8012ca6:	440b      	add	r3, r1
 8012ca8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	78fb      	ldrb	r3, [r7, #3]
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	f7fe fb20 	bl	80112f6 <USBD_LL_DataOutStage>
}
 8012cb6:	bf00      	nop
 8012cb8:	3708      	adds	r7, #8
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}

08012cbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b082      	sub	sp, #8
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012cd0:	78fa      	ldrb	r2, [r7, #3]
 8012cd2:	6879      	ldr	r1, [r7, #4]
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	00db      	lsls	r3, r3, #3
 8012cd8:	4413      	add	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	440b      	add	r3, r1
 8012cde:	3320      	adds	r3, #32
 8012ce0:	681a      	ldr	r2, [r3, #0]
 8012ce2:	78fb      	ldrb	r3, [r7, #3]
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	f7fe fbb9 	bl	801145c <USBD_LL_DataInStage>
}
 8012cea:	bf00      	nop
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}

08012cf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cf2:	b580      	push	{r7, lr}
 8012cf4:	b082      	sub	sp, #8
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7fe fcf3 	bl	80116ec <USBD_LL_SOF>
}
 8012d06:	bf00      	nop
 8012d08:	3708      	adds	r7, #8
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}

08012d0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d0e:	b580      	push	{r7, lr}
 8012d10:	b084      	sub	sp, #16
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012d16:	2301      	movs	r3, #1
 8012d18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	79db      	ldrb	r3, [r3, #7]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d102      	bne.n	8012d28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012d22:	2300      	movs	r3, #0
 8012d24:	73fb      	strb	r3, [r7, #15]
 8012d26:	e008      	b.n	8012d3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	79db      	ldrb	r3, [r3, #7]
 8012d2c:	2b02      	cmp	r3, #2
 8012d2e:	d102      	bne.n	8012d36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012d30:	2301      	movs	r3, #1
 8012d32:	73fb      	strb	r3, [r7, #15]
 8012d34:	e001      	b.n	8012d3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012d36:	f7ee fd93 	bl	8001860 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d40:	7bfa      	ldrb	r2, [r7, #15]
 8012d42:	4611      	mov	r1, r2
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fe fc8d 	bl	8011664 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7fe fc35 	bl	80115c0 <USBD_LL_Reset>
}
 8012d56:	bf00      	nop
 8012d58:	3710      	adds	r7, #16
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
	...

08012d60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7fe fc88 	bl	8011684 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	687a      	ldr	r2, [r7, #4]
 8012d80:	6812      	ldr	r2, [r2, #0]
 8012d82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012d86:	f043 0301 	orr.w	r3, r3, #1
 8012d8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	7adb      	ldrb	r3, [r3, #11]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d005      	beq.n	8012da0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012d94:	4b04      	ldr	r3, [pc, #16]	@ (8012da8 <HAL_PCD_SuspendCallback+0x48>)
 8012d96:	691b      	ldr	r3, [r3, #16]
 8012d98:	4a03      	ldr	r2, [pc, #12]	@ (8012da8 <HAL_PCD_SuspendCallback+0x48>)
 8012d9a:	f043 0306 	orr.w	r3, r3, #6
 8012d9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012da0:	bf00      	nop
 8012da2:	3708      	adds	r7, #8
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	e000ed00 	.word	0xe000ed00

08012dac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7fe fc7e 	bl	80116bc <USBD_LL_Resume>
}
 8012dc0:	bf00      	nop
 8012dc2:	3708      	adds	r7, #8
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	460b      	mov	r3, r1
 8012dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012dda:	78fa      	ldrb	r2, [r7, #3]
 8012ddc:	4611      	mov	r1, r2
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fe fcd6 	bl	8011790 <USBD_LL_IsoOUTIncomplete>
}
 8012de4:	bf00      	nop
 8012de6:	3708      	adds	r7, #8
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}

08012dec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	460b      	mov	r3, r1
 8012df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012dfe:	78fa      	ldrb	r2, [r7, #3]
 8012e00:	4611      	mov	r1, r2
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fe fc92 	bl	801172c <USBD_LL_IsoINIncomplete>
}
 8012e08:	bf00      	nop
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7fe fce8 	bl	80117f4 <USBD_LL_DevConnected>
}
 8012e24:	bf00      	nop
 8012e26:	3708      	adds	r7, #8
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fe fce5 	bl	801180a <USBD_LL_DevDisconnected>
}
 8012e40:	bf00      	nop
 8012e42:	3708      	adds	r7, #8
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d13e      	bne.n	8012ed6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012e58:	4a21      	ldr	r2, [pc, #132]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	4a1f      	ldr	r2, [pc, #124]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e64:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012e68:	4b1d      	ldr	r3, [pc, #116]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8012ee4 <USBD_LL_Init+0x9c>)
 8012e6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e70:	2209      	movs	r2, #9
 8012e72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012e74:	4b1a      	ldr	r3, [pc, #104]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e76:	2202      	movs	r2, #2
 8012e78:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012e7a:	4b19      	ldr	r3, [pc, #100]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012e80:	4b17      	ldr	r3, [pc, #92]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e82:	2202      	movs	r2, #2
 8012e84:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012e86:	4b16      	ldr	r3, [pc, #88]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012e8c:	4b14      	ldr	r3, [pc, #80]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e8e:	2200      	movs	r2, #0
 8012e90:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012e92:	4b13      	ldr	r3, [pc, #76]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e94:	2200      	movs	r2, #0
 8012e96:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012e98:	4b11      	ldr	r3, [pc, #68]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012e9e:	4b10      	ldr	r3, [pc, #64]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012eaa:	480d      	ldr	r0, [pc, #52]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012eac:	f7f0 fbe9 	bl	8003682 <HAL_PCD_Init>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d001      	beq.n	8012eba <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012eb6:	f7ee fcd3 	bl	8001860 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012eba:	2180      	movs	r1, #128	@ 0x80
 8012ebc:	4808      	ldr	r0, [pc, #32]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012ebe:	f7f1 fe6a 	bl	8004b96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012ec2:	2240      	movs	r2, #64	@ 0x40
 8012ec4:	2100      	movs	r1, #0
 8012ec6:	4806      	ldr	r0, [pc, #24]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012ec8:	f7f1 fe1e 	bl	8004b08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012ecc:	2280      	movs	r2, #128	@ 0x80
 8012ece:	2101      	movs	r1, #1
 8012ed0:	4803      	ldr	r0, [pc, #12]	@ (8012ee0 <USBD_LL_Init+0x98>)
 8012ed2:	f7f1 fe19 	bl	8004b08 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8012ed6:	2300      	movs	r3, #0
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3708      	adds	r7, #8
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	24000da4 	.word	0x24000da4
 8012ee4:	40080000 	.word	0x40080000

08012ee8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7f0 fccb 	bl	800389a <HAL_PCD_Start>
 8012f04:	4603      	mov	r3, r0
 8012f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f08:	7bfb      	ldrb	r3, [r7, #15]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f000 f962 	bl	80131d4 <USBD_Get_USB_Status>
 8012f10:	4603      	mov	r3, r0
 8012f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3710      	adds	r7, #16
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012f1e:	b580      	push	{r7, lr}
 8012f20:	b084      	sub	sp, #16
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	6078      	str	r0, [r7, #4]
 8012f26:	4608      	mov	r0, r1
 8012f28:	4611      	mov	r1, r2
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	70fb      	strb	r3, [r7, #3]
 8012f30:	460b      	mov	r3, r1
 8012f32:	70bb      	strb	r3, [r7, #2]
 8012f34:	4613      	mov	r3, r2
 8012f36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012f46:	78bb      	ldrb	r3, [r7, #2]
 8012f48:	883a      	ldrh	r2, [r7, #0]
 8012f4a:	78f9      	ldrb	r1, [r7, #3]
 8012f4c:	f7f1 f9cc 	bl	80042e8 <HAL_PCD_EP_Open>
 8012f50:	4603      	mov	r3, r0
 8012f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f54:	7bfb      	ldrb	r3, [r7, #15]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f000 f93c 	bl	80131d4 <USBD_Get_USB_Status>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}

08012f6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f6a:	b580      	push	{r7, lr}
 8012f6c:	b084      	sub	sp, #16
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
 8012f72:	460b      	mov	r3, r1
 8012f74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f76:	2300      	movs	r3, #0
 8012f78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012f84:	78fa      	ldrb	r2, [r7, #3]
 8012f86:	4611      	mov	r1, r2
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7f1 fa15 	bl	80043b8 <HAL_PCD_EP_Close>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f92:	7bfb      	ldrb	r3, [r7, #15]
 8012f94:	4618      	mov	r0, r3
 8012f96:	f000 f91d 	bl	80131d4 <USBD_Get_USB_Status>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3710      	adds	r7, #16
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}

08012fa8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012fc2:	78fa      	ldrb	r2, [r7, #3]
 8012fc4:	4611      	mov	r1, r2
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7f1 fbb7 	bl	800473a <HAL_PCD_EP_Flush>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fd0:	7bfb      	ldrb	r3, [r7, #15]
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f000 f8fe 	bl	80131d4 <USBD_Get_USB_Status>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3710      	adds	r7, #16
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}

08012fe6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012fe6:	b580      	push	{r7, lr}
 8012fe8:	b084      	sub	sp, #16
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	6078      	str	r0, [r7, #4]
 8012fee:	460b      	mov	r3, r1
 8012ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013000:	78fa      	ldrb	r2, [r7, #3]
 8013002:	4611      	mov	r1, r2
 8013004:	4618      	mov	r0, r3
 8013006:	f7f1 faae 	bl	8004566 <HAL_PCD_EP_SetStall>
 801300a:	4603      	mov	r3, r0
 801300c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801300e:	7bfb      	ldrb	r3, [r7, #15]
 8013010:	4618      	mov	r0, r3
 8013012:	f000 f8df 	bl	80131d4 <USBD_Get_USB_Status>
 8013016:	4603      	mov	r3, r0
 8013018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801301a:	7bbb      	ldrb	r3, [r7, #14]
}
 801301c:	4618      	mov	r0, r3
 801301e:	3710      	adds	r7, #16
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b084      	sub	sp, #16
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	460b      	mov	r3, r1
 801302e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013030:	2300      	movs	r3, #0
 8013032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013034:	2300      	movs	r3, #0
 8013036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801303e:	78fa      	ldrb	r2, [r7, #3]
 8013040:	4611      	mov	r1, r2
 8013042:	4618      	mov	r0, r3
 8013044:	f7f1 faf2 	bl	800462c <HAL_PCD_EP_ClrStall>
 8013048:	4603      	mov	r3, r0
 801304a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801304c:	7bfb      	ldrb	r3, [r7, #15]
 801304e:	4618      	mov	r0, r3
 8013050:	f000 f8c0 	bl	80131d4 <USBD_Get_USB_Status>
 8013054:	4603      	mov	r3, r0
 8013056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013058:	7bbb      	ldrb	r3, [r7, #14]
}
 801305a:	4618      	mov	r0, r3
 801305c:	3710      	adds	r7, #16
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}

08013062 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013062:	b480      	push	{r7}
 8013064:	b085      	sub	sp, #20
 8013066:	af00      	add	r7, sp, #0
 8013068:	6078      	str	r0, [r7, #4]
 801306a:	460b      	mov	r3, r1
 801306c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013074:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801307a:	2b00      	cmp	r3, #0
 801307c:	da0b      	bge.n	8013096 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801307e:	78fb      	ldrb	r3, [r7, #3]
 8013080:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013084:	68f9      	ldr	r1, [r7, #12]
 8013086:	4613      	mov	r3, r2
 8013088:	00db      	lsls	r3, r3, #3
 801308a:	4413      	add	r3, r2
 801308c:	009b      	lsls	r3, r3, #2
 801308e:	440b      	add	r3, r1
 8013090:	3316      	adds	r3, #22
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	e00b      	b.n	80130ae <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013096:	78fb      	ldrb	r3, [r7, #3]
 8013098:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801309c:	68f9      	ldr	r1, [r7, #12]
 801309e:	4613      	mov	r3, r2
 80130a0:	00db      	lsls	r3, r3, #3
 80130a2:	4413      	add	r3, r2
 80130a4:	009b      	lsls	r3, r3, #2
 80130a6:	440b      	add	r3, r1
 80130a8:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80130ac:	781b      	ldrb	r3, [r3, #0]
  }
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3714      	adds	r7, #20
 80130b2:	46bd      	mov	sp, r7
 80130b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b8:	4770      	bx	lr

080130ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80130ba:	b580      	push	{r7, lr}
 80130bc:	b084      	sub	sp, #16
 80130be:	af00      	add	r7, sp, #0
 80130c0:	6078      	str	r0, [r7, #4]
 80130c2:	460b      	mov	r3, r1
 80130c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130c6:	2300      	movs	r3, #0
 80130c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130ca:	2300      	movs	r3, #0
 80130cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80130d4:	78fa      	ldrb	r2, [r7, #3]
 80130d6:	4611      	mov	r1, r2
 80130d8:	4618      	mov	r0, r3
 80130da:	f7f1 f8e1 	bl	80042a0 <HAL_PCD_SetAddress>
 80130de:	4603      	mov	r3, r0
 80130e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130e2:	7bfb      	ldrb	r3, [r7, #15]
 80130e4:	4618      	mov	r0, r3
 80130e6:	f000 f875 	bl	80131d4 <USBD_Get_USB_Status>
 80130ea:	4603      	mov	r3, r0
 80130ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3710      	adds	r7, #16
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b086      	sub	sp, #24
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	60f8      	str	r0, [r7, #12]
 8013100:	607a      	str	r2, [r7, #4]
 8013102:	603b      	str	r3, [r7, #0]
 8013104:	460b      	mov	r3, r1
 8013106:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013108:	2300      	movs	r3, #0
 801310a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801310c:	2300      	movs	r3, #0
 801310e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013116:	7af9      	ldrb	r1, [r7, #11]
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	687a      	ldr	r2, [r7, #4]
 801311c:	f7f1 f9e9 	bl	80044f2 <HAL_PCD_EP_Transmit>
 8013120:	4603      	mov	r3, r0
 8013122:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013124:	7dfb      	ldrb	r3, [r7, #23]
 8013126:	4618      	mov	r0, r3
 8013128:	f000 f854 	bl	80131d4 <USBD_Get_USB_Status>
 801312c:	4603      	mov	r3, r0
 801312e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013130:	7dbb      	ldrb	r3, [r7, #22]
}
 8013132:	4618      	mov	r0, r3
 8013134:	3718      	adds	r7, #24
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}

0801313a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801313a:	b580      	push	{r7, lr}
 801313c:	b086      	sub	sp, #24
 801313e:	af00      	add	r7, sp, #0
 8013140:	60f8      	str	r0, [r7, #12]
 8013142:	607a      	str	r2, [r7, #4]
 8013144:	603b      	str	r3, [r7, #0]
 8013146:	460b      	mov	r3, r1
 8013148:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801314a:	2300      	movs	r3, #0
 801314c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801314e:	2300      	movs	r3, #0
 8013150:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013158:	7af9      	ldrb	r1, [r7, #11]
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	f7f1 f975 	bl	800444c <HAL_PCD_EP_Receive>
 8013162:	4603      	mov	r3, r0
 8013164:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013166:	7dfb      	ldrb	r3, [r7, #23]
 8013168:	4618      	mov	r0, r3
 801316a:	f000 f833 	bl	80131d4 <USBD_Get_USB_Status>
 801316e:	4603      	mov	r3, r0
 8013170:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013172:	7dbb      	ldrb	r3, [r7, #22]
}
 8013174:	4618      	mov	r0, r3
 8013176:	3718      	adds	r7, #24
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	460b      	mov	r3, r1
 8013186:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801318e:	78fa      	ldrb	r2, [r7, #3]
 8013190:	4611      	mov	r1, r2
 8013192:	4618      	mov	r0, r3
 8013194:	f7f1 f995 	bl	80044c2 <HAL_PCD_EP_GetRxCount>
 8013198:	4603      	mov	r3, r0
}
 801319a:	4618      	mov	r0, r3
 801319c:	3708      	adds	r7, #8
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}
	...

080131a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80131ac:	4b03      	ldr	r3, [pc, #12]	@ (80131bc <USBD_static_malloc+0x18>)
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	370c      	adds	r7, #12
 80131b2:	46bd      	mov	sp, r7
 80131b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b8:	4770      	bx	lr
 80131ba:	bf00      	nop
 80131bc:	24001288 	.word	0x24001288

080131c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b083      	sub	sp, #12
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80131c8:	bf00      	nop
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80131d4:	b480      	push	{r7}
 80131d6:	b085      	sub	sp, #20
 80131d8:	af00      	add	r7, sp, #0
 80131da:	4603      	mov	r3, r0
 80131dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131de:	2300      	movs	r3, #0
 80131e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80131e2:	79fb      	ldrb	r3, [r7, #7]
 80131e4:	2b03      	cmp	r3, #3
 80131e6:	d817      	bhi.n	8013218 <USBD_Get_USB_Status+0x44>
 80131e8:	a201      	add	r2, pc, #4	@ (adr r2, 80131f0 <USBD_Get_USB_Status+0x1c>)
 80131ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131ee:	bf00      	nop
 80131f0:	08013201 	.word	0x08013201
 80131f4:	08013207 	.word	0x08013207
 80131f8:	0801320d 	.word	0x0801320d
 80131fc:	08013213 	.word	0x08013213
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013200:	2300      	movs	r3, #0
 8013202:	73fb      	strb	r3, [r7, #15]
    break;
 8013204:	e00b      	b.n	801321e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013206:	2303      	movs	r3, #3
 8013208:	73fb      	strb	r3, [r7, #15]
    break;
 801320a:	e008      	b.n	801321e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801320c:	2301      	movs	r3, #1
 801320e:	73fb      	strb	r3, [r7, #15]
    break;
 8013210:	e005      	b.n	801321e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013212:	2303      	movs	r3, #3
 8013214:	73fb      	strb	r3, [r7, #15]
    break;
 8013216:	e002      	b.n	801321e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013218:	2303      	movs	r3, #3
 801321a:	73fb      	strb	r3, [r7, #15]
    break;
 801321c:	bf00      	nop
  }
  return usb_status;
 801321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013220:	4618      	mov	r0, r3
 8013222:	3714      	adds	r7, #20
 8013224:	46bd      	mov	sp, r7
 8013226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322a:	4770      	bx	lr

0801322c <__cvt>:
 801322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801322e:	ed2d 8b02 	vpush	{d8}
 8013232:	eeb0 8b40 	vmov.f64	d8, d0
 8013236:	b085      	sub	sp, #20
 8013238:	4617      	mov	r7, r2
 801323a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801323c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801323e:	ee18 2a90 	vmov	r2, s17
 8013242:	f025 0520 	bic.w	r5, r5, #32
 8013246:	2a00      	cmp	r2, #0
 8013248:	bfb6      	itet	lt
 801324a:	222d      	movlt	r2, #45	@ 0x2d
 801324c:	2200      	movge	r2, #0
 801324e:	eeb1 8b40 	vneglt.f64	d8, d0
 8013252:	2d46      	cmp	r5, #70	@ 0x46
 8013254:	460c      	mov	r4, r1
 8013256:	701a      	strb	r2, [r3, #0]
 8013258:	d004      	beq.n	8013264 <__cvt+0x38>
 801325a:	2d45      	cmp	r5, #69	@ 0x45
 801325c:	d100      	bne.n	8013260 <__cvt+0x34>
 801325e:	3401      	adds	r4, #1
 8013260:	2102      	movs	r1, #2
 8013262:	e000      	b.n	8013266 <__cvt+0x3a>
 8013264:	2103      	movs	r1, #3
 8013266:	ab03      	add	r3, sp, #12
 8013268:	9301      	str	r3, [sp, #4]
 801326a:	ab02      	add	r3, sp, #8
 801326c:	9300      	str	r3, [sp, #0]
 801326e:	4622      	mov	r2, r4
 8013270:	4633      	mov	r3, r6
 8013272:	eeb0 0b48 	vmov.f64	d0, d8
 8013276:	f000 ff2f 	bl	80140d8 <_dtoa_r>
 801327a:	2d47      	cmp	r5, #71	@ 0x47
 801327c:	d114      	bne.n	80132a8 <__cvt+0x7c>
 801327e:	07fb      	lsls	r3, r7, #31
 8013280:	d50a      	bpl.n	8013298 <__cvt+0x6c>
 8013282:	1902      	adds	r2, r0, r4
 8013284:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328c:	bf08      	it	eq
 801328e:	9203      	streq	r2, [sp, #12]
 8013290:	2130      	movs	r1, #48	@ 0x30
 8013292:	9b03      	ldr	r3, [sp, #12]
 8013294:	4293      	cmp	r3, r2
 8013296:	d319      	bcc.n	80132cc <__cvt+0xa0>
 8013298:	9b03      	ldr	r3, [sp, #12]
 801329a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801329c:	1a1b      	subs	r3, r3, r0
 801329e:	6013      	str	r3, [r2, #0]
 80132a0:	b005      	add	sp, #20
 80132a2:	ecbd 8b02 	vpop	{d8}
 80132a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132a8:	2d46      	cmp	r5, #70	@ 0x46
 80132aa:	eb00 0204 	add.w	r2, r0, r4
 80132ae:	d1e9      	bne.n	8013284 <__cvt+0x58>
 80132b0:	7803      	ldrb	r3, [r0, #0]
 80132b2:	2b30      	cmp	r3, #48	@ 0x30
 80132b4:	d107      	bne.n	80132c6 <__cvt+0x9a>
 80132b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80132ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132be:	bf1c      	itt	ne
 80132c0:	f1c4 0401 	rsbne	r4, r4, #1
 80132c4:	6034      	strne	r4, [r6, #0]
 80132c6:	6833      	ldr	r3, [r6, #0]
 80132c8:	441a      	add	r2, r3
 80132ca:	e7db      	b.n	8013284 <__cvt+0x58>
 80132cc:	1c5c      	adds	r4, r3, #1
 80132ce:	9403      	str	r4, [sp, #12]
 80132d0:	7019      	strb	r1, [r3, #0]
 80132d2:	e7de      	b.n	8013292 <__cvt+0x66>

080132d4 <__exponent>:
 80132d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80132d6:	2900      	cmp	r1, #0
 80132d8:	bfba      	itte	lt
 80132da:	4249      	neglt	r1, r1
 80132dc:	232d      	movlt	r3, #45	@ 0x2d
 80132de:	232b      	movge	r3, #43	@ 0x2b
 80132e0:	2909      	cmp	r1, #9
 80132e2:	7002      	strb	r2, [r0, #0]
 80132e4:	7043      	strb	r3, [r0, #1]
 80132e6:	dd29      	ble.n	801333c <__exponent+0x68>
 80132e8:	f10d 0307 	add.w	r3, sp, #7
 80132ec:	461d      	mov	r5, r3
 80132ee:	270a      	movs	r7, #10
 80132f0:	461a      	mov	r2, r3
 80132f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80132f6:	fb07 1416 	mls	r4, r7, r6, r1
 80132fa:	3430      	adds	r4, #48	@ 0x30
 80132fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013300:	460c      	mov	r4, r1
 8013302:	2c63      	cmp	r4, #99	@ 0x63
 8013304:	f103 33ff 	add.w	r3, r3, #4294967295
 8013308:	4631      	mov	r1, r6
 801330a:	dcf1      	bgt.n	80132f0 <__exponent+0x1c>
 801330c:	3130      	adds	r1, #48	@ 0x30
 801330e:	1e94      	subs	r4, r2, #2
 8013310:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013314:	1c41      	adds	r1, r0, #1
 8013316:	4623      	mov	r3, r4
 8013318:	42ab      	cmp	r3, r5
 801331a:	d30a      	bcc.n	8013332 <__exponent+0x5e>
 801331c:	f10d 0309 	add.w	r3, sp, #9
 8013320:	1a9b      	subs	r3, r3, r2
 8013322:	42ac      	cmp	r4, r5
 8013324:	bf88      	it	hi
 8013326:	2300      	movhi	r3, #0
 8013328:	3302      	adds	r3, #2
 801332a:	4403      	add	r3, r0
 801332c:	1a18      	subs	r0, r3, r0
 801332e:	b003      	add	sp, #12
 8013330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013332:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013336:	f801 6f01 	strb.w	r6, [r1, #1]!
 801333a:	e7ed      	b.n	8013318 <__exponent+0x44>
 801333c:	2330      	movs	r3, #48	@ 0x30
 801333e:	3130      	adds	r1, #48	@ 0x30
 8013340:	7083      	strb	r3, [r0, #2]
 8013342:	70c1      	strb	r1, [r0, #3]
 8013344:	1d03      	adds	r3, r0, #4
 8013346:	e7f1      	b.n	801332c <__exponent+0x58>

08013348 <_printf_float>:
 8013348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334c:	b08d      	sub	sp, #52	@ 0x34
 801334e:	460c      	mov	r4, r1
 8013350:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013354:	4616      	mov	r6, r2
 8013356:	461f      	mov	r7, r3
 8013358:	4605      	mov	r5, r0
 801335a:	f000 fdaf 	bl	8013ebc <_localeconv_r>
 801335e:	f8d0 b000 	ldr.w	fp, [r0]
 8013362:	4658      	mov	r0, fp
 8013364:	f7ed f80c 	bl	8000380 <strlen>
 8013368:	2300      	movs	r3, #0
 801336a:	930a      	str	r3, [sp, #40]	@ 0x28
 801336c:	f8d8 3000 	ldr.w	r3, [r8]
 8013370:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013374:	6822      	ldr	r2, [r4, #0]
 8013376:	9005      	str	r0, [sp, #20]
 8013378:	3307      	adds	r3, #7
 801337a:	f023 0307 	bic.w	r3, r3, #7
 801337e:	f103 0108 	add.w	r1, r3, #8
 8013382:	f8c8 1000 	str.w	r1, [r8]
 8013386:	ed93 0b00 	vldr	d0, [r3]
 801338a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80135e8 <_printf_float+0x2a0>
 801338e:	eeb0 7bc0 	vabs.f64	d7, d0
 8013392:	eeb4 7b46 	vcmp.f64	d7, d6
 8013396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801339e:	dd24      	ble.n	80133ea <_printf_float+0xa2>
 80133a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80133a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a8:	d502      	bpl.n	80133b0 <_printf_float+0x68>
 80133aa:	232d      	movs	r3, #45	@ 0x2d
 80133ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80133b0:	498f      	ldr	r1, [pc, #572]	@ (80135f0 <_printf_float+0x2a8>)
 80133b2:	4b90      	ldr	r3, [pc, #576]	@ (80135f4 <_printf_float+0x2ac>)
 80133b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80133b8:	bf94      	ite	ls
 80133ba:	4688      	movls	r8, r1
 80133bc:	4698      	movhi	r8, r3
 80133be:	f022 0204 	bic.w	r2, r2, #4
 80133c2:	2303      	movs	r3, #3
 80133c4:	6123      	str	r3, [r4, #16]
 80133c6:	6022      	str	r2, [r4, #0]
 80133c8:	f04f 0a00 	mov.w	sl, #0
 80133cc:	9700      	str	r7, [sp, #0]
 80133ce:	4633      	mov	r3, r6
 80133d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80133d2:	4621      	mov	r1, r4
 80133d4:	4628      	mov	r0, r5
 80133d6:	f000 f9d1 	bl	801377c <_printf_common>
 80133da:	3001      	adds	r0, #1
 80133dc:	f040 8089 	bne.w	80134f2 <_printf_float+0x1aa>
 80133e0:	f04f 30ff 	mov.w	r0, #4294967295
 80133e4:	b00d      	add	sp, #52	@ 0x34
 80133e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80133ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f2:	d709      	bvc.n	8013408 <_printf_float+0xc0>
 80133f4:	ee10 3a90 	vmov	r3, s1
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	bfbc      	itt	lt
 80133fc:	232d      	movlt	r3, #45	@ 0x2d
 80133fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013402:	497d      	ldr	r1, [pc, #500]	@ (80135f8 <_printf_float+0x2b0>)
 8013404:	4b7d      	ldr	r3, [pc, #500]	@ (80135fc <_printf_float+0x2b4>)
 8013406:	e7d5      	b.n	80133b4 <_printf_float+0x6c>
 8013408:	6863      	ldr	r3, [r4, #4]
 801340a:	1c59      	adds	r1, r3, #1
 801340c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013410:	d139      	bne.n	8013486 <_printf_float+0x13e>
 8013412:	2306      	movs	r3, #6
 8013414:	6063      	str	r3, [r4, #4]
 8013416:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801341a:	2300      	movs	r3, #0
 801341c:	6022      	str	r2, [r4, #0]
 801341e:	9303      	str	r3, [sp, #12]
 8013420:	ab0a      	add	r3, sp, #40	@ 0x28
 8013422:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013426:	ab09      	add	r3, sp, #36	@ 0x24
 8013428:	9300      	str	r3, [sp, #0]
 801342a:	6861      	ldr	r1, [r4, #4]
 801342c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013430:	4628      	mov	r0, r5
 8013432:	f7ff fefb 	bl	801322c <__cvt>
 8013436:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801343a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801343c:	4680      	mov	r8, r0
 801343e:	d129      	bne.n	8013494 <_printf_float+0x14c>
 8013440:	1cc8      	adds	r0, r1, #3
 8013442:	db02      	blt.n	801344a <_printf_float+0x102>
 8013444:	6863      	ldr	r3, [r4, #4]
 8013446:	4299      	cmp	r1, r3
 8013448:	dd41      	ble.n	80134ce <_printf_float+0x186>
 801344a:	f1a9 0902 	sub.w	r9, r9, #2
 801344e:	fa5f f989 	uxtb.w	r9, r9
 8013452:	3901      	subs	r1, #1
 8013454:	464a      	mov	r2, r9
 8013456:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801345a:	9109      	str	r1, [sp, #36]	@ 0x24
 801345c:	f7ff ff3a 	bl	80132d4 <__exponent>
 8013460:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013462:	1813      	adds	r3, r2, r0
 8013464:	2a01      	cmp	r2, #1
 8013466:	4682      	mov	sl, r0
 8013468:	6123      	str	r3, [r4, #16]
 801346a:	dc02      	bgt.n	8013472 <_printf_float+0x12a>
 801346c:	6822      	ldr	r2, [r4, #0]
 801346e:	07d2      	lsls	r2, r2, #31
 8013470:	d501      	bpl.n	8013476 <_printf_float+0x12e>
 8013472:	3301      	adds	r3, #1
 8013474:	6123      	str	r3, [r4, #16]
 8013476:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801347a:	2b00      	cmp	r3, #0
 801347c:	d0a6      	beq.n	80133cc <_printf_float+0x84>
 801347e:	232d      	movs	r3, #45	@ 0x2d
 8013480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013484:	e7a2      	b.n	80133cc <_printf_float+0x84>
 8013486:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801348a:	d1c4      	bne.n	8013416 <_printf_float+0xce>
 801348c:	2b00      	cmp	r3, #0
 801348e:	d1c2      	bne.n	8013416 <_printf_float+0xce>
 8013490:	2301      	movs	r3, #1
 8013492:	e7bf      	b.n	8013414 <_printf_float+0xcc>
 8013494:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013498:	d9db      	bls.n	8013452 <_printf_float+0x10a>
 801349a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801349e:	d118      	bne.n	80134d2 <_printf_float+0x18a>
 80134a0:	2900      	cmp	r1, #0
 80134a2:	6863      	ldr	r3, [r4, #4]
 80134a4:	dd0b      	ble.n	80134be <_printf_float+0x176>
 80134a6:	6121      	str	r1, [r4, #16]
 80134a8:	b913      	cbnz	r3, 80134b0 <_printf_float+0x168>
 80134aa:	6822      	ldr	r2, [r4, #0]
 80134ac:	07d0      	lsls	r0, r2, #31
 80134ae:	d502      	bpl.n	80134b6 <_printf_float+0x16e>
 80134b0:	3301      	adds	r3, #1
 80134b2:	440b      	add	r3, r1
 80134b4:	6123      	str	r3, [r4, #16]
 80134b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80134b8:	f04f 0a00 	mov.w	sl, #0
 80134bc:	e7db      	b.n	8013476 <_printf_float+0x12e>
 80134be:	b913      	cbnz	r3, 80134c6 <_printf_float+0x17e>
 80134c0:	6822      	ldr	r2, [r4, #0]
 80134c2:	07d2      	lsls	r2, r2, #31
 80134c4:	d501      	bpl.n	80134ca <_printf_float+0x182>
 80134c6:	3302      	adds	r3, #2
 80134c8:	e7f4      	b.n	80134b4 <_printf_float+0x16c>
 80134ca:	2301      	movs	r3, #1
 80134cc:	e7f2      	b.n	80134b4 <_printf_float+0x16c>
 80134ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80134d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134d4:	4299      	cmp	r1, r3
 80134d6:	db05      	blt.n	80134e4 <_printf_float+0x19c>
 80134d8:	6823      	ldr	r3, [r4, #0]
 80134da:	6121      	str	r1, [r4, #16]
 80134dc:	07d8      	lsls	r0, r3, #31
 80134de:	d5ea      	bpl.n	80134b6 <_printf_float+0x16e>
 80134e0:	1c4b      	adds	r3, r1, #1
 80134e2:	e7e7      	b.n	80134b4 <_printf_float+0x16c>
 80134e4:	2900      	cmp	r1, #0
 80134e6:	bfd4      	ite	le
 80134e8:	f1c1 0202 	rsble	r2, r1, #2
 80134ec:	2201      	movgt	r2, #1
 80134ee:	4413      	add	r3, r2
 80134f0:	e7e0      	b.n	80134b4 <_printf_float+0x16c>
 80134f2:	6823      	ldr	r3, [r4, #0]
 80134f4:	055a      	lsls	r2, r3, #21
 80134f6:	d407      	bmi.n	8013508 <_printf_float+0x1c0>
 80134f8:	6923      	ldr	r3, [r4, #16]
 80134fa:	4642      	mov	r2, r8
 80134fc:	4631      	mov	r1, r6
 80134fe:	4628      	mov	r0, r5
 8013500:	47b8      	blx	r7
 8013502:	3001      	adds	r0, #1
 8013504:	d12a      	bne.n	801355c <_printf_float+0x214>
 8013506:	e76b      	b.n	80133e0 <_printf_float+0x98>
 8013508:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801350c:	f240 80e0 	bls.w	80136d0 <_printf_float+0x388>
 8013510:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013514:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801351c:	d133      	bne.n	8013586 <_printf_float+0x23e>
 801351e:	4a38      	ldr	r2, [pc, #224]	@ (8013600 <_printf_float+0x2b8>)
 8013520:	2301      	movs	r3, #1
 8013522:	4631      	mov	r1, r6
 8013524:	4628      	mov	r0, r5
 8013526:	47b8      	blx	r7
 8013528:	3001      	adds	r0, #1
 801352a:	f43f af59 	beq.w	80133e0 <_printf_float+0x98>
 801352e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013532:	4543      	cmp	r3, r8
 8013534:	db02      	blt.n	801353c <_printf_float+0x1f4>
 8013536:	6823      	ldr	r3, [r4, #0]
 8013538:	07d8      	lsls	r0, r3, #31
 801353a:	d50f      	bpl.n	801355c <_printf_float+0x214>
 801353c:	9b05      	ldr	r3, [sp, #20]
 801353e:	465a      	mov	r2, fp
 8013540:	4631      	mov	r1, r6
 8013542:	4628      	mov	r0, r5
 8013544:	47b8      	blx	r7
 8013546:	3001      	adds	r0, #1
 8013548:	f43f af4a 	beq.w	80133e0 <_printf_float+0x98>
 801354c:	f04f 0900 	mov.w	r9, #0
 8013550:	f108 38ff 	add.w	r8, r8, #4294967295
 8013554:	f104 0a1a 	add.w	sl, r4, #26
 8013558:	45c8      	cmp	r8, r9
 801355a:	dc09      	bgt.n	8013570 <_printf_float+0x228>
 801355c:	6823      	ldr	r3, [r4, #0]
 801355e:	079b      	lsls	r3, r3, #30
 8013560:	f100 8107 	bmi.w	8013772 <_printf_float+0x42a>
 8013564:	68e0      	ldr	r0, [r4, #12]
 8013566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013568:	4298      	cmp	r0, r3
 801356a:	bfb8      	it	lt
 801356c:	4618      	movlt	r0, r3
 801356e:	e739      	b.n	80133e4 <_printf_float+0x9c>
 8013570:	2301      	movs	r3, #1
 8013572:	4652      	mov	r2, sl
 8013574:	4631      	mov	r1, r6
 8013576:	4628      	mov	r0, r5
 8013578:	47b8      	blx	r7
 801357a:	3001      	adds	r0, #1
 801357c:	f43f af30 	beq.w	80133e0 <_printf_float+0x98>
 8013580:	f109 0901 	add.w	r9, r9, #1
 8013584:	e7e8      	b.n	8013558 <_printf_float+0x210>
 8013586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013588:	2b00      	cmp	r3, #0
 801358a:	dc3b      	bgt.n	8013604 <_printf_float+0x2bc>
 801358c:	4a1c      	ldr	r2, [pc, #112]	@ (8013600 <_printf_float+0x2b8>)
 801358e:	2301      	movs	r3, #1
 8013590:	4631      	mov	r1, r6
 8013592:	4628      	mov	r0, r5
 8013594:	47b8      	blx	r7
 8013596:	3001      	adds	r0, #1
 8013598:	f43f af22 	beq.w	80133e0 <_printf_float+0x98>
 801359c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80135a0:	ea59 0303 	orrs.w	r3, r9, r3
 80135a4:	d102      	bne.n	80135ac <_printf_float+0x264>
 80135a6:	6823      	ldr	r3, [r4, #0]
 80135a8:	07d9      	lsls	r1, r3, #31
 80135aa:	d5d7      	bpl.n	801355c <_printf_float+0x214>
 80135ac:	9b05      	ldr	r3, [sp, #20]
 80135ae:	465a      	mov	r2, fp
 80135b0:	4631      	mov	r1, r6
 80135b2:	4628      	mov	r0, r5
 80135b4:	47b8      	blx	r7
 80135b6:	3001      	adds	r0, #1
 80135b8:	f43f af12 	beq.w	80133e0 <_printf_float+0x98>
 80135bc:	f04f 0a00 	mov.w	sl, #0
 80135c0:	f104 0b1a 	add.w	fp, r4, #26
 80135c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135c6:	425b      	negs	r3, r3
 80135c8:	4553      	cmp	r3, sl
 80135ca:	dc01      	bgt.n	80135d0 <_printf_float+0x288>
 80135cc:	464b      	mov	r3, r9
 80135ce:	e794      	b.n	80134fa <_printf_float+0x1b2>
 80135d0:	2301      	movs	r3, #1
 80135d2:	465a      	mov	r2, fp
 80135d4:	4631      	mov	r1, r6
 80135d6:	4628      	mov	r0, r5
 80135d8:	47b8      	blx	r7
 80135da:	3001      	adds	r0, #1
 80135dc:	f43f af00 	beq.w	80133e0 <_printf_float+0x98>
 80135e0:	f10a 0a01 	add.w	sl, sl, #1
 80135e4:	e7ee      	b.n	80135c4 <_printf_float+0x27c>
 80135e6:	bf00      	nop
 80135e8:	ffffffff 	.word	0xffffffff
 80135ec:	7fefffff 	.word	0x7fefffff
 80135f0:	08015cbc 	.word	0x08015cbc
 80135f4:	08015cc0 	.word	0x08015cc0
 80135f8:	08015cc4 	.word	0x08015cc4
 80135fc:	08015cc8 	.word	0x08015cc8
 8013600:	08015ccc 	.word	0x08015ccc
 8013604:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013606:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801360a:	4553      	cmp	r3, sl
 801360c:	bfa8      	it	ge
 801360e:	4653      	movge	r3, sl
 8013610:	2b00      	cmp	r3, #0
 8013612:	4699      	mov	r9, r3
 8013614:	dc37      	bgt.n	8013686 <_printf_float+0x33e>
 8013616:	2300      	movs	r3, #0
 8013618:	9307      	str	r3, [sp, #28]
 801361a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801361e:	f104 021a 	add.w	r2, r4, #26
 8013622:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013624:	9907      	ldr	r1, [sp, #28]
 8013626:	9306      	str	r3, [sp, #24]
 8013628:	eba3 0309 	sub.w	r3, r3, r9
 801362c:	428b      	cmp	r3, r1
 801362e:	dc31      	bgt.n	8013694 <_printf_float+0x34c>
 8013630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013632:	459a      	cmp	sl, r3
 8013634:	dc3b      	bgt.n	80136ae <_printf_float+0x366>
 8013636:	6823      	ldr	r3, [r4, #0]
 8013638:	07da      	lsls	r2, r3, #31
 801363a:	d438      	bmi.n	80136ae <_printf_float+0x366>
 801363c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801363e:	ebaa 0903 	sub.w	r9, sl, r3
 8013642:	9b06      	ldr	r3, [sp, #24]
 8013644:	ebaa 0303 	sub.w	r3, sl, r3
 8013648:	4599      	cmp	r9, r3
 801364a:	bfa8      	it	ge
 801364c:	4699      	movge	r9, r3
 801364e:	f1b9 0f00 	cmp.w	r9, #0
 8013652:	dc34      	bgt.n	80136be <_printf_float+0x376>
 8013654:	f04f 0800 	mov.w	r8, #0
 8013658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801365c:	f104 0b1a 	add.w	fp, r4, #26
 8013660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013662:	ebaa 0303 	sub.w	r3, sl, r3
 8013666:	eba3 0309 	sub.w	r3, r3, r9
 801366a:	4543      	cmp	r3, r8
 801366c:	f77f af76 	ble.w	801355c <_printf_float+0x214>
 8013670:	2301      	movs	r3, #1
 8013672:	465a      	mov	r2, fp
 8013674:	4631      	mov	r1, r6
 8013676:	4628      	mov	r0, r5
 8013678:	47b8      	blx	r7
 801367a:	3001      	adds	r0, #1
 801367c:	f43f aeb0 	beq.w	80133e0 <_printf_float+0x98>
 8013680:	f108 0801 	add.w	r8, r8, #1
 8013684:	e7ec      	b.n	8013660 <_printf_float+0x318>
 8013686:	4642      	mov	r2, r8
 8013688:	4631      	mov	r1, r6
 801368a:	4628      	mov	r0, r5
 801368c:	47b8      	blx	r7
 801368e:	3001      	adds	r0, #1
 8013690:	d1c1      	bne.n	8013616 <_printf_float+0x2ce>
 8013692:	e6a5      	b.n	80133e0 <_printf_float+0x98>
 8013694:	2301      	movs	r3, #1
 8013696:	4631      	mov	r1, r6
 8013698:	4628      	mov	r0, r5
 801369a:	9206      	str	r2, [sp, #24]
 801369c:	47b8      	blx	r7
 801369e:	3001      	adds	r0, #1
 80136a0:	f43f ae9e 	beq.w	80133e0 <_printf_float+0x98>
 80136a4:	9b07      	ldr	r3, [sp, #28]
 80136a6:	9a06      	ldr	r2, [sp, #24]
 80136a8:	3301      	adds	r3, #1
 80136aa:	9307      	str	r3, [sp, #28]
 80136ac:	e7b9      	b.n	8013622 <_printf_float+0x2da>
 80136ae:	9b05      	ldr	r3, [sp, #20]
 80136b0:	465a      	mov	r2, fp
 80136b2:	4631      	mov	r1, r6
 80136b4:	4628      	mov	r0, r5
 80136b6:	47b8      	blx	r7
 80136b8:	3001      	adds	r0, #1
 80136ba:	d1bf      	bne.n	801363c <_printf_float+0x2f4>
 80136bc:	e690      	b.n	80133e0 <_printf_float+0x98>
 80136be:	9a06      	ldr	r2, [sp, #24]
 80136c0:	464b      	mov	r3, r9
 80136c2:	4442      	add	r2, r8
 80136c4:	4631      	mov	r1, r6
 80136c6:	4628      	mov	r0, r5
 80136c8:	47b8      	blx	r7
 80136ca:	3001      	adds	r0, #1
 80136cc:	d1c2      	bne.n	8013654 <_printf_float+0x30c>
 80136ce:	e687      	b.n	80133e0 <_printf_float+0x98>
 80136d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80136d4:	f1b9 0f01 	cmp.w	r9, #1
 80136d8:	dc01      	bgt.n	80136de <_printf_float+0x396>
 80136da:	07db      	lsls	r3, r3, #31
 80136dc:	d536      	bpl.n	801374c <_printf_float+0x404>
 80136de:	2301      	movs	r3, #1
 80136e0:	4642      	mov	r2, r8
 80136e2:	4631      	mov	r1, r6
 80136e4:	4628      	mov	r0, r5
 80136e6:	47b8      	blx	r7
 80136e8:	3001      	adds	r0, #1
 80136ea:	f43f ae79 	beq.w	80133e0 <_printf_float+0x98>
 80136ee:	9b05      	ldr	r3, [sp, #20]
 80136f0:	465a      	mov	r2, fp
 80136f2:	4631      	mov	r1, r6
 80136f4:	4628      	mov	r0, r5
 80136f6:	47b8      	blx	r7
 80136f8:	3001      	adds	r0, #1
 80136fa:	f43f ae71 	beq.w	80133e0 <_printf_float+0x98>
 80136fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013702:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801370a:	f109 39ff 	add.w	r9, r9, #4294967295
 801370e:	d018      	beq.n	8013742 <_printf_float+0x3fa>
 8013710:	464b      	mov	r3, r9
 8013712:	f108 0201 	add.w	r2, r8, #1
 8013716:	4631      	mov	r1, r6
 8013718:	4628      	mov	r0, r5
 801371a:	47b8      	blx	r7
 801371c:	3001      	adds	r0, #1
 801371e:	d10c      	bne.n	801373a <_printf_float+0x3f2>
 8013720:	e65e      	b.n	80133e0 <_printf_float+0x98>
 8013722:	2301      	movs	r3, #1
 8013724:	465a      	mov	r2, fp
 8013726:	4631      	mov	r1, r6
 8013728:	4628      	mov	r0, r5
 801372a:	47b8      	blx	r7
 801372c:	3001      	adds	r0, #1
 801372e:	f43f ae57 	beq.w	80133e0 <_printf_float+0x98>
 8013732:	f108 0801 	add.w	r8, r8, #1
 8013736:	45c8      	cmp	r8, r9
 8013738:	dbf3      	blt.n	8013722 <_printf_float+0x3da>
 801373a:	4653      	mov	r3, sl
 801373c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013740:	e6dc      	b.n	80134fc <_printf_float+0x1b4>
 8013742:	f04f 0800 	mov.w	r8, #0
 8013746:	f104 0b1a 	add.w	fp, r4, #26
 801374a:	e7f4      	b.n	8013736 <_printf_float+0x3ee>
 801374c:	2301      	movs	r3, #1
 801374e:	4642      	mov	r2, r8
 8013750:	e7e1      	b.n	8013716 <_printf_float+0x3ce>
 8013752:	2301      	movs	r3, #1
 8013754:	464a      	mov	r2, r9
 8013756:	4631      	mov	r1, r6
 8013758:	4628      	mov	r0, r5
 801375a:	47b8      	blx	r7
 801375c:	3001      	adds	r0, #1
 801375e:	f43f ae3f 	beq.w	80133e0 <_printf_float+0x98>
 8013762:	f108 0801 	add.w	r8, r8, #1
 8013766:	68e3      	ldr	r3, [r4, #12]
 8013768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801376a:	1a5b      	subs	r3, r3, r1
 801376c:	4543      	cmp	r3, r8
 801376e:	dcf0      	bgt.n	8013752 <_printf_float+0x40a>
 8013770:	e6f8      	b.n	8013564 <_printf_float+0x21c>
 8013772:	f04f 0800 	mov.w	r8, #0
 8013776:	f104 0919 	add.w	r9, r4, #25
 801377a:	e7f4      	b.n	8013766 <_printf_float+0x41e>

0801377c <_printf_common>:
 801377c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013780:	4616      	mov	r6, r2
 8013782:	4698      	mov	r8, r3
 8013784:	688a      	ldr	r2, [r1, #8]
 8013786:	690b      	ldr	r3, [r1, #16]
 8013788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801378c:	4293      	cmp	r3, r2
 801378e:	bfb8      	it	lt
 8013790:	4613      	movlt	r3, r2
 8013792:	6033      	str	r3, [r6, #0]
 8013794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013798:	4607      	mov	r7, r0
 801379a:	460c      	mov	r4, r1
 801379c:	b10a      	cbz	r2, 80137a2 <_printf_common+0x26>
 801379e:	3301      	adds	r3, #1
 80137a0:	6033      	str	r3, [r6, #0]
 80137a2:	6823      	ldr	r3, [r4, #0]
 80137a4:	0699      	lsls	r1, r3, #26
 80137a6:	bf42      	ittt	mi
 80137a8:	6833      	ldrmi	r3, [r6, #0]
 80137aa:	3302      	addmi	r3, #2
 80137ac:	6033      	strmi	r3, [r6, #0]
 80137ae:	6825      	ldr	r5, [r4, #0]
 80137b0:	f015 0506 	ands.w	r5, r5, #6
 80137b4:	d106      	bne.n	80137c4 <_printf_common+0x48>
 80137b6:	f104 0a19 	add.w	sl, r4, #25
 80137ba:	68e3      	ldr	r3, [r4, #12]
 80137bc:	6832      	ldr	r2, [r6, #0]
 80137be:	1a9b      	subs	r3, r3, r2
 80137c0:	42ab      	cmp	r3, r5
 80137c2:	dc26      	bgt.n	8013812 <_printf_common+0x96>
 80137c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80137c8:	6822      	ldr	r2, [r4, #0]
 80137ca:	3b00      	subs	r3, #0
 80137cc:	bf18      	it	ne
 80137ce:	2301      	movne	r3, #1
 80137d0:	0692      	lsls	r2, r2, #26
 80137d2:	d42b      	bmi.n	801382c <_printf_common+0xb0>
 80137d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80137d8:	4641      	mov	r1, r8
 80137da:	4638      	mov	r0, r7
 80137dc:	47c8      	blx	r9
 80137de:	3001      	adds	r0, #1
 80137e0:	d01e      	beq.n	8013820 <_printf_common+0xa4>
 80137e2:	6823      	ldr	r3, [r4, #0]
 80137e4:	6922      	ldr	r2, [r4, #16]
 80137e6:	f003 0306 	and.w	r3, r3, #6
 80137ea:	2b04      	cmp	r3, #4
 80137ec:	bf02      	ittt	eq
 80137ee:	68e5      	ldreq	r5, [r4, #12]
 80137f0:	6833      	ldreq	r3, [r6, #0]
 80137f2:	1aed      	subeq	r5, r5, r3
 80137f4:	68a3      	ldr	r3, [r4, #8]
 80137f6:	bf0c      	ite	eq
 80137f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137fc:	2500      	movne	r5, #0
 80137fe:	4293      	cmp	r3, r2
 8013800:	bfc4      	itt	gt
 8013802:	1a9b      	subgt	r3, r3, r2
 8013804:	18ed      	addgt	r5, r5, r3
 8013806:	2600      	movs	r6, #0
 8013808:	341a      	adds	r4, #26
 801380a:	42b5      	cmp	r5, r6
 801380c:	d11a      	bne.n	8013844 <_printf_common+0xc8>
 801380e:	2000      	movs	r0, #0
 8013810:	e008      	b.n	8013824 <_printf_common+0xa8>
 8013812:	2301      	movs	r3, #1
 8013814:	4652      	mov	r2, sl
 8013816:	4641      	mov	r1, r8
 8013818:	4638      	mov	r0, r7
 801381a:	47c8      	blx	r9
 801381c:	3001      	adds	r0, #1
 801381e:	d103      	bne.n	8013828 <_printf_common+0xac>
 8013820:	f04f 30ff 	mov.w	r0, #4294967295
 8013824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013828:	3501      	adds	r5, #1
 801382a:	e7c6      	b.n	80137ba <_printf_common+0x3e>
 801382c:	18e1      	adds	r1, r4, r3
 801382e:	1c5a      	adds	r2, r3, #1
 8013830:	2030      	movs	r0, #48	@ 0x30
 8013832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013836:	4422      	add	r2, r4
 8013838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801383c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013840:	3302      	adds	r3, #2
 8013842:	e7c7      	b.n	80137d4 <_printf_common+0x58>
 8013844:	2301      	movs	r3, #1
 8013846:	4622      	mov	r2, r4
 8013848:	4641      	mov	r1, r8
 801384a:	4638      	mov	r0, r7
 801384c:	47c8      	blx	r9
 801384e:	3001      	adds	r0, #1
 8013850:	d0e6      	beq.n	8013820 <_printf_common+0xa4>
 8013852:	3601      	adds	r6, #1
 8013854:	e7d9      	b.n	801380a <_printf_common+0x8e>
	...

08013858 <_printf_i>:
 8013858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801385c:	7e0f      	ldrb	r7, [r1, #24]
 801385e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013860:	2f78      	cmp	r7, #120	@ 0x78
 8013862:	4691      	mov	r9, r2
 8013864:	4680      	mov	r8, r0
 8013866:	460c      	mov	r4, r1
 8013868:	469a      	mov	sl, r3
 801386a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801386e:	d807      	bhi.n	8013880 <_printf_i+0x28>
 8013870:	2f62      	cmp	r7, #98	@ 0x62
 8013872:	d80a      	bhi.n	801388a <_printf_i+0x32>
 8013874:	2f00      	cmp	r7, #0
 8013876:	f000 80d2 	beq.w	8013a1e <_printf_i+0x1c6>
 801387a:	2f58      	cmp	r7, #88	@ 0x58
 801387c:	f000 80b9 	beq.w	80139f2 <_printf_i+0x19a>
 8013880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013888:	e03a      	b.n	8013900 <_printf_i+0xa8>
 801388a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801388e:	2b15      	cmp	r3, #21
 8013890:	d8f6      	bhi.n	8013880 <_printf_i+0x28>
 8013892:	a101      	add	r1, pc, #4	@ (adr r1, 8013898 <_printf_i+0x40>)
 8013894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013898:	080138f1 	.word	0x080138f1
 801389c:	08013905 	.word	0x08013905
 80138a0:	08013881 	.word	0x08013881
 80138a4:	08013881 	.word	0x08013881
 80138a8:	08013881 	.word	0x08013881
 80138ac:	08013881 	.word	0x08013881
 80138b0:	08013905 	.word	0x08013905
 80138b4:	08013881 	.word	0x08013881
 80138b8:	08013881 	.word	0x08013881
 80138bc:	08013881 	.word	0x08013881
 80138c0:	08013881 	.word	0x08013881
 80138c4:	08013a05 	.word	0x08013a05
 80138c8:	0801392f 	.word	0x0801392f
 80138cc:	080139bf 	.word	0x080139bf
 80138d0:	08013881 	.word	0x08013881
 80138d4:	08013881 	.word	0x08013881
 80138d8:	08013a27 	.word	0x08013a27
 80138dc:	08013881 	.word	0x08013881
 80138e0:	0801392f 	.word	0x0801392f
 80138e4:	08013881 	.word	0x08013881
 80138e8:	08013881 	.word	0x08013881
 80138ec:	080139c7 	.word	0x080139c7
 80138f0:	6833      	ldr	r3, [r6, #0]
 80138f2:	1d1a      	adds	r2, r3, #4
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	6032      	str	r2, [r6, #0]
 80138f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80138fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013900:	2301      	movs	r3, #1
 8013902:	e09d      	b.n	8013a40 <_printf_i+0x1e8>
 8013904:	6833      	ldr	r3, [r6, #0]
 8013906:	6820      	ldr	r0, [r4, #0]
 8013908:	1d19      	adds	r1, r3, #4
 801390a:	6031      	str	r1, [r6, #0]
 801390c:	0606      	lsls	r6, r0, #24
 801390e:	d501      	bpl.n	8013914 <_printf_i+0xbc>
 8013910:	681d      	ldr	r5, [r3, #0]
 8013912:	e003      	b.n	801391c <_printf_i+0xc4>
 8013914:	0645      	lsls	r5, r0, #25
 8013916:	d5fb      	bpl.n	8013910 <_printf_i+0xb8>
 8013918:	f9b3 5000 	ldrsh.w	r5, [r3]
 801391c:	2d00      	cmp	r5, #0
 801391e:	da03      	bge.n	8013928 <_printf_i+0xd0>
 8013920:	232d      	movs	r3, #45	@ 0x2d
 8013922:	426d      	negs	r5, r5
 8013924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013928:	4859      	ldr	r0, [pc, #356]	@ (8013a90 <_printf_i+0x238>)
 801392a:	230a      	movs	r3, #10
 801392c:	e011      	b.n	8013952 <_printf_i+0xfa>
 801392e:	6821      	ldr	r1, [r4, #0]
 8013930:	6833      	ldr	r3, [r6, #0]
 8013932:	0608      	lsls	r0, r1, #24
 8013934:	f853 5b04 	ldr.w	r5, [r3], #4
 8013938:	d402      	bmi.n	8013940 <_printf_i+0xe8>
 801393a:	0649      	lsls	r1, r1, #25
 801393c:	bf48      	it	mi
 801393e:	b2ad      	uxthmi	r5, r5
 8013940:	2f6f      	cmp	r7, #111	@ 0x6f
 8013942:	4853      	ldr	r0, [pc, #332]	@ (8013a90 <_printf_i+0x238>)
 8013944:	6033      	str	r3, [r6, #0]
 8013946:	bf14      	ite	ne
 8013948:	230a      	movne	r3, #10
 801394a:	2308      	moveq	r3, #8
 801394c:	2100      	movs	r1, #0
 801394e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013952:	6866      	ldr	r6, [r4, #4]
 8013954:	60a6      	str	r6, [r4, #8]
 8013956:	2e00      	cmp	r6, #0
 8013958:	bfa2      	ittt	ge
 801395a:	6821      	ldrge	r1, [r4, #0]
 801395c:	f021 0104 	bicge.w	r1, r1, #4
 8013960:	6021      	strge	r1, [r4, #0]
 8013962:	b90d      	cbnz	r5, 8013968 <_printf_i+0x110>
 8013964:	2e00      	cmp	r6, #0
 8013966:	d04b      	beq.n	8013a00 <_printf_i+0x1a8>
 8013968:	4616      	mov	r6, r2
 801396a:	fbb5 f1f3 	udiv	r1, r5, r3
 801396e:	fb03 5711 	mls	r7, r3, r1, r5
 8013972:	5dc7      	ldrb	r7, [r0, r7]
 8013974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013978:	462f      	mov	r7, r5
 801397a:	42bb      	cmp	r3, r7
 801397c:	460d      	mov	r5, r1
 801397e:	d9f4      	bls.n	801396a <_printf_i+0x112>
 8013980:	2b08      	cmp	r3, #8
 8013982:	d10b      	bne.n	801399c <_printf_i+0x144>
 8013984:	6823      	ldr	r3, [r4, #0]
 8013986:	07df      	lsls	r7, r3, #31
 8013988:	d508      	bpl.n	801399c <_printf_i+0x144>
 801398a:	6923      	ldr	r3, [r4, #16]
 801398c:	6861      	ldr	r1, [r4, #4]
 801398e:	4299      	cmp	r1, r3
 8013990:	bfde      	ittt	le
 8013992:	2330      	movle	r3, #48	@ 0x30
 8013994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013998:	f106 36ff 	addle.w	r6, r6, #4294967295
 801399c:	1b92      	subs	r2, r2, r6
 801399e:	6122      	str	r2, [r4, #16]
 80139a0:	f8cd a000 	str.w	sl, [sp]
 80139a4:	464b      	mov	r3, r9
 80139a6:	aa03      	add	r2, sp, #12
 80139a8:	4621      	mov	r1, r4
 80139aa:	4640      	mov	r0, r8
 80139ac:	f7ff fee6 	bl	801377c <_printf_common>
 80139b0:	3001      	adds	r0, #1
 80139b2:	d14a      	bne.n	8013a4a <_printf_i+0x1f2>
 80139b4:	f04f 30ff 	mov.w	r0, #4294967295
 80139b8:	b004      	add	sp, #16
 80139ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139be:	6823      	ldr	r3, [r4, #0]
 80139c0:	f043 0320 	orr.w	r3, r3, #32
 80139c4:	6023      	str	r3, [r4, #0]
 80139c6:	4833      	ldr	r0, [pc, #204]	@ (8013a94 <_printf_i+0x23c>)
 80139c8:	2778      	movs	r7, #120	@ 0x78
 80139ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80139ce:	6823      	ldr	r3, [r4, #0]
 80139d0:	6831      	ldr	r1, [r6, #0]
 80139d2:	061f      	lsls	r7, r3, #24
 80139d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80139d8:	d402      	bmi.n	80139e0 <_printf_i+0x188>
 80139da:	065f      	lsls	r7, r3, #25
 80139dc:	bf48      	it	mi
 80139de:	b2ad      	uxthmi	r5, r5
 80139e0:	6031      	str	r1, [r6, #0]
 80139e2:	07d9      	lsls	r1, r3, #31
 80139e4:	bf44      	itt	mi
 80139e6:	f043 0320 	orrmi.w	r3, r3, #32
 80139ea:	6023      	strmi	r3, [r4, #0]
 80139ec:	b11d      	cbz	r5, 80139f6 <_printf_i+0x19e>
 80139ee:	2310      	movs	r3, #16
 80139f0:	e7ac      	b.n	801394c <_printf_i+0xf4>
 80139f2:	4827      	ldr	r0, [pc, #156]	@ (8013a90 <_printf_i+0x238>)
 80139f4:	e7e9      	b.n	80139ca <_printf_i+0x172>
 80139f6:	6823      	ldr	r3, [r4, #0]
 80139f8:	f023 0320 	bic.w	r3, r3, #32
 80139fc:	6023      	str	r3, [r4, #0]
 80139fe:	e7f6      	b.n	80139ee <_printf_i+0x196>
 8013a00:	4616      	mov	r6, r2
 8013a02:	e7bd      	b.n	8013980 <_printf_i+0x128>
 8013a04:	6833      	ldr	r3, [r6, #0]
 8013a06:	6825      	ldr	r5, [r4, #0]
 8013a08:	6961      	ldr	r1, [r4, #20]
 8013a0a:	1d18      	adds	r0, r3, #4
 8013a0c:	6030      	str	r0, [r6, #0]
 8013a0e:	062e      	lsls	r6, r5, #24
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	d501      	bpl.n	8013a18 <_printf_i+0x1c0>
 8013a14:	6019      	str	r1, [r3, #0]
 8013a16:	e002      	b.n	8013a1e <_printf_i+0x1c6>
 8013a18:	0668      	lsls	r0, r5, #25
 8013a1a:	d5fb      	bpl.n	8013a14 <_printf_i+0x1bc>
 8013a1c:	8019      	strh	r1, [r3, #0]
 8013a1e:	2300      	movs	r3, #0
 8013a20:	6123      	str	r3, [r4, #16]
 8013a22:	4616      	mov	r6, r2
 8013a24:	e7bc      	b.n	80139a0 <_printf_i+0x148>
 8013a26:	6833      	ldr	r3, [r6, #0]
 8013a28:	1d1a      	adds	r2, r3, #4
 8013a2a:	6032      	str	r2, [r6, #0]
 8013a2c:	681e      	ldr	r6, [r3, #0]
 8013a2e:	6862      	ldr	r2, [r4, #4]
 8013a30:	2100      	movs	r1, #0
 8013a32:	4630      	mov	r0, r6
 8013a34:	f7ec fc54 	bl	80002e0 <memchr>
 8013a38:	b108      	cbz	r0, 8013a3e <_printf_i+0x1e6>
 8013a3a:	1b80      	subs	r0, r0, r6
 8013a3c:	6060      	str	r0, [r4, #4]
 8013a3e:	6863      	ldr	r3, [r4, #4]
 8013a40:	6123      	str	r3, [r4, #16]
 8013a42:	2300      	movs	r3, #0
 8013a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a48:	e7aa      	b.n	80139a0 <_printf_i+0x148>
 8013a4a:	6923      	ldr	r3, [r4, #16]
 8013a4c:	4632      	mov	r2, r6
 8013a4e:	4649      	mov	r1, r9
 8013a50:	4640      	mov	r0, r8
 8013a52:	47d0      	blx	sl
 8013a54:	3001      	adds	r0, #1
 8013a56:	d0ad      	beq.n	80139b4 <_printf_i+0x15c>
 8013a58:	6823      	ldr	r3, [r4, #0]
 8013a5a:	079b      	lsls	r3, r3, #30
 8013a5c:	d413      	bmi.n	8013a86 <_printf_i+0x22e>
 8013a5e:	68e0      	ldr	r0, [r4, #12]
 8013a60:	9b03      	ldr	r3, [sp, #12]
 8013a62:	4298      	cmp	r0, r3
 8013a64:	bfb8      	it	lt
 8013a66:	4618      	movlt	r0, r3
 8013a68:	e7a6      	b.n	80139b8 <_printf_i+0x160>
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	4632      	mov	r2, r6
 8013a6e:	4649      	mov	r1, r9
 8013a70:	4640      	mov	r0, r8
 8013a72:	47d0      	blx	sl
 8013a74:	3001      	adds	r0, #1
 8013a76:	d09d      	beq.n	80139b4 <_printf_i+0x15c>
 8013a78:	3501      	adds	r5, #1
 8013a7a:	68e3      	ldr	r3, [r4, #12]
 8013a7c:	9903      	ldr	r1, [sp, #12]
 8013a7e:	1a5b      	subs	r3, r3, r1
 8013a80:	42ab      	cmp	r3, r5
 8013a82:	dcf2      	bgt.n	8013a6a <_printf_i+0x212>
 8013a84:	e7eb      	b.n	8013a5e <_printf_i+0x206>
 8013a86:	2500      	movs	r5, #0
 8013a88:	f104 0619 	add.w	r6, r4, #25
 8013a8c:	e7f5      	b.n	8013a7a <_printf_i+0x222>
 8013a8e:	bf00      	nop
 8013a90:	08015cce 	.word	0x08015cce
 8013a94:	08015cdf 	.word	0x08015cdf

08013a98 <std>:
 8013a98:	2300      	movs	r3, #0
 8013a9a:	b510      	push	{r4, lr}
 8013a9c:	4604      	mov	r4, r0
 8013a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8013aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013aa6:	6083      	str	r3, [r0, #8]
 8013aa8:	8181      	strh	r1, [r0, #12]
 8013aaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8013aac:	81c2      	strh	r2, [r0, #14]
 8013aae:	6183      	str	r3, [r0, #24]
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	2208      	movs	r2, #8
 8013ab4:	305c      	adds	r0, #92	@ 0x5c
 8013ab6:	f000 f9f9 	bl	8013eac <memset>
 8013aba:	4b0d      	ldr	r3, [pc, #52]	@ (8013af0 <std+0x58>)
 8013abc:	6263      	str	r3, [r4, #36]	@ 0x24
 8013abe:	4b0d      	ldr	r3, [pc, #52]	@ (8013af4 <std+0x5c>)
 8013ac0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8013af8 <std+0x60>)
 8013ac4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8013afc <std+0x64>)
 8013ac8:	6323      	str	r3, [r4, #48]	@ 0x30
 8013aca:	4b0d      	ldr	r3, [pc, #52]	@ (8013b00 <std+0x68>)
 8013acc:	6224      	str	r4, [r4, #32]
 8013ace:	429c      	cmp	r4, r3
 8013ad0:	d006      	beq.n	8013ae0 <std+0x48>
 8013ad2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013ad6:	4294      	cmp	r4, r2
 8013ad8:	d002      	beq.n	8013ae0 <std+0x48>
 8013ada:	33d0      	adds	r3, #208	@ 0xd0
 8013adc:	429c      	cmp	r4, r3
 8013ade:	d105      	bne.n	8013aec <std+0x54>
 8013ae0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ae8:	f000 ba5c 	b.w	8013fa4 <__retarget_lock_init_recursive>
 8013aec:	bd10      	pop	{r4, pc}
 8013aee:	bf00      	nop
 8013af0:	08013cfd 	.word	0x08013cfd
 8013af4:	08013d1f 	.word	0x08013d1f
 8013af8:	08013d57 	.word	0x08013d57
 8013afc:	08013d7b 	.word	0x08013d7b
 8013b00:	24001500 	.word	0x24001500

08013b04 <stdio_exit_handler>:
 8013b04:	4a02      	ldr	r2, [pc, #8]	@ (8013b10 <stdio_exit_handler+0xc>)
 8013b06:	4903      	ldr	r1, [pc, #12]	@ (8013b14 <stdio_exit_handler+0x10>)
 8013b08:	4803      	ldr	r0, [pc, #12]	@ (8013b18 <stdio_exit_handler+0x14>)
 8013b0a:	f000 b869 	b.w	8013be0 <_fwalk_sglue>
 8013b0e:	bf00      	nop
 8013b10:	24000118 	.word	0x24000118
 8013b14:	08015815 	.word	0x08015815
 8013b18:	24000128 	.word	0x24000128

08013b1c <cleanup_stdio>:
 8013b1c:	6841      	ldr	r1, [r0, #4]
 8013b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8013b50 <cleanup_stdio+0x34>)
 8013b20:	4299      	cmp	r1, r3
 8013b22:	b510      	push	{r4, lr}
 8013b24:	4604      	mov	r4, r0
 8013b26:	d001      	beq.n	8013b2c <cleanup_stdio+0x10>
 8013b28:	f001 fe74 	bl	8015814 <_fflush_r>
 8013b2c:	68a1      	ldr	r1, [r4, #8]
 8013b2e:	4b09      	ldr	r3, [pc, #36]	@ (8013b54 <cleanup_stdio+0x38>)
 8013b30:	4299      	cmp	r1, r3
 8013b32:	d002      	beq.n	8013b3a <cleanup_stdio+0x1e>
 8013b34:	4620      	mov	r0, r4
 8013b36:	f001 fe6d 	bl	8015814 <_fflush_r>
 8013b3a:	68e1      	ldr	r1, [r4, #12]
 8013b3c:	4b06      	ldr	r3, [pc, #24]	@ (8013b58 <cleanup_stdio+0x3c>)
 8013b3e:	4299      	cmp	r1, r3
 8013b40:	d004      	beq.n	8013b4c <cleanup_stdio+0x30>
 8013b42:	4620      	mov	r0, r4
 8013b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b48:	f001 be64 	b.w	8015814 <_fflush_r>
 8013b4c:	bd10      	pop	{r4, pc}
 8013b4e:	bf00      	nop
 8013b50:	24001500 	.word	0x24001500
 8013b54:	24001568 	.word	0x24001568
 8013b58:	240015d0 	.word	0x240015d0

08013b5c <global_stdio_init.part.0>:
 8013b5c:	b510      	push	{r4, lr}
 8013b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8013b8c <global_stdio_init.part.0+0x30>)
 8013b60:	4c0b      	ldr	r4, [pc, #44]	@ (8013b90 <global_stdio_init.part.0+0x34>)
 8013b62:	4a0c      	ldr	r2, [pc, #48]	@ (8013b94 <global_stdio_init.part.0+0x38>)
 8013b64:	601a      	str	r2, [r3, #0]
 8013b66:	4620      	mov	r0, r4
 8013b68:	2200      	movs	r2, #0
 8013b6a:	2104      	movs	r1, #4
 8013b6c:	f7ff ff94 	bl	8013a98 <std>
 8013b70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013b74:	2201      	movs	r2, #1
 8013b76:	2109      	movs	r1, #9
 8013b78:	f7ff ff8e 	bl	8013a98 <std>
 8013b7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013b80:	2202      	movs	r2, #2
 8013b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b86:	2112      	movs	r1, #18
 8013b88:	f7ff bf86 	b.w	8013a98 <std>
 8013b8c:	24001638 	.word	0x24001638
 8013b90:	24001500 	.word	0x24001500
 8013b94:	08013b05 	.word	0x08013b05

08013b98 <__sfp_lock_acquire>:
 8013b98:	4801      	ldr	r0, [pc, #4]	@ (8013ba0 <__sfp_lock_acquire+0x8>)
 8013b9a:	f000 ba04 	b.w	8013fa6 <__retarget_lock_acquire_recursive>
 8013b9e:	bf00      	nop
 8013ba0:	24001641 	.word	0x24001641

08013ba4 <__sfp_lock_release>:
 8013ba4:	4801      	ldr	r0, [pc, #4]	@ (8013bac <__sfp_lock_release+0x8>)
 8013ba6:	f000 b9ff 	b.w	8013fa8 <__retarget_lock_release_recursive>
 8013baa:	bf00      	nop
 8013bac:	24001641 	.word	0x24001641

08013bb0 <__sinit>:
 8013bb0:	b510      	push	{r4, lr}
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	f7ff fff0 	bl	8013b98 <__sfp_lock_acquire>
 8013bb8:	6a23      	ldr	r3, [r4, #32]
 8013bba:	b11b      	cbz	r3, 8013bc4 <__sinit+0x14>
 8013bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bc0:	f7ff bff0 	b.w	8013ba4 <__sfp_lock_release>
 8013bc4:	4b04      	ldr	r3, [pc, #16]	@ (8013bd8 <__sinit+0x28>)
 8013bc6:	6223      	str	r3, [r4, #32]
 8013bc8:	4b04      	ldr	r3, [pc, #16]	@ (8013bdc <__sinit+0x2c>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d1f5      	bne.n	8013bbc <__sinit+0xc>
 8013bd0:	f7ff ffc4 	bl	8013b5c <global_stdio_init.part.0>
 8013bd4:	e7f2      	b.n	8013bbc <__sinit+0xc>
 8013bd6:	bf00      	nop
 8013bd8:	08013b1d 	.word	0x08013b1d
 8013bdc:	24001638 	.word	0x24001638

08013be0 <_fwalk_sglue>:
 8013be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013be4:	4607      	mov	r7, r0
 8013be6:	4688      	mov	r8, r1
 8013be8:	4614      	mov	r4, r2
 8013bea:	2600      	movs	r6, #0
 8013bec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013bf0:	f1b9 0901 	subs.w	r9, r9, #1
 8013bf4:	d505      	bpl.n	8013c02 <_fwalk_sglue+0x22>
 8013bf6:	6824      	ldr	r4, [r4, #0]
 8013bf8:	2c00      	cmp	r4, #0
 8013bfa:	d1f7      	bne.n	8013bec <_fwalk_sglue+0xc>
 8013bfc:	4630      	mov	r0, r6
 8013bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c02:	89ab      	ldrh	r3, [r5, #12]
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d907      	bls.n	8013c18 <_fwalk_sglue+0x38>
 8013c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	d003      	beq.n	8013c18 <_fwalk_sglue+0x38>
 8013c10:	4629      	mov	r1, r5
 8013c12:	4638      	mov	r0, r7
 8013c14:	47c0      	blx	r8
 8013c16:	4306      	orrs	r6, r0
 8013c18:	3568      	adds	r5, #104	@ 0x68
 8013c1a:	e7e9      	b.n	8013bf0 <_fwalk_sglue+0x10>

08013c1c <iprintf>:
 8013c1c:	b40f      	push	{r0, r1, r2, r3}
 8013c1e:	b507      	push	{r0, r1, r2, lr}
 8013c20:	4906      	ldr	r1, [pc, #24]	@ (8013c3c <iprintf+0x20>)
 8013c22:	ab04      	add	r3, sp, #16
 8013c24:	6808      	ldr	r0, [r1, #0]
 8013c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c2a:	6881      	ldr	r1, [r0, #8]
 8013c2c:	9301      	str	r3, [sp, #4]
 8013c2e:	f001 fc55 	bl	80154dc <_vfiprintf_r>
 8013c32:	b003      	add	sp, #12
 8013c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c38:	b004      	add	sp, #16
 8013c3a:	4770      	bx	lr
 8013c3c:	24000124 	.word	0x24000124

08013c40 <_puts_r>:
 8013c40:	6a03      	ldr	r3, [r0, #32]
 8013c42:	b570      	push	{r4, r5, r6, lr}
 8013c44:	6884      	ldr	r4, [r0, #8]
 8013c46:	4605      	mov	r5, r0
 8013c48:	460e      	mov	r6, r1
 8013c4a:	b90b      	cbnz	r3, 8013c50 <_puts_r+0x10>
 8013c4c:	f7ff ffb0 	bl	8013bb0 <__sinit>
 8013c50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013c52:	07db      	lsls	r3, r3, #31
 8013c54:	d405      	bmi.n	8013c62 <_puts_r+0x22>
 8013c56:	89a3      	ldrh	r3, [r4, #12]
 8013c58:	0598      	lsls	r0, r3, #22
 8013c5a:	d402      	bmi.n	8013c62 <_puts_r+0x22>
 8013c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c5e:	f000 f9a2 	bl	8013fa6 <__retarget_lock_acquire_recursive>
 8013c62:	89a3      	ldrh	r3, [r4, #12]
 8013c64:	0719      	lsls	r1, r3, #28
 8013c66:	d502      	bpl.n	8013c6e <_puts_r+0x2e>
 8013c68:	6923      	ldr	r3, [r4, #16]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d135      	bne.n	8013cda <_puts_r+0x9a>
 8013c6e:	4621      	mov	r1, r4
 8013c70:	4628      	mov	r0, r5
 8013c72:	f000 f8c5 	bl	8013e00 <__swsetup_r>
 8013c76:	b380      	cbz	r0, 8013cda <_puts_r+0x9a>
 8013c78:	f04f 35ff 	mov.w	r5, #4294967295
 8013c7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013c7e:	07da      	lsls	r2, r3, #31
 8013c80:	d405      	bmi.n	8013c8e <_puts_r+0x4e>
 8013c82:	89a3      	ldrh	r3, [r4, #12]
 8013c84:	059b      	lsls	r3, r3, #22
 8013c86:	d402      	bmi.n	8013c8e <_puts_r+0x4e>
 8013c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c8a:	f000 f98d 	bl	8013fa8 <__retarget_lock_release_recursive>
 8013c8e:	4628      	mov	r0, r5
 8013c90:	bd70      	pop	{r4, r5, r6, pc}
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	da04      	bge.n	8013ca0 <_puts_r+0x60>
 8013c96:	69a2      	ldr	r2, [r4, #24]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	dc17      	bgt.n	8013ccc <_puts_r+0x8c>
 8013c9c:	290a      	cmp	r1, #10
 8013c9e:	d015      	beq.n	8013ccc <_puts_r+0x8c>
 8013ca0:	6823      	ldr	r3, [r4, #0]
 8013ca2:	1c5a      	adds	r2, r3, #1
 8013ca4:	6022      	str	r2, [r4, #0]
 8013ca6:	7019      	strb	r1, [r3, #0]
 8013ca8:	68a3      	ldr	r3, [r4, #8]
 8013caa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013cae:	3b01      	subs	r3, #1
 8013cb0:	60a3      	str	r3, [r4, #8]
 8013cb2:	2900      	cmp	r1, #0
 8013cb4:	d1ed      	bne.n	8013c92 <_puts_r+0x52>
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	da11      	bge.n	8013cde <_puts_r+0x9e>
 8013cba:	4622      	mov	r2, r4
 8013cbc:	210a      	movs	r1, #10
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	f000 f85f 	bl	8013d82 <__swbuf_r>
 8013cc4:	3001      	adds	r0, #1
 8013cc6:	d0d7      	beq.n	8013c78 <_puts_r+0x38>
 8013cc8:	250a      	movs	r5, #10
 8013cca:	e7d7      	b.n	8013c7c <_puts_r+0x3c>
 8013ccc:	4622      	mov	r2, r4
 8013cce:	4628      	mov	r0, r5
 8013cd0:	f000 f857 	bl	8013d82 <__swbuf_r>
 8013cd4:	3001      	adds	r0, #1
 8013cd6:	d1e7      	bne.n	8013ca8 <_puts_r+0x68>
 8013cd8:	e7ce      	b.n	8013c78 <_puts_r+0x38>
 8013cda:	3e01      	subs	r6, #1
 8013cdc:	e7e4      	b.n	8013ca8 <_puts_r+0x68>
 8013cde:	6823      	ldr	r3, [r4, #0]
 8013ce0:	1c5a      	adds	r2, r3, #1
 8013ce2:	6022      	str	r2, [r4, #0]
 8013ce4:	220a      	movs	r2, #10
 8013ce6:	701a      	strb	r2, [r3, #0]
 8013ce8:	e7ee      	b.n	8013cc8 <_puts_r+0x88>
	...

08013cec <puts>:
 8013cec:	4b02      	ldr	r3, [pc, #8]	@ (8013cf8 <puts+0xc>)
 8013cee:	4601      	mov	r1, r0
 8013cf0:	6818      	ldr	r0, [r3, #0]
 8013cf2:	f7ff bfa5 	b.w	8013c40 <_puts_r>
 8013cf6:	bf00      	nop
 8013cf8:	24000124 	.word	0x24000124

08013cfc <__sread>:
 8013cfc:	b510      	push	{r4, lr}
 8013cfe:	460c      	mov	r4, r1
 8013d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d04:	f000 f900 	bl	8013f08 <_read_r>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	bfab      	itete	ge
 8013d0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8013d10:	181b      	addge	r3, r3, r0
 8013d12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013d16:	bfac      	ite	ge
 8013d18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013d1a:	81a3      	strhlt	r3, [r4, #12]
 8013d1c:	bd10      	pop	{r4, pc}

08013d1e <__swrite>:
 8013d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d22:	461f      	mov	r7, r3
 8013d24:	898b      	ldrh	r3, [r1, #12]
 8013d26:	05db      	lsls	r3, r3, #23
 8013d28:	4605      	mov	r5, r0
 8013d2a:	460c      	mov	r4, r1
 8013d2c:	4616      	mov	r6, r2
 8013d2e:	d505      	bpl.n	8013d3c <__swrite+0x1e>
 8013d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d34:	2302      	movs	r3, #2
 8013d36:	2200      	movs	r2, #0
 8013d38:	f000 f8d4 	bl	8013ee4 <_lseek_r>
 8013d3c:	89a3      	ldrh	r3, [r4, #12]
 8013d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013d46:	81a3      	strh	r3, [r4, #12]
 8013d48:	4632      	mov	r2, r6
 8013d4a:	463b      	mov	r3, r7
 8013d4c:	4628      	mov	r0, r5
 8013d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d52:	f000 b8eb 	b.w	8013f2c <_write_r>

08013d56 <__sseek>:
 8013d56:	b510      	push	{r4, lr}
 8013d58:	460c      	mov	r4, r1
 8013d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d5e:	f000 f8c1 	bl	8013ee4 <_lseek_r>
 8013d62:	1c43      	adds	r3, r0, #1
 8013d64:	89a3      	ldrh	r3, [r4, #12]
 8013d66:	bf15      	itete	ne
 8013d68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013d72:	81a3      	strheq	r3, [r4, #12]
 8013d74:	bf18      	it	ne
 8013d76:	81a3      	strhne	r3, [r4, #12]
 8013d78:	bd10      	pop	{r4, pc}

08013d7a <__sclose>:
 8013d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d7e:	f000 b8a1 	b.w	8013ec4 <_close_r>

08013d82 <__swbuf_r>:
 8013d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d84:	460e      	mov	r6, r1
 8013d86:	4614      	mov	r4, r2
 8013d88:	4605      	mov	r5, r0
 8013d8a:	b118      	cbz	r0, 8013d94 <__swbuf_r+0x12>
 8013d8c:	6a03      	ldr	r3, [r0, #32]
 8013d8e:	b90b      	cbnz	r3, 8013d94 <__swbuf_r+0x12>
 8013d90:	f7ff ff0e 	bl	8013bb0 <__sinit>
 8013d94:	69a3      	ldr	r3, [r4, #24]
 8013d96:	60a3      	str	r3, [r4, #8]
 8013d98:	89a3      	ldrh	r3, [r4, #12]
 8013d9a:	071a      	lsls	r2, r3, #28
 8013d9c:	d501      	bpl.n	8013da2 <__swbuf_r+0x20>
 8013d9e:	6923      	ldr	r3, [r4, #16]
 8013da0:	b943      	cbnz	r3, 8013db4 <__swbuf_r+0x32>
 8013da2:	4621      	mov	r1, r4
 8013da4:	4628      	mov	r0, r5
 8013da6:	f000 f82b 	bl	8013e00 <__swsetup_r>
 8013daa:	b118      	cbz	r0, 8013db4 <__swbuf_r+0x32>
 8013dac:	f04f 37ff 	mov.w	r7, #4294967295
 8013db0:	4638      	mov	r0, r7
 8013db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013db4:	6823      	ldr	r3, [r4, #0]
 8013db6:	6922      	ldr	r2, [r4, #16]
 8013db8:	1a98      	subs	r0, r3, r2
 8013dba:	6963      	ldr	r3, [r4, #20]
 8013dbc:	b2f6      	uxtb	r6, r6
 8013dbe:	4283      	cmp	r3, r0
 8013dc0:	4637      	mov	r7, r6
 8013dc2:	dc05      	bgt.n	8013dd0 <__swbuf_r+0x4e>
 8013dc4:	4621      	mov	r1, r4
 8013dc6:	4628      	mov	r0, r5
 8013dc8:	f001 fd24 	bl	8015814 <_fflush_r>
 8013dcc:	2800      	cmp	r0, #0
 8013dce:	d1ed      	bne.n	8013dac <__swbuf_r+0x2a>
 8013dd0:	68a3      	ldr	r3, [r4, #8]
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	60a3      	str	r3, [r4, #8]
 8013dd6:	6823      	ldr	r3, [r4, #0]
 8013dd8:	1c5a      	adds	r2, r3, #1
 8013dda:	6022      	str	r2, [r4, #0]
 8013ddc:	701e      	strb	r6, [r3, #0]
 8013dde:	6962      	ldr	r2, [r4, #20]
 8013de0:	1c43      	adds	r3, r0, #1
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d004      	beq.n	8013df0 <__swbuf_r+0x6e>
 8013de6:	89a3      	ldrh	r3, [r4, #12]
 8013de8:	07db      	lsls	r3, r3, #31
 8013dea:	d5e1      	bpl.n	8013db0 <__swbuf_r+0x2e>
 8013dec:	2e0a      	cmp	r6, #10
 8013dee:	d1df      	bne.n	8013db0 <__swbuf_r+0x2e>
 8013df0:	4621      	mov	r1, r4
 8013df2:	4628      	mov	r0, r5
 8013df4:	f001 fd0e 	bl	8015814 <_fflush_r>
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	d0d9      	beq.n	8013db0 <__swbuf_r+0x2e>
 8013dfc:	e7d6      	b.n	8013dac <__swbuf_r+0x2a>
	...

08013e00 <__swsetup_r>:
 8013e00:	b538      	push	{r3, r4, r5, lr}
 8013e02:	4b29      	ldr	r3, [pc, #164]	@ (8013ea8 <__swsetup_r+0xa8>)
 8013e04:	4605      	mov	r5, r0
 8013e06:	6818      	ldr	r0, [r3, #0]
 8013e08:	460c      	mov	r4, r1
 8013e0a:	b118      	cbz	r0, 8013e14 <__swsetup_r+0x14>
 8013e0c:	6a03      	ldr	r3, [r0, #32]
 8013e0e:	b90b      	cbnz	r3, 8013e14 <__swsetup_r+0x14>
 8013e10:	f7ff fece 	bl	8013bb0 <__sinit>
 8013e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e18:	0719      	lsls	r1, r3, #28
 8013e1a:	d422      	bmi.n	8013e62 <__swsetup_r+0x62>
 8013e1c:	06da      	lsls	r2, r3, #27
 8013e1e:	d407      	bmi.n	8013e30 <__swsetup_r+0x30>
 8013e20:	2209      	movs	r2, #9
 8013e22:	602a      	str	r2, [r5, #0]
 8013e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e28:	81a3      	strh	r3, [r4, #12]
 8013e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8013e2e:	e033      	b.n	8013e98 <__swsetup_r+0x98>
 8013e30:	0758      	lsls	r0, r3, #29
 8013e32:	d512      	bpl.n	8013e5a <__swsetup_r+0x5a>
 8013e34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e36:	b141      	cbz	r1, 8013e4a <__swsetup_r+0x4a>
 8013e38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e3c:	4299      	cmp	r1, r3
 8013e3e:	d002      	beq.n	8013e46 <__swsetup_r+0x46>
 8013e40:	4628      	mov	r0, r5
 8013e42:	f000 fe9f 	bl	8014b84 <_free_r>
 8013e46:	2300      	movs	r3, #0
 8013e48:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e4a:	89a3      	ldrh	r3, [r4, #12]
 8013e4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013e50:	81a3      	strh	r3, [r4, #12]
 8013e52:	2300      	movs	r3, #0
 8013e54:	6063      	str	r3, [r4, #4]
 8013e56:	6923      	ldr	r3, [r4, #16]
 8013e58:	6023      	str	r3, [r4, #0]
 8013e5a:	89a3      	ldrh	r3, [r4, #12]
 8013e5c:	f043 0308 	orr.w	r3, r3, #8
 8013e60:	81a3      	strh	r3, [r4, #12]
 8013e62:	6923      	ldr	r3, [r4, #16]
 8013e64:	b94b      	cbnz	r3, 8013e7a <__swsetup_r+0x7a>
 8013e66:	89a3      	ldrh	r3, [r4, #12]
 8013e68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013e70:	d003      	beq.n	8013e7a <__swsetup_r+0x7a>
 8013e72:	4621      	mov	r1, r4
 8013e74:	4628      	mov	r0, r5
 8013e76:	f001 fd1b 	bl	80158b0 <__smakebuf_r>
 8013e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e7e:	f013 0201 	ands.w	r2, r3, #1
 8013e82:	d00a      	beq.n	8013e9a <__swsetup_r+0x9a>
 8013e84:	2200      	movs	r2, #0
 8013e86:	60a2      	str	r2, [r4, #8]
 8013e88:	6962      	ldr	r2, [r4, #20]
 8013e8a:	4252      	negs	r2, r2
 8013e8c:	61a2      	str	r2, [r4, #24]
 8013e8e:	6922      	ldr	r2, [r4, #16]
 8013e90:	b942      	cbnz	r2, 8013ea4 <__swsetup_r+0xa4>
 8013e92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013e96:	d1c5      	bne.n	8013e24 <__swsetup_r+0x24>
 8013e98:	bd38      	pop	{r3, r4, r5, pc}
 8013e9a:	0799      	lsls	r1, r3, #30
 8013e9c:	bf58      	it	pl
 8013e9e:	6962      	ldrpl	r2, [r4, #20]
 8013ea0:	60a2      	str	r2, [r4, #8]
 8013ea2:	e7f4      	b.n	8013e8e <__swsetup_r+0x8e>
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	e7f7      	b.n	8013e98 <__swsetup_r+0x98>
 8013ea8:	24000124 	.word	0x24000124

08013eac <memset>:
 8013eac:	4402      	add	r2, r0
 8013eae:	4603      	mov	r3, r0
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	d100      	bne.n	8013eb6 <memset+0xa>
 8013eb4:	4770      	bx	lr
 8013eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8013eba:	e7f9      	b.n	8013eb0 <memset+0x4>

08013ebc <_localeconv_r>:
 8013ebc:	4800      	ldr	r0, [pc, #0]	@ (8013ec0 <_localeconv_r+0x4>)
 8013ebe:	4770      	bx	lr
 8013ec0:	24000264 	.word	0x24000264

08013ec4 <_close_r>:
 8013ec4:	b538      	push	{r3, r4, r5, lr}
 8013ec6:	4d06      	ldr	r5, [pc, #24]	@ (8013ee0 <_close_r+0x1c>)
 8013ec8:	2300      	movs	r3, #0
 8013eca:	4604      	mov	r4, r0
 8013ecc:	4608      	mov	r0, r1
 8013ece:	602b      	str	r3, [r5, #0]
 8013ed0:	f7ee f8a8 	bl	8002024 <_close>
 8013ed4:	1c43      	adds	r3, r0, #1
 8013ed6:	d102      	bne.n	8013ede <_close_r+0x1a>
 8013ed8:	682b      	ldr	r3, [r5, #0]
 8013eda:	b103      	cbz	r3, 8013ede <_close_r+0x1a>
 8013edc:	6023      	str	r3, [r4, #0]
 8013ede:	bd38      	pop	{r3, r4, r5, pc}
 8013ee0:	2400163c 	.word	0x2400163c

08013ee4 <_lseek_r>:
 8013ee4:	b538      	push	{r3, r4, r5, lr}
 8013ee6:	4d07      	ldr	r5, [pc, #28]	@ (8013f04 <_lseek_r+0x20>)
 8013ee8:	4604      	mov	r4, r0
 8013eea:	4608      	mov	r0, r1
 8013eec:	4611      	mov	r1, r2
 8013eee:	2200      	movs	r2, #0
 8013ef0:	602a      	str	r2, [r5, #0]
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	f7ee f8bd 	bl	8002072 <_lseek>
 8013ef8:	1c43      	adds	r3, r0, #1
 8013efa:	d102      	bne.n	8013f02 <_lseek_r+0x1e>
 8013efc:	682b      	ldr	r3, [r5, #0]
 8013efe:	b103      	cbz	r3, 8013f02 <_lseek_r+0x1e>
 8013f00:	6023      	str	r3, [r4, #0]
 8013f02:	bd38      	pop	{r3, r4, r5, pc}
 8013f04:	2400163c 	.word	0x2400163c

08013f08 <_read_r>:
 8013f08:	b538      	push	{r3, r4, r5, lr}
 8013f0a:	4d07      	ldr	r5, [pc, #28]	@ (8013f28 <_read_r+0x20>)
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	4608      	mov	r0, r1
 8013f10:	4611      	mov	r1, r2
 8013f12:	2200      	movs	r2, #0
 8013f14:	602a      	str	r2, [r5, #0]
 8013f16:	461a      	mov	r2, r3
 8013f18:	f7ee f867 	bl	8001fea <_read>
 8013f1c:	1c43      	adds	r3, r0, #1
 8013f1e:	d102      	bne.n	8013f26 <_read_r+0x1e>
 8013f20:	682b      	ldr	r3, [r5, #0]
 8013f22:	b103      	cbz	r3, 8013f26 <_read_r+0x1e>
 8013f24:	6023      	str	r3, [r4, #0]
 8013f26:	bd38      	pop	{r3, r4, r5, pc}
 8013f28:	2400163c 	.word	0x2400163c

08013f2c <_write_r>:
 8013f2c:	b538      	push	{r3, r4, r5, lr}
 8013f2e:	4d07      	ldr	r5, [pc, #28]	@ (8013f4c <_write_r+0x20>)
 8013f30:	4604      	mov	r4, r0
 8013f32:	4608      	mov	r0, r1
 8013f34:	4611      	mov	r1, r2
 8013f36:	2200      	movs	r2, #0
 8013f38:	602a      	str	r2, [r5, #0]
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	f7ed f847 	bl	8000fce <_write>
 8013f40:	1c43      	adds	r3, r0, #1
 8013f42:	d102      	bne.n	8013f4a <_write_r+0x1e>
 8013f44:	682b      	ldr	r3, [r5, #0]
 8013f46:	b103      	cbz	r3, 8013f4a <_write_r+0x1e>
 8013f48:	6023      	str	r3, [r4, #0]
 8013f4a:	bd38      	pop	{r3, r4, r5, pc}
 8013f4c:	2400163c 	.word	0x2400163c

08013f50 <__errno>:
 8013f50:	4b01      	ldr	r3, [pc, #4]	@ (8013f58 <__errno+0x8>)
 8013f52:	6818      	ldr	r0, [r3, #0]
 8013f54:	4770      	bx	lr
 8013f56:	bf00      	nop
 8013f58:	24000124 	.word	0x24000124

08013f5c <__libc_init_array>:
 8013f5c:	b570      	push	{r4, r5, r6, lr}
 8013f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8013f94 <__libc_init_array+0x38>)
 8013f60:	4c0d      	ldr	r4, [pc, #52]	@ (8013f98 <__libc_init_array+0x3c>)
 8013f62:	1b64      	subs	r4, r4, r5
 8013f64:	10a4      	asrs	r4, r4, #2
 8013f66:	2600      	movs	r6, #0
 8013f68:	42a6      	cmp	r6, r4
 8013f6a:	d109      	bne.n	8013f80 <__libc_init_array+0x24>
 8013f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8013f9c <__libc_init_array+0x40>)
 8013f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8013fa0 <__libc_init_array+0x44>)
 8013f70:	f001 fdbc 	bl	8015aec <_init>
 8013f74:	1b64      	subs	r4, r4, r5
 8013f76:	10a4      	asrs	r4, r4, #2
 8013f78:	2600      	movs	r6, #0
 8013f7a:	42a6      	cmp	r6, r4
 8013f7c:	d105      	bne.n	8013f8a <__libc_init_array+0x2e>
 8013f7e:	bd70      	pop	{r4, r5, r6, pc}
 8013f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f84:	4798      	blx	r3
 8013f86:	3601      	adds	r6, #1
 8013f88:	e7ee      	b.n	8013f68 <__libc_init_array+0xc>
 8013f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f8e:	4798      	blx	r3
 8013f90:	3601      	adds	r6, #1
 8013f92:	e7f2      	b.n	8013f7a <__libc_init_array+0x1e>
 8013f94:	08016038 	.word	0x08016038
 8013f98:	08016038 	.word	0x08016038
 8013f9c:	08016038 	.word	0x08016038
 8013fa0:	0801603c 	.word	0x0801603c

08013fa4 <__retarget_lock_init_recursive>:
 8013fa4:	4770      	bx	lr

08013fa6 <__retarget_lock_acquire_recursive>:
 8013fa6:	4770      	bx	lr

08013fa8 <__retarget_lock_release_recursive>:
 8013fa8:	4770      	bx	lr

08013faa <memcpy>:
 8013faa:	440a      	add	r2, r1
 8013fac:	4291      	cmp	r1, r2
 8013fae:	f100 33ff 	add.w	r3, r0, #4294967295
 8013fb2:	d100      	bne.n	8013fb6 <memcpy+0xc>
 8013fb4:	4770      	bx	lr
 8013fb6:	b510      	push	{r4, lr}
 8013fb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013fc0:	4291      	cmp	r1, r2
 8013fc2:	d1f9      	bne.n	8013fb8 <memcpy+0xe>
 8013fc4:	bd10      	pop	{r4, pc}

08013fc6 <quorem>:
 8013fc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fca:	6903      	ldr	r3, [r0, #16]
 8013fcc:	690c      	ldr	r4, [r1, #16]
 8013fce:	42a3      	cmp	r3, r4
 8013fd0:	4607      	mov	r7, r0
 8013fd2:	db7e      	blt.n	80140d2 <quorem+0x10c>
 8013fd4:	3c01      	subs	r4, #1
 8013fd6:	f101 0814 	add.w	r8, r1, #20
 8013fda:	00a3      	lsls	r3, r4, #2
 8013fdc:	f100 0514 	add.w	r5, r0, #20
 8013fe0:	9300      	str	r3, [sp, #0]
 8013fe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013fe6:	9301      	str	r3, [sp, #4]
 8013fe8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8013ffc:	d32e      	bcc.n	801405c <quorem+0x96>
 8013ffe:	f04f 0a00 	mov.w	sl, #0
 8014002:	46c4      	mov	ip, r8
 8014004:	46ae      	mov	lr, r5
 8014006:	46d3      	mov	fp, sl
 8014008:	f85c 3b04 	ldr.w	r3, [ip], #4
 801400c:	b298      	uxth	r0, r3
 801400e:	fb06 a000 	mla	r0, r6, r0, sl
 8014012:	0c02      	lsrs	r2, r0, #16
 8014014:	0c1b      	lsrs	r3, r3, #16
 8014016:	fb06 2303 	mla	r3, r6, r3, r2
 801401a:	f8de 2000 	ldr.w	r2, [lr]
 801401e:	b280      	uxth	r0, r0
 8014020:	b292      	uxth	r2, r2
 8014022:	1a12      	subs	r2, r2, r0
 8014024:	445a      	add	r2, fp
 8014026:	f8de 0000 	ldr.w	r0, [lr]
 801402a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801402e:	b29b      	uxth	r3, r3
 8014030:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014034:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014038:	b292      	uxth	r2, r2
 801403a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801403e:	45e1      	cmp	r9, ip
 8014040:	f84e 2b04 	str.w	r2, [lr], #4
 8014044:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014048:	d2de      	bcs.n	8014008 <quorem+0x42>
 801404a:	9b00      	ldr	r3, [sp, #0]
 801404c:	58eb      	ldr	r3, [r5, r3]
 801404e:	b92b      	cbnz	r3, 801405c <quorem+0x96>
 8014050:	9b01      	ldr	r3, [sp, #4]
 8014052:	3b04      	subs	r3, #4
 8014054:	429d      	cmp	r5, r3
 8014056:	461a      	mov	r2, r3
 8014058:	d32f      	bcc.n	80140ba <quorem+0xf4>
 801405a:	613c      	str	r4, [r7, #16]
 801405c:	4638      	mov	r0, r7
 801405e:	f001 f90b 	bl	8015278 <__mcmp>
 8014062:	2800      	cmp	r0, #0
 8014064:	db25      	blt.n	80140b2 <quorem+0xec>
 8014066:	4629      	mov	r1, r5
 8014068:	2000      	movs	r0, #0
 801406a:	f858 2b04 	ldr.w	r2, [r8], #4
 801406e:	f8d1 c000 	ldr.w	ip, [r1]
 8014072:	fa1f fe82 	uxth.w	lr, r2
 8014076:	fa1f f38c 	uxth.w	r3, ip
 801407a:	eba3 030e 	sub.w	r3, r3, lr
 801407e:	4403      	add	r3, r0
 8014080:	0c12      	lsrs	r2, r2, #16
 8014082:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014086:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801408a:	b29b      	uxth	r3, r3
 801408c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014090:	45c1      	cmp	r9, r8
 8014092:	f841 3b04 	str.w	r3, [r1], #4
 8014096:	ea4f 4022 	mov.w	r0, r2, asr #16
 801409a:	d2e6      	bcs.n	801406a <quorem+0xa4>
 801409c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80140a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80140a4:	b922      	cbnz	r2, 80140b0 <quorem+0xea>
 80140a6:	3b04      	subs	r3, #4
 80140a8:	429d      	cmp	r5, r3
 80140aa:	461a      	mov	r2, r3
 80140ac:	d30b      	bcc.n	80140c6 <quorem+0x100>
 80140ae:	613c      	str	r4, [r7, #16]
 80140b0:	3601      	adds	r6, #1
 80140b2:	4630      	mov	r0, r6
 80140b4:	b003      	add	sp, #12
 80140b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ba:	6812      	ldr	r2, [r2, #0]
 80140bc:	3b04      	subs	r3, #4
 80140be:	2a00      	cmp	r2, #0
 80140c0:	d1cb      	bne.n	801405a <quorem+0x94>
 80140c2:	3c01      	subs	r4, #1
 80140c4:	e7c6      	b.n	8014054 <quorem+0x8e>
 80140c6:	6812      	ldr	r2, [r2, #0]
 80140c8:	3b04      	subs	r3, #4
 80140ca:	2a00      	cmp	r2, #0
 80140cc:	d1ef      	bne.n	80140ae <quorem+0xe8>
 80140ce:	3c01      	subs	r4, #1
 80140d0:	e7ea      	b.n	80140a8 <quorem+0xe2>
 80140d2:	2000      	movs	r0, #0
 80140d4:	e7ee      	b.n	80140b4 <quorem+0xee>
	...

080140d8 <_dtoa_r>:
 80140d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140dc:	ed2d 8b02 	vpush	{d8}
 80140e0:	69c7      	ldr	r7, [r0, #28]
 80140e2:	b091      	sub	sp, #68	@ 0x44
 80140e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80140e8:	ec55 4b10 	vmov	r4, r5, d0
 80140ec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80140ee:	9107      	str	r1, [sp, #28]
 80140f0:	4681      	mov	r9, r0
 80140f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80140f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80140f6:	b97f      	cbnz	r7, 8014118 <_dtoa_r+0x40>
 80140f8:	2010      	movs	r0, #16
 80140fa:	f000 fd8d 	bl	8014c18 <malloc>
 80140fe:	4602      	mov	r2, r0
 8014100:	f8c9 001c 	str.w	r0, [r9, #28]
 8014104:	b920      	cbnz	r0, 8014110 <_dtoa_r+0x38>
 8014106:	4ba0      	ldr	r3, [pc, #640]	@ (8014388 <_dtoa_r+0x2b0>)
 8014108:	21ef      	movs	r1, #239	@ 0xef
 801410a:	48a0      	ldr	r0, [pc, #640]	@ (801438c <_dtoa_r+0x2b4>)
 801410c:	f001 fc3e 	bl	801598c <__assert_func>
 8014110:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014114:	6007      	str	r7, [r0, #0]
 8014116:	60c7      	str	r7, [r0, #12]
 8014118:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801411c:	6819      	ldr	r1, [r3, #0]
 801411e:	b159      	cbz	r1, 8014138 <_dtoa_r+0x60>
 8014120:	685a      	ldr	r2, [r3, #4]
 8014122:	604a      	str	r2, [r1, #4]
 8014124:	2301      	movs	r3, #1
 8014126:	4093      	lsls	r3, r2
 8014128:	608b      	str	r3, [r1, #8]
 801412a:	4648      	mov	r0, r9
 801412c:	f000 fe6a 	bl	8014e04 <_Bfree>
 8014130:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014134:	2200      	movs	r2, #0
 8014136:	601a      	str	r2, [r3, #0]
 8014138:	1e2b      	subs	r3, r5, #0
 801413a:	bfbb      	ittet	lt
 801413c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014140:	9303      	strlt	r3, [sp, #12]
 8014142:	2300      	movge	r3, #0
 8014144:	2201      	movlt	r2, #1
 8014146:	bfac      	ite	ge
 8014148:	6033      	strge	r3, [r6, #0]
 801414a:	6032      	strlt	r2, [r6, #0]
 801414c:	4b90      	ldr	r3, [pc, #576]	@ (8014390 <_dtoa_r+0x2b8>)
 801414e:	9e03      	ldr	r6, [sp, #12]
 8014150:	43b3      	bics	r3, r6
 8014152:	d110      	bne.n	8014176 <_dtoa_r+0x9e>
 8014154:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014156:	f242 730f 	movw	r3, #9999	@ 0x270f
 801415a:	6013      	str	r3, [r2, #0]
 801415c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014160:	4323      	orrs	r3, r4
 8014162:	f000 84de 	beq.w	8014b22 <_dtoa_r+0xa4a>
 8014166:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014168:	4f8a      	ldr	r7, [pc, #552]	@ (8014394 <_dtoa_r+0x2bc>)
 801416a:	2b00      	cmp	r3, #0
 801416c:	f000 84e0 	beq.w	8014b30 <_dtoa_r+0xa58>
 8014170:	1cfb      	adds	r3, r7, #3
 8014172:	f000 bcdb 	b.w	8014b2c <_dtoa_r+0xa54>
 8014176:	ed9d 8b02 	vldr	d8, [sp, #8]
 801417a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801417e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014182:	d10a      	bne.n	801419a <_dtoa_r+0xc2>
 8014184:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014186:	2301      	movs	r3, #1
 8014188:	6013      	str	r3, [r2, #0]
 801418a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801418c:	b113      	cbz	r3, 8014194 <_dtoa_r+0xbc>
 801418e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014190:	4b81      	ldr	r3, [pc, #516]	@ (8014398 <_dtoa_r+0x2c0>)
 8014192:	6013      	str	r3, [r2, #0]
 8014194:	4f81      	ldr	r7, [pc, #516]	@ (801439c <_dtoa_r+0x2c4>)
 8014196:	f000 bccb 	b.w	8014b30 <_dtoa_r+0xa58>
 801419a:	aa0e      	add	r2, sp, #56	@ 0x38
 801419c:	a90f      	add	r1, sp, #60	@ 0x3c
 801419e:	4648      	mov	r0, r9
 80141a0:	eeb0 0b48 	vmov.f64	d0, d8
 80141a4:	f001 f918 	bl	80153d8 <__d2b>
 80141a8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80141ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80141ae:	9001      	str	r0, [sp, #4]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d045      	beq.n	8014240 <_dtoa_r+0x168>
 80141b4:	eeb0 7b48 	vmov.f64	d7, d8
 80141b8:	ee18 1a90 	vmov	r1, s17
 80141bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80141c0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80141c4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80141c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80141cc:	2500      	movs	r5, #0
 80141ce:	ee07 1a90 	vmov	s15, r1
 80141d2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80141d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014370 <_dtoa_r+0x298>
 80141da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80141de:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8014378 <_dtoa_r+0x2a0>
 80141e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80141e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014380 <_dtoa_r+0x2a8>
 80141ea:	ee07 3a90 	vmov	s15, r3
 80141ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80141f2:	eeb0 7b46 	vmov.f64	d7, d6
 80141f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80141fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80141fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014206:	ee16 8a90 	vmov	r8, s13
 801420a:	d508      	bpl.n	801421e <_dtoa_r+0x146>
 801420c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014210:	eeb4 6b47 	vcmp.f64	d6, d7
 8014214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014218:	bf18      	it	ne
 801421a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801421e:	f1b8 0f16 	cmp.w	r8, #22
 8014222:	d82b      	bhi.n	801427c <_dtoa_r+0x1a4>
 8014224:	495e      	ldr	r1, [pc, #376]	@ (80143a0 <_dtoa_r+0x2c8>)
 8014226:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801422a:	ed91 7b00 	vldr	d7, [r1]
 801422e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014236:	d501      	bpl.n	801423c <_dtoa_r+0x164>
 8014238:	f108 38ff 	add.w	r8, r8, #4294967295
 801423c:	2100      	movs	r1, #0
 801423e:	e01e      	b.n	801427e <_dtoa_r+0x1a6>
 8014240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014242:	4413      	add	r3, r2
 8014244:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8014248:	2920      	cmp	r1, #32
 801424a:	bfc1      	itttt	gt
 801424c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8014250:	408e      	lslgt	r6, r1
 8014252:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8014256:	fa24 f101 	lsrgt.w	r1, r4, r1
 801425a:	bfd6      	itet	le
 801425c:	f1c1 0120 	rsble	r1, r1, #32
 8014260:	4331      	orrgt	r1, r6
 8014262:	fa04 f101 	lslle.w	r1, r4, r1
 8014266:	ee07 1a90 	vmov	s15, r1
 801426a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801426e:	3b01      	subs	r3, #1
 8014270:	ee17 1a90 	vmov	r1, s15
 8014274:	2501      	movs	r5, #1
 8014276:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801427a:	e7a8      	b.n	80141ce <_dtoa_r+0xf6>
 801427c:	2101      	movs	r1, #1
 801427e:	1ad2      	subs	r2, r2, r3
 8014280:	1e53      	subs	r3, r2, #1
 8014282:	9306      	str	r3, [sp, #24]
 8014284:	bf45      	ittet	mi
 8014286:	f1c2 0301 	rsbmi	r3, r2, #1
 801428a:	9305      	strmi	r3, [sp, #20]
 801428c:	2300      	movpl	r3, #0
 801428e:	2300      	movmi	r3, #0
 8014290:	bf4c      	ite	mi
 8014292:	9306      	strmi	r3, [sp, #24]
 8014294:	9305      	strpl	r3, [sp, #20]
 8014296:	f1b8 0f00 	cmp.w	r8, #0
 801429a:	910c      	str	r1, [sp, #48]	@ 0x30
 801429c:	db18      	blt.n	80142d0 <_dtoa_r+0x1f8>
 801429e:	9b06      	ldr	r3, [sp, #24]
 80142a0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80142a4:	4443      	add	r3, r8
 80142a6:	9306      	str	r3, [sp, #24]
 80142a8:	2300      	movs	r3, #0
 80142aa:	9a07      	ldr	r2, [sp, #28]
 80142ac:	2a09      	cmp	r2, #9
 80142ae:	d849      	bhi.n	8014344 <_dtoa_r+0x26c>
 80142b0:	2a05      	cmp	r2, #5
 80142b2:	bfc4      	itt	gt
 80142b4:	3a04      	subgt	r2, #4
 80142b6:	9207      	strgt	r2, [sp, #28]
 80142b8:	9a07      	ldr	r2, [sp, #28]
 80142ba:	f1a2 0202 	sub.w	r2, r2, #2
 80142be:	bfcc      	ite	gt
 80142c0:	2400      	movgt	r4, #0
 80142c2:	2401      	movle	r4, #1
 80142c4:	2a03      	cmp	r2, #3
 80142c6:	d848      	bhi.n	801435a <_dtoa_r+0x282>
 80142c8:	e8df f002 	tbb	[pc, r2]
 80142cc:	3a2c2e0b 	.word	0x3a2c2e0b
 80142d0:	9b05      	ldr	r3, [sp, #20]
 80142d2:	2200      	movs	r2, #0
 80142d4:	eba3 0308 	sub.w	r3, r3, r8
 80142d8:	9305      	str	r3, [sp, #20]
 80142da:	920a      	str	r2, [sp, #40]	@ 0x28
 80142dc:	f1c8 0300 	rsb	r3, r8, #0
 80142e0:	e7e3      	b.n	80142aa <_dtoa_r+0x1d2>
 80142e2:	2200      	movs	r2, #0
 80142e4:	9208      	str	r2, [sp, #32]
 80142e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142e8:	2a00      	cmp	r2, #0
 80142ea:	dc39      	bgt.n	8014360 <_dtoa_r+0x288>
 80142ec:	f04f 0b01 	mov.w	fp, #1
 80142f0:	46da      	mov	sl, fp
 80142f2:	465a      	mov	r2, fp
 80142f4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80142f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80142fc:	2100      	movs	r1, #0
 80142fe:	2004      	movs	r0, #4
 8014300:	f100 0614 	add.w	r6, r0, #20
 8014304:	4296      	cmp	r6, r2
 8014306:	d930      	bls.n	801436a <_dtoa_r+0x292>
 8014308:	6079      	str	r1, [r7, #4]
 801430a:	4648      	mov	r0, r9
 801430c:	9304      	str	r3, [sp, #16]
 801430e:	f000 fd39 	bl	8014d84 <_Balloc>
 8014312:	9b04      	ldr	r3, [sp, #16]
 8014314:	4607      	mov	r7, r0
 8014316:	2800      	cmp	r0, #0
 8014318:	d146      	bne.n	80143a8 <_dtoa_r+0x2d0>
 801431a:	4b22      	ldr	r3, [pc, #136]	@ (80143a4 <_dtoa_r+0x2cc>)
 801431c:	4602      	mov	r2, r0
 801431e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014322:	e6f2      	b.n	801410a <_dtoa_r+0x32>
 8014324:	2201      	movs	r2, #1
 8014326:	e7dd      	b.n	80142e4 <_dtoa_r+0x20c>
 8014328:	2200      	movs	r2, #0
 801432a:	9208      	str	r2, [sp, #32]
 801432c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801432e:	eb08 0b02 	add.w	fp, r8, r2
 8014332:	f10b 0a01 	add.w	sl, fp, #1
 8014336:	4652      	mov	r2, sl
 8014338:	2a01      	cmp	r2, #1
 801433a:	bfb8      	it	lt
 801433c:	2201      	movlt	r2, #1
 801433e:	e7db      	b.n	80142f8 <_dtoa_r+0x220>
 8014340:	2201      	movs	r2, #1
 8014342:	e7f2      	b.n	801432a <_dtoa_r+0x252>
 8014344:	2401      	movs	r4, #1
 8014346:	2200      	movs	r2, #0
 8014348:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801434c:	f04f 3bff 	mov.w	fp, #4294967295
 8014350:	2100      	movs	r1, #0
 8014352:	46da      	mov	sl, fp
 8014354:	2212      	movs	r2, #18
 8014356:	9109      	str	r1, [sp, #36]	@ 0x24
 8014358:	e7ce      	b.n	80142f8 <_dtoa_r+0x220>
 801435a:	2201      	movs	r2, #1
 801435c:	9208      	str	r2, [sp, #32]
 801435e:	e7f5      	b.n	801434c <_dtoa_r+0x274>
 8014360:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8014364:	46da      	mov	sl, fp
 8014366:	465a      	mov	r2, fp
 8014368:	e7c6      	b.n	80142f8 <_dtoa_r+0x220>
 801436a:	3101      	adds	r1, #1
 801436c:	0040      	lsls	r0, r0, #1
 801436e:	e7c7      	b.n	8014300 <_dtoa_r+0x228>
 8014370:	636f4361 	.word	0x636f4361
 8014374:	3fd287a7 	.word	0x3fd287a7
 8014378:	8b60c8b3 	.word	0x8b60c8b3
 801437c:	3fc68a28 	.word	0x3fc68a28
 8014380:	509f79fb 	.word	0x509f79fb
 8014384:	3fd34413 	.word	0x3fd34413
 8014388:	08015cfd 	.word	0x08015cfd
 801438c:	08015d14 	.word	0x08015d14
 8014390:	7ff00000 	.word	0x7ff00000
 8014394:	08015cf9 	.word	0x08015cf9
 8014398:	08015ccd 	.word	0x08015ccd
 801439c:	08015ccc 	.word	0x08015ccc
 80143a0:	08015e10 	.word	0x08015e10
 80143a4:	08015d6c 	.word	0x08015d6c
 80143a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80143ac:	f1ba 0f0e 	cmp.w	sl, #14
 80143b0:	6010      	str	r0, [r2, #0]
 80143b2:	d86f      	bhi.n	8014494 <_dtoa_r+0x3bc>
 80143b4:	2c00      	cmp	r4, #0
 80143b6:	d06d      	beq.n	8014494 <_dtoa_r+0x3bc>
 80143b8:	f1b8 0f00 	cmp.w	r8, #0
 80143bc:	f340 80c2 	ble.w	8014544 <_dtoa_r+0x46c>
 80143c0:	4aca      	ldr	r2, [pc, #808]	@ (80146ec <_dtoa_r+0x614>)
 80143c2:	f008 010f 	and.w	r1, r8, #15
 80143c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80143ca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80143ce:	ed92 7b00 	vldr	d7, [r2]
 80143d2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80143d6:	f000 80a9 	beq.w	801452c <_dtoa_r+0x454>
 80143da:	4ac5      	ldr	r2, [pc, #788]	@ (80146f0 <_dtoa_r+0x618>)
 80143dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80143e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80143e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80143e8:	f001 010f 	and.w	r1, r1, #15
 80143ec:	2203      	movs	r2, #3
 80143ee:	48c0      	ldr	r0, [pc, #768]	@ (80146f0 <_dtoa_r+0x618>)
 80143f0:	2900      	cmp	r1, #0
 80143f2:	f040 809d 	bne.w	8014530 <_dtoa_r+0x458>
 80143f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80143fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80143fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014402:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014404:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014408:	2900      	cmp	r1, #0
 801440a:	f000 80c1 	beq.w	8014590 <_dtoa_r+0x4b8>
 801440e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014412:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441a:	f140 80b9 	bpl.w	8014590 <_dtoa_r+0x4b8>
 801441e:	f1ba 0f00 	cmp.w	sl, #0
 8014422:	f000 80b5 	beq.w	8014590 <_dtoa_r+0x4b8>
 8014426:	f1bb 0f00 	cmp.w	fp, #0
 801442a:	dd31      	ble.n	8014490 <_dtoa_r+0x3b8>
 801442c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014430:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014434:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014438:	f108 31ff 	add.w	r1, r8, #4294967295
 801443c:	9104      	str	r1, [sp, #16]
 801443e:	3201      	adds	r2, #1
 8014440:	465c      	mov	r4, fp
 8014442:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014446:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801444a:	ee07 2a90 	vmov	s15, r2
 801444e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014452:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014456:	ee15 2a90 	vmov	r2, s11
 801445a:	ec51 0b15 	vmov	r0, r1, d5
 801445e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8014462:	2c00      	cmp	r4, #0
 8014464:	f040 8098 	bne.w	8014598 <_dtoa_r+0x4c0>
 8014468:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801446c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014470:	ec41 0b17 	vmov	d7, r0, r1
 8014474:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801447c:	f300 8261 	bgt.w	8014942 <_dtoa_r+0x86a>
 8014480:	eeb1 7b47 	vneg.f64	d7, d7
 8014484:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801448c:	f100 80f5 	bmi.w	801467a <_dtoa_r+0x5a2>
 8014490:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014494:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014496:	2a00      	cmp	r2, #0
 8014498:	f2c0 812c 	blt.w	80146f4 <_dtoa_r+0x61c>
 801449c:	f1b8 0f0e 	cmp.w	r8, #14
 80144a0:	f300 8128 	bgt.w	80146f4 <_dtoa_r+0x61c>
 80144a4:	4b91      	ldr	r3, [pc, #580]	@ (80146ec <_dtoa_r+0x614>)
 80144a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80144aa:	ed93 6b00 	vldr	d6, [r3]
 80144ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	da03      	bge.n	80144bc <_dtoa_r+0x3e4>
 80144b4:	f1ba 0f00 	cmp.w	sl, #0
 80144b8:	f340 80d2 	ble.w	8014660 <_dtoa_r+0x588>
 80144bc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80144c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80144c4:	463e      	mov	r6, r7
 80144c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80144ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80144ce:	ee15 3a10 	vmov	r3, s10
 80144d2:	3330      	adds	r3, #48	@ 0x30
 80144d4:	f806 3b01 	strb.w	r3, [r6], #1
 80144d8:	1bf3      	subs	r3, r6, r7
 80144da:	459a      	cmp	sl, r3
 80144dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80144e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80144e4:	f040 80f8 	bne.w	80146d8 <_dtoa_r+0x600>
 80144e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80144ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80144f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144f4:	f300 80dd 	bgt.w	80146b2 <_dtoa_r+0x5da>
 80144f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80144fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014500:	d104      	bne.n	801450c <_dtoa_r+0x434>
 8014502:	ee15 3a10 	vmov	r3, s10
 8014506:	07db      	lsls	r3, r3, #31
 8014508:	f100 80d3 	bmi.w	80146b2 <_dtoa_r+0x5da>
 801450c:	9901      	ldr	r1, [sp, #4]
 801450e:	4648      	mov	r0, r9
 8014510:	f000 fc78 	bl	8014e04 <_Bfree>
 8014514:	2300      	movs	r3, #0
 8014516:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014518:	7033      	strb	r3, [r6, #0]
 801451a:	f108 0301 	add.w	r3, r8, #1
 801451e:	6013      	str	r3, [r2, #0]
 8014520:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014522:	2b00      	cmp	r3, #0
 8014524:	f000 8304 	beq.w	8014b30 <_dtoa_r+0xa58>
 8014528:	601e      	str	r6, [r3, #0]
 801452a:	e301      	b.n	8014b30 <_dtoa_r+0xa58>
 801452c:	2202      	movs	r2, #2
 801452e:	e75e      	b.n	80143ee <_dtoa_r+0x316>
 8014530:	07cc      	lsls	r4, r1, #31
 8014532:	d504      	bpl.n	801453e <_dtoa_r+0x466>
 8014534:	ed90 6b00 	vldr	d6, [r0]
 8014538:	3201      	adds	r2, #1
 801453a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801453e:	1049      	asrs	r1, r1, #1
 8014540:	3008      	adds	r0, #8
 8014542:	e755      	b.n	80143f0 <_dtoa_r+0x318>
 8014544:	d022      	beq.n	801458c <_dtoa_r+0x4b4>
 8014546:	f1c8 0100 	rsb	r1, r8, #0
 801454a:	4a68      	ldr	r2, [pc, #416]	@ (80146ec <_dtoa_r+0x614>)
 801454c:	f001 000f 	and.w	r0, r1, #15
 8014550:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014554:	ed92 7b00 	vldr	d7, [r2]
 8014558:	ee28 7b07 	vmul.f64	d7, d8, d7
 801455c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014560:	4863      	ldr	r0, [pc, #396]	@ (80146f0 <_dtoa_r+0x618>)
 8014562:	1109      	asrs	r1, r1, #4
 8014564:	2400      	movs	r4, #0
 8014566:	2202      	movs	r2, #2
 8014568:	b929      	cbnz	r1, 8014576 <_dtoa_r+0x49e>
 801456a:	2c00      	cmp	r4, #0
 801456c:	f43f af49 	beq.w	8014402 <_dtoa_r+0x32a>
 8014570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014574:	e745      	b.n	8014402 <_dtoa_r+0x32a>
 8014576:	07ce      	lsls	r6, r1, #31
 8014578:	d505      	bpl.n	8014586 <_dtoa_r+0x4ae>
 801457a:	ed90 6b00 	vldr	d6, [r0]
 801457e:	3201      	adds	r2, #1
 8014580:	2401      	movs	r4, #1
 8014582:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014586:	1049      	asrs	r1, r1, #1
 8014588:	3008      	adds	r0, #8
 801458a:	e7ed      	b.n	8014568 <_dtoa_r+0x490>
 801458c:	2202      	movs	r2, #2
 801458e:	e738      	b.n	8014402 <_dtoa_r+0x32a>
 8014590:	f8cd 8010 	str.w	r8, [sp, #16]
 8014594:	4654      	mov	r4, sl
 8014596:	e754      	b.n	8014442 <_dtoa_r+0x36a>
 8014598:	4a54      	ldr	r2, [pc, #336]	@ (80146ec <_dtoa_r+0x614>)
 801459a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801459e:	ed12 4b02 	vldr	d4, [r2, #-8]
 80145a2:	9a08      	ldr	r2, [sp, #32]
 80145a4:	ec41 0b17 	vmov	d7, r0, r1
 80145a8:	443c      	add	r4, r7
 80145aa:	b34a      	cbz	r2, 8014600 <_dtoa_r+0x528>
 80145ac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80145b0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80145b4:	463e      	mov	r6, r7
 80145b6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80145ba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80145be:	ee35 7b47 	vsub.f64	d7, d5, d7
 80145c2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80145c6:	ee14 2a90 	vmov	r2, s9
 80145ca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80145ce:	3230      	adds	r2, #48	@ 0x30
 80145d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80145d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80145d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145dc:	f806 2b01 	strb.w	r2, [r6], #1
 80145e0:	d438      	bmi.n	8014654 <_dtoa_r+0x57c>
 80145e2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80145e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80145ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ee:	d462      	bmi.n	80146b6 <_dtoa_r+0x5de>
 80145f0:	42a6      	cmp	r6, r4
 80145f2:	f43f af4d 	beq.w	8014490 <_dtoa_r+0x3b8>
 80145f6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80145fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80145fe:	e7e0      	b.n	80145c2 <_dtoa_r+0x4ea>
 8014600:	4621      	mov	r1, r4
 8014602:	463e      	mov	r6, r7
 8014604:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014608:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801460c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014610:	ee14 2a90 	vmov	r2, s9
 8014614:	3230      	adds	r2, #48	@ 0x30
 8014616:	f806 2b01 	strb.w	r2, [r6], #1
 801461a:	42a6      	cmp	r6, r4
 801461c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014620:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014624:	d119      	bne.n	801465a <_dtoa_r+0x582>
 8014626:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801462a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801462e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014636:	dc3e      	bgt.n	80146b6 <_dtoa_r+0x5de>
 8014638:	ee35 5b47 	vsub.f64	d5, d5, d7
 801463c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014644:	f57f af24 	bpl.w	8014490 <_dtoa_r+0x3b8>
 8014648:	460e      	mov	r6, r1
 801464a:	3901      	subs	r1, #1
 801464c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014650:	2b30      	cmp	r3, #48	@ 0x30
 8014652:	d0f9      	beq.n	8014648 <_dtoa_r+0x570>
 8014654:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014658:	e758      	b.n	801450c <_dtoa_r+0x434>
 801465a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801465e:	e7d5      	b.n	801460c <_dtoa_r+0x534>
 8014660:	d10b      	bne.n	801467a <_dtoa_r+0x5a2>
 8014662:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014666:	ee26 6b07 	vmul.f64	d6, d6, d7
 801466a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801466e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014676:	f2c0 8161 	blt.w	801493c <_dtoa_r+0x864>
 801467a:	2400      	movs	r4, #0
 801467c:	4625      	mov	r5, r4
 801467e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014680:	43db      	mvns	r3, r3
 8014682:	9304      	str	r3, [sp, #16]
 8014684:	463e      	mov	r6, r7
 8014686:	f04f 0800 	mov.w	r8, #0
 801468a:	4621      	mov	r1, r4
 801468c:	4648      	mov	r0, r9
 801468e:	f000 fbb9 	bl	8014e04 <_Bfree>
 8014692:	2d00      	cmp	r5, #0
 8014694:	d0de      	beq.n	8014654 <_dtoa_r+0x57c>
 8014696:	f1b8 0f00 	cmp.w	r8, #0
 801469a:	d005      	beq.n	80146a8 <_dtoa_r+0x5d0>
 801469c:	45a8      	cmp	r8, r5
 801469e:	d003      	beq.n	80146a8 <_dtoa_r+0x5d0>
 80146a0:	4641      	mov	r1, r8
 80146a2:	4648      	mov	r0, r9
 80146a4:	f000 fbae 	bl	8014e04 <_Bfree>
 80146a8:	4629      	mov	r1, r5
 80146aa:	4648      	mov	r0, r9
 80146ac:	f000 fbaa 	bl	8014e04 <_Bfree>
 80146b0:	e7d0      	b.n	8014654 <_dtoa_r+0x57c>
 80146b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80146b6:	4633      	mov	r3, r6
 80146b8:	461e      	mov	r6, r3
 80146ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146be:	2a39      	cmp	r2, #57	@ 0x39
 80146c0:	d106      	bne.n	80146d0 <_dtoa_r+0x5f8>
 80146c2:	429f      	cmp	r7, r3
 80146c4:	d1f8      	bne.n	80146b8 <_dtoa_r+0x5e0>
 80146c6:	9a04      	ldr	r2, [sp, #16]
 80146c8:	3201      	adds	r2, #1
 80146ca:	9204      	str	r2, [sp, #16]
 80146cc:	2230      	movs	r2, #48	@ 0x30
 80146ce:	703a      	strb	r2, [r7, #0]
 80146d0:	781a      	ldrb	r2, [r3, #0]
 80146d2:	3201      	adds	r2, #1
 80146d4:	701a      	strb	r2, [r3, #0]
 80146d6:	e7bd      	b.n	8014654 <_dtoa_r+0x57c>
 80146d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80146dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80146e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e4:	f47f aeef 	bne.w	80144c6 <_dtoa_r+0x3ee>
 80146e8:	e710      	b.n	801450c <_dtoa_r+0x434>
 80146ea:	bf00      	nop
 80146ec:	08015e10 	.word	0x08015e10
 80146f0:	08015de8 	.word	0x08015de8
 80146f4:	9908      	ldr	r1, [sp, #32]
 80146f6:	2900      	cmp	r1, #0
 80146f8:	f000 80e3 	beq.w	80148c2 <_dtoa_r+0x7ea>
 80146fc:	9907      	ldr	r1, [sp, #28]
 80146fe:	2901      	cmp	r1, #1
 8014700:	f300 80c8 	bgt.w	8014894 <_dtoa_r+0x7bc>
 8014704:	2d00      	cmp	r5, #0
 8014706:	f000 80c1 	beq.w	801488c <_dtoa_r+0x7b4>
 801470a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801470e:	9e05      	ldr	r6, [sp, #20]
 8014710:	461c      	mov	r4, r3
 8014712:	9304      	str	r3, [sp, #16]
 8014714:	9b05      	ldr	r3, [sp, #20]
 8014716:	4413      	add	r3, r2
 8014718:	9305      	str	r3, [sp, #20]
 801471a:	9b06      	ldr	r3, [sp, #24]
 801471c:	2101      	movs	r1, #1
 801471e:	4413      	add	r3, r2
 8014720:	4648      	mov	r0, r9
 8014722:	9306      	str	r3, [sp, #24]
 8014724:	f000 fc22 	bl	8014f6c <__i2b>
 8014728:	9b04      	ldr	r3, [sp, #16]
 801472a:	4605      	mov	r5, r0
 801472c:	b166      	cbz	r6, 8014748 <_dtoa_r+0x670>
 801472e:	9a06      	ldr	r2, [sp, #24]
 8014730:	2a00      	cmp	r2, #0
 8014732:	dd09      	ble.n	8014748 <_dtoa_r+0x670>
 8014734:	42b2      	cmp	r2, r6
 8014736:	9905      	ldr	r1, [sp, #20]
 8014738:	bfa8      	it	ge
 801473a:	4632      	movge	r2, r6
 801473c:	1a89      	subs	r1, r1, r2
 801473e:	9105      	str	r1, [sp, #20]
 8014740:	9906      	ldr	r1, [sp, #24]
 8014742:	1ab6      	subs	r6, r6, r2
 8014744:	1a8a      	subs	r2, r1, r2
 8014746:	9206      	str	r2, [sp, #24]
 8014748:	b1fb      	cbz	r3, 801478a <_dtoa_r+0x6b2>
 801474a:	9a08      	ldr	r2, [sp, #32]
 801474c:	2a00      	cmp	r2, #0
 801474e:	f000 80bc 	beq.w	80148ca <_dtoa_r+0x7f2>
 8014752:	b19c      	cbz	r4, 801477c <_dtoa_r+0x6a4>
 8014754:	4629      	mov	r1, r5
 8014756:	4622      	mov	r2, r4
 8014758:	4648      	mov	r0, r9
 801475a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801475c:	f000 fcc6 	bl	80150ec <__pow5mult>
 8014760:	9a01      	ldr	r2, [sp, #4]
 8014762:	4601      	mov	r1, r0
 8014764:	4605      	mov	r5, r0
 8014766:	4648      	mov	r0, r9
 8014768:	f000 fc16 	bl	8014f98 <__multiply>
 801476c:	9901      	ldr	r1, [sp, #4]
 801476e:	9004      	str	r0, [sp, #16]
 8014770:	4648      	mov	r0, r9
 8014772:	f000 fb47 	bl	8014e04 <_Bfree>
 8014776:	9a04      	ldr	r2, [sp, #16]
 8014778:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801477a:	9201      	str	r2, [sp, #4]
 801477c:	1b1a      	subs	r2, r3, r4
 801477e:	d004      	beq.n	801478a <_dtoa_r+0x6b2>
 8014780:	9901      	ldr	r1, [sp, #4]
 8014782:	4648      	mov	r0, r9
 8014784:	f000 fcb2 	bl	80150ec <__pow5mult>
 8014788:	9001      	str	r0, [sp, #4]
 801478a:	2101      	movs	r1, #1
 801478c:	4648      	mov	r0, r9
 801478e:	f000 fbed 	bl	8014f6c <__i2b>
 8014792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014794:	4604      	mov	r4, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	f000 81d0 	beq.w	8014b3c <_dtoa_r+0xa64>
 801479c:	461a      	mov	r2, r3
 801479e:	4601      	mov	r1, r0
 80147a0:	4648      	mov	r0, r9
 80147a2:	f000 fca3 	bl	80150ec <__pow5mult>
 80147a6:	9b07      	ldr	r3, [sp, #28]
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	4604      	mov	r4, r0
 80147ac:	f300 8095 	bgt.w	80148da <_dtoa_r+0x802>
 80147b0:	9b02      	ldr	r3, [sp, #8]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	f040 808b 	bne.w	80148ce <_dtoa_r+0x7f6>
 80147b8:	9b03      	ldr	r3, [sp, #12]
 80147ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80147be:	2a00      	cmp	r2, #0
 80147c0:	f040 8087 	bne.w	80148d2 <_dtoa_r+0x7fa>
 80147c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80147c8:	0d12      	lsrs	r2, r2, #20
 80147ca:	0512      	lsls	r2, r2, #20
 80147cc:	2a00      	cmp	r2, #0
 80147ce:	f000 8082 	beq.w	80148d6 <_dtoa_r+0x7fe>
 80147d2:	9b05      	ldr	r3, [sp, #20]
 80147d4:	3301      	adds	r3, #1
 80147d6:	9305      	str	r3, [sp, #20]
 80147d8:	9b06      	ldr	r3, [sp, #24]
 80147da:	3301      	adds	r3, #1
 80147dc:	9306      	str	r3, [sp, #24]
 80147de:	2301      	movs	r3, #1
 80147e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80147e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	f000 81af 	beq.w	8014b48 <_dtoa_r+0xa70>
 80147ea:	6922      	ldr	r2, [r4, #16]
 80147ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80147f0:	6910      	ldr	r0, [r2, #16]
 80147f2:	f000 fb6f 	bl	8014ed4 <__hi0bits>
 80147f6:	f1c0 0020 	rsb	r0, r0, #32
 80147fa:	9b06      	ldr	r3, [sp, #24]
 80147fc:	4418      	add	r0, r3
 80147fe:	f010 001f 	ands.w	r0, r0, #31
 8014802:	d076      	beq.n	80148f2 <_dtoa_r+0x81a>
 8014804:	f1c0 0220 	rsb	r2, r0, #32
 8014808:	2a04      	cmp	r2, #4
 801480a:	dd69      	ble.n	80148e0 <_dtoa_r+0x808>
 801480c:	9b05      	ldr	r3, [sp, #20]
 801480e:	f1c0 001c 	rsb	r0, r0, #28
 8014812:	4403      	add	r3, r0
 8014814:	9305      	str	r3, [sp, #20]
 8014816:	9b06      	ldr	r3, [sp, #24]
 8014818:	4406      	add	r6, r0
 801481a:	4403      	add	r3, r0
 801481c:	9306      	str	r3, [sp, #24]
 801481e:	9b05      	ldr	r3, [sp, #20]
 8014820:	2b00      	cmp	r3, #0
 8014822:	dd05      	ble.n	8014830 <_dtoa_r+0x758>
 8014824:	9901      	ldr	r1, [sp, #4]
 8014826:	461a      	mov	r2, r3
 8014828:	4648      	mov	r0, r9
 801482a:	f000 fcb9 	bl	80151a0 <__lshift>
 801482e:	9001      	str	r0, [sp, #4]
 8014830:	9b06      	ldr	r3, [sp, #24]
 8014832:	2b00      	cmp	r3, #0
 8014834:	dd05      	ble.n	8014842 <_dtoa_r+0x76a>
 8014836:	4621      	mov	r1, r4
 8014838:	461a      	mov	r2, r3
 801483a:	4648      	mov	r0, r9
 801483c:	f000 fcb0 	bl	80151a0 <__lshift>
 8014840:	4604      	mov	r4, r0
 8014842:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014844:	2b00      	cmp	r3, #0
 8014846:	d056      	beq.n	80148f6 <_dtoa_r+0x81e>
 8014848:	9801      	ldr	r0, [sp, #4]
 801484a:	4621      	mov	r1, r4
 801484c:	f000 fd14 	bl	8015278 <__mcmp>
 8014850:	2800      	cmp	r0, #0
 8014852:	da50      	bge.n	80148f6 <_dtoa_r+0x81e>
 8014854:	f108 33ff 	add.w	r3, r8, #4294967295
 8014858:	9304      	str	r3, [sp, #16]
 801485a:	9901      	ldr	r1, [sp, #4]
 801485c:	2300      	movs	r3, #0
 801485e:	220a      	movs	r2, #10
 8014860:	4648      	mov	r0, r9
 8014862:	f000 faf1 	bl	8014e48 <__multadd>
 8014866:	9b08      	ldr	r3, [sp, #32]
 8014868:	9001      	str	r0, [sp, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	f000 816e 	beq.w	8014b4c <_dtoa_r+0xa74>
 8014870:	4629      	mov	r1, r5
 8014872:	2300      	movs	r3, #0
 8014874:	220a      	movs	r2, #10
 8014876:	4648      	mov	r0, r9
 8014878:	f000 fae6 	bl	8014e48 <__multadd>
 801487c:	f1bb 0f00 	cmp.w	fp, #0
 8014880:	4605      	mov	r5, r0
 8014882:	dc64      	bgt.n	801494e <_dtoa_r+0x876>
 8014884:	9b07      	ldr	r3, [sp, #28]
 8014886:	2b02      	cmp	r3, #2
 8014888:	dc3e      	bgt.n	8014908 <_dtoa_r+0x830>
 801488a:	e060      	b.n	801494e <_dtoa_r+0x876>
 801488c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801488e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014892:	e73c      	b.n	801470e <_dtoa_r+0x636>
 8014894:	f10a 34ff 	add.w	r4, sl, #4294967295
 8014898:	42a3      	cmp	r3, r4
 801489a:	bfbf      	itttt	lt
 801489c:	1ae2      	sublt	r2, r4, r3
 801489e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80148a0:	189b      	addlt	r3, r3, r2
 80148a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80148a4:	bfae      	itee	ge
 80148a6:	1b1c      	subge	r4, r3, r4
 80148a8:	4623      	movlt	r3, r4
 80148aa:	2400      	movlt	r4, #0
 80148ac:	f1ba 0f00 	cmp.w	sl, #0
 80148b0:	bfb5      	itete	lt
 80148b2:	9a05      	ldrlt	r2, [sp, #20]
 80148b4:	9e05      	ldrge	r6, [sp, #20]
 80148b6:	eba2 060a 	sublt.w	r6, r2, sl
 80148ba:	4652      	movge	r2, sl
 80148bc:	bfb8      	it	lt
 80148be:	2200      	movlt	r2, #0
 80148c0:	e727      	b.n	8014712 <_dtoa_r+0x63a>
 80148c2:	9e05      	ldr	r6, [sp, #20]
 80148c4:	9d08      	ldr	r5, [sp, #32]
 80148c6:	461c      	mov	r4, r3
 80148c8:	e730      	b.n	801472c <_dtoa_r+0x654>
 80148ca:	461a      	mov	r2, r3
 80148cc:	e758      	b.n	8014780 <_dtoa_r+0x6a8>
 80148ce:	2300      	movs	r3, #0
 80148d0:	e786      	b.n	80147e0 <_dtoa_r+0x708>
 80148d2:	9b02      	ldr	r3, [sp, #8]
 80148d4:	e784      	b.n	80147e0 <_dtoa_r+0x708>
 80148d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80148d8:	e783      	b.n	80147e2 <_dtoa_r+0x70a>
 80148da:	2300      	movs	r3, #0
 80148dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80148de:	e784      	b.n	80147ea <_dtoa_r+0x712>
 80148e0:	d09d      	beq.n	801481e <_dtoa_r+0x746>
 80148e2:	9b05      	ldr	r3, [sp, #20]
 80148e4:	321c      	adds	r2, #28
 80148e6:	4413      	add	r3, r2
 80148e8:	9305      	str	r3, [sp, #20]
 80148ea:	9b06      	ldr	r3, [sp, #24]
 80148ec:	4416      	add	r6, r2
 80148ee:	4413      	add	r3, r2
 80148f0:	e794      	b.n	801481c <_dtoa_r+0x744>
 80148f2:	4602      	mov	r2, r0
 80148f4:	e7f5      	b.n	80148e2 <_dtoa_r+0x80a>
 80148f6:	f1ba 0f00 	cmp.w	sl, #0
 80148fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80148fe:	46d3      	mov	fp, sl
 8014900:	dc21      	bgt.n	8014946 <_dtoa_r+0x86e>
 8014902:	9b07      	ldr	r3, [sp, #28]
 8014904:	2b02      	cmp	r3, #2
 8014906:	dd1e      	ble.n	8014946 <_dtoa_r+0x86e>
 8014908:	f1bb 0f00 	cmp.w	fp, #0
 801490c:	f47f aeb7 	bne.w	801467e <_dtoa_r+0x5a6>
 8014910:	4621      	mov	r1, r4
 8014912:	465b      	mov	r3, fp
 8014914:	2205      	movs	r2, #5
 8014916:	4648      	mov	r0, r9
 8014918:	f000 fa96 	bl	8014e48 <__multadd>
 801491c:	4601      	mov	r1, r0
 801491e:	4604      	mov	r4, r0
 8014920:	9801      	ldr	r0, [sp, #4]
 8014922:	f000 fca9 	bl	8015278 <__mcmp>
 8014926:	2800      	cmp	r0, #0
 8014928:	f77f aea9 	ble.w	801467e <_dtoa_r+0x5a6>
 801492c:	463e      	mov	r6, r7
 801492e:	2331      	movs	r3, #49	@ 0x31
 8014930:	f806 3b01 	strb.w	r3, [r6], #1
 8014934:	9b04      	ldr	r3, [sp, #16]
 8014936:	3301      	adds	r3, #1
 8014938:	9304      	str	r3, [sp, #16]
 801493a:	e6a4      	b.n	8014686 <_dtoa_r+0x5ae>
 801493c:	f8cd 8010 	str.w	r8, [sp, #16]
 8014940:	4654      	mov	r4, sl
 8014942:	4625      	mov	r5, r4
 8014944:	e7f2      	b.n	801492c <_dtoa_r+0x854>
 8014946:	9b08      	ldr	r3, [sp, #32]
 8014948:	2b00      	cmp	r3, #0
 801494a:	f000 8103 	beq.w	8014b54 <_dtoa_r+0xa7c>
 801494e:	2e00      	cmp	r6, #0
 8014950:	dd05      	ble.n	801495e <_dtoa_r+0x886>
 8014952:	4629      	mov	r1, r5
 8014954:	4632      	mov	r2, r6
 8014956:	4648      	mov	r0, r9
 8014958:	f000 fc22 	bl	80151a0 <__lshift>
 801495c:	4605      	mov	r5, r0
 801495e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014960:	2b00      	cmp	r3, #0
 8014962:	d058      	beq.n	8014a16 <_dtoa_r+0x93e>
 8014964:	6869      	ldr	r1, [r5, #4]
 8014966:	4648      	mov	r0, r9
 8014968:	f000 fa0c 	bl	8014d84 <_Balloc>
 801496c:	4606      	mov	r6, r0
 801496e:	b928      	cbnz	r0, 801497c <_dtoa_r+0x8a4>
 8014970:	4b82      	ldr	r3, [pc, #520]	@ (8014b7c <_dtoa_r+0xaa4>)
 8014972:	4602      	mov	r2, r0
 8014974:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014978:	f7ff bbc7 	b.w	801410a <_dtoa_r+0x32>
 801497c:	692a      	ldr	r2, [r5, #16]
 801497e:	3202      	adds	r2, #2
 8014980:	0092      	lsls	r2, r2, #2
 8014982:	f105 010c 	add.w	r1, r5, #12
 8014986:	300c      	adds	r0, #12
 8014988:	f7ff fb0f 	bl	8013faa <memcpy>
 801498c:	2201      	movs	r2, #1
 801498e:	4631      	mov	r1, r6
 8014990:	4648      	mov	r0, r9
 8014992:	f000 fc05 	bl	80151a0 <__lshift>
 8014996:	1c7b      	adds	r3, r7, #1
 8014998:	9305      	str	r3, [sp, #20]
 801499a:	eb07 030b 	add.w	r3, r7, fp
 801499e:	9309      	str	r3, [sp, #36]	@ 0x24
 80149a0:	9b02      	ldr	r3, [sp, #8]
 80149a2:	f003 0301 	and.w	r3, r3, #1
 80149a6:	46a8      	mov	r8, r5
 80149a8:	9308      	str	r3, [sp, #32]
 80149aa:	4605      	mov	r5, r0
 80149ac:	9b05      	ldr	r3, [sp, #20]
 80149ae:	9801      	ldr	r0, [sp, #4]
 80149b0:	4621      	mov	r1, r4
 80149b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80149b6:	f7ff fb06 	bl	8013fc6 <quorem>
 80149ba:	4641      	mov	r1, r8
 80149bc:	9002      	str	r0, [sp, #8]
 80149be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80149c2:	9801      	ldr	r0, [sp, #4]
 80149c4:	f000 fc58 	bl	8015278 <__mcmp>
 80149c8:	462a      	mov	r2, r5
 80149ca:	9006      	str	r0, [sp, #24]
 80149cc:	4621      	mov	r1, r4
 80149ce:	4648      	mov	r0, r9
 80149d0:	f000 fc6e 	bl	80152b0 <__mdiff>
 80149d4:	68c2      	ldr	r2, [r0, #12]
 80149d6:	4606      	mov	r6, r0
 80149d8:	b9fa      	cbnz	r2, 8014a1a <_dtoa_r+0x942>
 80149da:	4601      	mov	r1, r0
 80149dc:	9801      	ldr	r0, [sp, #4]
 80149de:	f000 fc4b 	bl	8015278 <__mcmp>
 80149e2:	4602      	mov	r2, r0
 80149e4:	4631      	mov	r1, r6
 80149e6:	4648      	mov	r0, r9
 80149e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80149ea:	f000 fa0b 	bl	8014e04 <_Bfree>
 80149ee:	9b07      	ldr	r3, [sp, #28]
 80149f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80149f2:	9e05      	ldr	r6, [sp, #20]
 80149f4:	ea43 0102 	orr.w	r1, r3, r2
 80149f8:	9b08      	ldr	r3, [sp, #32]
 80149fa:	4319      	orrs	r1, r3
 80149fc:	d10f      	bne.n	8014a1e <_dtoa_r+0x946>
 80149fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014a02:	d028      	beq.n	8014a56 <_dtoa_r+0x97e>
 8014a04:	9b06      	ldr	r3, [sp, #24]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	dd02      	ble.n	8014a10 <_dtoa_r+0x938>
 8014a0a:	9b02      	ldr	r3, [sp, #8]
 8014a0c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8014a10:	f88b a000 	strb.w	sl, [fp]
 8014a14:	e639      	b.n	801468a <_dtoa_r+0x5b2>
 8014a16:	4628      	mov	r0, r5
 8014a18:	e7bd      	b.n	8014996 <_dtoa_r+0x8be>
 8014a1a:	2201      	movs	r2, #1
 8014a1c:	e7e2      	b.n	80149e4 <_dtoa_r+0x90c>
 8014a1e:	9b06      	ldr	r3, [sp, #24]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	db04      	blt.n	8014a2e <_dtoa_r+0x956>
 8014a24:	9907      	ldr	r1, [sp, #28]
 8014a26:	430b      	orrs	r3, r1
 8014a28:	9908      	ldr	r1, [sp, #32]
 8014a2a:	430b      	orrs	r3, r1
 8014a2c:	d120      	bne.n	8014a70 <_dtoa_r+0x998>
 8014a2e:	2a00      	cmp	r2, #0
 8014a30:	ddee      	ble.n	8014a10 <_dtoa_r+0x938>
 8014a32:	9901      	ldr	r1, [sp, #4]
 8014a34:	2201      	movs	r2, #1
 8014a36:	4648      	mov	r0, r9
 8014a38:	f000 fbb2 	bl	80151a0 <__lshift>
 8014a3c:	4621      	mov	r1, r4
 8014a3e:	9001      	str	r0, [sp, #4]
 8014a40:	f000 fc1a 	bl	8015278 <__mcmp>
 8014a44:	2800      	cmp	r0, #0
 8014a46:	dc03      	bgt.n	8014a50 <_dtoa_r+0x978>
 8014a48:	d1e2      	bne.n	8014a10 <_dtoa_r+0x938>
 8014a4a:	f01a 0f01 	tst.w	sl, #1
 8014a4e:	d0df      	beq.n	8014a10 <_dtoa_r+0x938>
 8014a50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014a54:	d1d9      	bne.n	8014a0a <_dtoa_r+0x932>
 8014a56:	2339      	movs	r3, #57	@ 0x39
 8014a58:	f88b 3000 	strb.w	r3, [fp]
 8014a5c:	4633      	mov	r3, r6
 8014a5e:	461e      	mov	r6, r3
 8014a60:	3b01      	subs	r3, #1
 8014a62:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014a66:	2a39      	cmp	r2, #57	@ 0x39
 8014a68:	d053      	beq.n	8014b12 <_dtoa_r+0xa3a>
 8014a6a:	3201      	adds	r2, #1
 8014a6c:	701a      	strb	r2, [r3, #0]
 8014a6e:	e60c      	b.n	801468a <_dtoa_r+0x5b2>
 8014a70:	2a00      	cmp	r2, #0
 8014a72:	dd07      	ble.n	8014a84 <_dtoa_r+0x9ac>
 8014a74:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014a78:	d0ed      	beq.n	8014a56 <_dtoa_r+0x97e>
 8014a7a:	f10a 0301 	add.w	r3, sl, #1
 8014a7e:	f88b 3000 	strb.w	r3, [fp]
 8014a82:	e602      	b.n	801468a <_dtoa_r+0x5b2>
 8014a84:	9b05      	ldr	r3, [sp, #20]
 8014a86:	9a05      	ldr	r2, [sp, #20]
 8014a88:	f803 ac01 	strb.w	sl, [r3, #-1]
 8014a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a8e:	4293      	cmp	r3, r2
 8014a90:	d029      	beq.n	8014ae6 <_dtoa_r+0xa0e>
 8014a92:	9901      	ldr	r1, [sp, #4]
 8014a94:	2300      	movs	r3, #0
 8014a96:	220a      	movs	r2, #10
 8014a98:	4648      	mov	r0, r9
 8014a9a:	f000 f9d5 	bl	8014e48 <__multadd>
 8014a9e:	45a8      	cmp	r8, r5
 8014aa0:	9001      	str	r0, [sp, #4]
 8014aa2:	f04f 0300 	mov.w	r3, #0
 8014aa6:	f04f 020a 	mov.w	r2, #10
 8014aaa:	4641      	mov	r1, r8
 8014aac:	4648      	mov	r0, r9
 8014aae:	d107      	bne.n	8014ac0 <_dtoa_r+0x9e8>
 8014ab0:	f000 f9ca 	bl	8014e48 <__multadd>
 8014ab4:	4680      	mov	r8, r0
 8014ab6:	4605      	mov	r5, r0
 8014ab8:	9b05      	ldr	r3, [sp, #20]
 8014aba:	3301      	adds	r3, #1
 8014abc:	9305      	str	r3, [sp, #20]
 8014abe:	e775      	b.n	80149ac <_dtoa_r+0x8d4>
 8014ac0:	f000 f9c2 	bl	8014e48 <__multadd>
 8014ac4:	4629      	mov	r1, r5
 8014ac6:	4680      	mov	r8, r0
 8014ac8:	2300      	movs	r3, #0
 8014aca:	220a      	movs	r2, #10
 8014acc:	4648      	mov	r0, r9
 8014ace:	f000 f9bb 	bl	8014e48 <__multadd>
 8014ad2:	4605      	mov	r5, r0
 8014ad4:	e7f0      	b.n	8014ab8 <_dtoa_r+0x9e0>
 8014ad6:	f1bb 0f00 	cmp.w	fp, #0
 8014ada:	bfcc      	ite	gt
 8014adc:	465e      	movgt	r6, fp
 8014ade:	2601      	movle	r6, #1
 8014ae0:	443e      	add	r6, r7
 8014ae2:	f04f 0800 	mov.w	r8, #0
 8014ae6:	9901      	ldr	r1, [sp, #4]
 8014ae8:	2201      	movs	r2, #1
 8014aea:	4648      	mov	r0, r9
 8014aec:	f000 fb58 	bl	80151a0 <__lshift>
 8014af0:	4621      	mov	r1, r4
 8014af2:	9001      	str	r0, [sp, #4]
 8014af4:	f000 fbc0 	bl	8015278 <__mcmp>
 8014af8:	2800      	cmp	r0, #0
 8014afa:	dcaf      	bgt.n	8014a5c <_dtoa_r+0x984>
 8014afc:	d102      	bne.n	8014b04 <_dtoa_r+0xa2c>
 8014afe:	f01a 0f01 	tst.w	sl, #1
 8014b02:	d1ab      	bne.n	8014a5c <_dtoa_r+0x984>
 8014b04:	4633      	mov	r3, r6
 8014b06:	461e      	mov	r6, r3
 8014b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014b0c:	2a30      	cmp	r2, #48	@ 0x30
 8014b0e:	d0fa      	beq.n	8014b06 <_dtoa_r+0xa2e>
 8014b10:	e5bb      	b.n	801468a <_dtoa_r+0x5b2>
 8014b12:	429f      	cmp	r7, r3
 8014b14:	d1a3      	bne.n	8014a5e <_dtoa_r+0x986>
 8014b16:	9b04      	ldr	r3, [sp, #16]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	9304      	str	r3, [sp, #16]
 8014b1c:	2331      	movs	r3, #49	@ 0x31
 8014b1e:	703b      	strb	r3, [r7, #0]
 8014b20:	e5b3      	b.n	801468a <_dtoa_r+0x5b2>
 8014b22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014b24:	4f16      	ldr	r7, [pc, #88]	@ (8014b80 <_dtoa_r+0xaa8>)
 8014b26:	b11b      	cbz	r3, 8014b30 <_dtoa_r+0xa58>
 8014b28:	f107 0308 	add.w	r3, r7, #8
 8014b2c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014b2e:	6013      	str	r3, [r2, #0]
 8014b30:	4638      	mov	r0, r7
 8014b32:	b011      	add	sp, #68	@ 0x44
 8014b34:	ecbd 8b02 	vpop	{d8}
 8014b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b3c:	9b07      	ldr	r3, [sp, #28]
 8014b3e:	2b01      	cmp	r3, #1
 8014b40:	f77f ae36 	ble.w	80147b0 <_dtoa_r+0x6d8>
 8014b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014b48:	2001      	movs	r0, #1
 8014b4a:	e656      	b.n	80147fa <_dtoa_r+0x722>
 8014b4c:	f1bb 0f00 	cmp.w	fp, #0
 8014b50:	f77f aed7 	ble.w	8014902 <_dtoa_r+0x82a>
 8014b54:	463e      	mov	r6, r7
 8014b56:	9801      	ldr	r0, [sp, #4]
 8014b58:	4621      	mov	r1, r4
 8014b5a:	f7ff fa34 	bl	8013fc6 <quorem>
 8014b5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014b62:	f806 ab01 	strb.w	sl, [r6], #1
 8014b66:	1bf2      	subs	r2, r6, r7
 8014b68:	4593      	cmp	fp, r2
 8014b6a:	ddb4      	ble.n	8014ad6 <_dtoa_r+0x9fe>
 8014b6c:	9901      	ldr	r1, [sp, #4]
 8014b6e:	2300      	movs	r3, #0
 8014b70:	220a      	movs	r2, #10
 8014b72:	4648      	mov	r0, r9
 8014b74:	f000 f968 	bl	8014e48 <__multadd>
 8014b78:	9001      	str	r0, [sp, #4]
 8014b7a:	e7ec      	b.n	8014b56 <_dtoa_r+0xa7e>
 8014b7c:	08015d6c 	.word	0x08015d6c
 8014b80:	08015cf0 	.word	0x08015cf0

08014b84 <_free_r>:
 8014b84:	b538      	push	{r3, r4, r5, lr}
 8014b86:	4605      	mov	r5, r0
 8014b88:	2900      	cmp	r1, #0
 8014b8a:	d041      	beq.n	8014c10 <_free_r+0x8c>
 8014b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b90:	1f0c      	subs	r4, r1, #4
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	bfb8      	it	lt
 8014b96:	18e4      	addlt	r4, r4, r3
 8014b98:	f000 f8e8 	bl	8014d6c <__malloc_lock>
 8014b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8014c14 <_free_r+0x90>)
 8014b9e:	6813      	ldr	r3, [r2, #0]
 8014ba0:	b933      	cbnz	r3, 8014bb0 <_free_r+0x2c>
 8014ba2:	6063      	str	r3, [r4, #4]
 8014ba4:	6014      	str	r4, [r2, #0]
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bac:	f000 b8e4 	b.w	8014d78 <__malloc_unlock>
 8014bb0:	42a3      	cmp	r3, r4
 8014bb2:	d908      	bls.n	8014bc6 <_free_r+0x42>
 8014bb4:	6820      	ldr	r0, [r4, #0]
 8014bb6:	1821      	adds	r1, r4, r0
 8014bb8:	428b      	cmp	r3, r1
 8014bba:	bf01      	itttt	eq
 8014bbc:	6819      	ldreq	r1, [r3, #0]
 8014bbe:	685b      	ldreq	r3, [r3, #4]
 8014bc0:	1809      	addeq	r1, r1, r0
 8014bc2:	6021      	streq	r1, [r4, #0]
 8014bc4:	e7ed      	b.n	8014ba2 <_free_r+0x1e>
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	b10b      	cbz	r3, 8014bd0 <_free_r+0x4c>
 8014bcc:	42a3      	cmp	r3, r4
 8014bce:	d9fa      	bls.n	8014bc6 <_free_r+0x42>
 8014bd0:	6811      	ldr	r1, [r2, #0]
 8014bd2:	1850      	adds	r0, r2, r1
 8014bd4:	42a0      	cmp	r0, r4
 8014bd6:	d10b      	bne.n	8014bf0 <_free_r+0x6c>
 8014bd8:	6820      	ldr	r0, [r4, #0]
 8014bda:	4401      	add	r1, r0
 8014bdc:	1850      	adds	r0, r2, r1
 8014bde:	4283      	cmp	r3, r0
 8014be0:	6011      	str	r1, [r2, #0]
 8014be2:	d1e0      	bne.n	8014ba6 <_free_r+0x22>
 8014be4:	6818      	ldr	r0, [r3, #0]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	6053      	str	r3, [r2, #4]
 8014bea:	4408      	add	r0, r1
 8014bec:	6010      	str	r0, [r2, #0]
 8014bee:	e7da      	b.n	8014ba6 <_free_r+0x22>
 8014bf0:	d902      	bls.n	8014bf8 <_free_r+0x74>
 8014bf2:	230c      	movs	r3, #12
 8014bf4:	602b      	str	r3, [r5, #0]
 8014bf6:	e7d6      	b.n	8014ba6 <_free_r+0x22>
 8014bf8:	6820      	ldr	r0, [r4, #0]
 8014bfa:	1821      	adds	r1, r4, r0
 8014bfc:	428b      	cmp	r3, r1
 8014bfe:	bf04      	itt	eq
 8014c00:	6819      	ldreq	r1, [r3, #0]
 8014c02:	685b      	ldreq	r3, [r3, #4]
 8014c04:	6063      	str	r3, [r4, #4]
 8014c06:	bf04      	itt	eq
 8014c08:	1809      	addeq	r1, r1, r0
 8014c0a:	6021      	streq	r1, [r4, #0]
 8014c0c:	6054      	str	r4, [r2, #4]
 8014c0e:	e7ca      	b.n	8014ba6 <_free_r+0x22>
 8014c10:	bd38      	pop	{r3, r4, r5, pc}
 8014c12:	bf00      	nop
 8014c14:	24001648 	.word	0x24001648

08014c18 <malloc>:
 8014c18:	4b02      	ldr	r3, [pc, #8]	@ (8014c24 <malloc+0xc>)
 8014c1a:	4601      	mov	r1, r0
 8014c1c:	6818      	ldr	r0, [r3, #0]
 8014c1e:	f000 b825 	b.w	8014c6c <_malloc_r>
 8014c22:	bf00      	nop
 8014c24:	24000124 	.word	0x24000124

08014c28 <sbrk_aligned>:
 8014c28:	b570      	push	{r4, r5, r6, lr}
 8014c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8014c68 <sbrk_aligned+0x40>)
 8014c2c:	460c      	mov	r4, r1
 8014c2e:	6831      	ldr	r1, [r6, #0]
 8014c30:	4605      	mov	r5, r0
 8014c32:	b911      	cbnz	r1, 8014c3a <sbrk_aligned+0x12>
 8014c34:	f000 fe9a 	bl	801596c <_sbrk_r>
 8014c38:	6030      	str	r0, [r6, #0]
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	f000 fe95 	bl	801596c <_sbrk_r>
 8014c42:	1c43      	adds	r3, r0, #1
 8014c44:	d103      	bne.n	8014c4e <sbrk_aligned+0x26>
 8014c46:	f04f 34ff 	mov.w	r4, #4294967295
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	bd70      	pop	{r4, r5, r6, pc}
 8014c4e:	1cc4      	adds	r4, r0, #3
 8014c50:	f024 0403 	bic.w	r4, r4, #3
 8014c54:	42a0      	cmp	r0, r4
 8014c56:	d0f8      	beq.n	8014c4a <sbrk_aligned+0x22>
 8014c58:	1a21      	subs	r1, r4, r0
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	f000 fe86 	bl	801596c <_sbrk_r>
 8014c60:	3001      	adds	r0, #1
 8014c62:	d1f2      	bne.n	8014c4a <sbrk_aligned+0x22>
 8014c64:	e7ef      	b.n	8014c46 <sbrk_aligned+0x1e>
 8014c66:	bf00      	nop
 8014c68:	24001644 	.word	0x24001644

08014c6c <_malloc_r>:
 8014c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c70:	1ccd      	adds	r5, r1, #3
 8014c72:	f025 0503 	bic.w	r5, r5, #3
 8014c76:	3508      	adds	r5, #8
 8014c78:	2d0c      	cmp	r5, #12
 8014c7a:	bf38      	it	cc
 8014c7c:	250c      	movcc	r5, #12
 8014c7e:	2d00      	cmp	r5, #0
 8014c80:	4606      	mov	r6, r0
 8014c82:	db01      	blt.n	8014c88 <_malloc_r+0x1c>
 8014c84:	42a9      	cmp	r1, r5
 8014c86:	d904      	bls.n	8014c92 <_malloc_r+0x26>
 8014c88:	230c      	movs	r3, #12
 8014c8a:	6033      	str	r3, [r6, #0]
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014d68 <_malloc_r+0xfc>
 8014c96:	f000 f869 	bl	8014d6c <__malloc_lock>
 8014c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8014c9e:	461c      	mov	r4, r3
 8014ca0:	bb44      	cbnz	r4, 8014cf4 <_malloc_r+0x88>
 8014ca2:	4629      	mov	r1, r5
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	f7ff ffbf 	bl	8014c28 <sbrk_aligned>
 8014caa:	1c43      	adds	r3, r0, #1
 8014cac:	4604      	mov	r4, r0
 8014cae:	d158      	bne.n	8014d62 <_malloc_r+0xf6>
 8014cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8014cb4:	4627      	mov	r7, r4
 8014cb6:	2f00      	cmp	r7, #0
 8014cb8:	d143      	bne.n	8014d42 <_malloc_r+0xd6>
 8014cba:	2c00      	cmp	r4, #0
 8014cbc:	d04b      	beq.n	8014d56 <_malloc_r+0xea>
 8014cbe:	6823      	ldr	r3, [r4, #0]
 8014cc0:	4639      	mov	r1, r7
 8014cc2:	4630      	mov	r0, r6
 8014cc4:	eb04 0903 	add.w	r9, r4, r3
 8014cc8:	f000 fe50 	bl	801596c <_sbrk_r>
 8014ccc:	4581      	cmp	r9, r0
 8014cce:	d142      	bne.n	8014d56 <_malloc_r+0xea>
 8014cd0:	6821      	ldr	r1, [r4, #0]
 8014cd2:	1a6d      	subs	r5, r5, r1
 8014cd4:	4629      	mov	r1, r5
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	f7ff ffa6 	bl	8014c28 <sbrk_aligned>
 8014cdc:	3001      	adds	r0, #1
 8014cde:	d03a      	beq.n	8014d56 <_malloc_r+0xea>
 8014ce0:	6823      	ldr	r3, [r4, #0]
 8014ce2:	442b      	add	r3, r5
 8014ce4:	6023      	str	r3, [r4, #0]
 8014ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8014cea:	685a      	ldr	r2, [r3, #4]
 8014cec:	bb62      	cbnz	r2, 8014d48 <_malloc_r+0xdc>
 8014cee:	f8c8 7000 	str.w	r7, [r8]
 8014cf2:	e00f      	b.n	8014d14 <_malloc_r+0xa8>
 8014cf4:	6822      	ldr	r2, [r4, #0]
 8014cf6:	1b52      	subs	r2, r2, r5
 8014cf8:	d420      	bmi.n	8014d3c <_malloc_r+0xd0>
 8014cfa:	2a0b      	cmp	r2, #11
 8014cfc:	d917      	bls.n	8014d2e <_malloc_r+0xc2>
 8014cfe:	1961      	adds	r1, r4, r5
 8014d00:	42a3      	cmp	r3, r4
 8014d02:	6025      	str	r5, [r4, #0]
 8014d04:	bf18      	it	ne
 8014d06:	6059      	strne	r1, [r3, #4]
 8014d08:	6863      	ldr	r3, [r4, #4]
 8014d0a:	bf08      	it	eq
 8014d0c:	f8c8 1000 	streq.w	r1, [r8]
 8014d10:	5162      	str	r2, [r4, r5]
 8014d12:	604b      	str	r3, [r1, #4]
 8014d14:	4630      	mov	r0, r6
 8014d16:	f000 f82f 	bl	8014d78 <__malloc_unlock>
 8014d1a:	f104 000b 	add.w	r0, r4, #11
 8014d1e:	1d23      	adds	r3, r4, #4
 8014d20:	f020 0007 	bic.w	r0, r0, #7
 8014d24:	1ac2      	subs	r2, r0, r3
 8014d26:	bf1c      	itt	ne
 8014d28:	1a1b      	subne	r3, r3, r0
 8014d2a:	50a3      	strne	r3, [r4, r2]
 8014d2c:	e7af      	b.n	8014c8e <_malloc_r+0x22>
 8014d2e:	6862      	ldr	r2, [r4, #4]
 8014d30:	42a3      	cmp	r3, r4
 8014d32:	bf0c      	ite	eq
 8014d34:	f8c8 2000 	streq.w	r2, [r8]
 8014d38:	605a      	strne	r2, [r3, #4]
 8014d3a:	e7eb      	b.n	8014d14 <_malloc_r+0xa8>
 8014d3c:	4623      	mov	r3, r4
 8014d3e:	6864      	ldr	r4, [r4, #4]
 8014d40:	e7ae      	b.n	8014ca0 <_malloc_r+0x34>
 8014d42:	463c      	mov	r4, r7
 8014d44:	687f      	ldr	r7, [r7, #4]
 8014d46:	e7b6      	b.n	8014cb6 <_malloc_r+0x4a>
 8014d48:	461a      	mov	r2, r3
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	42a3      	cmp	r3, r4
 8014d4e:	d1fb      	bne.n	8014d48 <_malloc_r+0xdc>
 8014d50:	2300      	movs	r3, #0
 8014d52:	6053      	str	r3, [r2, #4]
 8014d54:	e7de      	b.n	8014d14 <_malloc_r+0xa8>
 8014d56:	230c      	movs	r3, #12
 8014d58:	6033      	str	r3, [r6, #0]
 8014d5a:	4630      	mov	r0, r6
 8014d5c:	f000 f80c 	bl	8014d78 <__malloc_unlock>
 8014d60:	e794      	b.n	8014c8c <_malloc_r+0x20>
 8014d62:	6005      	str	r5, [r0, #0]
 8014d64:	e7d6      	b.n	8014d14 <_malloc_r+0xa8>
 8014d66:	bf00      	nop
 8014d68:	24001648 	.word	0x24001648

08014d6c <__malloc_lock>:
 8014d6c:	4801      	ldr	r0, [pc, #4]	@ (8014d74 <__malloc_lock+0x8>)
 8014d6e:	f7ff b91a 	b.w	8013fa6 <__retarget_lock_acquire_recursive>
 8014d72:	bf00      	nop
 8014d74:	24001640 	.word	0x24001640

08014d78 <__malloc_unlock>:
 8014d78:	4801      	ldr	r0, [pc, #4]	@ (8014d80 <__malloc_unlock+0x8>)
 8014d7a:	f7ff b915 	b.w	8013fa8 <__retarget_lock_release_recursive>
 8014d7e:	bf00      	nop
 8014d80:	24001640 	.word	0x24001640

08014d84 <_Balloc>:
 8014d84:	b570      	push	{r4, r5, r6, lr}
 8014d86:	69c6      	ldr	r6, [r0, #28]
 8014d88:	4604      	mov	r4, r0
 8014d8a:	460d      	mov	r5, r1
 8014d8c:	b976      	cbnz	r6, 8014dac <_Balloc+0x28>
 8014d8e:	2010      	movs	r0, #16
 8014d90:	f7ff ff42 	bl	8014c18 <malloc>
 8014d94:	4602      	mov	r2, r0
 8014d96:	61e0      	str	r0, [r4, #28]
 8014d98:	b920      	cbnz	r0, 8014da4 <_Balloc+0x20>
 8014d9a:	4b18      	ldr	r3, [pc, #96]	@ (8014dfc <_Balloc+0x78>)
 8014d9c:	4818      	ldr	r0, [pc, #96]	@ (8014e00 <_Balloc+0x7c>)
 8014d9e:	216b      	movs	r1, #107	@ 0x6b
 8014da0:	f000 fdf4 	bl	801598c <__assert_func>
 8014da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014da8:	6006      	str	r6, [r0, #0]
 8014daa:	60c6      	str	r6, [r0, #12]
 8014dac:	69e6      	ldr	r6, [r4, #28]
 8014dae:	68f3      	ldr	r3, [r6, #12]
 8014db0:	b183      	cbz	r3, 8014dd4 <_Balloc+0x50>
 8014db2:	69e3      	ldr	r3, [r4, #28]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014dba:	b9b8      	cbnz	r0, 8014dec <_Balloc+0x68>
 8014dbc:	2101      	movs	r1, #1
 8014dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8014dc2:	1d72      	adds	r2, r6, #5
 8014dc4:	0092      	lsls	r2, r2, #2
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	f000 fdfe 	bl	80159c8 <_calloc_r>
 8014dcc:	b160      	cbz	r0, 8014de8 <_Balloc+0x64>
 8014dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014dd2:	e00e      	b.n	8014df2 <_Balloc+0x6e>
 8014dd4:	2221      	movs	r2, #33	@ 0x21
 8014dd6:	2104      	movs	r1, #4
 8014dd8:	4620      	mov	r0, r4
 8014dda:	f000 fdf5 	bl	80159c8 <_calloc_r>
 8014dde:	69e3      	ldr	r3, [r4, #28]
 8014de0:	60f0      	str	r0, [r6, #12]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d1e4      	bne.n	8014db2 <_Balloc+0x2e>
 8014de8:	2000      	movs	r0, #0
 8014dea:	bd70      	pop	{r4, r5, r6, pc}
 8014dec:	6802      	ldr	r2, [r0, #0]
 8014dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014df2:	2300      	movs	r3, #0
 8014df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014df8:	e7f7      	b.n	8014dea <_Balloc+0x66>
 8014dfa:	bf00      	nop
 8014dfc:	08015cfd 	.word	0x08015cfd
 8014e00:	08015d7d 	.word	0x08015d7d

08014e04 <_Bfree>:
 8014e04:	b570      	push	{r4, r5, r6, lr}
 8014e06:	69c6      	ldr	r6, [r0, #28]
 8014e08:	4605      	mov	r5, r0
 8014e0a:	460c      	mov	r4, r1
 8014e0c:	b976      	cbnz	r6, 8014e2c <_Bfree+0x28>
 8014e0e:	2010      	movs	r0, #16
 8014e10:	f7ff ff02 	bl	8014c18 <malloc>
 8014e14:	4602      	mov	r2, r0
 8014e16:	61e8      	str	r0, [r5, #28]
 8014e18:	b920      	cbnz	r0, 8014e24 <_Bfree+0x20>
 8014e1a:	4b09      	ldr	r3, [pc, #36]	@ (8014e40 <_Bfree+0x3c>)
 8014e1c:	4809      	ldr	r0, [pc, #36]	@ (8014e44 <_Bfree+0x40>)
 8014e1e:	218f      	movs	r1, #143	@ 0x8f
 8014e20:	f000 fdb4 	bl	801598c <__assert_func>
 8014e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014e28:	6006      	str	r6, [r0, #0]
 8014e2a:	60c6      	str	r6, [r0, #12]
 8014e2c:	b13c      	cbz	r4, 8014e3e <_Bfree+0x3a>
 8014e2e:	69eb      	ldr	r3, [r5, #28]
 8014e30:	6862      	ldr	r2, [r4, #4]
 8014e32:	68db      	ldr	r3, [r3, #12]
 8014e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014e38:	6021      	str	r1, [r4, #0]
 8014e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014e3e:	bd70      	pop	{r4, r5, r6, pc}
 8014e40:	08015cfd 	.word	0x08015cfd
 8014e44:	08015d7d 	.word	0x08015d7d

08014e48 <__multadd>:
 8014e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e4c:	690d      	ldr	r5, [r1, #16]
 8014e4e:	4607      	mov	r7, r0
 8014e50:	460c      	mov	r4, r1
 8014e52:	461e      	mov	r6, r3
 8014e54:	f101 0c14 	add.w	ip, r1, #20
 8014e58:	2000      	movs	r0, #0
 8014e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8014e5e:	b299      	uxth	r1, r3
 8014e60:	fb02 6101 	mla	r1, r2, r1, r6
 8014e64:	0c1e      	lsrs	r6, r3, #16
 8014e66:	0c0b      	lsrs	r3, r1, #16
 8014e68:	fb02 3306 	mla	r3, r2, r6, r3
 8014e6c:	b289      	uxth	r1, r1
 8014e6e:	3001      	adds	r0, #1
 8014e70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014e74:	4285      	cmp	r5, r0
 8014e76:	f84c 1b04 	str.w	r1, [ip], #4
 8014e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014e7e:	dcec      	bgt.n	8014e5a <__multadd+0x12>
 8014e80:	b30e      	cbz	r6, 8014ec6 <__multadd+0x7e>
 8014e82:	68a3      	ldr	r3, [r4, #8]
 8014e84:	42ab      	cmp	r3, r5
 8014e86:	dc19      	bgt.n	8014ebc <__multadd+0x74>
 8014e88:	6861      	ldr	r1, [r4, #4]
 8014e8a:	4638      	mov	r0, r7
 8014e8c:	3101      	adds	r1, #1
 8014e8e:	f7ff ff79 	bl	8014d84 <_Balloc>
 8014e92:	4680      	mov	r8, r0
 8014e94:	b928      	cbnz	r0, 8014ea2 <__multadd+0x5a>
 8014e96:	4602      	mov	r2, r0
 8014e98:	4b0c      	ldr	r3, [pc, #48]	@ (8014ecc <__multadd+0x84>)
 8014e9a:	480d      	ldr	r0, [pc, #52]	@ (8014ed0 <__multadd+0x88>)
 8014e9c:	21ba      	movs	r1, #186	@ 0xba
 8014e9e:	f000 fd75 	bl	801598c <__assert_func>
 8014ea2:	6922      	ldr	r2, [r4, #16]
 8014ea4:	3202      	adds	r2, #2
 8014ea6:	f104 010c 	add.w	r1, r4, #12
 8014eaa:	0092      	lsls	r2, r2, #2
 8014eac:	300c      	adds	r0, #12
 8014eae:	f7ff f87c 	bl	8013faa <memcpy>
 8014eb2:	4621      	mov	r1, r4
 8014eb4:	4638      	mov	r0, r7
 8014eb6:	f7ff ffa5 	bl	8014e04 <_Bfree>
 8014eba:	4644      	mov	r4, r8
 8014ebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014ec0:	3501      	adds	r5, #1
 8014ec2:	615e      	str	r6, [r3, #20]
 8014ec4:	6125      	str	r5, [r4, #16]
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ecc:	08015d6c 	.word	0x08015d6c
 8014ed0:	08015d7d 	.word	0x08015d7d

08014ed4 <__hi0bits>:
 8014ed4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014ed8:	4603      	mov	r3, r0
 8014eda:	bf36      	itet	cc
 8014edc:	0403      	lslcc	r3, r0, #16
 8014ede:	2000      	movcs	r0, #0
 8014ee0:	2010      	movcc	r0, #16
 8014ee2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014ee6:	bf3c      	itt	cc
 8014ee8:	021b      	lslcc	r3, r3, #8
 8014eea:	3008      	addcc	r0, #8
 8014eec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014ef0:	bf3c      	itt	cc
 8014ef2:	011b      	lslcc	r3, r3, #4
 8014ef4:	3004      	addcc	r0, #4
 8014ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014efa:	bf3c      	itt	cc
 8014efc:	009b      	lslcc	r3, r3, #2
 8014efe:	3002      	addcc	r0, #2
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	db05      	blt.n	8014f10 <__hi0bits+0x3c>
 8014f04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014f08:	f100 0001 	add.w	r0, r0, #1
 8014f0c:	bf08      	it	eq
 8014f0e:	2020      	moveq	r0, #32
 8014f10:	4770      	bx	lr

08014f12 <__lo0bits>:
 8014f12:	6803      	ldr	r3, [r0, #0]
 8014f14:	4602      	mov	r2, r0
 8014f16:	f013 0007 	ands.w	r0, r3, #7
 8014f1a:	d00b      	beq.n	8014f34 <__lo0bits+0x22>
 8014f1c:	07d9      	lsls	r1, r3, #31
 8014f1e:	d421      	bmi.n	8014f64 <__lo0bits+0x52>
 8014f20:	0798      	lsls	r0, r3, #30
 8014f22:	bf49      	itett	mi
 8014f24:	085b      	lsrmi	r3, r3, #1
 8014f26:	089b      	lsrpl	r3, r3, #2
 8014f28:	2001      	movmi	r0, #1
 8014f2a:	6013      	strmi	r3, [r2, #0]
 8014f2c:	bf5c      	itt	pl
 8014f2e:	6013      	strpl	r3, [r2, #0]
 8014f30:	2002      	movpl	r0, #2
 8014f32:	4770      	bx	lr
 8014f34:	b299      	uxth	r1, r3
 8014f36:	b909      	cbnz	r1, 8014f3c <__lo0bits+0x2a>
 8014f38:	0c1b      	lsrs	r3, r3, #16
 8014f3a:	2010      	movs	r0, #16
 8014f3c:	b2d9      	uxtb	r1, r3
 8014f3e:	b909      	cbnz	r1, 8014f44 <__lo0bits+0x32>
 8014f40:	3008      	adds	r0, #8
 8014f42:	0a1b      	lsrs	r3, r3, #8
 8014f44:	0719      	lsls	r1, r3, #28
 8014f46:	bf04      	itt	eq
 8014f48:	091b      	lsreq	r3, r3, #4
 8014f4a:	3004      	addeq	r0, #4
 8014f4c:	0799      	lsls	r1, r3, #30
 8014f4e:	bf04      	itt	eq
 8014f50:	089b      	lsreq	r3, r3, #2
 8014f52:	3002      	addeq	r0, #2
 8014f54:	07d9      	lsls	r1, r3, #31
 8014f56:	d403      	bmi.n	8014f60 <__lo0bits+0x4e>
 8014f58:	085b      	lsrs	r3, r3, #1
 8014f5a:	f100 0001 	add.w	r0, r0, #1
 8014f5e:	d003      	beq.n	8014f68 <__lo0bits+0x56>
 8014f60:	6013      	str	r3, [r2, #0]
 8014f62:	4770      	bx	lr
 8014f64:	2000      	movs	r0, #0
 8014f66:	4770      	bx	lr
 8014f68:	2020      	movs	r0, #32
 8014f6a:	4770      	bx	lr

08014f6c <__i2b>:
 8014f6c:	b510      	push	{r4, lr}
 8014f6e:	460c      	mov	r4, r1
 8014f70:	2101      	movs	r1, #1
 8014f72:	f7ff ff07 	bl	8014d84 <_Balloc>
 8014f76:	4602      	mov	r2, r0
 8014f78:	b928      	cbnz	r0, 8014f86 <__i2b+0x1a>
 8014f7a:	4b05      	ldr	r3, [pc, #20]	@ (8014f90 <__i2b+0x24>)
 8014f7c:	4805      	ldr	r0, [pc, #20]	@ (8014f94 <__i2b+0x28>)
 8014f7e:	f240 1145 	movw	r1, #325	@ 0x145
 8014f82:	f000 fd03 	bl	801598c <__assert_func>
 8014f86:	2301      	movs	r3, #1
 8014f88:	6144      	str	r4, [r0, #20]
 8014f8a:	6103      	str	r3, [r0, #16]
 8014f8c:	bd10      	pop	{r4, pc}
 8014f8e:	bf00      	nop
 8014f90:	08015d6c 	.word	0x08015d6c
 8014f94:	08015d7d 	.word	0x08015d7d

08014f98 <__multiply>:
 8014f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f9c:	4614      	mov	r4, r2
 8014f9e:	690a      	ldr	r2, [r1, #16]
 8014fa0:	6923      	ldr	r3, [r4, #16]
 8014fa2:	429a      	cmp	r2, r3
 8014fa4:	bfa8      	it	ge
 8014fa6:	4623      	movge	r3, r4
 8014fa8:	460f      	mov	r7, r1
 8014faa:	bfa4      	itt	ge
 8014fac:	460c      	movge	r4, r1
 8014fae:	461f      	movge	r7, r3
 8014fb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014fb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014fb8:	68a3      	ldr	r3, [r4, #8]
 8014fba:	6861      	ldr	r1, [r4, #4]
 8014fbc:	eb0a 0609 	add.w	r6, sl, r9
 8014fc0:	42b3      	cmp	r3, r6
 8014fc2:	b085      	sub	sp, #20
 8014fc4:	bfb8      	it	lt
 8014fc6:	3101      	addlt	r1, #1
 8014fc8:	f7ff fedc 	bl	8014d84 <_Balloc>
 8014fcc:	b930      	cbnz	r0, 8014fdc <__multiply+0x44>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	4b44      	ldr	r3, [pc, #272]	@ (80150e4 <__multiply+0x14c>)
 8014fd2:	4845      	ldr	r0, [pc, #276]	@ (80150e8 <__multiply+0x150>)
 8014fd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014fd8:	f000 fcd8 	bl	801598c <__assert_func>
 8014fdc:	f100 0514 	add.w	r5, r0, #20
 8014fe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014fe4:	462b      	mov	r3, r5
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	4543      	cmp	r3, r8
 8014fea:	d321      	bcc.n	8015030 <__multiply+0x98>
 8014fec:	f107 0114 	add.w	r1, r7, #20
 8014ff0:	f104 0214 	add.w	r2, r4, #20
 8014ff4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014ff8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014ffc:	9302      	str	r3, [sp, #8]
 8014ffe:	1b13      	subs	r3, r2, r4
 8015000:	3b15      	subs	r3, #21
 8015002:	f023 0303 	bic.w	r3, r3, #3
 8015006:	3304      	adds	r3, #4
 8015008:	f104 0715 	add.w	r7, r4, #21
 801500c:	42ba      	cmp	r2, r7
 801500e:	bf38      	it	cc
 8015010:	2304      	movcc	r3, #4
 8015012:	9301      	str	r3, [sp, #4]
 8015014:	9b02      	ldr	r3, [sp, #8]
 8015016:	9103      	str	r1, [sp, #12]
 8015018:	428b      	cmp	r3, r1
 801501a:	d80c      	bhi.n	8015036 <__multiply+0x9e>
 801501c:	2e00      	cmp	r6, #0
 801501e:	dd03      	ble.n	8015028 <__multiply+0x90>
 8015020:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015024:	2b00      	cmp	r3, #0
 8015026:	d05b      	beq.n	80150e0 <__multiply+0x148>
 8015028:	6106      	str	r6, [r0, #16]
 801502a:	b005      	add	sp, #20
 801502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015030:	f843 2b04 	str.w	r2, [r3], #4
 8015034:	e7d8      	b.n	8014fe8 <__multiply+0x50>
 8015036:	f8b1 a000 	ldrh.w	sl, [r1]
 801503a:	f1ba 0f00 	cmp.w	sl, #0
 801503e:	d024      	beq.n	801508a <__multiply+0xf2>
 8015040:	f104 0e14 	add.w	lr, r4, #20
 8015044:	46a9      	mov	r9, r5
 8015046:	f04f 0c00 	mov.w	ip, #0
 801504a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801504e:	f8d9 3000 	ldr.w	r3, [r9]
 8015052:	fa1f fb87 	uxth.w	fp, r7
 8015056:	b29b      	uxth	r3, r3
 8015058:	fb0a 330b 	mla	r3, sl, fp, r3
 801505c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015060:	f8d9 7000 	ldr.w	r7, [r9]
 8015064:	4463      	add	r3, ip
 8015066:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801506a:	fb0a c70b 	mla	r7, sl, fp, ip
 801506e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015072:	b29b      	uxth	r3, r3
 8015074:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015078:	4572      	cmp	r2, lr
 801507a:	f849 3b04 	str.w	r3, [r9], #4
 801507e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015082:	d8e2      	bhi.n	801504a <__multiply+0xb2>
 8015084:	9b01      	ldr	r3, [sp, #4]
 8015086:	f845 c003 	str.w	ip, [r5, r3]
 801508a:	9b03      	ldr	r3, [sp, #12]
 801508c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015090:	3104      	adds	r1, #4
 8015092:	f1b9 0f00 	cmp.w	r9, #0
 8015096:	d021      	beq.n	80150dc <__multiply+0x144>
 8015098:	682b      	ldr	r3, [r5, #0]
 801509a:	f104 0c14 	add.w	ip, r4, #20
 801509e:	46ae      	mov	lr, r5
 80150a0:	f04f 0a00 	mov.w	sl, #0
 80150a4:	f8bc b000 	ldrh.w	fp, [ip]
 80150a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80150ac:	fb09 770b 	mla	r7, r9, fp, r7
 80150b0:	4457      	add	r7, sl
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80150b8:	f84e 3b04 	str.w	r3, [lr], #4
 80150bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80150c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80150c4:	f8be 3000 	ldrh.w	r3, [lr]
 80150c8:	fb09 330a 	mla	r3, r9, sl, r3
 80150cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80150d0:	4562      	cmp	r2, ip
 80150d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80150d6:	d8e5      	bhi.n	80150a4 <__multiply+0x10c>
 80150d8:	9f01      	ldr	r7, [sp, #4]
 80150da:	51eb      	str	r3, [r5, r7]
 80150dc:	3504      	adds	r5, #4
 80150de:	e799      	b.n	8015014 <__multiply+0x7c>
 80150e0:	3e01      	subs	r6, #1
 80150e2:	e79b      	b.n	801501c <__multiply+0x84>
 80150e4:	08015d6c 	.word	0x08015d6c
 80150e8:	08015d7d 	.word	0x08015d7d

080150ec <__pow5mult>:
 80150ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150f0:	4615      	mov	r5, r2
 80150f2:	f012 0203 	ands.w	r2, r2, #3
 80150f6:	4607      	mov	r7, r0
 80150f8:	460e      	mov	r6, r1
 80150fa:	d007      	beq.n	801510c <__pow5mult+0x20>
 80150fc:	4c25      	ldr	r4, [pc, #148]	@ (8015194 <__pow5mult+0xa8>)
 80150fe:	3a01      	subs	r2, #1
 8015100:	2300      	movs	r3, #0
 8015102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015106:	f7ff fe9f 	bl	8014e48 <__multadd>
 801510a:	4606      	mov	r6, r0
 801510c:	10ad      	asrs	r5, r5, #2
 801510e:	d03d      	beq.n	801518c <__pow5mult+0xa0>
 8015110:	69fc      	ldr	r4, [r7, #28]
 8015112:	b97c      	cbnz	r4, 8015134 <__pow5mult+0x48>
 8015114:	2010      	movs	r0, #16
 8015116:	f7ff fd7f 	bl	8014c18 <malloc>
 801511a:	4602      	mov	r2, r0
 801511c:	61f8      	str	r0, [r7, #28]
 801511e:	b928      	cbnz	r0, 801512c <__pow5mult+0x40>
 8015120:	4b1d      	ldr	r3, [pc, #116]	@ (8015198 <__pow5mult+0xac>)
 8015122:	481e      	ldr	r0, [pc, #120]	@ (801519c <__pow5mult+0xb0>)
 8015124:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015128:	f000 fc30 	bl	801598c <__assert_func>
 801512c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015130:	6004      	str	r4, [r0, #0]
 8015132:	60c4      	str	r4, [r0, #12]
 8015134:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015138:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801513c:	b94c      	cbnz	r4, 8015152 <__pow5mult+0x66>
 801513e:	f240 2171 	movw	r1, #625	@ 0x271
 8015142:	4638      	mov	r0, r7
 8015144:	f7ff ff12 	bl	8014f6c <__i2b>
 8015148:	2300      	movs	r3, #0
 801514a:	f8c8 0008 	str.w	r0, [r8, #8]
 801514e:	4604      	mov	r4, r0
 8015150:	6003      	str	r3, [r0, #0]
 8015152:	f04f 0900 	mov.w	r9, #0
 8015156:	07eb      	lsls	r3, r5, #31
 8015158:	d50a      	bpl.n	8015170 <__pow5mult+0x84>
 801515a:	4631      	mov	r1, r6
 801515c:	4622      	mov	r2, r4
 801515e:	4638      	mov	r0, r7
 8015160:	f7ff ff1a 	bl	8014f98 <__multiply>
 8015164:	4631      	mov	r1, r6
 8015166:	4680      	mov	r8, r0
 8015168:	4638      	mov	r0, r7
 801516a:	f7ff fe4b 	bl	8014e04 <_Bfree>
 801516e:	4646      	mov	r6, r8
 8015170:	106d      	asrs	r5, r5, #1
 8015172:	d00b      	beq.n	801518c <__pow5mult+0xa0>
 8015174:	6820      	ldr	r0, [r4, #0]
 8015176:	b938      	cbnz	r0, 8015188 <__pow5mult+0x9c>
 8015178:	4622      	mov	r2, r4
 801517a:	4621      	mov	r1, r4
 801517c:	4638      	mov	r0, r7
 801517e:	f7ff ff0b 	bl	8014f98 <__multiply>
 8015182:	6020      	str	r0, [r4, #0]
 8015184:	f8c0 9000 	str.w	r9, [r0]
 8015188:	4604      	mov	r4, r0
 801518a:	e7e4      	b.n	8015156 <__pow5mult+0x6a>
 801518c:	4630      	mov	r0, r6
 801518e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015192:	bf00      	nop
 8015194:	08015dd8 	.word	0x08015dd8
 8015198:	08015cfd 	.word	0x08015cfd
 801519c:	08015d7d 	.word	0x08015d7d

080151a0 <__lshift>:
 80151a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151a4:	460c      	mov	r4, r1
 80151a6:	6849      	ldr	r1, [r1, #4]
 80151a8:	6923      	ldr	r3, [r4, #16]
 80151aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80151ae:	68a3      	ldr	r3, [r4, #8]
 80151b0:	4607      	mov	r7, r0
 80151b2:	4691      	mov	r9, r2
 80151b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80151b8:	f108 0601 	add.w	r6, r8, #1
 80151bc:	42b3      	cmp	r3, r6
 80151be:	db0b      	blt.n	80151d8 <__lshift+0x38>
 80151c0:	4638      	mov	r0, r7
 80151c2:	f7ff fddf 	bl	8014d84 <_Balloc>
 80151c6:	4605      	mov	r5, r0
 80151c8:	b948      	cbnz	r0, 80151de <__lshift+0x3e>
 80151ca:	4602      	mov	r2, r0
 80151cc:	4b28      	ldr	r3, [pc, #160]	@ (8015270 <__lshift+0xd0>)
 80151ce:	4829      	ldr	r0, [pc, #164]	@ (8015274 <__lshift+0xd4>)
 80151d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80151d4:	f000 fbda 	bl	801598c <__assert_func>
 80151d8:	3101      	adds	r1, #1
 80151da:	005b      	lsls	r3, r3, #1
 80151dc:	e7ee      	b.n	80151bc <__lshift+0x1c>
 80151de:	2300      	movs	r3, #0
 80151e0:	f100 0114 	add.w	r1, r0, #20
 80151e4:	f100 0210 	add.w	r2, r0, #16
 80151e8:	4618      	mov	r0, r3
 80151ea:	4553      	cmp	r3, sl
 80151ec:	db33      	blt.n	8015256 <__lshift+0xb6>
 80151ee:	6920      	ldr	r0, [r4, #16]
 80151f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80151f4:	f104 0314 	add.w	r3, r4, #20
 80151f8:	f019 091f 	ands.w	r9, r9, #31
 80151fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015200:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015204:	d02b      	beq.n	801525e <__lshift+0xbe>
 8015206:	f1c9 0e20 	rsb	lr, r9, #32
 801520a:	468a      	mov	sl, r1
 801520c:	2200      	movs	r2, #0
 801520e:	6818      	ldr	r0, [r3, #0]
 8015210:	fa00 f009 	lsl.w	r0, r0, r9
 8015214:	4310      	orrs	r0, r2
 8015216:	f84a 0b04 	str.w	r0, [sl], #4
 801521a:	f853 2b04 	ldr.w	r2, [r3], #4
 801521e:	459c      	cmp	ip, r3
 8015220:	fa22 f20e 	lsr.w	r2, r2, lr
 8015224:	d8f3      	bhi.n	801520e <__lshift+0x6e>
 8015226:	ebac 0304 	sub.w	r3, ip, r4
 801522a:	3b15      	subs	r3, #21
 801522c:	f023 0303 	bic.w	r3, r3, #3
 8015230:	3304      	adds	r3, #4
 8015232:	f104 0015 	add.w	r0, r4, #21
 8015236:	4584      	cmp	ip, r0
 8015238:	bf38      	it	cc
 801523a:	2304      	movcc	r3, #4
 801523c:	50ca      	str	r2, [r1, r3]
 801523e:	b10a      	cbz	r2, 8015244 <__lshift+0xa4>
 8015240:	f108 0602 	add.w	r6, r8, #2
 8015244:	3e01      	subs	r6, #1
 8015246:	4638      	mov	r0, r7
 8015248:	612e      	str	r6, [r5, #16]
 801524a:	4621      	mov	r1, r4
 801524c:	f7ff fdda 	bl	8014e04 <_Bfree>
 8015250:	4628      	mov	r0, r5
 8015252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015256:	f842 0f04 	str.w	r0, [r2, #4]!
 801525a:	3301      	adds	r3, #1
 801525c:	e7c5      	b.n	80151ea <__lshift+0x4a>
 801525e:	3904      	subs	r1, #4
 8015260:	f853 2b04 	ldr.w	r2, [r3], #4
 8015264:	f841 2f04 	str.w	r2, [r1, #4]!
 8015268:	459c      	cmp	ip, r3
 801526a:	d8f9      	bhi.n	8015260 <__lshift+0xc0>
 801526c:	e7ea      	b.n	8015244 <__lshift+0xa4>
 801526e:	bf00      	nop
 8015270:	08015d6c 	.word	0x08015d6c
 8015274:	08015d7d 	.word	0x08015d7d

08015278 <__mcmp>:
 8015278:	690a      	ldr	r2, [r1, #16]
 801527a:	4603      	mov	r3, r0
 801527c:	6900      	ldr	r0, [r0, #16]
 801527e:	1a80      	subs	r0, r0, r2
 8015280:	b530      	push	{r4, r5, lr}
 8015282:	d10e      	bne.n	80152a2 <__mcmp+0x2a>
 8015284:	3314      	adds	r3, #20
 8015286:	3114      	adds	r1, #20
 8015288:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801528c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015290:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015294:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015298:	4295      	cmp	r5, r2
 801529a:	d003      	beq.n	80152a4 <__mcmp+0x2c>
 801529c:	d205      	bcs.n	80152aa <__mcmp+0x32>
 801529e:	f04f 30ff 	mov.w	r0, #4294967295
 80152a2:	bd30      	pop	{r4, r5, pc}
 80152a4:	42a3      	cmp	r3, r4
 80152a6:	d3f3      	bcc.n	8015290 <__mcmp+0x18>
 80152a8:	e7fb      	b.n	80152a2 <__mcmp+0x2a>
 80152aa:	2001      	movs	r0, #1
 80152ac:	e7f9      	b.n	80152a2 <__mcmp+0x2a>
	...

080152b0 <__mdiff>:
 80152b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152b4:	4689      	mov	r9, r1
 80152b6:	4606      	mov	r6, r0
 80152b8:	4611      	mov	r1, r2
 80152ba:	4648      	mov	r0, r9
 80152bc:	4614      	mov	r4, r2
 80152be:	f7ff ffdb 	bl	8015278 <__mcmp>
 80152c2:	1e05      	subs	r5, r0, #0
 80152c4:	d112      	bne.n	80152ec <__mdiff+0x3c>
 80152c6:	4629      	mov	r1, r5
 80152c8:	4630      	mov	r0, r6
 80152ca:	f7ff fd5b 	bl	8014d84 <_Balloc>
 80152ce:	4602      	mov	r2, r0
 80152d0:	b928      	cbnz	r0, 80152de <__mdiff+0x2e>
 80152d2:	4b3f      	ldr	r3, [pc, #252]	@ (80153d0 <__mdiff+0x120>)
 80152d4:	f240 2137 	movw	r1, #567	@ 0x237
 80152d8:	483e      	ldr	r0, [pc, #248]	@ (80153d4 <__mdiff+0x124>)
 80152da:	f000 fb57 	bl	801598c <__assert_func>
 80152de:	2301      	movs	r3, #1
 80152e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80152e4:	4610      	mov	r0, r2
 80152e6:	b003      	add	sp, #12
 80152e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ec:	bfbc      	itt	lt
 80152ee:	464b      	movlt	r3, r9
 80152f0:	46a1      	movlt	r9, r4
 80152f2:	4630      	mov	r0, r6
 80152f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80152f8:	bfba      	itte	lt
 80152fa:	461c      	movlt	r4, r3
 80152fc:	2501      	movlt	r5, #1
 80152fe:	2500      	movge	r5, #0
 8015300:	f7ff fd40 	bl	8014d84 <_Balloc>
 8015304:	4602      	mov	r2, r0
 8015306:	b918      	cbnz	r0, 8015310 <__mdiff+0x60>
 8015308:	4b31      	ldr	r3, [pc, #196]	@ (80153d0 <__mdiff+0x120>)
 801530a:	f240 2145 	movw	r1, #581	@ 0x245
 801530e:	e7e3      	b.n	80152d8 <__mdiff+0x28>
 8015310:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015314:	6926      	ldr	r6, [r4, #16]
 8015316:	60c5      	str	r5, [r0, #12]
 8015318:	f109 0310 	add.w	r3, r9, #16
 801531c:	f109 0514 	add.w	r5, r9, #20
 8015320:	f104 0e14 	add.w	lr, r4, #20
 8015324:	f100 0b14 	add.w	fp, r0, #20
 8015328:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801532c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015330:	9301      	str	r3, [sp, #4]
 8015332:	46d9      	mov	r9, fp
 8015334:	f04f 0c00 	mov.w	ip, #0
 8015338:	9b01      	ldr	r3, [sp, #4]
 801533a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801533e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015342:	9301      	str	r3, [sp, #4]
 8015344:	fa1f f38a 	uxth.w	r3, sl
 8015348:	4619      	mov	r1, r3
 801534a:	b283      	uxth	r3, r0
 801534c:	1acb      	subs	r3, r1, r3
 801534e:	0c00      	lsrs	r0, r0, #16
 8015350:	4463      	add	r3, ip
 8015352:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015356:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801535a:	b29b      	uxth	r3, r3
 801535c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015360:	4576      	cmp	r6, lr
 8015362:	f849 3b04 	str.w	r3, [r9], #4
 8015366:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801536a:	d8e5      	bhi.n	8015338 <__mdiff+0x88>
 801536c:	1b33      	subs	r3, r6, r4
 801536e:	3b15      	subs	r3, #21
 8015370:	f023 0303 	bic.w	r3, r3, #3
 8015374:	3415      	adds	r4, #21
 8015376:	3304      	adds	r3, #4
 8015378:	42a6      	cmp	r6, r4
 801537a:	bf38      	it	cc
 801537c:	2304      	movcc	r3, #4
 801537e:	441d      	add	r5, r3
 8015380:	445b      	add	r3, fp
 8015382:	461e      	mov	r6, r3
 8015384:	462c      	mov	r4, r5
 8015386:	4544      	cmp	r4, r8
 8015388:	d30e      	bcc.n	80153a8 <__mdiff+0xf8>
 801538a:	f108 0103 	add.w	r1, r8, #3
 801538e:	1b49      	subs	r1, r1, r5
 8015390:	f021 0103 	bic.w	r1, r1, #3
 8015394:	3d03      	subs	r5, #3
 8015396:	45a8      	cmp	r8, r5
 8015398:	bf38      	it	cc
 801539a:	2100      	movcc	r1, #0
 801539c:	440b      	add	r3, r1
 801539e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80153a2:	b191      	cbz	r1, 80153ca <__mdiff+0x11a>
 80153a4:	6117      	str	r7, [r2, #16]
 80153a6:	e79d      	b.n	80152e4 <__mdiff+0x34>
 80153a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80153ac:	46e6      	mov	lr, ip
 80153ae:	0c08      	lsrs	r0, r1, #16
 80153b0:	fa1c fc81 	uxtah	ip, ip, r1
 80153b4:	4471      	add	r1, lr
 80153b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80153ba:	b289      	uxth	r1, r1
 80153bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80153c0:	f846 1b04 	str.w	r1, [r6], #4
 80153c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80153c8:	e7dd      	b.n	8015386 <__mdiff+0xd6>
 80153ca:	3f01      	subs	r7, #1
 80153cc:	e7e7      	b.n	801539e <__mdiff+0xee>
 80153ce:	bf00      	nop
 80153d0:	08015d6c 	.word	0x08015d6c
 80153d4:	08015d7d 	.word	0x08015d7d

080153d8 <__d2b>:
 80153d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80153dc:	460f      	mov	r7, r1
 80153de:	2101      	movs	r1, #1
 80153e0:	ec59 8b10 	vmov	r8, r9, d0
 80153e4:	4616      	mov	r6, r2
 80153e6:	f7ff fccd 	bl	8014d84 <_Balloc>
 80153ea:	4604      	mov	r4, r0
 80153ec:	b930      	cbnz	r0, 80153fc <__d2b+0x24>
 80153ee:	4602      	mov	r2, r0
 80153f0:	4b23      	ldr	r3, [pc, #140]	@ (8015480 <__d2b+0xa8>)
 80153f2:	4824      	ldr	r0, [pc, #144]	@ (8015484 <__d2b+0xac>)
 80153f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80153f8:	f000 fac8 	bl	801598c <__assert_func>
 80153fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015404:	b10d      	cbz	r5, 801540a <__d2b+0x32>
 8015406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801540a:	9301      	str	r3, [sp, #4]
 801540c:	f1b8 0300 	subs.w	r3, r8, #0
 8015410:	d023      	beq.n	801545a <__d2b+0x82>
 8015412:	4668      	mov	r0, sp
 8015414:	9300      	str	r3, [sp, #0]
 8015416:	f7ff fd7c 	bl	8014f12 <__lo0bits>
 801541a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801541e:	b1d0      	cbz	r0, 8015456 <__d2b+0x7e>
 8015420:	f1c0 0320 	rsb	r3, r0, #32
 8015424:	fa02 f303 	lsl.w	r3, r2, r3
 8015428:	430b      	orrs	r3, r1
 801542a:	40c2      	lsrs	r2, r0
 801542c:	6163      	str	r3, [r4, #20]
 801542e:	9201      	str	r2, [sp, #4]
 8015430:	9b01      	ldr	r3, [sp, #4]
 8015432:	61a3      	str	r3, [r4, #24]
 8015434:	2b00      	cmp	r3, #0
 8015436:	bf0c      	ite	eq
 8015438:	2201      	moveq	r2, #1
 801543a:	2202      	movne	r2, #2
 801543c:	6122      	str	r2, [r4, #16]
 801543e:	b1a5      	cbz	r5, 801546a <__d2b+0x92>
 8015440:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015444:	4405      	add	r5, r0
 8015446:	603d      	str	r5, [r7, #0]
 8015448:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801544c:	6030      	str	r0, [r6, #0]
 801544e:	4620      	mov	r0, r4
 8015450:	b003      	add	sp, #12
 8015452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015456:	6161      	str	r1, [r4, #20]
 8015458:	e7ea      	b.n	8015430 <__d2b+0x58>
 801545a:	a801      	add	r0, sp, #4
 801545c:	f7ff fd59 	bl	8014f12 <__lo0bits>
 8015460:	9b01      	ldr	r3, [sp, #4]
 8015462:	6163      	str	r3, [r4, #20]
 8015464:	3020      	adds	r0, #32
 8015466:	2201      	movs	r2, #1
 8015468:	e7e8      	b.n	801543c <__d2b+0x64>
 801546a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801546e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015472:	6038      	str	r0, [r7, #0]
 8015474:	6918      	ldr	r0, [r3, #16]
 8015476:	f7ff fd2d 	bl	8014ed4 <__hi0bits>
 801547a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801547e:	e7e5      	b.n	801544c <__d2b+0x74>
 8015480:	08015d6c 	.word	0x08015d6c
 8015484:	08015d7d 	.word	0x08015d7d

08015488 <__sfputc_r>:
 8015488:	6893      	ldr	r3, [r2, #8]
 801548a:	3b01      	subs	r3, #1
 801548c:	2b00      	cmp	r3, #0
 801548e:	b410      	push	{r4}
 8015490:	6093      	str	r3, [r2, #8]
 8015492:	da08      	bge.n	80154a6 <__sfputc_r+0x1e>
 8015494:	6994      	ldr	r4, [r2, #24]
 8015496:	42a3      	cmp	r3, r4
 8015498:	db01      	blt.n	801549e <__sfputc_r+0x16>
 801549a:	290a      	cmp	r1, #10
 801549c:	d103      	bne.n	80154a6 <__sfputc_r+0x1e>
 801549e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154a2:	f7fe bc6e 	b.w	8013d82 <__swbuf_r>
 80154a6:	6813      	ldr	r3, [r2, #0]
 80154a8:	1c58      	adds	r0, r3, #1
 80154aa:	6010      	str	r0, [r2, #0]
 80154ac:	7019      	strb	r1, [r3, #0]
 80154ae:	4608      	mov	r0, r1
 80154b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154b4:	4770      	bx	lr

080154b6 <__sfputs_r>:
 80154b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154b8:	4606      	mov	r6, r0
 80154ba:	460f      	mov	r7, r1
 80154bc:	4614      	mov	r4, r2
 80154be:	18d5      	adds	r5, r2, r3
 80154c0:	42ac      	cmp	r4, r5
 80154c2:	d101      	bne.n	80154c8 <__sfputs_r+0x12>
 80154c4:	2000      	movs	r0, #0
 80154c6:	e007      	b.n	80154d8 <__sfputs_r+0x22>
 80154c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154cc:	463a      	mov	r2, r7
 80154ce:	4630      	mov	r0, r6
 80154d0:	f7ff ffda 	bl	8015488 <__sfputc_r>
 80154d4:	1c43      	adds	r3, r0, #1
 80154d6:	d1f3      	bne.n	80154c0 <__sfputs_r+0xa>
 80154d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080154dc <_vfiprintf_r>:
 80154dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e0:	460d      	mov	r5, r1
 80154e2:	b09d      	sub	sp, #116	@ 0x74
 80154e4:	4614      	mov	r4, r2
 80154e6:	4698      	mov	r8, r3
 80154e8:	4606      	mov	r6, r0
 80154ea:	b118      	cbz	r0, 80154f4 <_vfiprintf_r+0x18>
 80154ec:	6a03      	ldr	r3, [r0, #32]
 80154ee:	b90b      	cbnz	r3, 80154f4 <_vfiprintf_r+0x18>
 80154f0:	f7fe fb5e 	bl	8013bb0 <__sinit>
 80154f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154f6:	07d9      	lsls	r1, r3, #31
 80154f8:	d405      	bmi.n	8015506 <_vfiprintf_r+0x2a>
 80154fa:	89ab      	ldrh	r3, [r5, #12]
 80154fc:	059a      	lsls	r2, r3, #22
 80154fe:	d402      	bmi.n	8015506 <_vfiprintf_r+0x2a>
 8015500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015502:	f7fe fd50 	bl	8013fa6 <__retarget_lock_acquire_recursive>
 8015506:	89ab      	ldrh	r3, [r5, #12]
 8015508:	071b      	lsls	r3, r3, #28
 801550a:	d501      	bpl.n	8015510 <_vfiprintf_r+0x34>
 801550c:	692b      	ldr	r3, [r5, #16]
 801550e:	b99b      	cbnz	r3, 8015538 <_vfiprintf_r+0x5c>
 8015510:	4629      	mov	r1, r5
 8015512:	4630      	mov	r0, r6
 8015514:	f7fe fc74 	bl	8013e00 <__swsetup_r>
 8015518:	b170      	cbz	r0, 8015538 <_vfiprintf_r+0x5c>
 801551a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801551c:	07dc      	lsls	r4, r3, #31
 801551e:	d504      	bpl.n	801552a <_vfiprintf_r+0x4e>
 8015520:	f04f 30ff 	mov.w	r0, #4294967295
 8015524:	b01d      	add	sp, #116	@ 0x74
 8015526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801552a:	89ab      	ldrh	r3, [r5, #12]
 801552c:	0598      	lsls	r0, r3, #22
 801552e:	d4f7      	bmi.n	8015520 <_vfiprintf_r+0x44>
 8015530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015532:	f7fe fd39 	bl	8013fa8 <__retarget_lock_release_recursive>
 8015536:	e7f3      	b.n	8015520 <_vfiprintf_r+0x44>
 8015538:	2300      	movs	r3, #0
 801553a:	9309      	str	r3, [sp, #36]	@ 0x24
 801553c:	2320      	movs	r3, #32
 801553e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015542:	f8cd 800c 	str.w	r8, [sp, #12]
 8015546:	2330      	movs	r3, #48	@ 0x30
 8015548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80156f8 <_vfiprintf_r+0x21c>
 801554c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015550:	f04f 0901 	mov.w	r9, #1
 8015554:	4623      	mov	r3, r4
 8015556:	469a      	mov	sl, r3
 8015558:	f813 2b01 	ldrb.w	r2, [r3], #1
 801555c:	b10a      	cbz	r2, 8015562 <_vfiprintf_r+0x86>
 801555e:	2a25      	cmp	r2, #37	@ 0x25
 8015560:	d1f9      	bne.n	8015556 <_vfiprintf_r+0x7a>
 8015562:	ebba 0b04 	subs.w	fp, sl, r4
 8015566:	d00b      	beq.n	8015580 <_vfiprintf_r+0xa4>
 8015568:	465b      	mov	r3, fp
 801556a:	4622      	mov	r2, r4
 801556c:	4629      	mov	r1, r5
 801556e:	4630      	mov	r0, r6
 8015570:	f7ff ffa1 	bl	80154b6 <__sfputs_r>
 8015574:	3001      	adds	r0, #1
 8015576:	f000 80a7 	beq.w	80156c8 <_vfiprintf_r+0x1ec>
 801557a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801557c:	445a      	add	r2, fp
 801557e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015580:	f89a 3000 	ldrb.w	r3, [sl]
 8015584:	2b00      	cmp	r3, #0
 8015586:	f000 809f 	beq.w	80156c8 <_vfiprintf_r+0x1ec>
 801558a:	2300      	movs	r3, #0
 801558c:	f04f 32ff 	mov.w	r2, #4294967295
 8015590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015594:	f10a 0a01 	add.w	sl, sl, #1
 8015598:	9304      	str	r3, [sp, #16]
 801559a:	9307      	str	r3, [sp, #28]
 801559c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80155a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80155a2:	4654      	mov	r4, sl
 80155a4:	2205      	movs	r2, #5
 80155a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155aa:	4853      	ldr	r0, [pc, #332]	@ (80156f8 <_vfiprintf_r+0x21c>)
 80155ac:	f7ea fe98 	bl	80002e0 <memchr>
 80155b0:	9a04      	ldr	r2, [sp, #16]
 80155b2:	b9d8      	cbnz	r0, 80155ec <_vfiprintf_r+0x110>
 80155b4:	06d1      	lsls	r1, r2, #27
 80155b6:	bf44      	itt	mi
 80155b8:	2320      	movmi	r3, #32
 80155ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80155be:	0713      	lsls	r3, r2, #28
 80155c0:	bf44      	itt	mi
 80155c2:	232b      	movmi	r3, #43	@ 0x2b
 80155c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80155c8:	f89a 3000 	ldrb.w	r3, [sl]
 80155cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80155ce:	d015      	beq.n	80155fc <_vfiprintf_r+0x120>
 80155d0:	9a07      	ldr	r2, [sp, #28]
 80155d2:	4654      	mov	r4, sl
 80155d4:	2000      	movs	r0, #0
 80155d6:	f04f 0c0a 	mov.w	ip, #10
 80155da:	4621      	mov	r1, r4
 80155dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155e0:	3b30      	subs	r3, #48	@ 0x30
 80155e2:	2b09      	cmp	r3, #9
 80155e4:	d94b      	bls.n	801567e <_vfiprintf_r+0x1a2>
 80155e6:	b1b0      	cbz	r0, 8015616 <_vfiprintf_r+0x13a>
 80155e8:	9207      	str	r2, [sp, #28]
 80155ea:	e014      	b.n	8015616 <_vfiprintf_r+0x13a>
 80155ec:	eba0 0308 	sub.w	r3, r0, r8
 80155f0:	fa09 f303 	lsl.w	r3, r9, r3
 80155f4:	4313      	orrs	r3, r2
 80155f6:	9304      	str	r3, [sp, #16]
 80155f8:	46a2      	mov	sl, r4
 80155fa:	e7d2      	b.n	80155a2 <_vfiprintf_r+0xc6>
 80155fc:	9b03      	ldr	r3, [sp, #12]
 80155fe:	1d19      	adds	r1, r3, #4
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	9103      	str	r1, [sp, #12]
 8015604:	2b00      	cmp	r3, #0
 8015606:	bfbb      	ittet	lt
 8015608:	425b      	neglt	r3, r3
 801560a:	f042 0202 	orrlt.w	r2, r2, #2
 801560e:	9307      	strge	r3, [sp, #28]
 8015610:	9307      	strlt	r3, [sp, #28]
 8015612:	bfb8      	it	lt
 8015614:	9204      	strlt	r2, [sp, #16]
 8015616:	7823      	ldrb	r3, [r4, #0]
 8015618:	2b2e      	cmp	r3, #46	@ 0x2e
 801561a:	d10a      	bne.n	8015632 <_vfiprintf_r+0x156>
 801561c:	7863      	ldrb	r3, [r4, #1]
 801561e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015620:	d132      	bne.n	8015688 <_vfiprintf_r+0x1ac>
 8015622:	9b03      	ldr	r3, [sp, #12]
 8015624:	1d1a      	adds	r2, r3, #4
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	9203      	str	r2, [sp, #12]
 801562a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801562e:	3402      	adds	r4, #2
 8015630:	9305      	str	r3, [sp, #20]
 8015632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015708 <_vfiprintf_r+0x22c>
 8015636:	7821      	ldrb	r1, [r4, #0]
 8015638:	2203      	movs	r2, #3
 801563a:	4650      	mov	r0, sl
 801563c:	f7ea fe50 	bl	80002e0 <memchr>
 8015640:	b138      	cbz	r0, 8015652 <_vfiprintf_r+0x176>
 8015642:	9b04      	ldr	r3, [sp, #16]
 8015644:	eba0 000a 	sub.w	r0, r0, sl
 8015648:	2240      	movs	r2, #64	@ 0x40
 801564a:	4082      	lsls	r2, r0
 801564c:	4313      	orrs	r3, r2
 801564e:	3401      	adds	r4, #1
 8015650:	9304      	str	r3, [sp, #16]
 8015652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015656:	4829      	ldr	r0, [pc, #164]	@ (80156fc <_vfiprintf_r+0x220>)
 8015658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801565c:	2206      	movs	r2, #6
 801565e:	f7ea fe3f 	bl	80002e0 <memchr>
 8015662:	2800      	cmp	r0, #0
 8015664:	d03f      	beq.n	80156e6 <_vfiprintf_r+0x20a>
 8015666:	4b26      	ldr	r3, [pc, #152]	@ (8015700 <_vfiprintf_r+0x224>)
 8015668:	bb1b      	cbnz	r3, 80156b2 <_vfiprintf_r+0x1d6>
 801566a:	9b03      	ldr	r3, [sp, #12]
 801566c:	3307      	adds	r3, #7
 801566e:	f023 0307 	bic.w	r3, r3, #7
 8015672:	3308      	adds	r3, #8
 8015674:	9303      	str	r3, [sp, #12]
 8015676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015678:	443b      	add	r3, r7
 801567a:	9309      	str	r3, [sp, #36]	@ 0x24
 801567c:	e76a      	b.n	8015554 <_vfiprintf_r+0x78>
 801567e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015682:	460c      	mov	r4, r1
 8015684:	2001      	movs	r0, #1
 8015686:	e7a8      	b.n	80155da <_vfiprintf_r+0xfe>
 8015688:	2300      	movs	r3, #0
 801568a:	3401      	adds	r4, #1
 801568c:	9305      	str	r3, [sp, #20]
 801568e:	4619      	mov	r1, r3
 8015690:	f04f 0c0a 	mov.w	ip, #10
 8015694:	4620      	mov	r0, r4
 8015696:	f810 2b01 	ldrb.w	r2, [r0], #1
 801569a:	3a30      	subs	r2, #48	@ 0x30
 801569c:	2a09      	cmp	r2, #9
 801569e:	d903      	bls.n	80156a8 <_vfiprintf_r+0x1cc>
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d0c6      	beq.n	8015632 <_vfiprintf_r+0x156>
 80156a4:	9105      	str	r1, [sp, #20]
 80156a6:	e7c4      	b.n	8015632 <_vfiprintf_r+0x156>
 80156a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80156ac:	4604      	mov	r4, r0
 80156ae:	2301      	movs	r3, #1
 80156b0:	e7f0      	b.n	8015694 <_vfiprintf_r+0x1b8>
 80156b2:	ab03      	add	r3, sp, #12
 80156b4:	9300      	str	r3, [sp, #0]
 80156b6:	462a      	mov	r2, r5
 80156b8:	4b12      	ldr	r3, [pc, #72]	@ (8015704 <_vfiprintf_r+0x228>)
 80156ba:	a904      	add	r1, sp, #16
 80156bc:	4630      	mov	r0, r6
 80156be:	f7fd fe43 	bl	8013348 <_printf_float>
 80156c2:	4607      	mov	r7, r0
 80156c4:	1c78      	adds	r0, r7, #1
 80156c6:	d1d6      	bne.n	8015676 <_vfiprintf_r+0x19a>
 80156c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156ca:	07d9      	lsls	r1, r3, #31
 80156cc:	d405      	bmi.n	80156da <_vfiprintf_r+0x1fe>
 80156ce:	89ab      	ldrh	r3, [r5, #12]
 80156d0:	059a      	lsls	r2, r3, #22
 80156d2:	d402      	bmi.n	80156da <_vfiprintf_r+0x1fe>
 80156d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156d6:	f7fe fc67 	bl	8013fa8 <__retarget_lock_release_recursive>
 80156da:	89ab      	ldrh	r3, [r5, #12]
 80156dc:	065b      	lsls	r3, r3, #25
 80156de:	f53f af1f 	bmi.w	8015520 <_vfiprintf_r+0x44>
 80156e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80156e4:	e71e      	b.n	8015524 <_vfiprintf_r+0x48>
 80156e6:	ab03      	add	r3, sp, #12
 80156e8:	9300      	str	r3, [sp, #0]
 80156ea:	462a      	mov	r2, r5
 80156ec:	4b05      	ldr	r3, [pc, #20]	@ (8015704 <_vfiprintf_r+0x228>)
 80156ee:	a904      	add	r1, sp, #16
 80156f0:	4630      	mov	r0, r6
 80156f2:	f7fe f8b1 	bl	8013858 <_printf_i>
 80156f6:	e7e4      	b.n	80156c2 <_vfiprintf_r+0x1e6>
 80156f8:	08015ed8 	.word	0x08015ed8
 80156fc:	08015ee2 	.word	0x08015ee2
 8015700:	08013349 	.word	0x08013349
 8015704:	080154b7 	.word	0x080154b7
 8015708:	08015ede 	.word	0x08015ede

0801570c <__sflush_r>:
 801570c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015714:	0716      	lsls	r6, r2, #28
 8015716:	4605      	mov	r5, r0
 8015718:	460c      	mov	r4, r1
 801571a:	d454      	bmi.n	80157c6 <__sflush_r+0xba>
 801571c:	684b      	ldr	r3, [r1, #4]
 801571e:	2b00      	cmp	r3, #0
 8015720:	dc02      	bgt.n	8015728 <__sflush_r+0x1c>
 8015722:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015724:	2b00      	cmp	r3, #0
 8015726:	dd48      	ble.n	80157ba <__sflush_r+0xae>
 8015728:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801572a:	2e00      	cmp	r6, #0
 801572c:	d045      	beq.n	80157ba <__sflush_r+0xae>
 801572e:	2300      	movs	r3, #0
 8015730:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015734:	682f      	ldr	r7, [r5, #0]
 8015736:	6a21      	ldr	r1, [r4, #32]
 8015738:	602b      	str	r3, [r5, #0]
 801573a:	d030      	beq.n	801579e <__sflush_r+0x92>
 801573c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801573e:	89a3      	ldrh	r3, [r4, #12]
 8015740:	0759      	lsls	r1, r3, #29
 8015742:	d505      	bpl.n	8015750 <__sflush_r+0x44>
 8015744:	6863      	ldr	r3, [r4, #4]
 8015746:	1ad2      	subs	r2, r2, r3
 8015748:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801574a:	b10b      	cbz	r3, 8015750 <__sflush_r+0x44>
 801574c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801574e:	1ad2      	subs	r2, r2, r3
 8015750:	2300      	movs	r3, #0
 8015752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015754:	6a21      	ldr	r1, [r4, #32]
 8015756:	4628      	mov	r0, r5
 8015758:	47b0      	blx	r6
 801575a:	1c43      	adds	r3, r0, #1
 801575c:	89a3      	ldrh	r3, [r4, #12]
 801575e:	d106      	bne.n	801576e <__sflush_r+0x62>
 8015760:	6829      	ldr	r1, [r5, #0]
 8015762:	291d      	cmp	r1, #29
 8015764:	d82b      	bhi.n	80157be <__sflush_r+0xb2>
 8015766:	4a2a      	ldr	r2, [pc, #168]	@ (8015810 <__sflush_r+0x104>)
 8015768:	410a      	asrs	r2, r1
 801576a:	07d6      	lsls	r6, r2, #31
 801576c:	d427      	bmi.n	80157be <__sflush_r+0xb2>
 801576e:	2200      	movs	r2, #0
 8015770:	6062      	str	r2, [r4, #4]
 8015772:	04d9      	lsls	r1, r3, #19
 8015774:	6922      	ldr	r2, [r4, #16]
 8015776:	6022      	str	r2, [r4, #0]
 8015778:	d504      	bpl.n	8015784 <__sflush_r+0x78>
 801577a:	1c42      	adds	r2, r0, #1
 801577c:	d101      	bne.n	8015782 <__sflush_r+0x76>
 801577e:	682b      	ldr	r3, [r5, #0]
 8015780:	b903      	cbnz	r3, 8015784 <__sflush_r+0x78>
 8015782:	6560      	str	r0, [r4, #84]	@ 0x54
 8015784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015786:	602f      	str	r7, [r5, #0]
 8015788:	b1b9      	cbz	r1, 80157ba <__sflush_r+0xae>
 801578a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801578e:	4299      	cmp	r1, r3
 8015790:	d002      	beq.n	8015798 <__sflush_r+0x8c>
 8015792:	4628      	mov	r0, r5
 8015794:	f7ff f9f6 	bl	8014b84 <_free_r>
 8015798:	2300      	movs	r3, #0
 801579a:	6363      	str	r3, [r4, #52]	@ 0x34
 801579c:	e00d      	b.n	80157ba <__sflush_r+0xae>
 801579e:	2301      	movs	r3, #1
 80157a0:	4628      	mov	r0, r5
 80157a2:	47b0      	blx	r6
 80157a4:	4602      	mov	r2, r0
 80157a6:	1c50      	adds	r0, r2, #1
 80157a8:	d1c9      	bne.n	801573e <__sflush_r+0x32>
 80157aa:	682b      	ldr	r3, [r5, #0]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d0c6      	beq.n	801573e <__sflush_r+0x32>
 80157b0:	2b1d      	cmp	r3, #29
 80157b2:	d001      	beq.n	80157b8 <__sflush_r+0xac>
 80157b4:	2b16      	cmp	r3, #22
 80157b6:	d11e      	bne.n	80157f6 <__sflush_r+0xea>
 80157b8:	602f      	str	r7, [r5, #0]
 80157ba:	2000      	movs	r0, #0
 80157bc:	e022      	b.n	8015804 <__sflush_r+0xf8>
 80157be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157c2:	b21b      	sxth	r3, r3
 80157c4:	e01b      	b.n	80157fe <__sflush_r+0xf2>
 80157c6:	690f      	ldr	r7, [r1, #16]
 80157c8:	2f00      	cmp	r7, #0
 80157ca:	d0f6      	beq.n	80157ba <__sflush_r+0xae>
 80157cc:	0793      	lsls	r3, r2, #30
 80157ce:	680e      	ldr	r6, [r1, #0]
 80157d0:	bf08      	it	eq
 80157d2:	694b      	ldreq	r3, [r1, #20]
 80157d4:	600f      	str	r7, [r1, #0]
 80157d6:	bf18      	it	ne
 80157d8:	2300      	movne	r3, #0
 80157da:	eba6 0807 	sub.w	r8, r6, r7
 80157de:	608b      	str	r3, [r1, #8]
 80157e0:	f1b8 0f00 	cmp.w	r8, #0
 80157e4:	dde9      	ble.n	80157ba <__sflush_r+0xae>
 80157e6:	6a21      	ldr	r1, [r4, #32]
 80157e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80157ea:	4643      	mov	r3, r8
 80157ec:	463a      	mov	r2, r7
 80157ee:	4628      	mov	r0, r5
 80157f0:	47b0      	blx	r6
 80157f2:	2800      	cmp	r0, #0
 80157f4:	dc08      	bgt.n	8015808 <__sflush_r+0xfc>
 80157f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157fe:	81a3      	strh	r3, [r4, #12]
 8015800:	f04f 30ff 	mov.w	r0, #4294967295
 8015804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015808:	4407      	add	r7, r0
 801580a:	eba8 0800 	sub.w	r8, r8, r0
 801580e:	e7e7      	b.n	80157e0 <__sflush_r+0xd4>
 8015810:	dfbffffe 	.word	0xdfbffffe

08015814 <_fflush_r>:
 8015814:	b538      	push	{r3, r4, r5, lr}
 8015816:	690b      	ldr	r3, [r1, #16]
 8015818:	4605      	mov	r5, r0
 801581a:	460c      	mov	r4, r1
 801581c:	b913      	cbnz	r3, 8015824 <_fflush_r+0x10>
 801581e:	2500      	movs	r5, #0
 8015820:	4628      	mov	r0, r5
 8015822:	bd38      	pop	{r3, r4, r5, pc}
 8015824:	b118      	cbz	r0, 801582e <_fflush_r+0x1a>
 8015826:	6a03      	ldr	r3, [r0, #32]
 8015828:	b90b      	cbnz	r3, 801582e <_fflush_r+0x1a>
 801582a:	f7fe f9c1 	bl	8013bb0 <__sinit>
 801582e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d0f3      	beq.n	801581e <_fflush_r+0xa>
 8015836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015838:	07d0      	lsls	r0, r2, #31
 801583a:	d404      	bmi.n	8015846 <_fflush_r+0x32>
 801583c:	0599      	lsls	r1, r3, #22
 801583e:	d402      	bmi.n	8015846 <_fflush_r+0x32>
 8015840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015842:	f7fe fbb0 	bl	8013fa6 <__retarget_lock_acquire_recursive>
 8015846:	4628      	mov	r0, r5
 8015848:	4621      	mov	r1, r4
 801584a:	f7ff ff5f 	bl	801570c <__sflush_r>
 801584e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015850:	07da      	lsls	r2, r3, #31
 8015852:	4605      	mov	r5, r0
 8015854:	d4e4      	bmi.n	8015820 <_fflush_r+0xc>
 8015856:	89a3      	ldrh	r3, [r4, #12]
 8015858:	059b      	lsls	r3, r3, #22
 801585a:	d4e1      	bmi.n	8015820 <_fflush_r+0xc>
 801585c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801585e:	f7fe fba3 	bl	8013fa8 <__retarget_lock_release_recursive>
 8015862:	e7dd      	b.n	8015820 <_fflush_r+0xc>

08015864 <__swhatbuf_r>:
 8015864:	b570      	push	{r4, r5, r6, lr}
 8015866:	460c      	mov	r4, r1
 8015868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801586c:	2900      	cmp	r1, #0
 801586e:	b096      	sub	sp, #88	@ 0x58
 8015870:	4615      	mov	r5, r2
 8015872:	461e      	mov	r6, r3
 8015874:	da0d      	bge.n	8015892 <__swhatbuf_r+0x2e>
 8015876:	89a3      	ldrh	r3, [r4, #12]
 8015878:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801587c:	f04f 0100 	mov.w	r1, #0
 8015880:	bf14      	ite	ne
 8015882:	2340      	movne	r3, #64	@ 0x40
 8015884:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015888:	2000      	movs	r0, #0
 801588a:	6031      	str	r1, [r6, #0]
 801588c:	602b      	str	r3, [r5, #0]
 801588e:	b016      	add	sp, #88	@ 0x58
 8015890:	bd70      	pop	{r4, r5, r6, pc}
 8015892:	466a      	mov	r2, sp
 8015894:	f000 f848 	bl	8015928 <_fstat_r>
 8015898:	2800      	cmp	r0, #0
 801589a:	dbec      	blt.n	8015876 <__swhatbuf_r+0x12>
 801589c:	9901      	ldr	r1, [sp, #4]
 801589e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80158a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80158a6:	4259      	negs	r1, r3
 80158a8:	4159      	adcs	r1, r3
 80158aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80158ae:	e7eb      	b.n	8015888 <__swhatbuf_r+0x24>

080158b0 <__smakebuf_r>:
 80158b0:	898b      	ldrh	r3, [r1, #12]
 80158b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158b4:	079d      	lsls	r5, r3, #30
 80158b6:	4606      	mov	r6, r0
 80158b8:	460c      	mov	r4, r1
 80158ba:	d507      	bpl.n	80158cc <__smakebuf_r+0x1c>
 80158bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80158c0:	6023      	str	r3, [r4, #0]
 80158c2:	6123      	str	r3, [r4, #16]
 80158c4:	2301      	movs	r3, #1
 80158c6:	6163      	str	r3, [r4, #20]
 80158c8:	b003      	add	sp, #12
 80158ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158cc:	ab01      	add	r3, sp, #4
 80158ce:	466a      	mov	r2, sp
 80158d0:	f7ff ffc8 	bl	8015864 <__swhatbuf_r>
 80158d4:	9f00      	ldr	r7, [sp, #0]
 80158d6:	4605      	mov	r5, r0
 80158d8:	4639      	mov	r1, r7
 80158da:	4630      	mov	r0, r6
 80158dc:	f7ff f9c6 	bl	8014c6c <_malloc_r>
 80158e0:	b948      	cbnz	r0, 80158f6 <__smakebuf_r+0x46>
 80158e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158e6:	059a      	lsls	r2, r3, #22
 80158e8:	d4ee      	bmi.n	80158c8 <__smakebuf_r+0x18>
 80158ea:	f023 0303 	bic.w	r3, r3, #3
 80158ee:	f043 0302 	orr.w	r3, r3, #2
 80158f2:	81a3      	strh	r3, [r4, #12]
 80158f4:	e7e2      	b.n	80158bc <__smakebuf_r+0xc>
 80158f6:	89a3      	ldrh	r3, [r4, #12]
 80158f8:	6020      	str	r0, [r4, #0]
 80158fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158fe:	81a3      	strh	r3, [r4, #12]
 8015900:	9b01      	ldr	r3, [sp, #4]
 8015902:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015906:	b15b      	cbz	r3, 8015920 <__smakebuf_r+0x70>
 8015908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801590c:	4630      	mov	r0, r6
 801590e:	f000 f81d 	bl	801594c <_isatty_r>
 8015912:	b128      	cbz	r0, 8015920 <__smakebuf_r+0x70>
 8015914:	89a3      	ldrh	r3, [r4, #12]
 8015916:	f023 0303 	bic.w	r3, r3, #3
 801591a:	f043 0301 	orr.w	r3, r3, #1
 801591e:	81a3      	strh	r3, [r4, #12]
 8015920:	89a3      	ldrh	r3, [r4, #12]
 8015922:	431d      	orrs	r5, r3
 8015924:	81a5      	strh	r5, [r4, #12]
 8015926:	e7cf      	b.n	80158c8 <__smakebuf_r+0x18>

08015928 <_fstat_r>:
 8015928:	b538      	push	{r3, r4, r5, lr}
 801592a:	4d07      	ldr	r5, [pc, #28]	@ (8015948 <_fstat_r+0x20>)
 801592c:	2300      	movs	r3, #0
 801592e:	4604      	mov	r4, r0
 8015930:	4608      	mov	r0, r1
 8015932:	4611      	mov	r1, r2
 8015934:	602b      	str	r3, [r5, #0]
 8015936:	f7ec fb81 	bl	800203c <_fstat>
 801593a:	1c43      	adds	r3, r0, #1
 801593c:	d102      	bne.n	8015944 <_fstat_r+0x1c>
 801593e:	682b      	ldr	r3, [r5, #0]
 8015940:	b103      	cbz	r3, 8015944 <_fstat_r+0x1c>
 8015942:	6023      	str	r3, [r4, #0]
 8015944:	bd38      	pop	{r3, r4, r5, pc}
 8015946:	bf00      	nop
 8015948:	2400163c 	.word	0x2400163c

0801594c <_isatty_r>:
 801594c:	b538      	push	{r3, r4, r5, lr}
 801594e:	4d06      	ldr	r5, [pc, #24]	@ (8015968 <_isatty_r+0x1c>)
 8015950:	2300      	movs	r3, #0
 8015952:	4604      	mov	r4, r0
 8015954:	4608      	mov	r0, r1
 8015956:	602b      	str	r3, [r5, #0]
 8015958:	f7ec fb80 	bl	800205c <_isatty>
 801595c:	1c43      	adds	r3, r0, #1
 801595e:	d102      	bne.n	8015966 <_isatty_r+0x1a>
 8015960:	682b      	ldr	r3, [r5, #0]
 8015962:	b103      	cbz	r3, 8015966 <_isatty_r+0x1a>
 8015964:	6023      	str	r3, [r4, #0]
 8015966:	bd38      	pop	{r3, r4, r5, pc}
 8015968:	2400163c 	.word	0x2400163c

0801596c <_sbrk_r>:
 801596c:	b538      	push	{r3, r4, r5, lr}
 801596e:	4d06      	ldr	r5, [pc, #24]	@ (8015988 <_sbrk_r+0x1c>)
 8015970:	2300      	movs	r3, #0
 8015972:	4604      	mov	r4, r0
 8015974:	4608      	mov	r0, r1
 8015976:	602b      	str	r3, [r5, #0]
 8015978:	f7ec fb88 	bl	800208c <_sbrk>
 801597c:	1c43      	adds	r3, r0, #1
 801597e:	d102      	bne.n	8015986 <_sbrk_r+0x1a>
 8015980:	682b      	ldr	r3, [r5, #0]
 8015982:	b103      	cbz	r3, 8015986 <_sbrk_r+0x1a>
 8015984:	6023      	str	r3, [r4, #0]
 8015986:	bd38      	pop	{r3, r4, r5, pc}
 8015988:	2400163c 	.word	0x2400163c

0801598c <__assert_func>:
 801598c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801598e:	4614      	mov	r4, r2
 8015990:	461a      	mov	r2, r3
 8015992:	4b09      	ldr	r3, [pc, #36]	@ (80159b8 <__assert_func+0x2c>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	4605      	mov	r5, r0
 8015998:	68d8      	ldr	r0, [r3, #12]
 801599a:	b954      	cbnz	r4, 80159b2 <__assert_func+0x26>
 801599c:	4b07      	ldr	r3, [pc, #28]	@ (80159bc <__assert_func+0x30>)
 801599e:	461c      	mov	r4, r3
 80159a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159a4:	9100      	str	r1, [sp, #0]
 80159a6:	462b      	mov	r3, r5
 80159a8:	4905      	ldr	r1, [pc, #20]	@ (80159c0 <__assert_func+0x34>)
 80159aa:	f000 f841 	bl	8015a30 <fiprintf>
 80159ae:	f000 f851 	bl	8015a54 <abort>
 80159b2:	4b04      	ldr	r3, [pc, #16]	@ (80159c4 <__assert_func+0x38>)
 80159b4:	e7f4      	b.n	80159a0 <__assert_func+0x14>
 80159b6:	bf00      	nop
 80159b8:	24000124 	.word	0x24000124
 80159bc:	08015f2e 	.word	0x08015f2e
 80159c0:	08015f00 	.word	0x08015f00
 80159c4:	08015ef3 	.word	0x08015ef3

080159c8 <_calloc_r>:
 80159c8:	b570      	push	{r4, r5, r6, lr}
 80159ca:	fba1 5402 	umull	r5, r4, r1, r2
 80159ce:	b93c      	cbnz	r4, 80159e0 <_calloc_r+0x18>
 80159d0:	4629      	mov	r1, r5
 80159d2:	f7ff f94b 	bl	8014c6c <_malloc_r>
 80159d6:	4606      	mov	r6, r0
 80159d8:	b928      	cbnz	r0, 80159e6 <_calloc_r+0x1e>
 80159da:	2600      	movs	r6, #0
 80159dc:	4630      	mov	r0, r6
 80159de:	bd70      	pop	{r4, r5, r6, pc}
 80159e0:	220c      	movs	r2, #12
 80159e2:	6002      	str	r2, [r0, #0]
 80159e4:	e7f9      	b.n	80159da <_calloc_r+0x12>
 80159e6:	462a      	mov	r2, r5
 80159e8:	4621      	mov	r1, r4
 80159ea:	f7fe fa5f 	bl	8013eac <memset>
 80159ee:	e7f5      	b.n	80159dc <_calloc_r+0x14>

080159f0 <__ascii_mbtowc>:
 80159f0:	b082      	sub	sp, #8
 80159f2:	b901      	cbnz	r1, 80159f6 <__ascii_mbtowc+0x6>
 80159f4:	a901      	add	r1, sp, #4
 80159f6:	b142      	cbz	r2, 8015a0a <__ascii_mbtowc+0x1a>
 80159f8:	b14b      	cbz	r3, 8015a0e <__ascii_mbtowc+0x1e>
 80159fa:	7813      	ldrb	r3, [r2, #0]
 80159fc:	600b      	str	r3, [r1, #0]
 80159fe:	7812      	ldrb	r2, [r2, #0]
 8015a00:	1e10      	subs	r0, r2, #0
 8015a02:	bf18      	it	ne
 8015a04:	2001      	movne	r0, #1
 8015a06:	b002      	add	sp, #8
 8015a08:	4770      	bx	lr
 8015a0a:	4610      	mov	r0, r2
 8015a0c:	e7fb      	b.n	8015a06 <__ascii_mbtowc+0x16>
 8015a0e:	f06f 0001 	mvn.w	r0, #1
 8015a12:	e7f8      	b.n	8015a06 <__ascii_mbtowc+0x16>

08015a14 <__ascii_wctomb>:
 8015a14:	4603      	mov	r3, r0
 8015a16:	4608      	mov	r0, r1
 8015a18:	b141      	cbz	r1, 8015a2c <__ascii_wctomb+0x18>
 8015a1a:	2aff      	cmp	r2, #255	@ 0xff
 8015a1c:	d904      	bls.n	8015a28 <__ascii_wctomb+0x14>
 8015a1e:	228a      	movs	r2, #138	@ 0x8a
 8015a20:	601a      	str	r2, [r3, #0]
 8015a22:	f04f 30ff 	mov.w	r0, #4294967295
 8015a26:	4770      	bx	lr
 8015a28:	700a      	strb	r2, [r1, #0]
 8015a2a:	2001      	movs	r0, #1
 8015a2c:	4770      	bx	lr
	...

08015a30 <fiprintf>:
 8015a30:	b40e      	push	{r1, r2, r3}
 8015a32:	b503      	push	{r0, r1, lr}
 8015a34:	4601      	mov	r1, r0
 8015a36:	ab03      	add	r3, sp, #12
 8015a38:	4805      	ldr	r0, [pc, #20]	@ (8015a50 <fiprintf+0x20>)
 8015a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a3e:	6800      	ldr	r0, [r0, #0]
 8015a40:	9301      	str	r3, [sp, #4]
 8015a42:	f7ff fd4b 	bl	80154dc <_vfiprintf_r>
 8015a46:	b002      	add	sp, #8
 8015a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a4c:	b003      	add	sp, #12
 8015a4e:	4770      	bx	lr
 8015a50:	24000124 	.word	0x24000124

08015a54 <abort>:
 8015a54:	b508      	push	{r3, lr}
 8015a56:	2006      	movs	r0, #6
 8015a58:	f000 f82c 	bl	8015ab4 <raise>
 8015a5c:	2001      	movs	r0, #1
 8015a5e:	f7ec fab9 	bl	8001fd4 <_exit>

08015a62 <_raise_r>:
 8015a62:	291f      	cmp	r1, #31
 8015a64:	b538      	push	{r3, r4, r5, lr}
 8015a66:	4605      	mov	r5, r0
 8015a68:	460c      	mov	r4, r1
 8015a6a:	d904      	bls.n	8015a76 <_raise_r+0x14>
 8015a6c:	2316      	movs	r3, #22
 8015a6e:	6003      	str	r3, [r0, #0]
 8015a70:	f04f 30ff 	mov.w	r0, #4294967295
 8015a74:	bd38      	pop	{r3, r4, r5, pc}
 8015a76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015a78:	b112      	cbz	r2, 8015a80 <_raise_r+0x1e>
 8015a7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015a7e:	b94b      	cbnz	r3, 8015a94 <_raise_r+0x32>
 8015a80:	4628      	mov	r0, r5
 8015a82:	f000 f831 	bl	8015ae8 <_getpid_r>
 8015a86:	4622      	mov	r2, r4
 8015a88:	4601      	mov	r1, r0
 8015a8a:	4628      	mov	r0, r5
 8015a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a90:	f000 b818 	b.w	8015ac4 <_kill_r>
 8015a94:	2b01      	cmp	r3, #1
 8015a96:	d00a      	beq.n	8015aae <_raise_r+0x4c>
 8015a98:	1c59      	adds	r1, r3, #1
 8015a9a:	d103      	bne.n	8015aa4 <_raise_r+0x42>
 8015a9c:	2316      	movs	r3, #22
 8015a9e:	6003      	str	r3, [r0, #0]
 8015aa0:	2001      	movs	r0, #1
 8015aa2:	e7e7      	b.n	8015a74 <_raise_r+0x12>
 8015aa4:	2100      	movs	r1, #0
 8015aa6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015aaa:	4620      	mov	r0, r4
 8015aac:	4798      	blx	r3
 8015aae:	2000      	movs	r0, #0
 8015ab0:	e7e0      	b.n	8015a74 <_raise_r+0x12>
	...

08015ab4 <raise>:
 8015ab4:	4b02      	ldr	r3, [pc, #8]	@ (8015ac0 <raise+0xc>)
 8015ab6:	4601      	mov	r1, r0
 8015ab8:	6818      	ldr	r0, [r3, #0]
 8015aba:	f7ff bfd2 	b.w	8015a62 <_raise_r>
 8015abe:	bf00      	nop
 8015ac0:	24000124 	.word	0x24000124

08015ac4 <_kill_r>:
 8015ac4:	b538      	push	{r3, r4, r5, lr}
 8015ac6:	4d07      	ldr	r5, [pc, #28]	@ (8015ae4 <_kill_r+0x20>)
 8015ac8:	2300      	movs	r3, #0
 8015aca:	4604      	mov	r4, r0
 8015acc:	4608      	mov	r0, r1
 8015ace:	4611      	mov	r1, r2
 8015ad0:	602b      	str	r3, [r5, #0]
 8015ad2:	f7ec fa6f 	bl	8001fb4 <_kill>
 8015ad6:	1c43      	adds	r3, r0, #1
 8015ad8:	d102      	bne.n	8015ae0 <_kill_r+0x1c>
 8015ada:	682b      	ldr	r3, [r5, #0]
 8015adc:	b103      	cbz	r3, 8015ae0 <_kill_r+0x1c>
 8015ade:	6023      	str	r3, [r4, #0]
 8015ae0:	bd38      	pop	{r3, r4, r5, pc}
 8015ae2:	bf00      	nop
 8015ae4:	2400163c 	.word	0x2400163c

08015ae8 <_getpid_r>:
 8015ae8:	f7ec ba5c 	b.w	8001fa4 <_getpid>

08015aec <_init>:
 8015aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aee:	bf00      	nop
 8015af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015af2:	bc08      	pop	{r3}
 8015af4:	469e      	mov	lr, r3
 8015af6:	4770      	bx	lr

08015af8 <_fini>:
 8015af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015afa:	bf00      	nop
 8015afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015afe:	bc08      	pop	{r3}
 8015b00:	469e      	mov	lr, r3
 8015b02:	4770      	bx	lr
