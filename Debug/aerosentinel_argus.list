
aerosentinel_argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011320  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080115cc  080115cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801167c  0801167c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011684  08011684  00012684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011688  08011688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  0801168c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001070  24000104  08011790  00013104  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001174  08011790  00013174  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013104  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002abc5  00000000  00000000  00013132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005452  00000000  00000000  0003dcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002290  00000000  00000000  00043150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ad9  00000000  00000000  000453e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037c75  00000000  00000000  00046eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031934  00000000  00000000  0007eb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152e40  00000000  00000000  000b0462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002032a2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000948c  00000000  00000000  002032e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0020c774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000104 	.word	0x24000104
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080115b4 	.word	0x080115b4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000108 	.word	0x24000108
 80002e8:	080115b4 	.word	0x080115b4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e0:	f000 fcd4 	bl	8000f8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 f9de 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fbca 	bl	8000d84 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f0:	f000 f88c 	bl	800070c <MX_I2C1_Init>
  MX_I2C4_Init();
 80005f4:	f000 f90a 	bl	800080c <MX_I2C4_Init>
  MX_SDMMC1_SD_Init();
 80005f8:	f000 f948 	bl	800088c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80005fc:	f000 f96a 	bl	80008d4 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000600:	f000 f9be 	bl	8000980 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8000604:	f000 fb14 	bl	8000c30 <MX_USART2_UART_Init>
  MX_USART3_Init();
 8000608:	f000 fb5e 	bl	8000cc8 <MX_USART3_Init>
  MX_I2C2_Init();
 800060c:	f000 f8be 	bl	800078c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000610:	f010 fa96 	bl	8010b40 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000614:	f000 fa0a 	bl	8000a2c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000618:	f000 fab0 	bl	8000b7c <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0x40>

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	@ 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	224c      	movs	r2, #76	@ 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f010 ff94 	bl	801155c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f010 ff8e 	bl	801155c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000640:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <SystemClock_Config+0xe4>)
 8000642:	f04f 32ff 	mov.w	r2, #4294967295
 8000646:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064a:	2002      	movs	r0, #2
 800064c:	f003 f9b0 	bl	80039b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <SystemClock_Config+0xe8>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <SystemClock_Config+0xe8>)
 800065a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <SystemClock_Config+0xe8>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066c:	bf00      	nop
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <SystemClock_Config+0xe8>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800067a:	d1f8      	bne.n	800066e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800067c:	2321      	movs	r3, #33	@ 0x21
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000684:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	2302      	movs	r3, #2
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000692:	2304      	movs	r3, #4
 8000694:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 11;
 8000696:	230b      	movs	r3, #11
 8000698:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006a6:	230c      	movs	r3, #12
 80006a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f9c4 	bl	8003a44 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c2:	f000 fc8f 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	233f      	movs	r3, #63	@ 0x3f
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006da:	2340      	movs	r3, #64	@ 0x40
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006e2:	2340      	movs	r3, #64	@ 0x40
 80006e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fddc 	bl	80042a8 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80006f6:	f000 fc75 	bl	8000fe4 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3770      	adds	r7, #112	@ 0x70
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	58024400 	.word	0x58024400
 8000708:	58024800 	.word	0x58024800

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <MX_I2C1_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x008080C1;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000718:	4a1b      	ldr	r2, [pc, #108]	@ (8000788 <MX_I2C1_Init+0x7c>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000724:	2201      	movs	r2, #1
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000746:	480e      	ldr	r0, [pc, #56]	@ (8000780 <MX_I2C1_Init+0x74>)
 8000748:	f001 fd34 	bl	80021b4 <HAL_I2C_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000752:	f000 fc47 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	4809      	ldr	r0, [pc, #36]	@ (8000780 <MX_I2C1_Init+0x74>)
 800075a:	f001 fdc7 	bl	80022ec <HAL_I2CEx_ConfigAnalogFilter>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000764:	f000 fc3e 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_I2C1_Init+0x74>)
 800076c:	f001 fe09 	bl	8002382 <HAL_I2CEx_ConfigDigitalFilter>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 fc35 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	24000120 	.word	0x24000120
 8000784:	40005400 	.word	0x40005400
 8000788:	008080c1 	.word	0x008080c1

0800078c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <MX_I2C2_Init+0x74>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <MX_I2C2_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x008080C1;
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_I2C2_Init+0x74>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	@ (8000808 <MX_I2C2_Init+0x7c>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_I2C2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a2:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_I2C2_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_I2C2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ae:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_I2C2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_I2C2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_I2C2_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007c6:	480e      	ldr	r0, [pc, #56]	@ (8000800 <MX_I2C2_Init+0x74>)
 80007c8:	f001 fcf4 	bl	80021b4 <HAL_I2C_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007d2:	f000 fc07 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4809      	ldr	r0, [pc, #36]	@ (8000800 <MX_I2C2_Init+0x74>)
 80007da:	f001 fd87 	bl	80022ec <HAL_I2CEx_ConfigAnalogFilter>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007e4:	f000 fbfe 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_I2C2_Init+0x74>)
 80007ec:	f001 fdc9 	bl	8002382 <HAL_I2CEx_ConfigDigitalFilter>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f000 fbf5 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	24000174 	.word	0x24000174
 8000804:	40005800 	.word	0x40005800
 8000808:	008080c1 	.word	0x008080c1

0800080c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000810:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_I2C4_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_I2C4_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x008080C1;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_I2C4_Init+0x74>)
 8000818:	4a1b      	ldr	r2, [pc, #108]	@ (8000888 <MX_I2C4_Init+0x7c>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_I2C4_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_I2C4_Init+0x74>)
 8000824:	2201      	movs	r2, #1
 8000826:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_I2C4_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_I2C4_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_I2C4_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_I2C4_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_I2C4_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <MX_I2C4_Init+0x74>)
 8000848:	f001 fcb4 	bl	80021b4 <HAL_I2C_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000852:	f000 fbc7 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4809      	ldr	r0, [pc, #36]	@ (8000880 <MX_I2C4_Init+0x74>)
 800085a:	f001 fd47 	bl	80022ec <HAL_I2CEx_ConfigAnalogFilter>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000864:	f000 fbbe 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_I2C4_Init+0x74>)
 800086c:	f001 fd89 	bl	8002382 <HAL_I2CEx_ConfigDigitalFilter>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fbb5 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	240001c8 	.word	0x240001c8
 8000884:	58001c00 	.word	0x58001c00
 8000888:	008080c1 	.word	0x008080c1

0800088c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_SDMMC1_SD_Init+0x40>)
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <MX_SDMMC1_SD_Init+0x44>)
 8000894:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <MX_SDMMC1_SD_Init+0x40>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800089c:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_SDMMC1_SD_Init+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <MX_SDMMC1_SD_Init+0x40>)
 80008a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_SDMMC1_SD_Init+0x40>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_SDMMC1_SD_Init+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_SDMMC1_SD_Init+0x40>)
 80008b8:	f006 fc8c 	bl	80071d4 <HAL_SD_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80008c2:	f000 fb8f 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2400021c 	.word	0x2400021c
 80008d0:	52007000 	.word	0x52007000

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <MX_SPI1_Init+0xa4>)
 80008da:	4a28      	ldr	r2, [pc, #160]	@ (800097c <MX_SPI1_Init+0xa8>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <MX_SPI1_Init+0xa4>)
 80008e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <MX_SPI1_Init+0xa4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <MX_SPI1_Init+0xa4>)
 80008ee:	2203      	movs	r2, #3
 80008f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_SPI1_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_SPI1_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000900:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_SPI1_Init+0xa4>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000918:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_SPI1_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800091e:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000926:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800092a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_SPI1_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_SPI1_Init+0xa4>)
 800093a:	2200      	movs	r2, #0
 800093c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000940:	2200      	movs	r2, #0
 8000942:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000946:	2200      	movs	r2, #0
 8000948:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_SPI1_Init+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_SPI1_Init+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_SPI1_Init+0xa4>)
 8000964:	f007 fca4 	bl	80082b0 <HAL_SPI_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800096e:	f000 fb39 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000298 	.word	0x24000298
 800097c:	40013000 	.word	0x40013000

08000980 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000984:	4b27      	ldr	r3, [pc, #156]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 8000986:	4a28      	ldr	r2, [pc, #160]	@ (8000a28 <MX_SPI4_Init+0xa8>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 800098c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000990:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000998:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 800099a:	2203      	movs	r2, #3
 800099c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099e:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009b0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80009ca:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_SPI4_Init+0xa4>)
 8000a10:	f007 fc4e 	bl	80082b0 <HAL_SPI_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000a1a:	f000 fae3 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000320 	.word	0x24000320
 8000a28:	40013400 	.word	0x40013400

08000a2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b098      	sub	sp, #96	@ 0x60
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2234      	movs	r2, #52	@ 0x34
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f010 fd7f 	bl	801155c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a5e:	4b45      	ldr	r3, [pc, #276]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000a60:	4a45      	ldr	r2, [pc, #276]	@ (8000b78 <MX_TIM1_Init+0x14c>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a64:	4b43      	ldr	r3, [pc, #268]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a70:	4b40      	ldr	r3, [pc, #256]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b3e      	ldr	r3, [pc, #248]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a8a:	483a      	ldr	r0, [pc, #232]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000a8c:	f007 fd4f 	bl	800852e <HAL_TIM_PWM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f000 faa5 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4831      	ldr	r0, [pc, #196]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000aae:	f008 fa25 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ab8:	f000 fa94 	bl	8000fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000abc:	2360      	movs	r3, #96	@ 0x60
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000adc:	2200      	movs	r2, #0
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4824      	ldr	r0, [pc, #144]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000ae2:	f007 fd7b 	bl	80085dc <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000aec:	f000 fa7a 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000af0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000af4:	2204      	movs	r2, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	481e      	ldr	r0, [pc, #120]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000afa:	f007 fd6f 	bl	80085dc <HAL_TIM_PWM_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b04:	f000 fa6e 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4818      	ldr	r0, [pc, #96]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000b12:	f007 fd63 	bl	80085dc <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000b1c:	f000 fa62 	bl	8000fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000b56:	f008 fa5f 	bl	8009018 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000b60:	f000 fa40 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b64:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <MX_TIM1_Init+0x148>)
 8000b66:	f000 fce5 	bl	8001534 <HAL_TIM_MspPostInit>

}
 8000b6a:	bf00      	nop
 8000b6c:	3760      	adds	r7, #96	@ 0x60
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	240003a8 	.word	0x240003a8
 8000b78:	40010000 	.word	0x40010000

08000b7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba0:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000ba2:	4a22      	ldr	r2, [pc, #136]	@ (8000c2c <MX_TIM3_Init+0xb0>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000bb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bc6:	4818      	ldr	r0, [pc, #96]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000bc8:	f007 fcb1 	bl	800852e <HAL_TIM_PWM_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000bd2:	f000 fa07 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000be6:	f008 f989 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000bf0:	f000 f9f8 	bl	8000fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf4:	2360      	movs	r3, #96	@ 0x60
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	220c      	movs	r2, #12
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4807      	ldr	r0, [pc, #28]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000c0c:	f007 fce6 	bl	80085dc <HAL_TIM_PWM_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c16:	f000 f9e5 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c1a:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <MX_TIM3_Init+0xac>)
 8000c1c:	f000 fc8a 	bl	8001534 <HAL_TIM_MspPostInit>

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	@ 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	240003f4 	.word	0x240003f4
 8000c2c:	40000400 	.word	0x40000400

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c36:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <MX_USART2_UART_Init+0x94>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c78:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c7a:	f008 fa59 	bl	8009130 <HAL_UART_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c84:	f000 f9ae 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c8c:	f009 fb65 	bl	800a35a <HAL_UARTEx_SetTxFifoThreshold>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c96:	f000 f9a5 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4808      	ldr	r0, [pc, #32]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000c9e:	f009 fb9a 	bl	800a3d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca8:	f000 f99c 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <MX_USART2_UART_Init+0x90>)
 8000cae:	f009 fb1b 	bl	800a2e8 <HAL_UARTEx_DisableFifoMode>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb8:	f000 f994 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	24000440 	.word	0x24000440
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000cce:	4a2c      	ldr	r2, [pc, #176]	@ (8000d80 <MX_USART3_Init+0xb8>)
 8000cd0:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000cda:	4b28      	ldr	r3, [pc, #160]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000cec:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000cf2:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000cf8:	4b20      	ldr	r3, [pc, #128]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000d10:	481a      	ldr	r0, [pc, #104]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000d12:	f009 fbed 	bl	800a4f0 <HAL_USART_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8000d1c:	f000 f962 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4816      	ldr	r0, [pc, #88]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000d24:	f00a fb14 	bl	800b350 <HAL_USARTEx_SetTxFifoThreshold>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000d2e:	f000 f959 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4811      	ldr	r0, [pc, #68]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000d36:	f00a fb49 	bl	800b3cc <HAL_USARTEx_SetRxFifoThreshold>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f000 f950 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000d48:	f00a fa8c 	bl	800b264 <HAL_USARTEx_ConfigNSS>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8000d52:	f000 f947 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8000d56:	4809      	ldr	r0, [pc, #36]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000d58:	f00a fac1 	bl	800b2de <HAL_USARTEx_DisableFifoMode>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8000d62:	f000 f93f 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_USART3_Init+0xb4>)
 8000d68:	f00a fa27 	bl	800b1ba <HAL_USARTEx_EnableSlaveMode>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8000d72:	f000 f937 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	240004d4 	.word	0x240004d4
 8000d80:	40004800 	.word	0x40004800

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	@ 0x30
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9a:	4b76      	ldr	r3, [pc, #472]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000da0:	4a74      	ldr	r2, [pc, #464]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000daa:	4b72      	ldr	r3, [pc, #456]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db8:	4b6e      	ldr	r3, [pc, #440]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000dba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dbe:	4a6d      	ldr	r2, [pc, #436]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	4b67      	ldr	r3, [pc, #412]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ddc:	4a65      	ldr	r2, [pc, #404]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000de6:	4b63      	ldr	r3, [pc, #396]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b5f      	ldr	r3, [pc, #380]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dfa:	4a5e      	ldr	r2, [pc, #376]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e04:	4b5b      	ldr	r3, [pc, #364]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	4b58      	ldr	r3, [pc, #352]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000e14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e18:	4a56      	ldr	r2, [pc, #344]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e22:	4b54      	ldr	r3, [pc, #336]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b50      	ldr	r3, [pc, #320]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000e32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e36:	4a4f      	ldr	r2, [pc, #316]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e40:	4b4c      	ldr	r3, [pc, #304]	@ (8000f74 <MX_GPIO_Init+0x1f0>)
 8000e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|MPL311_ON_Pin|BNO086_ON_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f244 010a 	movw	r1, #16394	@ 0x400a
 8000e54:	4848      	ldr	r0, [pc, #288]	@ (8000f78 <MX_GPIO_Init+0x1f4>)
 8000e56:	f001 f993 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MS5607_ON_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f242 0110 	movw	r1, #8208	@ 0x2010
 8000e60:	4846      	ldr	r0, [pc, #280]	@ (8000f7c <MX_GPIO_Init+0x1f8>)
 8000e62:	f001 f98d 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADXL375_ON_Pin|BNO055_ON_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f248 0108 	movw	r1, #32776	@ 0x8008
 8000e6c:	4844      	ldr	r0, [pc, #272]	@ (8000f80 <MX_GPIO_Init+0x1fc>)
 8000e6e:	f001 f987 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BNO086_RST_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f248 0120 	movw	r1, #32800	@ 0x8020
 8000e78:	4842      	ldr	r0, [pc, #264]	@ (8000f84 <MX_GPIO_Init+0x200>)
 8000e7a:	f001 f981 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO055_1_RST_Pin|GPS_RST_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2118      	movs	r1, #24
 8000e82:	4841      	ldr	r0, [pc, #260]	@ (8000f88 <MX_GPIO_Init+0x204>)
 8000e84:	f001 f97c 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS_Pin MPL311_ON_Pin BNO086_ON_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|MPL311_ON_Pin|BNO086_ON_Pin;
 8000e88:	f244 030a 	movw	r3, #16394	@ 0x400a
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4835      	ldr	r0, [pc, #212]	@ (8000f78 <MX_GPIO_Init+0x1f4>)
 8000ea2:	f000 ffbd 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS5607_ON_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = MS5607_ON_Pin|SPI1_CS_Pin;
 8000ea6:	f242 0310 	movw	r3, #8208	@ 0x2010
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	482f      	ldr	r0, [pc, #188]	@ (8000f7c <MX_GPIO_Init+0x1f8>)
 8000ec0:	f000 ffae 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_ON_Pin BNO055_ON_Pin */
  GPIO_InitStruct.Pin = ADXL375_ON_Pin|BNO055_ON_Pin;
 8000ec4:	f248 0308 	movw	r3, #32776	@ 0x8008
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4828      	ldr	r0, [pc, #160]	@ (8000f80 <MX_GPIO_Init+0x1fc>)
 8000ede:	f000 ff9f 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT2_Pin */
  GPIO_InitStruct.Pin = SPI1_INT2_Pin;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI1_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	@ (8000f7c <MX_GPIO_Init+0x1f8>)
 8000ef8:	f000 ff92 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_INT1_Pin MPL311_INT1_Pin MPL311_INT2_Pin BNO086_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT1_Pin|MPL311_INT1_Pin|MPL311_INT2_Pin|BNO086_INT_Pin;
 8000efc:	f246 0311 	movw	r3, #24593	@ 0x6011
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	481c      	ldr	r0, [pc, #112]	@ (8000f84 <MX_GPIO_Init+0x200>)
 8000f14:	f000 ff84 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : HEARTBEAT_Pin BNO086_RST_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin|BNO086_RST_Pin;
 8000f18:	f248 0320 	movw	r3, #32800	@ 0x8020
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4814      	ldr	r0, [pc, #80]	@ (8000f84 <MX_GPIO_Init+0x200>)
 8000f32:	f000 ff75 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO055_1_INT_Pin */
  GPIO_InitStruct.Pin = BNO055_1_INT_Pin;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BNO055_1_INT_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <MX_GPIO_Init+0x204>)
 8000f4c:	f000 ff68 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO055_1_RST_Pin GPS_RST_Pin */
  GPIO_InitStruct.Pin = BNO055_1_RST_Pin|GPS_RST_Pin;
 8000f50:	2318      	movs	r3, #24
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <MX_GPIO_Init+0x204>)
 8000f68:	f000 ff5a 	bl	8001e20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	@ 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58021000 	.word	0x58021000
 8000f7c:	58020800 	.word	0x58020800
 8000f80:	58020000 	.word	0x58020000
 8000f84:	58020400 	.word	0x58020400
 8000f88:	58020c00 	.word	0x58020c00

08000f8c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f9e:	f000 fec7 	bl	8001d30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fae:	231f      	movs	r3, #31
 8000fb0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fb2:	2387      	movs	r3, #135	@ 0x87
 8000fb4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fee5 	bl	8001da0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fd6:	2004      	movs	r0, #4
 8000fd8:	f000 fec2 	bl	8001d60 <HAL_MPU_Enable>

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_MspInit+0x30>)
 8000ff8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ffc:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <HAL_MspInit+0x30>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_MspInit+0x30>)
 8001008:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	58024400 	.word	0x58024400

08001024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0be      	sub	sp, #248	@ 0xf8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	22c0      	movs	r2, #192	@ 0xc0
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f010 fa89 	bl	801155c <memset>
  if(hi2c->Instance==I2C1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a73      	ldr	r2, [pc, #460]	@ (800121c <HAL_I2C_MspInit+0x1f8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d146      	bne.n	80010e2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001054:	f04f 0208 	mov.w	r2, #8
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fca8 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001076:	f7ff ffb5 	bl	8000fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b69      	ldr	r3, [pc, #420]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 800107c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001080:	4a67      	ldr	r2, [pc, #412]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800108a:	4b65      	ldr	r3, [pc, #404]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 800108c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001098:	23c0      	movs	r3, #192	@ 0xc0
 800109a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109e:	2312      	movs	r3, #18
 80010a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b0:	2304      	movs	r3, #4
 80010b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4859      	ldr	r0, [pc, #356]	@ (8001224 <HAL_I2C_MspInit+0x200>)
 80010be:	f000 feaf 	bl	8001e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c2:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 80010c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80010c8:	4a55      	ldr	r2, [pc, #340]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 80010ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ce:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80010d2:	4b53      	ldr	r3, [pc, #332]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 80010d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80010e0:	e098      	b.n	8001214 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a50      	ldr	r2, [pc, #320]	@ (8001228 <HAL_I2C_MspInit+0x204>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d147      	bne.n	800117c <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010ec:	f04f 0208 	mov.w	r2, #8
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fc5c 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800110e:	f7ff ff69 	bl	8000fe4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4b43      	ldr	r3, [pc, #268]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 8001114:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001118:	4a41      	ldr	r2, [pc, #260]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001122:	4b3f      	ldr	r3, [pc, #252]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 8001124:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001130:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001134:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001138:	2312      	movs	r3, #18
 800113a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800114a:	2304      	movs	r3, #4
 800114c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001154:	4619      	mov	r1, r3
 8001156:	4833      	ldr	r0, [pc, #204]	@ (8001224 <HAL_I2C_MspInit+0x200>)
 8001158:	f000 fe62 	bl	8001e20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800115c:	4b30      	ldr	r3, [pc, #192]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 800115e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001162:	4a2f      	ldr	r2, [pc, #188]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001168:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800116c:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 800116e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
}
 800117a:	e04b      	b.n	8001214 <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C4)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a2a      	ldr	r2, [pc, #168]	@ (800122c <HAL_I2C_MspInit+0x208>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d146      	bne.n	8001214 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001186:	f04f 0210 	mov.w	r2, #16
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	4618      	mov	r0, r3
 800119e:	f003 fc0f 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_I2C_MspInit+0x188>
      Error_Handler();
 80011a8:	f7ff ff1c 	bl	8000fe4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 80011ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 80011be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011ca:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d2:	2312      	movs	r3, #18
 80011d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011e4:	2304      	movs	r3, #4
 80011e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011ee:	4619      	mov	r1, r3
 80011f0:	480f      	ldr	r0, [pc, #60]	@ (8001230 <HAL_I2C_MspInit+0x20c>)
 80011f2:	f000 fe15 	bl	8001e20 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 80011f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011fc:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 80011fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001202:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_I2C_MspInit+0x1fc>)
 8001208:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800120c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
}
 8001214:	bf00      	nop
 8001216:	37f8      	adds	r7, #248	@ 0xf8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	58024400 	.word	0x58024400
 8001224:	58020400 	.word	0x58020400
 8001228:	40005800 	.word	0x40005800
 800122c:	58001c00 	.word	0x58001c00
 8001230:	58020c00 	.word	0x58020c00

08001234 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0bc      	sub	sp, #240	@ 0xf0
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	22c0      	movs	r2, #192	@ 0xc0
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f010 f981 	bl	801155c <memset>
  if(hsd->Instance==SDMMC1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a38      	ldr	r2, [pc, #224]	@ (8001340 <HAL_SD_MspInit+0x10c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d169      	bne.n	8001338 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001264:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001270:	2300      	movs	r3, #0
 8001272:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fba1 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001284:	f7ff feae 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001288:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <HAL_SD_MspInit+0x110>)
 800128a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800128e:	4a2d      	ldr	r2, [pc, #180]	@ (8001344 <HAL_SD_MspInit+0x110>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001294:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8001298:	4b2a      	ldr	r3, [pc, #168]	@ (8001344 <HAL_SD_MspInit+0x110>)
 800129a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800129e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <HAL_SD_MspInit+0x110>)
 80012a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012ac:	4a25      	ldr	r2, [pc, #148]	@ (8001344 <HAL_SD_MspInit+0x110>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012b6:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <HAL_SD_MspInit+0x110>)
 80012b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <HAL_SD_MspInit+0x110>)
 80012c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001344 <HAL_SD_MspInit+0x110>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_SD_MspInit+0x110>)
 80012d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012e2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80012e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012fc:	230c      	movs	r3, #12
 80012fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001306:	4619      	mov	r1, r3
 8001308:	480f      	ldr	r0, [pc, #60]	@ (8001348 <HAL_SD_MspInit+0x114>)
 800130a:	f000 fd89 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800130e:	2304      	movs	r3, #4
 8001310:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001326:	230c      	movs	r3, #12
 8001328:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <HAL_SD_MspInit+0x118>)
 8001334:	f000 fd74 	bl	8001e20 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001338:	bf00      	nop
 800133a:	37f0      	adds	r7, #240	@ 0xf0
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	52007000 	.word	0x52007000
 8001344:	58024400 	.word	0x58024400
 8001348:	58020800 	.word	0x58020800
 800134c:	58020c00 	.word	0x58020c00

08001350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0bc      	sub	sp, #240	@ 0xf0
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	22c0      	movs	r2, #192	@ 0xc0
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f010 f8f3 	bl	801155c <memset>
  if(hspi->Instance==SPI1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a4c      	ldr	r2, [pc, #304]	@ (80014ac <HAL_SPI_MspInit+0x15c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d145      	bne.n	800140c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001380:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800138c:	2300      	movs	r3, #0
 800138e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fb13 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80013a0:	f7ff fe20 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a4:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 80013a6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80013aa:	4a41      	ldr	r2, [pc, #260]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 80013ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013b0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80013b4:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 80013b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80013ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 80013c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013c8:	4a39      	ldr	r2, [pc, #228]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 80013d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013e0:	23e0      	movs	r3, #224	@ 0xe0
 80013e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f8:	2305      	movs	r3, #5
 80013fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001402:	4619      	mov	r1, r3
 8001404:	482b      	ldr	r0, [pc, #172]	@ (80014b4 <HAL_SPI_MspInit+0x164>)
 8001406:	f000 fd0b 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800140a:	e04a      	b.n	80014a2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI4)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a29      	ldr	r2, [pc, #164]	@ (80014b8 <HAL_SPI_MspInit+0x168>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d145      	bne.n	80014a2 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001416:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fac7 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001438:	f7ff fdd4 	bl	8000fe4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800143c:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 800143e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001442:	4a1b      	ldr	r2, [pc, #108]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 8001444:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001448:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 800144e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 800145c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001460:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_SPI_MspInit+0x160>)
 800146c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001478:	2364      	movs	r3, #100	@ 0x64
 800147a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001490:	2305      	movs	r3, #5
 8001492:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001496:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	@ (80014bc <HAL_SPI_MspInit+0x16c>)
 800149e:	f000 fcbf 	bl	8001e20 <HAL_GPIO_Init>
}
 80014a2:	bf00      	nop
 80014a4:	37f0      	adds	r7, #240	@ 0xf0
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40013000 	.word	0x40013000
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58020000 	.word	0x58020000
 80014b8:	40013400 	.word	0x40013400
 80014bc:	58021000 	.word	0x58021000

080014c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a16      	ldr	r2, [pc, #88]	@ (8001528 <HAL_TIM_PWM_MspInit+0x68>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10f      	bne.n	80014f2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_TIM_PWM_MspInit+0x6c>)
 80014d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80014d8:	4a14      	ldr	r2, [pc, #80]	@ (800152c <HAL_TIM_PWM_MspInit+0x6c>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_TIM_PWM_MspInit+0x6c>)
 80014e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014f0:	e013      	b.n	800151a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001530 <HAL_TIM_PWM_MspInit+0x70>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d10e      	bne.n	800151a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fc:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <HAL_TIM_PWM_MspInit+0x6c>)
 80014fe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <HAL_TIM_PWM_MspInit+0x6c>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <HAL_TIM_PWM_MspInit+0x6c>)
 800150e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40010000 	.word	0x40010000
 800152c:	58024400 	.word	0x58024400
 8001530:	40000400 	.word	0x40000400

08001534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a25      	ldr	r2, [pc, #148]	@ (80015e8 <HAL_TIM_MspPostInit+0xb4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d120      	bne.n	8001598 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001556:	4b25      	ldr	r3, [pc, #148]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 8001558:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800155c:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 8001568:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RED_Pin|WHITE_Pin|GREEN_Pin;
 8001574:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4817      	ldr	r0, [pc, #92]	@ (80015f0 <HAL_TIM_MspPostInit+0xbc>)
 8001592:	f000 fc45 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001596:	e023      	b.n	80015e0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a15      	ldr	r2, [pc, #84]	@ (80015f4 <HAL_TIM_MspPostInit+0xc0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d11e      	bne.n	80015e0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015a8:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BLUE_Pin;
 80015c0:	2302      	movs	r3, #2
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d0:	2302      	movs	r3, #2
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <HAL_TIM_MspPostInit+0xc4>)
 80015dc:	f000 fc20 	bl	8001e20 <HAL_GPIO_Init>
}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	@ 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40010000 	.word	0x40010000
 80015ec:	58024400 	.word	0x58024400
 80015f0:	58021000 	.word	0x58021000
 80015f4:	40000400 	.word	0x40000400
 80015f8:	58020400 	.word	0x58020400

080015fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	22c0      	movs	r2, #192	@ 0xc0
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00f ff9d 	bl	801155c <memset>
  if(huart->Instance==USART2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a26      	ldr	r2, [pc, #152]	@ (80016c0 <HAL_UART_MspInit+0xc4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d145      	bne.n	80016b8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800162c:	f04f 0202 	mov.w	r2, #2
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4618      	mov	r0, r3
 8001644:	f003 f9bc 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800164e:	f7ff fcc9 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <HAL_UART_MspInit+0xc8>)
 8001654:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001658:	4a1a      	ldr	r2, [pc, #104]	@ (80016c4 <HAL_UART_MspInit+0xc8>)
 800165a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800165e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001662:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_UART_MspInit+0xc8>)
 8001664:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_UART_MspInit+0xc8>)
 8001672:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001676:	4a13      	ldr	r2, [pc, #76]	@ (80016c4 <HAL_UART_MspInit+0xc8>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001680:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_UART_MspInit+0xc8>)
 8001682:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800168e:	2360      	movs	r3, #96	@ 0x60
 8001690:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a6:	2307      	movs	r3, #7
 80016a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <HAL_UART_MspInit+0xcc>)
 80016b4:	f000 fbb4 	bl	8001e20 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80016b8:	bf00      	nop
 80016ba:	37e8      	adds	r7, #232	@ 0xe8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40004400 	.word	0x40004400
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58020c00 	.word	0x58020c00

080016cc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b0bc      	sub	sp, #240	@ 0xf0
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	22c0      	movs	r2, #192	@ 0xc0
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00f ff35 	bl	801155c <memset>
  if(husart->Instance==USART3)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a39      	ldr	r2, [pc, #228]	@ (80017dc <HAL_USART_MspInit+0x110>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d16b      	bne.n	80017d4 <HAL_USART_MspInit+0x108>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016fc:	f04f 0202 	mov.w	r2, #2
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f954 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800171e:	f7ff fc61 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001722:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <HAL_USART_MspInit+0x114>)
 8001724:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001728:	4a2d      	ldr	r2, [pc, #180]	@ (80017e0 <HAL_USART_MspInit+0x114>)
 800172a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001732:	4b2b      	ldr	r3, [pc, #172]	@ (80017e0 <HAL_USART_MspInit+0x114>)
 8001734:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <HAL_USART_MspInit+0x114>)
 8001742:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001746:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <HAL_USART_MspInit+0x114>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <HAL_USART_MspInit+0x114>)
 8001752:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <HAL_USART_MspInit+0x114>)
 8001760:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001764:	4a1e      	ldr	r2, [pc, #120]	@ (80017e0 <HAL_USART_MspInit+0x114>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_USART_MspInit+0x114>)
 8001770:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800177c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001780:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001796:	2307      	movs	r3, #7
 8001798:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017a0:	4619      	mov	r1, r3
 80017a2:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <HAL_USART_MspInit+0x118>)
 80017a4:	f000 fb3c 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80017a8:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 80017ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c2:	2307      	movs	r3, #7
 80017c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <HAL_USART_MspInit+0x11c>)
 80017d0:	f000 fb26 	bl	8001e20 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80017d4:	bf00      	nop
 80017d6:	37f0      	adds	r7, #240	@ 0xf0
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40004800 	.word	0x40004800
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58020400 	.word	0x58020400
 80017e8:	58020c00 	.word	0x58020c00

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <NMI_Handler+0x4>

080017f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <MemManage_Handler+0x4>

08001804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <UsageFault_Handler+0x4>

08001814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 f921 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <OTG_HS_IRQHandler+0x10>)
 8001852:	f000 ff23 	bl	800269c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	24000a18 	.word	0x24000a18

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001864:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <SystemInit+0xd0>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186a:	4a31      	ldr	r2, [pc, #196]	@ (8001930 <SystemInit+0xd0>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001874:	4b2f      	ldr	r3, [pc, #188]	@ (8001934 <SystemInit+0xd4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	2b02      	cmp	r3, #2
 800187e:	d807      	bhi.n	8001890 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001880:	4b2c      	ldr	r3, [pc, #176]	@ (8001934 <SystemInit+0xd4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 030f 	bic.w	r3, r3, #15
 8001888:	4a2a      	ldr	r2, [pc, #168]	@ (8001934 <SystemInit+0xd4>)
 800188a:	f043 0303 	orr.w	r3, r3, #3
 800188e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001890:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <SystemInit+0xd8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a28      	ldr	r2, [pc, #160]	@ (8001938 <SystemInit+0xd8>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800189c:	4b26      	ldr	r3, [pc, #152]	@ (8001938 <SystemInit+0xd8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018a2:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <SystemInit+0xd8>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4924      	ldr	r1, [pc, #144]	@ (8001938 <SystemInit+0xd8>)
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <SystemInit+0xdc>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <SystemInit+0xd4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <SystemInit+0xd4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 030f 	bic.w	r3, r3, #15
 80018c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001934 <SystemInit+0xd4>)
 80018c4:	f043 0303 	orr.w	r3, r3, #3
 80018c8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <SystemInit+0xd8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <SystemInit+0xd8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <SystemInit+0xd8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <SystemInit+0xd8>)
 80018de:	4a18      	ldr	r2, [pc, #96]	@ (8001940 <SystemInit+0xe0>)
 80018e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <SystemInit+0xd8>)
 80018e4:	4a17      	ldr	r2, [pc, #92]	@ (8001944 <SystemInit+0xe4>)
 80018e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <SystemInit+0xd8>)
 80018ea:	4a17      	ldr	r2, [pc, #92]	@ (8001948 <SystemInit+0xe8>)
 80018ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <SystemInit+0xd8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018f4:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <SystemInit+0xd8>)
 80018f6:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <SystemInit+0xe8>)
 80018f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <SystemInit+0xd8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001900:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <SystemInit+0xd8>)
 8001902:	4a11      	ldr	r2, [pc, #68]	@ (8001948 <SystemInit+0xe8>)
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <SystemInit+0xd8>)
 8001908:	2200      	movs	r2, #0
 800190a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <SystemInit+0xd8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <SystemInit+0xd8>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001916:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <SystemInit+0xd8>)
 800191a:	2200      	movs	r2, #0
 800191c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <SystemInit+0xec>)
 8001920:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001924:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00
 8001934:	52002000 	.word	0x52002000
 8001938:	58024400 	.word	0x58024400
 800193c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001940:	02020200 	.word	0x02020200
 8001944:	01ff0000 	.word	0x01ff0000
 8001948:	01010280 	.word	0x01010280
 800194c:	52004000 	.word	0x52004000

08001950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001988 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001954:	f7ff ff84 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	@ (8001990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	@ (800199c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197e:	f00f fdf5 	bl	801156c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001982:	f7fe fe2b 	bl	80005dc <main>
  bx  lr
 8001986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001988:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800198c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001990:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8001994:	0801168c 	.word	0x0801168c
  ldr r2, =_sbss
 8001998:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 800199c:	24001174 	.word	0x24001174

080019a0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019aa:	2003      	movs	r0, #3
 80019ac:	f000 f980 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80019b0:	f002 fe30 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_Init+0x68>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	4913      	ldr	r1, [pc, #76]	@ (8001a10 <HAL_Init+0x6c>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80019ce:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_Init+0x68>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a10 <HAL_Init+0x6c>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <HAL_Init+0x70>)
 80019e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <HAL_Init+0x74>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ee:	200f      	movs	r0, #15
 80019f0:	f000 f814 	bl	8001a1c <HAL_InitTick>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e002      	b.n	8001a04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019fe:	f7ff faf7 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	08011610 	.word	0x08011610
 8001a14:	24000004 	.word	0x24000004
 8001a18:	24000000 	.word	0x24000000

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a24:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_InitTick+0x60>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e021      	b.n	8001a74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_InitTick+0x64>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_InitTick+0x60>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f965 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f92f 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	@ (8001a84 <HAL_InitTick+0x68>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2400000c 	.word	0x2400000c
 8001a80:	24000000 	.word	0x24000000
 8001a84:	24000008 	.word	0x24000008

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2400000c 	.word	0x2400000c
 8001aac:	24000534 	.word	0x24000534

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	24000534 	.word	0x24000534

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2400000c 	.word	0x2400000c

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	05fa0000 	.word	0x05fa0000

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	@ (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	@ (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	@ (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	@ 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff40 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff90 	bl	8001c04 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5f 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff33 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa4 	bl	8001c6c <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d34:	f3bf 8f5f 	dmb	sy
}
 8001d38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <HAL_MPU_Disable+0x28>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	4a06      	ldr	r2, [pc, #24]	@ (8001d58 <HAL_MPU_Disable+0x28>)
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d44:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d46:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_MPU_Disable+0x2c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00
 8001d5c:	e000ed90 	.word	0xe000ed90

08001d60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d68:	4a0b      	ldr	r2, [pc, #44]	@ (8001d98 <HAL_MPU_Enable+0x38>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_MPU_Enable+0x3c>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	4a09      	ldr	r2, [pc, #36]	@ (8001d9c <HAL_MPU_Enable+0x3c>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d7c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7e:	f3bf 8f4f 	dsb	sy
}
 8001d82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d84:	f3bf 8f6f 	isb	sy
}
 8001d88:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed90 	.word	0xe000ed90
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	785a      	ldrb	r2, [r3, #1]
 8001dac:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <HAL_MPU_ConfigRegion+0x7c>)
 8001dae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001db0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_MPU_ConfigRegion+0x7c>)
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	4a19      	ldr	r2, [pc, #100]	@ (8001e1c <HAL_MPU_ConfigRegion+0x7c>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001dbc:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_MPU_ConfigRegion+0x7c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7b1b      	ldrb	r3, [r3, #12]
 8001dc8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7adb      	ldrb	r3, [r3, #11]
 8001dce:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7a9b      	ldrb	r3, [r3, #10]
 8001dd6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7b5b      	ldrb	r3, [r3, #13]
 8001dde:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001de0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7b9b      	ldrb	r3, [r3, #14]
 8001de6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001de8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7bdb      	ldrb	r3, [r3, #15]
 8001dee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001df0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7a5b      	ldrb	r3, [r3, #9]
 8001df6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001df8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7a1b      	ldrb	r3, [r3, #8]
 8001dfe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e00:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e0a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e0c:	6113      	str	r3, [r2, #16]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed90 	.word	0xe000ed90

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e2e:	4b89      	ldr	r3, [pc, #548]	@ (8002054 <HAL_GPIO_Init+0x234>)
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e32:	e194      	b.n	800215e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8186 	beq.w	8002158 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_Init+0x44>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 0201 	and.w	r2, r3, #1
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d017      	beq.n	8001f02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d123      	bne.n	8001f56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	69b9      	ldr	r1, [r7, #24]
 8001f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0203 	and.w	r2, r3, #3
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80e0 	beq.w	8002158 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f98:	4b2f      	ldr	r3, [pc, #188]	@ (8002058 <HAL_GPIO_Init+0x238>)
 8001f9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002058 <HAL_GPIO_Init+0x238>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <HAL_GPIO_Init+0x238>)
 8001faa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb6:	4a29      	ldr	r2, [pc, #164]	@ (800205c <HAL_GPIO_Init+0x23c>)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <HAL_GPIO_Init+0x240>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d052      	beq.n	8002088 <HAL_GPIO_Init+0x268>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8002064 <HAL_GPIO_Init+0x244>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d031      	beq.n	800204e <HAL_GPIO_Init+0x22e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1e      	ldr	r2, [pc, #120]	@ (8002068 <HAL_GPIO_Init+0x248>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02b      	beq.n	800204a <HAL_GPIO_Init+0x22a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800206c <HAL_GPIO_Init+0x24c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d025      	beq.n	8002046 <HAL_GPIO_Init+0x226>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8002070 <HAL_GPIO_Init+0x250>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <HAL_GPIO_Init+0x222>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <HAL_GPIO_Init+0x254>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0x21e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1a      	ldr	r2, [pc, #104]	@ (8002078 <HAL_GPIO_Init+0x258>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x21a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a19      	ldr	r2, [pc, #100]	@ (800207c <HAL_GPIO_Init+0x25c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x216>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a18      	ldr	r2, [pc, #96]	@ (8002080 <HAL_GPIO_Init+0x260>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x212>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a17      	ldr	r2, [pc, #92]	@ (8002084 <HAL_GPIO_Init+0x264>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x20e>
 800202a:	2309      	movs	r3, #9
 800202c:	e02d      	b.n	800208a <HAL_GPIO_Init+0x26a>
 800202e:	230a      	movs	r3, #10
 8002030:	e02b      	b.n	800208a <HAL_GPIO_Init+0x26a>
 8002032:	2308      	movs	r3, #8
 8002034:	e029      	b.n	800208a <HAL_GPIO_Init+0x26a>
 8002036:	2307      	movs	r3, #7
 8002038:	e027      	b.n	800208a <HAL_GPIO_Init+0x26a>
 800203a:	2306      	movs	r3, #6
 800203c:	e025      	b.n	800208a <HAL_GPIO_Init+0x26a>
 800203e:	2305      	movs	r3, #5
 8002040:	e023      	b.n	800208a <HAL_GPIO_Init+0x26a>
 8002042:	2304      	movs	r3, #4
 8002044:	e021      	b.n	800208a <HAL_GPIO_Init+0x26a>
 8002046:	2303      	movs	r3, #3
 8002048:	e01f      	b.n	800208a <HAL_GPIO_Init+0x26a>
 800204a:	2302      	movs	r3, #2
 800204c:	e01d      	b.n	800208a <HAL_GPIO_Init+0x26a>
 800204e:	2301      	movs	r3, #1
 8002050:	e01b      	b.n	800208a <HAL_GPIO_Init+0x26a>
 8002052:	bf00      	nop
 8002054:	58000080 	.word	0x58000080
 8002058:	58024400 	.word	0x58024400
 800205c:	58000400 	.word	0x58000400
 8002060:	58020000 	.word	0x58020000
 8002064:	58020400 	.word	0x58020400
 8002068:	58020800 	.word	0x58020800
 800206c:	58020c00 	.word	0x58020c00
 8002070:	58021000 	.word	0x58021000
 8002074:	58021400 	.word	0x58021400
 8002078:	58021800 	.word	0x58021800
 800207c:	58021c00 	.word	0x58021c00
 8002080:	58022000 	.word	0x58022000
 8002084:	58022400 	.word	0x58022400
 8002088:	2300      	movs	r3, #0
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	f002 0203 	and.w	r2, r2, #3
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	4093      	lsls	r3, r2
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800209a:	4938      	ldr	r1, [pc, #224]	@ (800217c <HAL_GPIO_Init+0x35c>)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	3301      	adds	r3, #1
 800215c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	f47f ae63 	bne.w	8001e34 <HAL_GPIO_Init+0x14>
  }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3724      	adds	r7, #36	@ 0x24
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	58000400 	.word	0x58000400

08002180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
 800218c:	4613      	mov	r3, r2
 800218e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002190:	787b      	ldrb	r3, [r7, #1]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800219c:	e003      	b.n	80021a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	041a      	lsls	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e08b      	b.n	80022de <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe ff22 	bl	8001024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	@ 0x24
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002204:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002214:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e006      	b.n	800223c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800223a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d108      	bne.n	8002256 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	e007      	b.n	8002266 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002264:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HAL_I2C_Init+0x134>)
 8002272:	430b      	orrs	r3, r1
 8002274:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002284:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69d9      	ldr	r1, [r3, #28]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	02008000 	.word	0x02008000

080022ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d138      	bne.n	8002374 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800230c:	2302      	movs	r3, #2
 800230e:	e032      	b.n	8002376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2224      	movs	r2, #36	@ 0x24
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800233e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e000      	b.n	8002376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002374:	2302      	movs	r3, #2
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b20      	cmp	r3, #32
 8002396:	d139      	bne.n	800240c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e033      	b.n	800240e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2224      	movs	r2, #36	@ 0x24
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800240c:	2302      	movs	r3, #2
  }
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af02      	add	r7, sp, #8
 8002420:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0fe      	b.n	800262a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f00e fd23 	bl	8010e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2203      	movs	r2, #3
 800244a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f009 fe55 	bl	800c102 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7c1a      	ldrb	r2, [r3, #16]
 8002460:	f88d 2000 	strb.w	r2, [sp]
 8002464:	3304      	adds	r3, #4
 8002466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002468:	f009 fd26 	bl	800beb8 <USB_CoreInit>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0d5      	b.n	800262a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f009 fe4d 	bl	800c124 <USB_SetCurrentMode>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0c6      	b.n	800262a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e04a      	b.n	8002538 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3315      	adds	r3, #21
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3314      	adds	r3, #20
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	b298      	uxth	r0, r3
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	332e      	adds	r3, #46	@ 0x2e
 80024de:	4602      	mov	r2, r0
 80024e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3318      	adds	r3, #24
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	331c      	adds	r3, #28
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3320      	adds	r3, #32
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3324      	adds	r3, #36	@ 0x24
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	3301      	adds	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	791b      	ldrb	r3, [r3, #4]
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	429a      	cmp	r2, r3
 8002540:	d3af      	bcc.n	80024a2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e044      	b.n	80025d2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	3301      	adds	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d3b5      	bcc.n	8002548 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7c1a      	ldrb	r2, [r3, #16]
 80025e4:	f88d 2000 	strb.w	r2, [sp]
 80025e8:	3304      	adds	r3, #4
 80025ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ec:	f009 fde6 	bl	800c1bc <USB_DevInit>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e013      	b.n	800262a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7b1b      	ldrb	r3, [r3, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f001 f999 	bl	8003950 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f00a fe25 	bl	800d272 <USB_DevDisconnect>

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_PCD_Start+0x1c>
 800264a:	2302      	movs	r3, #2
 800264c:	e022      	b.n	8002694 <HAL_PCD_Start+0x62>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f009 fd30 	bl	800c0e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f00a fdd3 	bl	800d230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b08d      	sub	sp, #52	@ 0x34
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00a fe91 	bl	800d3da <USB_GetMode>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 84b9 	bne.w	8003032 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00a fdf5 	bl	800d2b4 <USB_ReadInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 84af 	beq.w	8003030 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f00a fde2 	bl	800d2b4 <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d107      	bne.n	800270a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f002 0202 	and.w	r2, r2, #2
 8002708:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f00a fdd0 	bl	800d2b4 <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b10      	cmp	r3, #16
 800271c:	d161      	bne.n	80027e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0210 	bic.w	r2, r2, #16
 800272c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	3304      	adds	r3, #4
 800274c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	0c5b      	lsrs	r3, r3, #17
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	2b02      	cmp	r3, #2
 8002758:	d124      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d035      	beq.n	80027d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	6a38      	ldr	r0, [r7, #32]
 800277a:	f00a fc07 	bl	800cf8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278a:	441a      	add	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279c:	441a      	add	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	615a      	str	r2, [r3, #20]
 80027a2:	e016      	b.n	80027d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	0c5b      	lsrs	r3, r3, #17
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d110      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027b6:	2208      	movs	r2, #8
 80027b8:	4619      	mov	r1, r3
 80027ba:	6a38      	ldr	r0, [r7, #32]
 80027bc:	f00a fbe6 	bl	800cf8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027cc:	441a      	add	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0210 	orr.w	r2, r2, #16
 80027e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f00a fd64 	bl	800d2b4 <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027f6:	f040 80a7 	bne.w	8002948 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f00a fd69 	bl	800d2da <USB_ReadDevAllOutEpInterrupt>
 8002808:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800280a:	e099      	b.n	8002940 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 808e 	beq.w	8002934 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f00a fd8d 	bl	800d342 <USB_ReadDevOutEPInterrupt>
 8002828:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00c      	beq.n	800284e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002840:	461a      	mov	r2, r3
 8002842:	2301      	movs	r3, #1
 8002844:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fefb 	bl	8003644 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00c      	beq.n	8002872 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002864:	461a      	mov	r2, r3
 8002866:	2308      	movs	r3, #8
 8002868:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800286a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 ffd1 	bl	8003814 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002888:	461a      	mov	r2, r3
 800288a:	2310      	movs	r3, #16
 800288c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d030      	beq.n	80028fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a0:	2b80      	cmp	r3, #128	@ 0x80
 80028a2:	d109      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	3304      	adds	r3, #4
 80028cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	78db      	ldrb	r3, [r3, #3]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f00e fc06 	bl	80110f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f4:	461a      	mov	r2, r3
 80028f6:	2302      	movs	r3, #2
 80028f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002910:	461a      	mov	r2, r3
 8002912:	2320      	movs	r3, #32
 8002914:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800292c:	461a      	mov	r2, r3
 800292e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002932:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	3301      	adds	r3, #1
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	f47f af62 	bne.w	800280c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f00a fcb1 	bl	800d2b4 <USB_ReadInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800295c:	f040 80db 	bne.w	8002b16 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f00a fcd2 	bl	800d30e <USB_ReadDevAllInEpInterrupt>
 800296a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002970:	e0cd      	b.n	8002b0e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80c2 	beq.w	8002b02 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f00a fcf8 	bl	800d37e <USB_ReadDevInEPInterrupt>
 800298e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d057      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	2201      	movs	r2, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69f9      	ldr	r1, [r7, #28]
 80029b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029ba:	4013      	ands	r3, r2
 80029bc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ca:	461a      	mov	r2, r3
 80029cc:	2301      	movs	r3, #1
 80029ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	799b      	ldrb	r3, [r3, #6]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d132      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3320      	adds	r3, #32
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4403      	add	r3, r0
 80029f8:	331c      	adds	r3, #28
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4419      	add	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4403      	add	r3, r0
 8002a0c:	3320      	adds	r3, #32
 8002a0e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d113      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x3a2>
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3324      	adds	r3, #36	@ 0x24
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d108      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a36:	461a      	mov	r2, r3
 8002a38:	2101      	movs	r1, #1
 8002a3a:	f00a fd01 	bl	800d440 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f00e fad0 	bl	8010fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a60:	461a      	mov	r2, r3
 8002a62:	2308      	movs	r3, #8
 8002a64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2310      	movs	r3, #16
 8002a80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2340      	movs	r3, #64	@ 0x40
 8002a9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002aa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aaa:	6a38      	ldr	r0, [r7, #32]
 8002aac:	f009 fce4 	bl	800c478 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	3310      	adds	r3, #16
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	78db      	ldrb	r3, [r3, #3]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d108      	bne.n	8002ade <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f00e fb1d 	bl	8011118 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aea:	461a      	mov	r2, r3
 8002aec:	2302      	movs	r3, #2
 8002aee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002afa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fd15 	bl	800352c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	3301      	adds	r3, #1
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f47f af2e 	bne.w	8002972 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00a fbca 	bl	800d2b4 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b2a:	d122      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b52:	2100      	movs	r1, #0
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 ff1f 	bl	8003998 <HAL_PCDEx_LPM_Callback>
 8002b5a:	e002      	b.n	8002b62 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f00e fabb 	bl	80110d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f00a fb9c 	bl	800d2b4 <USB_ReadInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b86:	d112      	bne.n	8002bae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d102      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f00e fa77 	bl	801108c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f00a fb7e 	bl	800d2b4 <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bc2:	d121      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002bd2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d111      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fecc 	bl	8003998 <HAL_PCDEx_LPM_Callback>
 8002c00:	e002      	b.n	8002c08 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f00e fa42 	bl	801108c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f00a fb51 	bl	800d2b4 <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c1c:	f040 80b7 	bne.w	8002d8e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2110      	movs	r1, #16
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f009 fc1c 	bl	800c478 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c44:	e046      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c52:	461a      	mov	r2, r3
 8002c54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c86:	461a      	mov	r2, r3
 8002c88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c9e:	0151      	lsls	r1, r2, #5
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	440a      	add	r2, r1
 8002ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ca8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cbe:	0151      	lsls	r1, r2, #5
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ccc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	791b      	ldrb	r3, [r3, #4]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d3b2      	bcc.n	8002c46 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cee:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cf2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7bdb      	ldrb	r3, [r3, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d016      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d0c:	f043 030b 	orr.w	r3, r3, #11
 8002d10:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d22:	f043 030b 	orr.w	r3, r3, #11
 8002d26:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d28:	e015      	b.n	8002d56 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d50:	f043 030b 	orr.w	r3, r3, #11
 8002d54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d64:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f00a fb61 	bl	800d440 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f00a fa8e 	bl	800d2b4 <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da2:	d123      	bne.n	8002dec <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00a fb25 	bl	800d3f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f009 fbd9 	bl	800c56a <USB_GetDevSpeed>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681c      	ldr	r4, [r3, #0]
 8002dc4:	f001 fda0 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f009 f8e3 	bl	800bf9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f00e f92f 	bl	801103a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f00a fa5f 	bl	800d2b4 <USB_ReadInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d10a      	bne.n	8002e16 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f00e f90c 	bl	801101e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f002 0208 	and.w	r2, r2, #8
 8002e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f00a fa4a 	bl	800d2b4 <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	2b80      	cmp	r3, #128	@ 0x80
 8002e28:	d123      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3a:	e014      	b.n	8002e66 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fb08 	bl	8003470 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	3301      	adds	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	791b      	ldrb	r3, [r3, #4]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d3e4      	bcc.n	8002e3c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f00a fa1c 	bl	800d2b4 <USB_ReadInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e86:	d13c      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e88:	2301      	movs	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8c:	e02b      	b.n	8002ee6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3318      	adds	r3, #24
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d115      	bne.n	8002ee0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	da12      	bge.n	8002ee0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3317      	adds	r3, #23
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fac8 	bl	8003470 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	791b      	ldrb	r3, [r3, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d3cd      	bcc.n	8002e8e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00a f9d4 	bl	800d2b4 <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f16:	d156      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f18:	2301      	movs	r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1c:	e045      	b.n	8002faa <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d12e      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da2b      	bge.n	8002fa4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f58:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d121      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa0:	6053      	str	r3, [r2, #4]
            break;
 8002fa2:	e008      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	791b      	ldrb	r3, [r3, #4]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d3b3      	bcc.n	8002f1e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f00a f972 	bl	800d2b4 <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fda:	d10a      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f00e f8ad 	bl	801113c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ff0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00a f95c 	bl	800d2b4 <USB_ReadInterrupts>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d115      	bne.n	8003032 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f00e f89d 	bl	8011158 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e000      	b.n	8003032 <HAL_PCD_IRQHandler+0x996>
      return;
 8003030:	bf00      	nop
    }
  }
}
 8003032:	3734      	adds	r7, #52	@ 0x34
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}

08003038 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_PCD_SetAddress+0x1a>
 800304e:	2302      	movs	r3, #2
 8003050:	e012      	b.n	8003078 <HAL_PCD_SetAddress+0x40>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f00a f8bb 	bl	800d1e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	70fb      	strb	r3, [r7, #3]
 8003092:	460b      	mov	r3, r1
 8003094:	803b      	strh	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800309e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da0f      	bge.n	80030c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 020f 	and.w	r2, r3, #15
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	3310      	adds	r3, #16
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	705a      	strb	r2, [r3, #1]
 80030c4:	e00f      	b.n	80030e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030f2:	883a      	ldrh	r2, [r7, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	78ba      	ldrb	r2, [r7, #2]
 80030fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	785b      	ldrb	r3, [r3, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003110:	78bb      	ldrb	r3, [r7, #2]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d102      	bne.n	800311c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_PCD_EP_Open+0xaa>
 8003126:	2302      	movs	r3, #2
 8003128:	e00e      	b.n	8003148 <HAL_PCD_EP_Open+0xc8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	4618      	mov	r0, r3
 800313a:	f009 fa3b 	bl	800c5b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003146:	7afb      	ldrb	r3, [r7, #11]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800315c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003160:	2b00      	cmp	r3, #0
 8003162:	da0f      	bge.n	8003184 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	3310      	adds	r3, #16
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	3304      	adds	r3, #4
 800317a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	705a      	strb	r2, [r3, #1]
 8003182:	e00f      	b.n	80031a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_PCD_EP_Close+0x6e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e00e      	b.n	80031dc <HAL_PCD_EP_Close+0x8c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f009 fa79 	bl	800c6c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	460b      	mov	r3, r1
 80031f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	7afb      	ldrb	r3, [r7, #11]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2200      	movs	r2, #0
 8003224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	b2da      	uxtb	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	799b      	ldrb	r3, [r3, #6]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	799b      	ldrb	r3, [r3, #6]
 8003248:	461a      	mov	r2, r3
 800324a:	6979      	ldr	r1, [r7, #20]
 800324c:	f009 fb16 	bl	800c87c <USB_EPStartXfer>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800327c:	681b      	ldr	r3, [r3, #0]
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	460b      	mov	r3, r1
 8003298:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800329a:	7afb      	ldrb	r3, [r7, #11]
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	3310      	adds	r3, #16
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4413      	add	r3, r2
 80032ae:	3304      	adds	r3, #4
 80032b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2201      	movs	r2, #1
 80032c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ca:	7afb      	ldrb	r3, [r7, #11]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	799b      	ldrb	r3, [r3, #6]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d102      	bne.n	80032e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	799b      	ldrb	r3, [r3, #6]
 80032ec:	461a      	mov	r2, r3
 80032ee:	6979      	ldr	r1, [r7, #20]
 80032f0:	f009 fac4 	bl	800c87c <USB_EPStartXfer>

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	7912      	ldrb	r2, [r2, #4]
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e04f      	b.n	80033bc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800331c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003320:	2b00      	cmp	r3, #0
 8003322:	da0f      	bge.n	8003344 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 020f 	and.w	r2, r3, #15
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	3310      	adds	r3, #16
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	705a      	strb	r2, [r3, #1]
 8003342:	e00d      	b.n	8003360 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	3304      	adds	r3, #4
 8003358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_PCD_EP_SetStall+0x82>
 800337c:	2302      	movs	r3, #2
 800337e:	e01d      	b.n	80033bc <HAL_PCD_EP_SetStall+0xbe>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68f9      	ldr	r1, [r7, #12]
 800338e:	4618      	mov	r0, r3
 8003390:	f009 fe54 	bl	800d03c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	7999      	ldrb	r1, [r3, #6]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033ac:	461a      	mov	r2, r3
 80033ae:	f00a f847 	bl	800d440 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	7912      	ldrb	r2, [r2, #4]
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e042      	b.n	8003468 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	da0f      	bge.n	800340a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	3310      	adds	r3, #16
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	3304      	adds	r3, #4
 8003400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	705a      	strb	r2, [r3, #1]
 8003408:	e00f      	b.n	800342a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800340a:	78fb      	ldrb	r3, [r7, #3]
 800340c:	f003 020f 	and.w	r2, r3, #15
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	3304      	adds	r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_PCD_EP_ClrStall+0x86>
 8003446:	2302      	movs	r3, #2
 8003448:	e00e      	b.n	8003468 <HAL_PCD_EP_ClrStall+0xa4>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	4618      	mov	r0, r3
 800345a:	f009 fe5d 	bl	800d118 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800347c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003480:	2b00      	cmp	r3, #0
 8003482:	da0c      	bge.n	800349e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	3310      	adds	r3, #16
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	3304      	adds	r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e00c      	b.n	80034b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	3304      	adds	r3, #4
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68f9      	ldr	r1, [r7, #12]
 80034be:	4618      	mov	r0, r3
 80034c0:	f009 fc7c 	bl	800cdbc <USB_EPStopXfer>
 80034c4:	4603      	mov	r3, r0
 80034c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034c8:	7afb      	ldrb	r3, [r7, #11]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_PCD_EP_Flush+0x1a>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e01b      	b.n	8003524 <HAL_PCD_EP_Flush+0x52>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80034f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da09      	bge.n	8003510 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f008 ffb5 	bl	800c478 <USB_FlushTxFifo>
 800350e:	e004      	b.n	800351a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f008 ffe1 	bl	800c4dc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	@ 0x28
 8003530:	af02      	add	r7, sp, #8
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3310      	adds	r3, #16
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	3304      	adds	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d901      	bls.n	8003564 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e06b      	b.n	800363c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	429a      	cmp	r2, r3
 8003578:	d902      	bls.n	8003580 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	3303      	adds	r3, #3
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003588:	e02a      	b.n	80035e0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	429a      	cmp	r2, r3
 800359e:	d902      	bls.n	80035a6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3303      	adds	r3, #3
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	68d9      	ldr	r1, [r3, #12]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	4603      	mov	r3, r0
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f009 fca4 	bl	800cf10 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	441a      	add	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	441a      	add	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d809      	bhi.n	800360a <PCD_WriteEmptyTxFifo+0xde>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035fe:	429a      	cmp	r2, r3
 8003600:	d203      	bcs.n	800360a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1bf      	bne.n	800358a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	429a      	cmp	r2, r3
 8003614:	d811      	bhi.n	800363a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	2201      	movs	r2, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800362a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	43db      	mvns	r3, r3
 8003630:	6939      	ldr	r1, [r7, #16]
 8003632:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003636:	4013      	ands	r3, r2
 8003638:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	333c      	adds	r3, #60	@ 0x3c
 800365c:	3304      	adds	r3, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	799b      	ldrb	r3, [r3, #6]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d17b      	bne.n	8003772 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d015      	beq.n	80036b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	4a61      	ldr	r2, [pc, #388]	@ (800380c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	f240 80b9 	bls.w	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80b3 	beq.w	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a6:	461a      	mov	r2, r3
 80036a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ac:	6093      	str	r3, [r2, #8]
 80036ae:	e0a7      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c6:	461a      	mov	r2, r3
 80036c8:	2320      	movs	r3, #32
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	e098      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f040 8093 	bne.w	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	4a4b      	ldr	r2, [pc, #300]	@ (800380c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d90f      	bls.n	8003702 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f8:	461a      	mov	r2, r3
 80036fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036fe:	6093      	str	r3, [r2, #8]
 8003700:	e07e      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4413      	add	r3, r2
 8003714:	3304      	adds	r3, #4
 8003716:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1a      	ldr	r2, [r3, #32]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	0159      	lsls	r1, r3, #5
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	440b      	add	r3, r1
 8003724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	1ad2      	subs	r2, r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d114      	bne.n	8003764 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800374c:	461a      	mov	r2, r3
 800374e:	2101      	movs	r1, #1
 8003750:	f009 fe76 	bl	800d440 <USB_EP0_OutStart>
 8003754:	e006      	b.n	8003764 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	441a      	add	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f00d fc22 	bl	8010fb4 <HAL_PCD_DataOutStageCallback>
 8003770:	e046      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	4a26      	ldr	r2, [pc, #152]	@ (8003810 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d124      	bne.n	80037c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003790:	461a      	mov	r2, r3
 8003792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003796:	6093      	str	r3, [r2, #8]
 8003798:	e032      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	2320      	movs	r3, #32
 80037b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f00d fbf9 	bl	8010fb4 <HAL_PCD_DataOutStageCallback>
 80037c2:	e01d      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d114      	bne.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037ec:	461a      	mov	r2, r3
 80037ee:	2100      	movs	r1, #0
 80037f0:	f009 fe26 	bl	800d440 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f00d fbda 	bl	8010fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	4f54300a 	.word	0x4f54300a
 8003810:	4f54310a 	.word	0x4f54310a

08003814 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	333c      	adds	r3, #60	@ 0x3c
 800382c:	3304      	adds	r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <PCD_EP_OutSetupPacket_int+0x88>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d90e      	bls.n	8003868 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003866:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f00d fb91 	bl	8010f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4a0a      	ldr	r2, [pc, #40]	@ (800389c <PCD_EP_OutSetupPacket_int+0x88>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d90c      	bls.n	8003890 <PCD_EP_OutSetupPacket_int+0x7c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	799b      	ldrb	r3, [r3, #6]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d108      	bne.n	8003890 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003888:	461a      	mov	r2, r3
 800388a:	2101      	movs	r1, #1
 800388c:	f009 fdd8 	bl	800d440 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	4f54300a 	.word	0x4f54300a

080038a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
 80038ac:	4613      	mov	r3, r2
 80038ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038be:	883b      	ldrh	r3, [r7, #0]
 80038c0:	0419      	lsls	r1, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80038cc:	e028      	b.n	8003920 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4413      	add	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	e00d      	b.n	80038fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	3340      	adds	r3, #64	@ 0x40
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	4413      	add	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	3301      	adds	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	3b01      	subs	r3, #1
 8003904:	429a      	cmp	r2, r3
 8003906:	d3ec      	bcc.n	80038e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003908:	883b      	ldrh	r3, [r7, #0]
 800390a:	0418      	lsls	r0, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	3b01      	subs	r3, #1
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	4302      	orrs	r2, r0
 8003918:	3340      	adds	r3, #64	@ 0x40
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800397e:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_PCDEx_ActivateLPM+0x44>)
 8003980:	4313      	orrs	r3, r2
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	10000003 	.word	0x10000003

08003998 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039b8:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_PWREx_ConfigSupply+0x70>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d00a      	beq.n	80039da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039c4:	4b16      	ldr	r3, [pc, #88]	@ (8003a20 <HAL_PWREx_ConfigSupply+0x70>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d001      	beq.n	80039d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e01f      	b.n	8003a16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e01d      	b.n	8003a16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039da:	4b11      	ldr	r3, [pc, #68]	@ (8003a20 <HAL_PWREx_ConfigSupply+0x70>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	490f      	ldr	r1, [pc, #60]	@ (8003a20 <HAL_PWREx_ConfigSupply+0x70>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039ea:	f7fe f861 	bl	8001ab0 <HAL_GetTick>
 80039ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039f0:	e009      	b.n	8003a06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039f2:	f7fe f85d 	bl	8001ab0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a00:	d901      	bls.n	8003a06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e007      	b.n	8003a16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_PWREx_ConfigSupply+0x70>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a12:	d1ee      	bne.n	80039f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	58024800 	.word	0x58024800

08003a24 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a32:	60d3      	str	r3, [r2, #12]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	58024800 	.word	0x58024800

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	@ 0x30
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f000 bc1f 	b.w	8004296 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80b3 	beq.w	8003bcc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a66:	4b95      	ldr	r3, [pc, #596]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a70:	4b92      	ldr	r3, [pc, #584]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d007      	beq.n	8003a8c <HAL_RCC_OscConfig+0x48>
 8003a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7e:	2b18      	cmp	r3, #24
 8003a80:	d112      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x64>
 8003a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	4b8b      	ldr	r3, [pc, #556]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8098 	beq.w	8003bca <HAL_RCC_OscConfig+0x186>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 8093 	bne.w	8003bca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e3f6      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x7c>
 8003ab2:	4b82      	ldr	r3, [pc, #520]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a81      	ldr	r2, [pc, #516]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e058      	b.n	8003b72 <HAL_RCC_OscConfig+0x12e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d112      	bne.n	8003aee <HAL_RCC_OscConfig+0xaa>
 8003ac8:	4b7c      	ldr	r3, [pc, #496]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7b      	ldr	r2, [pc, #492]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	4b79      	ldr	r3, [pc, #484]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a78      	ldr	r2, [pc, #480]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003ada:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b76      	ldr	r3, [pc, #472]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a75      	ldr	r2, [pc, #468]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e041      	b.n	8003b72 <HAL_RCC_OscConfig+0x12e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af6:	d112      	bne.n	8003b1e <HAL_RCC_OscConfig+0xda>
 8003af8:	4b70      	ldr	r3, [pc, #448]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a6f      	ldr	r2, [pc, #444]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003afe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	4b6d      	ldr	r3, [pc, #436]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a6c      	ldr	r2, [pc, #432]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b0a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b6a      	ldr	r3, [pc, #424]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a69      	ldr	r2, [pc, #420]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e029      	b.n	8003b72 <HAL_RCC_OscConfig+0x12e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003b26:	d112      	bne.n	8003b4e <HAL_RCC_OscConfig+0x10a>
 8003b28:	4b64      	ldr	r3, [pc, #400]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a63      	ldr	r2, [pc, #396]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b61      	ldr	r3, [pc, #388]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a60      	ldr	r2, [pc, #384]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b5e      	ldr	r3, [pc, #376]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a5d      	ldr	r2, [pc, #372]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e011      	b.n	8003b72 <HAL_RCC_OscConfig+0x12e>
 8003b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5a      	ldr	r2, [pc, #360]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b58      	ldr	r3, [pc, #352]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a57      	ldr	r2, [pc, #348]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b55      	ldr	r3, [pc, #340]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a54      	ldr	r2, [pc, #336]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d013      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd ff99 	bl	8001ab0 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b82:	f7fd ff95 	bl	8001ab0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b64      	cmp	r3, #100	@ 0x64
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e380      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b94:	4b49      	ldr	r3, [pc, #292]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x13e>
 8003ba0:	e014      	b.n	8003bcc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fd ff85 	bl	8001ab0 <HAL_GetTick>
 8003ba6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003baa:	f7fd ff81 	bl	8001ab0 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b64      	cmp	r3, #100	@ 0x64
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e36c      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x166>
 8003bc8:	e000      	b.n	8003bcc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 808c 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bda:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003be2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003be4:	4b35      	ldr	r3, [pc, #212]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_RCC_OscConfig+0x1bc>
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2b18      	cmp	r3, #24
 8003bf4:	d137      	bne.n	8003c66 <HAL_RCC_OscConfig+0x222>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d132      	bne.n	8003c66 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c00:	4b2e      	ldr	r3, [pc, #184]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_OscConfig+0x1d4>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e33e      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c18:	4b28      	ldr	r3, [pc, #160]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f023 0219 	bic.w	r2, r3, #25
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4925      	ldr	r1, [pc, #148]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd ff41 	bl	8001ab0 <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fd ff3d 	bl	8001ab0 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e328      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c44:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	4917      	ldr	r1, [pc, #92]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c64:	e045      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d028      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c6e:	4b13      	ldr	r3, [pc, #76]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 0219 	bic.w	r2, r3, #25
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	4910      	ldr	r1, [pc, #64]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fd ff16 	bl	8001ab0 <HAL_GetTick>
 8003c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fd ff12 	bl	8001ab0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e2fd      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c9a:	4b08      	ldr	r3, [pc, #32]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	4901      	ldr	r1, [pc, #4]	@ (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
 8003cba:	e01a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2ae>
 8003cbc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc0:	4b97      	ldr	r3, [pc, #604]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a96      	ldr	r2, [pc, #600]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fef0 	bl	8001ab0 <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd4:	f7fd feec 	bl	8001ab0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e2d7      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ce6:	4b8e      	ldr	r3, [pc, #568]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d06a      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfe:	4b88      	ldr	r3, [pc, #544]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d08:	4b85      	ldr	r3, [pc, #532]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d007      	beq.n	8003d24 <HAL_RCC_OscConfig+0x2e0>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b18      	cmp	r3, #24
 8003d18:	d11b      	bne.n	8003d52 <HAL_RCC_OscConfig+0x30e>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d116      	bne.n	8003d52 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d24:	4b7e      	ldr	r3, [pc, #504]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2f8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	2b80      	cmp	r3, #128	@ 0x80
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e2ac      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d3c:	4b78      	ldr	r3, [pc, #480]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	4975      	ldr	r1, [pc, #468]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d50:	e040      	b.n	8003dd4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d023      	beq.n	8003da2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d5a:	4b71      	ldr	r3, [pc, #452]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a70      	ldr	r2, [pc, #448]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fd fea3 	bl	8001ab0 <HAL_GetTick>
 8003d6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d6e:	f7fd fe9f 	bl	8001ab0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e28a      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d80:	4b67      	ldr	r3, [pc, #412]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d8c:	4b64      	ldr	r3, [pc, #400]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	4961      	ldr	r1, [pc, #388]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60cb      	str	r3, [r1, #12]
 8003da0:	e018      	b.n	8003dd4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003da2:	4b5f      	ldr	r3, [pc, #380]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a5e      	ldr	r2, [pc, #376]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fd fe7f 	bl	8001ab0 <HAL_GetTick>
 8003db2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003db6:	f7fd fe7b 	bl	8001ab0 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e266      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dc8:	4b55      	ldr	r3, [pc, #340]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d036      	beq.n	8003e4e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d019      	beq.n	8003e1c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dec:	4a4c      	ldr	r2, [pc, #304]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fd fe5c 	bl	8001ab0 <HAL_GetTick>
 8003df8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfc:	f7fd fe58 	bl	8001ab0 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e243      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e0e:	4b44      	ldr	r3, [pc, #272]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x3b8>
 8003e1a:	e018      	b.n	8003e4e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1c:	4b40      	ldr	r3, [pc, #256]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e20:	4a3f      	ldr	r2, [pc, #252]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd fe42 	bl	8001ab0 <HAL_GetTick>
 8003e2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e30:	f7fd fe3e 	bl	8001ab0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e229      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e42:	4b37      	ldr	r3, [pc, #220]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d036      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d019      	beq.n	8003e96 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e62:	4b2f      	ldr	r3, [pc, #188]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2e      	ldr	r2, [pc, #184]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003e68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e6e:	f7fd fe1f 	bl	8001ab0 <HAL_GetTick>
 8003e72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e76:	f7fd fe1b 	bl	8001ab0 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e206      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x432>
 8003e94:	e018      	b.n	8003ec8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e96:	4b22      	ldr	r3, [pc, #136]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a21      	ldr	r2, [pc, #132]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ea2:	f7fd fe05 	bl	8001ab0 <HAL_GetTick>
 8003ea6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eaa:	f7fd fe01 	bl	8001ab0 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e1ec      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ebc:	4b18      	ldr	r3, [pc, #96]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80af 	beq.w	8004034 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ed6:	4b13      	ldr	r3, [pc, #76]	@ (8003f24 <HAL_RCC_OscConfig+0x4e0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <HAL_RCC_OscConfig+0x4e0>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ee2:	f7fd fde5 	bl	8001ab0 <HAL_GetTick>
 8003ee6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eea:	f7fd fde1 	bl	8001ab0 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b64      	cmp	r3, #100	@ 0x64
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e1cc      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003efc:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <HAL_RCC_OscConfig+0x4e0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d10b      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4e4>
 8003f10:	4b03      	ldr	r3, [pc, #12]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	4a02      	ldr	r2, [pc, #8]	@ (8003f20 <HAL_RCC_OscConfig+0x4dc>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f1c:	e05b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x592>
 8003f1e:	bf00      	nop
 8003f20:	58024400 	.word	0x58024400
 8003f24:	58024800 	.word	0x58024800
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d112      	bne.n	8003f56 <HAL_RCC_OscConfig+0x512>
 8003f30:	4b9d      	ldr	r3, [pc, #628]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f34:	4a9c      	ldr	r2, [pc, #624]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f3c:	4b9a      	ldr	r3, [pc, #616]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f40:	4a99      	ldr	r2, [pc, #612]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f48:	4b97      	ldr	r3, [pc, #604]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4a96      	ldr	r2, [pc, #600]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f4e:	f023 0304 	bic.w	r3, r3, #4
 8003f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f54:	e03f      	b.n	8003fd6 <HAL_RCC_OscConfig+0x592>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d112      	bne.n	8003f84 <HAL_RCC_OscConfig+0x540>
 8003f5e:	4b92      	ldr	r3, [pc, #584]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f62:	4a91      	ldr	r2, [pc, #580]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f64:	f043 0304 	orr.w	r3, r3, #4
 8003f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	4a8e      	ldr	r2, [pc, #568]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f76:	4b8c      	ldr	r3, [pc, #560]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a8b      	ldr	r2, [pc, #556]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f82:	e028      	b.n	8003fd6 <HAL_RCC_OscConfig+0x592>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b85      	cmp	r3, #133	@ 0x85
 8003f8a:	d112      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x56e>
 8003f8c:	4b86      	ldr	r3, [pc, #536]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	4a85      	ldr	r2, [pc, #532]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f92:	f043 0304 	orr.w	r3, r3, #4
 8003f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f98:	4b83      	ldr	r3, [pc, #524]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9c:	4a82      	ldr	r2, [pc, #520]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa4:	4b80      	ldr	r3, [pc, #512]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa8:	4a7f      	ldr	r2, [pc, #508]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb0:	e011      	b.n	8003fd6 <HAL_RCC_OscConfig+0x592>
 8003fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	4a79      	ldr	r2, [pc, #484]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003fc4:	f023 0304 	bic.w	r3, r3, #4
 8003fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fca:	4b77      	ldr	r3, [pc, #476]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fce:	4a76      	ldr	r2, [pc, #472]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fd4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d015      	beq.n	800400a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fd fd67 	bl	8001ab0 <HAL_GetTick>
 8003fe2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7fd fd63 	bl	8001ab0 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e14c      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ee      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x5a2>
 8004008:	e014      	b.n	8004034 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fd fd51 	bl	8001ab0 <HAL_GetTick>
 800400e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fd fd4d 	bl	8001ab0 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e136      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004028:	4b5f      	ldr	r3, [pc, #380]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ee      	bne.n	8004012 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 812b 	beq.w	8004294 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800403e:	4b5a      	ldr	r3, [pc, #360]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004046:	2b18      	cmp	r3, #24
 8004048:	f000 80bb 	beq.w	80041c2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	2b02      	cmp	r3, #2
 8004052:	f040 8095 	bne.w	8004180 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b54      	ldr	r3, [pc, #336]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a53      	ldr	r2, [pc, #332]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800405c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fd fd25 	bl	8001ab0 <HAL_GetTick>
 8004066:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fd fd21 	bl	8001ab0 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e10c      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800407c:	4b4a      	ldr	r3, [pc, #296]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004088:	4b47      	ldr	r3, [pc, #284]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800408a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800408c:	4b47      	ldr	r3, [pc, #284]	@ (80041ac <HAL_RCC_OscConfig+0x768>)
 800408e:	4013      	ands	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004098:	0112      	lsls	r2, r2, #4
 800409a:	430a      	orrs	r2, r1
 800409c:	4942      	ldr	r1, [pc, #264]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	628b      	str	r3, [r1, #40]	@ 0x28
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	3b01      	subs	r3, #1
 80040a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b0:	3b01      	subs	r3, #1
 80040b2:	025b      	lsls	r3, r3, #9
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040bc:	3b01      	subs	r3, #1
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ca:	3b01      	subs	r3, #1
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040d2:	4935      	ldr	r1, [pc, #212]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80040d8:	4b33      	ldr	r3, [pc, #204]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	4a32      	ldr	r2, [pc, #200]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040e4:	4b30      	ldr	r3, [pc, #192]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 80040e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040e8:	4b31      	ldr	r3, [pc, #196]	@ (80041b0 <HAL_RCC_OscConfig+0x76c>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040f0:	00d2      	lsls	r2, r2, #3
 80040f2:	492d      	ldr	r1, [pc, #180]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80040f8:	4b2b      	ldr	r3, [pc, #172]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	f023 020c 	bic.w	r2, r3, #12
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	4928      	ldr	r1, [pc, #160]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004106:	4313      	orrs	r3, r2
 8004108:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800410a:	4b27      	ldr	r3, [pc, #156]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	f023 0202 	bic.w	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	4924      	ldr	r1, [pc, #144]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004118:	4313      	orrs	r3, r2
 800411a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800411c:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	4a21      	ldr	r2, [pc, #132]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004128:	4b1f      	ldr	r3, [pc, #124]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800412e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	4a1b      	ldr	r2, [pc, #108]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800413a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800413e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a18      	ldr	r2, [pc, #96]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b16      	ldr	r3, [pc, #88]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a15      	ldr	r2, [pc, #84]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fd fcaa 	bl	8001ab0 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd fca6 	bl	8001ab0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e091      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004172:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x71c>
 800417e:	e089      	b.n	8004294 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a08      	ldr	r2, [pc, #32]	@ (80041a8 <HAL_RCC_OscConfig+0x764>)
 8004186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800418a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd fc90 	bl	8001ab0 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004192:	e00f      	b.n	80041b4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fd fc8c 	bl	8001ab0 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d908      	bls.n	80041b4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e077      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
 80041a6:	bf00      	nop
 80041a8:	58024400 	.word	0x58024400
 80041ac:	fffffc0c 	.word	0xfffffc0c
 80041b0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041b4:	4b3a      	ldr	r3, [pc, #232]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e9      	bne.n	8004194 <HAL_RCC_OscConfig+0x750>
 80041c0:	e068      	b.n	8004294 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041c2:	4b37      	ldr	r3, [pc, #220]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041c8:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d031      	beq.n	800423a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0203 	and.w	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d12a      	bne.n	800423a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d122      	bne.n	800423a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d11a      	bne.n	800423a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	0a5b      	lsrs	r3, r3, #9
 8004208:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d111      	bne.n	800423a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d108      	bne.n	800423a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0e1b      	lsrs	r3, r3, #24
 800422c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d001      	beq.n	800423e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e02b      	b.n	8004296 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800423e:	4b18      	ldr	r3, [pc, #96]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 8004240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004242:	08db      	lsrs	r3, r3, #3
 8004244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004248:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	429a      	cmp	r2, r3
 8004252:	d01f      	beq.n	8004294 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004254:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	4a11      	ldr	r2, [pc, #68]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004260:	f7fd fc26 	bl	8001ab0 <HAL_GetTick>
 8004264:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004266:	bf00      	nop
 8004268:	f7fd fc22 	bl	8001ab0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	4293      	cmp	r3, r2
 8004272:	d0f9      	beq.n	8004268 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004274:	4b0a      	ldr	r3, [pc, #40]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 8004276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004278:	4b0a      	ldr	r3, [pc, #40]	@ (80042a4 <HAL_RCC_OscConfig+0x860>)
 800427a:	4013      	ands	r3, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004280:	00d2      	lsls	r2, r2, #3
 8004282:	4907      	ldr	r1, [pc, #28]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 8004284:	4313      	orrs	r3, r2
 8004286:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004288:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	4a04      	ldr	r2, [pc, #16]	@ (80042a0 <HAL_RCC_OscConfig+0x85c>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3730      	adds	r7, #48	@ 0x30
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	58024400 	.word	0x58024400
 80042a4:	ffff0007 	.word	0xffff0007

080042a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e19c      	b.n	80045f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042bc:	4b8a      	ldr	r3, [pc, #552]	@ (80044e8 <HAL_RCC_ClockConfig+0x240>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d910      	bls.n	80042ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b87      	ldr	r3, [pc, #540]	@ (80044e8 <HAL_RCC_ClockConfig+0x240>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 020f 	bic.w	r2, r3, #15
 80042d2:	4985      	ldr	r1, [pc, #532]	@ (80044e8 <HAL_RCC_ClockConfig+0x240>)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b83      	ldr	r3, [pc, #524]	@ (80044e8 <HAL_RCC_ClockConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e184      	b.n	80045f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	4b7b      	ldr	r3, [pc, #492]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004304:	429a      	cmp	r2, r3
 8004306:	d908      	bls.n	800431a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004308:	4b78      	ldr	r3, [pc, #480]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	4975      	ldr	r1, [pc, #468]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 8004316:	4313      	orrs	r3, r2
 8004318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	4b70      	ldr	r3, [pc, #448]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004332:	429a      	cmp	r2, r3
 8004334:	d908      	bls.n	8004348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004336:	4b6d      	ldr	r3, [pc, #436]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	496a      	ldr	r1, [pc, #424]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 8004344:	4313      	orrs	r3, r2
 8004346:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	d010      	beq.n	8004376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699a      	ldr	r2, [r3, #24]
 8004358:	4b64      	ldr	r3, [pc, #400]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004360:	429a      	cmp	r2, r3
 8004362:	d908      	bls.n	8004376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004364:	4b61      	ldr	r3, [pc, #388]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	495e      	ldr	r1, [pc, #376]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 8004372:	4313      	orrs	r3, r2
 8004374:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d010      	beq.n	80043a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	4b59      	ldr	r3, [pc, #356]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800438e:	429a      	cmp	r2, r3
 8004390:	d908      	bls.n	80043a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004392:	4b56      	ldr	r3, [pc, #344]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4953      	ldr	r1, [pc, #332]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	4b4d      	ldr	r3, [pc, #308]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	429a      	cmp	r2, r3
 80043be:	d908      	bls.n	80043d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b4a      	ldr	r3, [pc, #296]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f023 020f 	bic.w	r2, r3, #15
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4947      	ldr	r1, [pc, #284]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d055      	beq.n	800448a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043de:	4b43      	ldr	r3, [pc, #268]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	4940      	ldr	r1, [pc, #256]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043f8:	4b3c      	ldr	r3, [pc, #240]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d121      	bne.n	8004448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0f6      	b.n	80045f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b03      	cmp	r3, #3
 800440e:	d107      	bne.n	8004420 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004410:	4b36      	ldr	r3, [pc, #216]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d115      	bne.n	8004448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0ea      	b.n	80045f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004428:	4b30      	ldr	r3, [pc, #192]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0de      	b.n	80045f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004438:	4b2c      	ldr	r3, [pc, #176]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0d6      	b.n	80045f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004448:	4b28      	ldr	r3, [pc, #160]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f023 0207 	bic.w	r2, r3, #7
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4925      	ldr	r1, [pc, #148]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 8004456:	4313      	orrs	r3, r2
 8004458:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445a:	f7fd fb29 	bl	8001ab0 <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004460:	e00a      	b.n	8004478 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004462:	f7fd fb25 	bl	8001ab0 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004470:	4293      	cmp	r3, r2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e0be      	b.n	80045f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004478:	4b1c      	ldr	r3, [pc, #112]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	429a      	cmp	r2, r3
 8004488:	d1eb      	bne.n	8004462 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	4b14      	ldr	r3, [pc, #80]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d208      	bcs.n	80044b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a6:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f023 020f 	bic.w	r2, r3, #15
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	490e      	ldr	r1, [pc, #56]	@ (80044ec <HAL_RCC_ClockConfig+0x244>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b8:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <HAL_RCC_ClockConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d214      	bcs.n	80044f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <HAL_RCC_ClockConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 020f 	bic.w	r2, r3, #15
 80044ce:	4906      	ldr	r1, [pc, #24]	@ (80044e8 <HAL_RCC_ClockConfig+0x240>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b04      	ldr	r3, [pc, #16]	@ (80044e8 <HAL_RCC_ClockConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d005      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e086      	b.n	80045f6 <HAL_RCC_ClockConfig+0x34e>
 80044e8:	52002000 	.word	0x52002000
 80044ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d010      	beq.n	800451e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	4b3f      	ldr	r3, [pc, #252]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004508:	429a      	cmp	r2, r3
 800450a:	d208      	bcs.n	800451e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800450c:	4b3c      	ldr	r3, [pc, #240]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	4939      	ldr	r1, [pc, #228]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 800451a:	4313      	orrs	r3, r2
 800451c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d010      	beq.n	800454c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695a      	ldr	r2, [r3, #20]
 800452e:	4b34      	ldr	r3, [pc, #208]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004536:	429a      	cmp	r2, r3
 8004538:	d208      	bcs.n	800454c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800453a:	4b31      	ldr	r3, [pc, #196]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	492e      	ldr	r1, [pc, #184]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 8004548:	4313      	orrs	r3, r2
 800454a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b00      	cmp	r3, #0
 8004556:	d010      	beq.n	800457a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	4b28      	ldr	r3, [pc, #160]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004564:	429a      	cmp	r2, r3
 8004566:	d208      	bcs.n	800457a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004568:	4b25      	ldr	r3, [pc, #148]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	4922      	ldr	r1, [pc, #136]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 8004576:	4313      	orrs	r3, r2
 8004578:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	4b1d      	ldr	r3, [pc, #116]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004592:	429a      	cmp	r2, r3
 8004594:	d208      	bcs.n	80045a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004596:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4917      	ldr	r1, [pc, #92]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80045a8:	f000 f834 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	0a1b      	lsrs	r3, r3, #8
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	4912      	ldr	r1, [pc, #72]	@ (8004604 <HAL_RCC_ClockConfig+0x35c>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80045c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <HAL_RCC_ClockConfig+0x358>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004604 <HAL_RCC_ClockConfig+0x35c>)
 80045d0:	5cd3      	ldrb	r3, [r2, r3]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004608 <HAL_RCC_ClockConfig+0x360>)
 80045de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045e0:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <HAL_RCC_ClockConfig+0x364>)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80045e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <HAL_RCC_ClockConfig+0x368>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fa16 	bl	8001a1c <HAL_InitTick>
 80045f0:	4603      	mov	r3, r0
 80045f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	58024400 	.word	0x58024400
 8004604:	08011610 	.word	0x08011610
 8004608:	24000004 	.word	0x24000004
 800460c:	24000000 	.word	0x24000000
 8004610:	24000008 	.word	0x24000008

08004614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004614:	b480      	push	{r7}
 8004616:	b089      	sub	sp, #36	@ 0x24
 8004618:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800461a:	4bb3      	ldr	r3, [pc, #716]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004622:	2b18      	cmp	r3, #24
 8004624:	f200 8155 	bhi.w	80048d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004628:	a201      	add	r2, pc, #4	@ (adr r2, 8004630 <HAL_RCC_GetSysClockFreq+0x1c>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004695 	.word	0x08004695
 8004634:	080048d3 	.word	0x080048d3
 8004638:	080048d3 	.word	0x080048d3
 800463c:	080048d3 	.word	0x080048d3
 8004640:	080048d3 	.word	0x080048d3
 8004644:	080048d3 	.word	0x080048d3
 8004648:	080048d3 	.word	0x080048d3
 800464c:	080048d3 	.word	0x080048d3
 8004650:	080046bb 	.word	0x080046bb
 8004654:	080048d3 	.word	0x080048d3
 8004658:	080048d3 	.word	0x080048d3
 800465c:	080048d3 	.word	0x080048d3
 8004660:	080048d3 	.word	0x080048d3
 8004664:	080048d3 	.word	0x080048d3
 8004668:	080048d3 	.word	0x080048d3
 800466c:	080048d3 	.word	0x080048d3
 8004670:	080046c1 	.word	0x080046c1
 8004674:	080048d3 	.word	0x080048d3
 8004678:	080048d3 	.word	0x080048d3
 800467c:	080048d3 	.word	0x080048d3
 8004680:	080048d3 	.word	0x080048d3
 8004684:	080048d3 	.word	0x080048d3
 8004688:	080048d3 	.word	0x080048d3
 800468c:	080048d3 	.word	0x080048d3
 8004690:	080046c7 	.word	0x080046c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004694:	4b94      	ldr	r3, [pc, #592]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046a0:	4b91      	ldr	r3, [pc, #580]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	4a90      	ldr	r2, [pc, #576]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80046b2:	e111      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046b4:	4b8d      	ldr	r3, [pc, #564]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046b6:	61bb      	str	r3, [r7, #24]
      break;
 80046b8:	e10e      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80046ba:	4b8d      	ldr	r3, [pc, #564]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046bc:	61bb      	str	r3, [r7, #24]
      break;
 80046be:	e10b      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80046c0:	4b8c      	ldr	r3, [pc, #560]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046c2:	61bb      	str	r3, [r7, #24]
      break;
 80046c4:	e108      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046c6:	4b88      	ldr	r3, [pc, #544]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80046d0:	4b85      	ldr	r3, [pc, #532]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046dc:	4b82      	ldr	r3, [pc, #520]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80046e6:	4b80      	ldr	r3, [pc, #512]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ea:	08db      	lsrs	r3, r3, #3
 80046ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80e1 	beq.w	80048cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b02      	cmp	r3, #2
 800470e:	f000 8083 	beq.w	8004818 <HAL_RCC_GetSysClockFreq+0x204>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b02      	cmp	r3, #2
 8004716:	f200 80a1 	bhi.w	800485c <HAL_RCC_GetSysClockFreq+0x248>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x114>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d056      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004726:	e099      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004728:	4b6f      	ldr	r3, [pc, #444]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d02d      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004734:	4b6c      	ldr	r3, [pc, #432]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	08db      	lsrs	r3, r3, #3
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	4a6b      	ldr	r2, [pc, #428]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
 8004744:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b62      	ldr	r3, [pc, #392]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004772:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80048f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800478e:	e087      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80048fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b51      	ldr	r3, [pc, #324]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80048f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047d2:	e065      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004900 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b40      	ldr	r3, [pc, #256]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80048f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004816:	e043      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004904 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b2f      	ldr	r3, [pc, #188]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a02 	vldr	s12, [r7, #8]
 800483e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80048f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800485a:	e021      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004900 <HAL_RCC_GetSysClockFreq+0x2ec>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b1e      	ldr	r3, [pc, #120]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004882:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80048f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800489e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80048a0:	4b11      	ldr	r3, [pc, #68]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a4:	0a5b      	lsrs	r3, r3, #9
 80048a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048aa:	3301      	adds	r3, #1
 80048ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c4:	ee17 3a90 	vmov	r3, s15
 80048c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80048ca:	e005      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]
      break;
 80048d0:	e002      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80048d2:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048d4:	61bb      	str	r3, [r7, #24]
      break;
 80048d6:	bf00      	nop
  }

  return sysclockfreq;
 80048d8:	69bb      	ldr	r3, [r7, #24]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3724      	adds	r7, #36	@ 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	58024400 	.word	0x58024400
 80048ec:	03d09000 	.word	0x03d09000
 80048f0:	003d0900 	.word	0x003d0900
 80048f4:	02dc6c00 	.word	0x02dc6c00
 80048f8:	46000000 	.word	0x46000000
 80048fc:	4c742400 	.word	0x4c742400
 8004900:	4a742400 	.word	0x4a742400
 8004904:	4c371b00 	.word	0x4c371b00

08004908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800490e:	f7ff fe81 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 8004912:	4602      	mov	r2, r0
 8004914:	4b10      	ldr	r3, [pc, #64]	@ (8004958 <HAL_RCC_GetHCLKFreq+0x50>)
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	490f      	ldr	r1, [pc, #60]	@ (800495c <HAL_RCC_GetHCLKFreq+0x54>)
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800492c:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <HAL_RCC_GetHCLKFreq+0x50>)
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	4a09      	ldr	r2, [pc, #36]	@ (800495c <HAL_RCC_GetHCLKFreq+0x54>)
 8004936:	5cd3      	ldrb	r3, [r2, r3]
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a07      	ldr	r2, [pc, #28]	@ (8004960 <HAL_RCC_GetHCLKFreq+0x58>)
 8004944:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004946:	4a07      	ldr	r2, [pc, #28]	@ (8004964 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <HAL_RCC_GetHCLKFreq+0x58>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	58024400 	.word	0x58024400
 800495c:	08011610 	.word	0x08011610
 8004960:	24000004 	.word	0x24000004
 8004964:	24000000 	.word	0x24000000

08004968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800496c:	f7ff ffcc 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b06      	ldr	r3, [pc, #24]	@ (800498c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4904      	ldr	r1, [pc, #16]	@ (8004990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	58024400 	.word	0x58024400
 8004990:	08011610 	.word	0x08011610

08004994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004998:	f7ff ffb6 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	0a1b      	lsrs	r3, r3, #8
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4904      	ldr	r1, [pc, #16]	@ (80049bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	58024400 	.word	0x58024400
 80049bc:	08011610 	.word	0x08011610

080049c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c4:	b0c8      	sub	sp, #288	@ 0x120
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80049e4:	2500      	movs	r5, #0
 80049e6:	ea54 0305 	orrs.w	r3, r4, r5
 80049ea:	d049      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049f6:	d02f      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80049f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049fc:	d828      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80049fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a02:	d01a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a08:	d822      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a12:	d007      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a14:	e01c      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a16:	4ba7      	ldr	r3, [pc, #668]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1a:	4aa6      	ldr	r2, [pc, #664]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a22:	e01a      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a28:	3308      	adds	r3, #8
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f002 fa6d 	bl	8006f0c <RCCEx_PLL2_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a38:	e00f      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a3e:	3328      	adds	r3, #40	@ 0x28
 8004a40:	2102      	movs	r1, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f002 fb14 	bl	8007070 <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a4e:	e004      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a56:	e000      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a62:	4b94      	ldr	r3, [pc, #592]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a70:	4a90      	ldr	r2, [pc, #576]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a72:	430b      	orrs	r3, r1
 8004a74:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a76:	e003      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004a8c:	f04f 0900 	mov.w	r9, #0
 8004a90:	ea58 0309 	orrs.w	r3, r8, r9
 8004a94:	d047      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d82a      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004abd 	.word	0x08004abd
 8004aac:	08004acb 	.word	0x08004acb
 8004ab0:	08004ae1 	.word	0x08004ae1
 8004ab4:	08004aff 	.word	0x08004aff
 8004ab8:	08004aff 	.word	0x08004aff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004abc:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e01a      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ace:	3308      	adds	r3, #8
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f002 fa1a 	bl	8006f0c <RCCEx_PLL2_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ade:	e00f      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae4:	3328      	adds	r3, #40	@ 0x28
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f002 fac1 	bl	8007070 <RCCEx_PLL3_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004af4:	e004      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004afc:	e000      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b08:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0c:	f023 0107 	bic.w	r1, r3, #7
 8004b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b16:	4a67      	ldr	r2, [pc, #412]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b1c:	e003      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004b32:	f04f 0b00 	mov.w	fp, #0
 8004b36:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b3a:	d054      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b42:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b46:	d036      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004b48:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b4c:	d82f      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b52:	d032      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b58:	d829      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b5c:	d02f      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b60:	d825      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b62:	2b80      	cmp	r3, #128	@ 0x80
 8004b64:	d018      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d821      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004b6e:	2b40      	cmp	r3, #64	@ 0x40
 8004b70:	d007      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004b72:	e01c      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b74:	4b4f      	ldr	r3, [pc, #316]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	4a4e      	ldr	r2, [pc, #312]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004b80:	e01e      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b86:	3308      	adds	r3, #8
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f002 f9be 	bl	8006f0c <RCCEx_PLL2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004b96:	e013      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b9c:	3328      	adds	r3, #40	@ 0x28
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f002 fa65 	bl	8007070 <RCCEx_PLL3_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004bac:	e008      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bb4:	e004      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e002      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004bba:	bf00      	nop
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bcc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd6:	4a37      	ldr	r2, [pc, #220]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bdc:	e003      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004be2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004bf2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004bfc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d05c      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c10:	d03b      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c12:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c16:	d834      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c1c:	d037      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c22:	d82e      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c28:	d033      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c2a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c2e:	d828      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c34:	d01a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3a:	d822      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c44:	d007      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004c46:	e01c      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c48:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	4a19      	ldr	r2, [pc, #100]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004c54:	e01e      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 f954 	bl	8006f0c <RCCEx_PLL2_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004c6a:	e013      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c70:	3328      	adds	r3, #40	@ 0x28
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f002 f9fb 	bl	8007070 <RCCEx_PLL3_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004c80:	e008      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c88:	e004      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004c9c:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004caa:	4a02      	ldr	r2, [pc, #8]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cb0:	e006      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cbc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004cd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	d03a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce6:	2b30      	cmp	r3, #48	@ 0x30
 8004ce8:	d01f      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004cea:	2b30      	cmp	r3, #48	@ 0x30
 8004cec:	d819      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d00c      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d815      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d019      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d111      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfe:	4bae      	ldr	r3, [pc, #696]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d02:	4aad      	ldr	r2, [pc, #692]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d0a:	e011      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d10:	3308      	adds	r3, #8
 8004d12:	2102      	movs	r1, #2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f002 f8f9 	bl	8006f0c <RCCEx_PLL2_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d20:	e006      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d28:	e002      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004d2a:	bf00      	nop
 8004d2c:	e000      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10a      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d38:	4b9f      	ldr	r3, [pc, #636]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d46:	4a9c      	ldr	r2, [pc, #624]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d4c:	e003      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004d66:	2300      	movs	r3, #0
 8004d68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	d051      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d80:	d035      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d86:	d82e      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004d88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d8c:	d031      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004d8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d92:	d828      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d98:	d01a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9e:	d822      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da8:	d007      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004daa:	e01c      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dac:	4b82      	ldr	r3, [pc, #520]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	4a81      	ldr	r2, [pc, #516]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004db8:	e01c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f002 f8a2 	bl	8006f0c <RCCEx_PLL2_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dce:	e011      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dd4:	3328      	adds	r3, #40	@ 0x28
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f002 f949 	bl	8007070 <RCCEx_PLL3_Config>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004de4:	e006      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dec:	e002      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004dee:	bf00      	nop
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004dfc:	4b6e      	ldr	r3, [pc, #440]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0a:	4a6b      	ldr	r2, [pc, #428]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e10:	e003      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e34:	460b      	mov	r3, r1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	d053      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e44:	d033      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004e46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e4a:	d82c      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e50:	d02f      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004e52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e56:	d826      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e5c:	d02b      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004e5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e62:	d820      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e68:	d012      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004e6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e6e:	d81a      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d022      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e78:	d115      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e7e:	3308      	adds	r3, #8
 8004e80:	2101      	movs	r1, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f002 f842 	bl	8006f0c <RCCEx_PLL2_Config>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e8e:	e015      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e94:	3328      	adds	r3, #40	@ 0x28
 8004e96:	2101      	movs	r1, #1
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f002 f8e9 	bl	8007070 <RCCEx_PLL3_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004eac:	e006      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e004      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e002      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e000      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10a      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ed0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ed2:	4a39      	ldr	r2, [pc, #228]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ed8:	e003      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ede:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004eee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ef8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4313      	orrs	r3, r2
 8004f00:	d060      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f0a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004f0e:	d039      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004f10:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004f14:	d832      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1a:	d035      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f20:	d82c      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f26:	d031      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2c:	d826      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f32:	d02d      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004f34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f38:	d820      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3e:	d012      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f44:	d81a      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d024      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f4e:	d115      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f54:	3308      	adds	r3, #8
 8004f56:	2101      	movs	r1, #1
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 ffd7 	bl	8006f0c <RCCEx_PLL2_Config>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f64:	e017      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f6a:	3328      	adds	r3, #40	@ 0x28
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f002 f87e 	bl	8007070 <RCCEx_PLL3_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f7a:	e00c      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f82:	e008      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f84:	bf00      	nop
 8004f86:	e006      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f88:	bf00      	nop
 8004f8a:	e004      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f8c:	bf00      	nop
 8004f8e:	e002      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f90:	bf00      	nop
 8004f92:	e000      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10e      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004faa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fae:	4a02      	ldr	r2, [pc, #8]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb4:	e006      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d037      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fee:	d00e      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff4:	d816      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d018      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004ffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ffe:	d111      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005000:	4bc4      	ldr	r3, [pc, #784]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	4ac3      	ldr	r2, [pc, #780]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800500a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800500c:	e00f      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800500e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005012:	3308      	adds	r3, #8
 8005014:	2101      	movs	r1, #1
 8005016:	4618      	mov	r0, r3
 8005018:	f001 ff78 	bl	8006f0c <RCCEx_PLL2_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005022:	e004      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800502c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005036:	4bb7      	ldr	r3, [pc, #732]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800503a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800503e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005042:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005044:	4ab3      	ldr	r2, [pc, #716]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005046:	430b      	orrs	r3, r1
 8005048:	6513      	str	r3, [r2, #80]	@ 0x50
 800504a:	e003      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005050:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005064:	2300      	movs	r3, #0
 8005066:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800506a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800506e:	460b      	mov	r3, r1
 8005070:	4313      	orrs	r3, r2
 8005072:	d039      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800507a:	2b03      	cmp	r3, #3
 800507c:	d81c      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800507e:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	080050c1 	.word	0x080050c1
 8005088:	08005095 	.word	0x08005095
 800508c:	080050a3 	.word	0x080050a3
 8005090:	080050c1 	.word	0x080050c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005094:	4b9f      	ldr	r3, [pc, #636]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	4a9e      	ldr	r2, [pc, #632]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800509e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050a0:	e00f      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a6:	3308      	adds	r3, #8
 80050a8:	2102      	movs	r1, #2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 ff2e 	bl	8006f0c <RCCEx_PLL2_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050b6:	e004      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80050c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050ca:	4b92      	ldr	r3, [pc, #584]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ce:	f023 0103 	bic.w	r1, r3, #3
 80050d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d8:	4a8e      	ldr	r2, [pc, #568]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050da:	430b      	orrs	r3, r1
 80050dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050de:	e003      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80050f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050f8:	2300      	movs	r3, #0
 80050fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005102:	460b      	mov	r3, r1
 8005104:	4313      	orrs	r3, r2
 8005106:	f000 8099 	beq.w	800523c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800510a:	4b83      	ldr	r3, [pc, #524]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a82      	ldr	r2, [pc, #520]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005114:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005116:	f7fc fccb 	bl	8001ab0 <HAL_GetTick>
 800511a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800511e:	e00b      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005120:	f7fc fcc6 	bl	8001ab0 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b64      	cmp	r3, #100	@ 0x64
 800512e:	d903      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005136:	e005      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005138:	4b77      	ldr	r3, [pc, #476]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0ed      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005144:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005148:	2b00      	cmp	r3, #0
 800514a:	d173      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800514c:	4b71      	ldr	r3, [pc, #452]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800514e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005154:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005158:	4053      	eors	r3, r2
 800515a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515e:	2b00      	cmp	r3, #0
 8005160:	d015      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005162:	4b6c      	ldr	r3, [pc, #432]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800516e:	4b69      	ldr	r3, [pc, #420]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005172:	4a68      	ldr	r2, [pc, #416]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005178:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800517a:	4b66      	ldr	r3, [pc, #408]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517e:	4a65      	ldr	r2, [pc, #404]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005184:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005186:	4a63      	ldr	r2, [pc, #396]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800518e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005192:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519a:	d118      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fc fc88 	bl	8001ab0 <HAL_GetTick>
 80051a0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051a4:	e00d      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a6:	f7fc fc83 	bl	8001ab0 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d903      	bls.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80051c0:	e005      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051c2:	4b54      	ldr	r3, [pc, #336]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0eb      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80051ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d129      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051e6:	d10e      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80051e8:	4b4a      	ldr	r3, [pc, #296]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80051f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051f8:	091a      	lsrs	r2, r3, #4
 80051fa:	4b48      	ldr	r3, [pc, #288]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	4a45      	ldr	r2, [pc, #276]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005200:	430b      	orrs	r3, r1
 8005202:	6113      	str	r3, [r2, #16]
 8005204:	e005      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005206:	4b43      	ldr	r3, [pc, #268]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	4a42      	ldr	r2, [pc, #264]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800520c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005210:	6113      	str	r3, [r2, #16]
 8005212:	4b40      	ldr	r3, [pc, #256]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005214:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800521e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005222:	4a3c      	ldr	r2, [pc, #240]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005224:	430b      	orrs	r3, r1
 8005226:	6713      	str	r3, [r2, #112]	@ 0x70
 8005228:	e008      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800522a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800522e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005232:	e003      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005238:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800523c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f002 0301 	and.w	r3, r2, #1
 8005248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800524c:	2300      	movs	r3, #0
 800524e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005252:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	f000 8090 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800525e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005266:	2b28      	cmp	r3, #40	@ 0x28
 8005268:	d870      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800526a:	a201      	add	r2, pc, #4	@ (adr r2, 8005270 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005270:	08005355 	.word	0x08005355
 8005274:	0800534d 	.word	0x0800534d
 8005278:	0800534d 	.word	0x0800534d
 800527c:	0800534d 	.word	0x0800534d
 8005280:	0800534d 	.word	0x0800534d
 8005284:	0800534d 	.word	0x0800534d
 8005288:	0800534d 	.word	0x0800534d
 800528c:	0800534d 	.word	0x0800534d
 8005290:	08005321 	.word	0x08005321
 8005294:	0800534d 	.word	0x0800534d
 8005298:	0800534d 	.word	0x0800534d
 800529c:	0800534d 	.word	0x0800534d
 80052a0:	0800534d 	.word	0x0800534d
 80052a4:	0800534d 	.word	0x0800534d
 80052a8:	0800534d 	.word	0x0800534d
 80052ac:	0800534d 	.word	0x0800534d
 80052b0:	08005337 	.word	0x08005337
 80052b4:	0800534d 	.word	0x0800534d
 80052b8:	0800534d 	.word	0x0800534d
 80052bc:	0800534d 	.word	0x0800534d
 80052c0:	0800534d 	.word	0x0800534d
 80052c4:	0800534d 	.word	0x0800534d
 80052c8:	0800534d 	.word	0x0800534d
 80052cc:	0800534d 	.word	0x0800534d
 80052d0:	08005355 	.word	0x08005355
 80052d4:	0800534d 	.word	0x0800534d
 80052d8:	0800534d 	.word	0x0800534d
 80052dc:	0800534d 	.word	0x0800534d
 80052e0:	0800534d 	.word	0x0800534d
 80052e4:	0800534d 	.word	0x0800534d
 80052e8:	0800534d 	.word	0x0800534d
 80052ec:	0800534d 	.word	0x0800534d
 80052f0:	08005355 	.word	0x08005355
 80052f4:	0800534d 	.word	0x0800534d
 80052f8:	0800534d 	.word	0x0800534d
 80052fc:	0800534d 	.word	0x0800534d
 8005300:	0800534d 	.word	0x0800534d
 8005304:	0800534d 	.word	0x0800534d
 8005308:	0800534d 	.word	0x0800534d
 800530c:	0800534d 	.word	0x0800534d
 8005310:	08005355 	.word	0x08005355
 8005314:	58024400 	.word	0x58024400
 8005318:	58024800 	.word	0x58024800
 800531c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005324:	3308      	adds	r3, #8
 8005326:	2101      	movs	r1, #1
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fdef 	bl	8006f0c <RCCEx_PLL2_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005334:	e00f      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800533a:	3328      	adds	r3, #40	@ 0x28
 800533c:	2101      	movs	r1, #1
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fe96 	bl	8007070 <RCCEx_PLL3_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800534a:	e004      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005356:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800535e:	4bc0      	ldr	r3, [pc, #768]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800536a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800536e:	4abc      	ldr	r2, [pc, #752]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005370:	430b      	orrs	r3, r1
 8005372:	6553      	str	r3, [r2, #84]	@ 0x54
 8005374:	e003      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005376:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800537a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800537e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f002 0302 	and.w	r3, r2, #2
 800538a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800538e:	2300      	movs	r3, #0
 8005390:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005394:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005398:	460b      	mov	r3, r1
 800539a:	4313      	orrs	r3, r2
 800539c:	d043      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800539e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053a6:	2b05      	cmp	r3, #5
 80053a8:	d824      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80053aa:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053fd 	.word	0x080053fd
 80053b4:	080053c9 	.word	0x080053c9
 80053b8:	080053df 	.word	0x080053df
 80053bc:	080053fd 	.word	0x080053fd
 80053c0:	080053fd 	.word	0x080053fd
 80053c4:	080053fd 	.word	0x080053fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053cc:	3308      	adds	r3, #8
 80053ce:	2101      	movs	r1, #1
 80053d0:	4618      	mov	r0, r3
 80053d2:	f001 fd9b 	bl	8006f0c <RCCEx_PLL2_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053dc:	e00f      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e2:	3328      	adds	r3, #40	@ 0x28
 80053e4:	2101      	movs	r1, #1
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 fe42 	bl	8007070 <RCCEx_PLL3_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053f2:	e004      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053fa:	e000      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80053fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10b      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005406:	4b96      	ldr	r3, [pc, #600]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540a:	f023 0107 	bic.w	r1, r3, #7
 800540e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005416:	4a92      	ldr	r2, [pc, #584]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005418:	430b      	orrs	r3, r1
 800541a:	6553      	str	r3, [r2, #84]	@ 0x54
 800541c:	e003      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005422:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f002 0304 	and.w	r3, r2, #4
 8005432:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005436:	2300      	movs	r3, #0
 8005438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800543c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005440:	460b      	mov	r3, r1
 8005442:	4313      	orrs	r3, r2
 8005444:	d043      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800544a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800544e:	2b05      	cmp	r3, #5
 8005450:	d824      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005452:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	080054a5 	.word	0x080054a5
 800545c:	08005471 	.word	0x08005471
 8005460:	08005487 	.word	0x08005487
 8005464:	080054a5 	.word	0x080054a5
 8005468:	080054a5 	.word	0x080054a5
 800546c:	080054a5 	.word	0x080054a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005474:	3308      	adds	r3, #8
 8005476:	2101      	movs	r1, #1
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fd47 	bl	8006f0c <RCCEx_PLL2_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005484:	e00f      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800548a:	3328      	adds	r3, #40	@ 0x28
 800548c:	2101      	movs	r1, #1
 800548e:	4618      	mov	r0, r3
 8005490:	f001 fdee 	bl	8007070 <RCCEx_PLL3_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800549a:	e004      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80054a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b2:	f023 0107 	bic.w	r1, r3, #7
 80054b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054be:	4a68      	ldr	r2, [pc, #416]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f002 0320 	and.w	r3, r2, #32
 80054da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054de:	2300      	movs	r3, #0
 80054e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054e8:	460b      	mov	r3, r1
 80054ea:	4313      	orrs	r3, r2
 80054ec:	d055      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80054ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054fa:	d033      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80054fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005500:	d82c      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005506:	d02f      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550c:	d826      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800550e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005512:	d02b      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005514:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005518:	d820      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800551a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800551e:	d012      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005524:	d81a      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d022      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800552a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800552e:	d115      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005534:	3308      	adds	r3, #8
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f001 fce7 	bl	8006f0c <RCCEx_PLL2_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005544:	e015      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800554a:	3328      	adds	r3, #40	@ 0x28
 800554c:	2102      	movs	r1, #2
 800554e:	4618      	mov	r0, r3
 8005550:	f001 fd8e 	bl	8007070 <RCCEx_PLL3_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800555a:	e00a      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005562:	e006      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005564:	bf00      	nop
 8005566:	e004      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005568:	bf00      	nop
 800556a:	e002      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800556c:	bf00      	nop
 800556e:	e000      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005572:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10b      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800557a:	4b39      	ldr	r3, [pc, #228]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558a:	4a35      	ldr	r2, [pc, #212]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800558c:	430b      	orrs	r3, r1
 800558e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005590:	e003      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005592:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005596:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800559a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80055a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055aa:	2300      	movs	r3, #0
 80055ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80055b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4313      	orrs	r3, r2
 80055b8:	d058      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055c6:	d033      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80055c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055cc:	d82c      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d2:	d02f      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80055d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d8:	d826      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055de:	d02b      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80055e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055e4:	d820      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ea:	d012      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80055ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055f0:	d81a      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d022      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80055f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055fa:	d115      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005600:	3308      	adds	r3, #8
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f001 fc81 	bl	8006f0c <RCCEx_PLL2_Config>
 800560a:	4603      	mov	r3, r0
 800560c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005610:	e015      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005616:	3328      	adds	r3, #40	@ 0x28
 8005618:	2102      	movs	r1, #2
 800561a:	4618      	mov	r0, r3
 800561c:	f001 fd28 	bl	8007070 <RCCEx_PLL3_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005626:	e00a      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800562e:	e006      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005630:	bf00      	nop
 8005632:	e004      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005634:	bf00      	nop
 8005636:	e002      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005638:	bf00      	nop
 800563a:	e000      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800563c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10e      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005646:	4b06      	ldr	r3, [pc, #24]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800564e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005652:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005656:	4a02      	ldr	r2, [pc, #8]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005658:	430b      	orrs	r3, r1
 800565a:	6593      	str	r3, [r2, #88]	@ 0x58
 800565c:	e006      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800565e:	bf00      	nop
 8005660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005668:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800566c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800567c:	2300      	movs	r3, #0
 800567e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005682:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005686:	460b      	mov	r3, r1
 8005688:	4313      	orrs	r3, r2
 800568a:	d055      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800568c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005690:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005694:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005698:	d033      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800569a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800569e:	d82c      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a4:	d02f      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80056a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056aa:	d826      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056b0:	d02b      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80056b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056b6:	d820      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056bc:	d012      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80056be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c2:	d81a      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d022      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80056c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056cc:	d115      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d2:	3308      	adds	r3, #8
 80056d4:	2100      	movs	r1, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 fc18 	bl	8006f0c <RCCEx_PLL2_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056e2:	e015      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056e8:	3328      	adds	r3, #40	@ 0x28
 80056ea:	2102      	movs	r1, #2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fcbf 	bl	8007070 <RCCEx_PLL3_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056f8:	e00a      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005700:	e006      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005702:	bf00      	nop
 8005704:	e004      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005706:	bf00      	nop
 8005708:	e002      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800570a:	bf00      	nop
 800570c:	e000      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800570e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005710:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005718:	4ba1      	ldr	r3, [pc, #644]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005724:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005728:	4a9d      	ldr	r2, [pc, #628]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800572a:	430b      	orrs	r3, r1
 800572c:	6593      	str	r3, [r2, #88]	@ 0x58
 800572e:	e003      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005730:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005734:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f002 0308 	and.w	r3, r2, #8
 8005744:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005748:	2300      	movs	r3, #0
 800574a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800574e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	d01e      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800575c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005764:	d10c      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800576a:	3328      	adds	r3, #40	@ 0x28
 800576c:	2102      	movs	r1, #2
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fc7e 	bl	8007070 <RCCEx_PLL3_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005780:	4b87      	ldr	r3, [pc, #540]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005784:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800578c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005790:	4a83      	ldr	r2, [pc, #524]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005792:	430b      	orrs	r3, r1
 8005794:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f002 0310 	and.w	r3, r2, #16
 80057a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057a6:	2300      	movs	r3, #0
 80057a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80057b0:	460b      	mov	r3, r1
 80057b2:	4313      	orrs	r3, r2
 80057b4:	d01e      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c2:	d10c      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c8:	3328      	adds	r3, #40	@ 0x28
 80057ca:	2102      	movs	r1, #2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 fc4f 	bl	8007070 <RCCEx_PLL3_Config>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057de:	4b70      	ldr	r3, [pc, #448]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057ee:	4a6c      	ldr	r2, [pc, #432]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057f0:	430b      	orrs	r3, r1
 80057f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005800:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005804:	2300      	movs	r3, #0
 8005806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800580a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	d03e      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005818:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800581c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005820:	d022      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005822:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005826:	d81b      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005830:	d00b      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005832:	e015      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005838:	3308      	adds	r3, #8
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f001 fb65 	bl	8006f0c <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005848:	e00f      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800584a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800584e:	3328      	adds	r3, #40	@ 0x28
 8005850:	2102      	movs	r1, #2
 8005852:	4618      	mov	r0, r3
 8005854:	f001 fc0c 	bl	8007070 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800585e:	e004      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005872:	4b4b      	ldr	r3, [pc, #300]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005876:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800587a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800587e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005882:	4a47      	ldr	r2, [pc, #284]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005884:	430b      	orrs	r3, r1
 8005886:	6593      	str	r3, [r2, #88]	@ 0x58
 8005888:	e003      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800588e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800589e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058a0:	2300      	movs	r3, #0
 80058a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80058a8:	460b      	mov	r3, r1
 80058aa:	4313      	orrs	r3, r2
 80058ac:	d03b      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80058ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058ba:	d01f      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80058bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058c0:	d818      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80058c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c6:	d003      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80058c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058cc:	d007      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80058ce:	e011      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d0:	4b33      	ldr	r3, [pc, #204]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	4a32      	ldr	r2, [pc, #200]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80058dc:	e00f      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e2:	3328      	adds	r3, #40	@ 0x28
 80058e4:	2101      	movs	r1, #1
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fbc2 	bl	8007070 <RCCEx_PLL3_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80058f2:	e004      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005906:	4b26      	ldr	r3, [pc, #152]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800590e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005916:	4a22      	ldr	r2, [pc, #136]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005918:	430b      	orrs	r3, r1
 800591a:	6553      	str	r3, [r2, #84]	@ 0x54
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005922:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005932:	673b      	str	r3, [r7, #112]	@ 0x70
 8005934:	2300      	movs	r3, #0
 8005936:	677b      	str	r3, [r7, #116]	@ 0x74
 8005938:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800593c:	460b      	mov	r3, r1
 800593e:	4313      	orrs	r3, r2
 8005940:	d034      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005950:	d007      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005952:	e011      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005954:	4b12      	ldr	r3, [pc, #72]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	4a11      	ldr	r2, [pc, #68]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800595a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800595e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005960:	e00e      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005966:	3308      	adds	r3, #8
 8005968:	2102      	movs	r1, #2
 800596a:	4618      	mov	r0, r3
 800596c:	f001 face 	bl	8006f0c <RCCEx_PLL2_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005976:	e003      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800597e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005980:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10d      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005988:	4b05      	ldr	r3, [pc, #20]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800598a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005996:	4a02      	ldr	r2, [pc, #8]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005998:	430b      	orrs	r3, r1
 800599a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800599c:	e006      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80059b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ba:	2300      	movs	r3, #0
 80059bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80059c2:	460b      	mov	r3, r1
 80059c4:	4313      	orrs	r3, r2
 80059c6:	d00c      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059cc:	3328      	adds	r3, #40	@ 0x28
 80059ce:	2102      	movs	r1, #2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 fb4d 	bl	8007070 <RCCEx_PLL3_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80059ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80059f0:	2300      	movs	r3, #0
 80059f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80059f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80059f8:	460b      	mov	r3, r1
 80059fa:	4313      	orrs	r3, r2
 80059fc:	d038      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80059fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a0a:	d018      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005a0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a10:	d811      	bhi.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a16:	d014      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a1c:	d80b      	bhi.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d011      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a26:	d106      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a28:	4bc3      	ldr	r3, [pc, #780]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	4ac2      	ldr	r2, [pc, #776]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a34:	e008      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a3c:	e004      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10b      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a50:	4bb9      	ldr	r3, [pc, #740]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a60:	4ab5      	ldr	r2, [pc, #724]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a62:	430b      	orrs	r3, r1
 8005a64:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a66:	e003      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a7e:	2300      	movs	r3, #0
 8005a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005a86:	460b      	mov	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a8c:	4baa      	ldr	r3, [pc, #680]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a9a:	4aa7      	ldr	r2, [pc, #668]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005aac:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aae:	2300      	movs	r3, #0
 8005ab0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ab2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d009      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005abc:	4b9e      	ldr	r3, [pc, #632]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aca:	4a9b      	ldr	r2, [pc, #620]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005adc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ade:	2300      	movs	r3, #0
 8005ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	d009      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005aec:	4b92      	ldr	r3, [pc, #584]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005afa:	4a8f      	ldr	r2, [pc, #572]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b0e:	2300      	movs	r3, #0
 8005b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b16:	460b      	mov	r3, r1
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	d00e      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b1c:	4b86      	ldr	r3, [pc, #536]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	4a85      	ldr	r2, [pc, #532]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b26:	6113      	str	r3, [r2, #16]
 8005b28:	4b83      	ldr	r3, [pc, #524]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b2a:	6919      	ldr	r1, [r3, #16]
 8005b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b34:	4a80      	ldr	r2, [pc, #512]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b36:	430b      	orrs	r3, r1
 8005b38:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b50:	460b      	mov	r3, r1
 8005b52:	4313      	orrs	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b56:	4b78      	ldr	r3, [pc, #480]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b64:	4a74      	ldr	r2, [pc, #464]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b66:	430b      	orrs	r3, r1
 8005b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005b76:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b78:	2300      	movs	r3, #0
 8005b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005b80:	460b      	mov	r3, r1
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d00a      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b86:	4b6c      	ldr	r3, [pc, #432]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b96:	4a68      	ldr	r2, [pc, #416]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d011      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 f9a3 	bl	8006f0c <RCCEx_PLL2_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	2100      	movs	r1, #0
 8005be6:	6239      	str	r1, [r7, #32]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d011      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	2101      	movs	r1, #1
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 f983 	bl	8006f0c <RCCEx_PLL2_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	2100      	movs	r1, #0
 8005c26:	61b9      	str	r1, [r7, #24]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c32:	460b      	mov	r3, r1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	d011      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	2102      	movs	r1, #2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 f963 	bl	8006f0c <RCCEx_PLL2_Config>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005c4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	2100      	movs	r1, #0
 8005c66:	6139      	str	r1, [r7, #16]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d011      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c7c:	3328      	adds	r3, #40	@ 0x28
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 f9f5 	bl	8007070 <RCCEx_PLL3_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005c8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	d011      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cbc:	3328      	adds	r3, #40	@ 0x28
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 f9d5 	bl	8007070 <RCCEx_PLL3_Config>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6039      	str	r1, [r7, #0]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	d011      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cfc:	3328      	adds	r3, #40	@ 0x28
 8005cfe:	2102      	movs	r1, #2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 f9b5 	bl	8007070 <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005d0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005d1c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	58024400 	.word	0x58024400

08005d3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b090      	sub	sp, #64	@ 0x40
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	f040 8094 	bne.w	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005d54:	4b97      	ldr	r3, [pc, #604]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	f200 8087 	bhi.w	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005d66:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d81 	.word	0x08005d81
 8005d70:	08005da9 	.word	0x08005da9
 8005d74:	08005dd1 	.word	0x08005dd1
 8005d78:	08005e6d 	.word	0x08005e6d
 8005d7c:	08005df9 	.word	0x08005df9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d80:	4b8c      	ldr	r3, [pc, #560]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d8c:	d108      	bne.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 ff68 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d9c:	f000 bc97 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da4:	f000 bc93 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005da8:	4b82      	ldr	r3, [pc, #520]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005db0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005db4:	d108      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005db6:	f107 0318 	add.w	r3, r7, #24
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fcac 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dc4:	f000 bc83 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dcc:	f000 bc7f 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dd0:	4b78      	ldr	r3, [pc, #480]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ddc:	d108      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dde:	f107 030c 	add.w	r3, r7, #12
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fdec 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dec:	f000 bc6f 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df4:	f000 bc6b 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005df8:	4b6e      	ldr	r3, [pc, #440]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e00:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e02:	4b6c      	ldr	r3, [pc, #432]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e14:	4b67      	ldr	r3, [pc, #412]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	08db      	lsrs	r3, r3, #3
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	4a66      	ldr	r2, [pc, #408]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
 8005e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e26:	e01f      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e28:	4b62      	ldr	r3, [pc, #392]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e34:	d106      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e3c:	d102      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e42:	e011      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e44:	4b5b      	ldr	r3, [pc, #364]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e50:	d106      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e58:	d102      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e5a:	4b59      	ldr	r3, [pc, #356]	@ (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e5e:	e003      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e64:	f000 bc33 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005e68:	f000 bc31 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e6c:	4b55      	ldr	r3, [pc, #340]	@ (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e70:	f000 bc2d 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e78:	f000 bc29 	b.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e80:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005e84:	430b      	orrs	r3, r1
 8005e86:	f040 809f 	bne.w	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005e92:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e9a:	d04d      	beq.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea2:	f200 8084 	bhi.w	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005eaa:	d07d      	beq.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8005eb0:	d87d      	bhi.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	2b80      	cmp	r3, #128	@ 0x80
 8005eb6:	d02d      	beq.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	2b80      	cmp	r3, #128	@ 0x80
 8005ebc:	d877      	bhi.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d012      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005eca:	e070      	b.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ecc:	4b39      	ldr	r3, [pc, #228]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ed8:	d107      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fec2 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ee8:	e3f1      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eee:	e3ee      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ef0:	4b30      	ldr	r3, [pc, #192]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005efc:	d107      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efe:	f107 0318 	add.w	r3, r7, #24
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fc08 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f0c:	e3df      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f12:	e3dc      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f14:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f20:	d107      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f22:	f107 030c 	add.w	r3, r7, #12
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fd4a 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f30:	e3cd      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f36:	e3ca      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f38:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f40:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f42:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f54:	4b17      	ldr	r3, [pc, #92]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	08db      	lsrs	r3, r3, #3
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	4a16      	ldr	r2, [pc, #88]	@ (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
 8005f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f66:	e01e      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f68:	4b12      	ldr	r3, [pc, #72]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f74:	d106      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f7c:	d102      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f82:	e010      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f84:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f90:	d106      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f98:	d102      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f9e:	e002      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005fa4:	e393      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005fa6:	e392      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fa8:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fac:	e38f      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fb2:	e38c      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	03d09000 	.word	0x03d09000
 8005fbc:	003d0900 	.word	0x003d0900
 8005fc0:	02dc6c00 	.word	0x02dc6c00
 8005fc4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fcc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	f040 809c 	bne.w	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005fd6:	4b9e      	ldr	r3, [pc, #632]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fda:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005fde:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fe6:	d054      	beq.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fee:	f200 808b 	bhi.w	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ff8:	f000 8083 	beq.w	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006002:	f200 8081 	bhi.w	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600c:	d02f      	beq.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006014:	d878      	bhi.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006022:	d012      	beq.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006024:	e070      	b.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006026:	4b8a      	ldr	r3, [pc, #552]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800602e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006032:	d107      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fe15 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006042:	e344      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006048:	e341      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800604a:	4b81      	ldr	r3, [pc, #516]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006052:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006056:	d107      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006058:	f107 0318 	add.w	r3, r7, #24
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fb5b 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006066:	e332      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800606c:	e32f      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800606e:	4b78      	ldr	r3, [pc, #480]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006076:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800607a:	d107      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800607c:	f107 030c 	add.w	r3, r7, #12
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fc9d 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800608a:	e320      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006090:	e31d      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006092:	4b6f      	ldr	r3, [pc, #444]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006096:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800609a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800609c:	4b6c      	ldr	r3, [pc, #432]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d10c      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80060a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060ae:	4b68      	ldr	r3, [pc, #416]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	08db      	lsrs	r3, r3, #3
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	4a66      	ldr	r2, [pc, #408]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80060ba:	fa22 f303 	lsr.w	r3, r2, r3
 80060be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060c0:	e01e      	b.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060c2:	4b63      	ldr	r3, [pc, #396]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ce:	d106      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80060d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d6:	d102      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060d8:	4b5f      	ldr	r3, [pc, #380]	@ (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060dc:	e010      	b.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060de:	4b5c      	ldr	r3, [pc, #368]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060ea:	d106      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80060ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060f2:	d102      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060f4:	4b59      	ldr	r3, [pc, #356]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80060f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060f8:	e002      	b.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80060fe:	e2e6      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006100:	e2e5      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006102:	4b57      	ldr	r3, [pc, #348]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006106:	e2e2      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800610c:	e2df      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800610e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006112:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006116:	430b      	orrs	r3, r1
 8006118:	f040 80a7 	bne.w	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800611c:	4b4c      	ldr	r3, [pc, #304]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800611e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006120:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006124:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800612c:	d055      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800612e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006130:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006134:	f200 8096 	bhi.w	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800613e:	f000 8084 	beq.w	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006144:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006148:	f200 808c 	bhi.w	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006152:	d030      	beq.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800615a:	f200 8083 	bhi.w	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800615e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800616a:	d012      	beq.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800616c:	e07a      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800616e:	4b38      	ldr	r3, [pc, #224]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006176:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800617a:	d107      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800617c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fd71 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800618a:	e2a0      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006190:	e29d      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006192:	4b2f      	ldr	r3, [pc, #188]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800619a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800619e:	d107      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061a0:	f107 0318 	add.w	r3, r7, #24
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fab7 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ae:	e28e      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b4:	e28b      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061b6:	4b26      	ldr	r3, [pc, #152]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c2:	d107      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061c4:	f107 030c 	add.w	r3, r7, #12
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fbf9 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d2:	e27c      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d8:	e279      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061da:	4b1d      	ldr	r3, [pc, #116]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80061dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d10c      	bne.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80061f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061f6:	4b16      	ldr	r3, [pc, #88]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	08db      	lsrs	r3, r3, #3
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	4a14      	ldr	r2, [pc, #80]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006202:	fa22 f303 	lsr.w	r3, r2, r3
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006208:	e01e      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800620a:	4b11      	ldr	r3, [pc, #68]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006216:	d106      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800621e:	d102      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006220:	4b0d      	ldr	r3, [pc, #52]	@ (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006224:	e010      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006226:	4b0a      	ldr	r3, [pc, #40]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800622e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006232:	d106      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800623a:	d102      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800623c:	4b07      	ldr	r3, [pc, #28]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006240:	e002      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006246:	e242      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006248:	e241      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800624a:	4b05      	ldr	r3, [pc, #20]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800624c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800624e:	e23e      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006250:	58024400 	.word	0x58024400
 8006254:	03d09000 	.word	0x03d09000
 8006258:	003d0900 	.word	0x003d0900
 800625c:	02dc6c00 	.word	0x02dc6c00
 8006260:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006268:	e231      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800626a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006272:	430b      	orrs	r3, r1
 8006274:	f040 8085 	bne.w	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006278:	4b9c      	ldr	r3, [pc, #624]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800627a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006280:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006288:	d06b      	beq.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006290:	d874      	bhi.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006294:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006298:	d056      	beq.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800629a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062a0:	d86c      	bhi.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062a8:	d03b      	beq.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062b0:	d864      	bhi.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80062b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062b8:	d021      	beq.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80062ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062c0:	d85c      	bhi.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80062c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ce:	d004      	beq.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80062d0:	e054      	b.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80062d2:	f7fe fb49 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80062d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062d8:	e1f9      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062da:	4b84      	ldr	r3, [pc, #528]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062e6:	d107      	bne.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e8:	f107 0318 	add.w	r3, r7, #24
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 fa13 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062f6:	e1ea      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062fc:	e1e7      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062fe:	4b7b      	ldr	r3, [pc, #492]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800630a:	d107      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800630c:	f107 030c 	add.w	r3, r7, #12
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fb55 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800631a:	e1d8      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006320:	e1d5      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006322:	4b72      	ldr	r3, [pc, #456]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b04      	cmp	r3, #4
 800632c:	d109      	bne.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800632e:	4b6f      	ldr	r3, [pc, #444]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	08db      	lsrs	r3, r3, #3
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	4a6d      	ldr	r2, [pc, #436]	@ (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800633a:	fa22 f303 	lsr.w	r3, r2, r3
 800633e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006340:	e1c5      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006346:	e1c2      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006348:	4b68      	ldr	r3, [pc, #416]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006354:	d102      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8006356:	4b67      	ldr	r3, [pc, #412]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800635a:	e1b8      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006360:	e1b5      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006362:	4b62      	ldr	r3, [pc, #392]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800636e:	d102      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006370:	4b61      	ldr	r3, [pc, #388]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006374:	e1ab      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637a:	e1a8      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006380:	e1a5      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006386:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800638a:	430b      	orrs	r3, r1
 800638c:	d173      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800638e:	4b57      	ldr	r3, [pc, #348]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006392:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006396:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800639e:	d02f      	beq.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a6:	d863      	bhi.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80063a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80063ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d012      	beq.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80063b6:	e05b      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063b8:	4b4c      	ldr	r3, [pc, #304]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063c4:	d107      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063c6:	f107 0318 	add.w	r3, r7, #24
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f9a4 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063d4:	e17b      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063da:	e178      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063dc:	4b43      	ldr	r3, [pc, #268]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e8:	d107      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ea:	f107 030c 	add.w	r3, r7, #12
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fae6 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063f8:	e169      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063fe:	e166      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006400:	4b3a      	ldr	r3, [pc, #232]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006404:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006408:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800640a:	4b38      	ldr	r3, [pc, #224]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d10c      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800641c:	4b33      	ldr	r3, [pc, #204]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	4a32      	ldr	r2, [pc, #200]	@ (80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800642e:	e01e      	b.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006430:	4b2e      	ldr	r3, [pc, #184]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800643c:	d106      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800643e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006444:	d102      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006446:	4b2b      	ldr	r3, [pc, #172]	@ (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800644a:	e010      	b.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800644c:	4b27      	ldr	r3, [pc, #156]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006458:	d106      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800645a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006460:	d102      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006462:	4b25      	ldr	r3, [pc, #148]	@ (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006466:	e002      	b.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800646c:	e12f      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800646e:	e12e      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006474:	e12b      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800647e:	430b      	orrs	r3, r1
 8006480:	d13c      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006482:	4b1a      	ldr	r3, [pc, #104]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800648a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800648c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006498:	d012      	beq.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800649a:	e023      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800649c:	4b13      	ldr	r3, [pc, #76]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064a8:	d107      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fbda 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b8:	e109      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064be:	e106      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064c0:	4b0a      	ldr	r3, [pc, #40]	@ (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064cc:	d107      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ce:	f107 0318 	add.w	r3, r7, #24
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 f920 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064dc:	e0f7      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e2:	e0f4      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e8:	e0f1      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80064ea:	bf00      	nop
 80064ec:	58024400 	.word	0x58024400
 80064f0:	03d09000 	.word	0x03d09000
 80064f4:	003d0900 	.word	0x003d0900
 80064f8:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80064fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006500:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006504:	430b      	orrs	r3, r1
 8006506:	f040 8091 	bne.w	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800650a:	4b73      	ldr	r3, [pc, #460]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006512:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006516:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800651a:	f000 8081 	beq.w	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006520:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006524:	d87f      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800652c:	d06b      	beq.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800652e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006530:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006534:	d877      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800653c:	d056      	beq.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006544:	d86f      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800654c:	d03b      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006554:	d867      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800655c:	d021      	beq.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006564:	d85f      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800656c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006572:	d004      	beq.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006574:	e057      	b.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006576:	f000 f8b9 	bl	80066ec <HAL_RCCEx_GetD3PCLK1Freq>
 800657a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800657c:	e0a7      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800657e:	4b56      	ldr	r3, [pc, #344]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800658a:	d107      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800658c:	f107 0318 	add.w	r3, r7, #24
 8006590:	4618      	mov	r0, r3
 8006592:	f000 f8c1 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800659a:	e098      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a0:	e095      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065a2:	4b4d      	ldr	r3, [pc, #308]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ae:	d107      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065b0:	f107 030c 	add.w	r3, r7, #12
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fa03 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065be:	e086      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c4:	e083      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c6:	4b44      	ldr	r3, [pc, #272]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d109      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d2:	4b41      	ldr	r3, [pc, #260]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	08db      	lsrs	r3, r3, #3
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	4a3f      	ldr	r2, [pc, #252]	@ (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80065de:	fa22 f303 	lsr.w	r3, r2, r3
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e4:	e073      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ea:	e070      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80065ec:	4b3a      	ldr	r3, [pc, #232]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065f8:	d102      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80065fa:	4b39      	ldr	r3, [pc, #228]	@ (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80065fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065fe:	e066      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006600:	2300      	movs	r3, #0
 8006602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006604:	e063      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006606:	4b34      	ldr	r3, [pc, #208]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800660e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006612:	d102      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006614:	4b33      	ldr	r3, [pc, #204]	@ (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006618:	e059      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661e:	e056      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006620:	4b31      	ldr	r3, [pc, #196]	@ (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006624:	e053      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800662a:	e050      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800662c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006630:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006634:	430b      	orrs	r3, r1
 8006636:	d148      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006638:	4b27      	ldr	r3, [pc, #156]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800663a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006640:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006648:	d02a      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006650:	d838      	bhi.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006654:	2b00      	cmp	r3, #0
 8006656:	d004      	beq.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800665e:	d00d      	beq.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006660:	e030      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006662:	4b1d      	ldr	r3, [pc, #116]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800666e:	d102      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8006670:	4b1c      	ldr	r3, [pc, #112]	@ (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006674:	e02b      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800667a:	e028      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800667c:	4b16      	ldr	r3, [pc, #88]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006684:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006688:	d107      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800668a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800668e:	4618      	mov	r0, r3
 8006690:	f000 faea 	bl	8006c68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006698:	e019      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800669e:	e016      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066a0:	4b0d      	ldr	r3, [pc, #52]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ac:	d107      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ae:	f107 0318 	add.w	r3, r7, #24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f830 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066bc:	e007      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c2:	e004      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c8:	e001      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80066ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3740      	adds	r7, #64	@ 0x40
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	58024400 	.word	0x58024400
 80066dc:	03d09000 	.word	0x03d09000
 80066e0:	003d0900 	.word	0x003d0900
 80066e4:	02dc6c00 	.word	0x02dc6c00
 80066e8:	00bb8000 	.word	0x00bb8000

080066ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80066f0:	f7fe f90a 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	4904      	ldr	r1, [pc, #16]	@ (8006714 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006702:	5ccb      	ldrb	r3, [r1, r3]
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd80      	pop	{r7, pc}
 8006710:	58024400 	.word	0x58024400
 8006714:	08011610 	.word	0x08011610

08006718 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006718:	b480      	push	{r7}
 800671a:	b089      	sub	sp, #36	@ 0x24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006720:	4ba1      	ldr	r3, [pc, #644]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800672a:	4b9f      	ldr	r3, [pc, #636]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	0b1b      	lsrs	r3, r3, #12
 8006730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006734:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006736:	4b9c      	ldr	r3, [pc, #624]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	091b      	lsrs	r3, r3, #4
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006742:	4b99      	ldr	r3, [pc, #612]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006746:	08db      	lsrs	r3, r3, #3
 8006748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8111 	beq.w	8006988 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b02      	cmp	r3, #2
 800676a:	f000 8083 	beq.w	8006874 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b02      	cmp	r3, #2
 8006772:	f200 80a1 	bhi.w	80068b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d056      	beq.n	8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006782:	e099      	b.n	80068b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006784:	4b88      	ldr	r3, [pc, #544]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02d      	beq.n	80067ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006790:	4b85      	ldr	r3, [pc, #532]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	08db      	lsrs	r3, r3, #3
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	4a84      	ldr	r2, [pc, #528]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
 80067a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ba:	4b7b      	ldr	r3, [pc, #492]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80067ea:	e087      	b.n	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80067fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fe:	4b6a      	ldr	r3, [pc, #424]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006812:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800682e:	e065      	b.n	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	ee07 3a90 	vmov	s15, r3
 8006836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800683e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006842:	4b59      	ldr	r3, [pc, #356]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006852:	ed97 6a03 	vldr	s12, [r7, #12]
 8006856:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800685a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006872:	e043      	b.n	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80069bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006886:	4b48      	ldr	r3, [pc, #288]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006896:	ed97 6a03 	vldr	s12, [r7, #12]
 800689a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800689e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068b6:	e021      	b.n	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	ee07 3a90 	vmov	s15, r3
 80068be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ca:	4b37      	ldr	r3, [pc, #220]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068da:	ed97 6a03 	vldr	s12, [r7, #12]
 80068de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80068fc:	4b2a      	ldr	r3, [pc, #168]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006900:	0a5b      	lsrs	r3, r3, #9
 8006902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006916:	edd7 6a07 	vldr	s13, [r7, #28]
 800691a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800691e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006922:	ee17 2a90 	vmov	r2, s15
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800692a:	4b1f      	ldr	r3, [pc, #124]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800692c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692e:	0c1b      	lsrs	r3, r3, #16
 8006930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006934:	ee07 3a90 	vmov	s15, r3
 8006938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006944:	edd7 6a07 	vldr	s13, [r7, #28]
 8006948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800694c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006950:	ee17 2a90 	vmov	r2, s15
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006958:	4b13      	ldr	r3, [pc, #76]	@ (80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695c:	0e1b      	lsrs	r3, r3, #24
 800695e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800696e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006972:	edd7 6a07 	vldr	s13, [r7, #28]
 8006976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800697a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800697e:	ee17 2a90 	vmov	r2, s15
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006986:	e008      	b.n	800699a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	609a      	str	r2, [r3, #8]
}
 800699a:	bf00      	nop
 800699c:	3724      	adds	r7, #36	@ 0x24
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	58024400 	.word	0x58024400
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	46000000 	.word	0x46000000
 80069b4:	4c742400 	.word	0x4c742400
 80069b8:	4a742400 	.word	0x4a742400
 80069bc:	4c371b00 	.word	0x4c371b00

080069c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b089      	sub	sp, #36	@ 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069c8:	4ba1      	ldr	r3, [pc, #644]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80069d2:	4b9f      	ldr	r3, [pc, #636]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d6:	0d1b      	lsrs	r3, r3, #20
 80069d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069de:	4b9c      	ldr	r3, [pc, #624]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80069ea:	4b99      	ldr	r3, [pc, #612]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	08db      	lsrs	r3, r3, #3
 80069f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8111 	beq.w	8006c30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	f000 8083 	beq.w	8006b1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	f200 80a1 	bhi.w	8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d056      	beq.n	8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a2a:	e099      	b.n	8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a2c:	4b88      	ldr	r3, [pc, #544]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d02d      	beq.n	8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a38:	4b85      	ldr	r3, [pc, #532]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	08db      	lsrs	r3, r3, #3
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	4a84      	ldr	r2, [pc, #528]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
 8006a48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	ee07 3a90 	vmov	s15, r3
 8006a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a62:	4b7b      	ldr	r3, [pc, #492]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a92:	e087      	b.n	8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ad6:	e065      	b.n	8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aea:	4b59      	ldr	r3, [pc, #356]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006afe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b1a:	e043      	b.n	8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	4b48      	ldr	r3, [pc, #288]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b5e:	e021      	b.n	8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b37      	ldr	r3, [pc, #220]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ba2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba8:	0a5b      	lsrs	r3, r3, #9
 8006baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bca:	ee17 2a90 	vmov	r2, s15
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	0c1b      	lsrs	r3, r3, #16
 8006bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006be8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf8:	ee17 2a90 	vmov	r2, s15
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c00:	4b13      	ldr	r3, [pc, #76]	@ (8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c04:	0e1b      	lsrs	r3, r3, #24
 8006c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c26:	ee17 2a90 	vmov	r2, s15
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c2e:	e008      	b.n	8006c42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	609a      	str	r2, [r3, #8]
}
 8006c42:	bf00      	nop
 8006c44:	3724      	adds	r7, #36	@ 0x24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	58024400 	.word	0x58024400
 8006c54:	03d09000 	.word	0x03d09000
 8006c58:	46000000 	.word	0x46000000
 8006c5c:	4c742400 	.word	0x4c742400
 8006c60:	4a742400 	.word	0x4a742400
 8006c64:	4c371b00 	.word	0x4c371b00

08006c68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b089      	sub	sp, #36	@ 0x24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c70:	4ba0      	ldr	r3, [pc, #640]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006c7a:	4b9e      	ldr	r3, [pc, #632]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7e:	091b      	lsrs	r3, r3, #4
 8006c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006c86:	4b9b      	ldr	r3, [pc, #620]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c90:	4b98      	ldr	r3, [pc, #608]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c94:	08db      	lsrs	r3, r3, #3
 8006c96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8111 	beq.w	8006ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	f000 8083 	beq.w	8006dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	f200 80a1 	bhi.w	8006e06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d056      	beq.n	8006d7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006cd0:	e099      	b.n	8006e06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cd2:	4b88      	ldr	r3, [pc, #544]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d02d      	beq.n	8006d3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cde:	4b85      	ldr	r3, [pc, #532]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	08db      	lsrs	r3, r3, #3
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	4a83      	ldr	r2, [pc, #524]	@ (8006ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006cea:	fa22 f303 	lsr.w	r3, r2, r3
 8006cee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	ee07 3a90 	vmov	s15, r3
 8006d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d08:	4b7a      	ldr	r3, [pc, #488]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d18:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006efc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d34:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d38:	e087      	b.n	8006e4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d44:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006f00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4c:	4b69      	ldr	r3, [pc, #420]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d60:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006efc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d7c:	e065      	b.n	8006e4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	ee07 3a90 	vmov	s15, r3
 8006d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d88:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006f04 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d90:	4b58      	ldr	r3, [pc, #352]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006da4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006efc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dc0:	e043      	b.n	8006e4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	ee07 3a90 	vmov	s15, r3
 8006dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dcc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006f08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd4:	4b47      	ldr	r3, [pc, #284]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006de8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006efc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e04:	e021      	b.n	8006e4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	ee07 3a90 	vmov	s15, r3
 8006e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e10:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006f00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e18:	4b36      	ldr	r3, [pc, #216]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e28:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e2c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006efc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e48:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4e:	0a5b      	lsrs	r3, r3, #9
 8006e50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e54:	ee07 3a90 	vmov	s15, r3
 8006e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e70:	ee17 2a90 	vmov	r2, s15
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006e78:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9e:	ee17 2a90 	vmov	r2, s15
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006ea6:	4b13      	ldr	r3, [pc, #76]	@ (8006ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eaa:	0e1b      	lsrs	r3, r3, #24
 8006eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ecc:	ee17 2a90 	vmov	r2, s15
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	609a      	str	r2, [r3, #8]
}
 8006ee8:	bf00      	nop
 8006eea:	3724      	adds	r7, #36	@ 0x24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	03d09000 	.word	0x03d09000
 8006efc:	46000000 	.word	0x46000000
 8006f00:	4c742400 	.word	0x4c742400
 8006f04:	4a742400 	.word	0x4a742400
 8006f08:	4c371b00 	.word	0x4c371b00

08006f0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f1a:	4b53      	ldr	r3, [pc, #332]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d101      	bne.n	8006f2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e099      	b.n	800705e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a4e      	ldr	r2, [pc, #312]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006f30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f36:	f7fa fdbb 	bl	8001ab0 <HAL_GetTick>
 8006f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f3c:	e008      	b.n	8006f50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f3e:	f7fa fdb7 	bl	8001ab0 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e086      	b.n	800705e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f50:	4b45      	ldr	r3, [pc, #276]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f0      	bne.n	8006f3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f5c:	4b42      	ldr	r3, [pc, #264]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	031b      	lsls	r3, r3, #12
 8006f6a:	493f      	ldr	r1, [pc, #252]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	025b      	lsls	r3, r3, #9
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	041b      	lsls	r3, r3, #16
 8006f8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fa0:	4931      	ldr	r1, [pc, #196]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fa6:	4b30      	ldr	r3, [pc, #192]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006faa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	492d      	ldr	r1, [pc, #180]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	f023 0220 	bic.w	r2, r3, #32
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	4928      	ldr	r1, [pc, #160]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fca:	4b27      	ldr	r3, [pc, #156]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fce:	4a26      	ldr	r2, [pc, #152]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fd0:	f023 0310 	bic.w	r3, r3, #16
 8006fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fd6:	4b24      	ldr	r3, [pc, #144]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fda:	4b24      	ldr	r3, [pc, #144]	@ (800706c <RCCEx_PLL2_Config+0x160>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	69d2      	ldr	r2, [r2, #28]
 8006fe2:	00d2      	lsls	r2, r2, #3
 8006fe4:	4920      	ldr	r1, [pc, #128]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006fea:	4b1f      	ldr	r3, [pc, #124]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006ff0:	f043 0310 	orr.w	r3, r3, #16
 8006ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a19      	ldr	r2, [pc, #100]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8007002:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007006:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007008:	e00f      	b.n	800702a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d106      	bne.n	800701e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007010:	4b15      	ldr	r3, [pc, #84]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8007012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007014:	4a14      	ldr	r2, [pc, #80]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8007016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800701a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800701c:	e005      	b.n	800702a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800701e:	4b12      	ldr	r3, [pc, #72]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	4a11      	ldr	r2, [pc, #68]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8007024:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007028:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800702a:	4b0f      	ldr	r3, [pc, #60]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a0e      	ldr	r2, [pc, #56]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8007030:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007036:	f7fa fd3b 	bl	8001ab0 <HAL_GetTick>
 800703a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800703c:	e008      	b.n	8007050 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800703e:	f7fa fd37 	bl	8001ab0 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e006      	b.n	800705e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007050:	4b05      	ldr	r3, [pc, #20]	@ (8007068 <RCCEx_PLL2_Config+0x15c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	58024400 	.word	0x58024400
 800706c:	ffff0007 	.word	0xffff0007

08007070 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800707e:	4b53      	ldr	r3, [pc, #332]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	2b03      	cmp	r3, #3
 8007088:	d101      	bne.n	800708e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e099      	b.n	80071c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800708e:	4b4f      	ldr	r3, [pc, #316]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a4e      	ldr	r2, [pc, #312]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800709a:	f7fa fd09 	bl	8001ab0 <HAL_GetTick>
 800709e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070a0:	e008      	b.n	80070b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070a2:	f7fa fd05 	bl	8001ab0 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e086      	b.n	80071c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070b4:	4b45      	ldr	r3, [pc, #276]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1f0      	bne.n	80070a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070c0:	4b42      	ldr	r3, [pc, #264]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	051b      	lsls	r3, r3, #20
 80070ce:	493f      	ldr	r1, [pc, #252]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	3b01      	subs	r3, #1
 80070da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	025b      	lsls	r3, r3, #9
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	061b      	lsls	r3, r3, #24
 8007100:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007104:	4931      	ldr	r1, [pc, #196]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007106:	4313      	orrs	r3, r2
 8007108:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800710a:	4b30      	ldr	r3, [pc, #192]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	492d      	ldr	r1, [pc, #180]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007118:	4313      	orrs	r3, r2
 800711a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800711c:	4b2b      	ldr	r3, [pc, #172]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	4928      	ldr	r1, [pc, #160]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 800712a:	4313      	orrs	r3, r2
 800712c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800712e:	4b27      	ldr	r3, [pc, #156]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	4a26      	ldr	r2, [pc, #152]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007138:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800713a:	4b24      	ldr	r3, [pc, #144]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 800713c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800713e:	4b24      	ldr	r3, [pc, #144]	@ (80071d0 <RCCEx_PLL3_Config+0x160>)
 8007140:	4013      	ands	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	69d2      	ldr	r2, [r2, #28]
 8007146:	00d2      	lsls	r2, r2, #3
 8007148:	4920      	ldr	r1, [pc, #128]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 800714a:	4313      	orrs	r3, r2
 800714c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800714e:	4b1f      	ldr	r3, [pc, #124]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	4a1e      	ldr	r2, [pc, #120]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007158:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d106      	bne.n	800716e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007160:	4b1a      	ldr	r3, [pc, #104]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007164:	4a19      	ldr	r2, [pc, #100]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007166:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800716a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800716c:	e00f      	b.n	800718e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d106      	bne.n	8007182 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007174:	4b15      	ldr	r3, [pc, #84]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007178:	4a14      	ldr	r2, [pc, #80]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 800717a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800717e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007180:	e005      	b.n	800718e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007182:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	4a11      	ldr	r2, [pc, #68]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007188:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800718c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800718e:	4b0f      	ldr	r3, [pc, #60]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a0e      	ldr	r2, [pc, #56]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 8007194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800719a:	f7fa fc89 	bl	8001ab0 <HAL_GetTick>
 800719e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071a0:	e008      	b.n	80071b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071a2:	f7fa fc85 	bl	8001ab0 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e006      	b.n	80071c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <RCCEx_PLL3_Config+0x15c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0f0      	beq.n	80071a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	58024400 	.word	0x58024400
 80071d0:	ffff0007 	.word	0xffff0007

080071d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08a      	sub	sp, #40	@ 0x28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e075      	b.n	80072d2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d105      	bne.n	80071fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fa f81b 	bl	8001234 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2204      	movs	r2, #4
 8007202:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f868 	bl	80072dc <HAL_SD_InitCard>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e05d      	b.n	80072d2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007216:	f107 0308 	add.w	r3, r7, #8
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fa9d 	bl	800775c <HAL_SD_GetCardStatus>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e052      	b.n	80072d2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800722c:	7e3b      	ldrb	r3, [r7, #24]
 800722e:	b2db      	uxtb	r3, r3
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007232:	7e7b      	ldrb	r3, [r7, #25]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723c:	2b01      	cmp	r3, #1
 800723e:	d10a      	bne.n	8007256 <HAL_SD_Init+0x82>
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d102      	bne.n	800724c <HAL_SD_Init+0x78>
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007252:	659a      	str	r2, [r3, #88]	@ 0x58
 8007254:	e00b      	b.n	800726e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725a:	2b01      	cmp	r3, #1
 800725c:	d104      	bne.n	8007268 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007264:	659a      	str	r2, [r3, #88]	@ 0x58
 8007266:	e002      	b.n	800726e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb2f 	bl	80078d8 <HAL_SD_ConfigWideBusOperation>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e026      	b.n	80072d2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007284:	f7fa fc14 	bl	8001ab0 <HAL_GetTick>
 8007288:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800728a:	e011      	b.n	80072b0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800728c:	f7fa fc10 	bl	8001ab0 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d109      	bne.n	80072b0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80072a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e010      	b.n	80072d2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fc23 	bl	8007afc <HAL_SD_GetCardState>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d1e7      	bne.n	800728c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3728      	adds	r7, #40	@ 0x28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80072dc:	b590      	push	{r4, r7, lr}
 80072de:	b08d      	sub	sp, #52	@ 0x34
 80072e0:	af02      	add	r7, sp, #8
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80072f4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80072f8:	f04f 0100 	mov.w	r1, #0
 80072fc:	f7fe fd1e 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 8007300:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d109      	bne.n	800731c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007316:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e070      	b.n	80073fe <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	4a39      	ldr	r2, [pc, #228]	@ (8007408 <HAL_SD_InitCard+0x12c>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	091b      	lsrs	r3, r3, #4
 8007328:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681c      	ldr	r4, [r3, #0]
 800732e:	466a      	mov	r2, sp
 8007330:	f107 0318 	add.w	r3, r7, #24
 8007334:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007338:	e882 0003 	stmia.w	r2, {r0, r1}
 800733c:	f107 030c 	add.w	r3, r7, #12
 8007340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007342:	4620      	mov	r0, r4
 8007344:	f004 f8ca 	bl	800b4dc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4618      	mov	r0, r3
 800734e:	f004 f8fc 	bl	800b54a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800736a:	4a28      	ldr	r2, [pc, #160]	@ (800740c <HAL_SD_InitCard+0x130>)
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007372:	3301      	adds	r3, #1
 8007374:	4618      	mov	r0, r3
 8007376:	f7fa fba7 	bl	8001ac8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fcac 	bl	8007cd8 <SD_PowerON>
 8007380:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00b      	beq.n	80073a0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e02e      	b.n	80073fe <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fbcb 	bl	8007b3c <SD_InitCard>
 80073a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e01b      	b.n	80073fe <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80073ce:	4618      	mov	r0, r3
 80073d0:	f004 f950 	bl	800b674 <SDMMC_CmdBlockLength>
 80073d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00f      	beq.n	80073fc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007410 <HAL_SD_InitCard+0x134>)
 80073e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e000      	b.n	80073fe <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	372c      	adds	r7, #44	@ 0x2c
 8007402:	46bd      	mov	sp, r7
 8007404:	bd90      	pop	{r4, r7, pc}
 8007406:	bf00      	nop
 8007408:	014f8b59 	.word	0x014f8b59
 800740c:	00012110 	.word	0x00012110
 8007410:	1fe00fff 	.word	0x1fe00fff

08007414 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007422:	0f9b      	lsrs	r3, r3, #30
 8007424:	b2da      	uxtb	r2, r3
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742e:	0e9b      	lsrs	r3, r3, #26
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f003 030f 	and.w	r3, r3, #15
 8007436:	b2da      	uxtb	r2, r3
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007440:	0e1b      	lsrs	r3, r3, #24
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	b2da      	uxtb	r2, r3
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007452:	0c1b      	lsrs	r3, r3, #16
 8007454:	b2da      	uxtb	r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745e:	0a1b      	lsrs	r3, r3, #8
 8007460:	b2da      	uxtb	r2, r3
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746a:	b2da      	uxtb	r2, r3
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007474:	0d1b      	lsrs	r3, r3, #20
 8007476:	b29a      	uxth	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007480:	0c1b      	lsrs	r3, r3, #16
 8007482:	b2db      	uxtb	r3, r3
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	b2da      	uxtb	r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007492:	0bdb      	lsrs	r3, r3, #15
 8007494:	b2db      	uxtb	r3, r3
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a4:	0b9b      	lsrs	r3, r3, #14
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b6:	0b5b      	lsrs	r3, r3, #13
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c8:	0b1b      	lsrs	r3, r3, #12
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2200      	movs	r2, #0
 80074da:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d163      	bne.n	80075ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e8:	009a      	lsls	r2, r3, #2
 80074ea:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80074ee:	4013      	ands	r3, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80074f4:	0f92      	lsrs	r2, r2, #30
 80074f6:	431a      	orrs	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007500:	0edb      	lsrs	r3, r3, #27
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	b2da      	uxtb	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007512:	0e1b      	lsrs	r3, r3, #24
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	b2da      	uxtb	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007524:	0d5b      	lsrs	r3, r3, #21
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f003 0307 	and.w	r3, r3, #7
 800752c:	b2da      	uxtb	r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007536:	0c9b      	lsrs	r3, r3, #18
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	b2da      	uxtb	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007548:	0bdb      	lsrs	r3, r3, #15
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	b2da      	uxtb	r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	7e1b      	ldrb	r3, [r3, #24]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	3302      	adds	r3, #2
 800756c:	2201      	movs	r2, #1
 800756e:	fa02 f303 	lsl.w	r3, r2, r3
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007576:	fb03 f202 	mul.w	r2, r3, r2
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	7a1b      	ldrb	r3, [r3, #8]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	2201      	movs	r2, #1
 800758a:	409a      	lsls	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007598:	0a52      	lsrs	r2, r2, #9
 800759a:	fb03 f202 	mul.w	r2, r3, r2
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80075aa:	e031      	b.n	8007610 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d11d      	bne.n	80075f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075b8:	041b      	lsls	r3, r3, #16
 80075ba:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075c2:	0c1b      	lsrs	r3, r3, #16
 80075c4:	431a      	orrs	r2, r3
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	3301      	adds	r3, #1
 80075d0:	029a      	lsls	r2, r3, #10
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80075ee:	e00f      	b.n	8007610 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a58      	ldr	r2, [pc, #352]	@ (8007758 <HAL_SD_GetCardCSD+0x344>)
 80075f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e09d      	b.n	800774c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007614:	0b9b      	lsrs	r3, r3, #14
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	b2da      	uxtb	r2, r3
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007626:	09db      	lsrs	r3, r3, #7
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800762e:	b2da      	uxtb	r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800763e:	b2da      	uxtb	r2, r3
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007648:	0fdb      	lsrs	r3, r3, #31
 800764a:	b2da      	uxtb	r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007654:	0f5b      	lsrs	r3, r3, #29
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f003 0303 	and.w	r3, r3, #3
 800765c:	b2da      	uxtb	r2, r3
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007666:	0e9b      	lsrs	r3, r3, #26
 8007668:	b2db      	uxtb	r3, r3
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	b2da      	uxtb	r2, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007678:	0d9b      	lsrs	r3, r3, #22
 800767a:	b2db      	uxtb	r3, r3
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	b2da      	uxtb	r2, r3
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800768a:	0d5b      	lsrs	r3, r3, #21
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	b2da      	uxtb	r2, r3
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076a6:	0c1b      	lsrs	r3, r3, #16
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ba:	0bdb      	lsrs	r3, r3, #15
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ce:	0b9b      	lsrs	r3, r3, #14
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076e2:	0b5b      	lsrs	r3, r3, #13
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076f6:	0b1b      	lsrs	r3, r3, #12
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800770a:	0a9b      	lsrs	r3, r3, #10
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	b2da      	uxtb	r2, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	b2db      	uxtb	r3, r3
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	b2da      	uxtb	r2, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007732:	085b      	lsrs	r3, r3, #1
 8007734:	b2db      	uxtb	r3, r3
 8007736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800773a:	b2da      	uxtb	r2, r3
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	1fe00fff 	.word	0x1fe00fff

0800775c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b094      	sub	sp, #80	@ 0x50
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b03      	cmp	r3, #3
 8007776:	d101      	bne.n	800777c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e0a7      	b.n	80078cc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800777c:	f107 0308 	add.w	r3, r7, #8
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fb36 	bl	8007df4 <SD_SendSDStatus>
 8007788:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800778a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800778c:	2b00      	cmp	r3, #0
 800778e:	d011      	beq.n	80077b4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a4f      	ldr	r2, [pc, #316]	@ (80078d4 <HAL_SD_GetCardStatus+0x178>)
 8007796:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800779c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80077b2:	e070      	b.n	8007896 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	0a1b      	lsrs	r3, r3, #8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	0e1b      	lsrs	r3, r3, #24
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	4313      	orrs	r3, r2
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	061a      	lsls	r2, r3, #24
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80077fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	0a1b      	lsrs	r3, r3, #8
 8007800:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007804:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	0e1b      	lsrs	r3, r3, #24
 800780a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	b2da      	uxtb	r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	0a1b      	lsrs	r3, r3, #8
 800781c:	b2da      	uxtb	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	0d1b      	lsrs	r3, r3, #20
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 030f 	and.w	r3, r3, #15
 800782c:	b2da      	uxtb	r2, r3
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	0c1b      	lsrs	r3, r3, #16
 8007836:	b29b      	uxth	r3, r3
 8007838:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800783c:	b29a      	uxth	r2, r3
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	b29b      	uxth	r3, r3
 8007842:	b2db      	uxtb	r3, r3
 8007844:	b29b      	uxth	r3, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	b29a      	uxth	r2, r3
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	0a9b      	lsrs	r3, r3, #10
 8007852:	b2db      	uxtb	r3, r3
 8007854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007858:	b2da      	uxtb	r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	0a1b      	lsrs	r3, r3, #8
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	b2da      	uxtb	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	091b      	lsrs	r3, r3, #4
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	b2da      	uxtb	r2, r3
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	b2da      	uxtb	r2, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	0e1b      	lsrs	r3, r3, #24
 8007890:	b2da      	uxtb	r2, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800789e:	4618      	mov	r0, r3
 80078a0:	f003 fee8 	bl	800b674 <SDMMC_CmdBlockLength>
 80078a4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80078a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00d      	beq.n	80078c8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a08      	ldr	r2, [pc, #32]	@ (80078d4 <HAL_SD_GetCardStatus+0x178>)
 80078b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078b8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80078c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3750      	adds	r7, #80	@ 0x50
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	1fe00fff 	.word	0x1fe00fff

080078d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80078d8:	b590      	push	{r4, r7, lr}
 80078da:	b08d      	sub	sp, #52	@ 0x34
 80078dc:	af02      	add	r7, sp, #8
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2203      	movs	r2, #3
 80078ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d02e      	beq.n	8007956 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078fe:	d106      	bne.n	800790e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007904:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	635a      	str	r2, [r3, #52]	@ 0x34
 800790c:	e029      	b.n	8007962 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007914:	d10a      	bne.n	800792c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fb64 	bl	8007fe4 <SD_WideBus_Enable>
 800791c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	635a      	str	r2, [r3, #52]	@ 0x34
 800792a:	e01a      	b.n	8007962 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fba1 	bl	800807a <SD_WideBus_Disable>
 8007938:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	635a      	str	r2, [r3, #52]	@ 0x34
 8007946:	e00c      	b.n	8007962 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	635a      	str	r2, [r3, #52]	@ 0x34
 8007954:	e005      	b.n	8007962 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800795a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a5f      	ldr	r2, [pc, #380]	@ (8007aec <HAL_SD_ConfigWideBusOperation+0x214>)
 8007970:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007978:	e096      	b.n	8007aa8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800797a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800797e:	f04f 0100 	mov.w	r1, #0
 8007982:	f7fe f9db 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 8007986:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8083 	beq.w	8007a96 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695a      	ldr	r2, [r3, #20]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4950      	ldr	r1, [pc, #320]	@ (8007af0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80079ae:	fba1 1303 	umull	r1, r3, r1, r3
 80079b2:	0e1b      	lsrs	r3, r3, #24
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d303      	bcc.n	80079c0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	61bb      	str	r3, [r7, #24]
 80079be:	e05a      	b.n	8007a76 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c8:	d103      	bne.n	80079d2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	e051      	b.n	8007a76 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079da:	d126      	bne.n	8007a2a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10e      	bne.n	8007a02 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	4a43      	ldr	r2, [pc, #268]	@ (8007af4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d906      	bls.n	80079fa <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	4a40      	ldr	r2, [pc, #256]	@ (8007af0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80079f0:	fba2 2303 	umull	r2, r3, r2, r3
 80079f4:	0e5b      	lsrs	r3, r3, #25
 80079f6:	61bb      	str	r3, [r7, #24]
 80079f8:	e03d      	b.n	8007a76 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	e039      	b.n	8007a76 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0e:	4a39      	ldr	r2, [pc, #228]	@ (8007af4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d906      	bls.n	8007a22 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4a36      	ldr	r2, [pc, #216]	@ (8007af0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a18:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1c:	0e5b      	lsrs	r3, r3, #25
 8007a1e:	61bb      	str	r3, [r7, #24]
 8007a20:	e029      	b.n	8007a76 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	e025      	b.n	8007a76 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10e      	bne.n	8007a50 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4a30      	ldr	r2, [pc, #192]	@ (8007af8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d906      	bls.n	8007a48 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8007af0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a42:	0e1b      	lsrs	r3, r3, #24
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	e016      	b.n	8007a76 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	e012      	b.n	8007a76 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5c:	4a26      	ldr	r2, [pc, #152]	@ (8007af8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d906      	bls.n	8007a70 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	4a22      	ldr	r2, [pc, #136]	@ (8007af0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a66:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6a:	0e1b      	lsrs	r3, r3, #24
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	e002      	b.n	8007a76 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681c      	ldr	r4, [r3, #0]
 8007a7a:	466a      	mov	r2, sp
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a84:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a88:	f107 0308 	add.w	r3, r7, #8
 8007a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f003 fd24 	bl	800b4dc <SDMMC_Init>
 8007a94:	e008      	b.n	8007aa8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f003 fddf 	bl	800b674 <SDMMC_CmdBlockLength>
 8007ab6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8007aec <HAL_SD_ConfigWideBusOperation+0x214>)
 8007ac4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	372c      	adds	r7, #44	@ 0x2c
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd90      	pop	{r4, r7, pc}
 8007aec:	1fe00fff 	.word	0x1fe00fff
 8007af0:	55e63b89 	.word	0x55e63b89
 8007af4:	02faf080 	.word	0x02faf080
 8007af8:	017d7840 	.word	0x017d7840

08007afc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007b08:	f107 030c 	add.w	r3, r7, #12
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fa40 	bl	8007f94 <SD_SendStatus>
 8007b14:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	0a5b      	lsrs	r3, r3, #9
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b32:	693b      	ldr	r3, [r7, #16]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b090      	sub	sp, #64	@ 0x40
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007b48:	f7f9 ffb2 	bl	8001ab0 <HAL_GetTick>
 8007b4c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f003 fd0a 	bl	800b56c <SDMMC_GetPowerState>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b5e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007b62:	e0b5      	b.n	8007cd0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d02e      	beq.n	8007bca <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f003 fe8b 	bl	800b88c <SDMMC_CmdSendCID>
 8007b76:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <SD_InitCard+0x46>
    {
      return errorstate;
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b80:	e0a6      	b.n	8007cd0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2100      	movs	r1, #0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f003 fd34 	bl	800b5f6 <SDMMC_GetResponse>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2104      	movs	r1, #4
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f003 fd2b 	bl	800b5f6 <SDMMC_GetResponse>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2108      	movs	r1, #8
 8007bac:	4618      	mov	r0, r3
 8007bae:	f003 fd22 	bl	800b5f6 <SDMMC_GetResponse>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	210c      	movs	r1, #12
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f003 fd19 	bl	800b5f6 <SDMMC_GetResponse>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d01d      	beq.n	8007c0e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007bd2:	e019      	b.n	8007c08 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f107 020a 	add.w	r2, r7, #10
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f003 fe93 	bl	800b90a <SDMMC_CmdSetRelAdd>
 8007be4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bee:	e06f      	b.n	8007cd0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007bf0:	f7f9 ff5e 	bl	8001ab0 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d902      	bls.n	8007c08 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007c02:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c06:	e063      	b.n	8007cd0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007c08:	897b      	ldrh	r3, [r7, #10]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0e2      	beq.n	8007bd4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d036      	beq.n	8007c84 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007c16:	897b      	ldrh	r3, [r7, #10]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c26:	041b      	lsls	r3, r3, #16
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f003 fe4d 	bl	800b8ca <SDMMC_CmdSendCSD>
 8007c30:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <SD_InitCard+0x100>
    {
      return errorstate;
 8007c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3a:	e049      	b.n	8007cd0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2100      	movs	r1, #0
 8007c42:	4618      	mov	r0, r3
 8007c44:	f003 fcd7 	bl	800b5f6 <SDMMC_GetResponse>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2104      	movs	r1, #4
 8007c54:	4618      	mov	r0, r3
 8007c56:	f003 fcce 	bl	800b5f6 <SDMMC_GetResponse>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2108      	movs	r1, #8
 8007c66:	4618      	mov	r0, r3
 8007c68:	f003 fcc5 	bl	800b5f6 <SDMMC_GetResponse>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	210c      	movs	r1, #12
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f003 fcbc 	bl	800b5f6 <SDMMC_GetResponse>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2104      	movs	r1, #4
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f003 fcb3 	bl	800b5f6 <SDMMC_GetResponse>
 8007c90:	4603      	mov	r3, r0
 8007c92:	0d1a      	lsrs	r2, r3, #20
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff fbb8 	bl	8007414 <HAL_SD_GetCardCSD>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007caa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007cae:	e00f      	b.n	8007cd0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb8:	041b      	lsls	r3, r3, #16
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	f003 fcfc 	bl	800b6ba <SDMMC_CmdSelDesel>
 8007cc2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <SD_InitCard+0x192>
  {
    return errorstate;
 8007cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ccc:	e000      	b.n	8007cd0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3740      	adds	r7, #64	@ 0x40
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f003 fd05 	bl	800b700 <SDMMC_CmdGoIdleState>
 8007cf6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	e072      	b.n	8007de8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f003 fd18 	bl	800b73c <SDMMC_CmdOperCond>
 8007d0c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d14:	d10d      	bne.n	8007d32 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f003 fced 	bl	800b700 <SDMMC_CmdGoIdleState>
 8007d26:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <SD_PowerON+0x60>
    {
      return errorstate;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	e05a      	b.n	8007de8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d137      	bne.n	8007db0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2100      	movs	r1, #0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f003 fd18 	bl	800b77c <SDMMC_CmdAppCommand>
 8007d4c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d02d      	beq.n	8007db0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d54:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d58:	e046      	b.n	8007de8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f003 fd0b 	bl	800b77c <SDMMC_CmdAppCommand>
 8007d66:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <SD_PowerON+0x9a>
    {
      return errorstate;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	e03a      	b.n	8007de8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	491e      	ldr	r1, [pc, #120]	@ (8007df0 <SD_PowerON+0x118>)
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f003 fd22 	bl	800b7c2 <SDMMC_CmdAppOperCommand>
 8007d7e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d86:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d8a:	e02d      	b.n	8007de8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2100      	movs	r1, #0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f003 fc2f 	bl	800b5f6 <SDMMC_GetResponse>
 8007d98:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	0fdb      	lsrs	r3, r3, #31
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <SD_PowerON+0xce>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <SD_PowerON+0xd0>
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]

    count++;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	3301      	adds	r3, #1
 8007dae:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d802      	bhi.n	8007dc0 <SD_PowerON+0xe8>
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0cc      	beq.n	8007d5a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d902      	bls.n	8007dd0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007dca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007dce:	e00b      	b.n	8007de8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	c1100000 	.word	0xc1100000

08007df4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08c      	sub	sp, #48	@ 0x30
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007dfe:	f7f9 fe57 	bl	8001ab0 <HAL_GetTick>
 8007e02:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f003 fbf1 	bl	800b5f6 <SDMMC_GetResponse>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e1e:	d102      	bne.n	8007e26 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e24:	e0b0      	b.n	8007f88 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2140      	movs	r1, #64	@ 0x40
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f003 fc21 	bl	800b674 <SDMMC_CmdBlockLength>
 8007e32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	e0a0      	b.n	8007f88 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f003 fc92 	bl	800b77c <SDMMC_CmdAppCommand>
 8007e58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	e08d      	b.n	8007f88 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e70:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007e72:	2340      	movs	r3, #64	@ 0x40
 8007e74:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007e76:	2360      	movs	r3, #96	@ 0x60
 8007e78:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f107 0208 	add.w	r2, r7, #8
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f003 fbc3 	bl	800b61c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f003 fd7a 	bl	800b994 <SDMMC_CmdStatusRegister>
 8007ea0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d02b      	beq.n	8007f00 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	e069      	b.n	8007f88 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d013      	beq.n	8007eea <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ec6:	e00d      	b.n	8007ee4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f003 fb2f 	bl	800b530 <SDMMC_ReadFIFO>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed6:	601a      	str	r2, [r3, #0]
        pData++;
 8007ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eda:	3304      	adds	r3, #4
 8007edc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8007ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee6:	2b07      	cmp	r3, #7
 8007ee8:	d9ee      	bls.n	8007ec8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007eea:	f7f9 fde1 	bl	8001ab0 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d102      	bne.n	8007f00 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007efa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007efe:	e043      	b.n	8007f88 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f06:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0d2      	beq.n	8007eb4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	e033      	b.n	8007f88 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e02a      	b.n	8007f88 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f38:	f003 0320 	and.w	r3, r3, #32
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d017      	beq.n	8007f70 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007f40:	2320      	movs	r3, #32
 8007f42:	e021      	b.n	8007f88 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f003 faf1 	bl	800b530 <SDMMC_ReadFIFO>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f52:	601a      	str	r2, [r3, #0]
    pData++;
 8007f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f56:	3304      	adds	r3, #4
 8007f58:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f5a:	f7f9 fda9 	bl	8001ab0 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f68:	d102      	bne.n	8007f70 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f6e:	e00b      	b.n	8007f88 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e2      	bne.n	8007f44 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a03      	ldr	r2, [pc, #12]	@ (8007f90 <SD_SendSDStatus+0x19c>)
 8007f84:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3730      	adds	r7, #48	@ 0x30
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	18000f3a 	.word	0x18000f3a

08007f94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007fa4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007fa8:	e018      	b.n	8007fdc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb2:	041b      	lsls	r3, r3, #16
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	f003 fcc9 	bl	800b94e <SDMMC_CmdSendStatus>
 8007fbc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	e009      	b.n	8007fdc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f003 fb11 	bl	800b5f6 <SDMMC_GetResponse>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007fec:	2300      	movs	r3, #0
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f003 fafb 	bl	800b5f6 <SDMMC_GetResponse>
 8008000:	4603      	mov	r3, r0
 8008002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008006:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800800a:	d102      	bne.n	8008012 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800800c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008010:	e02f      	b.n	8008072 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008012:	f107 030c 	add.w	r3, r7, #12
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f879 	bl	8008110 <SD_FindSCR>
 800801e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	e023      	b.n	8008072 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01c      	beq.n	800806e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800803c:	041b      	lsls	r3, r3, #16
 800803e:	4619      	mov	r1, r3
 8008040:	4610      	mov	r0, r2
 8008042:	f003 fb9b 	bl	800b77c <SDMMC_CmdAppCommand>
 8008046:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	e00f      	b.n	8008072 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2102      	movs	r1, #2
 8008058:	4618      	mov	r0, r3
 800805a:	f003 fbd2 	bl	800b802 <SDMMC_CmdBusWidth>
 800805e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	e003      	b.n	8008072 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800806a:	2300      	movs	r3, #0
 800806c:	e001      	b.n	8008072 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800806e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b086      	sub	sp, #24
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	2300      	movs	r3, #0
 8008088:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2100      	movs	r1, #0
 8008090:	4618      	mov	r0, r3
 8008092:	f003 fab0 	bl	800b5f6 <SDMMC_GetResponse>
 8008096:	4603      	mov	r3, r0
 8008098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800809c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080a0:	d102      	bne.n	80080a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080a6:	e02f      	b.n	8008108 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080a8:	f107 030c 	add.w	r3, r7, #12
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f82e 	bl	8008110 <SD_FindSCR>
 80080b4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	e023      	b.n	8008108 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01c      	beq.n	8008104 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d2:	041b      	lsls	r3, r3, #16
 80080d4:	4619      	mov	r1, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	f003 fb50 	bl	800b77c <SDMMC_CmdAppCommand>
 80080dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	e00f      	b.n	8008108 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2100      	movs	r1, #0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f003 fb87 	bl	800b802 <SDMMC_CmdBusWidth>
 80080f4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	e003      	b.n	8008108 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008100:	2300      	movs	r3, #0
 8008102:	e001      	b.n	8008108 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008104:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08e      	sub	sp, #56	@ 0x38
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800811a:	f7f9 fcc9 	bl	8001ab0 <HAL_GetTick>
 800811e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008124:	2300      	movs	r3, #0
 8008126:	60bb      	str	r3, [r7, #8]
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2108      	movs	r1, #8
 8008136:	4618      	mov	r0, r3
 8008138:	f003 fa9c 	bl	800b674 <SDMMC_CmdBlockLength>
 800813c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008146:	e0ad      	b.n	80082a4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008150:	041b      	lsls	r3, r3, #16
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f003 fb11 	bl	800b77c <SDMMC_CmdAppCommand>
 800815a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800815c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008164:	e09e      	b.n	80082a4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008166:	f04f 33ff 	mov.w	r3, #4294967295
 800816a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800816c:	2308      	movs	r3, #8
 800816e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008170:	2330      	movs	r3, #48	@ 0x30
 8008172:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008174:	2302      	movs	r3, #2
 8008176:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008178:	2300      	movs	r3, #0
 800817a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800817c:	2301      	movs	r3, #1
 800817e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f107 0210 	add.w	r2, r7, #16
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f003 fa46 	bl	800b61c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4618      	mov	r0, r3
 8008196:	f003 fb57 	bl	800b848 <SDMMC_CmdSendSCR>
 800819a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800819c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d027      	beq.n	80081f2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	e07e      	b.n	80082a4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d113      	bne.n	80081dc <SD_FindSCR+0xcc>
 80081b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d110      	bne.n	80081dc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f003 f9b6 	bl	800b530 <SDMMC_ReadFIFO>
 80081c4:	4603      	mov	r3, r0
 80081c6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f003 f9af 	bl	800b530 <SDMMC_ReadFIFO>
 80081d2:	4603      	mov	r3, r0
 80081d4:	60fb      	str	r3, [r7, #12]
      index++;
 80081d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d8:	3301      	adds	r3, #1
 80081da:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80081dc:	f7f9 fc68 	bl	8001ab0 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d102      	bne.n	80081f2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80081ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80081f0:	e058      	b.n	80082a4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081f8:	f240 532a 	movw	r3, #1322	@ 0x52a
 80081fc:	4013      	ands	r3, r2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0d1      	beq.n	80081a6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008208:	f003 0308 	and.w	r3, r3, #8
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2208      	movs	r2, #8
 8008216:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008218:	2308      	movs	r3, #8
 800821a:	e043      	b.n	80082a4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2202      	movs	r2, #2
 8008230:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008232:	2302      	movs	r3, #2
 8008234:	e036      	b.n	80082a4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	2b00      	cmp	r3, #0
 8008242:	d005      	beq.n	8008250 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2220      	movs	r2, #32
 800824a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800824c:	2320      	movs	r3, #32
 800824e:	e029      	b.n	80082a4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a15      	ldr	r2, [pc, #84]	@ (80082ac <SD_FindSCR+0x19c>)
 8008256:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	061a      	lsls	r2, r3, #24
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	021b      	lsls	r3, r3, #8
 8008260:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008264:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	0a1b      	lsrs	r3, r3, #8
 800826a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800826e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	0e1b      	lsrs	r3, r3, #24
 8008274:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008278:	601a      	str	r2, [r3, #0]
    scr++;
 800827a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827c:	3304      	adds	r3, #4
 800827e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	061a      	lsls	r2, r3, #24
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800828c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	0a1b      	lsrs	r3, r3, #8
 8008292:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008296:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	0e1b      	lsrs	r3, r3, #24
 800829c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800829e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3738      	adds	r7, #56	@ 0x38
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	18000f3a 	.word	0x18000f3a

080082b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e10f      	b.n	80084e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a87      	ldr	r2, [pc, #540]	@ (80084ec <HAL_SPI_Init+0x23c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00f      	beq.n	80082f2 <HAL_SPI_Init+0x42>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a86      	ldr	r2, [pc, #536]	@ (80084f0 <HAL_SPI_Init+0x240>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d00a      	beq.n	80082f2 <HAL_SPI_Init+0x42>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a84      	ldr	r2, [pc, #528]	@ (80084f4 <HAL_SPI_Init+0x244>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d005      	beq.n	80082f2 <HAL_SPI_Init+0x42>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	2b0f      	cmp	r3, #15
 80082ec:	d901      	bls.n	80082f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e0f7      	b.n	80084e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f900 	bl	80084f8 <SPI_GetPacketSize>
 80082f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a7b      	ldr	r2, [pc, #492]	@ (80084ec <HAL_SPI_Init+0x23c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00c      	beq.n	800831e <HAL_SPI_Init+0x6e>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a79      	ldr	r2, [pc, #484]	@ (80084f0 <HAL_SPI_Init+0x240>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d007      	beq.n	800831e <HAL_SPI_Init+0x6e>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a78      	ldr	r2, [pc, #480]	@ (80084f4 <HAL_SPI_Init+0x244>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d002      	beq.n	800831e <HAL_SPI_Init+0x6e>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b08      	cmp	r3, #8
 800831c:	d811      	bhi.n	8008342 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008322:	4a72      	ldr	r2, [pc, #456]	@ (80084ec <HAL_SPI_Init+0x23c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d009      	beq.n	800833c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a70      	ldr	r2, [pc, #448]	@ (80084f0 <HAL_SPI_Init+0x240>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_SPI_Init+0x8c>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a6f      	ldr	r2, [pc, #444]	@ (80084f4 <HAL_SPI_Init+0x244>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d104      	bne.n	8008346 <HAL_SPI_Init+0x96>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b10      	cmp	r3, #16
 8008340:	d901      	bls.n	8008346 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e0cd      	b.n	80084e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7f8 fff8 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0201 	bic.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008382:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800838c:	d119      	bne.n	80083c2 <HAL_SPI_Init+0x112>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008396:	d103      	bne.n	80083a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800839c:	2b00      	cmp	r3, #0
 800839e:	d008      	beq.n	80083b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10c      	bne.n	80083c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80083ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083b0:	d107      	bne.n	80083c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80083c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00f      	beq.n	80083ee <HAL_SPI_Init+0x13e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	2b06      	cmp	r3, #6
 80083d4:	d90b      	bls.n	80083ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e007      	b.n	80083fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69da      	ldr	r2, [r3, #28]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008406:	431a      	orrs	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	ea42 0103 	orr.w	r1, r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	431a      	orrs	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800845e:	ea42 0103 	orr.w	r1, r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d113      	bne.n	800849e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008488:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800849c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	40013000 	.word	0x40013000
 80084f0:	40003800 	.word	0x40003800
 80084f4:	40003c00 	.word	0x40003c00

080084f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	3301      	adds	r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	3301      	adds	r3, #1
 8008510:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3307      	adds	r3, #7
 8008516:	08db      	lsrs	r3, r3, #3
 8008518:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e049      	b.n	80085d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d106      	bne.n	800855a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7f8 ffb3 	bl	80014c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2202      	movs	r2, #2
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3304      	adds	r3, #4
 800856a:	4619      	mov	r1, r3
 800856c:	4610      	mov	r0, r2
 800856e:	f000 f949 	bl	8008804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e0ff      	b.n	80087fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b14      	cmp	r3, #20
 8008606:	f200 80f0 	bhi.w	80087ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800860a:	a201      	add	r2, pc, #4	@ (adr r2, 8008610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008665 	.word	0x08008665
 8008614:	080087eb 	.word	0x080087eb
 8008618:	080087eb 	.word	0x080087eb
 800861c:	080087eb 	.word	0x080087eb
 8008620:	080086a5 	.word	0x080086a5
 8008624:	080087eb 	.word	0x080087eb
 8008628:	080087eb 	.word	0x080087eb
 800862c:	080087eb 	.word	0x080087eb
 8008630:	080086e7 	.word	0x080086e7
 8008634:	080087eb 	.word	0x080087eb
 8008638:	080087eb 	.word	0x080087eb
 800863c:	080087eb 	.word	0x080087eb
 8008640:	08008727 	.word	0x08008727
 8008644:	080087eb 	.word	0x080087eb
 8008648:	080087eb 	.word	0x080087eb
 800864c:	080087eb 	.word	0x080087eb
 8008650:	08008769 	.word	0x08008769
 8008654:	080087eb 	.word	0x080087eb
 8008658:	080087eb 	.word	0x080087eb
 800865c:	080087eb 	.word	0x080087eb
 8008660:	080087a9 	.word	0x080087a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f970 	bl	8008950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699a      	ldr	r2, [r3, #24]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0208 	orr.w	r2, r2, #8
 800867e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699a      	ldr	r2, [r3, #24]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0204 	bic.w	r2, r2, #4
 800868e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6999      	ldr	r1, [r3, #24]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	691a      	ldr	r2, [r3, #16]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	619a      	str	r2, [r3, #24]
      break;
 80086a2:	e0a5      	b.n	80087f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f9e0 	bl	8008a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699a      	ldr	r2, [r3, #24]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699a      	ldr	r2, [r3, #24]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6999      	ldr	r1, [r3, #24]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	021a      	lsls	r2, r3, #8
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	430a      	orrs	r2, r1
 80086e2:	619a      	str	r2, [r3, #24]
      break;
 80086e4:	e084      	b.n	80087f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fa49 	bl	8008b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	69da      	ldr	r2, [r3, #28]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f042 0208 	orr.w	r2, r2, #8
 8008700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69da      	ldr	r2, [r3, #28]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0204 	bic.w	r2, r2, #4
 8008710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69d9      	ldr	r1, [r3, #28]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	61da      	str	r2, [r3, #28]
      break;
 8008724:	e064      	b.n	80087f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	4618      	mov	r0, r3
 800872e:	f000 fab1 	bl	8008c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69d9      	ldr	r1, [r3, #28]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	021a      	lsls	r2, r3, #8
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	61da      	str	r2, [r3, #28]
      break;
 8008766:	e043      	b.n	80087f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	4618      	mov	r0, r3
 8008770:	f000 fafa 	bl	8008d68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0208 	orr.w	r2, r2, #8
 8008782:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0204 	bic.w	r2, r2, #4
 8008792:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	691a      	ldr	r2, [r3, #16]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80087a6:	e023      	b.n	80087f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fb3e 	bl	8008e30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	021a      	lsls	r2, r3, #8
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	430a      	orrs	r2, r1
 80087e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80087e8:	e002      	b.n	80087f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	75fb      	strb	r3, [r7, #23]
      break;
 80087ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop

08008804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a46      	ldr	r2, [pc, #280]	@ (8008930 <TIM_Base_SetConfig+0x12c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d013      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008822:	d00f      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a43      	ldr	r2, [pc, #268]	@ (8008934 <TIM_Base_SetConfig+0x130>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00b      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a42      	ldr	r2, [pc, #264]	@ (8008938 <TIM_Base_SetConfig+0x134>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a41      	ldr	r2, [pc, #260]	@ (800893c <TIM_Base_SetConfig+0x138>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a40      	ldr	r2, [pc, #256]	@ (8008940 <TIM_Base_SetConfig+0x13c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d108      	bne.n	8008856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800884a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a35      	ldr	r2, [pc, #212]	@ (8008930 <TIM_Base_SetConfig+0x12c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d01f      	beq.n	800889e <TIM_Base_SetConfig+0x9a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008864:	d01b      	beq.n	800889e <TIM_Base_SetConfig+0x9a>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a32      	ldr	r2, [pc, #200]	@ (8008934 <TIM_Base_SetConfig+0x130>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d017      	beq.n	800889e <TIM_Base_SetConfig+0x9a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a31      	ldr	r2, [pc, #196]	@ (8008938 <TIM_Base_SetConfig+0x134>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d013      	beq.n	800889e <TIM_Base_SetConfig+0x9a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a30      	ldr	r2, [pc, #192]	@ (800893c <TIM_Base_SetConfig+0x138>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d00f      	beq.n	800889e <TIM_Base_SetConfig+0x9a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a2f      	ldr	r2, [pc, #188]	@ (8008940 <TIM_Base_SetConfig+0x13c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00b      	beq.n	800889e <TIM_Base_SetConfig+0x9a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a2e      	ldr	r2, [pc, #184]	@ (8008944 <TIM_Base_SetConfig+0x140>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d007      	beq.n	800889e <TIM_Base_SetConfig+0x9a>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a2d      	ldr	r2, [pc, #180]	@ (8008948 <TIM_Base_SetConfig+0x144>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d003      	beq.n	800889e <TIM_Base_SetConfig+0x9a>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a2c      	ldr	r2, [pc, #176]	@ (800894c <TIM_Base_SetConfig+0x148>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d108      	bne.n	80088b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a16      	ldr	r2, [pc, #88]	@ (8008930 <TIM_Base_SetConfig+0x12c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d00f      	beq.n	80088fc <TIM_Base_SetConfig+0xf8>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a18      	ldr	r2, [pc, #96]	@ (8008940 <TIM_Base_SetConfig+0x13c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00b      	beq.n	80088fc <TIM_Base_SetConfig+0xf8>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a17      	ldr	r2, [pc, #92]	@ (8008944 <TIM_Base_SetConfig+0x140>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d007      	beq.n	80088fc <TIM_Base_SetConfig+0xf8>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a16      	ldr	r2, [pc, #88]	@ (8008948 <TIM_Base_SetConfig+0x144>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d003      	beq.n	80088fc <TIM_Base_SetConfig+0xf8>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a15      	ldr	r2, [pc, #84]	@ (800894c <TIM_Base_SetConfig+0x148>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d103      	bne.n	8008904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b01      	cmp	r3, #1
 8008914:	d105      	bne.n	8008922 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	f023 0201 	bic.w	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	611a      	str	r2, [r3, #16]
  }
}
 8008922:	bf00      	nop
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	40010000 	.word	0x40010000
 8008934:	40000400 	.word	0x40000400
 8008938:	40000800 	.word	0x40000800
 800893c:	40000c00 	.word	0x40000c00
 8008940:	40010400 	.word	0x40010400
 8008944:	40014000 	.word	0x40014000
 8008948:	40014400 	.word	0x40014400
 800894c:	40014800 	.word	0x40014800

08008950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	f023 0201 	bic.w	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4b37      	ldr	r3, [pc, #220]	@ (8008a58 <TIM_OC1_SetConfig+0x108>)
 800897c:	4013      	ands	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 0303 	bic.w	r3, r3, #3
 8008986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f023 0302 	bic.w	r3, r3, #2
 8008998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a2d      	ldr	r2, [pc, #180]	@ (8008a5c <TIM_OC1_SetConfig+0x10c>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00f      	beq.n	80089cc <TIM_OC1_SetConfig+0x7c>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008a60 <TIM_OC1_SetConfig+0x110>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00b      	beq.n	80089cc <TIM_OC1_SetConfig+0x7c>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a2b      	ldr	r2, [pc, #172]	@ (8008a64 <TIM_OC1_SetConfig+0x114>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d007      	beq.n	80089cc <TIM_OC1_SetConfig+0x7c>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a2a      	ldr	r2, [pc, #168]	@ (8008a68 <TIM_OC1_SetConfig+0x118>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d003      	beq.n	80089cc <TIM_OC1_SetConfig+0x7c>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a29      	ldr	r2, [pc, #164]	@ (8008a6c <TIM_OC1_SetConfig+0x11c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d10c      	bne.n	80089e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f023 0308 	bic.w	r3, r3, #8
 80089d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f023 0304 	bic.w	r3, r3, #4
 80089e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a1c      	ldr	r2, [pc, #112]	@ (8008a5c <TIM_OC1_SetConfig+0x10c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00f      	beq.n	8008a0e <TIM_OC1_SetConfig+0xbe>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008a60 <TIM_OC1_SetConfig+0x110>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00b      	beq.n	8008a0e <TIM_OC1_SetConfig+0xbe>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008a64 <TIM_OC1_SetConfig+0x114>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d007      	beq.n	8008a0e <TIM_OC1_SetConfig+0xbe>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a19      	ldr	r2, [pc, #100]	@ (8008a68 <TIM_OC1_SetConfig+0x118>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d003      	beq.n	8008a0e <TIM_OC1_SetConfig+0xbe>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a18      	ldr	r2, [pc, #96]	@ (8008a6c <TIM_OC1_SetConfig+0x11c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d111      	bne.n	8008a32 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	621a      	str	r2, [r3, #32]
}
 8008a4c:	bf00      	nop
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	fffeff8f 	.word	0xfffeff8f
 8008a5c:	40010000 	.word	0x40010000
 8008a60:	40010400 	.word	0x40010400
 8008a64:	40014000 	.word	0x40014000
 8008a68:	40014400 	.word	0x40014400
 8008a6c:	40014800 	.word	0x40014800

08008a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	f023 0210 	bic.w	r2, r3, #16
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4b34      	ldr	r3, [pc, #208]	@ (8008b6c <TIM_OC2_SetConfig+0xfc>)
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	021b      	lsls	r3, r3, #8
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f023 0320 	bic.w	r3, r3, #32
 8008aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	011b      	lsls	r3, r3, #4
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a29      	ldr	r2, [pc, #164]	@ (8008b70 <TIM_OC2_SetConfig+0x100>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d003      	beq.n	8008ad8 <TIM_OC2_SetConfig+0x68>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a28      	ldr	r2, [pc, #160]	@ (8008b74 <TIM_OC2_SetConfig+0x104>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d10d      	bne.n	8008af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a1e      	ldr	r2, [pc, #120]	@ (8008b70 <TIM_OC2_SetConfig+0x100>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00f      	beq.n	8008b1c <TIM_OC2_SetConfig+0xac>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a1d      	ldr	r2, [pc, #116]	@ (8008b74 <TIM_OC2_SetConfig+0x104>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d00b      	beq.n	8008b1c <TIM_OC2_SetConfig+0xac>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a1c      	ldr	r2, [pc, #112]	@ (8008b78 <TIM_OC2_SetConfig+0x108>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d007      	beq.n	8008b1c <TIM_OC2_SetConfig+0xac>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8008b7c <TIM_OC2_SetConfig+0x10c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d003      	beq.n	8008b1c <TIM_OC2_SetConfig+0xac>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a1a      	ldr	r2, [pc, #104]	@ (8008b80 <TIM_OC2_SetConfig+0x110>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d113      	bne.n	8008b44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	621a      	str	r2, [r3, #32]
}
 8008b5e:	bf00      	nop
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	feff8fff 	.word	0xfeff8fff
 8008b70:	40010000 	.word	0x40010000
 8008b74:	40010400 	.word	0x40010400
 8008b78:	40014000 	.word	0x40014000
 8008b7c:	40014400 	.word	0x40014400
 8008b80:	40014800 	.word	0x40014800

08008b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4b33      	ldr	r3, [pc, #204]	@ (8008c7c <TIM_OC3_SetConfig+0xf8>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a28      	ldr	r2, [pc, #160]	@ (8008c80 <TIM_OC3_SetConfig+0xfc>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d003      	beq.n	8008bea <TIM_OC3_SetConfig+0x66>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a27      	ldr	r2, [pc, #156]	@ (8008c84 <TIM_OC3_SetConfig+0x100>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d10d      	bne.n	8008c06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a1d      	ldr	r2, [pc, #116]	@ (8008c80 <TIM_OC3_SetConfig+0xfc>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00f      	beq.n	8008c2e <TIM_OC3_SetConfig+0xaa>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a1c      	ldr	r2, [pc, #112]	@ (8008c84 <TIM_OC3_SetConfig+0x100>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00b      	beq.n	8008c2e <TIM_OC3_SetConfig+0xaa>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a1b      	ldr	r2, [pc, #108]	@ (8008c88 <TIM_OC3_SetConfig+0x104>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d007      	beq.n	8008c2e <TIM_OC3_SetConfig+0xaa>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a1a      	ldr	r2, [pc, #104]	@ (8008c8c <TIM_OC3_SetConfig+0x108>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d003      	beq.n	8008c2e <TIM_OC3_SetConfig+0xaa>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a19      	ldr	r2, [pc, #100]	@ (8008c90 <TIM_OC3_SetConfig+0x10c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d113      	bne.n	8008c56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	621a      	str	r2, [r3, #32]
}
 8008c70:	bf00      	nop
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	fffeff8f 	.word	0xfffeff8f
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40010400 	.word	0x40010400
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800

08008c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4b24      	ldr	r3, [pc, #144]	@ (8008d50 <TIM_OC4_SetConfig+0xbc>)
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	031b      	lsls	r3, r3, #12
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a19      	ldr	r2, [pc, #100]	@ (8008d54 <TIM_OC4_SetConfig+0xc0>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00f      	beq.n	8008d14 <TIM_OC4_SetConfig+0x80>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a18      	ldr	r2, [pc, #96]	@ (8008d58 <TIM_OC4_SetConfig+0xc4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00b      	beq.n	8008d14 <TIM_OC4_SetConfig+0x80>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a17      	ldr	r2, [pc, #92]	@ (8008d5c <TIM_OC4_SetConfig+0xc8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d007      	beq.n	8008d14 <TIM_OC4_SetConfig+0x80>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a16      	ldr	r2, [pc, #88]	@ (8008d60 <TIM_OC4_SetConfig+0xcc>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_OC4_SetConfig+0x80>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a15      	ldr	r2, [pc, #84]	@ (8008d64 <TIM_OC4_SetConfig+0xd0>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d109      	bne.n	8008d28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	019b      	lsls	r3, r3, #6
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	621a      	str	r2, [r3, #32]
}
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	feff8fff 	.word	0xfeff8fff
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40010400 	.word	0x40010400
 8008d5c:	40014000 	.word	0x40014000
 8008d60:	40014400 	.word	0x40014400
 8008d64:	40014800 	.word	0x40014800

08008d68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b087      	sub	sp, #28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4b21      	ldr	r3, [pc, #132]	@ (8008e18 <TIM_OC5_SetConfig+0xb0>)
 8008d94:	4013      	ands	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008da8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	041b      	lsls	r3, r3, #16
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a18      	ldr	r2, [pc, #96]	@ (8008e1c <TIM_OC5_SetConfig+0xb4>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00f      	beq.n	8008dde <TIM_OC5_SetConfig+0x76>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a17      	ldr	r2, [pc, #92]	@ (8008e20 <TIM_OC5_SetConfig+0xb8>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00b      	beq.n	8008dde <TIM_OC5_SetConfig+0x76>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a16      	ldr	r2, [pc, #88]	@ (8008e24 <TIM_OC5_SetConfig+0xbc>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d007      	beq.n	8008dde <TIM_OC5_SetConfig+0x76>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a15      	ldr	r2, [pc, #84]	@ (8008e28 <TIM_OC5_SetConfig+0xc0>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d003      	beq.n	8008dde <TIM_OC5_SetConfig+0x76>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a14      	ldr	r2, [pc, #80]	@ (8008e2c <TIM_OC5_SetConfig+0xc4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d109      	bne.n	8008df2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008de4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	021b      	lsls	r3, r3, #8
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	621a      	str	r2, [r3, #32]
}
 8008e0c:	bf00      	nop
 8008e0e:	371c      	adds	r7, #28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	fffeff8f 	.word	0xfffeff8f
 8008e1c:	40010000 	.word	0x40010000
 8008e20:	40010400 	.word	0x40010400
 8008e24:	40014000 	.word	0x40014000
 8008e28:	40014400 	.word	0x40014400
 8008e2c:	40014800 	.word	0x40014800

08008e30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4b22      	ldr	r3, [pc, #136]	@ (8008ee4 <TIM_OC6_SetConfig+0xb4>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	051b      	lsls	r3, r3, #20
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a19      	ldr	r2, [pc, #100]	@ (8008ee8 <TIM_OC6_SetConfig+0xb8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00f      	beq.n	8008ea8 <TIM_OC6_SetConfig+0x78>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a18      	ldr	r2, [pc, #96]	@ (8008eec <TIM_OC6_SetConfig+0xbc>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00b      	beq.n	8008ea8 <TIM_OC6_SetConfig+0x78>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a17      	ldr	r2, [pc, #92]	@ (8008ef0 <TIM_OC6_SetConfig+0xc0>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d007      	beq.n	8008ea8 <TIM_OC6_SetConfig+0x78>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a16      	ldr	r2, [pc, #88]	@ (8008ef4 <TIM_OC6_SetConfig+0xc4>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d003      	beq.n	8008ea8 <TIM_OC6_SetConfig+0x78>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a15      	ldr	r2, [pc, #84]	@ (8008ef8 <TIM_OC6_SetConfig+0xc8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d109      	bne.n	8008ebc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008eae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	029b      	lsls	r3, r3, #10
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	621a      	str	r2, [r3, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	feff8fff 	.word	0xfeff8fff
 8008ee8:	40010000 	.word	0x40010000
 8008eec:	40010400 	.word	0x40010400
 8008ef0:	40014000 	.word	0x40014000
 8008ef4:	40014400 	.word	0x40014400
 8008ef8:	40014800 	.word	0x40014800

08008efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e06d      	b.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a30      	ldr	r2, [pc, #192]	@ (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a2f      	ldr	r2, [pc, #188]	@ (8009000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d108      	bne.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a20      	ldr	r2, [pc, #128]	@ (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d022      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f86:	d01d      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009004 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d018      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a1c      	ldr	r2, [pc, #112]	@ (8009008 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d013      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800900c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00e      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a15      	ldr	r2, [pc, #84]	@ (8009000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d009      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a16      	ldr	r2, [pc, #88]	@ (8009010 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d004      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a15      	ldr	r2, [pc, #84]	@ (8009014 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d10c      	bne.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40010400 	.word	0x40010400
 8009004:	40000400 	.word	0x40000400
 8009008:	40000800 	.word	0x40000800
 800900c:	40000c00 	.word	0x40000c00
 8009010:	40001800 	.word	0x40001800
 8009014:	40014000 	.word	0x40014000

08009018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009030:	2302      	movs	r3, #2
 8009032:	e073      	b.n	800911c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	695b      	ldr	r3, [r3, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	041b      	lsls	r3, r3, #16
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a19      	ldr	r2, [pc, #100]	@ (8009128 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d004      	beq.n	80090d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a18      	ldr	r2, [pc, #96]	@ (800912c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d11c      	bne.n	800910a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090da:	051b      	lsls	r3, r3, #20
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	40010000 	.word	0x40010000
 800912c:	40010400 	.word	0x40010400

08009130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e042      	b.n	80091c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009148:	2b00      	cmp	r3, #0
 800914a:	d106      	bne.n	800915a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7f8 fa51 	bl	80015fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2224      	movs	r2, #36	@ 0x24
 800915e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0201 	bic.w	r2, r2, #1
 8009170:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fe94 	bl	8009ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f825 	bl	80091d0 <UART_SetConfig>
 8009186:	4603      	mov	r3, r0
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e01b      	b.n	80091c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800919e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0201 	orr.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 ff13 	bl	8009fec <UART_CheckIdleState>
 80091c6:	4603      	mov	r3, r0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091d4:	b092      	sub	sp, #72	@ 0x48
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	4bbe      	ldr	r3, [pc, #760]	@ (80094f8 <UART_SetConfig+0x328>)
 8009200:	4013      	ands	r3, r2
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	6812      	ldr	r2, [r2, #0]
 8009206:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009208:	430b      	orrs	r3, r1
 800920a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4ab3      	ldr	r2, [pc, #716]	@ (80094fc <UART_SetConfig+0x32c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d004      	beq.n	800923c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009238:	4313      	orrs	r3, r2
 800923a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	4baf      	ldr	r3, [pc, #700]	@ (8009500 <UART_SetConfig+0x330>)
 8009244:	4013      	ands	r3, r2
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	6812      	ldr	r2, [r2, #0]
 800924a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800924c:	430b      	orrs	r3, r1
 800924e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009256:	f023 010f 	bic.w	r1, r3, #15
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4aa6      	ldr	r2, [pc, #664]	@ (8009504 <UART_SetConfig+0x334>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d177      	bne.n	8009360 <UART_SetConfig+0x190>
 8009270:	4ba5      	ldr	r3, [pc, #660]	@ (8009508 <UART_SetConfig+0x338>)
 8009272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009278:	2b28      	cmp	r3, #40	@ 0x28
 800927a:	d86d      	bhi.n	8009358 <UART_SetConfig+0x188>
 800927c:	a201      	add	r2, pc, #4	@ (adr r2, 8009284 <UART_SetConfig+0xb4>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	08009329 	.word	0x08009329
 8009288:	08009359 	.word	0x08009359
 800928c:	08009359 	.word	0x08009359
 8009290:	08009359 	.word	0x08009359
 8009294:	08009359 	.word	0x08009359
 8009298:	08009359 	.word	0x08009359
 800929c:	08009359 	.word	0x08009359
 80092a0:	08009359 	.word	0x08009359
 80092a4:	08009331 	.word	0x08009331
 80092a8:	08009359 	.word	0x08009359
 80092ac:	08009359 	.word	0x08009359
 80092b0:	08009359 	.word	0x08009359
 80092b4:	08009359 	.word	0x08009359
 80092b8:	08009359 	.word	0x08009359
 80092bc:	08009359 	.word	0x08009359
 80092c0:	08009359 	.word	0x08009359
 80092c4:	08009339 	.word	0x08009339
 80092c8:	08009359 	.word	0x08009359
 80092cc:	08009359 	.word	0x08009359
 80092d0:	08009359 	.word	0x08009359
 80092d4:	08009359 	.word	0x08009359
 80092d8:	08009359 	.word	0x08009359
 80092dc:	08009359 	.word	0x08009359
 80092e0:	08009359 	.word	0x08009359
 80092e4:	08009341 	.word	0x08009341
 80092e8:	08009359 	.word	0x08009359
 80092ec:	08009359 	.word	0x08009359
 80092f0:	08009359 	.word	0x08009359
 80092f4:	08009359 	.word	0x08009359
 80092f8:	08009359 	.word	0x08009359
 80092fc:	08009359 	.word	0x08009359
 8009300:	08009359 	.word	0x08009359
 8009304:	08009349 	.word	0x08009349
 8009308:	08009359 	.word	0x08009359
 800930c:	08009359 	.word	0x08009359
 8009310:	08009359 	.word	0x08009359
 8009314:	08009359 	.word	0x08009359
 8009318:	08009359 	.word	0x08009359
 800931c:	08009359 	.word	0x08009359
 8009320:	08009359 	.word	0x08009359
 8009324:	08009351 	.word	0x08009351
 8009328:	2301      	movs	r3, #1
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932e:	e326      	b.n	800997e <UART_SetConfig+0x7ae>
 8009330:	2304      	movs	r3, #4
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009336:	e322      	b.n	800997e <UART_SetConfig+0x7ae>
 8009338:	2308      	movs	r3, #8
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933e:	e31e      	b.n	800997e <UART_SetConfig+0x7ae>
 8009340:	2310      	movs	r3, #16
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009346:	e31a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009348:	2320      	movs	r3, #32
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934e:	e316      	b.n	800997e <UART_SetConfig+0x7ae>
 8009350:	2340      	movs	r3, #64	@ 0x40
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009356:	e312      	b.n	800997e <UART_SetConfig+0x7ae>
 8009358:	2380      	movs	r3, #128	@ 0x80
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935e:	e30e      	b.n	800997e <UART_SetConfig+0x7ae>
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a69      	ldr	r2, [pc, #420]	@ (800950c <UART_SetConfig+0x33c>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d130      	bne.n	80093cc <UART_SetConfig+0x1fc>
 800936a:	4b67      	ldr	r3, [pc, #412]	@ (8009508 <UART_SetConfig+0x338>)
 800936c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	2b05      	cmp	r3, #5
 8009374:	d826      	bhi.n	80093c4 <UART_SetConfig+0x1f4>
 8009376:	a201      	add	r2, pc, #4	@ (adr r2, 800937c <UART_SetConfig+0x1ac>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	08009395 	.word	0x08009395
 8009380:	0800939d 	.word	0x0800939d
 8009384:	080093a5 	.word	0x080093a5
 8009388:	080093ad 	.word	0x080093ad
 800938c:	080093b5 	.word	0x080093b5
 8009390:	080093bd 	.word	0x080093bd
 8009394:	2300      	movs	r3, #0
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e2f0      	b.n	800997e <UART_SetConfig+0x7ae>
 800939c:	2304      	movs	r3, #4
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e2ec      	b.n	800997e <UART_SetConfig+0x7ae>
 80093a4:	2308      	movs	r3, #8
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e2e8      	b.n	800997e <UART_SetConfig+0x7ae>
 80093ac:	2310      	movs	r3, #16
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e2e4      	b.n	800997e <UART_SetConfig+0x7ae>
 80093b4:	2320      	movs	r3, #32
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e2e0      	b.n	800997e <UART_SetConfig+0x7ae>
 80093bc:	2340      	movs	r3, #64	@ 0x40
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e2dc      	b.n	800997e <UART_SetConfig+0x7ae>
 80093c4:	2380      	movs	r3, #128	@ 0x80
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e2d8      	b.n	800997e <UART_SetConfig+0x7ae>
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a4f      	ldr	r2, [pc, #316]	@ (8009510 <UART_SetConfig+0x340>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d130      	bne.n	8009438 <UART_SetConfig+0x268>
 80093d6:	4b4c      	ldr	r3, [pc, #304]	@ (8009508 <UART_SetConfig+0x338>)
 80093d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	2b05      	cmp	r3, #5
 80093e0:	d826      	bhi.n	8009430 <UART_SetConfig+0x260>
 80093e2:	a201      	add	r2, pc, #4	@ (adr r2, 80093e8 <UART_SetConfig+0x218>)
 80093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e8:	08009401 	.word	0x08009401
 80093ec:	08009409 	.word	0x08009409
 80093f0:	08009411 	.word	0x08009411
 80093f4:	08009419 	.word	0x08009419
 80093f8:	08009421 	.word	0x08009421
 80093fc:	08009429 	.word	0x08009429
 8009400:	2300      	movs	r3, #0
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e2ba      	b.n	800997e <UART_SetConfig+0x7ae>
 8009408:	2304      	movs	r3, #4
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e2b6      	b.n	800997e <UART_SetConfig+0x7ae>
 8009410:	2308      	movs	r3, #8
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e2b2      	b.n	800997e <UART_SetConfig+0x7ae>
 8009418:	2310      	movs	r3, #16
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e2ae      	b.n	800997e <UART_SetConfig+0x7ae>
 8009420:	2320      	movs	r3, #32
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e2aa      	b.n	800997e <UART_SetConfig+0x7ae>
 8009428:	2340      	movs	r3, #64	@ 0x40
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e2a6      	b.n	800997e <UART_SetConfig+0x7ae>
 8009430:	2380      	movs	r3, #128	@ 0x80
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009436:	e2a2      	b.n	800997e <UART_SetConfig+0x7ae>
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a35      	ldr	r2, [pc, #212]	@ (8009514 <UART_SetConfig+0x344>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d130      	bne.n	80094a4 <UART_SetConfig+0x2d4>
 8009442:	4b31      	ldr	r3, [pc, #196]	@ (8009508 <UART_SetConfig+0x338>)
 8009444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009446:	f003 0307 	and.w	r3, r3, #7
 800944a:	2b05      	cmp	r3, #5
 800944c:	d826      	bhi.n	800949c <UART_SetConfig+0x2cc>
 800944e:	a201      	add	r2, pc, #4	@ (adr r2, 8009454 <UART_SetConfig+0x284>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	0800946d 	.word	0x0800946d
 8009458:	08009475 	.word	0x08009475
 800945c:	0800947d 	.word	0x0800947d
 8009460:	08009485 	.word	0x08009485
 8009464:	0800948d 	.word	0x0800948d
 8009468:	08009495 	.word	0x08009495
 800946c:	2300      	movs	r3, #0
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e284      	b.n	800997e <UART_SetConfig+0x7ae>
 8009474:	2304      	movs	r3, #4
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e280      	b.n	800997e <UART_SetConfig+0x7ae>
 800947c:	2308      	movs	r3, #8
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e27c      	b.n	800997e <UART_SetConfig+0x7ae>
 8009484:	2310      	movs	r3, #16
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e278      	b.n	800997e <UART_SetConfig+0x7ae>
 800948c:	2320      	movs	r3, #32
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e274      	b.n	800997e <UART_SetConfig+0x7ae>
 8009494:	2340      	movs	r3, #64	@ 0x40
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e270      	b.n	800997e <UART_SetConfig+0x7ae>
 800949c:	2380      	movs	r3, #128	@ 0x80
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e26c      	b.n	800997e <UART_SetConfig+0x7ae>
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009518 <UART_SetConfig+0x348>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d142      	bne.n	8009534 <UART_SetConfig+0x364>
 80094ae:	4b16      	ldr	r3, [pc, #88]	@ (8009508 <UART_SetConfig+0x338>)
 80094b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	2b05      	cmp	r3, #5
 80094b8:	d838      	bhi.n	800952c <UART_SetConfig+0x35c>
 80094ba:	a201      	add	r2, pc, #4	@ (adr r2, 80094c0 <UART_SetConfig+0x2f0>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	080094d9 	.word	0x080094d9
 80094c4:	080094e1 	.word	0x080094e1
 80094c8:	080094e9 	.word	0x080094e9
 80094cc:	080094f1 	.word	0x080094f1
 80094d0:	0800951d 	.word	0x0800951d
 80094d4:	08009525 	.word	0x08009525
 80094d8:	2300      	movs	r3, #0
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e24e      	b.n	800997e <UART_SetConfig+0x7ae>
 80094e0:	2304      	movs	r3, #4
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e24a      	b.n	800997e <UART_SetConfig+0x7ae>
 80094e8:	2308      	movs	r3, #8
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e246      	b.n	800997e <UART_SetConfig+0x7ae>
 80094f0:	2310      	movs	r3, #16
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e242      	b.n	800997e <UART_SetConfig+0x7ae>
 80094f8:	cfff69f3 	.word	0xcfff69f3
 80094fc:	58000c00 	.word	0x58000c00
 8009500:	11fff4ff 	.word	0x11fff4ff
 8009504:	40011000 	.word	0x40011000
 8009508:	58024400 	.word	0x58024400
 800950c:	40004400 	.word	0x40004400
 8009510:	40004800 	.word	0x40004800
 8009514:	40004c00 	.word	0x40004c00
 8009518:	40005000 	.word	0x40005000
 800951c:	2320      	movs	r3, #32
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e22c      	b.n	800997e <UART_SetConfig+0x7ae>
 8009524:	2340      	movs	r3, #64	@ 0x40
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e228      	b.n	800997e <UART_SetConfig+0x7ae>
 800952c:	2380      	movs	r3, #128	@ 0x80
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e224      	b.n	800997e <UART_SetConfig+0x7ae>
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4ab1      	ldr	r2, [pc, #708]	@ (8009800 <UART_SetConfig+0x630>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d176      	bne.n	800962c <UART_SetConfig+0x45c>
 800953e:	4bb1      	ldr	r3, [pc, #708]	@ (8009804 <UART_SetConfig+0x634>)
 8009540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009546:	2b28      	cmp	r3, #40	@ 0x28
 8009548:	d86c      	bhi.n	8009624 <UART_SetConfig+0x454>
 800954a:	a201      	add	r2, pc, #4	@ (adr r2, 8009550 <UART_SetConfig+0x380>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	080095f5 	.word	0x080095f5
 8009554:	08009625 	.word	0x08009625
 8009558:	08009625 	.word	0x08009625
 800955c:	08009625 	.word	0x08009625
 8009560:	08009625 	.word	0x08009625
 8009564:	08009625 	.word	0x08009625
 8009568:	08009625 	.word	0x08009625
 800956c:	08009625 	.word	0x08009625
 8009570:	080095fd 	.word	0x080095fd
 8009574:	08009625 	.word	0x08009625
 8009578:	08009625 	.word	0x08009625
 800957c:	08009625 	.word	0x08009625
 8009580:	08009625 	.word	0x08009625
 8009584:	08009625 	.word	0x08009625
 8009588:	08009625 	.word	0x08009625
 800958c:	08009625 	.word	0x08009625
 8009590:	08009605 	.word	0x08009605
 8009594:	08009625 	.word	0x08009625
 8009598:	08009625 	.word	0x08009625
 800959c:	08009625 	.word	0x08009625
 80095a0:	08009625 	.word	0x08009625
 80095a4:	08009625 	.word	0x08009625
 80095a8:	08009625 	.word	0x08009625
 80095ac:	08009625 	.word	0x08009625
 80095b0:	0800960d 	.word	0x0800960d
 80095b4:	08009625 	.word	0x08009625
 80095b8:	08009625 	.word	0x08009625
 80095bc:	08009625 	.word	0x08009625
 80095c0:	08009625 	.word	0x08009625
 80095c4:	08009625 	.word	0x08009625
 80095c8:	08009625 	.word	0x08009625
 80095cc:	08009625 	.word	0x08009625
 80095d0:	08009615 	.word	0x08009615
 80095d4:	08009625 	.word	0x08009625
 80095d8:	08009625 	.word	0x08009625
 80095dc:	08009625 	.word	0x08009625
 80095e0:	08009625 	.word	0x08009625
 80095e4:	08009625 	.word	0x08009625
 80095e8:	08009625 	.word	0x08009625
 80095ec:	08009625 	.word	0x08009625
 80095f0:	0800961d 	.word	0x0800961d
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e1c0      	b.n	800997e <UART_SetConfig+0x7ae>
 80095fc:	2304      	movs	r3, #4
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e1bc      	b.n	800997e <UART_SetConfig+0x7ae>
 8009604:	2308      	movs	r3, #8
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e1b8      	b.n	800997e <UART_SetConfig+0x7ae>
 800960c:	2310      	movs	r3, #16
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009612:	e1b4      	b.n	800997e <UART_SetConfig+0x7ae>
 8009614:	2320      	movs	r3, #32
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961a:	e1b0      	b.n	800997e <UART_SetConfig+0x7ae>
 800961c:	2340      	movs	r3, #64	@ 0x40
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009622:	e1ac      	b.n	800997e <UART_SetConfig+0x7ae>
 8009624:	2380      	movs	r3, #128	@ 0x80
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e1a8      	b.n	800997e <UART_SetConfig+0x7ae>
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a75      	ldr	r2, [pc, #468]	@ (8009808 <UART_SetConfig+0x638>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d130      	bne.n	8009698 <UART_SetConfig+0x4c8>
 8009636:	4b73      	ldr	r3, [pc, #460]	@ (8009804 <UART_SetConfig+0x634>)
 8009638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	2b05      	cmp	r3, #5
 8009640:	d826      	bhi.n	8009690 <UART_SetConfig+0x4c0>
 8009642:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <UART_SetConfig+0x478>)
 8009644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009648:	08009661 	.word	0x08009661
 800964c:	08009669 	.word	0x08009669
 8009650:	08009671 	.word	0x08009671
 8009654:	08009679 	.word	0x08009679
 8009658:	08009681 	.word	0x08009681
 800965c:	08009689 	.word	0x08009689
 8009660:	2300      	movs	r3, #0
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e18a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009668:	2304      	movs	r3, #4
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e186      	b.n	800997e <UART_SetConfig+0x7ae>
 8009670:	2308      	movs	r3, #8
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e182      	b.n	800997e <UART_SetConfig+0x7ae>
 8009678:	2310      	movs	r3, #16
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967e:	e17e      	b.n	800997e <UART_SetConfig+0x7ae>
 8009680:	2320      	movs	r3, #32
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e17a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009688:	2340      	movs	r3, #64	@ 0x40
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968e:	e176      	b.n	800997e <UART_SetConfig+0x7ae>
 8009690:	2380      	movs	r3, #128	@ 0x80
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e172      	b.n	800997e <UART_SetConfig+0x7ae>
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a5b      	ldr	r2, [pc, #364]	@ (800980c <UART_SetConfig+0x63c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d130      	bne.n	8009704 <UART_SetConfig+0x534>
 80096a2:	4b58      	ldr	r3, [pc, #352]	@ (8009804 <UART_SetConfig+0x634>)
 80096a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b05      	cmp	r3, #5
 80096ac:	d826      	bhi.n	80096fc <UART_SetConfig+0x52c>
 80096ae:	a201      	add	r2, pc, #4	@ (adr r2, 80096b4 <UART_SetConfig+0x4e4>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096cd 	.word	0x080096cd
 80096b8:	080096d5 	.word	0x080096d5
 80096bc:	080096dd 	.word	0x080096dd
 80096c0:	080096e5 	.word	0x080096e5
 80096c4:	080096ed 	.word	0x080096ed
 80096c8:	080096f5 	.word	0x080096f5
 80096cc:	2300      	movs	r3, #0
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e154      	b.n	800997e <UART_SetConfig+0x7ae>
 80096d4:	2304      	movs	r3, #4
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e150      	b.n	800997e <UART_SetConfig+0x7ae>
 80096dc:	2308      	movs	r3, #8
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e14c      	b.n	800997e <UART_SetConfig+0x7ae>
 80096e4:	2310      	movs	r3, #16
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e148      	b.n	800997e <UART_SetConfig+0x7ae>
 80096ec:	2320      	movs	r3, #32
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e144      	b.n	800997e <UART_SetConfig+0x7ae>
 80096f4:	2340      	movs	r3, #64	@ 0x40
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e140      	b.n	800997e <UART_SetConfig+0x7ae>
 80096fc:	2380      	movs	r3, #128	@ 0x80
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009702:	e13c      	b.n	800997e <UART_SetConfig+0x7ae>
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a41      	ldr	r2, [pc, #260]	@ (8009810 <UART_SetConfig+0x640>)
 800970a:	4293      	cmp	r3, r2
 800970c:	f040 8082 	bne.w	8009814 <UART_SetConfig+0x644>
 8009710:	4b3c      	ldr	r3, [pc, #240]	@ (8009804 <UART_SetConfig+0x634>)
 8009712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009718:	2b28      	cmp	r3, #40	@ 0x28
 800971a:	d86d      	bhi.n	80097f8 <UART_SetConfig+0x628>
 800971c:	a201      	add	r2, pc, #4	@ (adr r2, 8009724 <UART_SetConfig+0x554>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	080097c9 	.word	0x080097c9
 8009728:	080097f9 	.word	0x080097f9
 800972c:	080097f9 	.word	0x080097f9
 8009730:	080097f9 	.word	0x080097f9
 8009734:	080097f9 	.word	0x080097f9
 8009738:	080097f9 	.word	0x080097f9
 800973c:	080097f9 	.word	0x080097f9
 8009740:	080097f9 	.word	0x080097f9
 8009744:	080097d1 	.word	0x080097d1
 8009748:	080097f9 	.word	0x080097f9
 800974c:	080097f9 	.word	0x080097f9
 8009750:	080097f9 	.word	0x080097f9
 8009754:	080097f9 	.word	0x080097f9
 8009758:	080097f9 	.word	0x080097f9
 800975c:	080097f9 	.word	0x080097f9
 8009760:	080097f9 	.word	0x080097f9
 8009764:	080097d9 	.word	0x080097d9
 8009768:	080097f9 	.word	0x080097f9
 800976c:	080097f9 	.word	0x080097f9
 8009770:	080097f9 	.word	0x080097f9
 8009774:	080097f9 	.word	0x080097f9
 8009778:	080097f9 	.word	0x080097f9
 800977c:	080097f9 	.word	0x080097f9
 8009780:	080097f9 	.word	0x080097f9
 8009784:	080097e1 	.word	0x080097e1
 8009788:	080097f9 	.word	0x080097f9
 800978c:	080097f9 	.word	0x080097f9
 8009790:	080097f9 	.word	0x080097f9
 8009794:	080097f9 	.word	0x080097f9
 8009798:	080097f9 	.word	0x080097f9
 800979c:	080097f9 	.word	0x080097f9
 80097a0:	080097f9 	.word	0x080097f9
 80097a4:	080097e9 	.word	0x080097e9
 80097a8:	080097f9 	.word	0x080097f9
 80097ac:	080097f9 	.word	0x080097f9
 80097b0:	080097f9 	.word	0x080097f9
 80097b4:	080097f9 	.word	0x080097f9
 80097b8:	080097f9 	.word	0x080097f9
 80097bc:	080097f9 	.word	0x080097f9
 80097c0:	080097f9 	.word	0x080097f9
 80097c4:	080097f1 	.word	0x080097f1
 80097c8:	2301      	movs	r3, #1
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ce:	e0d6      	b.n	800997e <UART_SetConfig+0x7ae>
 80097d0:	2304      	movs	r3, #4
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d6:	e0d2      	b.n	800997e <UART_SetConfig+0x7ae>
 80097d8:	2308      	movs	r3, #8
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e0ce      	b.n	800997e <UART_SetConfig+0x7ae>
 80097e0:	2310      	movs	r3, #16
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e0ca      	b.n	800997e <UART_SetConfig+0x7ae>
 80097e8:	2320      	movs	r3, #32
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e0c6      	b.n	800997e <UART_SetConfig+0x7ae>
 80097f0:	2340      	movs	r3, #64	@ 0x40
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e0c2      	b.n	800997e <UART_SetConfig+0x7ae>
 80097f8:	2380      	movs	r3, #128	@ 0x80
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e0be      	b.n	800997e <UART_SetConfig+0x7ae>
 8009800:	40011400 	.word	0x40011400
 8009804:	58024400 	.word	0x58024400
 8009808:	40007800 	.word	0x40007800
 800980c:	40007c00 	.word	0x40007c00
 8009810:	40011800 	.word	0x40011800
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4aad      	ldr	r2, [pc, #692]	@ (8009ad0 <UART_SetConfig+0x900>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d176      	bne.n	800990c <UART_SetConfig+0x73c>
 800981e:	4bad      	ldr	r3, [pc, #692]	@ (8009ad4 <UART_SetConfig+0x904>)
 8009820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009826:	2b28      	cmp	r3, #40	@ 0x28
 8009828:	d86c      	bhi.n	8009904 <UART_SetConfig+0x734>
 800982a:	a201      	add	r2, pc, #4	@ (adr r2, 8009830 <UART_SetConfig+0x660>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	080098d5 	.word	0x080098d5
 8009834:	08009905 	.word	0x08009905
 8009838:	08009905 	.word	0x08009905
 800983c:	08009905 	.word	0x08009905
 8009840:	08009905 	.word	0x08009905
 8009844:	08009905 	.word	0x08009905
 8009848:	08009905 	.word	0x08009905
 800984c:	08009905 	.word	0x08009905
 8009850:	080098dd 	.word	0x080098dd
 8009854:	08009905 	.word	0x08009905
 8009858:	08009905 	.word	0x08009905
 800985c:	08009905 	.word	0x08009905
 8009860:	08009905 	.word	0x08009905
 8009864:	08009905 	.word	0x08009905
 8009868:	08009905 	.word	0x08009905
 800986c:	08009905 	.word	0x08009905
 8009870:	080098e5 	.word	0x080098e5
 8009874:	08009905 	.word	0x08009905
 8009878:	08009905 	.word	0x08009905
 800987c:	08009905 	.word	0x08009905
 8009880:	08009905 	.word	0x08009905
 8009884:	08009905 	.word	0x08009905
 8009888:	08009905 	.word	0x08009905
 800988c:	08009905 	.word	0x08009905
 8009890:	080098ed 	.word	0x080098ed
 8009894:	08009905 	.word	0x08009905
 8009898:	08009905 	.word	0x08009905
 800989c:	08009905 	.word	0x08009905
 80098a0:	08009905 	.word	0x08009905
 80098a4:	08009905 	.word	0x08009905
 80098a8:	08009905 	.word	0x08009905
 80098ac:	08009905 	.word	0x08009905
 80098b0:	080098f5 	.word	0x080098f5
 80098b4:	08009905 	.word	0x08009905
 80098b8:	08009905 	.word	0x08009905
 80098bc:	08009905 	.word	0x08009905
 80098c0:	08009905 	.word	0x08009905
 80098c4:	08009905 	.word	0x08009905
 80098c8:	08009905 	.word	0x08009905
 80098cc:	08009905 	.word	0x08009905
 80098d0:	080098fd 	.word	0x080098fd
 80098d4:	2301      	movs	r3, #1
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e050      	b.n	800997e <UART_SetConfig+0x7ae>
 80098dc:	2304      	movs	r3, #4
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e2:	e04c      	b.n	800997e <UART_SetConfig+0x7ae>
 80098e4:	2308      	movs	r3, #8
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ea:	e048      	b.n	800997e <UART_SetConfig+0x7ae>
 80098ec:	2310      	movs	r3, #16
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f2:	e044      	b.n	800997e <UART_SetConfig+0x7ae>
 80098f4:	2320      	movs	r3, #32
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fa:	e040      	b.n	800997e <UART_SetConfig+0x7ae>
 80098fc:	2340      	movs	r3, #64	@ 0x40
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009902:	e03c      	b.n	800997e <UART_SetConfig+0x7ae>
 8009904:	2380      	movs	r3, #128	@ 0x80
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990a:	e038      	b.n	800997e <UART_SetConfig+0x7ae>
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a71      	ldr	r2, [pc, #452]	@ (8009ad8 <UART_SetConfig+0x908>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d130      	bne.n	8009978 <UART_SetConfig+0x7a8>
 8009916:	4b6f      	ldr	r3, [pc, #444]	@ (8009ad4 <UART_SetConfig+0x904>)
 8009918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991a:	f003 0307 	and.w	r3, r3, #7
 800991e:	2b05      	cmp	r3, #5
 8009920:	d826      	bhi.n	8009970 <UART_SetConfig+0x7a0>
 8009922:	a201      	add	r2, pc, #4	@ (adr r2, 8009928 <UART_SetConfig+0x758>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	08009941 	.word	0x08009941
 800992c:	08009949 	.word	0x08009949
 8009930:	08009951 	.word	0x08009951
 8009934:	08009959 	.word	0x08009959
 8009938:	08009961 	.word	0x08009961
 800993c:	08009969 	.word	0x08009969
 8009940:	2302      	movs	r3, #2
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e01a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009948:	2304      	movs	r3, #4
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994e:	e016      	b.n	800997e <UART_SetConfig+0x7ae>
 8009950:	2308      	movs	r3, #8
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e012      	b.n	800997e <UART_SetConfig+0x7ae>
 8009958:	2310      	movs	r3, #16
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995e:	e00e      	b.n	800997e <UART_SetConfig+0x7ae>
 8009960:	2320      	movs	r3, #32
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e00a      	b.n	800997e <UART_SetConfig+0x7ae>
 8009968:	2340      	movs	r3, #64	@ 0x40
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e006      	b.n	800997e <UART_SetConfig+0x7ae>
 8009970:	2380      	movs	r3, #128	@ 0x80
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e002      	b.n	800997e <UART_SetConfig+0x7ae>
 8009978:	2380      	movs	r3, #128	@ 0x80
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a55      	ldr	r2, [pc, #340]	@ (8009ad8 <UART_SetConfig+0x908>)
 8009984:	4293      	cmp	r3, r2
 8009986:	f040 80f8 	bne.w	8009b7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800998a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800998e:	2b20      	cmp	r3, #32
 8009990:	dc46      	bgt.n	8009a20 <UART_SetConfig+0x850>
 8009992:	2b02      	cmp	r3, #2
 8009994:	db75      	blt.n	8009a82 <UART_SetConfig+0x8b2>
 8009996:	3b02      	subs	r3, #2
 8009998:	2b1e      	cmp	r3, #30
 800999a:	d872      	bhi.n	8009a82 <UART_SetConfig+0x8b2>
 800999c:	a201      	add	r2, pc, #4	@ (adr r2, 80099a4 <UART_SetConfig+0x7d4>)
 800999e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a2:	bf00      	nop
 80099a4:	08009a27 	.word	0x08009a27
 80099a8:	08009a83 	.word	0x08009a83
 80099ac:	08009a2f 	.word	0x08009a2f
 80099b0:	08009a83 	.word	0x08009a83
 80099b4:	08009a83 	.word	0x08009a83
 80099b8:	08009a83 	.word	0x08009a83
 80099bc:	08009a3f 	.word	0x08009a3f
 80099c0:	08009a83 	.word	0x08009a83
 80099c4:	08009a83 	.word	0x08009a83
 80099c8:	08009a83 	.word	0x08009a83
 80099cc:	08009a83 	.word	0x08009a83
 80099d0:	08009a83 	.word	0x08009a83
 80099d4:	08009a83 	.word	0x08009a83
 80099d8:	08009a83 	.word	0x08009a83
 80099dc:	08009a4f 	.word	0x08009a4f
 80099e0:	08009a83 	.word	0x08009a83
 80099e4:	08009a83 	.word	0x08009a83
 80099e8:	08009a83 	.word	0x08009a83
 80099ec:	08009a83 	.word	0x08009a83
 80099f0:	08009a83 	.word	0x08009a83
 80099f4:	08009a83 	.word	0x08009a83
 80099f8:	08009a83 	.word	0x08009a83
 80099fc:	08009a83 	.word	0x08009a83
 8009a00:	08009a83 	.word	0x08009a83
 8009a04:	08009a83 	.word	0x08009a83
 8009a08:	08009a83 	.word	0x08009a83
 8009a0c:	08009a83 	.word	0x08009a83
 8009a10:	08009a83 	.word	0x08009a83
 8009a14:	08009a83 	.word	0x08009a83
 8009a18:	08009a83 	.word	0x08009a83
 8009a1c:	08009a75 	.word	0x08009a75
 8009a20:	2b40      	cmp	r3, #64	@ 0x40
 8009a22:	d02a      	beq.n	8009a7a <UART_SetConfig+0x8aa>
 8009a24:	e02d      	b.n	8009a82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a26:	f7fc fe61 	bl	80066ec <HAL_RCCEx_GetD3PCLK1Freq>
 8009a2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a2c:	e02f      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fc fe70 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a3c:	e027      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a3e:	f107 0318 	add.w	r3, r7, #24
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fc ffbc 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4c:	e01f      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a4e:	4b21      	ldr	r3, [pc, #132]	@ (8009ad4 <UART_SetConfig+0x904>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ad4 <UART_SetConfig+0x904>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	08db      	lsrs	r3, r3, #3
 8009a60:	f003 0303 	and.w	r3, r3, #3
 8009a64:	4a1d      	ldr	r2, [pc, #116]	@ (8009adc <UART_SetConfig+0x90c>)
 8009a66:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a6c:	e00f      	b.n	8009a8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8009adc <UART_SetConfig+0x90c>)
 8009a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a72:	e00c      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a74:	4b1a      	ldr	r3, [pc, #104]	@ (8009ae0 <UART_SetConfig+0x910>)
 8009a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a78:	e009      	b.n	8009a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a80:	e005      	b.n	8009a8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 81ee 	beq.w	8009e72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9a:	4a12      	ldr	r2, [pc, #72]	@ (8009ae4 <UART_SetConfig+0x914>)
 8009a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aa8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	005b      	lsls	r3, r3, #1
 8009ab2:	4413      	add	r3, r2
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d305      	bcc.n	8009ac6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d910      	bls.n	8009ae8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009acc:	e1d1      	b.n	8009e72 <UART_SetConfig+0xca2>
 8009ace:	bf00      	nop
 8009ad0:	40011c00 	.word	0x40011c00
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	58000c00 	.word	0x58000c00
 8009adc:	03d09000 	.word	0x03d09000
 8009ae0:	003d0900 	.word	0x003d0900
 8009ae4:	08011620 	.word	0x08011620
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aea:	2200      	movs	r2, #0
 8009aec:	60bb      	str	r3, [r7, #8]
 8009aee:	60fa      	str	r2, [r7, #12]
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af4:	4ac0      	ldr	r2, [pc, #768]	@ (8009df8 <UART_SetConfig+0xc28>)
 8009af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2200      	movs	r2, #0
 8009afe:	603b      	str	r3, [r7, #0]
 8009b00:	607a      	str	r2, [r7, #4]
 8009b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b0a:	f7f6 fbef 	bl	80002ec <__aeabi_uldivmod>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4610      	mov	r0, r2
 8009b14:	4619      	mov	r1, r3
 8009b16:	f04f 0200 	mov.w	r2, #0
 8009b1a:	f04f 0300 	mov.w	r3, #0
 8009b1e:	020b      	lsls	r3, r1, #8
 8009b20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b24:	0202      	lsls	r2, r0, #8
 8009b26:	6979      	ldr	r1, [r7, #20]
 8009b28:	6849      	ldr	r1, [r1, #4]
 8009b2a:	0849      	lsrs	r1, r1, #1
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4605      	mov	r5, r0
 8009b32:	eb12 0804 	adds.w	r8, r2, r4
 8009b36:	eb43 0905 	adc.w	r9, r3, r5
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	469a      	mov	sl, r3
 8009b42:	4693      	mov	fp, r2
 8009b44:	4652      	mov	r2, sl
 8009b46:	465b      	mov	r3, fp
 8009b48:	4640      	mov	r0, r8
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	f7f6 fbce 	bl	80002ec <__aeabi_uldivmod>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4613      	mov	r3, r2
 8009b56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b5e:	d308      	bcc.n	8009b72 <UART_SetConfig+0x9a2>
 8009b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b66:	d204      	bcs.n	8009b72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b6e:	60da      	str	r2, [r3, #12]
 8009b70:	e17f      	b.n	8009e72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b78:	e17b      	b.n	8009e72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b82:	f040 80bd 	bne.w	8009d00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009b86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	dc48      	bgt.n	8009c20 <UART_SetConfig+0xa50>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	db7b      	blt.n	8009c8a <UART_SetConfig+0xaba>
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d879      	bhi.n	8009c8a <UART_SetConfig+0xaba>
 8009b96:	a201      	add	r2, pc, #4	@ (adr r2, 8009b9c <UART_SetConfig+0x9cc>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009c27 	.word	0x08009c27
 8009ba0:	08009c2f 	.word	0x08009c2f
 8009ba4:	08009c8b 	.word	0x08009c8b
 8009ba8:	08009c8b 	.word	0x08009c8b
 8009bac:	08009c37 	.word	0x08009c37
 8009bb0:	08009c8b 	.word	0x08009c8b
 8009bb4:	08009c8b 	.word	0x08009c8b
 8009bb8:	08009c8b 	.word	0x08009c8b
 8009bbc:	08009c47 	.word	0x08009c47
 8009bc0:	08009c8b 	.word	0x08009c8b
 8009bc4:	08009c8b 	.word	0x08009c8b
 8009bc8:	08009c8b 	.word	0x08009c8b
 8009bcc:	08009c8b 	.word	0x08009c8b
 8009bd0:	08009c8b 	.word	0x08009c8b
 8009bd4:	08009c8b 	.word	0x08009c8b
 8009bd8:	08009c8b 	.word	0x08009c8b
 8009bdc:	08009c57 	.word	0x08009c57
 8009be0:	08009c8b 	.word	0x08009c8b
 8009be4:	08009c8b 	.word	0x08009c8b
 8009be8:	08009c8b 	.word	0x08009c8b
 8009bec:	08009c8b 	.word	0x08009c8b
 8009bf0:	08009c8b 	.word	0x08009c8b
 8009bf4:	08009c8b 	.word	0x08009c8b
 8009bf8:	08009c8b 	.word	0x08009c8b
 8009bfc:	08009c8b 	.word	0x08009c8b
 8009c00:	08009c8b 	.word	0x08009c8b
 8009c04:	08009c8b 	.word	0x08009c8b
 8009c08:	08009c8b 	.word	0x08009c8b
 8009c0c:	08009c8b 	.word	0x08009c8b
 8009c10:	08009c8b 	.word	0x08009c8b
 8009c14:	08009c8b 	.word	0x08009c8b
 8009c18:	08009c8b 	.word	0x08009c8b
 8009c1c:	08009c7d 	.word	0x08009c7d
 8009c20:	2b40      	cmp	r3, #64	@ 0x40
 8009c22:	d02e      	beq.n	8009c82 <UART_SetConfig+0xab2>
 8009c24:	e031      	b.n	8009c8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c26:	f7fa fe9f 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8009c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c2c:	e033      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c2e:	f7fa feb1 	bl	8004994 <HAL_RCC_GetPCLK2Freq>
 8009c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c34:	e02f      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fc fd6c 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c44:	e027      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c46:	f107 0318 	add.w	r3, r7, #24
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fc feb8 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c54:	e01f      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c56:	4b69      	ldr	r3, [pc, #420]	@ (8009dfc <UART_SetConfig+0xc2c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c62:	4b66      	ldr	r3, [pc, #408]	@ (8009dfc <UART_SetConfig+0xc2c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	08db      	lsrs	r3, r3, #3
 8009c68:	f003 0303 	and.w	r3, r3, #3
 8009c6c:	4a64      	ldr	r2, [pc, #400]	@ (8009e00 <UART_SetConfig+0xc30>)
 8009c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c74:	e00f      	b.n	8009c96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009c76:	4b62      	ldr	r3, [pc, #392]	@ (8009e00 <UART_SetConfig+0xc30>)
 8009c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7a:	e00c      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c7c:	4b61      	ldr	r3, [pc, #388]	@ (8009e04 <UART_SetConfig+0xc34>)
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c80:	e009      	b.n	8009c96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c88:	e005      	b.n	8009c96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 80ea 	beq.w	8009e72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca2:	4a55      	ldr	r2, [pc, #340]	@ (8009df8 <UART_SetConfig+0xc28>)
 8009ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cb0:	005a      	lsls	r2, r3, #1
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	441a      	add	r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d916      	bls.n	8009cf8 <UART_SetConfig+0xb28>
 8009cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd0:	d212      	bcs.n	8009cf8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f023 030f 	bic.w	r3, r3, #15
 8009cda:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009cea:	4313      	orrs	r3, r2
 8009cec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009cf4:	60da      	str	r2, [r3, #12]
 8009cf6:	e0bc      	b.n	8009e72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009cfe:	e0b8      	b.n	8009e72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d04:	2b20      	cmp	r3, #32
 8009d06:	dc4b      	bgt.n	8009da0 <UART_SetConfig+0xbd0>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f2c0 8087 	blt.w	8009e1c <UART_SetConfig+0xc4c>
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	f200 8084 	bhi.w	8009e1c <UART_SetConfig+0xc4c>
 8009d14:	a201      	add	r2, pc, #4	@ (adr r2, 8009d1c <UART_SetConfig+0xb4c>)
 8009d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1a:	bf00      	nop
 8009d1c:	08009da7 	.word	0x08009da7
 8009d20:	08009daf 	.word	0x08009daf
 8009d24:	08009e1d 	.word	0x08009e1d
 8009d28:	08009e1d 	.word	0x08009e1d
 8009d2c:	08009db7 	.word	0x08009db7
 8009d30:	08009e1d 	.word	0x08009e1d
 8009d34:	08009e1d 	.word	0x08009e1d
 8009d38:	08009e1d 	.word	0x08009e1d
 8009d3c:	08009dc7 	.word	0x08009dc7
 8009d40:	08009e1d 	.word	0x08009e1d
 8009d44:	08009e1d 	.word	0x08009e1d
 8009d48:	08009e1d 	.word	0x08009e1d
 8009d4c:	08009e1d 	.word	0x08009e1d
 8009d50:	08009e1d 	.word	0x08009e1d
 8009d54:	08009e1d 	.word	0x08009e1d
 8009d58:	08009e1d 	.word	0x08009e1d
 8009d5c:	08009dd7 	.word	0x08009dd7
 8009d60:	08009e1d 	.word	0x08009e1d
 8009d64:	08009e1d 	.word	0x08009e1d
 8009d68:	08009e1d 	.word	0x08009e1d
 8009d6c:	08009e1d 	.word	0x08009e1d
 8009d70:	08009e1d 	.word	0x08009e1d
 8009d74:	08009e1d 	.word	0x08009e1d
 8009d78:	08009e1d 	.word	0x08009e1d
 8009d7c:	08009e1d 	.word	0x08009e1d
 8009d80:	08009e1d 	.word	0x08009e1d
 8009d84:	08009e1d 	.word	0x08009e1d
 8009d88:	08009e1d 	.word	0x08009e1d
 8009d8c:	08009e1d 	.word	0x08009e1d
 8009d90:	08009e1d 	.word	0x08009e1d
 8009d94:	08009e1d 	.word	0x08009e1d
 8009d98:	08009e1d 	.word	0x08009e1d
 8009d9c:	08009e0f 	.word	0x08009e0f
 8009da0:	2b40      	cmp	r3, #64	@ 0x40
 8009da2:	d037      	beq.n	8009e14 <UART_SetConfig+0xc44>
 8009da4:	e03a      	b.n	8009e1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009da6:	f7fa fddf 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8009daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dac:	e03c      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dae:	f7fa fdf1 	bl	8004994 <HAL_RCC_GetPCLK2Freq>
 8009db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009db4:	e038      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fc fcac 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dc4:	e030      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dc6:	f107 0318 	add.w	r3, r7, #24
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fc fdf8 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dd4:	e028      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dd6:	4b09      	ldr	r3, [pc, #36]	@ (8009dfc <UART_SetConfig+0xc2c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0320 	and.w	r3, r3, #32
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d012      	beq.n	8009e08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009de2:	4b06      	ldr	r3, [pc, #24]	@ (8009dfc <UART_SetConfig+0xc2c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	08db      	lsrs	r3, r3, #3
 8009de8:	f003 0303 	and.w	r3, r3, #3
 8009dec:	4a04      	ldr	r2, [pc, #16]	@ (8009e00 <UART_SetConfig+0xc30>)
 8009dee:	fa22 f303 	lsr.w	r3, r2, r3
 8009df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009df4:	e018      	b.n	8009e28 <UART_SetConfig+0xc58>
 8009df6:	bf00      	nop
 8009df8:	08011620 	.word	0x08011620
 8009dfc:	58024400 	.word	0x58024400
 8009e00:	03d09000 	.word	0x03d09000
 8009e04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009e08:	4b24      	ldr	r3, [pc, #144]	@ (8009e9c <UART_SetConfig+0xccc>)
 8009e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e0c:	e00c      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e0e:	4b24      	ldr	r3, [pc, #144]	@ (8009ea0 <UART_SetConfig+0xcd0>)
 8009e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e12:	e009      	b.n	8009e28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e1a:	e005      	b.n	8009e28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e26:	bf00      	nop
    }

    if (pclk != 0U)
 8009e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d021      	beq.n	8009e72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e32:	4a1c      	ldr	r2, [pc, #112]	@ (8009ea4 <UART_SetConfig+0xcd4>)
 8009e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	085b      	lsrs	r3, r3, #1
 8009e46:	441a      	add	r2, r3
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e50:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e54:	2b0f      	cmp	r3, #15
 8009e56:	d909      	bls.n	8009e6c <UART_SetConfig+0xc9c>
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e5e:	d205      	bcs.n	8009e6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	e002      	b.n	8009e72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2200      	movs	r2, #0
 8009e86:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e8e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3748      	adds	r7, #72	@ 0x48
 8009e96:	46bd      	mov	sp, r7
 8009e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e9c:	03d09000 	.word	0x03d09000
 8009ea0:	003d0900 	.word	0x003d0900
 8009ea4:	08011620 	.word	0x08011620

08009ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00a      	beq.n	8009ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00a      	beq.n	8009ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef8:	f003 0302 	and.w	r3, r3, #2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00a      	beq.n	8009f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1a:	f003 0304 	and.w	r3, r3, #4
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00a      	beq.n	8009f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f3c:	f003 0310 	and.w	r3, r3, #16
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00a      	beq.n	8009f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01a      	beq.n	8009fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fa6:	d10a      	bne.n	8009fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	605a      	str	r2, [r3, #4]
  }
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b098      	sub	sp, #96	@ 0x60
 8009ff0:	af02      	add	r7, sp, #8
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ffc:	f7f7 fd58 	bl	8001ab0 <HAL_GetTick>
 800a000:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0308 	and.w	r3, r3, #8
 800a00c:	2b08      	cmp	r3, #8
 800a00e:	d12f      	bne.n	800a070 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a018:	2200      	movs	r2, #0
 800a01a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f88e 	bl	800a140 <UART_WaitOnFlagUntilTimeout>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d022      	beq.n	800a070 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a03a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a03e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a048:	647b      	str	r3, [r7, #68]	@ 0x44
 800a04a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a04e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e6      	bne.n	800a02a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e063      	b.n	800a138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d149      	bne.n	800a112 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a07e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a086:	2200      	movs	r2, #0
 800a088:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f857 	bl	800a140 <UART_WaitOnFlagUntilTimeout>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d03c      	beq.n	800a112 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	623b      	str	r3, [r7, #32]
   return(result);
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e6      	bne.n	800a098 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3308      	adds	r3, #8
 800a0d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f023 0301 	bic.w	r3, r3, #1
 800a0e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0ea:	61fa      	str	r2, [r7, #28]
 800a0ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	69b9      	ldr	r1, [r7, #24]
 800a0f0:	69fa      	ldr	r2, [r7, #28]
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e5      	bne.n	800a0ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2220      	movs	r2, #32
 800a102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e012      	b.n	800a138 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2220      	movs	r2, #32
 800a116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2220      	movs	r2, #32
 800a11e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3758      	adds	r7, #88	@ 0x58
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	4613      	mov	r3, r2
 800a14e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a150:	e04f      	b.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a158:	d04b      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a15a:	f7f7 fca9 	bl	8001ab0 <HAL_GetTick>
 800a15e:	4602      	mov	r2, r0
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	429a      	cmp	r2, r3
 800a168:	d302      	bcc.n	800a170 <UART_WaitOnFlagUntilTimeout+0x30>
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e04e      	b.n	800a212 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0304 	and.w	r3, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d037      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b80      	cmp	r3, #128	@ 0x80
 800a186:	d034      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b40      	cmp	r3, #64	@ 0x40
 800a18c:	d031      	beq.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	f003 0308 	and.w	r3, r3, #8
 800a198:	2b08      	cmp	r3, #8
 800a19a:	d110      	bne.n	800a1be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2208      	movs	r2, #8
 800a1a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f839 	bl	800a21c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2208      	movs	r2, #8
 800a1ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e029      	b.n	800a212 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1cc:	d111      	bne.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 f81f 	bl	800a21c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e00f      	b.n	800a212 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	69da      	ldr	r2, [r3, #28]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	bf0c      	ite	eq
 800a202:	2301      	moveq	r3, #1
 800a204:	2300      	movne	r3, #0
 800a206:	b2db      	uxtb	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d0a0      	beq.n	800a152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b095      	sub	sp, #84	@ 0x54
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22c:	e853 3f00 	ldrex	r3, [r3]
 800a230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a242:	643b      	str	r3, [r7, #64]	@ 0x40
 800a244:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1e6      	bne.n	800a224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3308      	adds	r3, #8
 800a25c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	61fb      	str	r3, [r7, #28]
   return(result);
 800a266:	69fa      	ldr	r2, [r7, #28]
 800a268:	4b1e      	ldr	r3, [pc, #120]	@ (800a2e4 <UART_EndRxTransfer+0xc8>)
 800a26a:	4013      	ands	r3, r2
 800a26c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3308      	adds	r3, #8
 800a274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a27c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e5      	bne.n	800a256 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d118      	bne.n	800a2c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	e853 3f00 	ldrex	r3, [r3]
 800a29e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	f023 0310 	bic.w	r3, r3, #16
 800a2a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2b0:	61bb      	str	r3, [r7, #24]
 800a2b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	6979      	ldr	r1, [r7, #20]
 800a2b6:	69ba      	ldr	r2, [r7, #24]
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e6      	bne.n	800a292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a2d8:	bf00      	nop
 800a2da:	3754      	adds	r7, #84	@ 0x54
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	effffffe 	.word	0xeffffffe

0800a2e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d101      	bne.n	800a2fe <HAL_UARTEx_DisableFifoMode+0x16>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	e027      	b.n	800a34e <HAL_UARTEx_DisableFifoMode+0x66>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2224      	movs	r2, #36	@ 0x24
 800a30a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f022 0201 	bic.w	r2, r2, #1
 800a324:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a32c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2220      	movs	r2, #32
 800a340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d101      	bne.n	800a372 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a36e:	2302      	movs	r3, #2
 800a370:	e02d      	b.n	800a3ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2224      	movs	r2, #36	@ 0x24
 800a37e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0201 	bic.w	r2, r2, #1
 800a398:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f850 	bl	800a454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2220      	movs	r2, #32
 800a3c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b084      	sub	sp, #16
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d101      	bne.n	800a3ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	e02d      	b.n	800a44a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2224      	movs	r2, #36	@ 0x24
 800a3fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0201 	bic.w	r2, r2, #1
 800a414:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	683a      	ldr	r2, [r7, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f812 	bl	800a454 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2220      	movs	r2, #32
 800a43c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a460:	2b00      	cmp	r3, #0
 800a462:	d108      	bne.n	800a476 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a474:	e031      	b.n	800a4da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a476:	2310      	movs	r3, #16
 800a478:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a47a:	2310      	movs	r3, #16
 800a47c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	0e5b      	lsrs	r3, r3, #25
 800a486:	b2db      	uxtb	r3, r3
 800a488:	f003 0307 	and.w	r3, r3, #7
 800a48c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	0f5b      	lsrs	r3, r3, #29
 800a496:	b2db      	uxtb	r3, r3
 800a498:	f003 0307 	and.w	r3, r3, #7
 800a49c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a49e:	7bbb      	ldrb	r3, [r7, #14]
 800a4a0:	7b3a      	ldrb	r2, [r7, #12]
 800a4a2:	4911      	ldr	r1, [pc, #68]	@ (800a4e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a4a4:	5c8a      	ldrb	r2, [r1, r2]
 800a4a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4aa:	7b3a      	ldrb	r2, [r7, #12]
 800a4ac:	490f      	ldr	r1, [pc, #60]	@ (800a4ec <UARTEx_SetNbDataToProcess+0x98>)
 800a4ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	7b7a      	ldrb	r2, [r7, #13]
 800a4c0:	4909      	ldr	r1, [pc, #36]	@ (800a4e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a4c2:	5c8a      	ldrb	r2, [r1, r2]
 800a4c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4c8:	7b7a      	ldrb	r2, [r7, #13]
 800a4ca:	4908      	ldr	r1, [pc, #32]	@ (800a4ec <UARTEx_SetNbDataToProcess+0x98>)
 800a4cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4da:	bf00      	nop
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	08011638 	.word	0x08011638
 800a4ec:	08011640 	.word	0x08011640

0800a4f0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e03c      	b.n	800a57c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d106      	bne.n	800a51c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7f7 f8d8 	bl	80016cc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f022 0201 	bic.w	r2, r2, #1
 800a532:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f85b 	bl	800a5f0 <USART_SetConfig>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e01b      	b.n	800a57c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a552:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689a      	ldr	r2, [r3, #8]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a562:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f042 0201 	orr.w	r2, r2, #1
 800a572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fddd 	bl	800b134 <USART_CheckIdleState>
 800a57a:	4603      	mov	r3, r0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	603b      	str	r3, [r7, #0]
 800a590:	4613      	mov	r3, r2
 800a592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800a594:	e018      	b.n	800a5c8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59c:	d014      	beq.n	800a5c8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a59e:	f7f7 fa87 	bl	8001ab0 <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	69ba      	ldr	r2, [r7, #24]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d302      	bcc.n	800a5b4 <USART_WaitOnFlagUntilTimeout+0x30>
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d109      	bne.n	800a5c8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e00f      	b.n	800a5e8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	69da      	ldr	r2, [r3, #28]
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	bf0c      	ite	eq
 800a5d8:	2301      	moveq	r3, #1
 800a5da:	2300      	movne	r3, #0
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	461a      	mov	r2, r3
 800a5e0:	79fb      	ldrb	r3, [r7, #7]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d0d7      	beq.n	800a596 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08e      	sub	sp, #56	@ 0x38
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800a5fe:	2300      	movs	r3, #0
 800a600:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	689a      	ldr	r2, [r3, #8]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	431a      	orrs	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	4313      	orrs	r3, r2
 800a612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	4bc9      	ldr	r3, [pc, #804]	@ (800a944 <USART_SetConfig+0x354>)
 800a620:	4013      	ands	r3, r2
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	6812      	ldr	r2, [r2, #0]
 800a626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a628:	430b      	orrs	r3, r1
 800a62a:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800a62c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a638:	4313      	orrs	r3, r2
 800a63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	699a      	ldr	r2, [r3, #24]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	4313      	orrs	r3, r2
 800a646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a648:	4313      	orrs	r3, r2
 800a64a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a652:	4313      	orrs	r3, r2
 800a654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	4bba      	ldr	r3, [pc, #744]	@ (800a948 <USART_SetConfig+0x358>)
 800a65e:	4013      	ands	r3, r2
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6812      	ldr	r2, [r2, #0]
 800a664:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a666:	430b      	orrs	r3, r1
 800a668:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a670:	f023 010f 	bic.w	r1, r3, #15
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4ab1      	ldr	r2, [pc, #708]	@ (800a94c <USART_SetConfig+0x35c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d176      	bne.n	800a778 <USART_SetConfig+0x188>
 800a68a:	4bb1      	ldr	r3, [pc, #708]	@ (800a950 <USART_SetConfig+0x360>)
 800a68c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a68e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a692:	2b28      	cmp	r3, #40	@ 0x28
 800a694:	d86c      	bhi.n	800a770 <USART_SetConfig+0x180>
 800a696:	a201      	add	r2, pc, #4	@ (adr r2, 800a69c <USART_SetConfig+0xac>)
 800a698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69c:	0800a741 	.word	0x0800a741
 800a6a0:	0800a771 	.word	0x0800a771
 800a6a4:	0800a771 	.word	0x0800a771
 800a6a8:	0800a771 	.word	0x0800a771
 800a6ac:	0800a771 	.word	0x0800a771
 800a6b0:	0800a771 	.word	0x0800a771
 800a6b4:	0800a771 	.word	0x0800a771
 800a6b8:	0800a771 	.word	0x0800a771
 800a6bc:	0800a749 	.word	0x0800a749
 800a6c0:	0800a771 	.word	0x0800a771
 800a6c4:	0800a771 	.word	0x0800a771
 800a6c8:	0800a771 	.word	0x0800a771
 800a6cc:	0800a771 	.word	0x0800a771
 800a6d0:	0800a771 	.word	0x0800a771
 800a6d4:	0800a771 	.word	0x0800a771
 800a6d8:	0800a771 	.word	0x0800a771
 800a6dc:	0800a751 	.word	0x0800a751
 800a6e0:	0800a771 	.word	0x0800a771
 800a6e4:	0800a771 	.word	0x0800a771
 800a6e8:	0800a771 	.word	0x0800a771
 800a6ec:	0800a771 	.word	0x0800a771
 800a6f0:	0800a771 	.word	0x0800a771
 800a6f4:	0800a771 	.word	0x0800a771
 800a6f8:	0800a771 	.word	0x0800a771
 800a6fc:	0800a759 	.word	0x0800a759
 800a700:	0800a771 	.word	0x0800a771
 800a704:	0800a771 	.word	0x0800a771
 800a708:	0800a771 	.word	0x0800a771
 800a70c:	0800a771 	.word	0x0800a771
 800a710:	0800a771 	.word	0x0800a771
 800a714:	0800a771 	.word	0x0800a771
 800a718:	0800a771 	.word	0x0800a771
 800a71c:	0800a761 	.word	0x0800a761
 800a720:	0800a771 	.word	0x0800a771
 800a724:	0800a771 	.word	0x0800a771
 800a728:	0800a771 	.word	0x0800a771
 800a72c:	0800a771 	.word	0x0800a771
 800a730:	0800a771 	.word	0x0800a771
 800a734:	0800a771 	.word	0x0800a771
 800a738:	0800a771 	.word	0x0800a771
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	2301      	movs	r3, #1
 800a742:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a746:	e18e      	b.n	800aa66 <USART_SetConfig+0x476>
 800a748:	2302      	movs	r3, #2
 800a74a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a74e:	e18a      	b.n	800aa66 <USART_SetConfig+0x476>
 800a750:	2304      	movs	r3, #4
 800a752:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a756:	e186      	b.n	800aa66 <USART_SetConfig+0x476>
 800a758:	2308      	movs	r3, #8
 800a75a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a75e:	e182      	b.n	800aa66 <USART_SetConfig+0x476>
 800a760:	2310      	movs	r3, #16
 800a762:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a766:	e17e      	b.n	800aa66 <USART_SetConfig+0x476>
 800a768:	2320      	movs	r3, #32
 800a76a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a76e:	e17a      	b.n	800aa66 <USART_SetConfig+0x476>
 800a770:	2340      	movs	r3, #64	@ 0x40
 800a772:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a776:	e176      	b.n	800aa66 <USART_SetConfig+0x476>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a75      	ldr	r2, [pc, #468]	@ (800a954 <USART_SetConfig+0x364>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d130      	bne.n	800a7e4 <USART_SetConfig+0x1f4>
 800a782:	4b73      	ldr	r3, [pc, #460]	@ (800a950 <USART_SetConfig+0x360>)
 800a784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	d826      	bhi.n	800a7dc <USART_SetConfig+0x1ec>
 800a78e:	a201      	add	r2, pc, #4	@ (adr r2, 800a794 <USART_SetConfig+0x1a4>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a7ad 	.word	0x0800a7ad
 800a798:	0800a7b5 	.word	0x0800a7b5
 800a79c:	0800a7bd 	.word	0x0800a7bd
 800a7a0:	0800a7c5 	.word	0x0800a7c5
 800a7a4:	0800a7cd 	.word	0x0800a7cd
 800a7a8:	0800a7d5 	.word	0x0800a7d5
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a7b2:	e158      	b.n	800aa66 <USART_SetConfig+0x476>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a7ba:	e154      	b.n	800aa66 <USART_SetConfig+0x476>
 800a7bc:	2304      	movs	r3, #4
 800a7be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a7c2:	e150      	b.n	800aa66 <USART_SetConfig+0x476>
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a7ca:	e14c      	b.n	800aa66 <USART_SetConfig+0x476>
 800a7cc:	2310      	movs	r3, #16
 800a7ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a7d2:	e148      	b.n	800aa66 <USART_SetConfig+0x476>
 800a7d4:	2320      	movs	r3, #32
 800a7d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a7da:	e144      	b.n	800aa66 <USART_SetConfig+0x476>
 800a7dc:	2340      	movs	r3, #64	@ 0x40
 800a7de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a7e2:	e140      	b.n	800aa66 <USART_SetConfig+0x476>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a5b      	ldr	r2, [pc, #364]	@ (800a958 <USART_SetConfig+0x368>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d130      	bne.n	800a850 <USART_SetConfig+0x260>
 800a7ee:	4b58      	ldr	r3, [pc, #352]	@ (800a950 <USART_SetConfig+0x360>)
 800a7f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7f2:	f003 0307 	and.w	r3, r3, #7
 800a7f6:	2b05      	cmp	r3, #5
 800a7f8:	d826      	bhi.n	800a848 <USART_SetConfig+0x258>
 800a7fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a800 <USART_SetConfig+0x210>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a819 	.word	0x0800a819
 800a804:	0800a821 	.word	0x0800a821
 800a808:	0800a829 	.word	0x0800a829
 800a80c:	0800a831 	.word	0x0800a831
 800a810:	0800a839 	.word	0x0800a839
 800a814:	0800a841 	.word	0x0800a841
 800a818:	2300      	movs	r3, #0
 800a81a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a81e:	e122      	b.n	800aa66 <USART_SetConfig+0x476>
 800a820:	2302      	movs	r3, #2
 800a822:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a826:	e11e      	b.n	800aa66 <USART_SetConfig+0x476>
 800a828:	2304      	movs	r3, #4
 800a82a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a82e:	e11a      	b.n	800aa66 <USART_SetConfig+0x476>
 800a830:	2308      	movs	r3, #8
 800a832:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a836:	e116      	b.n	800aa66 <USART_SetConfig+0x476>
 800a838:	2310      	movs	r3, #16
 800a83a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a83e:	e112      	b.n	800aa66 <USART_SetConfig+0x476>
 800a840:	2320      	movs	r3, #32
 800a842:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a846:	e10e      	b.n	800aa66 <USART_SetConfig+0x476>
 800a848:	2340      	movs	r3, #64	@ 0x40
 800a84a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a84e:	e10a      	b.n	800aa66 <USART_SetConfig+0x476>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a41      	ldr	r2, [pc, #260]	@ (800a95c <USART_SetConfig+0x36c>)
 800a856:	4293      	cmp	r3, r2
 800a858:	f040 8086 	bne.w	800a968 <USART_SetConfig+0x378>
 800a85c:	4b3c      	ldr	r3, [pc, #240]	@ (800a950 <USART_SetConfig+0x360>)
 800a85e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a860:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a864:	2b28      	cmp	r3, #40	@ 0x28
 800a866:	d87b      	bhi.n	800a960 <USART_SetConfig+0x370>
 800a868:	a201      	add	r2, pc, #4	@ (adr r2, 800a870 <USART_SetConfig+0x280>)
 800a86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86e:	bf00      	nop
 800a870:	0800a915 	.word	0x0800a915
 800a874:	0800a961 	.word	0x0800a961
 800a878:	0800a961 	.word	0x0800a961
 800a87c:	0800a961 	.word	0x0800a961
 800a880:	0800a961 	.word	0x0800a961
 800a884:	0800a961 	.word	0x0800a961
 800a888:	0800a961 	.word	0x0800a961
 800a88c:	0800a961 	.word	0x0800a961
 800a890:	0800a91d 	.word	0x0800a91d
 800a894:	0800a961 	.word	0x0800a961
 800a898:	0800a961 	.word	0x0800a961
 800a89c:	0800a961 	.word	0x0800a961
 800a8a0:	0800a961 	.word	0x0800a961
 800a8a4:	0800a961 	.word	0x0800a961
 800a8a8:	0800a961 	.word	0x0800a961
 800a8ac:	0800a961 	.word	0x0800a961
 800a8b0:	0800a925 	.word	0x0800a925
 800a8b4:	0800a961 	.word	0x0800a961
 800a8b8:	0800a961 	.word	0x0800a961
 800a8bc:	0800a961 	.word	0x0800a961
 800a8c0:	0800a961 	.word	0x0800a961
 800a8c4:	0800a961 	.word	0x0800a961
 800a8c8:	0800a961 	.word	0x0800a961
 800a8cc:	0800a961 	.word	0x0800a961
 800a8d0:	0800a92d 	.word	0x0800a92d
 800a8d4:	0800a961 	.word	0x0800a961
 800a8d8:	0800a961 	.word	0x0800a961
 800a8dc:	0800a961 	.word	0x0800a961
 800a8e0:	0800a961 	.word	0x0800a961
 800a8e4:	0800a961 	.word	0x0800a961
 800a8e8:	0800a961 	.word	0x0800a961
 800a8ec:	0800a961 	.word	0x0800a961
 800a8f0:	0800a935 	.word	0x0800a935
 800a8f4:	0800a961 	.word	0x0800a961
 800a8f8:	0800a961 	.word	0x0800a961
 800a8fc:	0800a961 	.word	0x0800a961
 800a900:	0800a961 	.word	0x0800a961
 800a904:	0800a961 	.word	0x0800a961
 800a908:	0800a961 	.word	0x0800a961
 800a90c:	0800a961 	.word	0x0800a961
 800a910:	0800a93d 	.word	0x0800a93d
 800a914:	2301      	movs	r3, #1
 800a916:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a91a:	e0a4      	b.n	800aa66 <USART_SetConfig+0x476>
 800a91c:	2302      	movs	r3, #2
 800a91e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a922:	e0a0      	b.n	800aa66 <USART_SetConfig+0x476>
 800a924:	2304      	movs	r3, #4
 800a926:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a92a:	e09c      	b.n	800aa66 <USART_SetConfig+0x476>
 800a92c:	2308      	movs	r3, #8
 800a92e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a932:	e098      	b.n	800aa66 <USART_SetConfig+0x476>
 800a934:	2310      	movs	r3, #16
 800a936:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a93a:	e094      	b.n	800aa66 <USART_SetConfig+0x476>
 800a93c:	2320      	movs	r3, #32
 800a93e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a942:	e090      	b.n	800aa66 <USART_SetConfig+0x476>
 800a944:	cfff69f3 	.word	0xcfff69f3
 800a948:	ffffc0f6 	.word	0xffffc0f6
 800a94c:	40011000 	.word	0x40011000
 800a950:	58024400 	.word	0x58024400
 800a954:	40004400 	.word	0x40004400
 800a958:	40004800 	.word	0x40004800
 800a95c:	40011400 	.word	0x40011400
 800a960:	2340      	movs	r3, #64	@ 0x40
 800a962:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a966:	e07e      	b.n	800aa66 <USART_SetConfig+0x476>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4ab5      	ldr	r2, [pc, #724]	@ (800ac44 <USART_SetConfig+0x654>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d176      	bne.n	800aa60 <USART_SetConfig+0x470>
 800a972:	4bb5      	ldr	r3, [pc, #724]	@ (800ac48 <USART_SetConfig+0x658>)
 800a974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a97a:	2b28      	cmp	r3, #40	@ 0x28
 800a97c:	d86c      	bhi.n	800aa58 <USART_SetConfig+0x468>
 800a97e:	a201      	add	r2, pc, #4	@ (adr r2, 800a984 <USART_SetConfig+0x394>)
 800a980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a984:	0800aa29 	.word	0x0800aa29
 800a988:	0800aa59 	.word	0x0800aa59
 800a98c:	0800aa59 	.word	0x0800aa59
 800a990:	0800aa59 	.word	0x0800aa59
 800a994:	0800aa59 	.word	0x0800aa59
 800a998:	0800aa59 	.word	0x0800aa59
 800a99c:	0800aa59 	.word	0x0800aa59
 800a9a0:	0800aa59 	.word	0x0800aa59
 800a9a4:	0800aa31 	.word	0x0800aa31
 800a9a8:	0800aa59 	.word	0x0800aa59
 800a9ac:	0800aa59 	.word	0x0800aa59
 800a9b0:	0800aa59 	.word	0x0800aa59
 800a9b4:	0800aa59 	.word	0x0800aa59
 800a9b8:	0800aa59 	.word	0x0800aa59
 800a9bc:	0800aa59 	.word	0x0800aa59
 800a9c0:	0800aa59 	.word	0x0800aa59
 800a9c4:	0800aa39 	.word	0x0800aa39
 800a9c8:	0800aa59 	.word	0x0800aa59
 800a9cc:	0800aa59 	.word	0x0800aa59
 800a9d0:	0800aa59 	.word	0x0800aa59
 800a9d4:	0800aa59 	.word	0x0800aa59
 800a9d8:	0800aa59 	.word	0x0800aa59
 800a9dc:	0800aa59 	.word	0x0800aa59
 800a9e0:	0800aa59 	.word	0x0800aa59
 800a9e4:	0800aa41 	.word	0x0800aa41
 800a9e8:	0800aa59 	.word	0x0800aa59
 800a9ec:	0800aa59 	.word	0x0800aa59
 800a9f0:	0800aa59 	.word	0x0800aa59
 800a9f4:	0800aa59 	.word	0x0800aa59
 800a9f8:	0800aa59 	.word	0x0800aa59
 800a9fc:	0800aa59 	.word	0x0800aa59
 800aa00:	0800aa59 	.word	0x0800aa59
 800aa04:	0800aa49 	.word	0x0800aa49
 800aa08:	0800aa59 	.word	0x0800aa59
 800aa0c:	0800aa59 	.word	0x0800aa59
 800aa10:	0800aa59 	.word	0x0800aa59
 800aa14:	0800aa59 	.word	0x0800aa59
 800aa18:	0800aa59 	.word	0x0800aa59
 800aa1c:	0800aa59 	.word	0x0800aa59
 800aa20:	0800aa59 	.word	0x0800aa59
 800aa24:	0800aa51 	.word	0x0800aa51
 800aa28:	2301      	movs	r3, #1
 800aa2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aa2e:	e01a      	b.n	800aa66 <USART_SetConfig+0x476>
 800aa30:	2302      	movs	r3, #2
 800aa32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aa36:	e016      	b.n	800aa66 <USART_SetConfig+0x476>
 800aa38:	2304      	movs	r3, #4
 800aa3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aa3e:	e012      	b.n	800aa66 <USART_SetConfig+0x476>
 800aa40:	2308      	movs	r3, #8
 800aa42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aa46:	e00e      	b.n	800aa66 <USART_SetConfig+0x476>
 800aa48:	2310      	movs	r3, #16
 800aa4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aa4e:	e00a      	b.n	800aa66 <USART_SetConfig+0x476>
 800aa50:	2320      	movs	r3, #32
 800aa52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aa56:	e006      	b.n	800aa66 <USART_SetConfig+0x476>
 800aa58:	2340      	movs	r3, #64	@ 0x40
 800aa5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aa5e:	e002      	b.n	800aa66 <USART_SetConfig+0x476>
 800aa60:	2340      	movs	r3, #64	@ 0x40
 800aa62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800aa66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	f200 832f 	bhi.w	800b0ce <USART_SetConfig+0xade>
 800aa70:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <USART_SetConfig+0x488>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aafd 	.word	0x0800aafd
 800aa7c:	0800abb3 	.word	0x0800abb3
 800aa80:	0800ac73 	.word	0x0800ac73
 800aa84:	0800b0cf 	.word	0x0800b0cf
 800aa88:	0800ad2d 	.word	0x0800ad2d
 800aa8c:	0800b0cf 	.word	0x0800b0cf
 800aa90:	0800b0cf 	.word	0x0800b0cf
 800aa94:	0800b0cf 	.word	0x0800b0cf
 800aa98:	0800ade7 	.word	0x0800ade7
 800aa9c:	0800b0cf 	.word	0x0800b0cf
 800aaa0:	0800b0cf 	.word	0x0800b0cf
 800aaa4:	0800b0cf 	.word	0x0800b0cf
 800aaa8:	0800b0cf 	.word	0x0800b0cf
 800aaac:	0800b0cf 	.word	0x0800b0cf
 800aab0:	0800b0cf 	.word	0x0800b0cf
 800aab4:	0800b0cf 	.word	0x0800b0cf
 800aab8:	0800af5f 	.word	0x0800af5f
 800aabc:	0800b0cf 	.word	0x0800b0cf
 800aac0:	0800b0cf 	.word	0x0800b0cf
 800aac4:	0800b0cf 	.word	0x0800b0cf
 800aac8:	0800b0cf 	.word	0x0800b0cf
 800aacc:	0800b0cf 	.word	0x0800b0cf
 800aad0:	0800b0cf 	.word	0x0800b0cf
 800aad4:	0800b0cf 	.word	0x0800b0cf
 800aad8:	0800b0cf 	.word	0x0800b0cf
 800aadc:	0800b0cf 	.word	0x0800b0cf
 800aae0:	0800b0cf 	.word	0x0800b0cf
 800aae4:	0800b0cf 	.word	0x0800b0cf
 800aae8:	0800b0cf 	.word	0x0800b0cf
 800aaec:	0800b0cf 	.word	0x0800b0cf
 800aaf0:	0800b0cf 	.word	0x0800b0cf
 800aaf4:	0800b0cf 	.word	0x0800b0cf
 800aaf8:	0800b01d 	.word	0x0800b01d
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800aafc:	f7f9 ff34 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 800ab00:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d044      	beq.n	800ab94 <USART_SetConfig+0x5a4>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d03e      	beq.n	800ab90 <USART_SetConfig+0x5a0>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d038      	beq.n	800ab8c <USART_SetConfig+0x59c>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d032      	beq.n	800ab88 <USART_SetConfig+0x598>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	2b04      	cmp	r3, #4
 800ab28:	d02c      	beq.n	800ab84 <USART_SetConfig+0x594>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2e:	2b05      	cmp	r3, #5
 800ab30:	d026      	beq.n	800ab80 <USART_SetConfig+0x590>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab36:	2b06      	cmp	r3, #6
 800ab38:	d020      	beq.n	800ab7c <USART_SetConfig+0x58c>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3e:	2b07      	cmp	r3, #7
 800ab40:	d01a      	beq.n	800ab78 <USART_SetConfig+0x588>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab46:	2b08      	cmp	r3, #8
 800ab48:	d014      	beq.n	800ab74 <USART_SetConfig+0x584>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4e:	2b09      	cmp	r3, #9
 800ab50:	d00e      	beq.n	800ab70 <USART_SetConfig+0x580>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab56:	2b0a      	cmp	r3, #10
 800ab58:	d008      	beq.n	800ab6c <USART_SetConfig+0x57c>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5e:	2b0b      	cmp	r3, #11
 800ab60:	d102      	bne.n	800ab68 <USART_SetConfig+0x578>
 800ab62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab66:	e016      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e014      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab6c:	2380      	movs	r3, #128	@ 0x80
 800ab6e:	e012      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab70:	2340      	movs	r3, #64	@ 0x40
 800ab72:	e010      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab74:	2320      	movs	r3, #32
 800ab76:	e00e      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab78:	2310      	movs	r3, #16
 800ab7a:	e00c      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab7c:	230c      	movs	r3, #12
 800ab7e:	e00a      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab80:	230a      	movs	r3, #10
 800ab82:	e008      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab84:	2308      	movs	r3, #8
 800ab86:	e006      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab88:	2306      	movs	r3, #6
 800ab8a:	e004      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	e002      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab90:	2302      	movs	r3, #2
 800ab92:	e000      	b.n	800ab96 <USART_SetConfig+0x5a6>
 800ab94:	2301      	movs	r3, #1
 800ab96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab9c:	005a      	lsls	r2, r3, #1
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	085b      	lsrs	r3, r3, #1
 800aba4:	441a      	add	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800abae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800abb0:	e291      	b.n	800b0d6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800abb2:	f7f9 feef 	bl	8004994 <HAL_RCC_GetPCLK2Freq>
 800abb6:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d049      	beq.n	800ac54 <USART_SetConfig+0x664>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d043      	beq.n	800ac50 <USART_SetConfig+0x660>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d03d      	beq.n	800ac4c <USART_SetConfig+0x65c>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d032      	beq.n	800ac3e <USART_SetConfig+0x64e>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abdc:	2b04      	cmp	r3, #4
 800abde:	d02c      	beq.n	800ac3a <USART_SetConfig+0x64a>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe4:	2b05      	cmp	r3, #5
 800abe6:	d026      	beq.n	800ac36 <USART_SetConfig+0x646>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abec:	2b06      	cmp	r3, #6
 800abee:	d020      	beq.n	800ac32 <USART_SetConfig+0x642>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abf4:	2b07      	cmp	r3, #7
 800abf6:	d01a      	beq.n	800ac2e <USART_SetConfig+0x63e>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abfc:	2b08      	cmp	r3, #8
 800abfe:	d014      	beq.n	800ac2a <USART_SetConfig+0x63a>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac04:	2b09      	cmp	r3, #9
 800ac06:	d00e      	beq.n	800ac26 <USART_SetConfig+0x636>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0c:	2b0a      	cmp	r3, #10
 800ac0e:	d008      	beq.n	800ac22 <USART_SetConfig+0x632>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac14:	2b0b      	cmp	r3, #11
 800ac16:	d102      	bne.n	800ac1e <USART_SetConfig+0x62e>
 800ac18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac1c:	e01b      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e019      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac22:	2380      	movs	r3, #128	@ 0x80
 800ac24:	e017      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac26:	2340      	movs	r3, #64	@ 0x40
 800ac28:	e015      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac2a:	2320      	movs	r3, #32
 800ac2c:	e013      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac2e:	2310      	movs	r3, #16
 800ac30:	e011      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac32:	230c      	movs	r3, #12
 800ac34:	e00f      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac36:	230a      	movs	r3, #10
 800ac38:	e00d      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac3a:	2308      	movs	r3, #8
 800ac3c:	e00b      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac3e:	2306      	movs	r3, #6
 800ac40:	e009      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac42:	bf00      	nop
 800ac44:	40011c00 	.word	0x40011c00
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	e002      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac50:	2302      	movs	r3, #2
 800ac52:	e000      	b.n	800ac56 <USART_SetConfig+0x666>
 800ac54:	2301      	movs	r3, #1
 800ac56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac5c:	005a      	lsls	r2, r3, #1
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	085b      	lsrs	r3, r3, #1
 800ac64:	441a      	add	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ac70:	e231      	b.n	800b0d6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac72:	f107 0318 	add.w	r3, r7, #24
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fb fd4e 	bl	8006718 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d044      	beq.n	800ad10 <USART_SetConfig+0x720>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d03e      	beq.n	800ad0c <USART_SetConfig+0x71c>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d038      	beq.n	800ad08 <USART_SetConfig+0x718>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d032      	beq.n	800ad04 <USART_SetConfig+0x714>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca2:	2b04      	cmp	r3, #4
 800aca4:	d02c      	beq.n	800ad00 <USART_SetConfig+0x710>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acaa:	2b05      	cmp	r3, #5
 800acac:	d026      	beq.n	800acfc <USART_SetConfig+0x70c>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb2:	2b06      	cmp	r3, #6
 800acb4:	d020      	beq.n	800acf8 <USART_SetConfig+0x708>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acba:	2b07      	cmp	r3, #7
 800acbc:	d01a      	beq.n	800acf4 <USART_SetConfig+0x704>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc2:	2b08      	cmp	r3, #8
 800acc4:	d014      	beq.n	800acf0 <USART_SetConfig+0x700>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acca:	2b09      	cmp	r3, #9
 800accc:	d00e      	beq.n	800acec <USART_SetConfig+0x6fc>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd2:	2b0a      	cmp	r3, #10
 800acd4:	d008      	beq.n	800ace8 <USART_SetConfig+0x6f8>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	2b0b      	cmp	r3, #11
 800acdc:	d102      	bne.n	800ace4 <USART_SetConfig+0x6f4>
 800acde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ace2:	e016      	b.n	800ad12 <USART_SetConfig+0x722>
 800ace4:	2301      	movs	r3, #1
 800ace6:	e014      	b.n	800ad12 <USART_SetConfig+0x722>
 800ace8:	2380      	movs	r3, #128	@ 0x80
 800acea:	e012      	b.n	800ad12 <USART_SetConfig+0x722>
 800acec:	2340      	movs	r3, #64	@ 0x40
 800acee:	e010      	b.n	800ad12 <USART_SetConfig+0x722>
 800acf0:	2320      	movs	r3, #32
 800acf2:	e00e      	b.n	800ad12 <USART_SetConfig+0x722>
 800acf4:	2310      	movs	r3, #16
 800acf6:	e00c      	b.n	800ad12 <USART_SetConfig+0x722>
 800acf8:	230c      	movs	r3, #12
 800acfa:	e00a      	b.n	800ad12 <USART_SetConfig+0x722>
 800acfc:	230a      	movs	r3, #10
 800acfe:	e008      	b.n	800ad12 <USART_SetConfig+0x722>
 800ad00:	2308      	movs	r3, #8
 800ad02:	e006      	b.n	800ad12 <USART_SetConfig+0x722>
 800ad04:	2306      	movs	r3, #6
 800ad06:	e004      	b.n	800ad12 <USART_SetConfig+0x722>
 800ad08:	2304      	movs	r3, #4
 800ad0a:	e002      	b.n	800ad12 <USART_SetConfig+0x722>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	e000      	b.n	800ad12 <USART_SetConfig+0x722>
 800ad10:	2301      	movs	r3, #1
 800ad12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad16:	005a      	lsls	r2, r3, #1
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	085b      	lsrs	r3, r3, #1
 800ad1e:	441a      	add	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad28:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800ad2a:	e1d4      	b.n	800b0d6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad2c:	f107 030c 	add.w	r3, r7, #12
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fb fe45 	bl	80069c0 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d044      	beq.n	800adca <USART_SetConfig+0x7da>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d03e      	beq.n	800adc6 <USART_SetConfig+0x7d6>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d038      	beq.n	800adc2 <USART_SetConfig+0x7d2>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d032      	beq.n	800adbe <USART_SetConfig+0x7ce>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d02c      	beq.n	800adba <USART_SetConfig+0x7ca>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad64:	2b05      	cmp	r3, #5
 800ad66:	d026      	beq.n	800adb6 <USART_SetConfig+0x7c6>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad6c:	2b06      	cmp	r3, #6
 800ad6e:	d020      	beq.n	800adb2 <USART_SetConfig+0x7c2>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad74:	2b07      	cmp	r3, #7
 800ad76:	d01a      	beq.n	800adae <USART_SetConfig+0x7be>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7c:	2b08      	cmp	r3, #8
 800ad7e:	d014      	beq.n	800adaa <USART_SetConfig+0x7ba>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad84:	2b09      	cmp	r3, #9
 800ad86:	d00e      	beq.n	800ada6 <USART_SetConfig+0x7b6>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8c:	2b0a      	cmp	r3, #10
 800ad8e:	d008      	beq.n	800ada2 <USART_SetConfig+0x7b2>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad94:	2b0b      	cmp	r3, #11
 800ad96:	d102      	bne.n	800ad9e <USART_SetConfig+0x7ae>
 800ad98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad9c:	e016      	b.n	800adcc <USART_SetConfig+0x7dc>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e014      	b.n	800adcc <USART_SetConfig+0x7dc>
 800ada2:	2380      	movs	r3, #128	@ 0x80
 800ada4:	e012      	b.n	800adcc <USART_SetConfig+0x7dc>
 800ada6:	2340      	movs	r3, #64	@ 0x40
 800ada8:	e010      	b.n	800adcc <USART_SetConfig+0x7dc>
 800adaa:	2320      	movs	r3, #32
 800adac:	e00e      	b.n	800adcc <USART_SetConfig+0x7dc>
 800adae:	2310      	movs	r3, #16
 800adb0:	e00c      	b.n	800adcc <USART_SetConfig+0x7dc>
 800adb2:	230c      	movs	r3, #12
 800adb4:	e00a      	b.n	800adcc <USART_SetConfig+0x7dc>
 800adb6:	230a      	movs	r3, #10
 800adb8:	e008      	b.n	800adcc <USART_SetConfig+0x7dc>
 800adba:	2308      	movs	r3, #8
 800adbc:	e006      	b.n	800adcc <USART_SetConfig+0x7dc>
 800adbe:	2306      	movs	r3, #6
 800adc0:	e004      	b.n	800adcc <USART_SetConfig+0x7dc>
 800adc2:	2304      	movs	r3, #4
 800adc4:	e002      	b.n	800adcc <USART_SetConfig+0x7dc>
 800adc6:	2302      	movs	r3, #2
 800adc8:	e000      	b.n	800adcc <USART_SetConfig+0x7dc>
 800adca:	2301      	movs	r3, #1
 800adcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800add0:	005a      	lsls	r2, r3, #1
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	085b      	lsrs	r3, r3, #1
 800add8:	441a      	add	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade2:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800ade4:	e177      	b.n	800b0d6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ade6:	4b8a      	ldr	r3, [pc, #552]	@ (800b010 <USART_SetConfig+0xa20>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0320 	and.w	r3, r3, #32
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d05d      	beq.n	800aeae <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800adf2:	4b87      	ldr	r3, [pc, #540]	@ (800b010 <USART_SetConfig+0xa20>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	08db      	lsrs	r3, r3, #3
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	4a85      	ldr	r2, [pc, #532]	@ (800b014 <USART_SetConfig+0xa24>)
 800adfe:	40da      	lsrs	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d044      	beq.n	800ae92 <USART_SetConfig+0x8a2>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d03e      	beq.n	800ae8e <USART_SetConfig+0x89e>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d038      	beq.n	800ae8a <USART_SetConfig+0x89a>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d032      	beq.n	800ae86 <USART_SetConfig+0x896>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d02c      	beq.n	800ae82 <USART_SetConfig+0x892>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2c:	2b05      	cmp	r3, #5
 800ae2e:	d026      	beq.n	800ae7e <USART_SetConfig+0x88e>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae34:	2b06      	cmp	r3, #6
 800ae36:	d020      	beq.n	800ae7a <USART_SetConfig+0x88a>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae3c:	2b07      	cmp	r3, #7
 800ae3e:	d01a      	beq.n	800ae76 <USART_SetConfig+0x886>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae44:	2b08      	cmp	r3, #8
 800ae46:	d014      	beq.n	800ae72 <USART_SetConfig+0x882>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4c:	2b09      	cmp	r3, #9
 800ae4e:	d00e      	beq.n	800ae6e <USART_SetConfig+0x87e>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae54:	2b0a      	cmp	r3, #10
 800ae56:	d008      	beq.n	800ae6a <USART_SetConfig+0x87a>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae5c:	2b0b      	cmp	r3, #11
 800ae5e:	d102      	bne.n	800ae66 <USART_SetConfig+0x876>
 800ae60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae64:	e016      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e014      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae6a:	2380      	movs	r3, #128	@ 0x80
 800ae6c:	e012      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae6e:	2340      	movs	r3, #64	@ 0x40
 800ae70:	e010      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae72:	2320      	movs	r3, #32
 800ae74:	e00e      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae76:	2310      	movs	r3, #16
 800ae78:	e00c      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae7a:	230c      	movs	r3, #12
 800ae7c:	e00a      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae7e:	230a      	movs	r3, #10
 800ae80:	e008      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae82:	2308      	movs	r3, #8
 800ae84:	e006      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae86:	2306      	movs	r3, #6
 800ae88:	e004      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae8a:	2304      	movs	r3, #4
 800ae8c:	e002      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e000      	b.n	800ae94 <USART_SetConfig+0x8a4>
 800ae92:	2301      	movs	r3, #1
 800ae94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae98:	005a      	lsls	r2, r3, #1
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	085b      	lsrs	r3, r3, #1
 800aea0:	441a      	add	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeaa:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800aeac:	e113      	b.n	800b0d6 <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d044      	beq.n	800af40 <USART_SetConfig+0x950>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d03e      	beq.n	800af3c <USART_SetConfig+0x94c>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d038      	beq.n	800af38 <USART_SetConfig+0x948>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	d032      	beq.n	800af34 <USART_SetConfig+0x944>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d02c      	beq.n	800af30 <USART_SetConfig+0x940>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeda:	2b05      	cmp	r3, #5
 800aedc:	d026      	beq.n	800af2c <USART_SetConfig+0x93c>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee2:	2b06      	cmp	r3, #6
 800aee4:	d020      	beq.n	800af28 <USART_SetConfig+0x938>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeea:	2b07      	cmp	r3, #7
 800aeec:	d01a      	beq.n	800af24 <USART_SetConfig+0x934>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef2:	2b08      	cmp	r3, #8
 800aef4:	d014      	beq.n	800af20 <USART_SetConfig+0x930>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aefa:	2b09      	cmp	r3, #9
 800aefc:	d00e      	beq.n	800af1c <USART_SetConfig+0x92c>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af02:	2b0a      	cmp	r3, #10
 800af04:	d008      	beq.n	800af18 <USART_SetConfig+0x928>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0a:	2b0b      	cmp	r3, #11
 800af0c:	d102      	bne.n	800af14 <USART_SetConfig+0x924>
 800af0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af12:	e016      	b.n	800af42 <USART_SetConfig+0x952>
 800af14:	2301      	movs	r3, #1
 800af16:	e014      	b.n	800af42 <USART_SetConfig+0x952>
 800af18:	2380      	movs	r3, #128	@ 0x80
 800af1a:	e012      	b.n	800af42 <USART_SetConfig+0x952>
 800af1c:	2340      	movs	r3, #64	@ 0x40
 800af1e:	e010      	b.n	800af42 <USART_SetConfig+0x952>
 800af20:	2320      	movs	r3, #32
 800af22:	e00e      	b.n	800af42 <USART_SetConfig+0x952>
 800af24:	2310      	movs	r3, #16
 800af26:	e00c      	b.n	800af42 <USART_SetConfig+0x952>
 800af28:	230c      	movs	r3, #12
 800af2a:	e00a      	b.n	800af42 <USART_SetConfig+0x952>
 800af2c:	230a      	movs	r3, #10
 800af2e:	e008      	b.n	800af42 <USART_SetConfig+0x952>
 800af30:	2308      	movs	r3, #8
 800af32:	e006      	b.n	800af42 <USART_SetConfig+0x952>
 800af34:	2306      	movs	r3, #6
 800af36:	e004      	b.n	800af42 <USART_SetConfig+0x952>
 800af38:	2304      	movs	r3, #4
 800af3a:	e002      	b.n	800af42 <USART_SetConfig+0x952>
 800af3c:	2302      	movs	r3, #2
 800af3e:	e000      	b.n	800af42 <USART_SetConfig+0x952>
 800af40:	2301      	movs	r3, #1
 800af42:	4a34      	ldr	r2, [pc, #208]	@ (800b014 <USART_SetConfig+0xa24>)
 800af44:	fbb2 f3f3 	udiv	r3, r2, r3
 800af48:	005a      	lsls	r2, r3, #1
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	085b      	lsrs	r3, r3, #1
 800af50:	441a      	add	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	fbb2 f3f3 	udiv	r3, r2, r3
 800af5a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800af5c:	e0bb      	b.n	800b0d6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af62:	2b00      	cmp	r3, #0
 800af64:	d044      	beq.n	800aff0 <USART_SetConfig+0xa00>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d03e      	beq.n	800afec <USART_SetConfig+0x9fc>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af72:	2b02      	cmp	r3, #2
 800af74:	d038      	beq.n	800afe8 <USART_SetConfig+0x9f8>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d032      	beq.n	800afe4 <USART_SetConfig+0x9f4>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af82:	2b04      	cmp	r3, #4
 800af84:	d02c      	beq.n	800afe0 <USART_SetConfig+0x9f0>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8a:	2b05      	cmp	r3, #5
 800af8c:	d026      	beq.n	800afdc <USART_SetConfig+0x9ec>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af92:	2b06      	cmp	r3, #6
 800af94:	d020      	beq.n	800afd8 <USART_SetConfig+0x9e8>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9a:	2b07      	cmp	r3, #7
 800af9c:	d01a      	beq.n	800afd4 <USART_SetConfig+0x9e4>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa2:	2b08      	cmp	r3, #8
 800afa4:	d014      	beq.n	800afd0 <USART_SetConfig+0x9e0>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afaa:	2b09      	cmp	r3, #9
 800afac:	d00e      	beq.n	800afcc <USART_SetConfig+0x9dc>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb2:	2b0a      	cmp	r3, #10
 800afb4:	d008      	beq.n	800afc8 <USART_SetConfig+0x9d8>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afba:	2b0b      	cmp	r3, #11
 800afbc:	d102      	bne.n	800afc4 <USART_SetConfig+0x9d4>
 800afbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afc2:	e016      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afc4:	2301      	movs	r3, #1
 800afc6:	e014      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afc8:	2380      	movs	r3, #128	@ 0x80
 800afca:	e012      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afcc:	2340      	movs	r3, #64	@ 0x40
 800afce:	e010      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afd0:	2320      	movs	r3, #32
 800afd2:	e00e      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afd4:	2310      	movs	r3, #16
 800afd6:	e00c      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afd8:	230c      	movs	r3, #12
 800afda:	e00a      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afdc:	230a      	movs	r3, #10
 800afde:	e008      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afe0:	2308      	movs	r3, #8
 800afe2:	e006      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afe4:	2306      	movs	r3, #6
 800afe6:	e004      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afe8:	2304      	movs	r3, #4
 800afea:	e002      	b.n	800aff2 <USART_SetConfig+0xa02>
 800afec:	2302      	movs	r3, #2
 800afee:	e000      	b.n	800aff2 <USART_SetConfig+0xa02>
 800aff0:	2301      	movs	r3, #1
 800aff2:	4a09      	ldr	r2, [pc, #36]	@ (800b018 <USART_SetConfig+0xa28>)
 800aff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff8:	005a      	lsls	r2, r3, #1
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	085b      	lsrs	r3, r3, #1
 800b000:	441a      	add	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800b00c:	e063      	b.n	800b0d6 <USART_SetConfig+0xae6>
 800b00e:	bf00      	nop
 800b010:	58024400 	.word	0x58024400
 800b014:	03d09000 	.word	0x03d09000
 800b018:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b020:	2b00      	cmp	r3, #0
 800b022:	d044      	beq.n	800b0ae <USART_SetConfig+0xabe>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d03e      	beq.n	800b0aa <USART_SetConfig+0xaba>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b030:	2b02      	cmp	r3, #2
 800b032:	d038      	beq.n	800b0a6 <USART_SetConfig+0xab6>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b038:	2b03      	cmp	r3, #3
 800b03a:	d032      	beq.n	800b0a2 <USART_SetConfig+0xab2>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b040:	2b04      	cmp	r3, #4
 800b042:	d02c      	beq.n	800b09e <USART_SetConfig+0xaae>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b048:	2b05      	cmp	r3, #5
 800b04a:	d026      	beq.n	800b09a <USART_SetConfig+0xaaa>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b050:	2b06      	cmp	r3, #6
 800b052:	d020      	beq.n	800b096 <USART_SetConfig+0xaa6>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b058:	2b07      	cmp	r3, #7
 800b05a:	d01a      	beq.n	800b092 <USART_SetConfig+0xaa2>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b060:	2b08      	cmp	r3, #8
 800b062:	d014      	beq.n	800b08e <USART_SetConfig+0xa9e>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b068:	2b09      	cmp	r3, #9
 800b06a:	d00e      	beq.n	800b08a <USART_SetConfig+0xa9a>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b070:	2b0a      	cmp	r3, #10
 800b072:	d008      	beq.n	800b086 <USART_SetConfig+0xa96>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b078:	2b0b      	cmp	r3, #11
 800b07a:	d102      	bne.n	800b082 <USART_SetConfig+0xa92>
 800b07c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b080:	e016      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b082:	2301      	movs	r3, #1
 800b084:	e014      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b086:	2380      	movs	r3, #128	@ 0x80
 800b088:	e012      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b08a:	2340      	movs	r3, #64	@ 0x40
 800b08c:	e010      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b08e:	2320      	movs	r3, #32
 800b090:	e00e      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b092:	2310      	movs	r3, #16
 800b094:	e00c      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b096:	230c      	movs	r3, #12
 800b098:	e00a      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b09a:	230a      	movs	r3, #10
 800b09c:	e008      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b09e:	2308      	movs	r3, #8
 800b0a0:	e006      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b0a2:	2306      	movs	r3, #6
 800b0a4:	e004      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b0a6:	2304      	movs	r3, #4
 800b0a8:	e002      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	e000      	b.n	800b0b0 <USART_SetConfig+0xac0>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b8:	005a      	lsls	r2, r3, #1
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	085b      	lsrs	r3, r3, #1
 800b0c0:	441a      	add	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ca:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800b0cc:	e003      	b.n	800b0d6 <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800b0d4:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d8:	2b0f      	cmp	r3, #15
 800b0da:	d916      	bls.n	800b10a <USART_SetConfig+0xb1a>
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0e2:	d212      	bcs.n	800b10a <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	f023 030f 	bic.w	r3, r3, #15
 800b0ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f0:	085b      	lsrs	r3, r3, #1
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	f003 0307 	and.w	r3, r3, #7
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b106:	60da      	str	r2, [r3, #12]
 800b108:	e002      	b.n	800b110 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800b128:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3738      	adds	r7, #56	@ 0x38
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af02      	add	r7, sp, #8
 800b13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b142:	f7f6 fcb5 	bl	8001ab0 <HAL_GetTick>
 800b146:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0308 	and.w	r3, r3, #8
 800b152:	2b08      	cmp	r3, #8
 800b154:	d10e      	bne.n	800b174 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800b156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff fa0d 	bl	800a584 <USART_WaitOnFlagUntilTimeout>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b170:	2303      	movs	r3, #3
 800b172:	e01e      	b.n	800b1b2 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0304 	and.w	r3, r3, #4
 800b17e:	2b04      	cmp	r3, #4
 800b180:	d10e      	bne.n	800b1a0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800b182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7ff f9f7 	bl	800a584 <USART_WaitOnFlagUntilTimeout>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e008      	b.n	800b1b2 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d101      	bne.n	800b1d0 <HAL_USARTEx_EnableSlaveMode+0x16>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e043      	b.n	800b258 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2202      	movs	r2, #2
 800b1dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 0201 	bic.w	r2, r2, #1
 800b1f6:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	689a      	ldr	r2, [r3, #8]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b216:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f042 0201 	orr.w	r2, r2, #1
 800b226:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f042 0201 	orr.w	r2, r2, #1
 800b24c:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b274:	2b01      	cmp	r3, #1
 800b276:	d101      	bne.n	800b27c <HAL_USARTEx_ConfigNSS+0x18>
 800b278:	2302      	movs	r3, #2
 800b27a:	e02a      	b.n	800b2d2 <HAL_USARTEx_ConfigNSS+0x6e>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2202      	movs	r2, #2
 800b288:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f022 0201 	bic.w	r2, r2, #1
 800b2a2:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	f023 0108 	bic.w	r1, r3, #8
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d101      	bne.n	800b2f4 <HAL_USARTEx_DisableFifoMode+0x16>
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	e027      	b.n	800b344 <HAL_USARTEx_DisableFifoMode+0x66>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2202      	movs	r2, #2
 800b300:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0201 	bic.w	r2, r2, #1
 800b31a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b322:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b360:	2b01      	cmp	r3, #1
 800b362:	d101      	bne.n	800b368 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800b364:	2302      	movs	r3, #2
 800b366:	e02d      	b.n	800b3c4 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2202      	movs	r2, #2
 800b374:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f022 0201 	bic.w	r2, r2, #1
 800b38e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f84f 	bl	800b448 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d101      	bne.n	800b3e4 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	e02d      	b.n	800b440 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f022 0201 	bic.w	r2, r2, #1
 800b40a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	430a      	orrs	r2, r1
 800b41e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f811 	bl	800b448 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b454:	2b00      	cmp	r3, #0
 800b456:	d106      	bne.n	800b466 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b464:	e02f      	b.n	800b4c6 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b466:	2310      	movs	r3, #16
 800b468:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b46a:	2310      	movs	r3, #16
 800b46c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800b474:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800b476:	b2db      	uxtb	r3, r3
 800b478:	f003 0307 	and.w	r3, r3, #7
 800b47c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800b484:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800b486:	b2db      	uxtb	r3, r3
 800b488:	f003 0307 	and.w	r3, r3, #7
 800b48c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	7b3a      	ldrb	r2, [r7, #12]
 800b492:	4910      	ldr	r1, [pc, #64]	@ (800b4d4 <USARTEx_SetNbDataToProcess+0x8c>)
 800b494:	5c8a      	ldrb	r2, [r1, r2]
 800b496:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800b49a:	7b3a      	ldrb	r2, [r7, #12]
 800b49c:	490e      	ldr	r1, [pc, #56]	@ (800b4d8 <USARTEx_SetNbDataToProcess+0x90>)
 800b49e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
 800b4ac:	7b7a      	ldrb	r2, [r7, #13]
 800b4ae:	4909      	ldr	r1, [pc, #36]	@ (800b4d4 <USARTEx_SetNbDataToProcess+0x8c>)
 800b4b0:	5c8a      	ldrb	r2, [r1, r2]
 800b4b2:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800b4b6:	7b7a      	ldrb	r2, [r7, #13]
 800b4b8:	4907      	ldr	r1, [pc, #28]	@ (800b4d8 <USARTEx_SetNbDataToProcess+0x90>)
 800b4ba:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800b4c6:	bf00      	nop
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	08011648 	.word	0x08011648
 800b4d8:	08011650 	.word	0x08011650

0800b4dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b4dc:	b084      	sub	sp, #16
 800b4de:	b480      	push	{r7}
 800b4e0:	b085      	sub	sp, #20
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	f107 001c 	add.w	r0, r7, #28
 800b4ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b4f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b4f6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800b4fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800b4fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800b502:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	4313      	orrs	r3, r2
 800b508:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685a      	ldr	r2, [r3, #4]
 800b50e:	4b07      	ldr	r3, [pc, #28]	@ (800b52c <SDMMC_Init+0x50>)
 800b510:	4013      	ands	r3, r2
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	431a      	orrs	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	b004      	add	sp, #16
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	ffc02c00 	.word	0xffc02c00

0800b530 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b53e:	4618      	mov	r0, r3
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b083      	sub	sp, #12
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f043 0203 	orr.w	r2, r3, #3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 0303 	and.w	r3, r3, #3
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b5a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b5ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b5b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	68da      	ldr	r2, [r3, #12]
 800b5be:	4b06      	ldr	r3, [pc, #24]	@ (800b5d8 <SDMMC_SendCommand+0x50>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	fffee0c0 	.word	0xfffee0c0

0800b5dc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	b2db      	uxtb	r3, r3
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b085      	sub	sp, #20
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3314      	adds	r3, #20
 800b604:	461a      	mov	r2, r3
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	4413      	add	r3, r2
 800b60a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	685a      	ldr	r2, [r3, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b642:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b648:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b64e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	4313      	orrs	r3, r2
 800b654:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	431a      	orrs	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b666:	2300      	movs	r3, #0

}
 800b668:	4618      	mov	r0, r3
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b682:	2310      	movs	r3, #16
 800b684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b686:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b68a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b694:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b696:	f107 0308 	add.w	r3, r7, #8
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff ff73 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b6a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6a6:	2110      	movs	r1, #16
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f995 	bl	800b9d8 <SDMMC_GetCmdResp1>
 800b6ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6b0:	69fb      	ldr	r3, [r7, #28]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3720      	adds	r7, #32
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b088      	sub	sp, #32
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b6c8:	2307      	movs	r3, #7
 800b6ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6dc:	f107 0308 	add.w	r3, r7, #8
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff ff50 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b6e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ec:	2107      	movs	r1, #7
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f972 	bl	800b9d8 <SDMMC_GetCmdResp1>
 800b6f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3720      	adds	r7, #32
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b714:	2300      	movs	r3, #0
 800b716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b71c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b71e:	f107 0308 	add.w	r3, r7, #8
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7ff ff2f 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fb96 	bl	800be5c <SDMMC_GetCmdError>
 800b730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b732:	69fb      	ldr	r3, [r7, #28]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3720      	adds	r7, #32
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b744:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b74a:	2308      	movs	r3, #8
 800b74c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b74e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b754:	2300      	movs	r3, #0
 800b756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b75c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b75e:	f107 0308 	add.w	r3, r7, #8
 800b762:	4619      	mov	r1, r3
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff ff0f 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fb28 	bl	800bdc0 <SDMMC_GetCmdResp7>
 800b770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b772:	69fb      	ldr	r3, [r7, #28]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3720      	adds	r7, #32
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b088      	sub	sp, #32
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b78a:	2337      	movs	r3, #55	@ 0x37
 800b78c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b78e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b794:	2300      	movs	r3, #0
 800b796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b79c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b79e:	f107 0308 	add.w	r3, r7, #8
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff feef 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b7aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7ae:	2137      	movs	r1, #55	@ 0x37
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f911 	bl	800b9d8 <SDMMC_GetCmdResp1>
 800b7b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7b8:	69fb      	ldr	r3, [r7, #28]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3720      	adds	r7, #32
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b088      	sub	sp, #32
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b7d0:	2329      	movs	r3, #41	@ 0x29
 800b7d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7e4:	f107 0308 	add.w	r3, r7, #8
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7ff fecc 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fa2d 	bl	800bc50 <SDMMC_GetCmdResp3>
 800b7f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7f8:	69fb      	ldr	r3, [r7, #28]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3720      	adds	r7, #32
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b088      	sub	sp, #32
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b810:	2306      	movs	r3, #6
 800b812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b81a:	2300      	movs	r3, #0
 800b81c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b81e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b824:	f107 0308 	add.w	r3, r7, #8
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7ff feac 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b830:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b834:	2106      	movs	r1, #6
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f8ce 	bl	800b9d8 <SDMMC_GetCmdResp1>
 800b83c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b83e:	69fb      	ldr	r3, [r7, #28]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3720      	adds	r7, #32
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b088      	sub	sp, #32
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b850:	2300      	movs	r3, #0
 800b852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b854:	2333      	movs	r3, #51	@ 0x33
 800b856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b85e:	2300      	movs	r3, #0
 800b860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b868:	f107 0308 	add.w	r3, r7, #8
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fe8a 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b874:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b878:	2133      	movs	r1, #51	@ 0x33
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f8ac 	bl	800b9d8 <SDMMC_GetCmdResp1>
 800b880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b882:	69fb      	ldr	r3, [r7, #28]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b894:	2300      	movs	r3, #0
 800b896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b898:	2302      	movs	r3, #2
 800b89a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b89c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b8a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ac:	f107 0308 	add.w	r3, r7, #8
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff fe68 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f97f 	bl	800bbbc <SDMMC_GetCmdResp2>
 800b8be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8c0:	69fb      	ldr	r3, [r7, #28]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3720      	adds	r7, #32
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b088      	sub	sp, #32
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b8d8:	2309      	movs	r3, #9
 800b8da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b8dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b8e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b8ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ec:	f107 0308 	add.w	r3, r7, #8
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff fe48 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f95f 	bl	800bbbc <SDMMC_GetCmdResp2>
 800b8fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b900:	69fb      	ldr	r3, [r7, #28]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3720      	adds	r7, #32
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b088      	sub	sp, #32
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b918:	2303      	movs	r3, #3
 800b91a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b91c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b920:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b922:	2300      	movs	r3, #0
 800b924:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b926:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b92a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b92c:	f107 0308 	add.w	r3, r7, #8
 800b930:	4619      	mov	r1, r3
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7ff fe28 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	2103      	movs	r1, #3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f9c7 	bl	800bcd0 <SDMMC_GetCmdResp6>
 800b942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b944:	69fb      	ldr	r3, [r7, #28]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3720      	adds	r7, #32
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b088      	sub	sp, #32
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b95c:	230d      	movs	r3, #13
 800b95e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b966:	2300      	movs	r3, #0
 800b968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b96a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b96e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b970:	f107 0308 	add.w	r3, r7, #8
 800b974:	4619      	mov	r1, r3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff fe06 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b97c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b980:	210d      	movs	r1, #13
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f828 	bl	800b9d8 <SDMMC_GetCmdResp1>
 800b988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b98a:	69fb      	ldr	r3, [r7, #28]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b088      	sub	sp, #32
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b9a0:	230d      	movs	r3, #13
 800b9a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b9a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b9b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9b4:	f107 0308 	add.w	r3, r7, #8
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7ff fde4 	bl	800b588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b9c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9c4:	210d      	movs	r1, #13
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f806 	bl	800b9d8 <SDMMC_GetCmdResp1>
 800b9cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9ce:	69fb      	ldr	r3, [r7, #28]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3720      	adds	r7, #32
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9e6:	4b70      	ldr	r3, [pc, #448]	@ (800bba8 <SDMMC_GetCmdResp1+0x1d0>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a70      	ldr	r2, [pc, #448]	@ (800bbac <SDMMC_GetCmdResp1+0x1d4>)
 800b9ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f0:	0a5a      	lsrs	r2, r3, #9
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	fb02 f303 	mul.w	r3, r2, r3
 800b9f8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	1e5a      	subs	r2, r3, #1
 800b9fe:	61fa      	str	r2, [r7, #28]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d102      	bne.n	800ba0a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ba08:	e0c9      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba0e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ba10:	69ba      	ldr	r2, [r7, #24]
 800ba12:	4b67      	ldr	r3, [pc, #412]	@ (800bbb0 <SDMMC_GetCmdResp1+0x1d8>)
 800ba14:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0ef      	beq.n	800b9fa <SDMMC_GetCmdResp1+0x22>
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1ea      	bne.n	800b9fa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba28:	f003 0304 	and.w	r3, r3, #4
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d004      	beq.n	800ba3a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2204      	movs	r2, #4
 800ba34:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba36:	2304      	movs	r3, #4
 800ba38:	e0b1      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d004      	beq.n	800ba50 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e0a6      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4a58      	ldr	r2, [pc, #352]	@ (800bbb4 <SDMMC_GetCmdResp1+0x1dc>)
 800ba54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7ff fdc0 	bl	800b5dc <SDMMC_GetCommandResponse>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461a      	mov	r2, r3
 800ba60:	7afb      	ldrb	r3, [r7, #11]
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d001      	beq.n	800ba6a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e099      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f7ff fdc2 	bl	800b5f6 <SDMMC_GetResponse>
 800ba72:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba74:	697a      	ldr	r2, [r7, #20]
 800ba76:	4b50      	ldr	r3, [pc, #320]	@ (800bbb8 <SDMMC_GetCmdResp1+0x1e0>)
 800ba78:	4013      	ands	r3, r2
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d101      	bne.n	800ba82 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e08d      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	da02      	bge.n	800ba8e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ba88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ba8c:	e087      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba98:	2340      	movs	r3, #64	@ 0x40
 800ba9a:	e080      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800baa6:	2380      	movs	r3, #128	@ 0x80
 800baa8:	e079      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bab4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bab8:	e071      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bac4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bac8:	e069      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bad8:	e061      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bae4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bae8:	e059      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800baf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800baf8:	e051      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d002      	beq.n	800bb0a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bb08:	e049      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bb18:	e041      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bb24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb28:	e039      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800bb38:	e031      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800bb48:	e029      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb54:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bb58:	e021      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bb68:	e019      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800bb78:	e011      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bb84:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bb88:	e009      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f003 0308 	and.w	r3, r3, #8
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bb94:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800bb98:	e001      	b.n	800bb9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	24000000 	.word	0x24000000
 800bbac:	10624dd3 	.word	0x10624dd3
 800bbb0:	00200045 	.word	0x00200045
 800bbb4:	002000c5 	.word	0x002000c5
 800bbb8:	fdffe008 	.word	0xfdffe008

0800bbbc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bbc4:	4b1f      	ldr	r3, [pc, #124]	@ (800bc44 <SDMMC_GetCmdResp2+0x88>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a1f      	ldr	r2, [pc, #124]	@ (800bc48 <SDMMC_GetCmdResp2+0x8c>)
 800bbca:	fba2 2303 	umull	r2, r3, r2, r3
 800bbce:	0a5b      	lsrs	r3, r3, #9
 800bbd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbd4:	fb02 f303 	mul.w	r3, r2, r3
 800bbd8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	1e5a      	subs	r2, r3, #1
 800bbde:	60fa      	str	r2, [r7, #12]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d102      	bne.n	800bbea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbe4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbe8:	e026      	b.n	800bc38 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0ef      	beq.n	800bbda <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1ea      	bne.n	800bbda <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc08:	f003 0304 	and.w	r3, r3, #4
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d004      	beq.n	800bc1a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2204      	movs	r2, #4
 800bc14:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc16:	2304      	movs	r3, #4
 800bc18:	e00e      	b.n	800bc38 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d004      	beq.n	800bc30 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e003      	b.n	800bc38 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a06      	ldr	r2, [pc, #24]	@ (800bc4c <SDMMC_GetCmdResp2+0x90>)
 800bc34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	24000000 	.word	0x24000000
 800bc48:	10624dd3 	.word	0x10624dd3
 800bc4c:	002000c5 	.word	0x002000c5

0800bc50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc58:	4b1a      	ldr	r3, [pc, #104]	@ (800bcc4 <SDMMC_GetCmdResp3+0x74>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a1a      	ldr	r2, [pc, #104]	@ (800bcc8 <SDMMC_GetCmdResp3+0x78>)
 800bc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc62:	0a5b      	lsrs	r3, r3, #9
 800bc64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc68:	fb02 f303 	mul.w	r3, r2, r3
 800bc6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	1e5a      	subs	r2, r3, #1
 800bc72:	60fa      	str	r2, [r7, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bc7c:	e01b      	b.n	800bcb6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc82:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0ef      	beq.n	800bc6e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1ea      	bne.n	800bc6e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc9c:	f003 0304 	and.w	r3, r3, #4
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d004      	beq.n	800bcae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2204      	movs	r2, #4
 800bca8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcaa:	2304      	movs	r3, #4
 800bcac:	e003      	b.n	800bcb6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a06      	ldr	r2, [pc, #24]	@ (800bccc <SDMMC_GetCmdResp3+0x7c>)
 800bcb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	24000000 	.word	0x24000000
 800bcc8:	10624dd3 	.word	0x10624dd3
 800bccc:	002000c5 	.word	0x002000c5

0800bcd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcde:	4b35      	ldr	r3, [pc, #212]	@ (800bdb4 <SDMMC_GetCmdResp6+0xe4>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a35      	ldr	r2, [pc, #212]	@ (800bdb8 <SDMMC_GetCmdResp6+0xe8>)
 800bce4:	fba2 2303 	umull	r2, r3, r2, r3
 800bce8:	0a5b      	lsrs	r3, r3, #9
 800bcea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcee:	fb02 f303 	mul.w	r3, r2, r3
 800bcf2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	1e5a      	subs	r2, r3, #1
 800bcf8:	61fa      	str	r2, [r7, #28]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d102      	bne.n	800bd04 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcfe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd02:	e052      	b.n	800bdaa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd08:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d0ef      	beq.n	800bcf4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1ea      	bne.n	800bcf4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d004      	beq.n	800bd34 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2204      	movs	r2, #4
 800bd2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd30:	2304      	movs	r3, #4
 800bd32:	e03a      	b.n	800bdaa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d004      	beq.n	800bd4a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2201      	movs	r2, #1
 800bd44:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e02f      	b.n	800bdaa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7ff fc46 	bl	800b5dc <SDMMC_GetCommandResponse>
 800bd50:	4603      	mov	r3, r0
 800bd52:	461a      	mov	r2, r3
 800bd54:	7afb      	ldrb	r3, [r7, #11]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d001      	beq.n	800bd5e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e025      	b.n	800bdaa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	4a16      	ldr	r2, [pc, #88]	@ (800bdbc <SDMMC_GetCmdResp6+0xec>)
 800bd62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd64:	2100      	movs	r1, #0
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f7ff fc45 	bl	800b5f6 <SDMMC_GetResponse>
 800bd6c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d106      	bne.n	800bd86 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	0c1b      	lsrs	r3, r3, #16
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bd82:	2300      	movs	r3, #0
 800bd84:	e011      	b.n	800bdaa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d002      	beq.n	800bd96 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd94:	e009      	b.n	800bdaa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d002      	beq.n	800bda6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bda0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bda4:	e001      	b.n	800bdaa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bda6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3720      	adds	r7, #32
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	24000000 	.word	0x24000000
 800bdb8:	10624dd3 	.word	0x10624dd3
 800bdbc:	002000c5 	.word	0x002000c5

0800bdc0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bdc8:	4b22      	ldr	r3, [pc, #136]	@ (800be54 <SDMMC_GetCmdResp7+0x94>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a22      	ldr	r2, [pc, #136]	@ (800be58 <SDMMC_GetCmdResp7+0x98>)
 800bdce:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd2:	0a5b      	lsrs	r3, r3, #9
 800bdd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdd8:	fb02 f303 	mul.w	r3, r2, r3
 800bddc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	1e5a      	subs	r2, r3, #1
 800bde2:	60fa      	str	r2, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d102      	bne.n	800bdee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bde8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bdec:	e02c      	b.n	800be48 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdf2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0ef      	beq.n	800bdde <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1ea      	bne.n	800bdde <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be0c:	f003 0304 	and.w	r3, r3, #4
 800be10:	2b00      	cmp	r3, #0
 800be12:	d004      	beq.n	800be1e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2204      	movs	r2, #4
 800be18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be1a:	2304      	movs	r3, #4
 800be1c:	e014      	b.n	800be48 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d004      	beq.n	800be34 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2201      	movs	r2, #1
 800be2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be30:	2301      	movs	r3, #1
 800be32:	e009      	b.n	800be48 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2240      	movs	r2, #64	@ 0x40
 800be44:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800be46:	2300      	movs	r3, #0

}
 800be48:	4618      	mov	r0, r3
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	24000000 	.word	0x24000000
 800be58:	10624dd3 	.word	0x10624dd3

0800be5c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be64:	4b11      	ldr	r3, [pc, #68]	@ (800beac <SDMMC_GetCmdError+0x50>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a11      	ldr	r2, [pc, #68]	@ (800beb0 <SDMMC_GetCmdError+0x54>)
 800be6a:	fba2 2303 	umull	r2, r3, r2, r3
 800be6e:	0a5b      	lsrs	r3, r3, #9
 800be70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be74:	fb02 f303 	mul.w	r3, r2, r3
 800be78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1e5a      	subs	r2, r3, #1
 800be7e:	60fa      	str	r2, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d102      	bne.n	800be8a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800be88:	e009      	b.n	800be9e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0f1      	beq.n	800be7a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a06      	ldr	r2, [pc, #24]	@ (800beb4 <SDMMC_GetCmdError+0x58>)
 800be9a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	24000000 	.word	0x24000000
 800beb0:	10624dd3 	.word	0x10624dd3
 800beb4:	002000c5 	.word	0x002000c5

0800beb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800beb8:	b084      	sub	sp, #16
 800beba:	b580      	push	{r7, lr}
 800bebc:	b084      	sub	sp, #16
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	f107 001c 	add.w	r0, r7, #28
 800bec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800beca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d121      	bne.n	800bf16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bed6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68da      	ldr	r2, [r3, #12]
 800bee2:	4b2c      	ldr	r3, [pc, #176]	@ (800bf94 <USB_CoreInit+0xdc>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bef6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800befa:	2b01      	cmp	r3, #1
 800befc:	d105      	bne.n	800bf0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f001 faf6 	bl	800d4fc <USB_CoreReset>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73fb      	strb	r3, [r7, #15]
 800bf14:	e01b      	b.n	800bf4e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f001 faea 	bl	800d4fc <USB_CoreReset>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bf2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	639a      	str	r2, [r3, #56]	@ 0x38
 800bf40:	e005      	b.n	800bf4e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bf4e:	7fbb      	ldrb	r3, [r7, #30]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d116      	bne.n	800bf82 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf62:	4b0d      	ldr	r3, [pc, #52]	@ (800bf98 <USB_CoreInit+0xe0>)
 800bf64:	4313      	orrs	r3, r2
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	f043 0206 	orr.w	r2, r3, #6
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	f043 0220 	orr.w	r2, r3, #32
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf8e:	b004      	add	sp, #16
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	ffbdffbf 	.word	0xffbdffbf
 800bf98:	03ee0000 	.word	0x03ee0000

0800bf9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b087      	sub	sp, #28
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bfaa:	79fb      	ldrb	r3, [r7, #7]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d165      	bne.n	800c07c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	4a41      	ldr	r2, [pc, #260]	@ (800c0b8 <USB_SetTurnaroundTime+0x11c>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d906      	bls.n	800bfc6 <USB_SetTurnaroundTime+0x2a>
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	4a40      	ldr	r2, [pc, #256]	@ (800c0bc <USB_SetTurnaroundTime+0x120>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d202      	bcs.n	800bfc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bfc0:	230f      	movs	r3, #15
 800bfc2:	617b      	str	r3, [r7, #20]
 800bfc4:	e062      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	4a3c      	ldr	r2, [pc, #240]	@ (800c0bc <USB_SetTurnaroundTime+0x120>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d306      	bcc.n	800bfdc <USB_SetTurnaroundTime+0x40>
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	4a3b      	ldr	r2, [pc, #236]	@ (800c0c0 <USB_SetTurnaroundTime+0x124>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d202      	bcs.n	800bfdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bfd6:	230e      	movs	r3, #14
 800bfd8:	617b      	str	r3, [r7, #20]
 800bfda:	e057      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	4a38      	ldr	r2, [pc, #224]	@ (800c0c0 <USB_SetTurnaroundTime+0x124>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d306      	bcc.n	800bff2 <USB_SetTurnaroundTime+0x56>
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	4a37      	ldr	r2, [pc, #220]	@ (800c0c4 <USB_SetTurnaroundTime+0x128>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d202      	bcs.n	800bff2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bfec:	230d      	movs	r3, #13
 800bfee:	617b      	str	r3, [r7, #20]
 800bff0:	e04c      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	4a33      	ldr	r2, [pc, #204]	@ (800c0c4 <USB_SetTurnaroundTime+0x128>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d306      	bcc.n	800c008 <USB_SetTurnaroundTime+0x6c>
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	4a32      	ldr	r2, [pc, #200]	@ (800c0c8 <USB_SetTurnaroundTime+0x12c>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d802      	bhi.n	800c008 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c002:	230c      	movs	r3, #12
 800c004:	617b      	str	r3, [r7, #20]
 800c006:	e041      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	4a2f      	ldr	r2, [pc, #188]	@ (800c0c8 <USB_SetTurnaroundTime+0x12c>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d906      	bls.n	800c01e <USB_SetTurnaroundTime+0x82>
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	4a2e      	ldr	r2, [pc, #184]	@ (800c0cc <USB_SetTurnaroundTime+0x130>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d802      	bhi.n	800c01e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c018:	230b      	movs	r3, #11
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	e036      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	4a2a      	ldr	r2, [pc, #168]	@ (800c0cc <USB_SetTurnaroundTime+0x130>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d906      	bls.n	800c034 <USB_SetTurnaroundTime+0x98>
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	4a29      	ldr	r2, [pc, #164]	@ (800c0d0 <USB_SetTurnaroundTime+0x134>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d802      	bhi.n	800c034 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c02e:	230a      	movs	r3, #10
 800c030:	617b      	str	r3, [r7, #20]
 800c032:	e02b      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	4a26      	ldr	r2, [pc, #152]	@ (800c0d0 <USB_SetTurnaroundTime+0x134>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d906      	bls.n	800c04a <USB_SetTurnaroundTime+0xae>
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	4a25      	ldr	r2, [pc, #148]	@ (800c0d4 <USB_SetTurnaroundTime+0x138>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d202      	bcs.n	800c04a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c044:	2309      	movs	r3, #9
 800c046:	617b      	str	r3, [r7, #20]
 800c048:	e020      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	4a21      	ldr	r2, [pc, #132]	@ (800c0d4 <USB_SetTurnaroundTime+0x138>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d306      	bcc.n	800c060 <USB_SetTurnaroundTime+0xc4>
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	4a20      	ldr	r2, [pc, #128]	@ (800c0d8 <USB_SetTurnaroundTime+0x13c>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d802      	bhi.n	800c060 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c05a:	2308      	movs	r3, #8
 800c05c:	617b      	str	r3, [r7, #20]
 800c05e:	e015      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	4a1d      	ldr	r2, [pc, #116]	@ (800c0d8 <USB_SetTurnaroundTime+0x13c>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d906      	bls.n	800c076 <USB_SetTurnaroundTime+0xda>
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	4a1c      	ldr	r2, [pc, #112]	@ (800c0dc <USB_SetTurnaroundTime+0x140>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d202      	bcs.n	800c076 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c070:	2307      	movs	r3, #7
 800c072:	617b      	str	r3, [r7, #20]
 800c074:	e00a      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c076:	2306      	movs	r3, #6
 800c078:	617b      	str	r3, [r7, #20]
 800c07a:	e007      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c082:	2309      	movs	r3, #9
 800c084:	617b      	str	r3, [r7, #20]
 800c086:	e001      	b.n	800c08c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c088:	2309      	movs	r3, #9
 800c08a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	68da      	ldr	r2, [r3, #12]
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	029b      	lsls	r3, r3, #10
 800c0a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c0a4:	431a      	orrs	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	371c      	adds	r7, #28
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	00d8acbf 	.word	0x00d8acbf
 800c0bc:	00e4e1c0 	.word	0x00e4e1c0
 800c0c0:	00f42400 	.word	0x00f42400
 800c0c4:	01067380 	.word	0x01067380
 800c0c8:	011a499f 	.word	0x011a499f
 800c0cc:	01312cff 	.word	0x01312cff
 800c0d0:	014ca43f 	.word	0x014ca43f
 800c0d4:	016e3600 	.word	0x016e3600
 800c0d8:	01a6ab1f 	.word	0x01a6ab1f
 800c0dc:	01e84800 	.word	0x01e84800

0800c0e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	f043 0201 	orr.w	r2, r3, #1
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c102:	b480      	push	{r7}
 800c104:	b083      	sub	sp, #12
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	f023 0201 	bic.w	r2, r3, #1
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c130:	2300      	movs	r3, #0
 800c132:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c140:	78fb      	ldrb	r3, [r7, #3]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d115      	bne.n	800c172 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c152:	200a      	movs	r0, #10
 800c154:	f7f5 fcb8 	bl	8001ac8 <HAL_Delay>
      ms += 10U;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	330a      	adds	r3, #10
 800c15c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f001 f93b 	bl	800d3da <USB_GetMode>
 800c164:	4603      	mov	r3, r0
 800c166:	2b01      	cmp	r3, #1
 800c168:	d01e      	beq.n	800c1a8 <USB_SetCurrentMode+0x84>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2bc7      	cmp	r3, #199	@ 0xc7
 800c16e:	d9f0      	bls.n	800c152 <USB_SetCurrentMode+0x2e>
 800c170:	e01a      	b.n	800c1a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c172:	78fb      	ldrb	r3, [r7, #3]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d115      	bne.n	800c1a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c184:	200a      	movs	r0, #10
 800c186:	f7f5 fc9f 	bl	8001ac8 <HAL_Delay>
      ms += 10U;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	330a      	adds	r3, #10
 800c18e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f001 f922 	bl	800d3da <USB_GetMode>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d005      	beq.n	800c1a8 <USB_SetCurrentMode+0x84>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2bc7      	cmp	r3, #199	@ 0xc7
 800c1a0:	d9f0      	bls.n	800c184 <USB_SetCurrentMode+0x60>
 800c1a2:	e001      	b.n	800c1a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e005      	b.n	800c1b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2bc8      	cmp	r3, #200	@ 0xc8
 800c1ac:	d101      	bne.n	800c1b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e000      	b.n	800c1b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1bc:	b084      	sub	sp, #16
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b086      	sub	sp, #24
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c1ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	613b      	str	r3, [r7, #16]
 800c1da:	e009      	b.n	800c1f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	3340      	adds	r3, #64	@ 0x40
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	613b      	str	r3, [r7, #16]
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	2b0e      	cmp	r3, #14
 800c1f4:	d9f2      	bls.n	800c1dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c1f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d11c      	bne.n	800c238 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c20c:	f043 0302 	orr.w	r3, r3, #2
 800c210:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c216:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	e005      	b.n	800c244 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c23c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c24a:	461a      	mov	r2, r3
 800c24c:	2300      	movs	r3, #0
 800c24e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c250:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c254:	2b01      	cmp	r3, #1
 800c256:	d10d      	bne.n	800c274 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c260:	2100      	movs	r1, #0
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f968 	bl	800c538 <USB_SetDevSpeed>
 800c268:	e008      	b.n	800c27c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c26a:	2101      	movs	r1, #1
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f963 	bl	800c538 <USB_SetDevSpeed>
 800c272:	e003      	b.n	800c27c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c274:	2103      	movs	r1, #3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f95e 	bl	800c538 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c27c:	2110      	movs	r1, #16
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f8fa 	bl	800c478 <USB_FlushTxFifo>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f924 	bl	800c4dc <USB_FlushRxFifo>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d001      	beq.n	800c29e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2bc:	461a      	mov	r2, r3
 800c2be:	2300      	movs	r3, #0
 800c2c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	613b      	str	r3, [r7, #16]
 800c2c6:	e043      	b.n	800c350 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	015a      	lsls	r2, r3, #5
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2de:	d118      	bne.n	800c312 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10a      	bne.n	800c2fc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	015a      	lsls	r2, r3, #5
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	e013      	b.n	800c324 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c308:	461a      	mov	r2, r3
 800c30a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	e008      	b.n	800c324 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	015a      	lsls	r2, r3, #5
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	4413      	add	r3, r2
 800c31a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c31e:	461a      	mov	r2, r3
 800c320:	2300      	movs	r3, #0
 800c322:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	015a      	lsls	r2, r3, #5
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4413      	add	r3, r2
 800c32c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c330:	461a      	mov	r2, r3
 800c332:	2300      	movs	r3, #0
 800c334:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	015a      	lsls	r2, r3, #5
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	4413      	add	r3, r2
 800c33e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c342:	461a      	mov	r2, r3
 800c344:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c348:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	3301      	adds	r3, #1
 800c34e:	613b      	str	r3, [r7, #16]
 800c350:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c354:	461a      	mov	r2, r3
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	4293      	cmp	r3, r2
 800c35a:	d3b5      	bcc.n	800c2c8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c35c:	2300      	movs	r3, #0
 800c35e:	613b      	str	r3, [r7, #16]
 800c360:	e043      	b.n	800c3ea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	015a      	lsls	r2, r3, #5
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	4413      	add	r3, r2
 800c36a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c378:	d118      	bne.n	800c3ac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10a      	bne.n	800c396 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	015a      	lsls	r2, r3, #5
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	4413      	add	r3, r2
 800c388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c38c:	461a      	mov	r2, r3
 800c38e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c392:	6013      	str	r3, [r2, #0]
 800c394:	e013      	b.n	800c3be <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	015a      	lsls	r2, r3, #5
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	4413      	add	r3, r2
 800c39e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c3a8:	6013      	str	r3, [r2, #0]
 800c3aa:	e008      	b.n	800c3be <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	015a      	lsls	r2, r3, #5
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	015a      	lsls	r2, r3, #5
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3dc:	461a      	mov	r2, r3
 800c3de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c3e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	613b      	str	r3, [r7, #16]
 800c3ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d3b5      	bcc.n	800c362 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c408:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c416:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d105      	bne.n	800c42c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	699b      	ldr	r3, [r3, #24]
 800c424:	f043 0210 	orr.w	r2, r3, #16
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	699a      	ldr	r2, [r3, #24]
 800c430:	4b0f      	ldr	r3, [pc, #60]	@ (800c470 <USB_DevInit+0x2b4>)
 800c432:	4313      	orrs	r3, r2
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c438:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d005      	beq.n	800c44c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	699b      	ldr	r3, [r3, #24]
 800c444:	f043 0208 	orr.w	r2, r3, #8
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c44c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c450:	2b01      	cmp	r3, #1
 800c452:	d105      	bne.n	800c460 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	699a      	ldr	r2, [r3, #24]
 800c458:	4b06      	ldr	r3, [pc, #24]	@ (800c474 <USB_DevInit+0x2b8>)
 800c45a:	4313      	orrs	r3, r2
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c460:	7dfb      	ldrb	r3, [r7, #23]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3718      	adds	r7, #24
 800c466:	46bd      	mov	sp, r7
 800c468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c46c:	b004      	add	sp, #16
 800c46e:	4770      	bx	lr
 800c470:	803c3800 	.word	0x803c3800
 800c474:	40000004 	.word	0x40000004

0800c478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c482:	2300      	movs	r3, #0
 800c484:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	3301      	adds	r3, #1
 800c48a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c492:	d901      	bls.n	800c498 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e01b      	b.n	800c4d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	daf2      	bge.n	800c486 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	019b      	lsls	r3, r3, #6
 800c4a8:	f043 0220 	orr.w	r2, r3, #32
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c4bc:	d901      	bls.n	800c4c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	e006      	b.n	800c4d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	691b      	ldr	r3, [r3, #16]
 800c4c6:	f003 0320 	and.w	r3, r3, #32
 800c4ca:	2b20      	cmp	r3, #32
 800c4cc:	d0f0      	beq.n	800c4b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c4f4:	d901      	bls.n	800c4fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e018      	b.n	800c52c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	daf2      	bge.n	800c4e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2210      	movs	r2, #16
 800c50a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	3301      	adds	r3, #1
 800c510:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c518:	d901      	bls.n	800c51e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e006      	b.n	800c52c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	f003 0310 	and.w	r3, r3, #16
 800c526:	2b10      	cmp	r3, #16
 800c528:	d0f0      	beq.n	800c50c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	460b      	mov	r3, r1
 800c542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	68f9      	ldr	r1, [r7, #12]
 800c554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c558:	4313      	orrs	r3, r2
 800c55a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b087      	sub	sp, #28
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	f003 0306 	and.w	r3, r3, #6
 800c582:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d102      	bne.n	800c590 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c58a:	2300      	movs	r3, #0
 800c58c:	75fb      	strb	r3, [r7, #23]
 800c58e:	e00a      	b.n	800c5a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2b02      	cmp	r3, #2
 800c594:	d002      	beq.n	800c59c <USB_GetDevSpeed+0x32>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b06      	cmp	r3, #6
 800c59a:	d102      	bne.n	800c5a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c59c:	2302      	movs	r3, #2
 800c59e:	75fb      	strb	r3, [r7, #23]
 800c5a0:	e001      	b.n	800c5a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c5a2:	230f      	movs	r3, #15
 800c5a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	371c      	adds	r7, #28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	785b      	ldrb	r3, [r3, #1]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d139      	bne.n	800c644 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5d6:	69da      	ldr	r2, [r3, #28]
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	f003 030f 	and.w	r3, r3, #15
 800c5e0:	2101      	movs	r1, #1
 800c5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	68f9      	ldr	r1, [r7, #12]
 800c5ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	015a      	lsls	r2, r3, #5
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d153      	bne.n	800c6b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	015a      	lsls	r2, r3, #5
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	4413      	add	r3, r2
 800c610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	791b      	ldrb	r3, [r3, #4]
 800c622:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c624:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	059b      	lsls	r3, r3, #22
 800c62a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c62c:	431a      	orrs	r2, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	0159      	lsls	r1, r3, #5
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	440b      	add	r3, r1
 800c636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c63a:	4619      	mov	r1, r3
 800c63c:	4b20      	ldr	r3, [pc, #128]	@ (800c6c0 <USB_ActivateEndpoint+0x10c>)
 800c63e:	4313      	orrs	r3, r2
 800c640:	600b      	str	r3, [r1, #0]
 800c642:	e035      	b.n	800c6b0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c64a:	69da      	ldr	r2, [r3, #28]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	f003 030f 	and.w	r3, r3, #15
 800c654:	2101      	movs	r1, #1
 800c656:	fa01 f303 	lsl.w	r3, r1, r3
 800c65a:	041b      	lsls	r3, r3, #16
 800c65c:	68f9      	ldr	r1, [r7, #12]
 800c65e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c662:	4313      	orrs	r3, r2
 800c664:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d119      	bne.n	800c6b0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	015a      	lsls	r2, r3, #5
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	4413      	add	r3, r2
 800c684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	791b      	ldrb	r3, [r3, #4]
 800c696:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c698:	430b      	orrs	r3, r1
 800c69a:	431a      	orrs	r2, r3
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	0159      	lsls	r1, r3, #5
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	440b      	add	r3, r1
 800c6a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	4b05      	ldr	r3, [pc, #20]	@ (800c6c0 <USB_ActivateEndpoint+0x10c>)
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	10008000 	.word	0x10008000

0800c6c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	785b      	ldrb	r3, [r3, #1]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d161      	bne.n	800c7a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c6f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c6f6:	d11f      	bne.n	800c738 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	015a      	lsls	r2, r3, #5
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	4413      	add	r3, r2
 800c700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	0151      	lsls	r1, r2, #5
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	440a      	add	r2, r1
 800c70e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c712:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c716:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	015a      	lsls	r2, r3, #5
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4413      	add	r3, r2
 800c720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	0151      	lsls	r1, r2, #5
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	440a      	add	r2, r1
 800c72e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c732:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c736:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c73e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	f003 030f 	and.w	r3, r3, #15
 800c748:	2101      	movs	r1, #1
 800c74a:	fa01 f303 	lsl.w	r3, r1, r3
 800c74e:	b29b      	uxth	r3, r3
 800c750:	43db      	mvns	r3, r3
 800c752:	68f9      	ldr	r1, [r7, #12]
 800c754:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c758:	4013      	ands	r3, r2
 800c75a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c762:	69da      	ldr	r2, [r3, #28]
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	f003 030f 	and.w	r3, r3, #15
 800c76c:	2101      	movs	r1, #1
 800c76e:	fa01 f303 	lsl.w	r3, r1, r3
 800c772:	b29b      	uxth	r3, r3
 800c774:	43db      	mvns	r3, r3
 800c776:	68f9      	ldr	r1, [r7, #12]
 800c778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c77c:	4013      	ands	r3, r2
 800c77e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	4413      	add	r3, r2
 800c788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	0159      	lsls	r1, r3, #5
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	440b      	add	r3, r1
 800c796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c79a:	4619      	mov	r1, r3
 800c79c:	4b35      	ldr	r3, [pc, #212]	@ (800c874 <USB_DeactivateEndpoint+0x1b0>)
 800c79e:	4013      	ands	r3, r2
 800c7a0:	600b      	str	r3, [r1, #0]
 800c7a2:	e060      	b.n	800c866 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	015a      	lsls	r2, r3, #5
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7ba:	d11f      	bne.n	800c7fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	015a      	lsls	r2, r3, #5
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	0151      	lsls	r1, r2, #5
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	440a      	add	r2, r1
 800c7d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c7d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c7da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	015a      	lsls	r2, r3, #5
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	0151      	lsls	r1, r2, #5
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	440a      	add	r2, r1
 800c7f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c7f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c7fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	f003 030f 	and.w	r3, r3, #15
 800c80c:	2101      	movs	r1, #1
 800c80e:	fa01 f303 	lsl.w	r3, r1, r3
 800c812:	041b      	lsls	r3, r3, #16
 800c814:	43db      	mvns	r3, r3
 800c816:	68f9      	ldr	r1, [r7, #12]
 800c818:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c81c:	4013      	ands	r3, r2
 800c81e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c826:	69da      	ldr	r2, [r3, #28]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	f003 030f 	and.w	r3, r3, #15
 800c830:	2101      	movs	r1, #1
 800c832:	fa01 f303 	lsl.w	r3, r1, r3
 800c836:	041b      	lsls	r3, r3, #16
 800c838:	43db      	mvns	r3, r3
 800c83a:	68f9      	ldr	r1, [r7, #12]
 800c83c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c840:	4013      	ands	r3, r2
 800c842:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	0159      	lsls	r1, r3, #5
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	440b      	add	r3, r1
 800c85a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c85e:	4619      	mov	r1, r3
 800c860:	4b05      	ldr	r3, [pc, #20]	@ (800c878 <USB_DeactivateEndpoint+0x1b4>)
 800c862:	4013      	ands	r3, r2
 800c864:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	ec337800 	.word	0xec337800
 800c878:	eff37800 	.word	0xeff37800

0800c87c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08a      	sub	sp, #40	@ 0x28
 800c880:	af02      	add	r7, sp, #8
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	4613      	mov	r3, r2
 800c888:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	785b      	ldrb	r3, [r3, #1]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	f040 8181 	bne.w	800cba0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d132      	bne.n	800c90c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8b2:	691a      	ldr	r2, [r3, #16]
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	0159      	lsls	r1, r3, #5
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	440b      	add	r3, r1
 800c8bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4ba5      	ldr	r3, [pc, #660]	@ (800cb58 <USB_EPStartXfer+0x2dc>)
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	015a      	lsls	r2, r3, #5
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	69ba      	ldr	r2, [r7, #24]
 800c8d8:	0151      	lsls	r1, r2, #5
 800c8da:	69fa      	ldr	r2, [r7, #28]
 800c8dc:	440a      	add	r2, r1
 800c8de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c8e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c8e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	015a      	lsls	r2, r3, #5
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8f4:	691a      	ldr	r2, [r3, #16]
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	0159      	lsls	r1, r3, #5
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	440b      	add	r3, r1
 800c8fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c902:	4619      	mov	r1, r3
 800c904:	4b95      	ldr	r3, [pc, #596]	@ (800cb5c <USB_EPStartXfer+0x2e0>)
 800c906:	4013      	ands	r3, r2
 800c908:	610b      	str	r3, [r1, #16]
 800c90a:	e092      	b.n	800ca32 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	015a      	lsls	r2, r3, #5
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	4413      	add	r3, r2
 800c914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c918:	691a      	ldr	r2, [r3, #16]
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	0159      	lsls	r1, r3, #5
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	440b      	add	r3, r1
 800c922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c926:	4619      	mov	r1, r3
 800c928:	4b8c      	ldr	r3, [pc, #560]	@ (800cb5c <USB_EPStartXfer+0x2e0>)
 800c92a:	4013      	ands	r3, r2
 800c92c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	015a      	lsls	r2, r3, #5
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	4413      	add	r3, r2
 800c936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c93a:	691a      	ldr	r2, [r3, #16]
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	0159      	lsls	r1, r3, #5
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	440b      	add	r3, r1
 800c944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c948:	4619      	mov	r1, r3
 800c94a:	4b83      	ldr	r3, [pc, #524]	@ (800cb58 <USB_EPStartXfer+0x2dc>)
 800c94c:	4013      	ands	r3, r2
 800c94e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d11a      	bne.n	800c98c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	691a      	ldr	r2, [r3, #16]
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d903      	bls.n	800c96a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	689a      	ldr	r2, [r3, #8]
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	015a      	lsls	r2, r3, #5
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	4413      	add	r3, r2
 800c972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	69ba      	ldr	r2, [r7, #24]
 800c97a:	0151      	lsls	r1, r2, #5
 800c97c:	69fa      	ldr	r2, [r7, #28]
 800c97e:	440a      	add	r2, r1
 800c980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c984:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c988:	6113      	str	r3, [r2, #16]
 800c98a:	e01b      	b.n	800c9c4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	015a      	lsls	r2, r3, #5
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	4413      	add	r3, r2
 800c994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c998:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	6919      	ldr	r1, [r3, #16]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	440b      	add	r3, r1
 800c9a4:	1e59      	subs	r1, r3, #1
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800c9ae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c9b0:	4b6b      	ldr	r3, [pc, #428]	@ (800cb60 <USB_EPStartXfer+0x2e4>)
 800c9b2:	400b      	ands	r3, r1
 800c9b4:	69b9      	ldr	r1, [r7, #24]
 800c9b6:	0148      	lsls	r0, r1, #5
 800c9b8:	69f9      	ldr	r1, [r7, #28]
 800c9ba:	4401      	add	r1, r0
 800c9bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	015a      	lsls	r2, r3, #5
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9d0:	691a      	ldr	r2, [r3, #16]
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9da:	69b9      	ldr	r1, [r7, #24]
 800c9dc:	0148      	lsls	r0, r1, #5
 800c9de:	69f9      	ldr	r1, [r7, #28]
 800c9e0:	4401      	add	r1, r0
 800c9e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	791b      	ldrb	r3, [r3, #4]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d11f      	bne.n	800ca32 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	69ba      	ldr	r2, [r7, #24]
 800ca02:	0151      	lsls	r1, r2, #5
 800ca04:	69fa      	ldr	r2, [r7, #28]
 800ca06:	440a      	add	r2, r1
 800ca08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca0c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ca10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	015a      	lsls	r2, r3, #5
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca1e:	691b      	ldr	r3, [r3, #16]
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	0151      	lsls	r1, r2, #5
 800ca24:	69fa      	ldr	r2, [r7, #28]
 800ca26:	440a      	add	r2, r1
 800ca28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ca30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ca32:	79fb      	ldrb	r3, [r7, #7]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d14b      	bne.n	800cad0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	69db      	ldr	r3, [r3, #28]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d009      	beq.n	800ca54 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	015a      	lsls	r2, r3, #5
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	4413      	add	r3, r2
 800ca48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	69db      	ldr	r3, [r3, #28]
 800ca52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	791b      	ldrb	r3, [r3, #4]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d128      	bne.n	800caae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d110      	bne.n	800ca8e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	69ba      	ldr	r2, [r7, #24]
 800ca7c:	0151      	lsls	r1, r2, #5
 800ca7e:	69fa      	ldr	r2, [r7, #28]
 800ca80:	440a      	add	r2, r1
 800ca82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ca86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	e00f      	b.n	800caae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	015a      	lsls	r2, r3, #5
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	4413      	add	r3, r2
 800ca96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	69ba      	ldr	r2, [r7, #24]
 800ca9e:	0151      	lsls	r1, r2, #5
 800caa0:	69fa      	ldr	r2, [r7, #28]
 800caa2:	440a      	add	r2, r1
 800caa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800caa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800caac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	015a      	lsls	r2, r3, #5
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	4413      	add	r3, r2
 800cab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	69ba      	ldr	r2, [r7, #24]
 800cabe:	0151      	lsls	r1, r2, #5
 800cac0:	69fa      	ldr	r2, [r7, #28]
 800cac2:	440a      	add	r2, r1
 800cac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cac8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	e16a      	b.n	800cda6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	69ba      	ldr	r2, [r7, #24]
 800cae0:	0151      	lsls	r1, r2, #5
 800cae2:	69fa      	ldr	r2, [r7, #28]
 800cae4:	440a      	add	r2, r1
 800cae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800caea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800caee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	791b      	ldrb	r3, [r3, #4]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d015      	beq.n	800cb24 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 8152 	beq.w	800cda6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	f003 030f 	and.w	r3, r3, #15
 800cb12:	2101      	movs	r1, #1
 800cb14:	fa01 f303 	lsl.w	r3, r1, r3
 800cb18:	69f9      	ldr	r1, [r7, #28]
 800cb1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	634b      	str	r3, [r1, #52]	@ 0x34
 800cb22:	e140      	b.n	800cda6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d117      	bne.n	800cb64 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	69ba      	ldr	r2, [r7, #24]
 800cb44:	0151      	lsls	r1, r2, #5
 800cb46:	69fa      	ldr	r2, [r7, #28]
 800cb48:	440a      	add	r2, r1
 800cb4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cb52:	6013      	str	r3, [r2, #0]
 800cb54:	e016      	b.n	800cb84 <USB_EPStartXfer+0x308>
 800cb56:	bf00      	nop
 800cb58:	e007ffff 	.word	0xe007ffff
 800cb5c:	fff80000 	.word	0xfff80000
 800cb60:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	015a      	lsls	r2, r3, #5
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	0151      	lsls	r1, r2, #5
 800cb76:	69fa      	ldr	r2, [r7, #28]
 800cb78:	440a      	add	r2, r1
 800cb7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb82:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	68d9      	ldr	r1, [r3, #12]
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	781a      	ldrb	r2, [r3, #0]
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	691b      	ldr	r3, [r3, #16]
 800cb90:	b298      	uxth	r0, r3
 800cb92:	79fb      	ldrb	r3, [r7, #7]
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	4603      	mov	r3, r0
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f000 f9b9 	bl	800cf10 <USB_WritePacket>
 800cb9e:	e102      	b.n	800cda6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbac:	691a      	ldr	r2, [r3, #16]
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	0159      	lsls	r1, r3, #5
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	440b      	add	r3, r1
 800cbb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4b7c      	ldr	r3, [pc, #496]	@ (800cdb0 <USB_EPStartXfer+0x534>)
 800cbbe:	4013      	ands	r3, r2
 800cbc0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	015a      	lsls	r2, r3, #5
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	4413      	add	r3, r2
 800cbca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbce:	691a      	ldr	r2, [r3, #16]
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	0159      	lsls	r1, r3, #5
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	440b      	add	r3, r1
 800cbd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4b75      	ldr	r3, [pc, #468]	@ (800cdb4 <USB_EPStartXfer+0x538>)
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d12f      	bne.n	800cc4a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d003      	beq.n	800cbfa <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	689a      	ldr	r2, [r3, #8]
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	689a      	ldr	r2, [r3, #8]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	015a      	lsls	r2, r3, #5
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	4413      	add	r3, r2
 800cc0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc0e:	691a      	ldr	r2, [r3, #16]
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	6a1b      	ldr	r3, [r3, #32]
 800cc14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc18:	69b9      	ldr	r1, [r7, #24]
 800cc1a:	0148      	lsls	r0, r1, #5
 800cc1c:	69f9      	ldr	r1, [r7, #28]
 800cc1e:	4401      	add	r1, r0
 800cc20:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cc24:	4313      	orrs	r3, r2
 800cc26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	015a      	lsls	r2, r3, #5
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	69ba      	ldr	r2, [r7, #24]
 800cc38:	0151      	lsls	r1, r2, #5
 800cc3a:	69fa      	ldr	r2, [r7, #28]
 800cc3c:	440a      	add	r2, r1
 800cc3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc46:	6113      	str	r3, [r2, #16]
 800cc48:	e05f      	b.n	800cd0a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d123      	bne.n	800cc9a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	015a      	lsls	r2, r3, #5
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	4413      	add	r3, r2
 800cc5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc5e:	691a      	ldr	r2, [r3, #16]
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc68:	69b9      	ldr	r1, [r7, #24]
 800cc6a:	0148      	lsls	r0, r1, #5
 800cc6c:	69f9      	ldr	r1, [r7, #28]
 800cc6e:	4401      	add	r1, r0
 800cc70:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cc74:	4313      	orrs	r3, r2
 800cc76:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	0151      	lsls	r1, r2, #5
 800cc8a:	69fa      	ldr	r2, [r7, #28]
 800cc8c:	440a      	add	r2, r1
 800cc8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc96:	6113      	str	r3, [r2, #16]
 800cc98:	e037      	b.n	800cd0a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	691a      	ldr	r2, [r3, #16]
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	4413      	add	r3, r2
 800cca4:	1e5a      	subs	r2, r3, #1
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccae:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	8afa      	ldrh	r2, [r7, #22]
 800ccb6:	fb03 f202 	mul.w	r2, r3, r2
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	015a      	lsls	r2, r3, #5
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccca:	691a      	ldr	r2, [r3, #16]
 800cccc:	8afb      	ldrh	r3, [r7, #22]
 800ccce:	04d9      	lsls	r1, r3, #19
 800ccd0:	4b39      	ldr	r3, [pc, #228]	@ (800cdb8 <USB_EPStartXfer+0x53c>)
 800ccd2:	400b      	ands	r3, r1
 800ccd4:	69b9      	ldr	r1, [r7, #24]
 800ccd6:	0148      	lsls	r0, r1, #5
 800ccd8:	69f9      	ldr	r1, [r7, #28]
 800ccda:	4401      	add	r1, r0
 800ccdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cce0:	4313      	orrs	r3, r2
 800cce2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	015a      	lsls	r2, r3, #5
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccf0:	691a      	ldr	r2, [r3, #16]
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccfa:	69b9      	ldr	r1, [r7, #24]
 800ccfc:	0148      	lsls	r0, r1, #5
 800ccfe:	69f9      	ldr	r1, [r7, #28]
 800cd00:	4401      	add	r1, r0
 800cd02:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cd06:	4313      	orrs	r3, r2
 800cd08:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800cd0a:	79fb      	ldrb	r3, [r7, #7]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d10d      	bne.n	800cd2c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d009      	beq.n	800cd2c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	68d9      	ldr	r1, [r3, #12]
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	015a      	lsls	r2, r3, #5
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	4413      	add	r3, r2
 800cd24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd28:	460a      	mov	r2, r1
 800cd2a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	791b      	ldrb	r3, [r3, #4]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d128      	bne.n	800cd86 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d110      	bne.n	800cd66 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	69fb      	ldr	r3, [r7, #28]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	69ba      	ldr	r2, [r7, #24]
 800cd54:	0151      	lsls	r1, r2, #5
 800cd56:	69fa      	ldr	r2, [r7, #28]
 800cd58:	440a      	add	r2, r1
 800cd5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cd62:	6013      	str	r3, [r2, #0]
 800cd64:	e00f      	b.n	800cd86 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	015a      	lsls	r2, r3, #5
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	0151      	lsls	r1, r2, #5
 800cd78:	69fa      	ldr	r2, [r7, #28]
 800cd7a:	440a      	add	r2, r1
 800cd7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd84:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	015a      	lsls	r2, r3, #5
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	69ba      	ldr	r2, [r7, #24]
 800cd96:	0151      	lsls	r1, r2, #5
 800cd98:	69fa      	ldr	r2, [r7, #28]
 800cd9a:	440a      	add	r2, r1
 800cd9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cda0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cda4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3720      	adds	r7, #32
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	fff80000 	.word	0xfff80000
 800cdb4:	e007ffff 	.word	0xe007ffff
 800cdb8:	1ff80000 	.word	0x1ff80000

0800cdbc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b087      	sub	sp, #28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	785b      	ldrb	r3, [r3, #1]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d14a      	bne.n	800ce70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	015a      	lsls	r2, r3, #5
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	4413      	add	r3, r2
 800cde4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cdee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cdf2:	f040 8086 	bne.w	800cf02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	015a      	lsls	r2, r3, #5
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	4413      	add	r3, r2
 800ce00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	7812      	ldrb	r2, [r2, #0]
 800ce0a:	0151      	lsls	r1, r2, #5
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	440a      	add	r2, r1
 800ce10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ce18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	015a      	lsls	r2, r3, #5
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	4413      	add	r3, r2
 800ce24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	7812      	ldrb	r2, [r2, #0]
 800ce2e:	0151      	lsls	r1, r2, #5
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	440a      	add	r2, r1
 800ce34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ce3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	3301      	adds	r3, #1
 800ce42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d902      	bls.n	800ce54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	75fb      	strb	r3, [r7, #23]
          break;
 800ce52:	e056      	b.n	800cf02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	015a      	lsls	r2, r3, #5
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ce68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce6c:	d0e7      	beq.n	800ce3e <USB_EPStopXfer+0x82>
 800ce6e:	e048      	b.n	800cf02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	015a      	lsls	r2, r3, #5
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ce84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce88:	d13b      	bne.n	800cf02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	015a      	lsls	r2, r3, #5
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	4413      	add	r3, r2
 800ce94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	7812      	ldrb	r2, [r2, #0]
 800ce9e:	0151      	lsls	r1, r2, #5
 800cea0:	693a      	ldr	r2, [r7, #16]
 800cea2:	440a      	add	r2, r1
 800cea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cea8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ceac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	015a      	lsls	r2, r3, #5
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	683a      	ldr	r2, [r7, #0]
 800cec0:	7812      	ldrb	r2, [r2, #0]
 800cec2:	0151      	lsls	r1, r2, #5
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	440a      	add	r2, r1
 800cec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cecc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ced0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3301      	adds	r3, #1
 800ced6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cede:	4293      	cmp	r3, r2
 800cee0:	d902      	bls.n	800cee8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	75fb      	strb	r3, [r7, #23]
          break;
 800cee6:	e00c      	b.n	800cf02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	015a      	lsls	r2, r3, #5
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	4413      	add	r3, r2
 800cef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cefc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf00:	d0e7      	beq.n	800ced2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	371c      	adds	r7, #28
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b089      	sub	sp, #36	@ 0x24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	460b      	mov	r3, r1
 800cf20:	71fb      	strb	r3, [r7, #7]
 800cf22:	4613      	mov	r3, r2
 800cf24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cf2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d123      	bne.n	800cf7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf36:	88bb      	ldrh	r3, [r7, #4]
 800cf38:	3303      	adds	r3, #3
 800cf3a:	089b      	lsrs	r3, r3, #2
 800cf3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf3e:	2300      	movs	r3, #0
 800cf40:	61bb      	str	r3, [r7, #24]
 800cf42:	e018      	b.n	800cf76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	031a      	lsls	r2, r3, #12
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf50:	461a      	mov	r2, r3
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	3301      	adds	r3, #1
 800cf62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	3301      	adds	r3, #1
 800cf68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	3301      	adds	r3, #1
 800cf74:	61bb      	str	r3, [r7, #24]
 800cf76:	69ba      	ldr	r2, [r7, #24]
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d3e2      	bcc.n	800cf44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3724      	adds	r7, #36	@ 0x24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b08b      	sub	sp, #44	@ 0x2c
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	4613      	mov	r3, r2
 800cf98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cfa2:	88fb      	ldrh	r3, [r7, #6]
 800cfa4:	089b      	lsrs	r3, r3, #2
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cfaa:	88fb      	ldrh	r3, [r7, #6]
 800cfac:	f003 0303 	and.w	r3, r3, #3
 800cfb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	623b      	str	r3, [r7, #32]
 800cfb6:	e014      	b.n	800cfe2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc2:	601a      	str	r2, [r3, #0]
    pDest++;
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfcc:	3301      	adds	r3, #1
 800cfce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd8:	3301      	adds	r3, #1
 800cfda:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	623b      	str	r3, [r7, #32]
 800cfe2:	6a3a      	ldr	r2, [r7, #32]
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d3e6      	bcc.n	800cfb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cfea:	8bfb      	ldrh	r3, [r7, #30]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d01e      	beq.n	800d02e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cffa:	461a      	mov	r2, r3
 800cffc:	f107 0310 	add.w	r3, r7, #16
 800d000:	6812      	ldr	r2, [r2, #0]
 800d002:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	fa22 f303 	lsr.w	r3, r2, r3
 800d010:	b2da      	uxtb	r2, r3
 800d012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d014:	701a      	strb	r2, [r3, #0]
      i++;
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	3301      	adds	r3, #1
 800d01a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01e:	3301      	adds	r3, #1
 800d020:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d022:	8bfb      	ldrh	r3, [r7, #30]
 800d024:	3b01      	subs	r3, #1
 800d026:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d028:	8bfb      	ldrh	r3, [r7, #30]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1ea      	bne.n	800d004 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d030:	4618      	mov	r0, r3
 800d032:	372c      	adds	r7, #44	@ 0x2c
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	785b      	ldrb	r3, [r3, #1]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d12c      	bne.n	800d0b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	015a      	lsls	r2, r3, #5
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4413      	add	r3, r2
 800d060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	db12      	blt.n	800d090 <USB_EPSetStall+0x54>
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00f      	beq.n	800d090 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	015a      	lsls	r2, r3, #5
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	4413      	add	r3, r2
 800d078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	0151      	lsls	r1, r2, #5
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	440a      	add	r2, r1
 800d086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d08a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d08e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	015a      	lsls	r2, r3, #5
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	4413      	add	r3, r2
 800d098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	0151      	lsls	r1, r2, #5
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	440a      	add	r2, r1
 800d0a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d0aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	e02b      	b.n	800d10a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	015a      	lsls	r2, r3, #5
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	db12      	blt.n	800d0ea <USB_EPSetStall+0xae>
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00f      	beq.n	800d0ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	68ba      	ldr	r2, [r7, #8]
 800d0da:	0151      	lsls	r1, r2, #5
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	440a      	add	r2, r1
 800d0e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d0e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	0151      	lsls	r1, r2, #5
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	440a      	add	r2, r1
 800d100:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d104:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d108:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d118:	b480      	push	{r7}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	785b      	ldrb	r3, [r3, #1]
 800d130:	2b01      	cmp	r3, #1
 800d132:	d128      	bne.n	800d186 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	015a      	lsls	r2, r3, #5
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	4413      	add	r3, r2
 800d13c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	0151      	lsls	r1, r2, #5
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	440a      	add	r2, r1
 800d14a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d14e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	791b      	ldrb	r3, [r3, #4]
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d003      	beq.n	800d164 <USB_EPClearStall+0x4c>
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	791b      	ldrb	r3, [r3, #4]
 800d160:	2b02      	cmp	r3, #2
 800d162:	d138      	bne.n	800d1d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	015a      	lsls	r2, r3, #5
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	4413      	add	r3, r2
 800d16c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	0151      	lsls	r1, r2, #5
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	440a      	add	r2, r1
 800d17a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d17e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	e027      	b.n	800d1d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	0151      	lsls	r1, r2, #5
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	440a      	add	r2, r1
 800d19c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d1a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	791b      	ldrb	r3, [r3, #4]
 800d1aa:	2b03      	cmp	r3, #3
 800d1ac:	d003      	beq.n	800d1b6 <USB_EPClearStall+0x9e>
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	791b      	ldrb	r3, [r3, #4]
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d10f      	bne.n	800d1d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	015a      	lsls	r2, r3, #5
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	4413      	add	r3, r2
 800d1be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	0151      	lsls	r1, r2, #5
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	440a      	add	r2, r1
 800d1cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d202:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d206:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	78fb      	ldrb	r3, [r7, #3]
 800d212:	011b      	lsls	r3, r3, #4
 800d214:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d218:	68f9      	ldr	r1, [r7, #12]
 800d21a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d21e:	4313      	orrs	r3, r2
 800d220:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d24a:	f023 0303 	bic.w	r3, r3, #3
 800d24e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d25e:	f023 0302 	bic.w	r3, r3, #2
 800d262:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d272:	b480      	push	{r7}
 800d274:	b085      	sub	sp, #20
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d28c:	f023 0303 	bic.w	r3, r3, #3
 800d290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d2a0:	f043 0302 	orr.w	r3, r3, #2
 800d2a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3714      	adds	r7, #20
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	695b      	ldr	r3, [r3, #20]
 800d2c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3714      	adds	r7, #20
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d2da:	b480      	push	{r7}
 800d2dc:	b085      	sub	sp, #20
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2ec:	699b      	ldr	r3, [r3, #24]
 800d2ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2f6:	69db      	ldr	r3, [r3, #28]
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	4013      	ands	r3, r2
 800d2fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	0c1b      	lsrs	r3, r3, #16
}
 800d302:	4618      	mov	r0, r3
 800d304:	3714      	adds	r7, #20
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d30e:	b480      	push	{r7}
 800d310:	b085      	sub	sp, #20
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d32a:	69db      	ldr	r3, [r3, #28]
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	4013      	ands	r3, r2
 800d330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	b29b      	uxth	r3, r3
}
 800d336:	4618      	mov	r0, r3
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d342:	b480      	push	{r7}
 800d344:	b085      	sub	sp, #20
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	460b      	mov	r3, r1
 800d34c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d352:	78fb      	ldrb	r3, [r7, #3]
 800d354:	015a      	lsls	r2, r3, #5
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	4413      	add	r3, r2
 800d35a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	68ba      	ldr	r2, [r7, #8]
 800d36c:	4013      	ands	r3, r2
 800d36e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d370:	68bb      	ldr	r3, [r7, #8]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3714      	adds	r7, #20
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr

0800d37e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d37e:	b480      	push	{r7}
 800d380:	b087      	sub	sp, #28
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	460b      	mov	r3, r1
 800d388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d39e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d3a2:	78fb      	ldrb	r3, [r7, #3]
 800d3a4:	f003 030f 	and.w	r3, r3, #15
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800d3ae:	01db      	lsls	r3, r3, #7
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	693a      	ldr	r2, [r7, #16]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d3b8:	78fb      	ldrb	r3, [r7, #3]
 800d3ba:	015a      	lsls	r2, r3, #5
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	4013      	ands	r3, r2
 800d3ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d3cc:	68bb      	ldr	r3, [r7, #8]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	371c      	adds	r7, #28
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d3da:	b480      	push	{r7}
 800d3dc:	b083      	sub	sp, #12
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	695b      	ldr	r3, [r3, #20]
 800d3e6:	f003 0301 	and.w	r3, r3, #1
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	370c      	adds	r7, #12
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
	...

0800d3f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d412:	4619      	mov	r1, r3
 800d414:	4b09      	ldr	r3, [pc, #36]	@ (800d43c <USB_ActivateSetup+0x44>)
 800d416:	4013      	ands	r3, r2
 800d418:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d42c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	fffff800 	.word	0xfffff800

0800d440 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d440:	b480      	push	{r7}
 800d442:	b087      	sub	sp, #28
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	460b      	mov	r3, r1
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	333c      	adds	r3, #60	@ 0x3c
 800d456:	3304      	adds	r3, #4
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	4a26      	ldr	r2, [pc, #152]	@ (800d4f8 <USB_EP0_OutStart+0xb8>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d90a      	bls.n	800d47a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d474:	d101      	bne.n	800d47a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d476:	2300      	movs	r3, #0
 800d478:	e037      	b.n	800d4ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d480:	461a      	mov	r2, r3
 800d482:	2300      	movs	r3, #0
 800d484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d494:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	697a      	ldr	r2, [r7, #20]
 800d4a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4a8:	f043 0318 	orr.w	r3, r3, #24
 800d4ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d4c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d4c2:	7afb      	ldrb	r3, [r7, #11]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d10f      	bne.n	800d4e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	697a      	ldr	r2, [r7, #20]
 800d4de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d4e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4e8:	2300      	movs	r3, #0
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	371c      	adds	r7, #28
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	4f54300a 	.word	0x4f54300a

0800d4fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d504:	2300      	movs	r3, #0
 800d506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	3301      	adds	r3, #1
 800d50c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d514:	d901      	bls.n	800d51a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d516:	2303      	movs	r3, #3
 800d518:	e01b      	b.n	800d552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	daf2      	bge.n	800d508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d522:	2300      	movs	r3, #0
 800d524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	f043 0201 	orr.w	r2, r3, #1
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3301      	adds	r3, #1
 800d536:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d53e:	d901      	bls.n	800d544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d540:	2303      	movs	r3, #3
 800d542:	e006      	b.n	800d552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d0f0      	beq.n	800d532 <USB_CoreReset+0x36>

  return HAL_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
	...

0800d560 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	460b      	mov	r3, r1
 800d56a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d56c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800d570:	f003 ffb0 	bl	80114d4 <USBD_static_malloc>
 800d574:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d109      	bne.n	800d590 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	32b0      	adds	r2, #176	@ 0xb0
 800d586:	2100      	movs	r1, #0
 800d588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d58c:	2302      	movs	r3, #2
 800d58e:	e06e      	b.n	800d66e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	32b0      	adds	r2, #176	@ 0xb0
 800d59a:	68f9      	ldr	r1, [r7, #12]
 800d59c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	32b0      	adds	r2, #176	@ 0xb0
 800d5aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	7c1b      	ldrb	r3, [r3, #16]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d12b      	bne.n	800d614 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d5bc:	4b2e      	ldr	r3, [pc, #184]	@ (800d678 <USBD_MSC_Init+0x118>)
 800d5be:	7819      	ldrb	r1, [r3, #0]
 800d5c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d5c4:	2202      	movs	r2, #2
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f003 fe41 	bl	801124e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d5cc:	4b2a      	ldr	r3, [pc, #168]	@ (800d678 <USBD_MSC_Init+0x118>)
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	f003 020f 	and.w	r2, r3, #15
 800d5d4:	6879      	ldr	r1, [r7, #4]
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	4413      	add	r3, r2
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	440b      	add	r3, r1
 800d5e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d5e8:	4b24      	ldr	r3, [pc, #144]	@ (800d67c <USBD_MSC_Init+0x11c>)
 800d5ea:	7819      	ldrb	r1, [r3, #0]
 800d5ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d5f0:	2202      	movs	r2, #2
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f003 fe2b 	bl	801124e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d5f8:	4b20      	ldr	r3, [pc, #128]	@ (800d67c <USBD_MSC_Init+0x11c>)
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	f003 020f 	and.w	r2, r3, #15
 800d600:	6879      	ldr	r1, [r7, #4]
 800d602:	4613      	mov	r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4413      	add	r3, r2
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	440b      	add	r3, r1
 800d60c:	3324      	adds	r3, #36	@ 0x24
 800d60e:	2201      	movs	r2, #1
 800d610:	801a      	strh	r2, [r3, #0]
 800d612:	e028      	b.n	800d666 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d614:	4b18      	ldr	r3, [pc, #96]	@ (800d678 <USBD_MSC_Init+0x118>)
 800d616:	7819      	ldrb	r1, [r3, #0]
 800d618:	2340      	movs	r3, #64	@ 0x40
 800d61a:	2202      	movs	r2, #2
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f003 fe16 	bl	801124e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800d622:	4b15      	ldr	r3, [pc, #84]	@ (800d678 <USBD_MSC_Init+0x118>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	f003 020f 	and.w	r2, r3, #15
 800d62a:	6879      	ldr	r1, [r7, #4]
 800d62c:	4613      	mov	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	440b      	add	r3, r1
 800d636:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d63a:	2201      	movs	r2, #1
 800d63c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d63e:	4b0f      	ldr	r3, [pc, #60]	@ (800d67c <USBD_MSC_Init+0x11c>)
 800d640:	7819      	ldrb	r1, [r3, #0]
 800d642:	2340      	movs	r3, #64	@ 0x40
 800d644:	2202      	movs	r2, #2
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f003 fe01 	bl	801124e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800d64c:	4b0b      	ldr	r3, [pc, #44]	@ (800d67c <USBD_MSC_Init+0x11c>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	f003 020f 	and.w	r2, r3, #15
 800d654:	6879      	ldr	r1, [r7, #4]
 800d656:	4613      	mov	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4413      	add	r3, r2
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	440b      	add	r3, r1
 800d660:	3324      	adds	r3, #36	@ 0x24
 800d662:	2201      	movs	r2, #1
 800d664:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fa2c 	bl	800dac4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	24000073 	.word	0x24000073
 800d67c:	24000072 	.word	0x24000072

0800d680 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	460b      	mov	r3, r1
 800d68a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800d68c:	4b26      	ldr	r3, [pc, #152]	@ (800d728 <USBD_MSC_DeInit+0xa8>)
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f003 fe01 	bl	801129a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800d698:	4b23      	ldr	r3, [pc, #140]	@ (800d728 <USBD_MSC_DeInit+0xa8>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	f003 020f 	and.w	r2, r3, #15
 800d6a0:	6879      	ldr	r1, [r7, #4]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	440b      	add	r3, r1
 800d6ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800d6b4:	4b1d      	ldr	r3, [pc, #116]	@ (800d72c <USBD_MSC_DeInit+0xac>)
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f003 fded 	bl	801129a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800d6c0:	4b1a      	ldr	r3, [pc, #104]	@ (800d72c <USBD_MSC_DeInit+0xac>)
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	f003 020f 	and.w	r2, r3, #15
 800d6c8:	6879      	ldr	r1, [r7, #4]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	440b      	add	r3, r1
 800d6d4:	3324      	adds	r3, #36	@ 0x24
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	32b0      	adds	r2, #176	@ 0xb0
 800d6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d018      	beq.n	800d71e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 fa67 	bl	800dbc0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	32b0      	adds	r2, #176	@ 0xb0
 800d6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d700:	4618      	mov	r0, r3
 800d702:	f003 fef5 	bl	80114f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	32b0      	adds	r2, #176	@ 0xb0
 800d710:	2100      	movs	r1, #0
 800d712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	24000073 	.word	0x24000073
 800d72c:	24000072 	.word	0x24000072

0800d730 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b086      	sub	sp, #24
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	32b0      	adds	r2, #176	@ 0xb0
 800d744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d748:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d74a:	2300      	movs	r3, #0
 800d74c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d74e:	2300      	movs	r3, #0
 800d750:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d101      	bne.n	800d75c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800d758:	2303      	movs	r3, #3
 800d75a:	e0e1      	b.n	800d920 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d764:	2b00      	cmp	r3, #0
 800d766:	d053      	beq.n	800d810 <USBD_MSC_Setup+0xe0>
 800d768:	2b20      	cmp	r3, #32
 800d76a:	f040 80d1 	bne.w	800d910 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	785b      	ldrb	r3, [r3, #1]
 800d772:	2bfe      	cmp	r3, #254	@ 0xfe
 800d774:	d002      	beq.n	800d77c <USBD_MSC_Setup+0x4c>
 800d776:	2bff      	cmp	r3, #255	@ 0xff
 800d778:	d02a      	beq.n	800d7d0 <USBD_MSC_Setup+0xa0>
 800d77a:	e041      	b.n	800d800 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	885b      	ldrh	r3, [r3, #2]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d11e      	bne.n	800d7c2 <USBD_MSC_Setup+0x92>
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	88db      	ldrh	r3, [r3, #6]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d11a      	bne.n	800d7c2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d792:	2b00      	cmp	r3, #0
 800d794:	da15      	bge.n	800d7c2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	33b0      	adds	r3, #176	@ 0xb0
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	699b      	ldr	r3, [r3, #24]
 800d7a8:	4798      	blx	r3
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f003 f95d 	bl	8010a78 <USBD_CtlSendData>
 800d7be:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d7c0:	e025      	b.n	800d80e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f003 f8da 	bl	801097e <USBD_CtlError>
            ret = USBD_FAIL;
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	75fb      	strb	r3, [r7, #23]
          break;
 800d7ce:	e01e      	b.n	800d80e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	885b      	ldrh	r3, [r3, #2]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d10c      	bne.n	800d7f2 <USBD_MSC_Setup+0xc2>
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	88db      	ldrh	r3, [r3, #6]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d108      	bne.n	800d7f2 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	db03      	blt.n	800d7f2 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f9b4 	bl	800db58 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d7f0:	e00d      	b.n	800d80e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800d7f2:	6839      	ldr	r1, [r7, #0]
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f003 f8c2 	bl	801097e <USBD_CtlError>
            ret = USBD_FAIL;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	75fb      	strb	r3, [r7, #23]
          break;
 800d7fe:	e006      	b.n	800d80e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f003 f8bb 	bl	801097e <USBD_CtlError>
          ret = USBD_FAIL;
 800d808:	2303      	movs	r3, #3
 800d80a:	75fb      	strb	r3, [r7, #23]
          break;
 800d80c:	bf00      	nop
      }
      break;
 800d80e:	e086      	b.n	800d91e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	785b      	ldrb	r3, [r3, #1]
 800d814:	2b0b      	cmp	r3, #11
 800d816:	d872      	bhi.n	800d8fe <USBD_MSC_Setup+0x1ce>
 800d818:	a201      	add	r2, pc, #4	@ (adr r2, 800d820 <USBD_MSC_Setup+0xf0>)
 800d81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81e:	bf00      	nop
 800d820:	0800d851 	.word	0x0800d851
 800d824:	0800d8cd 	.word	0x0800d8cd
 800d828:	0800d8ff 	.word	0x0800d8ff
 800d82c:	0800d8ff 	.word	0x0800d8ff
 800d830:	0800d8ff 	.word	0x0800d8ff
 800d834:	0800d8ff 	.word	0x0800d8ff
 800d838:	0800d8ff 	.word	0x0800d8ff
 800d83c:	0800d8ff 	.word	0x0800d8ff
 800d840:	0800d8ff 	.word	0x0800d8ff
 800d844:	0800d8ff 	.word	0x0800d8ff
 800d848:	0800d87b 	.word	0x0800d87b
 800d84c:	0800d8a5 	.word	0x0800d8a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d856:	b2db      	uxtb	r3, r3
 800d858:	2b03      	cmp	r3, #3
 800d85a:	d107      	bne.n	800d86c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d85c:	f107 030e 	add.w	r3, r7, #14
 800d860:	2202      	movs	r2, #2
 800d862:	4619      	mov	r1, r3
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f003 f907 	bl	8010a78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d86a:	e050      	b.n	800d90e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800d86c:	6839      	ldr	r1, [r7, #0]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f003 f885 	bl	801097e <USBD_CtlError>
            ret = USBD_FAIL;
 800d874:	2303      	movs	r3, #3
 800d876:	75fb      	strb	r3, [r7, #23]
          break;
 800d878:	e049      	b.n	800d90e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b03      	cmp	r3, #3
 800d884:	d107      	bne.n	800d896 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	3304      	adds	r3, #4
 800d88a:	2201      	movs	r2, #1
 800d88c:	4619      	mov	r1, r3
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f003 f8f2 	bl	8010a78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d894:	e03b      	b.n	800d90e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f003 f870 	bl	801097e <USBD_CtlError>
            ret = USBD_FAIL;
 800d89e:	2303      	movs	r3, #3
 800d8a0:	75fb      	strb	r3, [r7, #23]
          break;
 800d8a2:	e034      	b.n	800d90e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b03      	cmp	r3, #3
 800d8ae:	d106      	bne.n	800d8be <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	885b      	ldrh	r3, [r3, #2]
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d8bc:	e027      	b.n	800d90e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f003 f85c 	bl	801097e <USBD_CtlError>
            ret = USBD_FAIL;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d8ca:	e020      	b.n	800d90e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	2b03      	cmp	r3, #3
 800d8d6:	d119      	bne.n	800d90c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	885b      	ldrh	r3, [r3, #2]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d115      	bne.n	800d90c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	889b      	ldrh	r3, [r3, #4]
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f003 fcf5 	bl	80112d8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	889b      	ldrh	r3, [r3, #4]
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 fb2e 	bl	800df58 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800d8fc:	e006      	b.n	800d90c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800d8fe:	6839      	ldr	r1, [r7, #0]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f003 f83c 	bl	801097e <USBD_CtlError>
          ret = USBD_FAIL;
 800d906:	2303      	movs	r3, #3
 800d908:	75fb      	strb	r3, [r7, #23]
          break;
 800d90a:	e000      	b.n	800d90e <USBD_MSC_Setup+0x1de>
          break;
 800d90c:	bf00      	nop
      }
      break;
 800d90e:	e006      	b.n	800d91e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800d910:	6839      	ldr	r1, [r7, #0]
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f003 f833 	bl	801097e <USBD_CtlError>
      ret = USBD_FAIL;
 800d918:	2303      	movs	r3, #3
 800d91a:	75fb      	strb	r3, [r7, #23]
      break;
 800d91c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3718      	adds	r7, #24
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d934:	78fb      	ldrb	r3, [r7, #3]
 800d936:	4619      	mov	r1, r3
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f959 	bl	800dbf0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d954:	78fb      	ldrb	r3, [r7, #3]
 800d956:	4619      	mov	r1, r3
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 f983 	bl	800dc64 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d95e:	2300      	movs	r3, #0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800d970:	2181      	movs	r1, #129	@ 0x81
 800d972:	4812      	ldr	r0, [pc, #72]	@ (800d9bc <USBD_MSC_GetHSCfgDesc+0x54>)
 800d974:	f002 f9a4 	bl	800fcc0 <USBD_GetEpDesc>
 800d978:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800d97a:	2101      	movs	r1, #1
 800d97c:	480f      	ldr	r0, [pc, #60]	@ (800d9bc <USBD_MSC_GetHSCfgDesc+0x54>)
 800d97e:	f002 f99f 	bl	800fcc0 <USBD_GetEpDesc>
 800d982:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d006      	beq.n	800d998 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2200      	movs	r2, #0
 800d98e:	711a      	strb	r2, [r3, #4]
 800d990:	2200      	movs	r2, #0
 800d992:	f042 0202 	orr.w	r2, r2, #2
 800d996:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d006      	beq.n	800d9ac <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	711a      	strb	r2, [r3, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f042 0202 	orr.w	r2, r2, #2
 800d9aa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2220      	movs	r2, #32
 800d9b0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800d9b2:	4b02      	ldr	r3, [pc, #8]	@ (800d9bc <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3710      	adds	r7, #16
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	24000048 	.word	0x24000048

0800d9c0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800d9c8:	2181      	movs	r1, #129	@ 0x81
 800d9ca:	4812      	ldr	r0, [pc, #72]	@ (800da14 <USBD_MSC_GetFSCfgDesc+0x54>)
 800d9cc:	f002 f978 	bl	800fcc0 <USBD_GetEpDesc>
 800d9d0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	480f      	ldr	r0, [pc, #60]	@ (800da14 <USBD_MSC_GetFSCfgDesc+0x54>)
 800d9d6:	f002 f973 	bl	800fcc0 <USBD_GetEpDesc>
 800d9da:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d006      	beq.n	800d9f0 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d9ea:	711a      	strb	r2, [r3, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d006      	beq.n	800da04 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d9fe:	711a      	strb	r2, [r3, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2220      	movs	r2, #32
 800da08:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800da0a:	4b02      	ldr	r3, [pc, #8]	@ (800da14 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	24000048 	.word	0x24000048

0800da18 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800da20:	2181      	movs	r1, #129	@ 0x81
 800da22:	4812      	ldr	r0, [pc, #72]	@ (800da6c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800da24:	f002 f94c 	bl	800fcc0 <USBD_GetEpDesc>
 800da28:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800da2a:	2101      	movs	r1, #1
 800da2c:	480f      	ldr	r0, [pc, #60]	@ (800da6c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800da2e:	f002 f947 	bl	800fcc0 <USBD_GetEpDesc>
 800da32:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d006      	beq.n	800da48 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da42:	711a      	strb	r2, [r3, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d006      	beq.n	800da5c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	2200      	movs	r2, #0
 800da52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da56:	711a      	strb	r2, [r3, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2220      	movs	r2, #32
 800da60:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800da62:	4b02      	ldr	r3, [pc, #8]	@ (800da6c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800da64:	4618      	mov	r0, r3
 800da66:	3710      	adds	r7, #16
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	24000048 	.word	0x24000048

0800da70 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	220a      	movs	r2, #10
 800da7c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800da7e:	4b03      	ldr	r3, [pc, #12]	@ (800da8c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800da80:	4618      	mov	r0, r3
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	24000068 	.word	0x24000068

0800da90 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d101      	bne.n	800daa4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800daa0:	2303      	movs	r3, #3
 800daa2:	e009      	b.n	800dab8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	33b0      	adds	r3, #176	@ 0xb0
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	4413      	add	r3, r2
 800dab2:	683a      	ldr	r2, [r7, #0]
 800dab4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dab6:	2300      	movs	r3, #0
}
 800dab8:	4618      	mov	r0, r3
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	32b0      	adds	r2, #176	@ 0xb0
 800dad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dada:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d032      	beq.n	800db48 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	33b0      	adds	r3, #176	@ 0xb0
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4413      	add	r3, r2
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2000      	movs	r0, #0
 800db1a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800db1c:	4b0c      	ldr	r3, [pc, #48]	@ (800db50 <MSC_BOT_Init+0x8c>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f003 fbd8 	bl	80112d8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800db28:	4b0a      	ldr	r3, [pc, #40]	@ (800db54 <MSC_BOT_Init+0x90>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	4619      	mov	r1, r3
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f003 fbd2 	bl	80112d8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800db34:	4b06      	ldr	r3, [pc, #24]	@ (800db50 <MSC_BOT_Init+0x8c>)
 800db36:	7819      	ldrb	r1, [r3, #0]
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800db3e:	231f      	movs	r3, #31
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f003 fc92 	bl	801146a <USBD_LL_PrepareReceive>
 800db46:	e000      	b.n	800db4a <MSC_BOT_Init+0x86>
    return;
 800db48:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	24000073 	.word	0x24000073
 800db54:	24000072 	.word	0x24000072

0800db58 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	32b0      	adds	r2, #176	@ 0xb0
 800db6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db6e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d01b      	beq.n	800dbae <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2201      	movs	r2, #1
 800db80:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800db82:	4b0d      	ldr	r3, [pc, #52]	@ (800dbb8 <MSC_BOT_Reset+0x60>)
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	4619      	mov	r1, r3
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f003 fbe3 	bl	8011354 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800db8e:	4b0b      	ldr	r3, [pc, #44]	@ (800dbbc <MSC_BOT_Reset+0x64>)
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f003 fbdd 	bl	8011354 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800db9a:	4b08      	ldr	r3, [pc, #32]	@ (800dbbc <MSC_BOT_Reset+0x64>)
 800db9c:	7819      	ldrb	r1, [r3, #0]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800dba4:	231f      	movs	r3, #31
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f003 fc5f 	bl	801146a <USBD_LL_PrepareReceive>
 800dbac:	e000      	b.n	800dbb0 <MSC_BOT_Reset+0x58>
    return;
 800dbae:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	24000072 	.word	0x24000072
 800dbbc:	24000073 	.word	0x24000073

0800dbc0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	32b0      	adds	r2, #176	@ 0xb0
 800dbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbd6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d002      	beq.n	800dbe4 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	721a      	strb	r2, [r3, #8]
  }
}
 800dbe4:	bf00      	nop
 800dbe6:	3714      	adds	r7, #20
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	32b0      	adds	r2, #176	@ 0xb0
 800dc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc0a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d020      	beq.n	800dc54 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	7a1b      	ldrb	r3, [r3, #8]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d005      	beq.n	800dc26 <MSC_BOT_DataIn+0x36>
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	db1c      	blt.n	800dc58 <MSC_BOT_DataIn+0x68>
 800dc1e:	3b03      	subs	r3, #3
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d819      	bhi.n	800dc58 <MSC_BOT_DataIn+0x68>
 800dc24:	e011      	b.n	800dc4a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800dc32:	461a      	mov	r2, r3
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 f9c9 	bl	800dfcc <SCSI_ProcessCmd>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	da0d      	bge.n	800dc5c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dc40:	2101      	movs	r1, #1
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 f90c 	bl	800de60 <MSC_BOT_SendCSW>
      }
      break;
 800dc48:	e008      	b.n	800dc5c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f907 	bl	800de60 <MSC_BOT_SendCSW>
      break;
 800dc52:	e004      	b.n	800dc5e <MSC_BOT_DataIn+0x6e>
    return;
 800dc54:	bf00      	nop
 800dc56:	e002      	b.n	800dc5e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800dc58:	bf00      	nop
 800dc5a:	e000      	b.n	800dc5e <MSC_BOT_DataIn+0x6e>
      break;
 800dc5c:	bf00      	nop
  }
}
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	32b0      	adds	r2, #176	@ 0xb0
 800dc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc7e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d01c      	beq.n	800dcc0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	7a1b      	ldrb	r3, [r3, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d002      	beq.n	800dc94 <MSC_BOT_DataOut+0x30>
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d004      	beq.n	800dc9c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800dc92:	e018      	b.n	800dcc6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 f819 	bl	800dccc <MSC_BOT_CBW_Decode>
      break;
 800dc9a:	e014      	b.n	800dcc6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800dca8:	461a      	mov	r2, r3
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f98e 	bl	800dfcc <SCSI_ProcessCmd>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	da06      	bge.n	800dcc4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dcb6:	2101      	movs	r1, #1
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f8d1 	bl	800de60 <MSC_BOT_SendCSW>
      break;
 800dcbe:	e001      	b.n	800dcc4 <MSC_BOT_DataOut+0x60>
    return;
 800dcc0:	bf00      	nop
 800dcc2:	e000      	b.n	800dcc6 <MSC_BOT_DataOut+0x62>
      break;
 800dcc4:	bf00      	nop
  }
}
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	32b0      	adds	r2, #176	@ 0xb0
 800dcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d079      	beq.n	800ddde <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800dd02:	4b3a      	ldr	r3, [pc, #232]	@ (800ddec <MSC_BOT_CBW_Decode+0x120>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	4619      	mov	r1, r3
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f003 fbcf 	bl	80114ac <USBD_LL_GetRxDataSize>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b1f      	cmp	r3, #31
 800dd12:	d114      	bne.n	800dd3e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800dd1a:	4a35      	ldr	r2, [pc, #212]	@ (800ddf0 <MSC_BOT_CBW_Decode+0x124>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d10e      	bne.n	800dd3e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d809      	bhi.n	800dd3e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d004      	beq.n	800dd3e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800dd3a:	2b10      	cmp	r3, #16
 800dd3c:	d90e      	bls.n	800dd5c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dd44:	2320      	movs	r3, #32
 800dd46:	2205      	movs	r2, #5
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 fe54 	bl	800e9f6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2202      	movs	r2, #2
 800dd52:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f8bd 	bl	800ded4 <MSC_BOT_Abort>
 800dd5a:	e043      	b.n	800dde4 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800dd68:	461a      	mov	r2, r3
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f92e 	bl	800dfcc <SCSI_ProcessCmd>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	da0c      	bge.n	800dd90 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	7a1b      	ldrb	r3, [r3, #8]
 800dd7a:	2b05      	cmp	r3, #5
 800dd7c:	d104      	bne.n	800dd88 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dd7e:	2101      	movs	r1, #1
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 f86d 	bl	800de60 <MSC_BOT_SendCSW>
 800dd86:	e02d      	b.n	800dde4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 f8a3 	bl	800ded4 <MSC_BOT_Abort>
 800dd8e:	e029      	b.n	800dde4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	7a1b      	ldrb	r3, [r3, #8]
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d024      	beq.n	800dde2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d020      	beq.n	800dde2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dda4:	2b03      	cmp	r3, #3
 800dda6:	d01c      	beq.n	800dde2 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d009      	beq.n	800ddc4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f103 0110 	add.w	r1, r3, #16
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 f819 	bl	800ddf4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800ddc2:	e00f      	b.n	800dde4 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d104      	bne.n	800ddd6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ddcc:	2100      	movs	r1, #0
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 f846 	bl	800de60 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800ddd4:	e006      	b.n	800dde4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 f87c 	bl	800ded4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800dddc:	e002      	b.n	800dde4 <MSC_BOT_CBW_Decode+0x118>
    return;
 800ddde:	bf00      	nop
 800dde0:	e000      	b.n	800dde4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800dde2:	bf00      	nop
    }
  }
}
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	24000073 	.word	0x24000073
 800ddf0:	43425355 	.word	0x43425355

0800ddf4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b086      	sub	sp, #24
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	32b0      	adds	r2, #176	@ 0xb0
 800de0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de0e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d01e      	beq.n	800de54 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	4293      	cmp	r3, r2
 800de20:	bf28      	it	cs
 800de22:	4613      	movcs	r3, r2
 800de24:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	1ad2      	subs	r2, r2, r3
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	2204      	movs	r2, #4
 800de42:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800de44:	4b05      	ldr	r3, [pc, #20]	@ (800de5c <MSC_BOT_SendData+0x68>)
 800de46:	7819      	ldrb	r1, [r3, #0]
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	68ba      	ldr	r2, [r7, #8]
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f003 faeb 	bl	8011428 <USBD_LL_Transmit>
 800de52:	e000      	b.n	800de56 <MSC_BOT_SendData+0x62>
    return;
 800de54:	bf00      	nop
}
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	24000072 	.word	0x24000072

0800de60 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	460b      	mov	r3, r1
 800de6a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	32b0      	adds	r2, #176	@ 0xb0
 800de76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de7a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d01d      	beq.n	800debe <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	4a10      	ldr	r2, [pc, #64]	@ (800dec8 <MSC_BOT_SendCSW+0x68>)
 800de86:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	78fa      	ldrb	r2, [r7, #3]
 800de8e:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800de98:	4b0c      	ldr	r3, [pc, #48]	@ (800decc <MSC_BOT_SendCSW+0x6c>)
 800de9a:	7819      	ldrb	r1, [r3, #0]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800dea2:	230d      	movs	r3, #13
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f003 fabf 	bl	8011428 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800deaa:	4b09      	ldr	r3, [pc, #36]	@ (800ded0 <MSC_BOT_SendCSW+0x70>)
 800deac:	7819      	ldrb	r1, [r3, #0]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800deb4:	231f      	movs	r3, #31
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f003 fad7 	bl	801146a <USBD_LL_PrepareReceive>
 800debc:	e000      	b.n	800dec0 <MSC_BOT_SendCSW+0x60>
    return;
 800debe:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	53425355 	.word	0x53425355
 800decc:	24000072 	.word	0x24000072
 800ded0:	24000073 	.word	0x24000073

0800ded4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	32b0      	adds	r2, #176	@ 0xb0
 800dee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deea:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d02a      	beq.n	800df48 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10e      	bne.n	800df1a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800df02:	2b00      	cmp	r3, #0
 800df04:	d009      	beq.n	800df1a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d105      	bne.n	800df1a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800df0e:	4b10      	ldr	r3, [pc, #64]	@ (800df50 <MSC_BOT_Abort+0x7c>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	4619      	mov	r1, r3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f003 f9fe 	bl	8011316 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800df1a:	4b0e      	ldr	r3, [pc, #56]	@ (800df54 <MSC_BOT_Abort+0x80>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f003 f9f8 	bl	8011316 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	7a5b      	ldrb	r3, [r3, #9]
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d10d      	bne.n	800df4a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800df2e:	4b09      	ldr	r3, [pc, #36]	@ (800df54 <MSC_BOT_Abort+0x80>)
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	4619      	mov	r1, r3
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f003 f9ee 	bl	8011316 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800df3a:	4b05      	ldr	r3, [pc, #20]	@ (800df50 <MSC_BOT_Abort+0x7c>)
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	4619      	mov	r1, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f003 f9e8 	bl	8011316 <USBD_LL_StallEP>
 800df46:	e000      	b.n	800df4a <MSC_BOT_Abort+0x76>
    return;
 800df48:	bf00      	nop
  }
}
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	24000073 	.word	0x24000073
 800df54:	24000072 	.word	0x24000072

0800df58 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	460b      	mov	r3, r1
 800df62:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	32b0      	adds	r2, #176	@ 0xb0
 800df6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df72:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d01d      	beq.n	800dfb6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	7a5b      	ldrb	r3, [r3, #9]
 800df7e:	2b02      	cmp	r3, #2
 800df80:	d10c      	bne.n	800df9c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800df82:	4b10      	ldr	r3, [pc, #64]	@ (800dfc4 <MSC_BOT_CplClrFeature+0x6c>)
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	4619      	mov	r1, r3
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f003 f9c4 	bl	8011316 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800df8e:	4b0e      	ldr	r3, [pc, #56]	@ (800dfc8 <MSC_BOT_CplClrFeature+0x70>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	4619      	mov	r1, r3
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f003 f9be 	bl	8011316 <USBD_LL_StallEP>
 800df9a:	e00f      	b.n	800dfbc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800df9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	da0a      	bge.n	800dfba <MSC_BOT_CplClrFeature+0x62>
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	7a5b      	ldrb	r3, [r3, #9]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d006      	beq.n	800dfba <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dfac:	2101      	movs	r1, #1
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff ff56 	bl	800de60 <MSC_BOT_SendCSW>
 800dfb4:	e002      	b.n	800dfbc <MSC_BOT_CplClrFeature+0x64>
    return;
 800dfb6:	bf00      	nop
 800dfb8:	e000      	b.n	800dfbc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800dfba:	bf00      	nop
  }
}
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	24000072 	.word	0x24000072
 800dfc8:	24000073 	.word	0x24000073

0800dfcc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b086      	sub	sp, #24
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	607a      	str	r2, [r7, #4]
 800dfd8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	32b0      	adds	r2, #176	@ 0xb0
 800dfe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfe8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d102      	bne.n	800dff6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800dff0:	f04f 33ff 	mov.w	r3, #4294967295
 800dff4:	e168      	b.n	800e2c8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	2baa      	cmp	r3, #170	@ 0xaa
 800dffc:	f000 8144 	beq.w	800e288 <SCSI_ProcessCmd+0x2bc>
 800e000:	2baa      	cmp	r3, #170	@ 0xaa
 800e002:	f300 8153 	bgt.w	800e2ac <SCSI_ProcessCmd+0x2e0>
 800e006:	2ba8      	cmp	r3, #168	@ 0xa8
 800e008:	f000 812c 	beq.w	800e264 <SCSI_ProcessCmd+0x298>
 800e00c:	2ba8      	cmp	r3, #168	@ 0xa8
 800e00e:	f300 814d 	bgt.w	800e2ac <SCSI_ProcessCmd+0x2e0>
 800e012:	2b5a      	cmp	r3, #90	@ 0x5a
 800e014:	f300 80c0 	bgt.w	800e198 <SCSI_ProcessCmd+0x1cc>
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f2c0 8147 	blt.w	800e2ac <SCSI_ProcessCmd+0x2e0>
 800e01e:	2b5a      	cmp	r3, #90	@ 0x5a
 800e020:	f200 8144 	bhi.w	800e2ac <SCSI_ProcessCmd+0x2e0>
 800e024:	a201      	add	r2, pc, #4	@ (adr r2, 800e02c <SCSI_ProcessCmd+0x60>)
 800e026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02a:	bf00      	nop
 800e02c:	0800e19f 	.word	0x0800e19f
 800e030:	0800e2ad 	.word	0x0800e2ad
 800e034:	0800e2ad 	.word	0x0800e2ad
 800e038:	0800e1b1 	.word	0x0800e1b1
 800e03c:	0800e2ad 	.word	0x0800e2ad
 800e040:	0800e2ad 	.word	0x0800e2ad
 800e044:	0800e2ad 	.word	0x0800e2ad
 800e048:	0800e2ad 	.word	0x0800e2ad
 800e04c:	0800e2ad 	.word	0x0800e2ad
 800e050:	0800e2ad 	.word	0x0800e2ad
 800e054:	0800e2ad 	.word	0x0800e2ad
 800e058:	0800e2ad 	.word	0x0800e2ad
 800e05c:	0800e2ad 	.word	0x0800e2ad
 800e060:	0800e2ad 	.word	0x0800e2ad
 800e064:	0800e2ad 	.word	0x0800e2ad
 800e068:	0800e2ad 	.word	0x0800e2ad
 800e06c:	0800e2ad 	.word	0x0800e2ad
 800e070:	0800e2ad 	.word	0x0800e2ad
 800e074:	0800e1c3 	.word	0x0800e1c3
 800e078:	0800e2ad 	.word	0x0800e2ad
 800e07c:	0800e2ad 	.word	0x0800e2ad
 800e080:	0800e2ad 	.word	0x0800e2ad
 800e084:	0800e2ad 	.word	0x0800e2ad
 800e088:	0800e2ad 	.word	0x0800e2ad
 800e08c:	0800e2ad 	.word	0x0800e2ad
 800e090:	0800e2ad 	.word	0x0800e2ad
 800e094:	0800e1f9 	.word	0x0800e1f9
 800e098:	0800e1d5 	.word	0x0800e1d5
 800e09c:	0800e2ad 	.word	0x0800e2ad
 800e0a0:	0800e2ad 	.word	0x0800e2ad
 800e0a4:	0800e1e7 	.word	0x0800e1e7
 800e0a8:	0800e2ad 	.word	0x0800e2ad
 800e0ac:	0800e2ad 	.word	0x0800e2ad
 800e0b0:	0800e2ad 	.word	0x0800e2ad
 800e0b4:	0800e2ad 	.word	0x0800e2ad
 800e0b8:	0800e21d 	.word	0x0800e21d
 800e0bc:	0800e2ad 	.word	0x0800e2ad
 800e0c0:	0800e22f 	.word	0x0800e22f
 800e0c4:	0800e2ad 	.word	0x0800e2ad
 800e0c8:	0800e2ad 	.word	0x0800e2ad
 800e0cc:	0800e253 	.word	0x0800e253
 800e0d0:	0800e2ad 	.word	0x0800e2ad
 800e0d4:	0800e277 	.word	0x0800e277
 800e0d8:	0800e2ad 	.word	0x0800e2ad
 800e0dc:	0800e2ad 	.word	0x0800e2ad
 800e0e0:	0800e2ad 	.word	0x0800e2ad
 800e0e4:	0800e2ad 	.word	0x0800e2ad
 800e0e8:	0800e29b 	.word	0x0800e29b
 800e0ec:	0800e2ad 	.word	0x0800e2ad
 800e0f0:	0800e2ad 	.word	0x0800e2ad
 800e0f4:	0800e2ad 	.word	0x0800e2ad
 800e0f8:	0800e2ad 	.word	0x0800e2ad
 800e0fc:	0800e2ad 	.word	0x0800e2ad
 800e100:	0800e2ad 	.word	0x0800e2ad
 800e104:	0800e2ad 	.word	0x0800e2ad
 800e108:	0800e2ad 	.word	0x0800e2ad
 800e10c:	0800e2ad 	.word	0x0800e2ad
 800e110:	0800e2ad 	.word	0x0800e2ad
 800e114:	0800e2ad 	.word	0x0800e2ad
 800e118:	0800e2ad 	.word	0x0800e2ad
 800e11c:	0800e2ad 	.word	0x0800e2ad
 800e120:	0800e2ad 	.word	0x0800e2ad
 800e124:	0800e2ad 	.word	0x0800e2ad
 800e128:	0800e2ad 	.word	0x0800e2ad
 800e12c:	0800e2ad 	.word	0x0800e2ad
 800e130:	0800e2ad 	.word	0x0800e2ad
 800e134:	0800e2ad 	.word	0x0800e2ad
 800e138:	0800e2ad 	.word	0x0800e2ad
 800e13c:	0800e2ad 	.word	0x0800e2ad
 800e140:	0800e2ad 	.word	0x0800e2ad
 800e144:	0800e2ad 	.word	0x0800e2ad
 800e148:	0800e2ad 	.word	0x0800e2ad
 800e14c:	0800e2ad 	.word	0x0800e2ad
 800e150:	0800e2ad 	.word	0x0800e2ad
 800e154:	0800e2ad 	.word	0x0800e2ad
 800e158:	0800e2ad 	.word	0x0800e2ad
 800e15c:	0800e2ad 	.word	0x0800e2ad
 800e160:	0800e2ad 	.word	0x0800e2ad
 800e164:	0800e2ad 	.word	0x0800e2ad
 800e168:	0800e2ad 	.word	0x0800e2ad
 800e16c:	0800e2ad 	.word	0x0800e2ad
 800e170:	0800e2ad 	.word	0x0800e2ad
 800e174:	0800e2ad 	.word	0x0800e2ad
 800e178:	0800e2ad 	.word	0x0800e2ad
 800e17c:	0800e2ad 	.word	0x0800e2ad
 800e180:	0800e2ad 	.word	0x0800e2ad
 800e184:	0800e2ad 	.word	0x0800e2ad
 800e188:	0800e2ad 	.word	0x0800e2ad
 800e18c:	0800e2ad 	.word	0x0800e2ad
 800e190:	0800e2ad 	.word	0x0800e2ad
 800e194:	0800e20b 	.word	0x0800e20b
 800e198:	2b9e      	cmp	r3, #158	@ 0x9e
 800e19a:	d051      	beq.n	800e240 <SCSI_ProcessCmd+0x274>
 800e19c:	e086      	b.n	800e2ac <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e19e:	7afb      	ldrb	r3, [r7, #11]
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f000 f893 	bl	800e2d0 <SCSI_TestUnitReady>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	75fb      	strb	r3, [r7, #23]
      break;
 800e1ae:	e089      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800e1b0:	7afb      	ldrb	r3, [r7, #11]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f000 fb9a 	bl	800e8f0 <SCSI_RequestSense>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	75fb      	strb	r3, [r7, #23]
      break;
 800e1c0:	e080      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800e1c2:	7afb      	ldrb	r3, [r7, #11]
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f000 f8db 	bl	800e384 <SCSI_Inquiry>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	75fb      	strb	r3, [r7, #23]
      break;
 800e1d2:	e077      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e1d4:	7afb      	ldrb	r3, [r7, #11]
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	4619      	mov	r1, r3
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 fc56 	bl	800ea8c <SCSI_StartStopUnit>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	75fb      	strb	r3, [r7, #23]
      break;
 800e1e4:	e06e      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e1e6:	7afb      	ldrb	r3, [r7, #11]
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f000 fca2 	bl	800eb36 <SCSI_AllowPreventRemovable>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	75fb      	strb	r3, [r7, #23]
      break;
 800e1f6:	e065      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e1f8:	7afb      	ldrb	r3, [r7, #11]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f000 faea 	bl	800e7d8 <SCSI_ModeSense6>
 800e204:	4603      	mov	r3, r0
 800e206:	75fb      	strb	r3, [r7, #23]
      break;
 800e208:	e05c      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e20a:	7afb      	ldrb	r3, [r7, #11]
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	4619      	mov	r1, r3
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f000 fb27 	bl	800e864 <SCSI_ModeSense10>
 800e216:	4603      	mov	r3, r0
 800e218:	75fb      	strb	r3, [r7, #23]
      break;
 800e21a:	e053      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e21c:	7afb      	ldrb	r3, [r7, #11]
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	4619      	mov	r1, r3
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 fa5c 	bl	800e6e0 <SCSI_ReadFormatCapacity>
 800e228:	4603      	mov	r3, r0
 800e22a:	75fb      	strb	r3, [r7, #23]
      break;
 800e22c:	e04a      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e22e:	7afb      	ldrb	r3, [r7, #11]
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	4619      	mov	r1, r3
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f000 f921 	bl	800e47c <SCSI_ReadCapacity10>
 800e23a:	4603      	mov	r3, r0
 800e23c:	75fb      	strb	r3, [r7, #23]
      break;
 800e23e:	e041      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e240:	7afb      	ldrb	r3, [r7, #11]
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	4619      	mov	r1, r3
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	f000 f996 	bl	800e578 <SCSI_ReadCapacity16>
 800e24c:	4603      	mov	r3, r0
 800e24e:	75fb      	strb	r3, [r7, #23]
      break;
 800e250:	e038      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800e252:	7afb      	ldrb	r3, [r7, #11]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	4619      	mov	r1, r3
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f000 fc99 	bl	800eb90 <SCSI_Read10>
 800e25e:	4603      	mov	r3, r0
 800e260:	75fb      	strb	r3, [r7, #23]
      break;
 800e262:	e02f      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800e264:	7afb      	ldrb	r3, [r7, #11]
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	4619      	mov	r1, r3
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f000 fd3a 	bl	800ece4 <SCSI_Read12>
 800e270:	4603      	mov	r3, r0
 800e272:	75fb      	strb	r3, [r7, #23]
      break;
 800e274:	e026      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800e276:	7afb      	ldrb	r3, [r7, #11]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	4619      	mov	r1, r3
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f000 fde5 	bl	800ee4c <SCSI_Write10>
 800e282:	4603      	mov	r3, r0
 800e284:	75fb      	strb	r3, [r7, #23]
      break;
 800e286:	e01d      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800e288:	7afb      	ldrb	r3, [r7, #11]
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	4619      	mov	r1, r3
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	f000 feb2 	bl	800eff8 <SCSI_Write12>
 800e294:	4603      	mov	r3, r0
 800e296:	75fb      	strb	r3, [r7, #23]
      break;
 800e298:	e014      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800e29a:	7afb      	ldrb	r3, [r7, #11]
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	4619      	mov	r1, r3
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f000 ff8f 	bl	800f1c4 <SCSI_Verify10>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	75fb      	strb	r3, [r7, #23]
      break;
 800e2aa:	e00b      	b.n	800e2c4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e2ac:	7af9      	ldrb	r1, [r7, #11]
 800e2ae:	2320      	movs	r3, #32
 800e2b0:	2205      	movs	r2, #5
 800e2b2:	68f8      	ldr	r0, [r7, #12]
 800e2b4:	f000 fb9f 	bl	800e9f6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800e2be:	23ff      	movs	r3, #255	@ 0xff
 800e2c0:	75fb      	strb	r3, [r7, #23]
      break;
 800e2c2:	bf00      	nop
  }

  return ret;
 800e2c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	607a      	str	r2, [r7, #4]
 800e2dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	32b0      	adds	r2, #176	@ 0xb0
 800e2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d102      	bne.n	800e2fa <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800e2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f8:	e03f      	b.n	800e37a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800e30a:	2320      	movs	r3, #32
 800e30c:	2205      	movs	r2, #5
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f000 fb71 	bl	800e9f6 <SCSI_SenseCode>

    return -1;
 800e314:	f04f 33ff 	mov.w	r3, #4294967295
 800e318:	e02f      	b.n	800e37a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800e320:	2b02      	cmp	r3, #2
 800e322:	d10b      	bne.n	800e33c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e324:	7af9      	ldrb	r1, [r7, #11]
 800e326:	233a      	movs	r3, #58	@ 0x3a
 800e328:	2202      	movs	r2, #2
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	f000 fb63 	bl	800e9f6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	2205      	movs	r2, #5
 800e334:	721a      	strb	r2, [r3, #8]
    return -1;
 800e336:	f04f 33ff 	mov.w	r3, #4294967295
 800e33a:	e01e      	b.n	800e37a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	33b0      	adds	r3, #176	@ 0xb0
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	7afa      	ldrb	r2, [r7, #11]
 800e350:	4610      	mov	r0, r2
 800e352:	4798      	blx	r3
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00b      	beq.n	800e372 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e35a:	7af9      	ldrb	r1, [r7, #11]
 800e35c:	233a      	movs	r3, #58	@ 0x3a
 800e35e:	2202      	movs	r2, #2
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f000 fb48 	bl	800e9f6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	2205      	movs	r2, #5
 800e36a:	721a      	strb	r2, [r3, #8]

    return -1;
 800e36c:	f04f 33ff 	mov.w	r3, #4294967295
 800e370:	e003      	b.n	800e37a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	2200      	movs	r2, #0
 800e376:	60da      	str	r2, [r3, #12]

  return 0;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3718      	adds	r7, #24
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
	...

0800e384 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b088      	sub	sp, #32
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	460b      	mov	r3, r1
 800e38e:	607a      	str	r2, [r7, #4]
 800e390:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	32b0      	adds	r2, #176	@ 0xb0
 800e39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3a0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d102      	bne.n	800e3ae <SCSI_Inquiry+0x2a>
  {
    return -1;
 800e3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ac:	e05e      	b.n	800e46c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10a      	bne.n	800e3ce <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800e3be:	2320      	movs	r3, #32
 800e3c0:	2205      	movs	r2, #5
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f000 fb17 	bl	800e9f6 <SCSI_SenseCode>
    return -1;
 800e3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3cc:	e04e      	b.n	800e46c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	f003 0301 	and.w	r3, r3, #1
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d020      	beq.n	800e41e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	3302      	adds	r3, #2
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d105      	bne.n	800e3f2 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e3e6:	2206      	movs	r2, #6
 800e3e8:	4922      	ldr	r1, [pc, #136]	@ (800e474 <SCSI_Inquiry+0xf0>)
 800e3ea:	69b8      	ldr	r0, [r7, #24]
 800e3ec:	f001 f870 	bl	800f4d0 <SCSI_UpdateBotData>
 800e3f0:	e03b      	b.n	800e46a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	3302      	adds	r3, #2
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	2b80      	cmp	r3, #128	@ 0x80
 800e3fa:	d105      	bne.n	800e408 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e3fc:	2208      	movs	r2, #8
 800e3fe:	491e      	ldr	r1, [pc, #120]	@ (800e478 <SCSI_Inquiry+0xf4>)
 800e400:	69b8      	ldr	r0, [r7, #24]
 800e402:	f001 f865 	bl	800f4d0 <SCSI_UpdateBotData>
 800e406:	e030      	b.n	800e46a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800e40e:	2324      	movs	r3, #36	@ 0x24
 800e410:	2205      	movs	r2, #5
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f000 faef 	bl	800e9f6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e418:	f04f 33ff 	mov.w	r3, #4294967295
 800e41c:	e026      	b.n	800e46c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	33b0      	adds	r3, #176	@ 0xb0
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e42e:	69d9      	ldr	r1, [r3, #28]
 800e430:	7afa      	ldrb	r2, [r7, #11]
 800e432:	4613      	mov	r3, r2
 800e434:	00db      	lsls	r3, r3, #3
 800e436:	4413      	add	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800e43a:	440b      	add	r3, r1
 800e43c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	3304      	adds	r3, #4
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	3305      	adds	r3, #5
 800e446:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	3304      	adds	r3, #4
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	461a      	mov	r2, r3
 800e450:	8bfb      	ldrh	r3, [r7, #30]
 800e452:	4293      	cmp	r3, r2
 800e454:	d303      	bcc.n	800e45e <SCSI_Inquiry+0xda>
    {
      len = params[4];
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	3304      	adds	r3, #4
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e45e:	8bfb      	ldrh	r3, [r7, #30]
 800e460:	461a      	mov	r2, r3
 800e462:	6979      	ldr	r1, [r7, #20]
 800e464:	69b8      	ldr	r0, [r7, #24]
 800e466:	f001 f833 	bl	800f4d0 <SCSI_UpdateBotData>
  }

  return 0;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3720      	adds	r7, #32
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	24000074 	.word	0x24000074
 800e478:	2400007c 	.word	0x2400007c

0800e47c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	460b      	mov	r3, r1
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	32b0      	adds	r2, #176	@ 0xb0
 800e494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e498:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d102      	bne.n	800e4a6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800e4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a4:	e064      	b.n	800e570 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	33b0      	adds	r3, #176	@ 0xb0
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	697a      	ldr	r2, [r7, #20]
 800e4ba:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800e4c4:	7af8      	ldrb	r0, [r7, #11]
 800e4c6:	4798      	blx	r3
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e4cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d104      	bne.n	800e4de <SCSI_ReadCapacity10+0x62>
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	d108      	bne.n	800e4f0 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e4de:	7af9      	ldrb	r1, [r7, #11]
 800e4e0:	233a      	movs	r3, #58	@ 0x3a
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f000 fa86 	bl	800e9f6 <SCSI_SenseCode>
    return -1;
 800e4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ee:	e03f      	b.n	800e570 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	0e1b      	lsrs	r3, r3, #24
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e506:	3b01      	subs	r3, #1
 800e508:	0c1b      	lsrs	r3, r3, #16
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e516:	3b01      	subs	r3, #1
 800e518:	0a1b      	lsrs	r3, r3, #8
 800e51a:	b2da      	uxtb	r2, r3
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e526:	b2db      	uxtb	r3, r3
 800e528:	3b01      	subs	r3, #1
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e536:	161b      	asrs	r3, r3, #24
 800e538:	b2da      	uxtb	r2, r3
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e544:	141b      	asrs	r3, r3, #16
 800e546:	b2da      	uxtb	r2, r3
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e552:	0a1b      	lsrs	r3, r3, #8
 800e554:	b29b      	uxth	r3, r3
 800e556:	b2da      	uxtb	r2, r3
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e562:	b2da      	uxtb	r2, r3
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	2208      	movs	r2, #8
 800e56c:	60da      	str	r2, [r3, #12]

  return 0;
 800e56e:	2300      	movs	r3, #0

}
 800e570:	4618      	mov	r0, r3
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b088      	sub	sp, #32
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	460b      	mov	r3, r1
 800e582:	607a      	str	r2, [r7, #4]
 800e584:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	32b0      	adds	r2, #176	@ 0xb0
 800e590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e594:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d102      	bne.n	800e5a2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800e59c:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a0:	e09a      	b.n	800e6d8 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	33b0      	adds	r3, #176	@ 0xb0
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	4413      	add	r3, r2
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	69ba      	ldr	r2, [r7, #24]
 800e5b6:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800e5ba:	69ba      	ldr	r2, [r7, #24]
 800e5bc:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800e5c0:	7af8      	ldrb	r0, [r7, #11]
 800e5c2:	4798      	blx	r3
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e5c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d104      	bne.n	800e5da <SCSI_ReadCapacity16+0x62>
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	d108      	bne.n	800e5ec <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e5da:	7af9      	ldrb	r1, [r7, #11]
 800e5dc:	233a      	movs	r3, #58	@ 0x3a
 800e5de:	2202      	movs	r2, #2
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f000 fa08 	bl	800e9f6 <SCSI_SenseCode>
    return -1;
 800e5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ea:	e075      	b.n	800e6d8 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	330a      	adds	r3, #10
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	330b      	adds	r3, #11
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e5fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	330c      	adds	r3, #12
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e606:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	320d      	adds	r2, #13
 800e60c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e60e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e614:	2300      	movs	r3, #0
 800e616:	61fb      	str	r3, [r7, #28]
 800e618:	e008      	b.n	800e62c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800e61a:	69ba      	ldr	r2, [r7, #24]
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	4413      	add	r3, r2
 800e620:	3310      	adds	r3, #16
 800e622:	2200      	movs	r2, #0
 800e624:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	3301      	adds	r3, #1
 800e62a:	61fb      	str	r3, [r7, #28]
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	69fa      	ldr	r2, [r7, #28]
 800e632:	429a      	cmp	r2, r3
 800e634:	d3f1      	bcc.n	800e61a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e63c:	3b01      	subs	r3, #1
 800e63e:	0e1b      	lsrs	r3, r3, #24
 800e640:	b2da      	uxtb	r2, r3
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e64c:	3b01      	subs	r3, #1
 800e64e:	0c1b      	lsrs	r3, r3, #16
 800e650:	b2da      	uxtb	r2, r3
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e65c:	3b01      	subs	r3, #1
 800e65e:	0a1b      	lsrs	r3, r3, #8
 800e660:	b2da      	uxtb	r2, r3
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	3b01      	subs	r3, #1
 800e670:	b2da      	uxtb	r2, r3
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e67c:	161b      	asrs	r3, r3, #24
 800e67e:	b2da      	uxtb	r2, r3
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e68a:	141b      	asrs	r3, r3, #16
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e698:	0a1b      	lsrs	r3, r3, #8
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800e6a8:	b2da      	uxtb	r2, r3
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	330a      	adds	r3, #10
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	330b      	adds	r3, #11
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e6be:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	330c      	adds	r3, #12
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e6c8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	320d      	adds	r2, #13
 800e6ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e6d0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	60da      	str	r2, [r3, #12]

  return 0;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3720      	adds	r7, #32
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b088      	sub	sp, #32
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	32b0      	adds	r2, #176	@ 0xb0
 800e6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6fc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d102      	bne.n	800e70a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800e704:	f04f 33ff 	mov.w	r3, #4294967295
 800e708:	e061      	b.n	800e7ce <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	33b0      	adds	r3, #176	@ 0xb0
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	4413      	add	r3, r2
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	f107 0214 	add.w	r2, r7, #20
 800e720:	f107 0110 	add.w	r1, r7, #16
 800e724:	7af8      	ldrb	r0, [r7, #11]
 800e726:	4798      	blx	r3
 800e728:	4603      	mov	r3, r0
 800e72a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e72c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d104      	bne.n	800e73e <SCSI_ReadFormatCapacity+0x5e>
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800e73a:	2b02      	cmp	r3, #2
 800e73c:	d108      	bne.n	800e750 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e73e:	7af9      	ldrb	r1, [r7, #11]
 800e740:	233a      	movs	r3, #58	@ 0x3a
 800e742:	2202      	movs	r2, #2
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f000 f956 	bl	800e9f6 <SCSI_SenseCode>
    return -1;
 800e74a:	f04f 33ff 	mov.w	r3, #4294967295
 800e74e:	e03e      	b.n	800e7ce <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800e750:	2300      	movs	r3, #0
 800e752:	83fb      	strh	r3, [r7, #30]
 800e754:	e007      	b.n	800e766 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800e756:	8bfb      	ldrh	r3, [r7, #30]
 800e758:	69ba      	ldr	r2, [r7, #24]
 800e75a:	4413      	add	r3, r2
 800e75c:	2200      	movs	r2, #0
 800e75e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800e760:	8bfb      	ldrh	r3, [r7, #30]
 800e762:	3301      	adds	r3, #1
 800e764:	83fb      	strh	r3, [r7, #30]
 800e766:	8bfb      	ldrh	r3, [r7, #30]
 800e768:	2b0b      	cmp	r3, #11
 800e76a:	d9f4      	bls.n	800e756 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	2208      	movs	r2, #8
 800e770:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	3b01      	subs	r3, #1
 800e776:	0e1b      	lsrs	r3, r3, #24
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	3b01      	subs	r3, #1
 800e782:	0c1b      	lsrs	r3, r3, #16
 800e784:	b2da      	uxtb	r2, r3
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	3b01      	subs	r3, #1
 800e78e:	0a1b      	lsrs	r3, r3, #8
 800e790:	b2da      	uxtb	r2, r3
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	3b01      	subs	r3, #1
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	2202      	movs	r2, #2
 800e7a6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e7a8:	8abb      	ldrh	r3, [r7, #20]
 800e7aa:	141b      	asrs	r3, r3, #16
 800e7ac:	b2da      	uxtb	r2, r3
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e7b2:	8abb      	ldrh	r3, [r7, #20]
 800e7b4:	0a1b      	lsrs	r3, r3, #8
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	b2da      	uxtb	r2, r3
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e7be:	8abb      	ldrh	r3, [r7, #20]
 800e7c0:	b2da      	uxtb	r2, r3
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	220c      	movs	r2, #12
 800e7ca:	60da      	str	r2, [r3, #12]

  return 0;
 800e7cc:	2300      	movs	r3, #0
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3720      	adds	r7, #32
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
	...

0800e7d8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	32b0      	adds	r2, #176	@ 0xb0
 800e7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7f4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800e7f6:	2304      	movs	r3, #4
 800e7f8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d102      	bne.n	800e806 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800e800:	f04f 33ff 	mov.w	r3, #4294967295
 800e804:	e027      	b.n	800e856 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	33b0      	adds	r3, #176	@ 0xb0
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	4413      	add	r3, r2
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	7afa      	ldrb	r2, [r7, #11]
 800e81a:	4610      	mov	r0, r2
 800e81c:	4798      	blx	r3
 800e81e:	4603      	mov	r3, r0
 800e820:	2b00      	cmp	r3, #0
 800e822:	d006      	beq.n	800e832 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800e824:	4b0e      	ldr	r3, [pc, #56]	@ (800e860 <SCSI_ModeSense6+0x88>)
 800e826:	789b      	ldrb	r3, [r3, #2]
 800e828:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e82c:	b2da      	uxtb	r2, r3
 800e82e:	4b0c      	ldr	r3, [pc, #48]	@ (800e860 <SCSI_ModeSense6+0x88>)
 800e830:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3304      	adds	r3, #4
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	461a      	mov	r2, r3
 800e83a:	8afb      	ldrh	r3, [r7, #22]
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d303      	bcc.n	800e848 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	3304      	adds	r3, #4
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800e848:	8afb      	ldrh	r3, [r7, #22]
 800e84a:	461a      	mov	r2, r3
 800e84c:	4904      	ldr	r1, [pc, #16]	@ (800e860 <SCSI_ModeSense6+0x88>)
 800e84e:	6938      	ldr	r0, [r7, #16]
 800e850:	f000 fe3e 	bl	800f4d0 <SCSI_UpdateBotData>

  return 0;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3718      	adds	r7, #24
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	24000084 	.word	0x24000084

0800e864 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	460b      	mov	r3, r1
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	32b0      	adds	r2, #176	@ 0xb0
 800e87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e880:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800e882:	2308      	movs	r3, #8
 800e884:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d102      	bne.n	800e892 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295
 800e890:	e027      	b.n	800e8e2 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	33b0      	adds	r3, #176	@ 0xb0
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4413      	add	r3, r2
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	7afa      	ldrb	r2, [r7, #11]
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	4798      	blx	r3
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d006      	beq.n	800e8be <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800e8b0:	4b0e      	ldr	r3, [pc, #56]	@ (800e8ec <SCSI_ModeSense10+0x88>)
 800e8b2:	78db      	ldrb	r3, [r3, #3]
 800e8b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e8ec <SCSI_ModeSense10+0x88>)
 800e8bc:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	8afb      	ldrh	r3, [r7, #22]
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d303      	bcc.n	800e8d4 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3308      	adds	r3, #8
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800e8d4:	8afb      	ldrh	r3, [r7, #22]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	4904      	ldr	r1, [pc, #16]	@ (800e8ec <SCSI_ModeSense10+0x88>)
 800e8da:	6938      	ldr	r0, [r7, #16]
 800e8dc:	f000 fdf8 	bl	800f4d0 <SCSI_UpdateBotData>

  return 0;
 800e8e0:	2300      	movs	r3, #0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3718      	adds	r7, #24
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	24000088 	.word	0x24000088

0800e8f0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	607a      	str	r2, [r7, #4]
 800e8fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	32b0      	adds	r2, #176	@ 0xb0
 800e908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e90c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d102      	bne.n	800e91a <SCSI_RequestSense+0x2a>
  {
    return -1;
 800e914:	f04f 33ff 	mov.w	r3, #4294967295
 800e918:	e069      	b.n	800e9ee <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10a      	bne.n	800e93a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800e92a:	2320      	movs	r3, #32
 800e92c:	2205      	movs	r2, #5
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f000 f861 	bl	800e9f6 <SCSI_SenseCode>
    return -1;
 800e934:	f04f 33ff 	mov.w	r3, #4294967295
 800e938:	e059      	b.n	800e9ee <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e93a:	2300      	movs	r3, #0
 800e93c:	75fb      	strb	r3, [r7, #23]
 800e93e:	e007      	b.n	800e950 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800e940:	7dfb      	ldrb	r3, [r7, #23]
 800e942:	693a      	ldr	r2, [r7, #16]
 800e944:	4413      	add	r3, r2
 800e946:	2200      	movs	r2, #0
 800e948:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e94a:	7dfb      	ldrb	r3, [r7, #23]
 800e94c:	3301      	adds	r3, #1
 800e94e:	75fb      	strb	r3, [r7, #23]
 800e950:	7dfb      	ldrb	r3, [r7, #23]
 800e952:	2b11      	cmp	r3, #17
 800e954:	d9f4      	bls.n	800e940 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	2270      	movs	r2, #112	@ 0x70
 800e95a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	220c      	movs	r2, #12
 800e960:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800e96e:	429a      	cmp	r2, r3
 800e970:	d02e      	beq.n	800e9d0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e978:	461a      	mov	r2, r3
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	3248      	adds	r2, #72	@ 0x48
 800e97e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e98c:	693a      	ldr	r2, [r7, #16]
 800e98e:	3348      	adds	r3, #72	@ 0x48
 800e990:	00db      	lsls	r3, r3, #3
 800e992:	4413      	add	r3, r2
 800e994:	791a      	ldrb	r2, [r3, #4]
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e9a0:	693a      	ldr	r2, [r7, #16]
 800e9a2:	3348      	adds	r3, #72	@ 0x48
 800e9a4:	00db      	lsls	r3, r3, #3
 800e9a6:	4413      	add	r3, r2
 800e9a8:	795a      	ldrb	r2, [r3, #5]
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800e9c4:	2b04      	cmp	r3, #4
 800e9c6:	d103      	bne.n	800e9d0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	2212      	movs	r2, #18
 800e9d4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3304      	adds	r3, #4
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	2b12      	cmp	r3, #18
 800e9de:	d805      	bhi.n	800e9ec <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	3304      	adds	r3, #4
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800e9f6:	b480      	push	{r7}
 800e9f8:	b085      	sub	sp, #20
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
 800e9fe:	4608      	mov	r0, r1
 800ea00:	4611      	mov	r1, r2
 800ea02:	461a      	mov	r2, r3
 800ea04:	4603      	mov	r3, r0
 800ea06:	70fb      	strb	r3, [r7, #3]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	70bb      	strb	r3, [r7, #2]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	32b0      	adds	r2, #176	@ 0xb0
 800ea1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea1e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d02c      	beq.n	800ea80 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	3248      	adds	r2, #72	@ 0x48
 800ea32:	78b9      	ldrb	r1, [r7, #2]
 800ea34:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	3348      	adds	r3, #72	@ 0x48
 800ea42:	00db      	lsls	r3, r3, #3
 800ea44:	4413      	add	r3, r2
 800ea46:	787a      	ldrb	r2, [r7, #1]
 800ea48:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	3348      	adds	r3, #72	@ 0x48
 800ea54:	00db      	lsls	r3, r3, #3
 800ea56:	4413      	add	r3, r2
 800ea58:	2200      	movs	r2, #0
 800ea5a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ea62:	3301      	adds	r3, #1
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ea72:	2b04      	cmp	r3, #4
 800ea74:	d105      	bne.n	800ea82 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800ea7e:	e000      	b.n	800ea82 <SCSI_SenseCode+0x8c>
    return;
 800ea80:	bf00      	nop
  }
}
 800ea82:	3714      	adds	r7, #20
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr

0800ea8c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b086      	sub	sp, #24
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	460b      	mov	r3, r1
 800ea96:	607a      	str	r2, [r7, #4]
 800ea98:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	32b0      	adds	r2, #176	@ 0xb0
 800eaa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d102      	bne.n	800eab6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800eab0:	f04f 33ff 	mov.w	r3, #4294967295
 800eab4:	e03b      	b.n	800eb2e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d10f      	bne.n	800eae0 <SCSI_StartStopUnit+0x54>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	3304      	adds	r3, #4
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	f003 0303 	and.w	r3, r3, #3
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	d108      	bne.n	800eae0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800eace:	7af9      	ldrb	r1, [r7, #11]
 800ead0:	2324      	movs	r3, #36	@ 0x24
 800ead2:	2205      	movs	r2, #5
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f7ff ff8e 	bl	800e9f6 <SCSI_SenseCode>

    return -1;
 800eada:	f04f 33ff 	mov.w	r3, #4294967295
 800eade:	e026      	b.n	800eb2e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	3304      	adds	r3, #4
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	f003 0303 	and.w	r3, r3, #3
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d104      	bne.n	800eaf8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800eaf6:	e016      	b.n	800eb26 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	3304      	adds	r3, #4
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	f003 0303 	and.w	r3, r3, #3
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	d104      	bne.n	800eb10 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	2202      	movs	r2, #2
 800eb0a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800eb0e:	e00a      	b.n	800eb26 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3304      	adds	r3, #4
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	f003 0303 	and.w	r3, r3, #3
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d103      	bne.n	800eb26 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	60da      	str	r2, [r3, #12]

  return 0;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3718      	adds	r7, #24
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb36:	b480      	push	{r7}
 800eb38:	b087      	sub	sp, #28
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	60f8      	str	r0, [r7, #12]
 800eb3e:	460b      	mov	r3, r1
 800eb40:	607a      	str	r2, [r7, #4]
 800eb42:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	32b0      	adds	r2, #176	@ 0xb0
 800eb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb52:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d102      	bne.n	800eb60 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800eb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb5e:	e011      	b.n	800eb84 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	3304      	adds	r3, #4
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d104      	bne.n	800eb74 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800eb72:	e003      	b.n	800eb7c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	2201      	movs	r2, #1
 800eb78:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	60da      	str	r2, [r3, #12]

  return 0;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	371c      	adds	r7, #28
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b086      	sub	sp, #24
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	60f8      	str	r0, [r7, #12]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	607a      	str	r2, [r7, #4]
 800eb9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	32b0      	adds	r2, #176	@ 0xb0
 800eba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d102      	bne.n	800ebba <SCSI_Read10+0x2a>
  {
    return -1;
 800ebb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb8:	e090      	b.n	800ecdc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	7a1b      	ldrb	r3, [r3, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f040 8082 	bne.w	800ecc8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800ebca:	b25b      	sxtb	r3, r3
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	db0a      	blt.n	800ebe6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ebd6:	2320      	movs	r3, #32
 800ebd8:	2205      	movs	r2, #5
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f7ff ff0b 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800ebe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe4:	e07a      	b.n	800ecdc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d108      	bne.n	800ec02 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ebf0:	7af9      	ldrb	r1, [r7, #11]
 800ebf2:	233a      	movs	r3, #58	@ 0x3a
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	68f8      	ldr	r0, [r7, #12]
 800ebf8:	f7ff fefd 	bl	800e9f6 <SCSI_SenseCode>

      return -1;
 800ebfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ec00:	e06c      	b.n	800ecdc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	33b0      	adds	r3, #176	@ 0xb0
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	4413      	add	r3, r2
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	7afa      	ldrb	r2, [r7, #11]
 800ec16:	4610      	mov	r0, r2
 800ec18:	4798      	blx	r3
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d008      	beq.n	800ec32 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ec20:	7af9      	ldrb	r1, [r7, #11]
 800ec22:	233a      	movs	r3, #58	@ 0x3a
 800ec24:	2202      	movs	r2, #2
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f7ff fee5 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800ec2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec30:	e054      	b.n	800ecdc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3302      	adds	r3, #2
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	3303      	adds	r3, #3
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec42:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3304      	adds	r3, #4
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ec4c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	3205      	adds	r2, #5
 800ec52:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ec54:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	3307      	adds	r3, #7
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	021b      	lsls	r3, r3, #8
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	3208      	adds	r2, #8
 800ec68:	7812      	ldrb	r2, [r2, #0]
 800ec6a:	431a      	orrs	r2, r3
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ec7e:	7af9      	ldrb	r1, [r7, #11]
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f000 fadc 	bl	800f23e <SCSI_CheckAddressRange>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	da02      	bge.n	800ec92 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ec8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec90:	e024      	b.n	800ecdc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ec9e:	6979      	ldr	r1, [r7, #20]
 800eca0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800eca4:	fb01 f303 	mul.w	r3, r1, r3
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d00a      	beq.n	800ecc2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ecb2:	2320      	movs	r3, #32
 800ecb4:	2205      	movs	r2, #5
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f7ff fe9d 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800ecbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc0:	e00c      	b.n	800ecdc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	2202      	movs	r2, #2
 800ecc6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ecce:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ecd0:	7afb      	ldrb	r3, [r7, #11]
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f000 fadf 	bl	800f298 <SCSI_ProcessRead>
 800ecda:	4603      	mov	r3, r0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3718      	adds	r7, #24
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b086      	sub	sp, #24
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	460b      	mov	r3, r1
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	32b0      	adds	r2, #176	@ 0xb0
 800ecfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed00:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d102      	bne.n	800ed0e <SCSI_Read12+0x2a>
  {
    return -1;
 800ed08:	f04f 33ff 	mov.w	r3, #4294967295
 800ed0c:	e09a      	b.n	800ee44 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	7a1b      	ldrb	r3, [r3, #8]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f040 808c 	bne.w	800ee30 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800ed1e:	b25b      	sxtb	r3, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	db0a      	blt.n	800ed3a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ed2a:	2320      	movs	r3, #32
 800ed2c:	2205      	movs	r2, #5
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f7ff fe61 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800ed34:	f04f 33ff 	mov.w	r3, #4294967295
 800ed38:	e084      	b.n	800ee44 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d108      	bne.n	800ed56 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ed44:	7af9      	ldrb	r1, [r7, #11]
 800ed46:	233a      	movs	r3, #58	@ 0x3a
 800ed48:	2202      	movs	r2, #2
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f7ff fe53 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800ed50:	f04f 33ff 	mov.w	r3, #4294967295
 800ed54:	e076      	b.n	800ee44 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	33b0      	adds	r3, #176	@ 0xb0
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	4413      	add	r3, r2
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	7afa      	ldrb	r2, [r7, #11]
 800ed6a:	4610      	mov	r0, r2
 800ed6c:	4798      	blx	r3
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d008      	beq.n	800ed86 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ed74:	7af9      	ldrb	r1, [r7, #11]
 800ed76:	233a      	movs	r3, #58	@ 0x3a
 800ed78:	2202      	movs	r2, #2
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7ff fe3b 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800ed80:	f04f 33ff 	mov.w	r3, #4294967295
 800ed84:	e05e      	b.n	800ee44 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	3302      	adds	r3, #2
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	3303      	adds	r3, #3
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed96:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800eda0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	3205      	adds	r2, #5
 800eda6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800eda8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	3306      	adds	r3, #6
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	3307      	adds	r3, #7
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800edc0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	3308      	adds	r3, #8
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800edca:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	3209      	adds	r2, #9
 800edd0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800edd2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ede6:	7af9      	ldrb	r1, [r7, #11]
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f000 fa28 	bl	800f23e <SCSI_CheckAddressRange>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	da02      	bge.n	800edfa <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800edf4:	f04f 33ff 	mov.w	r3, #4294967295
 800edf8:	e024      	b.n	800ee44 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ee06:	6979      	ldr	r1, [r7, #20]
 800ee08:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800ee0c:	fb01 f303 	mul.w	r3, r1, r3
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d00a      	beq.n	800ee2a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ee1a:	2320      	movs	r3, #32
 800ee1c:	2205      	movs	r2, #5
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f7ff fde9 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800ee24:	f04f 33ff 	mov.w	r3, #4294967295
 800ee28:	e00c      	b.n	800ee44 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	2202      	movs	r2, #2
 800ee2e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee36:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ee38:	7afb      	ldrb	r3, [r7, #11]
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f000 fa2b 	bl	800f298 <SCSI_ProcessRead>
 800ee42:	4603      	mov	r3, r0
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3718      	adds	r7, #24
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b086      	sub	sp, #24
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	460b      	mov	r3, r1
 800ee56:	607a      	str	r2, [r7, #4]
 800ee58:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	32b0      	adds	r2, #176	@ 0xb0
 800ee64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee68:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d102      	bne.n	800ee76 <SCSI_Write10+0x2a>
  {
    return -1;
 800ee70:	f04f 33ff 	mov.w	r3, #4294967295
 800ee74:	e0ba      	b.n	800efec <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	7a1b      	ldrb	r3, [r3, #8]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f040 80b0 	bne.w	800efe0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10a      	bne.n	800eea0 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ee90:	2320      	movs	r3, #32
 800ee92:	2205      	movs	r2, #5
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f7ff fdae 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800ee9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee9e:	e0a5      	b.n	800efec <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800eea6:	b25b      	sxtb	r3, r3
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	da0a      	bge.n	800eec2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800eeb2:	2320      	movs	r3, #32
 800eeb4:	2205      	movs	r2, #5
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f7ff fd9d 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800eebc:	f04f 33ff 	mov.w	r3, #4294967295
 800eec0:	e094      	b.n	800efec <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	33b0      	adds	r3, #176	@ 0xb0
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	4413      	add	r3, r2
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	689b      	ldr	r3, [r3, #8]
 800eed4:	7afa      	ldrb	r2, [r7, #11]
 800eed6:	4610      	mov	r0, r2
 800eed8:	4798      	blx	r3
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d008      	beq.n	800eef2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eee0:	7af9      	ldrb	r1, [r7, #11]
 800eee2:	233a      	movs	r3, #58	@ 0x3a
 800eee4:	2202      	movs	r2, #2
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f7ff fd85 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800eeec:	f04f 33ff 	mov.w	r3, #4294967295
 800eef0:	e07c      	b.n	800efec <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	33b0      	adds	r3, #176	@ 0xb0
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	4413      	add	r3, r2
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	7afa      	ldrb	r2, [r7, #11]
 800ef06:	4610      	mov	r0, r2
 800ef08:	4798      	blx	r3
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d008      	beq.n	800ef22 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ef10:	7af9      	ldrb	r1, [r7, #11]
 800ef12:	2327      	movs	r3, #39	@ 0x27
 800ef14:	2202      	movs	r2, #2
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f7ff fd6d 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800ef1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef20:	e064      	b.n	800efec <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	3302      	adds	r3, #2
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	3303      	adds	r3, #3
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef32:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	3304      	adds	r3, #4
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ef3c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	3205      	adds	r2, #5
 800ef42:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ef44:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3307      	adds	r3, #7
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	3208      	adds	r2, #8
 800ef58:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ef5a:	431a      	orrs	r2, r3
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ef6e:	7af9      	ldrb	r1, [r7, #11]
 800ef70:	68f8      	ldr	r0, [r7, #12]
 800ef72:	f000 f964 	bl	800f23e <SCSI_CheckAddressRange>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	da02      	bge.n	800ef82 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ef7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef80:	e034      	b.n	800efec <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800ef88:	697a      	ldr	r2, [r7, #20]
 800ef8a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800ef8e:	fb02 f303 	mul.w	r3, r2, r3
 800ef92:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ef9a:	693a      	ldr	r2, [r7, #16]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d00a      	beq.n	800efb6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800efa6:	2320      	movs	r3, #32
 800efa8:	2205      	movs	r2, #5
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f7ff fd23 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800efb0:	f04f 33ff 	mov.w	r3, #4294967295
 800efb4:	e01a      	b.n	800efec <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efbc:	bf28      	it	cs
 800efbe:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800efc2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	2201      	movs	r2, #1
 800efc8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800efca:	4b0a      	ldr	r3, [pc, #40]	@ (800eff4 <SCSI_Write10+0x1a8>)
 800efcc:	7819      	ldrb	r1, [r3, #0]
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	f103 0210 	add.w	r2, r3, #16
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f002 fa47 	bl	801146a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	e005      	b.n	800efec <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800efe0:	7afb      	ldrb	r3, [r7, #11]
 800efe2:	4619      	mov	r1, r3
 800efe4:	68f8      	ldr	r0, [r7, #12]
 800efe6:	f000 f9dd 	bl	800f3a4 <SCSI_ProcessWrite>
 800efea:	4603      	mov	r3, r0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3718      	adds	r7, #24
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	24000073 	.word	0x24000073

0800eff8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b086      	sub	sp, #24
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	460b      	mov	r3, r1
 800f002:	607a      	str	r2, [r7, #4]
 800f004:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	32b0      	adds	r2, #176	@ 0xb0
 800f010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f014:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d102      	bne.n	800f022 <SCSI_Write12+0x2a>
  {
    return -1;
 800f01c:	f04f 33ff 	mov.w	r3, #4294967295
 800f020:	e0ca      	b.n	800f1b8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	7a1b      	ldrb	r3, [r3, #8]
 800f026:	2b00      	cmp	r3, #0
 800f028:	f040 80c0 	bne.w	800f1ac <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f032:	2b00      	cmp	r3, #0
 800f034:	d10a      	bne.n	800f04c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f03c:	2320      	movs	r3, #32
 800f03e:	2205      	movs	r2, #5
 800f040:	68f8      	ldr	r0, [r7, #12]
 800f042:	f7ff fcd8 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800f046:	f04f 33ff 	mov.w	r3, #4294967295
 800f04a:	e0b5      	b.n	800f1b8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800f052:	b25b      	sxtb	r3, r3
 800f054:	2b00      	cmp	r3, #0
 800f056:	da0a      	bge.n	800f06e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f05e:	2320      	movs	r3, #32
 800f060:	2205      	movs	r2, #5
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	f7ff fcc7 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800f068:	f04f 33ff 	mov.w	r3, #4294967295
 800f06c:	e0a4      	b.n	800f1b8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	33b0      	adds	r3, #176	@ 0xb0
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	4413      	add	r3, r2
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	7afa      	ldrb	r2, [r7, #11]
 800f082:	4610      	mov	r0, r2
 800f084:	4798      	blx	r3
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00b      	beq.n	800f0a4 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f08c:	7af9      	ldrb	r1, [r7, #11]
 800f08e:	233a      	movs	r3, #58	@ 0x3a
 800f090:	2202      	movs	r2, #2
 800f092:	68f8      	ldr	r0, [r7, #12]
 800f094:	f7ff fcaf 	bl	800e9f6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	2205      	movs	r2, #5
 800f09c:	721a      	strb	r2, [r3, #8]
      return -1;
 800f09e:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a2:	e089      	b.n	800f1b8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	33b0      	adds	r3, #176	@ 0xb0
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	4413      	add	r3, r2
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	7afa      	ldrb	r2, [r7, #11]
 800f0b8:	4610      	mov	r0, r2
 800f0ba:	4798      	blx	r3
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00b      	beq.n	800f0da <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f0c2:	7af9      	ldrb	r1, [r7, #11]
 800f0c4:	2327      	movs	r3, #39	@ 0x27
 800f0c6:	2202      	movs	r2, #2
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f7ff fc94 	bl	800e9f6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2205      	movs	r2, #5
 800f0d2:	721a      	strb	r2, [r3, #8]
      return -1;
 800f0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d8:	e06e      	b.n	800f1b8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3302      	adds	r3, #2
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	3303      	adds	r3, #3
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0ea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	3304      	adds	r3, #4
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f0f4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	3205      	adds	r2, #5
 800f0fa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f0fc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3306      	adds	r3, #6
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	3307      	adds	r3, #7
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f114:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	3308      	adds	r3, #8
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f11e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	3209      	adds	r2, #9
 800f124:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f126:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f13a:	7af9      	ldrb	r1, [r7, #11]
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f000 f87e 	bl	800f23e <SCSI_CheckAddressRange>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	da02      	bge.n	800f14e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f148:	f04f 33ff 	mov.w	r3, #4294967295
 800f14c:	e034      	b.n	800f1b8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f154:	697a      	ldr	r2, [r7, #20]
 800f156:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800f15a:	fb02 f303 	mul.w	r3, r2, r3
 800f15e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f166:	693a      	ldr	r2, [r7, #16]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d00a      	beq.n	800f182 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f172:	2320      	movs	r3, #32
 800f174:	2205      	movs	r2, #5
 800f176:	68f8      	ldr	r0, [r7, #12]
 800f178:	f7ff fc3d 	bl	800e9f6 <SCSI_SenseCode>
      return -1;
 800f17c:	f04f 33ff 	mov.w	r3, #4294967295
 800f180:	e01a      	b.n	800f1b8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f188:	bf28      	it	cs
 800f18a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800f18e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	2201      	movs	r2, #1
 800f194:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f196:	4b0a      	ldr	r3, [pc, #40]	@ (800f1c0 <SCSI_Write12+0x1c8>)
 800f198:	7819      	ldrb	r1, [r3, #0]
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	f103 0210 	add.w	r2, r3, #16
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f002 f961 	bl	801146a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	e005      	b.n	800f1b8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800f1ac:	7afb      	ldrb	r3, [r7, #11]
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f000 f8f7 	bl	800f3a4 <SCSI_ProcessWrite>
 800f1b6:	4603      	mov	r3, r0
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3718      	adds	r7, #24
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	24000073 	.word	0x24000073

0800f1c4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	32b0      	adds	r2, #176	@ 0xb0
 800f1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d102      	bne.n	800f1ee <SCSI_Verify10+0x2a>
  {
    return -1;
 800f1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ec:	e023      	b.n	800f236 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	f003 0302 	and.w	r3, r3, #2
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d008      	beq.n	800f20e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f1fc:	7af9      	ldrb	r1, [r7, #11]
 800f1fe:	2324      	movs	r3, #36	@ 0x24
 800f200:	2205      	movs	r2, #5
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f7ff fbf7 	bl	800e9f6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f208:	f04f 33ff 	mov.w	r3, #4294967295
 800f20c:	e013      	b.n	800f236 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f21a:	7af9      	ldrb	r1, [r7, #11]
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 f80e 	bl	800f23e <SCSI_CheckAddressRange>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	da02      	bge.n	800f22e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800f228:	f04f 33ff 	mov.w	r3, #4294967295
 800f22c:	e003      	b.n	800f236 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	2200      	movs	r2, #0
 800f232:	60da      	str	r2, [r3, #12]

  return 0;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3718      	adds	r7, #24
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b086      	sub	sp, #24
 800f242:	af00      	add	r7, sp, #0
 800f244:	60f8      	str	r0, [r7, #12]
 800f246:	607a      	str	r2, [r7, #4]
 800f248:	603b      	str	r3, [r7, #0]
 800f24a:	460b      	mov	r3, r1
 800f24c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	32b0      	adds	r2, #176	@ 0xb0
 800f258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f25c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d102      	bne.n	800f26a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800f264:	f04f 33ff 	mov.w	r3, #4294967295
 800f268:	e011      	b.n	800f28e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	441a      	add	r2, r3
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800f276:	429a      	cmp	r2, r3
 800f278:	d908      	bls.n	800f28c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f27a:	7af9      	ldrb	r1, [r7, #11]
 800f27c:	2321      	movs	r3, #33	@ 0x21
 800f27e:	2205      	movs	r2, #5
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f7ff fbb8 	bl	800e9f6 <SCSI_SenseCode>
    return -1;
 800f286:	f04f 33ff 	mov.w	r3, #4294967295
 800f28a:	e000      	b.n	800f28e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800f28c:	2300      	movs	r3, #0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
	...

0800f298 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f298:	b590      	push	{r4, r7, lr}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	32b0      	adds	r2, #176	@ 0xb0
 800f2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2b2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d102      	bne.n	800f2c0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800f2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f2be:	e06a      	b.n	800f396 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800f2cc:	fb02 f303 	mul.w	r3, r2, r3
 800f2d0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2d8:	bf28      	it	cs
 800f2da:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800f2de:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	33b0      	adds	r3, #176	@ 0xb0
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4413      	add	r3, r2
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	691c      	ldr	r4, [r3, #16]
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f103 0110 	add.w	r1, r3, #16
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f304:	4618      	mov	r0, r3
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	78f8      	ldrb	r0, [r7, #3]
 800f310:	47a0      	blx	r4
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	da08      	bge.n	800f32a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f318:	78f9      	ldrb	r1, [r7, #3]
 800f31a:	2311      	movs	r3, #17
 800f31c:	2204      	movs	r2, #4
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f7ff fb69 	bl	800e9f6 <SCSI_SenseCode>
    return -1;
 800f324:	f04f 33ff 	mov.w	r3, #4294967295
 800f328:	e035      	b.n	800f396 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800f32a:	4b1d      	ldr	r3, [pc, #116]	@ (800f3a0 <SCSI_ProcessRead+0x108>)
 800f32c:	7819      	ldrb	r1, [r3, #0]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f103 0210 	add.w	r2, r3, #16
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f002 f876 	bl	8011428 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f348:	4619      	mov	r1, r3
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f350:	441a      	add	r2, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f364:	4619      	mov	r1, r3
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	fbb3 f3f1 	udiv	r3, r3, r1
 800f36c:	1ad2      	subs	r2, r2, r3
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	1ad2      	subs	r2, r2, r3
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d102      	bne.n	800f394 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2203      	movs	r2, #3
 800f392:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f394:	2300      	movs	r3, #0
}
 800f396:	4618      	mov	r0, r3
 800f398:	3714      	adds	r7, #20
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd90      	pop	{r4, r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	24000072 	.word	0x24000072

0800f3a4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f3a4:	b590      	push	{r4, r7, lr}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	32b0      	adds	r2, #176	@ 0xb0
 800f3ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3be:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d102      	bne.n	800f3cc <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800f3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ca:	e07a      	b.n	800f4c2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800f3d8:	fb02 f303 	mul.w	r3, r2, r3
 800f3dc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f3e4:	bf28      	it	cs
 800f3e6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800f3ea:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	33b0      	adds	r3, #176	@ 0xb0
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	4413      	add	r3, r2
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	695c      	ldr	r4, [r3, #20]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f103 0110 	add.w	r1, r3, #16
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f410:	4618      	mov	r0, r3
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800f418:	b29b      	uxth	r3, r3
 800f41a:	78f8      	ldrb	r0, [r7, #3]
 800f41c:	47a0      	blx	r4
 800f41e:	4603      	mov	r3, r0
 800f420:	2b00      	cmp	r3, #0
 800f422:	da08      	bge.n	800f436 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f424:	78f9      	ldrb	r1, [r7, #3]
 800f426:	2303      	movs	r3, #3
 800f428:	2204      	movs	r2, #4
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f7ff fae3 	bl	800e9f6 <SCSI_SenseCode>
    return -1;
 800f430:	f04f 33ff 	mov.w	r3, #4294967295
 800f434:	e045      	b.n	800f4c2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f442:	4619      	mov	r1, r3
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	fbb3 f3f1 	udiv	r3, r3, r1
 800f44a:	441a      	add	r2, r3
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800f45e:	4619      	mov	r1, r3
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	fbb3 f3f1 	udiv	r3, r3, r1
 800f466:	1ad2      	subs	r2, r2, r3
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	1ad2      	subs	r2, r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f484:	2b00      	cmp	r3, #0
 800f486:	d104      	bne.n	800f492 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f488:	2100      	movs	r1, #0
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7fe fce8 	bl	800de60 <MSC_BOT_SendCSW>
 800f490:	e016      	b.n	800f4c0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800f49e:	fb02 f303 	mul.w	r3, r2, r3
 800f4a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4a6:	bf28      	it	cs
 800f4a8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800f4ac:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800f4ae:	4b07      	ldr	r3, [pc, #28]	@ (800f4cc <SCSI_ProcessWrite+0x128>)
 800f4b0:	7819      	ldrb	r1, [r3, #0]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f103 0210 	add.w	r2, r3, #16
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f001 ffd5 	bl	801146a <USBD_LL_PrepareReceive>
  }

  return 0;
 800f4c0:	2300      	movs	r3, #0
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3714      	adds	r7, #20
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd90      	pop	{r4, r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	24000073 	.word	0x24000073

0800f4d0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b087      	sub	sp, #28
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	4613      	mov	r3, r2
 800f4dc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f4de:	88fb      	ldrh	r3, [r7, #6]
 800f4e0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d102      	bne.n	800f4ee <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800f4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ec:	e013      	b.n	800f516 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800f4ee:	8afa      	ldrh	r2, [r7, #22]
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f4f4:	e00b      	b.n	800f50e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800f4f6:	8afb      	ldrh	r3, [r7, #22]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f4fc:	8afb      	ldrh	r3, [r7, #22]
 800f4fe:	68ba      	ldr	r2, [r7, #8]
 800f500:	441a      	add	r2, r3
 800f502:	8afb      	ldrh	r3, [r7, #22]
 800f504:	7811      	ldrb	r1, [r2, #0]
 800f506:	68fa      	ldr	r2, [r7, #12]
 800f508:	4413      	add	r3, r2
 800f50a:	460a      	mov	r2, r1
 800f50c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f50e:	8afb      	ldrh	r3, [r7, #22]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d1f0      	bne.n	800f4f6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800f514:	2300      	movs	r3, #0
}
 800f516:	4618      	mov	r0, r3
 800f518:	371c      	adds	r7, #28
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr

0800f522 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f522:	b580      	push	{r7, lr}
 800f524:	b086      	sub	sp, #24
 800f526:	af00      	add	r7, sp, #0
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	60b9      	str	r1, [r7, #8]
 800f52c:	4613      	mov	r3, r2
 800f52e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d101      	bne.n	800f53a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f536:	2303      	movs	r3, #3
 800f538:	e01f      	b.n	800f57a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2200      	movs	r2, #0
 800f53e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2200      	movs	r2, #0
 800f546:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2200      	movs	r2, #0
 800f54e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d003      	beq.n	800f560 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	68ba      	ldr	r2, [r7, #8]
 800f55c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2201      	movs	r2, #1
 800f564:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	79fa      	ldrb	r2, [r7, #7]
 800f56c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f001 fe00 	bl	8011174 <USBD_LL_Init>
 800f574:	4603      	mov	r3, r0
 800f576:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f578:	7dfb      	ldrb	r3, [r7, #23]
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3718      	adds	r7, #24
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b084      	sub	sp, #16
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f58c:	2300      	movs	r3, #0
 800f58e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d101      	bne.n	800f59a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f596:	2303      	movs	r3, #3
 800f598:	e025      	b.n	800f5e6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	683a      	ldr	r2, [r7, #0]
 800f59e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	32ae      	adds	r2, #174	@ 0xae
 800f5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00f      	beq.n	800f5d6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	32ae      	adds	r2, #174	@ 0xae
 800f5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5c6:	f107 020e 	add.w	r2, r7, #14
 800f5ca:	4610      	mov	r0, r2
 800f5cc:	4798      	blx	r3
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f5dc:	1c5a      	adds	r2, r3, #1
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f5e4:	2300      	movs	r3, #0
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3710      	adds	r7, #16
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b082      	sub	sp, #8
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f001 fe0e 	bl	8011218 <USBD_LL_Start>
 800f5fc:	4603      	mov	r3, r0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f606:	b480      	push	{r7}
 800f608:	b083      	sub	sp, #12
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f60e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f610:	4618      	mov	r0, r3
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	460b      	mov	r3, r1
 800f626:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f632:	2b00      	cmp	r3, #0
 800f634:	d009      	beq.n	800f64a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	78fa      	ldrb	r2, [r7, #3]
 800f640:	4611      	mov	r1, r2
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	4798      	blx	r3
 800f646:	4603      	mov	r3, r0
 800f648:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3710      	adds	r7, #16
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	460b      	mov	r3, r1
 800f65e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f660:	2300      	movs	r3, #0
 800f662:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	78fa      	ldrb	r2, [r7, #3]
 800f66e:	4611      	mov	r1, r2
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	4798      	blx	r3
 800f674:	4603      	mov	r3, r0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d001      	beq.n	800f67e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f67a:	2303      	movs	r3, #3
 800f67c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3710      	adds	r7, #16
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f698:	6839      	ldr	r1, [r7, #0]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f001 f935 	bl	801090a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f6bc:	f003 031f 	and.w	r3, r3, #31
 800f6c0:	2b02      	cmp	r3, #2
 800f6c2:	d01a      	beq.n	800f6fa <USBD_LL_SetupStage+0x72>
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	d822      	bhi.n	800f70e <USBD_LL_SetupStage+0x86>
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d002      	beq.n	800f6d2 <USBD_LL_SetupStage+0x4a>
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d00a      	beq.n	800f6e6 <USBD_LL_SetupStage+0x5e>
 800f6d0:	e01d      	b.n	800f70e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f6d8:	4619      	mov	r1, r3
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fb62 	bl	800fda4 <USBD_StdDevReq>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f6e4:	e020      	b.n	800f728 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fbca 	bl	800fe88 <USBD_StdItfReq>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800f6f8:	e016      	b.n	800f728 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f700:	4619      	mov	r1, r3
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fc2c 	bl	800ff60 <USBD_StdEPReq>
 800f708:	4603      	mov	r3, r0
 800f70a:	73fb      	strb	r3, [r7, #15]
      break;
 800f70c:	e00c      	b.n	800f728 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f714:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	4619      	mov	r1, r3
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f001 fdfa 	bl	8011316 <USBD_LL_StallEP>
 800f722:	4603      	mov	r3, r0
 800f724:	73fb      	strb	r3, [r7, #15]
      break;
 800f726:	bf00      	nop
  }

  return ret;
 800f728:	7bfb      	ldrb	r3, [r7, #15]
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b086      	sub	sp, #24
 800f736:	af00      	add	r7, sp, #0
 800f738:	60f8      	str	r0, [r7, #12]
 800f73a:	460b      	mov	r3, r1
 800f73c:	607a      	str	r2, [r7, #4]
 800f73e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f740:	2300      	movs	r3, #0
 800f742:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f744:	7afb      	ldrb	r3, [r7, #11]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d16e      	bne.n	800f828 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f750:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f758:	2b03      	cmp	r3, #3
 800f75a:	f040 8098 	bne.w	800f88e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	689a      	ldr	r2, [r3, #8]
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	429a      	cmp	r2, r3
 800f768:	d913      	bls.n	800f792 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	689a      	ldr	r2, [r3, #8]
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	1ad2      	subs	r2, r2, r3
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	68da      	ldr	r2, [r3, #12]
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	4293      	cmp	r3, r2
 800f782:	bf28      	it	cs
 800f784:	4613      	movcs	r3, r2
 800f786:	461a      	mov	r2, r3
 800f788:	6879      	ldr	r1, [r7, #4]
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f001 f9a0 	bl	8010ad0 <USBD_CtlContinueRx>
 800f790:	e07d      	b.n	800f88e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f798:	f003 031f 	and.w	r3, r3, #31
 800f79c:	2b02      	cmp	r3, #2
 800f79e:	d014      	beq.n	800f7ca <USBD_LL_DataOutStage+0x98>
 800f7a0:	2b02      	cmp	r3, #2
 800f7a2:	d81d      	bhi.n	800f7e0 <USBD_LL_DataOutStage+0xae>
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d002      	beq.n	800f7ae <USBD_LL_DataOutStage+0x7c>
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d003      	beq.n	800f7b4 <USBD_LL_DataOutStage+0x82>
 800f7ac:	e018      	b.n	800f7e0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	75bb      	strb	r3, [r7, #22]
            break;
 800f7b2:	e018      	b.n	800f7e6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	4619      	mov	r1, r3
 800f7be:	68f8      	ldr	r0, [r7, #12]
 800f7c0:	f000 fa64 	bl	800fc8c <USBD_CoreFindIF>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	75bb      	strb	r3, [r7, #22]
            break;
 800f7c8:	e00d      	b.n	800f7e6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	68f8      	ldr	r0, [r7, #12]
 800f7d6:	f000 fa66 	bl	800fca6 <USBD_CoreFindEP>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	75bb      	strb	r3, [r7, #22]
            break;
 800f7de:	e002      	b.n	800f7e6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	75bb      	strb	r3, [r7, #22]
            break;
 800f7e4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f7e6:	7dbb      	ldrb	r3, [r7, #22]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d119      	bne.n	800f820 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	2b03      	cmp	r3, #3
 800f7f6:	d113      	bne.n	800f820 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f7f8:	7dba      	ldrb	r2, [r7, #22]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	32ae      	adds	r2, #174	@ 0xae
 800f7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f802:	691b      	ldr	r3, [r3, #16]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d00b      	beq.n	800f820 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f808:	7dba      	ldrb	r2, [r7, #22]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f810:	7dba      	ldrb	r2, [r7, #22]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	32ae      	adds	r2, #174	@ 0xae
 800f816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81a:	691b      	ldr	r3, [r3, #16]
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f001 f966 	bl	8010af2 <USBD_CtlSendStatus>
 800f826:	e032      	b.n	800f88e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f828:	7afb      	ldrb	r3, [r7, #11]
 800f82a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	4619      	mov	r1, r3
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f000 fa37 	bl	800fca6 <USBD_CoreFindEP>
 800f838:	4603      	mov	r3, r0
 800f83a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f83c:	7dbb      	ldrb	r3, [r7, #22]
 800f83e:	2bff      	cmp	r3, #255	@ 0xff
 800f840:	d025      	beq.n	800f88e <USBD_LL_DataOutStage+0x15c>
 800f842:	7dbb      	ldrb	r3, [r7, #22]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d122      	bne.n	800f88e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	2b03      	cmp	r3, #3
 800f852:	d117      	bne.n	800f884 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f854:	7dba      	ldrb	r2, [r7, #22]
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	32ae      	adds	r2, #174	@ 0xae
 800f85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f85e:	699b      	ldr	r3, [r3, #24]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00f      	beq.n	800f884 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f864:	7dba      	ldrb	r2, [r7, #22]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f86c:	7dba      	ldrb	r2, [r7, #22]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	32ae      	adds	r2, #174	@ 0xae
 800f872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f876:	699b      	ldr	r3, [r3, #24]
 800f878:	7afa      	ldrb	r2, [r7, #11]
 800f87a:	4611      	mov	r1, r2
 800f87c:	68f8      	ldr	r0, [r7, #12]
 800f87e:	4798      	blx	r3
 800f880:	4603      	mov	r3, r0
 800f882:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f884:	7dfb      	ldrb	r3, [r7, #23]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d001      	beq.n	800f88e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f88a:	7dfb      	ldrb	r3, [r7, #23]
 800f88c:	e000      	b.n	800f890 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f88e:	2300      	movs	r3, #0
}
 800f890:	4618      	mov	r0, r3
 800f892:	3718      	adds	r7, #24
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b086      	sub	sp, #24
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	607a      	str	r2, [r7, #4]
 800f8a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f8a6:	7afb      	ldrb	r3, [r7, #11]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d16f      	bne.n	800f98c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	3314      	adds	r3, #20
 800f8b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f8b8:	2b02      	cmp	r3, #2
 800f8ba:	d15a      	bne.n	800f972 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	689a      	ldr	r2, [r3, #8]
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	68db      	ldr	r3, [r3, #12]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d914      	bls.n	800f8f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	689a      	ldr	r2, [r3, #8]
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	1ad2      	subs	r2, r2, r3
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	689b      	ldr	r3, [r3, #8]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	6879      	ldr	r1, [r7, #4]
 800f8de:	68f8      	ldr	r0, [r7, #12]
 800f8e0:	f001 f8e5 	bl	8010aae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f001 fdbd 	bl	801146a <USBD_LL_PrepareReceive>
 800f8f0:	e03f      	b.n	800f972 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	68da      	ldr	r2, [r3, #12]
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	689b      	ldr	r3, [r3, #8]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d11c      	bne.n	800f938 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f906:	429a      	cmp	r2, r3
 800f908:	d316      	bcc.n	800f938 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	685a      	ldr	r2, [r3, #4]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f914:	429a      	cmp	r2, r3
 800f916:	d20f      	bcs.n	800f938 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f918:	2200      	movs	r2, #0
 800f91a:	2100      	movs	r1, #0
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f001 f8c6 	bl	8010aae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2200      	movs	r2, #0
 800f926:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f92a:	2300      	movs	r3, #0
 800f92c:	2200      	movs	r2, #0
 800f92e:	2100      	movs	r1, #0
 800f930:	68f8      	ldr	r0, [r7, #12]
 800f932:	f001 fd9a 	bl	801146a <USBD_LL_PrepareReceive>
 800f936:	e01c      	b.n	800f972 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	2b03      	cmp	r3, #3
 800f942:	d10f      	bne.n	800f964 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d009      	beq.n	800f964 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	2200      	movs	r2, #0
 800f954:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f964:	2180      	movs	r1, #128	@ 0x80
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f001 fcd5 	bl	8011316 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f001 f8d3 	bl	8010b18 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d03a      	beq.n	800f9f2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f97c:	68f8      	ldr	r0, [r7, #12]
 800f97e:	f7ff fe42 	bl	800f606 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2200      	movs	r2, #0
 800f986:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f98a:	e032      	b.n	800f9f2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f98c:	7afb      	ldrb	r3, [r7, #11]
 800f98e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f992:	b2db      	uxtb	r3, r3
 800f994:	4619      	mov	r1, r3
 800f996:	68f8      	ldr	r0, [r7, #12]
 800f998:	f000 f985 	bl	800fca6 <USBD_CoreFindEP>
 800f99c:	4603      	mov	r3, r0
 800f99e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f9a0:	7dfb      	ldrb	r3, [r7, #23]
 800f9a2:	2bff      	cmp	r3, #255	@ 0xff
 800f9a4:	d025      	beq.n	800f9f2 <USBD_LL_DataInStage+0x15a>
 800f9a6:	7dfb      	ldrb	r3, [r7, #23]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d122      	bne.n	800f9f2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	2b03      	cmp	r3, #3
 800f9b6:	d11c      	bne.n	800f9f2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f9b8:	7dfa      	ldrb	r2, [r7, #23]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	32ae      	adds	r2, #174	@ 0xae
 800f9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9c2:	695b      	ldr	r3, [r3, #20]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d014      	beq.n	800f9f2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f9c8:	7dfa      	ldrb	r2, [r7, #23]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f9d0:	7dfa      	ldrb	r2, [r7, #23]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	32ae      	adds	r2, #174	@ 0xae
 800f9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9da:	695b      	ldr	r3, [r3, #20]
 800f9dc:	7afa      	ldrb	r2, [r7, #11]
 800f9de:	4611      	mov	r1, r2
 800f9e0:	68f8      	ldr	r0, [r7, #12]
 800f9e2:	4798      	blx	r3
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f9e8:	7dbb      	ldrb	r3, [r7, #22]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d001      	beq.n	800f9f2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f9ee:	7dbb      	ldrb	r3, [r7, #22]
 800f9f0:	e000      	b.n	800f9f4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3718      	adds	r7, #24
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa04:	2300      	movs	r3, #0
 800fa06:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2200      	movs	r2, #0
 800fa14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d014      	beq.n	800fa62 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00e      	beq.n	800fa62 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	6852      	ldr	r2, [r2, #4]
 800fa50:	b2d2      	uxtb	r2, r2
 800fa52:	4611      	mov	r1, r2
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	4798      	blx	r3
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fa5e:	2303      	movs	r3, #3
 800fa60:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa62:	2340      	movs	r3, #64	@ 0x40
 800fa64:	2200      	movs	r2, #0
 800fa66:	2100      	movs	r1, #0
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f001 fbf0 	bl	801124e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2201      	movs	r2, #1
 800fa72:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2240      	movs	r2, #64	@ 0x40
 800fa7a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa7e:	2340      	movs	r3, #64	@ 0x40
 800fa80:	2200      	movs	r2, #0
 800fa82:	2180      	movs	r1, #128	@ 0x80
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f001 fbe2 	bl	801124e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2240      	movs	r2, #64	@ 0x40
 800fa94:	621a      	str	r2, [r3, #32]

  return ret;
 800fa96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	460b      	mov	r3, r1
 800faaa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	78fa      	ldrb	r2, [r7, #3]
 800fab0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fab2:	2300      	movs	r3, #0
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800face:	b2db      	uxtb	r3, r3
 800fad0:	2b04      	cmp	r3, #4
 800fad2:	d006      	beq.n	800fae2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fada:	b2da      	uxtb	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2204      	movs	r2, #4
 800fae6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800faea:	2300      	movs	r3, #0
}
 800faec:	4618      	mov	r0, r3
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	2b04      	cmp	r3, #4
 800fb0a:	d106      	bne.n	800fb1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800fb12:	b2da      	uxtb	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	2b03      	cmp	r3, #3
 800fb3a:	d110      	bne.n	800fb5e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00b      	beq.n	800fb5e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb4c:	69db      	ldr	r3, [r3, #28]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d005      	beq.n	800fb5e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3708      	adds	r7, #8
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	460b      	mov	r3, r1
 800fb72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	32ae      	adds	r2, #174	@ 0xae
 800fb7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d101      	bne.n	800fb8a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fb86:	2303      	movs	r3, #3
 800fb88:	e01c      	b.n	800fbc4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	2b03      	cmp	r3, #3
 800fb94:	d115      	bne.n	800fbc2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	32ae      	adds	r2, #174	@ 0xae
 800fba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fba4:	6a1b      	ldr	r3, [r3, #32]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00b      	beq.n	800fbc2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	32ae      	adds	r2, #174	@ 0xae
 800fbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	78fa      	ldrb	r2, [r7, #3]
 800fbbc:	4611      	mov	r1, r2
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fbc2:	2300      	movs	r3, #0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	32ae      	adds	r2, #174	@ 0xae
 800fbe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d101      	bne.n	800fbee <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800fbea:	2303      	movs	r3, #3
 800fbec:	e01c      	b.n	800fc28 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2b03      	cmp	r3, #3
 800fbf8:	d115      	bne.n	800fc26 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	32ae      	adds	r2, #174	@ 0xae
 800fc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00b      	beq.n	800fc26 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	32ae      	adds	r2, #174	@ 0xae
 800fc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc1e:	78fa      	ldrb	r2, [r7, #3]
 800fc20:	4611      	mov	r1, r2
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc38:	2300      	movs	r3, #0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	370c      	adds	r7, #12
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr

0800fc46 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b084      	sub	sp, #16
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2201      	movs	r2, #1
 800fc56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d00e      	beq.n	800fc82 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	6852      	ldr	r2, [r2, #4]
 800fc70:	b2d2      	uxtb	r2, r2
 800fc72:	4611      	mov	r1, r2
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	4798      	blx	r3
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d001      	beq.n	800fc82 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800fc7e:	2303      	movs	r3, #3
 800fc80:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3710      	adds	r7, #16
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	460b      	mov	r3, r1
 800fc96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fc98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	370c      	adds	r7, #12
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr

0800fca6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800fca6:	b480      	push	{r7}
 800fca8:	b083      	sub	sp, #12
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
 800fcae:	460b      	mov	r3, r1
 800fcb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800fcb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b086      	sub	sp, #24
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	460b      	mov	r3, r1
 800fcca:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	885b      	ldrh	r3, [r3, #2]
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	7812      	ldrb	r2, [r2, #0]
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d91f      	bls.n	800fd26 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800fcec:	e013      	b.n	800fd16 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800fcee:	f107 030a 	add.w	r3, r7, #10
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	6978      	ldr	r0, [r7, #20]
 800fcf6:	f000 f81b 	bl	800fd30 <USBD_GetNextDesc>
 800fcfa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	785b      	ldrb	r3, [r3, #1]
 800fd00:	2b05      	cmp	r3, #5
 800fd02:	d108      	bne.n	800fd16 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	789b      	ldrb	r3, [r3, #2]
 800fd0c:	78fa      	ldrb	r2, [r7, #3]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d008      	beq.n	800fd24 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800fd12:	2300      	movs	r3, #0
 800fd14:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	885b      	ldrh	r3, [r3, #2]
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	897b      	ldrh	r3, [r7, #10]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d8e5      	bhi.n	800fcee <USBD_GetEpDesc+0x2e>
 800fd22:	e000      	b.n	800fd26 <USBD_GetEpDesc+0x66>
          break;
 800fd24:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800fd26:	693b      	ldr	r3, [r7, #16]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b085      	sub	sp, #20
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	881b      	ldrh	r3, [r3, #0]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	7812      	ldrb	r2, [r2, #0]
 800fd46:	4413      	add	r3, r2
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	461a      	mov	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4413      	add	r3, r2
 800fd58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3714      	adds	r7, #20
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b087      	sub	sp, #28
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fd86:	8a3b      	ldrh	r3, [r7, #16]
 800fd88:	021b      	lsls	r3, r3, #8
 800fd8a:	b21a      	sxth	r2, r3
 800fd8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fd90:	4313      	orrs	r3, r2
 800fd92:	b21b      	sxth	r3, r3
 800fd94:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fd96:	89fb      	ldrh	r3, [r7, #14]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	371c      	adds	r7, #28
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fdba:	2b40      	cmp	r3, #64	@ 0x40
 800fdbc:	d005      	beq.n	800fdca <USBD_StdDevReq+0x26>
 800fdbe:	2b40      	cmp	r3, #64	@ 0x40
 800fdc0:	d857      	bhi.n	800fe72 <USBD_StdDevReq+0xce>
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00f      	beq.n	800fde6 <USBD_StdDevReq+0x42>
 800fdc6:	2b20      	cmp	r3, #32
 800fdc8:	d153      	bne.n	800fe72 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	32ae      	adds	r2, #174	@ 0xae
 800fdd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	6839      	ldr	r1, [r7, #0]
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	4798      	blx	r3
 800fde0:	4603      	mov	r3, r0
 800fde2:	73fb      	strb	r3, [r7, #15]
      break;
 800fde4:	e04a      	b.n	800fe7c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	785b      	ldrb	r3, [r3, #1]
 800fdea:	2b09      	cmp	r3, #9
 800fdec:	d83b      	bhi.n	800fe66 <USBD_StdDevReq+0xc2>
 800fdee:	a201      	add	r2, pc, #4	@ (adr r2, 800fdf4 <USBD_StdDevReq+0x50>)
 800fdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf4:	0800fe49 	.word	0x0800fe49
 800fdf8:	0800fe5d 	.word	0x0800fe5d
 800fdfc:	0800fe67 	.word	0x0800fe67
 800fe00:	0800fe53 	.word	0x0800fe53
 800fe04:	0800fe67 	.word	0x0800fe67
 800fe08:	0800fe27 	.word	0x0800fe27
 800fe0c:	0800fe1d 	.word	0x0800fe1d
 800fe10:	0800fe67 	.word	0x0800fe67
 800fe14:	0800fe3f 	.word	0x0800fe3f
 800fe18:	0800fe31 	.word	0x0800fe31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fe1c:	6839      	ldr	r1, [r7, #0]
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 fa3c 	bl	801029c <USBD_GetDescriptor>
          break;
 800fe24:	e024      	b.n	800fe70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fe26:	6839      	ldr	r1, [r7, #0]
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fbcb 	bl	80105c4 <USBD_SetAddress>
          break;
 800fe2e:	e01f      	b.n	800fe70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fe30:	6839      	ldr	r1, [r7, #0]
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 fc0a 	bl	801064c <USBD_SetConfig>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	73fb      	strb	r3, [r7, #15]
          break;
 800fe3c:	e018      	b.n	800fe70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fe3e:	6839      	ldr	r1, [r7, #0]
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 fcad 	bl	80107a0 <USBD_GetConfig>
          break;
 800fe46:	e013      	b.n	800fe70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fe48:	6839      	ldr	r1, [r7, #0]
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 fcde 	bl	801080c <USBD_GetStatus>
          break;
 800fe50:	e00e      	b.n	800fe70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fe52:	6839      	ldr	r1, [r7, #0]
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 fd0d 	bl	8010874 <USBD_SetFeature>
          break;
 800fe5a:	e009      	b.n	800fe70 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fe5c:	6839      	ldr	r1, [r7, #0]
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f000 fd31 	bl	80108c6 <USBD_ClrFeature>
          break;
 800fe64:	e004      	b.n	800fe70 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fe66:	6839      	ldr	r1, [r7, #0]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 fd88 	bl	801097e <USBD_CtlError>
          break;
 800fe6e:	bf00      	nop
      }
      break;
 800fe70:	e004      	b.n	800fe7c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 fd82 	bl	801097e <USBD_CtlError>
      break;
 800fe7a:	bf00      	nop
  }

  return ret;
 800fe7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop

0800fe88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe92:	2300      	movs	r3, #0
 800fe94:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fe9e:	2b40      	cmp	r3, #64	@ 0x40
 800fea0:	d005      	beq.n	800feae <USBD_StdItfReq+0x26>
 800fea2:	2b40      	cmp	r3, #64	@ 0x40
 800fea4:	d852      	bhi.n	800ff4c <USBD_StdItfReq+0xc4>
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d001      	beq.n	800feae <USBD_StdItfReq+0x26>
 800feaa:	2b20      	cmp	r3, #32
 800feac:	d14e      	bne.n	800ff4c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	3b01      	subs	r3, #1
 800feb8:	2b02      	cmp	r3, #2
 800feba:	d840      	bhi.n	800ff3e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	889b      	ldrh	r3, [r3, #4]
 800fec0:	b2db      	uxtb	r3, r3
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d836      	bhi.n	800ff34 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	889b      	ldrh	r3, [r3, #4]
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	4619      	mov	r1, r3
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7ff fedc 	bl	800fc8c <USBD_CoreFindIF>
 800fed4:	4603      	mov	r3, r0
 800fed6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fed8:	7bbb      	ldrb	r3, [r7, #14]
 800feda:	2bff      	cmp	r3, #255	@ 0xff
 800fedc:	d01d      	beq.n	800ff1a <USBD_StdItfReq+0x92>
 800fede:	7bbb      	ldrb	r3, [r7, #14]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d11a      	bne.n	800ff1a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800fee4:	7bba      	ldrb	r2, [r7, #14]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	32ae      	adds	r2, #174	@ 0xae
 800feea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00f      	beq.n	800ff14 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fef4:	7bba      	ldrb	r2, [r7, #14]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fefc:	7bba      	ldrb	r2, [r7, #14]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	32ae      	adds	r2, #174	@ 0xae
 800ff02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	6839      	ldr	r1, [r7, #0]
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	4798      	blx	r3
 800ff0e:	4603      	mov	r3, r0
 800ff10:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ff12:	e004      	b.n	800ff1e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ff14:	2303      	movs	r3, #3
 800ff16:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ff18:	e001      	b.n	800ff1e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ff1a:	2303      	movs	r3, #3
 800ff1c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	88db      	ldrh	r3, [r3, #6]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d110      	bne.n	800ff48 <USBD_StdItfReq+0xc0>
 800ff26:	7bfb      	ldrb	r3, [r7, #15]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d10d      	bne.n	800ff48 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fde0 	bl	8010af2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ff32:	e009      	b.n	800ff48 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ff34:	6839      	ldr	r1, [r7, #0]
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 fd21 	bl	801097e <USBD_CtlError>
          break;
 800ff3c:	e004      	b.n	800ff48 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ff3e:	6839      	ldr	r1, [r7, #0]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 fd1c 	bl	801097e <USBD_CtlError>
          break;
 800ff46:	e000      	b.n	800ff4a <USBD_StdItfReq+0xc2>
          break;
 800ff48:	bf00      	nop
      }
      break;
 800ff4a:	e004      	b.n	800ff56 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ff4c:	6839      	ldr	r1, [r7, #0]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 fd15 	bl	801097e <USBD_CtlError>
      break;
 800ff54:	bf00      	nop
  }

  return ret;
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	889b      	ldrh	r3, [r3, #4]
 800ff72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ff7c:	2b40      	cmp	r3, #64	@ 0x40
 800ff7e:	d007      	beq.n	800ff90 <USBD_StdEPReq+0x30>
 800ff80:	2b40      	cmp	r3, #64	@ 0x40
 800ff82:	f200 817f 	bhi.w	8010284 <USBD_StdEPReq+0x324>
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d02a      	beq.n	800ffe0 <USBD_StdEPReq+0x80>
 800ff8a:	2b20      	cmp	r3, #32
 800ff8c:	f040 817a 	bne.w	8010284 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ff90:	7bbb      	ldrb	r3, [r7, #14]
 800ff92:	4619      	mov	r1, r3
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f7ff fe86 	bl	800fca6 <USBD_CoreFindEP>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ff9e:	7b7b      	ldrb	r3, [r7, #13]
 800ffa0:	2bff      	cmp	r3, #255	@ 0xff
 800ffa2:	f000 8174 	beq.w	801028e <USBD_StdEPReq+0x32e>
 800ffa6:	7b7b      	ldrb	r3, [r7, #13]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f040 8170 	bne.w	801028e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ffae:	7b7a      	ldrb	r2, [r7, #13]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ffb6:	7b7a      	ldrb	r2, [r7, #13]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	32ae      	adds	r2, #174	@ 0xae
 800ffbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f000 8163 	beq.w	801028e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ffc8:	7b7a      	ldrb	r2, [r7, #13]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	32ae      	adds	r2, #174	@ 0xae
 800ffce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	6839      	ldr	r1, [r7, #0]
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	4798      	blx	r3
 800ffda:	4603      	mov	r3, r0
 800ffdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ffde:	e156      	b.n	801028e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	785b      	ldrb	r3, [r3, #1]
 800ffe4:	2b03      	cmp	r3, #3
 800ffe6:	d008      	beq.n	800fffa <USBD_StdEPReq+0x9a>
 800ffe8:	2b03      	cmp	r3, #3
 800ffea:	f300 8145 	bgt.w	8010278 <USBD_StdEPReq+0x318>
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	f000 809b 	beq.w	801012a <USBD_StdEPReq+0x1ca>
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d03c      	beq.n	8010072 <USBD_StdEPReq+0x112>
 800fff8:	e13e      	b.n	8010278 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010000:	b2db      	uxtb	r3, r3
 8010002:	2b02      	cmp	r3, #2
 8010004:	d002      	beq.n	801000c <USBD_StdEPReq+0xac>
 8010006:	2b03      	cmp	r3, #3
 8010008:	d016      	beq.n	8010038 <USBD_StdEPReq+0xd8>
 801000a:	e02c      	b.n	8010066 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801000c:	7bbb      	ldrb	r3, [r7, #14]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d00d      	beq.n	801002e <USBD_StdEPReq+0xce>
 8010012:	7bbb      	ldrb	r3, [r7, #14]
 8010014:	2b80      	cmp	r3, #128	@ 0x80
 8010016:	d00a      	beq.n	801002e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010018:	7bbb      	ldrb	r3, [r7, #14]
 801001a:	4619      	mov	r1, r3
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f001 f97a 	bl	8011316 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010022:	2180      	movs	r1, #128	@ 0x80
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f001 f976 	bl	8011316 <USBD_LL_StallEP>
 801002a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801002c:	e020      	b.n	8010070 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801002e:	6839      	ldr	r1, [r7, #0]
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 fca4 	bl	801097e <USBD_CtlError>
              break;
 8010036:	e01b      	b.n	8010070 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	885b      	ldrh	r3, [r3, #2]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d10e      	bne.n	801005e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010040:	7bbb      	ldrb	r3, [r7, #14]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d00b      	beq.n	801005e <USBD_StdEPReq+0xfe>
 8010046:	7bbb      	ldrb	r3, [r7, #14]
 8010048:	2b80      	cmp	r3, #128	@ 0x80
 801004a:	d008      	beq.n	801005e <USBD_StdEPReq+0xfe>
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	88db      	ldrh	r3, [r3, #6]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d104      	bne.n	801005e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010054:	7bbb      	ldrb	r3, [r7, #14]
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f001 f95c 	bl	8011316 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 fd47 	bl	8010af2 <USBD_CtlSendStatus>

              break;
 8010064:	e004      	b.n	8010070 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 fc88 	bl	801097e <USBD_CtlError>
              break;
 801006e:	bf00      	nop
          }
          break;
 8010070:	e107      	b.n	8010282 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010078:	b2db      	uxtb	r3, r3
 801007a:	2b02      	cmp	r3, #2
 801007c:	d002      	beq.n	8010084 <USBD_StdEPReq+0x124>
 801007e:	2b03      	cmp	r3, #3
 8010080:	d016      	beq.n	80100b0 <USBD_StdEPReq+0x150>
 8010082:	e04b      	b.n	801011c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010084:	7bbb      	ldrb	r3, [r7, #14]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d00d      	beq.n	80100a6 <USBD_StdEPReq+0x146>
 801008a:	7bbb      	ldrb	r3, [r7, #14]
 801008c:	2b80      	cmp	r3, #128	@ 0x80
 801008e:	d00a      	beq.n	80100a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010090:	7bbb      	ldrb	r3, [r7, #14]
 8010092:	4619      	mov	r1, r3
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f001 f93e 	bl	8011316 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801009a:	2180      	movs	r1, #128	@ 0x80
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f001 f93a 	bl	8011316 <USBD_LL_StallEP>
 80100a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80100a4:	e040      	b.n	8010128 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80100a6:	6839      	ldr	r1, [r7, #0]
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f000 fc68 	bl	801097e <USBD_CtlError>
              break;
 80100ae:	e03b      	b.n	8010128 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	885b      	ldrh	r3, [r3, #2]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d136      	bne.n	8010126 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80100b8:	7bbb      	ldrb	r3, [r7, #14]
 80100ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d004      	beq.n	80100cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80100c2:	7bbb      	ldrb	r3, [r7, #14]
 80100c4:	4619      	mov	r1, r3
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f001 f944 	bl	8011354 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 fd10 	bl	8010af2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80100d2:	7bbb      	ldrb	r3, [r7, #14]
 80100d4:	4619      	mov	r1, r3
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f7ff fde5 	bl	800fca6 <USBD_CoreFindEP>
 80100dc:	4603      	mov	r3, r0
 80100de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80100e0:	7b7b      	ldrb	r3, [r7, #13]
 80100e2:	2bff      	cmp	r3, #255	@ 0xff
 80100e4:	d01f      	beq.n	8010126 <USBD_StdEPReq+0x1c6>
 80100e6:	7b7b      	ldrb	r3, [r7, #13]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d11c      	bne.n	8010126 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80100ec:	7b7a      	ldrb	r2, [r7, #13]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80100f4:	7b7a      	ldrb	r2, [r7, #13]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	32ae      	adds	r2, #174	@ 0xae
 80100fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d010      	beq.n	8010126 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010104:	7b7a      	ldrb	r2, [r7, #13]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	32ae      	adds	r2, #174	@ 0xae
 801010a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	6839      	ldr	r1, [r7, #0]
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	4798      	blx	r3
 8010116:	4603      	mov	r3, r0
 8010118:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801011a:	e004      	b.n	8010126 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801011c:	6839      	ldr	r1, [r7, #0]
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f000 fc2d 	bl	801097e <USBD_CtlError>
              break;
 8010124:	e000      	b.n	8010128 <USBD_StdEPReq+0x1c8>
              break;
 8010126:	bf00      	nop
          }
          break;
 8010128:	e0ab      	b.n	8010282 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010130:	b2db      	uxtb	r3, r3
 8010132:	2b02      	cmp	r3, #2
 8010134:	d002      	beq.n	801013c <USBD_StdEPReq+0x1dc>
 8010136:	2b03      	cmp	r3, #3
 8010138:	d032      	beq.n	80101a0 <USBD_StdEPReq+0x240>
 801013a:	e097      	b.n	801026c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801013c:	7bbb      	ldrb	r3, [r7, #14]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d007      	beq.n	8010152 <USBD_StdEPReq+0x1f2>
 8010142:	7bbb      	ldrb	r3, [r7, #14]
 8010144:	2b80      	cmp	r3, #128	@ 0x80
 8010146:	d004      	beq.n	8010152 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010148:	6839      	ldr	r1, [r7, #0]
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 fc17 	bl	801097e <USBD_CtlError>
                break;
 8010150:	e091      	b.n	8010276 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010152:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010156:	2b00      	cmp	r3, #0
 8010158:	da0b      	bge.n	8010172 <USBD_StdEPReq+0x212>
 801015a:	7bbb      	ldrb	r3, [r7, #14]
 801015c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010160:	4613      	mov	r3, r2
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	4413      	add	r3, r2
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	3310      	adds	r3, #16
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	4413      	add	r3, r2
 801016e:	3304      	adds	r3, #4
 8010170:	e00b      	b.n	801018a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010172:	7bbb      	ldrb	r3, [r7, #14]
 8010174:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010178:	4613      	mov	r3, r2
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	4413      	add	r3, r2
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	4413      	add	r3, r2
 8010188:	3304      	adds	r3, #4
 801018a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	2200      	movs	r2, #0
 8010190:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	2202      	movs	r2, #2
 8010196:	4619      	mov	r1, r3
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 fc6d 	bl	8010a78 <USBD_CtlSendData>
              break;
 801019e:	e06a      	b.n	8010276 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80101a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	da11      	bge.n	80101cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80101a8:	7bbb      	ldrb	r3, [r7, #14]
 80101aa:	f003 020f 	and.w	r2, r3, #15
 80101ae:	6879      	ldr	r1, [r7, #4]
 80101b0:	4613      	mov	r3, r2
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	4413      	add	r3, r2
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	440b      	add	r3, r1
 80101ba:	3324      	adds	r3, #36	@ 0x24
 80101bc:	881b      	ldrh	r3, [r3, #0]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d117      	bne.n	80101f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80101c2:	6839      	ldr	r1, [r7, #0]
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 fbda 	bl	801097e <USBD_CtlError>
                  break;
 80101ca:	e054      	b.n	8010276 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80101cc:	7bbb      	ldrb	r3, [r7, #14]
 80101ce:	f003 020f 	and.w	r2, r3, #15
 80101d2:	6879      	ldr	r1, [r7, #4]
 80101d4:	4613      	mov	r3, r2
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	4413      	add	r3, r2
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	440b      	add	r3, r1
 80101de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d104      	bne.n	80101f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80101e8:	6839      	ldr	r1, [r7, #0]
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 fbc7 	bl	801097e <USBD_CtlError>
                  break;
 80101f0:	e041      	b.n	8010276 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80101f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	da0b      	bge.n	8010212 <USBD_StdEPReq+0x2b2>
 80101fa:	7bbb      	ldrb	r3, [r7, #14]
 80101fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010200:	4613      	mov	r3, r2
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4413      	add	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	3310      	adds	r3, #16
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	4413      	add	r3, r2
 801020e:	3304      	adds	r3, #4
 8010210:	e00b      	b.n	801022a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010212:	7bbb      	ldrb	r3, [r7, #14]
 8010214:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010218:	4613      	mov	r3, r2
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4413      	add	r3, r2
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	4413      	add	r3, r2
 8010228:	3304      	adds	r3, #4
 801022a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801022c:	7bbb      	ldrb	r3, [r7, #14]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <USBD_StdEPReq+0x2d8>
 8010232:	7bbb      	ldrb	r3, [r7, #14]
 8010234:	2b80      	cmp	r3, #128	@ 0x80
 8010236:	d103      	bne.n	8010240 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	2200      	movs	r2, #0
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	e00e      	b.n	801025e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010240:	7bbb      	ldrb	r3, [r7, #14]
 8010242:	4619      	mov	r1, r3
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f001 f8a4 	bl	8011392 <USBD_LL_IsStallEP>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d003      	beq.n	8010258 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	2201      	movs	r2, #1
 8010254:	601a      	str	r2, [r3, #0]
 8010256:	e002      	b.n	801025e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	2200      	movs	r2, #0
 801025c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	2202      	movs	r2, #2
 8010262:	4619      	mov	r1, r3
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 fc07 	bl	8010a78 <USBD_CtlSendData>
              break;
 801026a:	e004      	b.n	8010276 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801026c:	6839      	ldr	r1, [r7, #0]
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 fb85 	bl	801097e <USBD_CtlError>
              break;
 8010274:	bf00      	nop
          }
          break;
 8010276:	e004      	b.n	8010282 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010278:	6839      	ldr	r1, [r7, #0]
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 fb7f 	bl	801097e <USBD_CtlError>
          break;
 8010280:	bf00      	nop
      }
      break;
 8010282:	e005      	b.n	8010290 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010284:	6839      	ldr	r1, [r7, #0]
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 fb79 	bl	801097e <USBD_CtlError>
      break;
 801028c:	e000      	b.n	8010290 <USBD_StdEPReq+0x330>
      break;
 801028e:	bf00      	nop
  }

  return ret;
 8010290:	7bfb      	ldrb	r3, [r7, #15]
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
	...

0801029c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80102a6:	2300      	movs	r3, #0
 80102a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80102aa:	2300      	movs	r3, #0
 80102ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80102ae:	2300      	movs	r3, #0
 80102b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	885b      	ldrh	r3, [r3, #2]
 80102b6:	0a1b      	lsrs	r3, r3, #8
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	3b01      	subs	r3, #1
 80102bc:	2b0e      	cmp	r3, #14
 80102be:	f200 8152 	bhi.w	8010566 <USBD_GetDescriptor+0x2ca>
 80102c2:	a201      	add	r2, pc, #4	@ (adr r2, 80102c8 <USBD_GetDescriptor+0x2c>)
 80102c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102c8:	08010339 	.word	0x08010339
 80102cc:	08010351 	.word	0x08010351
 80102d0:	08010391 	.word	0x08010391
 80102d4:	08010567 	.word	0x08010567
 80102d8:	08010567 	.word	0x08010567
 80102dc:	08010507 	.word	0x08010507
 80102e0:	08010533 	.word	0x08010533
 80102e4:	08010567 	.word	0x08010567
 80102e8:	08010567 	.word	0x08010567
 80102ec:	08010567 	.word	0x08010567
 80102f0:	08010567 	.word	0x08010567
 80102f4:	08010567 	.word	0x08010567
 80102f8:	08010567 	.word	0x08010567
 80102fc:	08010567 	.word	0x08010567
 8010300:	08010305 	.word	0x08010305
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801030a:	69db      	ldr	r3, [r3, #28]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00b      	beq.n	8010328 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010316:	69db      	ldr	r3, [r3, #28]
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	7c12      	ldrb	r2, [r2, #16]
 801031c:	f107 0108 	add.w	r1, r7, #8
 8010320:	4610      	mov	r0, r2
 8010322:	4798      	blx	r3
 8010324:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010326:	e126      	b.n	8010576 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010328:	6839      	ldr	r1, [r7, #0]
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f000 fb27 	bl	801097e <USBD_CtlError>
        err++;
 8010330:	7afb      	ldrb	r3, [r7, #11]
 8010332:	3301      	adds	r3, #1
 8010334:	72fb      	strb	r3, [r7, #11]
      break;
 8010336:	e11e      	b.n	8010576 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	7c12      	ldrb	r2, [r2, #16]
 8010344:	f107 0108 	add.w	r1, r7, #8
 8010348:	4610      	mov	r0, r2
 801034a:	4798      	blx	r3
 801034c:	60f8      	str	r0, [r7, #12]
      break;
 801034e:	e112      	b.n	8010576 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	7c1b      	ldrb	r3, [r3, #16]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d10d      	bne.n	8010374 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801035e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010360:	f107 0208 	add.w	r2, r7, #8
 8010364:	4610      	mov	r0, r2
 8010366:	4798      	blx	r3
 8010368:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	3301      	adds	r3, #1
 801036e:	2202      	movs	r2, #2
 8010370:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010372:	e100      	b.n	8010576 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801037a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801037c:	f107 0208 	add.w	r2, r7, #8
 8010380:	4610      	mov	r0, r2
 8010382:	4798      	blx	r3
 8010384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	3301      	adds	r3, #1
 801038a:	2202      	movs	r2, #2
 801038c:	701a      	strb	r2, [r3, #0]
      break;
 801038e:	e0f2      	b.n	8010576 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	885b      	ldrh	r3, [r3, #2]
 8010394:	b2db      	uxtb	r3, r3
 8010396:	2b05      	cmp	r3, #5
 8010398:	f200 80ac 	bhi.w	80104f4 <USBD_GetDescriptor+0x258>
 801039c:	a201      	add	r2, pc, #4	@ (adr r2, 80103a4 <USBD_GetDescriptor+0x108>)
 801039e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103a2:	bf00      	nop
 80103a4:	080103bd 	.word	0x080103bd
 80103a8:	080103f1 	.word	0x080103f1
 80103ac:	08010425 	.word	0x08010425
 80103b0:	08010459 	.word	0x08010459
 80103b4:	0801048d 	.word	0x0801048d
 80103b8:	080104c1 	.word	0x080104c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d00b      	beq.n	80103e0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	7c12      	ldrb	r2, [r2, #16]
 80103d4:	f107 0108 	add.w	r1, r7, #8
 80103d8:	4610      	mov	r0, r2
 80103da:	4798      	blx	r3
 80103dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103de:	e091      	b.n	8010504 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80103e0:	6839      	ldr	r1, [r7, #0]
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 facb 	bl	801097e <USBD_CtlError>
            err++;
 80103e8:	7afb      	ldrb	r3, [r7, #11]
 80103ea:	3301      	adds	r3, #1
 80103ec:	72fb      	strb	r3, [r7, #11]
          break;
 80103ee:	e089      	b.n	8010504 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80103f6:	689b      	ldr	r3, [r3, #8]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d00b      	beq.n	8010414 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	7c12      	ldrb	r2, [r2, #16]
 8010408:	f107 0108 	add.w	r1, r7, #8
 801040c:	4610      	mov	r0, r2
 801040e:	4798      	blx	r3
 8010410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010412:	e077      	b.n	8010504 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010414:	6839      	ldr	r1, [r7, #0]
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fab1 	bl	801097e <USBD_CtlError>
            err++;
 801041c:	7afb      	ldrb	r3, [r7, #11]
 801041e:	3301      	adds	r3, #1
 8010420:	72fb      	strb	r3, [r7, #11]
          break;
 8010422:	e06f      	b.n	8010504 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d00b      	beq.n	8010448 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	7c12      	ldrb	r2, [r2, #16]
 801043c:	f107 0108 	add.w	r1, r7, #8
 8010440:	4610      	mov	r0, r2
 8010442:	4798      	blx	r3
 8010444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010446:	e05d      	b.n	8010504 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010448:	6839      	ldr	r1, [r7, #0]
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f000 fa97 	bl	801097e <USBD_CtlError>
            err++;
 8010450:	7afb      	ldrb	r3, [r7, #11]
 8010452:	3301      	adds	r3, #1
 8010454:	72fb      	strb	r3, [r7, #11]
          break;
 8010456:	e055      	b.n	8010504 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801045e:	691b      	ldr	r3, [r3, #16]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d00b      	beq.n	801047c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801046a:	691b      	ldr	r3, [r3, #16]
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	7c12      	ldrb	r2, [r2, #16]
 8010470:	f107 0108 	add.w	r1, r7, #8
 8010474:	4610      	mov	r0, r2
 8010476:	4798      	blx	r3
 8010478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801047a:	e043      	b.n	8010504 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801047c:	6839      	ldr	r1, [r7, #0]
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 fa7d 	bl	801097e <USBD_CtlError>
            err++;
 8010484:	7afb      	ldrb	r3, [r7, #11]
 8010486:	3301      	adds	r3, #1
 8010488:	72fb      	strb	r3, [r7, #11]
          break;
 801048a:	e03b      	b.n	8010504 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010492:	695b      	ldr	r3, [r3, #20]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d00b      	beq.n	80104b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801049e:	695b      	ldr	r3, [r3, #20]
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	7c12      	ldrb	r2, [r2, #16]
 80104a4:	f107 0108 	add.w	r1, r7, #8
 80104a8:	4610      	mov	r0, r2
 80104aa:	4798      	blx	r3
 80104ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80104ae:	e029      	b.n	8010504 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80104b0:	6839      	ldr	r1, [r7, #0]
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 fa63 	bl	801097e <USBD_CtlError>
            err++;
 80104b8:	7afb      	ldrb	r3, [r7, #11]
 80104ba:	3301      	adds	r3, #1
 80104bc:	72fb      	strb	r3, [r7, #11]
          break;
 80104be:	e021      	b.n	8010504 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80104c6:	699b      	ldr	r3, [r3, #24]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00b      	beq.n	80104e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80104d2:	699b      	ldr	r3, [r3, #24]
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	7c12      	ldrb	r2, [r2, #16]
 80104d8:	f107 0108 	add.w	r1, r7, #8
 80104dc:	4610      	mov	r0, r2
 80104de:	4798      	blx	r3
 80104e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80104e2:	e00f      	b.n	8010504 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80104e4:	6839      	ldr	r1, [r7, #0]
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 fa49 	bl	801097e <USBD_CtlError>
            err++;
 80104ec:	7afb      	ldrb	r3, [r7, #11]
 80104ee:	3301      	adds	r3, #1
 80104f0:	72fb      	strb	r3, [r7, #11]
          break;
 80104f2:	e007      	b.n	8010504 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80104f4:	6839      	ldr	r1, [r7, #0]
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 fa41 	bl	801097e <USBD_CtlError>
          err++;
 80104fc:	7afb      	ldrb	r3, [r7, #11]
 80104fe:	3301      	adds	r3, #1
 8010500:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010502:	bf00      	nop
      }
      break;
 8010504:	e037      	b.n	8010576 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	7c1b      	ldrb	r3, [r3, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d109      	bne.n	8010522 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010516:	f107 0208 	add.w	r2, r7, #8
 801051a:	4610      	mov	r0, r2
 801051c:	4798      	blx	r3
 801051e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010520:	e029      	b.n	8010576 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010522:	6839      	ldr	r1, [r7, #0]
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f000 fa2a 	bl	801097e <USBD_CtlError>
        err++;
 801052a:	7afb      	ldrb	r3, [r7, #11]
 801052c:	3301      	adds	r3, #1
 801052e:	72fb      	strb	r3, [r7, #11]
      break;
 8010530:	e021      	b.n	8010576 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	7c1b      	ldrb	r3, [r3, #16]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d10d      	bne.n	8010556 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010542:	f107 0208 	add.w	r2, r7, #8
 8010546:	4610      	mov	r0, r2
 8010548:	4798      	blx	r3
 801054a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	3301      	adds	r3, #1
 8010550:	2207      	movs	r2, #7
 8010552:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010554:	e00f      	b.n	8010576 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010556:	6839      	ldr	r1, [r7, #0]
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f000 fa10 	bl	801097e <USBD_CtlError>
        err++;
 801055e:	7afb      	ldrb	r3, [r7, #11]
 8010560:	3301      	adds	r3, #1
 8010562:	72fb      	strb	r3, [r7, #11]
      break;
 8010564:	e007      	b.n	8010576 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010566:	6839      	ldr	r1, [r7, #0]
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f000 fa08 	bl	801097e <USBD_CtlError>
      err++;
 801056e:	7afb      	ldrb	r3, [r7, #11]
 8010570:	3301      	adds	r3, #1
 8010572:	72fb      	strb	r3, [r7, #11]
      break;
 8010574:	bf00      	nop
  }

  if (err != 0U)
 8010576:	7afb      	ldrb	r3, [r7, #11]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d11e      	bne.n	80105ba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	88db      	ldrh	r3, [r3, #6]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d016      	beq.n	80105b2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010584:	893b      	ldrh	r3, [r7, #8]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00e      	beq.n	80105a8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	88da      	ldrh	r2, [r3, #6]
 801058e:	893b      	ldrh	r3, [r7, #8]
 8010590:	4293      	cmp	r3, r2
 8010592:	bf28      	it	cs
 8010594:	4613      	movcs	r3, r2
 8010596:	b29b      	uxth	r3, r3
 8010598:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801059a:	893b      	ldrh	r3, [r7, #8]
 801059c:	461a      	mov	r2, r3
 801059e:	68f9      	ldr	r1, [r7, #12]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fa69 	bl	8010a78 <USBD_CtlSendData>
 80105a6:	e009      	b.n	80105bc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80105a8:	6839      	ldr	r1, [r7, #0]
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 f9e7 	bl	801097e <USBD_CtlError>
 80105b0:	e004      	b.n	80105bc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 fa9d 	bl	8010af2 <USBD_CtlSendStatus>
 80105b8:	e000      	b.n	80105bc <USBD_GetDescriptor+0x320>
    return;
 80105ba:	bf00      	nop
  }
}
 80105bc:	3710      	adds	r7, #16
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop

080105c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b084      	sub	sp, #16
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	889b      	ldrh	r3, [r3, #4]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d131      	bne.n	801063a <USBD_SetAddress+0x76>
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	88db      	ldrh	r3, [r3, #6]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d12d      	bne.n	801063a <USBD_SetAddress+0x76>
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	885b      	ldrh	r3, [r3, #2]
 80105e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80105e4:	d829      	bhi.n	801063a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	885b      	ldrh	r3, [r3, #2]
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80105f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	2b03      	cmp	r3, #3
 80105fc:	d104      	bne.n	8010608 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80105fe:	6839      	ldr	r1, [r7, #0]
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 f9bc 	bl	801097e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010606:	e01d      	b.n	8010644 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	7bfa      	ldrb	r2, [r7, #15]
 801060c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010610:	7bfb      	ldrb	r3, [r7, #15]
 8010612:	4619      	mov	r1, r3
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f000 fee8 	bl	80113ea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 fa69 	bl	8010af2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010620:	7bfb      	ldrb	r3, [r7, #15]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d004      	beq.n	8010630 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2202      	movs	r2, #2
 801062a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801062e:	e009      	b.n	8010644 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2201      	movs	r2, #1
 8010634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010638:	e004      	b.n	8010644 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801063a:	6839      	ldr	r1, [r7, #0]
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 f99e 	bl	801097e <USBD_CtlError>
  }
}
 8010642:	bf00      	nop
 8010644:	bf00      	nop
 8010646:	3710      	adds	r7, #16
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010656:	2300      	movs	r3, #0
 8010658:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	885b      	ldrh	r3, [r3, #2]
 801065e:	b2da      	uxtb	r2, r3
 8010660:	4b4e      	ldr	r3, [pc, #312]	@ (801079c <USBD_SetConfig+0x150>)
 8010662:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010664:	4b4d      	ldr	r3, [pc, #308]	@ (801079c <USBD_SetConfig+0x150>)
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d905      	bls.n	8010678 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801066c:	6839      	ldr	r1, [r7, #0]
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f000 f985 	bl	801097e <USBD_CtlError>
    return USBD_FAIL;
 8010674:	2303      	movs	r3, #3
 8010676:	e08c      	b.n	8010792 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801067e:	b2db      	uxtb	r3, r3
 8010680:	2b02      	cmp	r3, #2
 8010682:	d002      	beq.n	801068a <USBD_SetConfig+0x3e>
 8010684:	2b03      	cmp	r3, #3
 8010686:	d029      	beq.n	80106dc <USBD_SetConfig+0x90>
 8010688:	e075      	b.n	8010776 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801068a:	4b44      	ldr	r3, [pc, #272]	@ (801079c <USBD_SetConfig+0x150>)
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d020      	beq.n	80106d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010692:	4b42      	ldr	r3, [pc, #264]	@ (801079c <USBD_SetConfig+0x150>)
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	461a      	mov	r2, r3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801069c:	4b3f      	ldr	r3, [pc, #252]	@ (801079c <USBD_SetConfig+0x150>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	4619      	mov	r1, r3
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f7fe ffba 	bl	800f61c <USBD_SetClassConfig>
 80106a8:	4603      	mov	r3, r0
 80106aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80106ac:	7bfb      	ldrb	r3, [r7, #15]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d008      	beq.n	80106c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80106b2:	6839      	ldr	r1, [r7, #0]
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 f962 	bl	801097e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2202      	movs	r2, #2
 80106be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80106c2:	e065      	b.n	8010790 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f000 fa14 	bl	8010af2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2203      	movs	r2, #3
 80106ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80106d2:	e05d      	b.n	8010790 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 fa0c 	bl	8010af2 <USBD_CtlSendStatus>
      break;
 80106da:	e059      	b.n	8010790 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80106dc:	4b2f      	ldr	r3, [pc, #188]	@ (801079c <USBD_SetConfig+0x150>)
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d112      	bne.n	801070a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2202      	movs	r2, #2
 80106e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80106ec:	4b2b      	ldr	r3, [pc, #172]	@ (801079c <USBD_SetConfig+0x150>)
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	461a      	mov	r2, r3
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80106f6:	4b29      	ldr	r3, [pc, #164]	@ (801079c <USBD_SetConfig+0x150>)
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	4619      	mov	r1, r3
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f7fe ffa9 	bl	800f654 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f9f5 	bl	8010af2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010708:	e042      	b.n	8010790 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801070a:	4b24      	ldr	r3, [pc, #144]	@ (801079c <USBD_SetConfig+0x150>)
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	461a      	mov	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	429a      	cmp	r2, r3
 8010716:	d02a      	beq.n	801076e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	b2db      	uxtb	r3, r3
 801071e:	4619      	mov	r1, r3
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f7fe ff97 	bl	800f654 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010726:	4b1d      	ldr	r3, [pc, #116]	@ (801079c <USBD_SetConfig+0x150>)
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	461a      	mov	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010730:	4b1a      	ldr	r3, [pc, #104]	@ (801079c <USBD_SetConfig+0x150>)
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	4619      	mov	r1, r3
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7fe ff70 	bl	800f61c <USBD_SetClassConfig>
 801073c:	4603      	mov	r3, r0
 801073e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010740:	7bfb      	ldrb	r3, [r7, #15]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d00f      	beq.n	8010766 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010746:	6839      	ldr	r1, [r7, #0]
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 f918 	bl	801097e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	b2db      	uxtb	r3, r3
 8010754:	4619      	mov	r1, r3
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7fe ff7c 	bl	800f654 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2202      	movs	r2, #2
 8010760:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010764:	e014      	b.n	8010790 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 f9c3 	bl	8010af2 <USBD_CtlSendStatus>
      break;
 801076c:	e010      	b.n	8010790 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 f9bf 	bl	8010af2 <USBD_CtlSendStatus>
      break;
 8010774:	e00c      	b.n	8010790 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010776:	6839      	ldr	r1, [r7, #0]
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 f900 	bl	801097e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801077e:	4b07      	ldr	r3, [pc, #28]	@ (801079c <USBD_SetConfig+0x150>)
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	4619      	mov	r1, r3
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7fe ff65 	bl	800f654 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801078a:	2303      	movs	r3, #3
 801078c:	73fb      	strb	r3, [r7, #15]
      break;
 801078e:	bf00      	nop
  }

  return ret;
 8010790:	7bfb      	ldrb	r3, [r7, #15]
}
 8010792:	4618      	mov	r0, r3
 8010794:	3710      	adds	r7, #16
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	24000538 	.word	0x24000538

080107a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	88db      	ldrh	r3, [r3, #6]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d004      	beq.n	80107bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 f8e2 	bl	801097e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80107ba:	e023      	b.n	8010804 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	dc02      	bgt.n	80107ce <USBD_GetConfig+0x2e>
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	dc03      	bgt.n	80107d4 <USBD_GetConfig+0x34>
 80107cc:	e015      	b.n	80107fa <USBD_GetConfig+0x5a>
 80107ce:	2b03      	cmp	r3, #3
 80107d0:	d00b      	beq.n	80107ea <USBD_GetConfig+0x4a>
 80107d2:	e012      	b.n	80107fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2200      	movs	r2, #0
 80107d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	3308      	adds	r3, #8
 80107de:	2201      	movs	r2, #1
 80107e0:	4619      	mov	r1, r3
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 f948 	bl	8010a78 <USBD_CtlSendData>
        break;
 80107e8:	e00c      	b.n	8010804 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	3304      	adds	r3, #4
 80107ee:	2201      	movs	r2, #1
 80107f0:	4619      	mov	r1, r3
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f000 f940 	bl	8010a78 <USBD_CtlSendData>
        break;
 80107f8:	e004      	b.n	8010804 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80107fa:	6839      	ldr	r1, [r7, #0]
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f000 f8be 	bl	801097e <USBD_CtlError>
        break;
 8010802:	bf00      	nop
}
 8010804:	bf00      	nop
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801081c:	b2db      	uxtb	r3, r3
 801081e:	3b01      	subs	r3, #1
 8010820:	2b02      	cmp	r3, #2
 8010822:	d81e      	bhi.n	8010862 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	88db      	ldrh	r3, [r3, #6]
 8010828:	2b02      	cmp	r3, #2
 801082a:	d004      	beq.n	8010836 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801082c:	6839      	ldr	r1, [r7, #0]
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 f8a5 	bl	801097e <USBD_CtlError>
        break;
 8010834:	e01a      	b.n	801086c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2201      	movs	r2, #1
 801083a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010842:	2b00      	cmp	r3, #0
 8010844:	d005      	beq.n	8010852 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	f043 0202 	orr.w	r2, r3, #2
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	330c      	adds	r3, #12
 8010856:	2202      	movs	r2, #2
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f000 f90c 	bl	8010a78 <USBD_CtlSendData>
      break;
 8010860:	e004      	b.n	801086c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010862:	6839      	ldr	r1, [r7, #0]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 f88a 	bl	801097e <USBD_CtlError>
      break;
 801086a:	bf00      	nop
  }
}
 801086c:	bf00      	nop
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	885b      	ldrh	r3, [r3, #2]
 8010882:	2b01      	cmp	r3, #1
 8010884:	d107      	bne.n	8010896 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2201      	movs	r2, #1
 801088a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 f92f 	bl	8010af2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010894:	e013      	b.n	80108be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	885b      	ldrh	r3, [r3, #2]
 801089a:	2b02      	cmp	r3, #2
 801089c:	d10b      	bne.n	80108b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	889b      	ldrh	r3, [r3, #4]
 80108a2:	0a1b      	lsrs	r3, r3, #8
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	b2da      	uxtb	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 f91f 	bl	8010af2 <USBD_CtlSendStatus>
}
 80108b4:	e003      	b.n	80108be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80108b6:	6839      	ldr	r1, [r7, #0]
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f000 f860 	bl	801097e <USBD_CtlError>
}
 80108be:	bf00      	nop
 80108c0:	3708      	adds	r7, #8
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b082      	sub	sp, #8
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	3b01      	subs	r3, #1
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d80b      	bhi.n	80108f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	885b      	ldrh	r3, [r3, #2]
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d10c      	bne.n	8010900 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f000 f8ff 	bl	8010af2 <USBD_CtlSendStatus>
      }
      break;
 80108f4:	e004      	b.n	8010900 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80108f6:	6839      	ldr	r1, [r7, #0]
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f000 f840 	bl	801097e <USBD_CtlError>
      break;
 80108fe:	e000      	b.n	8010902 <USBD_ClrFeature+0x3c>
      break;
 8010900:	bf00      	nop
  }
}
 8010902:	bf00      	nop
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801090a:	b580      	push	{r7, lr}
 801090c:	b084      	sub	sp, #16
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	781a      	ldrb	r2, [r3, #0]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	3301      	adds	r3, #1
 8010924:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	781a      	ldrb	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	3301      	adds	r3, #1
 8010932:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010934:	68f8      	ldr	r0, [r7, #12]
 8010936:	f7ff fa17 	bl	800fd68 <SWAPBYTE>
 801093a:	4603      	mov	r3, r0
 801093c:	461a      	mov	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	3301      	adds	r3, #1
 8010946:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	3301      	adds	r3, #1
 801094c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	f7ff fa0a 	bl	800fd68 <SWAPBYTE>
 8010954:	4603      	mov	r3, r0
 8010956:	461a      	mov	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	3301      	adds	r3, #1
 8010960:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	3301      	adds	r3, #1
 8010966:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	f7ff f9fd 	bl	800fd68 <SWAPBYTE>
 801096e:	4603      	mov	r3, r0
 8010970:	461a      	mov	r2, r3
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	80da      	strh	r2, [r3, #6]
}
 8010976:	bf00      	nop
 8010978:	3710      	adds	r7, #16
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801097e:	b580      	push	{r7, lr}
 8010980:	b082      	sub	sp, #8
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
 8010986:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010988:	2180      	movs	r1, #128	@ 0x80
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f000 fcc3 	bl	8011316 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010990:	2100      	movs	r1, #0
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 fcbf 	bl	8011316 <USBD_LL_StallEP>
}
 8010998:	bf00      	nop
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80109ac:	2300      	movs	r3, #0
 80109ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d042      	beq.n	8010a3c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80109ba:	6938      	ldr	r0, [r7, #16]
 80109bc:	f000 f842 	bl	8010a44 <USBD_GetLen>
 80109c0:	4603      	mov	r3, r0
 80109c2:	3301      	adds	r3, #1
 80109c4:	005b      	lsls	r3, r3, #1
 80109c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80109ca:	d808      	bhi.n	80109de <USBD_GetString+0x3e>
 80109cc:	6938      	ldr	r0, [r7, #16]
 80109ce:	f000 f839 	bl	8010a44 <USBD_GetLen>
 80109d2:	4603      	mov	r3, r0
 80109d4:	3301      	adds	r3, #1
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	005b      	lsls	r3, r3, #1
 80109da:	b29a      	uxth	r2, r3
 80109dc:	e001      	b.n	80109e2 <USBD_GetString+0x42>
 80109de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80109e6:	7dfb      	ldrb	r3, [r7, #23]
 80109e8:	68ba      	ldr	r2, [r7, #8]
 80109ea:	4413      	add	r3, r2
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	7812      	ldrb	r2, [r2, #0]
 80109f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80109f2:	7dfb      	ldrb	r3, [r7, #23]
 80109f4:	3301      	adds	r3, #1
 80109f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80109f8:	7dfb      	ldrb	r3, [r7, #23]
 80109fa:	68ba      	ldr	r2, [r7, #8]
 80109fc:	4413      	add	r3, r2
 80109fe:	2203      	movs	r2, #3
 8010a00:	701a      	strb	r2, [r3, #0]
  idx++;
 8010a02:	7dfb      	ldrb	r3, [r7, #23]
 8010a04:	3301      	adds	r3, #1
 8010a06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010a08:	e013      	b.n	8010a32 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8010a0a:	7dfb      	ldrb	r3, [r7, #23]
 8010a0c:	68ba      	ldr	r2, [r7, #8]
 8010a0e:	4413      	add	r3, r2
 8010a10:	693a      	ldr	r2, [r7, #16]
 8010a12:	7812      	ldrb	r2, [r2, #0]
 8010a14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	3301      	adds	r3, #1
 8010a1a:	613b      	str	r3, [r7, #16]
    idx++;
 8010a1c:	7dfb      	ldrb	r3, [r7, #23]
 8010a1e:	3301      	adds	r3, #1
 8010a20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010a22:	7dfb      	ldrb	r3, [r7, #23]
 8010a24:	68ba      	ldr	r2, [r7, #8]
 8010a26:	4413      	add	r3, r2
 8010a28:	2200      	movs	r2, #0
 8010a2a:	701a      	strb	r2, [r3, #0]
    idx++;
 8010a2c:	7dfb      	ldrb	r3, [r7, #23]
 8010a2e:	3301      	adds	r3, #1
 8010a30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d1e7      	bne.n	8010a0a <USBD_GetString+0x6a>
 8010a3a:	e000      	b.n	8010a3e <USBD_GetString+0x9e>
    return;
 8010a3c:	bf00      	nop
  }
}
 8010a3e:	3718      	adds	r7, #24
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b085      	sub	sp, #20
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010a54:	e005      	b.n	8010a62 <USBD_GetLen+0x1e>
  {
    len++;
 8010a56:	7bfb      	ldrb	r3, [r7, #15]
 8010a58:	3301      	adds	r3, #1
 8010a5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1f5      	bne.n	8010a56 <USBD_GetLen+0x12>
  }

  return len;
 8010a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3714      	adds	r7, #20
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b084      	sub	sp, #16
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2202      	movs	r2, #2
 8010a88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	68ba      	ldr	r2, [r7, #8]
 8010a9c:	2100      	movs	r1, #0
 8010a9e:	68f8      	ldr	r0, [r7, #12]
 8010aa0:	f000 fcc2 	bl	8011428 <USBD_LL_Transmit>

  return USBD_OK;
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b084      	sub	sp, #16
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	60f8      	str	r0, [r7, #12]
 8010ab6:	60b9      	str	r1, [r7, #8]
 8010ab8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	2100      	movs	r1, #0
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f000 fcb1 	bl	8011428 <USBD_LL_Transmit>

  return USBD_OK;
 8010ac6:	2300      	movs	r3, #0
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3710      	adds	r7, #16
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b084      	sub	sp, #16
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	60b9      	str	r1, [r7, #8]
 8010ada:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	68ba      	ldr	r2, [r7, #8]
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f000 fcc1 	bl	801146a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b082      	sub	sp, #8
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2204      	movs	r2, #4
 8010afe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010b02:	2300      	movs	r3, #0
 8010b04:	2200      	movs	r2, #0
 8010b06:	2100      	movs	r1, #0
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 fc8d 	bl	8011428 <USBD_LL_Transmit>

  return USBD_OK;
 8010b0e:	2300      	movs	r3, #0
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2205      	movs	r2, #5
 8010b24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010b28:	2300      	movs	r3, #0
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 fc9b 	bl	801146a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3708      	adds	r7, #8
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
	...

08010b40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8010b44:	2201      	movs	r2, #1
 8010b46:	4913      	ldr	r1, [pc, #76]	@ (8010b94 <MX_USB_DEVICE_Init+0x54>)
 8010b48:	4813      	ldr	r0, [pc, #76]	@ (8010b98 <MX_USB_DEVICE_Init+0x58>)
 8010b4a:	f7fe fcea 	bl	800f522 <USBD_Init>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d001      	beq.n	8010b58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010b54:	f7f0 fa46 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 8010b58:	4910      	ldr	r1, [pc, #64]	@ (8010b9c <MX_USB_DEVICE_Init+0x5c>)
 8010b5a:	480f      	ldr	r0, [pc, #60]	@ (8010b98 <MX_USB_DEVICE_Init+0x58>)
 8010b5c:	f7fe fd11 	bl	800f582 <USBD_RegisterClass>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d001      	beq.n	8010b6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010b66:	f7f0 fa3d 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 8010b6a:	490d      	ldr	r1, [pc, #52]	@ (8010ba0 <MX_USB_DEVICE_Init+0x60>)
 8010b6c:	480a      	ldr	r0, [pc, #40]	@ (8010b98 <MX_USB_DEVICE_Init+0x58>)
 8010b6e:	f7fc ff8f 	bl	800da90 <USBD_MSC_RegisterStorage>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d001      	beq.n	8010b7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010b78:	f7f0 fa34 	bl	8000fe4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8010b7c:	4806      	ldr	r0, [pc, #24]	@ (8010b98 <MX_USB_DEVICE_Init+0x58>)
 8010b7e:	f7fe fd36 	bl	800f5ee <USBD_Start>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d001      	beq.n	8010b8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010b88:	f7f0 fa2c 	bl	8000fe4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010b8c:	f7f2 ff4a 	bl	8003a24 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010b90:	bf00      	nop
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	24000090 	.word	0x24000090
 8010b98:	2400053c 	.word	0x2400053c
 8010b9c:	24000010 	.word	0x24000010
 8010ba0:	240000e4 	.word	0x240000e4

08010ba4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	4603      	mov	r3, r0
 8010bac:	6039      	str	r1, [r7, #0]
 8010bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	2212      	movs	r2, #18
 8010bb4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8010bb6:	4b03      	ldr	r3, [pc, #12]	@ (8010bc4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	370c      	adds	r7, #12
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr
 8010bc4:	240000b0 	.word	0x240000b0

08010bc8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	4603      	mov	r3, r0
 8010bd0:	6039      	str	r1, [r7, #0]
 8010bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	2204      	movs	r2, #4
 8010bd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010bda:	4b03      	ldr	r3, [pc, #12]	@ (8010be8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr
 8010be8:	240000c4 	.word	0x240000c4

08010bec <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	6039      	str	r1, [r7, #0]
 8010bf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010bf8:	79fb      	ldrb	r3, [r7, #7]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d105      	bne.n	8010c0a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010bfe:	683a      	ldr	r2, [r7, #0]
 8010c00:	4907      	ldr	r1, [pc, #28]	@ (8010c20 <USBD_HS_ProductStrDescriptor+0x34>)
 8010c02:	4808      	ldr	r0, [pc, #32]	@ (8010c24 <USBD_HS_ProductStrDescriptor+0x38>)
 8010c04:	f7ff fecc 	bl	80109a0 <USBD_GetString>
 8010c08:	e004      	b.n	8010c14 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010c0a:	683a      	ldr	r2, [r7, #0]
 8010c0c:	4904      	ldr	r1, [pc, #16]	@ (8010c20 <USBD_HS_ProductStrDescriptor+0x34>)
 8010c0e:	4805      	ldr	r0, [pc, #20]	@ (8010c24 <USBD_HS_ProductStrDescriptor+0x38>)
 8010c10:	f7ff fec6 	bl	80109a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c14:	4b02      	ldr	r3, [pc, #8]	@ (8010c20 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3708      	adds	r7, #8
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}
 8010c1e:	bf00      	nop
 8010c20:	24000818 	.word	0x24000818
 8010c24:	080115cc 	.word	0x080115cc

08010c28 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	4603      	mov	r3, r0
 8010c30:	6039      	str	r1, [r7, #0]
 8010c32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010c34:	683a      	ldr	r2, [r7, #0]
 8010c36:	4904      	ldr	r1, [pc, #16]	@ (8010c48 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010c38:	4804      	ldr	r0, [pc, #16]	@ (8010c4c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8010c3a:	f7ff feb1 	bl	80109a0 <USBD_GetString>
  return USBD_StrDesc;
 8010c3e:	4b02      	ldr	r3, [pc, #8]	@ (8010c48 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	24000818 	.word	0x24000818
 8010c4c:	080115e0 	.word	0x080115e0

08010c50 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	4603      	mov	r3, r0
 8010c58:	6039      	str	r1, [r7, #0]
 8010c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	221a      	movs	r2, #26
 8010c60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c62:	f000 f843 	bl	8010cec <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010c66:	4b02      	ldr	r3, [pc, #8]	@ (8010c70 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	240000c8 	.word	0x240000c8

08010c74 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	6039      	str	r1, [r7, #0]
 8010c7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010c80:	79fb      	ldrb	r3, [r7, #7]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d105      	bne.n	8010c92 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	4907      	ldr	r1, [pc, #28]	@ (8010ca8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010c8a:	4808      	ldr	r0, [pc, #32]	@ (8010cac <USBD_HS_ConfigStrDescriptor+0x38>)
 8010c8c:	f7ff fe88 	bl	80109a0 <USBD_GetString>
 8010c90:	e004      	b.n	8010c9c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	4904      	ldr	r1, [pc, #16]	@ (8010ca8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010c96:	4805      	ldr	r0, [pc, #20]	@ (8010cac <USBD_HS_ConfigStrDescriptor+0x38>)
 8010c98:	f7ff fe82 	bl	80109a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c9c:	4b02      	ldr	r3, [pc, #8]	@ (8010ca8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3708      	adds	r7, #8
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	24000818 	.word	0x24000818
 8010cac:	080115f4 	.word	0x080115f4

08010cb0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	6039      	str	r1, [r7, #0]
 8010cba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010cbc:	79fb      	ldrb	r3, [r7, #7]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d105      	bne.n	8010cce <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010cc2:	683a      	ldr	r2, [r7, #0]
 8010cc4:	4907      	ldr	r1, [pc, #28]	@ (8010ce4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010cc6:	4808      	ldr	r0, [pc, #32]	@ (8010ce8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010cc8:	f7ff fe6a 	bl	80109a0 <USBD_GetString>
 8010ccc:	e004      	b.n	8010cd8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010cce:	683a      	ldr	r2, [r7, #0]
 8010cd0:	4904      	ldr	r1, [pc, #16]	@ (8010ce4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010cd2:	4805      	ldr	r0, [pc, #20]	@ (8010ce8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010cd4:	f7ff fe64 	bl	80109a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cd8:	4b02      	ldr	r3, [pc, #8]	@ (8010ce4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3708      	adds	r7, #8
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	24000818 	.word	0x24000818
 8010ce8:	08011600 	.word	0x08011600

08010cec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8010d30 <Get_SerialNum+0x44>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8010d34 <Get_SerialNum+0x48>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8010d38 <Get_SerialNum+0x4c>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010d04:	68fa      	ldr	r2, [r7, #12]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4413      	add	r3, r2
 8010d0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d009      	beq.n	8010d26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010d12:	2208      	movs	r2, #8
 8010d14:	4909      	ldr	r1, [pc, #36]	@ (8010d3c <Get_SerialNum+0x50>)
 8010d16:	68f8      	ldr	r0, [r7, #12]
 8010d18:	f000 f814 	bl	8010d44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010d1c:	2204      	movs	r2, #4
 8010d1e:	4908      	ldr	r1, [pc, #32]	@ (8010d40 <Get_SerialNum+0x54>)
 8010d20:	68b8      	ldr	r0, [r7, #8]
 8010d22:	f000 f80f 	bl	8010d44 <IntToUnicode>
  }
}
 8010d26:	bf00      	nop
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	08fff800 	.word	0x08fff800
 8010d34:	08fff804 	.word	0x08fff804
 8010d38:	08fff808 	.word	0x08fff808
 8010d3c:	240000ca 	.word	0x240000ca
 8010d40:	240000da 	.word	0x240000da

08010d44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b087      	sub	sp, #28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	4613      	mov	r3, r2
 8010d50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d52:	2300      	movs	r3, #0
 8010d54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d56:	2300      	movs	r3, #0
 8010d58:	75fb      	strb	r3, [r7, #23]
 8010d5a:	e027      	b.n	8010dac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	0f1b      	lsrs	r3, r3, #28
 8010d60:	2b09      	cmp	r3, #9
 8010d62:	d80b      	bhi.n	8010d7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	0f1b      	lsrs	r3, r3, #28
 8010d68:	b2da      	uxtb	r2, r3
 8010d6a:	7dfb      	ldrb	r3, [r7, #23]
 8010d6c:	005b      	lsls	r3, r3, #1
 8010d6e:	4619      	mov	r1, r3
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	440b      	add	r3, r1
 8010d74:	3230      	adds	r2, #48	@ 0x30
 8010d76:	b2d2      	uxtb	r2, r2
 8010d78:	701a      	strb	r2, [r3, #0]
 8010d7a:	e00a      	b.n	8010d92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	0f1b      	lsrs	r3, r3, #28
 8010d80:	b2da      	uxtb	r2, r3
 8010d82:	7dfb      	ldrb	r3, [r7, #23]
 8010d84:	005b      	lsls	r3, r3, #1
 8010d86:	4619      	mov	r1, r3
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	440b      	add	r3, r1
 8010d8c:	3237      	adds	r2, #55	@ 0x37
 8010d8e:	b2d2      	uxtb	r2, r2
 8010d90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	011b      	lsls	r3, r3, #4
 8010d96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d98:	7dfb      	ldrb	r3, [r7, #23]
 8010d9a:	005b      	lsls	r3, r3, #1
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	4413      	add	r3, r2
 8010da2:	2200      	movs	r2, #0
 8010da4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010da6:	7dfb      	ldrb	r3, [r7, #23]
 8010da8:	3301      	adds	r3, #1
 8010daa:	75fb      	strb	r3, [r7, #23]
 8010dac:	7dfa      	ldrb	r2, [r7, #23]
 8010dae:	79fb      	ldrb	r3, [r7, #7]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d3d3      	bcc.n	8010d5c <IntToUnicode+0x18>
  }
}
 8010db4:	bf00      	nop
 8010db6:	bf00      	nop
 8010db8:	371c      	adds	r7, #28
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr

08010dc2 <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 8010dc2:	b480      	push	{r7}
 8010dc4:	b083      	sub	sp, #12
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	4603      	mov	r3, r0
 8010dca:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 8010dcc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	370c      	adds	r7, #12
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8010dda:	b480      	push	{r7}
 8010ddc:	b085      	sub	sp, #20
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	4603      	mov	r3, r0
 8010de2:	60b9      	str	r1, [r7, #8]
 8010de4:	607a      	str	r2, [r7, #4]
 8010de6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8010dee:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010df6:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8010df8:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3714      	adds	r7, #20
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr

08010e06 <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 8010e06:	b480      	push	{r7}
 8010e08:	b083      	sub	sp, #12
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 8010e10:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	370c      	adds	r7, #12
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr

08010e1e <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 8010e1e:	b480      	push	{r7}
 8010e20:	b083      	sub	sp, #12
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	4603      	mov	r3, r0
 8010e26:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 8010e28:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	370c      	adds	r7, #12
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr

08010e36 <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010e36:	b480      	push	{r7}
 8010e38:	b085      	sub	sp, #20
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	607a      	str	r2, [r7, #4]
 8010e40:	461a      	mov	r2, r3
 8010e42:	4603      	mov	r3, r0
 8010e44:	73fb      	strb	r3, [r7, #15]
 8010e46:	4613      	mov	r3, r2
 8010e48:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 8010e4a:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3714      	adds	r7, #20
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr

08010e58 <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60b9      	str	r1, [r7, #8]
 8010e60:	607a      	str	r2, [r7, #4]
 8010e62:	461a      	mov	r2, r3
 8010e64:	4603      	mov	r3, r0
 8010e66:	73fb      	strb	r3, [r7, #15]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 8010e6c:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3714      	adds	r7, #20
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr

08010e7a <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 8010e7a:	b480      	push	{r7}
 8010e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 8010e7e:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	46bd      	mov	sp, r7
 8010e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e88:	4770      	bx	lr
	...

08010e8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b0ba      	sub	sp, #232	@ 0xe8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010e98:	2200      	movs	r2, #0
 8010e9a:	601a      	str	r2, [r3, #0]
 8010e9c:	605a      	str	r2, [r3, #4]
 8010e9e:	609a      	str	r2, [r3, #8]
 8010ea0:	60da      	str	r2, [r3, #12]
 8010ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010ea4:	f107 0310 	add.w	r3, r7, #16
 8010ea8:	22c0      	movs	r2, #192	@ 0xc0
 8010eaa:	2100      	movs	r1, #0
 8010eac:	4618      	mov	r0, r3
 8010eae:	f000 fb55 	bl	801155c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	4a33      	ldr	r2, [pc, #204]	@ (8010f84 <HAL_PCD_MspInit+0xf8>)
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d15e      	bne.n	8010f7a <HAL_PCD_MspInit+0xee>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010ebc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010ec0:	f04f 0300 	mov.w	r3, #0
 8010ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010ec8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8010ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010ed0:	f107 0310 	add.w	r3, r7, #16
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7f3 fd73 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d001      	beq.n	8010ee4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8010ee0:	f7f0 f880 	bl	8000fe4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010ee4:	f7f2 fd9e 	bl	8003a24 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ee8:	4b27      	ldr	r3, [pc, #156]	@ (8010f88 <HAL_PCD_MspInit+0xfc>)
 8010eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8010eee:	4a26      	ldr	r2, [pc, #152]	@ (8010f88 <HAL_PCD_MspInit+0xfc>)
 8010ef0:	f043 0301 	orr.w	r3, r3, #1
 8010ef4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8010ef8:	4b23      	ldr	r3, [pc, #140]	@ (8010f88 <HAL_PCD_MspInit+0xfc>)
 8010efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8010efe:	f003 0301 	and.w	r3, r3, #1
 8010f02:	60fb      	str	r3, [r7, #12]
 8010f04:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010f06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f14:	2300      	movs	r3, #0
 8010f16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010f1e:	4619      	mov	r1, r3
 8010f20:	481a      	ldr	r0, [pc, #104]	@ (8010f8c <HAL_PCD_MspInit+0x100>)
 8010f22:	f7f0 ff7d 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010f26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f2e:	2302      	movs	r3, #2
 8010f30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f34:	2300      	movs	r3, #0
 8010f36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010f44:	4619      	mov	r1, r3
 8010f46:	4811      	ldr	r0, [pc, #68]	@ (8010f8c <HAL_PCD_MspInit+0x100>)
 8010f48:	f7f0 ff6a 	bl	8001e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8010f88 <HAL_PCD_MspInit+0xfc>)
 8010f4e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8010f52:	4a0d      	ldr	r2, [pc, #52]	@ (8010f88 <HAL_PCD_MspInit+0xfc>)
 8010f54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8010f58:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8010f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f88 <HAL_PCD_MspInit+0xfc>)
 8010f5e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8010f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010f66:	60bb      	str	r3, [r7, #8]
 8010f68:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	2100      	movs	r1, #0
 8010f6e:	204d      	movs	r0, #77	@ 0x4d
 8010f70:	f7f0 fea9 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010f74:	204d      	movs	r0, #77	@ 0x4d
 8010f76:	f7f0 fec0 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010f7a:	bf00      	nop
 8010f7c:	37e8      	adds	r7, #232	@ 0xe8
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	40040000 	.word	0x40040000
 8010f88:	58024400 	.word	0x58024400
 8010f8c:	58020000 	.word	0x58020000

08010f90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	4610      	mov	r0, r2
 8010fa8:	f7fe fb6e 	bl	800f688 <USBD_LL_SetupStage>
}
 8010fac:	bf00      	nop
 8010fae:	3708      	adds	r7, #8
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010fc6:	78fa      	ldrb	r2, [r7, #3]
 8010fc8:	6879      	ldr	r1, [r7, #4]
 8010fca:	4613      	mov	r3, r2
 8010fcc:	00db      	lsls	r3, r3, #3
 8010fce:	4413      	add	r3, r2
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	440b      	add	r3, r1
 8010fd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	78fb      	ldrb	r3, [r7, #3]
 8010fdc:	4619      	mov	r1, r3
 8010fde:	f7fe fba8 	bl	800f732 <USBD_LL_DataOutStage>
}
 8010fe2:	bf00      	nop
 8010fe4:	3708      	adds	r7, #8
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b082      	sub	sp, #8
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010ffc:	78fa      	ldrb	r2, [r7, #3]
 8010ffe:	6879      	ldr	r1, [r7, #4]
 8011000:	4613      	mov	r3, r2
 8011002:	00db      	lsls	r3, r3, #3
 8011004:	4413      	add	r3, r2
 8011006:	009b      	lsls	r3, r3, #2
 8011008:	440b      	add	r3, r1
 801100a:	3320      	adds	r3, #32
 801100c:	681a      	ldr	r2, [r3, #0]
 801100e:	78fb      	ldrb	r3, [r7, #3]
 8011010:	4619      	mov	r1, r3
 8011012:	f7fe fc41 	bl	800f898 <USBD_LL_DataInStage>
}
 8011016:	bf00      	nop
 8011018:	3708      	adds	r7, #8
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}

0801101e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801101e:	b580      	push	{r7, lr}
 8011020:	b082      	sub	sp, #8
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801102c:	4618      	mov	r0, r3
 801102e:	f7fe fd7b 	bl	800fb28 <USBD_LL_SOF>
}
 8011032:	bf00      	nop
 8011034:	3708      	adds	r7, #8
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}

0801103a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801103a:	b580      	push	{r7, lr}
 801103c:	b084      	sub	sp, #16
 801103e:	af00      	add	r7, sp, #0
 8011040:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011042:	2301      	movs	r3, #1
 8011044:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	79db      	ldrb	r3, [r3, #7]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d102      	bne.n	8011054 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801104e:	2300      	movs	r3, #0
 8011050:	73fb      	strb	r3, [r7, #15]
 8011052:	e008      	b.n	8011066 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	79db      	ldrb	r3, [r3, #7]
 8011058:	2b02      	cmp	r3, #2
 801105a:	d102      	bne.n	8011062 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801105c:	2301      	movs	r3, #1
 801105e:	73fb      	strb	r3, [r7, #15]
 8011060:	e001      	b.n	8011066 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011062:	f7ef ffbf 	bl	8000fe4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801106c:	7bfa      	ldrb	r2, [r7, #15]
 801106e:	4611      	mov	r1, r2
 8011070:	4618      	mov	r0, r3
 8011072:	f7fe fd15 	bl	800faa0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801107c:	4618      	mov	r0, r3
 801107e:	f7fe fcbd 	bl	800f9fc <USBD_LL_Reset>
}
 8011082:	bf00      	nop
 8011084:	3710      	adds	r7, #16
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
	...

0801108c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801109a:	4618      	mov	r0, r3
 801109c:	f7fe fd10 	bl	800fac0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	6812      	ldr	r2, [r2, #0]
 80110ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80110b2:	f043 0301 	orr.w	r3, r3, #1
 80110b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	7adb      	ldrb	r3, [r3, #11]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d005      	beq.n	80110cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80110c0:	4b04      	ldr	r3, [pc, #16]	@ (80110d4 <HAL_PCD_SuspendCallback+0x48>)
 80110c2:	691b      	ldr	r3, [r3, #16]
 80110c4:	4a03      	ldr	r2, [pc, #12]	@ (80110d4 <HAL_PCD_SuspendCallback+0x48>)
 80110c6:	f043 0306 	orr.w	r3, r3, #6
 80110ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80110cc:	bf00      	nop
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	e000ed00 	.word	0xe000ed00

080110d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7fe fd06 	bl	800faf8 <USBD_LL_Resume>
}
 80110ec:	bf00      	nop
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	460b      	mov	r3, r1
 80110fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011106:	78fa      	ldrb	r2, [r7, #3]
 8011108:	4611      	mov	r1, r2
 801110a:	4618      	mov	r0, r3
 801110c:	f7fe fd5e 	bl	800fbcc <USBD_LL_IsoOUTIncomplete>
}
 8011110:	bf00      	nop
 8011112:	3708      	adds	r7, #8
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	460b      	mov	r3, r1
 8011122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801112a:	78fa      	ldrb	r2, [r7, #3]
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7fe fd1a 	bl	800fb68 <USBD_LL_IsoINIncomplete>
}
 8011134:	bf00      	nop
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801114a:	4618      	mov	r0, r3
 801114c:	f7fe fd70 	bl	800fc30 <USBD_LL_DevConnected>
}
 8011150:	bf00      	nop
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011166:	4618      	mov	r0, r3
 8011168:	f7fe fd6d 	bl	800fc46 <USBD_LL_DevDisconnected>
}
 801116c:	bf00      	nop
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	2b01      	cmp	r3, #1
 8011182:	d140      	bne.n	8011206 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8011184:	4a22      	ldr	r2, [pc, #136]	@ (8011210 <USBD_LL_Init+0x9c>)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	4a20      	ldr	r2, [pc, #128]	@ (8011210 <USBD_LL_Init+0x9c>)
 8011190:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011194:	4b1e      	ldr	r3, [pc, #120]	@ (8011210 <USBD_LL_Init+0x9c>)
 8011196:	4a1f      	ldr	r2, [pc, #124]	@ (8011214 <USBD_LL_Init+0xa0>)
 8011198:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801119a:	4b1d      	ldr	r3, [pc, #116]	@ (8011210 <USBD_LL_Init+0x9c>)
 801119c:	2209      	movs	r2, #9
 801119e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80111a0:	4b1b      	ldr	r3, [pc, #108]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111a2:	2202      	movs	r2, #2
 80111a4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80111a6:	4b1a      	ldr	r3, [pc, #104]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111a8:	2200      	movs	r2, #0
 80111aa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80111ac:	4b18      	ldr	r3, [pc, #96]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111ae:	2202      	movs	r2, #2
 80111b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80111b2:	4b17      	ldr	r3, [pc, #92]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80111b8:	4b15      	ldr	r3, [pc, #84]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80111be:	4b14      	ldr	r3, [pc, #80]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 80111c4:	4b12      	ldr	r3, [pc, #72]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111c6:	2201      	movs	r2, #1
 80111c8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80111ca:	4b11      	ldr	r3, [pc, #68]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111cc:	2200      	movs	r2, #0
 80111ce:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80111d0:	4b0f      	ldr	r3, [pc, #60]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80111d6:	480e      	ldr	r0, [pc, #56]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111d8:	f7f1 f91f 	bl	800241a <HAL_PCD_Init>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d001      	beq.n	80111e6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80111e2:	f7ef feff 	bl	8000fe4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80111e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80111ea:	4809      	ldr	r0, [pc, #36]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111ec:	f7f2 fb9f 	bl	800392e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80111f0:	2280      	movs	r2, #128	@ 0x80
 80111f2:	2100      	movs	r1, #0
 80111f4:	4806      	ldr	r0, [pc, #24]	@ (8011210 <USBD_LL_Init+0x9c>)
 80111f6:	f7f2 fb53 	bl	80038a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80111fa:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80111fe:	2101      	movs	r1, #1
 8011200:	4803      	ldr	r0, [pc, #12]	@ (8011210 <USBD_LL_Init+0x9c>)
 8011202:	f7f2 fb4d 	bl	80038a0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8011206:	2300      	movs	r3, #0
}
 8011208:	4618      	mov	r0, r3
 801120a:	3708      	adds	r7, #8
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	24000a18 	.word	0x24000a18
 8011214:	40040000 	.word	0x40040000

08011218 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011220:	2300      	movs	r3, #0
 8011222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011224:	2300      	movs	r3, #0
 8011226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801122e:	4618      	mov	r0, r3
 8011230:	f7f1 f9ff 	bl	8002632 <HAL_PCD_Start>
 8011234:	4603      	mov	r3, r0
 8011236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011238:	7bfb      	ldrb	r3, [r7, #15]
 801123a:	4618      	mov	r0, r3
 801123c:	f000 f962 	bl	8011504 <USBD_Get_USB_Status>
 8011240:	4603      	mov	r3, r0
 8011242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011244:	7bbb      	ldrb	r3, [r7, #14]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801124e:	b580      	push	{r7, lr}
 8011250:	b084      	sub	sp, #16
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
 8011256:	4608      	mov	r0, r1
 8011258:	4611      	mov	r1, r2
 801125a:	461a      	mov	r2, r3
 801125c:	4603      	mov	r3, r0
 801125e:	70fb      	strb	r3, [r7, #3]
 8011260:	460b      	mov	r3, r1
 8011262:	70bb      	strb	r3, [r7, #2]
 8011264:	4613      	mov	r3, r2
 8011266:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011268:	2300      	movs	r3, #0
 801126a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801126c:	2300      	movs	r3, #0
 801126e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011276:	78bb      	ldrb	r3, [r7, #2]
 8011278:	883a      	ldrh	r2, [r7, #0]
 801127a:	78f9      	ldrb	r1, [r7, #3]
 801127c:	f7f1 ff00 	bl	8003080 <HAL_PCD_EP_Open>
 8011280:	4603      	mov	r3, r0
 8011282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011284:	7bfb      	ldrb	r3, [r7, #15]
 8011286:	4618      	mov	r0, r3
 8011288:	f000 f93c 	bl	8011504 <USBD_Get_USB_Status>
 801128c:	4603      	mov	r3, r0
 801128e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011290:	7bbb      	ldrb	r3, [r7, #14]
}
 8011292:	4618      	mov	r0, r3
 8011294:	3710      	adds	r7, #16
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b084      	sub	sp, #16
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
 80112a2:	460b      	mov	r3, r1
 80112a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112a6:	2300      	movs	r3, #0
 80112a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112aa:	2300      	movs	r3, #0
 80112ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80112b4:	78fa      	ldrb	r2, [r7, #3]
 80112b6:	4611      	mov	r1, r2
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7f1 ff49 	bl	8003150 <HAL_PCD_EP_Close>
 80112be:	4603      	mov	r3, r0
 80112c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112c2:	7bfb      	ldrb	r3, [r7, #15]
 80112c4:	4618      	mov	r0, r3
 80112c6:	f000 f91d 	bl	8011504 <USBD_Get_USB_Status>
 80112ca:	4603      	mov	r3, r0
 80112cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3710      	adds	r7, #16
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b084      	sub	sp, #16
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	460b      	mov	r3, r1
 80112e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112e8:	2300      	movs	r3, #0
 80112ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80112f2:	78fa      	ldrb	r2, [r7, #3]
 80112f4:	4611      	mov	r1, r2
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7f2 f8eb 	bl	80034d2 <HAL_PCD_EP_Flush>
 80112fc:	4603      	mov	r3, r0
 80112fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011300:	7bfb      	ldrb	r3, [r7, #15]
 8011302:	4618      	mov	r0, r3
 8011304:	f000 f8fe 	bl	8011504 <USBD_Get_USB_Status>
 8011308:	4603      	mov	r3, r0
 801130a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801130c:	7bbb      	ldrb	r3, [r7, #14]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b084      	sub	sp, #16
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
 801131e:	460b      	mov	r3, r1
 8011320:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011322:	2300      	movs	r3, #0
 8011324:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011326:	2300      	movs	r3, #0
 8011328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011330:	78fa      	ldrb	r2, [r7, #3]
 8011332:	4611      	mov	r1, r2
 8011334:	4618      	mov	r0, r3
 8011336:	f7f1 ffe2 	bl	80032fe <HAL_PCD_EP_SetStall>
 801133a:	4603      	mov	r3, r0
 801133c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801133e:	7bfb      	ldrb	r3, [r7, #15]
 8011340:	4618      	mov	r0, r3
 8011342:	f000 f8df 	bl	8011504 <USBD_Get_USB_Status>
 8011346:	4603      	mov	r3, r0
 8011348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801134a:	7bbb      	ldrb	r3, [r7, #14]
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b084      	sub	sp, #16
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	460b      	mov	r3, r1
 801135e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011360:	2300      	movs	r3, #0
 8011362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801136e:	78fa      	ldrb	r2, [r7, #3]
 8011370:	4611      	mov	r1, r2
 8011372:	4618      	mov	r0, r3
 8011374:	f7f2 f826 	bl	80033c4 <HAL_PCD_EP_ClrStall>
 8011378:	4603      	mov	r3, r0
 801137a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801137c:	7bfb      	ldrb	r3, [r7, #15]
 801137e:	4618      	mov	r0, r3
 8011380:	f000 f8c0 	bl	8011504 <USBD_Get_USB_Status>
 8011384:	4603      	mov	r3, r0
 8011386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011388:	7bbb      	ldrb	r3, [r7, #14]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3710      	adds	r7, #16
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}

08011392 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011392:	b480      	push	{r7}
 8011394:	b085      	sub	sp, #20
 8011396:	af00      	add	r7, sp, #0
 8011398:	6078      	str	r0, [r7, #4]
 801139a:	460b      	mov	r3, r1
 801139c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80113a4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80113a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	da0b      	bge.n	80113c6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80113ae:	78fb      	ldrb	r3, [r7, #3]
 80113b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80113b4:	68f9      	ldr	r1, [r7, #12]
 80113b6:	4613      	mov	r3, r2
 80113b8:	00db      	lsls	r3, r3, #3
 80113ba:	4413      	add	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	440b      	add	r3, r1
 80113c0:	3316      	adds	r3, #22
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	e00b      	b.n	80113de <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80113c6:	78fb      	ldrb	r3, [r7, #3]
 80113c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80113cc:	68f9      	ldr	r1, [r7, #12]
 80113ce:	4613      	mov	r3, r2
 80113d0:	00db      	lsls	r3, r3, #3
 80113d2:	4413      	add	r3, r2
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	440b      	add	r3, r1
 80113d8:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80113dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3714      	adds	r7, #20
 80113e2:	46bd      	mov	sp, r7
 80113e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e8:	4770      	bx	lr

080113ea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80113ea:	b580      	push	{r7, lr}
 80113ec:	b084      	sub	sp, #16
 80113ee:	af00      	add	r7, sp, #0
 80113f0:	6078      	str	r0, [r7, #4]
 80113f2:	460b      	mov	r3, r1
 80113f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113f6:	2300      	movs	r3, #0
 80113f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113fa:	2300      	movs	r3, #0
 80113fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011404:	78fa      	ldrb	r2, [r7, #3]
 8011406:	4611      	mov	r1, r2
 8011408:	4618      	mov	r0, r3
 801140a:	f7f1 fe15 	bl	8003038 <HAL_PCD_SetAddress>
 801140e:	4603      	mov	r3, r0
 8011410:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011412:	7bfb      	ldrb	r3, [r7, #15]
 8011414:	4618      	mov	r0, r3
 8011416:	f000 f875 	bl	8011504 <USBD_Get_USB_Status>
 801141a:	4603      	mov	r3, r0
 801141c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801141e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011420:	4618      	mov	r0, r3
 8011422:	3710      	adds	r7, #16
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b086      	sub	sp, #24
 801142c:	af00      	add	r7, sp, #0
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	607a      	str	r2, [r7, #4]
 8011432:	603b      	str	r3, [r7, #0]
 8011434:	460b      	mov	r3, r1
 8011436:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011438:	2300      	movs	r3, #0
 801143a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801143c:	2300      	movs	r3, #0
 801143e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011446:	7af9      	ldrb	r1, [r7, #11]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	f7f1 ff1d 	bl	800328a <HAL_PCD_EP_Transmit>
 8011450:	4603      	mov	r3, r0
 8011452:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011454:	7dfb      	ldrb	r3, [r7, #23]
 8011456:	4618      	mov	r0, r3
 8011458:	f000 f854 	bl	8011504 <USBD_Get_USB_Status>
 801145c:	4603      	mov	r3, r0
 801145e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011460:	7dbb      	ldrb	r3, [r7, #22]
}
 8011462:	4618      	mov	r0, r3
 8011464:	3718      	adds	r7, #24
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b086      	sub	sp, #24
 801146e:	af00      	add	r7, sp, #0
 8011470:	60f8      	str	r0, [r7, #12]
 8011472:	607a      	str	r2, [r7, #4]
 8011474:	603b      	str	r3, [r7, #0]
 8011476:	460b      	mov	r3, r1
 8011478:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801147a:	2300      	movs	r3, #0
 801147c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801147e:	2300      	movs	r3, #0
 8011480:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011488:	7af9      	ldrb	r1, [r7, #11]
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	f7f1 fea9 	bl	80031e4 <HAL_PCD_EP_Receive>
 8011492:	4603      	mov	r3, r0
 8011494:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011496:	7dfb      	ldrb	r3, [r7, #23]
 8011498:	4618      	mov	r0, r3
 801149a:	f000 f833 	bl	8011504 <USBD_Get_USB_Status>
 801149e:	4603      	mov	r3, r0
 80114a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80114a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3718      	adds	r7, #24
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	460b      	mov	r3, r1
 80114b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80114be:	78fa      	ldrb	r2, [r7, #3]
 80114c0:	4611      	mov	r1, r2
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7f1 fec9 	bl	800325a <HAL_PCD_EP_GetRxCount>
 80114c8:	4603      	mov	r3, r0
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3708      	adds	r7, #8
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
	...

080114d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80114dc:	4b03      	ldr	r3, [pc, #12]	@ (80114ec <USBD_static_malloc+0x18>)
}
 80114de:	4618      	mov	r0, r3
 80114e0:	370c      	adds	r7, #12
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
 80114ea:	bf00      	nop
 80114ec:	24000efc 	.word	0x24000efc

080114f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80114f8:	bf00      	nop
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011504:	b480      	push	{r7}
 8011506:	b085      	sub	sp, #20
 8011508:	af00      	add	r7, sp, #0
 801150a:	4603      	mov	r3, r0
 801150c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801150e:	2300      	movs	r3, #0
 8011510:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011512:	79fb      	ldrb	r3, [r7, #7]
 8011514:	2b03      	cmp	r3, #3
 8011516:	d817      	bhi.n	8011548 <USBD_Get_USB_Status+0x44>
 8011518:	a201      	add	r2, pc, #4	@ (adr r2, 8011520 <USBD_Get_USB_Status+0x1c>)
 801151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801151e:	bf00      	nop
 8011520:	08011531 	.word	0x08011531
 8011524:	08011537 	.word	0x08011537
 8011528:	0801153d 	.word	0x0801153d
 801152c:	08011543 	.word	0x08011543
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011530:	2300      	movs	r3, #0
 8011532:	73fb      	strb	r3, [r7, #15]
    break;
 8011534:	e00b      	b.n	801154e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011536:	2303      	movs	r3, #3
 8011538:	73fb      	strb	r3, [r7, #15]
    break;
 801153a:	e008      	b.n	801154e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801153c:	2301      	movs	r3, #1
 801153e:	73fb      	strb	r3, [r7, #15]
    break;
 8011540:	e005      	b.n	801154e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011542:	2303      	movs	r3, #3
 8011544:	73fb      	strb	r3, [r7, #15]
    break;
 8011546:	e002      	b.n	801154e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011548:	2303      	movs	r3, #3
 801154a:	73fb      	strb	r3, [r7, #15]
    break;
 801154c:	bf00      	nop
  }
  return usb_status;
 801154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3714      	adds	r7, #20
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <memset>:
 801155c:	4402      	add	r2, r0
 801155e:	4603      	mov	r3, r0
 8011560:	4293      	cmp	r3, r2
 8011562:	d100      	bne.n	8011566 <memset+0xa>
 8011564:	4770      	bx	lr
 8011566:	f803 1b01 	strb.w	r1, [r3], #1
 801156a:	e7f9      	b.n	8011560 <memset+0x4>

0801156c <__libc_init_array>:
 801156c:	b570      	push	{r4, r5, r6, lr}
 801156e:	4d0d      	ldr	r5, [pc, #52]	@ (80115a4 <__libc_init_array+0x38>)
 8011570:	4c0d      	ldr	r4, [pc, #52]	@ (80115a8 <__libc_init_array+0x3c>)
 8011572:	1b64      	subs	r4, r4, r5
 8011574:	10a4      	asrs	r4, r4, #2
 8011576:	2600      	movs	r6, #0
 8011578:	42a6      	cmp	r6, r4
 801157a:	d109      	bne.n	8011590 <__libc_init_array+0x24>
 801157c:	4d0b      	ldr	r5, [pc, #44]	@ (80115ac <__libc_init_array+0x40>)
 801157e:	4c0c      	ldr	r4, [pc, #48]	@ (80115b0 <__libc_init_array+0x44>)
 8011580:	f000 f818 	bl	80115b4 <_init>
 8011584:	1b64      	subs	r4, r4, r5
 8011586:	10a4      	asrs	r4, r4, #2
 8011588:	2600      	movs	r6, #0
 801158a:	42a6      	cmp	r6, r4
 801158c:	d105      	bne.n	801159a <__libc_init_array+0x2e>
 801158e:	bd70      	pop	{r4, r5, r6, pc}
 8011590:	f855 3b04 	ldr.w	r3, [r5], #4
 8011594:	4798      	blx	r3
 8011596:	3601      	adds	r6, #1
 8011598:	e7ee      	b.n	8011578 <__libc_init_array+0xc>
 801159a:	f855 3b04 	ldr.w	r3, [r5], #4
 801159e:	4798      	blx	r3
 80115a0:	3601      	adds	r6, #1
 80115a2:	e7f2      	b.n	801158a <__libc_init_array+0x1e>
 80115a4:	08011684 	.word	0x08011684
 80115a8:	08011684 	.word	0x08011684
 80115ac:	08011684 	.word	0x08011684
 80115b0:	08011688 	.word	0x08011688

080115b4 <_init>:
 80115b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b6:	bf00      	nop
 80115b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ba:	bc08      	pop	{r3}
 80115bc:	469e      	mov	lr, r3
 80115be:	4770      	bx	lr

080115c0 <_fini>:
 80115c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115c2:	bf00      	nop
 80115c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115c6:	bc08      	pop	{r3}
 80115c8:	469e      	mov	lr, r3
 80115ca:	4770      	bx	lr
