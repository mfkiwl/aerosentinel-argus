
aerosentinel_argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08015c98  08015c98  00016c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080161c8  080161c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080161d0  080161d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080161d4  080161d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e8  24000000  080161d8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001384  240002e8  080164c0  000182e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400166c  080164c0  0001866c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000182e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032b58  00000000  00000000  00018316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006650  00000000  00000000  0004ae6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002910  00000000  00000000  000514c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000202c  00000000  00000000  00053dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041f73  00000000  00000000  00055dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a15b  00000000  00000000  00097d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017aa0b  00000000  00000000  000d1eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0024c8d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000be90  00000000  00000000  0024c918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  002587a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e8 	.word	0x240002e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015c7c 	.word	0x08015c7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002ec 	.word	0x240002ec
 80002dc:	08015c7c 	.word	0x08015c7c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SensorManager_Init>:
    {MS5607_Init, "MS5607"},
    {ADXL375_Init, "ADXL375"}
};


telemetry_init_status SensorManager_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
    printf("Sensors Initialization routine started.\n");
 8000686:	4826      	ldr	r0, [pc, #152]	@ (8000720 <SensorManager_Init+0xa0>)
 8000688:	f013 fbf8 	bl	8013e7c <puts>

    size_t num_sensors = sizeof(sensors) / sizeof(sensors[0]);
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	e024      	b.n	80006e8 <SensorManager_Init+0x68>
        int8_t status = sensors[i].init_function();
 800069e:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SensorManager_Init+0xa4>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006a6:	4798      	blx	r3
 80006a8:	4603      	mov	r3, r0
 80006aa:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 80006ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <SensorManager_Init+0x4c>
            printf("%s initialization failed.\n", sensors[i].sensor_name);
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <SensorManager_Init+0xa4>)
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <SensorManager_Init+0xa8>)
 80006c2:	f013 fb73 	bl	8013dac <iprintf>
            all_success = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e00a      	b.n	80006e2 <SensorManager_Init+0x62>
        } else {
            printf("[%s] device found! Initialization succeeded.\n", sensors[i].sensor_name);
 80006cc:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <SensorManager_Init+0xa4>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	4413      	add	r3, r2
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4814      	ldr	r0, [pc, #80]	@ (800072c <SensorManager_Init+0xac>)
 80006da:	f013 fb67 	bl	8013dac <iprintf>
            any_success = true;
 80006de:	2301      	movs	r3, #1
 80006e0:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3d6      	bcc.n	800069e <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d004      	beq.n	8000700 <SensorManager_Init+0x80>
        printf("All sensors initialized successfully.\n");
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <SensorManager_Init+0xb0>)
 80006f8:	f013 fbc0 	bl	8013e7c <puts>
        return TELEMETRY_INIT_SUCCESS;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e00b      	b.n	8000718 <SensorManager_Init+0x98>
    } else if (any_success) {
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <SensorManager_Init+0x90>
        printf("Partial initialization success.\n");
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <SensorManager_Init+0xb4>)
 8000708:	f013 fbb8 	bl	8013e7c <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 800070c:	2301      	movs	r3, #1
 800070e:	e003      	b.n	8000718 <SensorManager_Init+0x98>
    } else {
        printf("All sensors initialization failed.\n");
 8000710:	4809      	ldr	r0, [pc, #36]	@ (8000738 <SensorManager_Init+0xb8>)
 8000712:	f013 fbb3 	bl	8013e7c <puts>
        return TELEMETRY_INIT_FAILURE;
 8000716:	2302      	movs	r3, #2
    }
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08015cb0 	.word	0x08015cb0
 8000724:	24000000 	.word	0x24000000
 8000728:	08015cd8 	.word	0x08015cd8
 800072c:	08015cf4 	.word	0x08015cf4
 8000730:	08015d24 	.word	0x08015d24
 8000734:	08015d4c 	.word	0x08015d4c
 8000738:	08015d6c 	.word	0x08015d6c

0800073c <ADXL375_Init>:

/*
 * INITIALISATION
 */

int8_t ADXL375_Init(){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
    ToggleCSHigh();
 8000742:	f000 f8a7 	bl	8000894 <ToggleCSHigh>

    /* Use the global variable 'hspi1' directly */
    dev.spiHandle = &hspi1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <ADXL375_Init+0x80>)
 8000748:	4a1d      	ldr	r2, [pc, #116]	@ (80007c0 <ADXL375_Init+0x84>)
 800074a:	601a      	str	r2, [r3, #0]

    HAL_StatusTypeDef status;

    int8_t errorNum = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	71fb      	strb	r3, [r7, #7]

    /* confirm device address as 0xE5 */
    uint8_t confirmID;
    while(1) {
        status = ReadData(ADXL375_DEVID, &confirmID, 1);
 8000750:	1d7b      	adds	r3, r7, #5
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f860 	bl	800081c <ReadData>
 800075c:	4603      	mov	r3, r0
 800075e:	71bb      	strb	r3, [r7, #6]
        if (status == HAL_OK) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f4      	bne.n	8000750 <ADXL375_Init+0x14>
            if (confirmID == 0xE5)
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	2be5      	cmp	r3, #229	@ 0xe5
 800076a:	d000      	beq.n	800076e <ADXL375_Init+0x32>
        status = ReadData(ADXL375_DEVID, &confirmID, 1);
 800076c:	e7f0      	b.n	8000750 <ADXL375_Init+0x14>
                break;
 800076e:	bf00      	nop
        }
    }

    /* set the required data rate */
    status = WriteData(ADXL375_BW_RATE, BW_RATE_DATA_RATE, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	210f      	movs	r1, #15
 8000774:	202c      	movs	r0, #44	@ 0x2c
 8000776:	f000 f825 	bl	80007c4 <WriteData>
 800077a:	4603      	mov	r3, r0
 800077c:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK) {
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <ADXL375_Init+0x54>
        errorNum++;
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	3301      	adds	r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	71fb      	strb	r3, [r7, #7]
    }

    /* if all well till now, enable measurement mode */
    status = WriteData(ADXL375_POWER_CTL, POWER_CTL_MEASURE_MODE, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2108      	movs	r1, #8
 8000794:	202d      	movs	r0, #45	@ 0x2d
 8000796:	f000 f815 	bl	80007c4 <WriteData>
 800079a:	4603      	mov	r3, r0
 800079c:	71bb      	strb	r3, [r7, #6]
    if (status != HAL_OK)
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <ADXL375_Init+0x74>
        errorNum++;
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	3301      	adds	r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	71fb      	strb	r3, [r7, #7]

    return errorNum;
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	24000304 	.word	0x24000304
 80007c0:	240006c4 	.word	0x240006c4

080007c4 <WriteData>:
/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef WriteData(uint8_t address, uint8_t data, uint16_t len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	460b      	mov	r3, r1
 80007d0:	71bb      	strb	r3, [r7, #6]
 80007d2:	4613      	mov	r3, r2
 80007d4:	80bb      	strh	r3, [r7, #4]
    ToggleCSLow();
 80007d6:	f000 f869 	bl	80008ac <ToggleCSLow>

    /* Use the global 'dev' instance */
    HAL_StatusTypeDef status = HAL_SPI_Transmit(dev.spiHandle, &address, 1, HAL_MAX_DELAY);
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <WriteData+0x54>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	1df9      	adds	r1, r7, #7
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	2201      	movs	r2, #1
 80007e6:	f009 fd0d 	bl	800a204 <HAL_SPI_Transmit>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d109      	bne.n	8000808 <WriteData+0x44>
        status = HAL_SPI_Transmit(dev.spiHandle, &data, 1, HAL_MAX_DELAY);
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <WriteData+0x54>)
 80007f6:	6818      	ldr	r0, [r3, #0]
 80007f8:	1db9      	adds	r1, r7, #6
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	2201      	movs	r2, #1
 8000800:	f009 fd00 	bl	800a204 <HAL_SPI_Transmit>
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]

    ToggleCSHigh();
 8000808:	f000 f844 	bl	8000894 <ToggleCSHigh>

    return status;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	24000304 	.word	0x24000304

0800081c <ReadData>:


HAL_StatusTypeDef ReadData(uint8_t address, uint8_t *data, uint16_t len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	80bb      	strh	r3, [r7, #4]
    ToggleCSLow();
 800082c:	f000 f83e 	bl	80008ac <ToggleCSLow>

    uint8_t txBuffer = (address | 0x80);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73bb      	strb	r3, [r7, #14]

    if (len > 1) {
 800083a:	88bb      	ldrh	r3, [r7, #4]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d904      	bls.n	800084a <ReadData+0x2e>
        txBuffer = (txBuffer | 0xC0);
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000846:	b2db      	uxtb	r3, r3
 8000848:	73bb      	strb	r3, [r7, #14]
    }

    /* Use the global 'dev' instance */
    HAL_StatusTypeDef status = HAL_SPI_Transmit(dev.spiHandle, &txBuffer, 1, HAL_MAX_DELAY);
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <ReadData+0x74>)
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	f107 010e 	add.w	r1, r7, #14
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	2201      	movs	r2, #1
 8000858:	f009 fcd4 	bl	800a204 <HAL_SPI_Transmit>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(3);
 8000860:	2003      	movs	r0, #3
 8000862:	f001 fe53 	bl	800250c <HAL_Delay>
    if (status == HAL_OK)
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <ReadData+0x64>
        status = HAL_SPI_Receive(dev.spiHandle, data, len, HAL_MAX_DELAY);
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <ReadData+0x74>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	88ba      	ldrh	r2, [r7, #4]
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	6839      	ldr	r1, [r7, #0]
 8000878:	f009 feb2 	bl	800a5e0 <HAL_SPI_Receive>
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]

    ToggleCSHigh();
 8000880:	f000 f808 	bl	8000894 <ToggleCSHigh>

    return status;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	24000304 	.word	0x24000304

08000894 <ToggleCSHigh>:


void ToggleCSHigh()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <ToggleCSHigh+0x14>)
 800089e:	f002 f9b5 	bl	8002c0c <HAL_GPIO_WritePin>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	58020800 	.word	0x58020800

080008ac <ToggleCSLow>:

void ToggleCSLow()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2110      	movs	r1, #16
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <ToggleCSLow+0x14>)
 80008b6:	f002 f9a9 	bl	8002c0c <HAL_GPIO_WritePin>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	58020800 	.word	0x58020800

080008c4 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80008cc:	23ff      	movs	r3, #255	@ 0xff
 80008ce:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 80008d4:	2300      	movs	r3, #0
 80008d6:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80008d8:	2300      	movs	r3, #0
 80008da:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 80008dc:	4a58      	ldr	r2, [pc, #352]	@ (8000a40 <bno055_init+0x17c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80008e2:	4b57      	ldr	r3, [pc, #348]	@ (8000a40 <bno055_init+0x17c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68dc      	ldr	r4, [r3, #12]
 80008e8:	4b55      	ldr	r3, [pc, #340]	@ (8000a40 <bno055_init+0x17c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	7a58      	ldrb	r0, [r3, #9]
 80008ee:	f107 020d 	add.w	r2, r7, #13
 80008f2:	2301      	movs	r3, #1
 80008f4:	2107      	movs	r1, #7
 80008f6:	47a0      	blx	r4
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80008fc:	4b50      	ldr	r3, [pc, #320]	@ (8000a40 <bno055_init+0x17c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	691c      	ldr	r4, [r3, #16]
 8000902:	4b4f      	ldr	r3, [pc, #316]	@ (8000a40 <bno055_init+0x17c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	7a58      	ldrb	r0, [r3, #9]
 8000908:	f107 020e 	add.w	r2, r7, #14
 800090c:	2301      	movs	r3, #1
 800090e:	2100      	movs	r1, #0
 8000910:	47a0      	blx	r4
 8000912:	4603      	mov	r3, r0
 8000914:	b2da      	uxtb	r2, r3
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4413      	add	r3, r2
 800091a:	b2db      	uxtb	r3, r3
 800091c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 800091e:	4b48      	ldr	r3, [pc, #288]	@ (8000a40 <bno055_init+0x17c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	7bba      	ldrb	r2, [r7, #14]
 8000924:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000926:	4b46      	ldr	r3, [pc, #280]	@ (8000a40 <bno055_init+0x17c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	691c      	ldr	r4, [r3, #16]
 800092c:	4b44      	ldr	r3, [pc, #272]	@ (8000a40 <bno055_init+0x17c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	7a58      	ldrb	r0, [r3, #9]
 8000932:	f107 020e 	add.w	r2, r7, #14
 8000936:	2301      	movs	r3, #1
 8000938:	2101      	movs	r1, #1
 800093a:	47a0      	blx	r4
 800093c:	4603      	mov	r3, r0
 800093e:	b2da      	uxtb	r2, r3
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	4413      	add	r3, r2
 8000944:	b2db      	uxtb	r3, r3
 8000946:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000948:	4b3d      	ldr	r3, [pc, #244]	@ (8000a40 <bno055_init+0x17c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	7bba      	ldrb	r2, [r7, #14]
 800094e:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000950:	4b3b      	ldr	r3, [pc, #236]	@ (8000a40 <bno055_init+0x17c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	691c      	ldr	r4, [r3, #16]
 8000956:	4b3a      	ldr	r3, [pc, #232]	@ (8000a40 <bno055_init+0x17c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	7a58      	ldrb	r0, [r3, #9]
 800095c:	f107 020e 	add.w	r2, r7, #14
 8000960:	2301      	movs	r3, #1
 8000962:	2102      	movs	r1, #2
 8000964:	47a0      	blx	r4
 8000966:	4603      	mov	r3, r0
 8000968:	b2da      	uxtb	r2, r3
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	4413      	add	r3, r2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000972:	4b33      	ldr	r3, [pc, #204]	@ (8000a40 <bno055_init+0x17c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	7bba      	ldrb	r2, [r7, #14]
 8000978:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800097a:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <bno055_init+0x17c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	691c      	ldr	r4, [r3, #16]
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <bno055_init+0x17c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	7a58      	ldrb	r0, [r3, #9]
 8000986:	f107 020e 	add.w	r2, r7, #14
 800098a:	2301      	movs	r3, #1
 800098c:	2103      	movs	r1, #3
 800098e:	47a0      	blx	r4
 8000990:	4603      	mov	r3, r0
 8000992:	b2da      	uxtb	r2, r3
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4413      	add	r3, r2
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 800099c:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <bno055_init+0x17c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	7bba      	ldrb	r2, [r7, #14]
 80009a2:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <bno055_init+0x17c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	691c      	ldr	r4, [r3, #16]
 80009aa:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <bno055_init+0x17c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	7a58      	ldrb	r0, [r3, #9]
 80009b0:	f107 020e 	add.w	r2, r7, #14
 80009b4:	2301      	movs	r3, #1
 80009b6:	2106      	movs	r1, #6
 80009b8:	47a0      	blx	r4
 80009ba:	4603      	mov	r3, r0
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	4413      	add	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <bno055_init+0x17c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	7bba      	ldrb	r2, [r7, #14]
 80009cc:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <bno055_init+0x17c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	691c      	ldr	r4, [r3, #16]
 80009d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <bno055_init+0x17c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	7a58      	ldrb	r0, [r3, #9]
 80009da:	f107 0208 	add.w	r2, r7, #8
 80009de:	2302      	movs	r3, #2
 80009e0:	2104      	movs	r1, #4
 80009e2:	47a0      	blx	r4
 80009e4:	4603      	mov	r3, r0
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	4413      	add	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 80009f0:	7a3b      	ldrb	r3, [r7, #8]
 80009f2:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80009f4:	7a7b      	ldrb	r3, [r7, #9]
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	7a3b      	ldrb	r3, [r7, #8]
 80009fc:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <bno055_init+0x17c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000a02:	430a      	orrs	r2, r1
 8000a04:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000a06:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <bno055_init+0x17c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	691c      	ldr	r4, [r3, #16]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <bno055_init+0x17c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7a58      	ldrb	r0, [r3, #9]
 8000a14:	f107 020e 	add.w	r2, r7, #14
 8000a18:	2301      	movs	r3, #1
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	47a0      	blx	r4
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	4413      	add	r3, r2
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <bno055_init+0x17c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	7bba      	ldrb	r2, [r7, #14]
 8000a30:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2400031c 	.word	0x2400031c

08000a44 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a54:	23ff      	movs	r3, #255	@ 0xff
 8000a56:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <bno055_write_register+0x48>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000a60:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000a64:	e00d      	b.n	8000a82 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <bno055_write_register+0x48>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68dc      	ldr	r4, [r3, #12]
 8000a6c:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <bno055_write_register+0x48>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	7a58      	ldrb	r0, [r3, #9]
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	79f9      	ldrb	r1, [r7, #7]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	47a0      	blx	r4
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2400031c 	.word	0x2400031c

08000a90 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a9a:	23ff      	movs	r3, #255	@ 0xff
 8000a9c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d102      	bne.n	8000ab0 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000aaa:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000aae:	e030      	b.n	8000b12 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	691c      	ldr	r4, [r3, #16]
 8000ab6:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	7a58      	ldrb	r0, [r3, #9]
 8000abc:	f107 020e 	add.w	r2, r7, #14
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	2107      	movs	r1, #7
 8000ac4:	47a0      	blx	r4
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d11b      	bne.n	8000b0a <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68dc      	ldr	r4, [r3, #12]
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	7a58      	ldrb	r0, [r3, #9]
 8000ae2:	f107 020e 	add.w	r2, r7, #14
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2107      	movs	r1, #7
 8000aea:	47a0      	blx	r4
 8000aec:	4603      	mov	r3, r0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	4413      	add	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d106      	bne.n	8000b0e <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <bno055_write_page_id+0x8c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	711a      	strb	r2, [r3, #4]
 8000b08:	e001      	b.n	8000b0e <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b0a:	23ff      	movs	r3, #255	@ 0xff
 8000b0c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2400031c 	.word	0x2400031c

08000b20 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b28:	23ff      	movs	r3, #255	@ 0xff
 8000b2a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000b30:	23ff      	movs	r3, #255	@ 0xff
 8000b32:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000b3c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000b40:	e02a      	b.n	8000b98 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000b42:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff ff9f 	bl	8000a90 <bno055_write_page_id>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d004      	beq.n	8000b68 <bno055_get_operation_mode+0x48>
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d113      	bne.n	8000b90 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	691c      	ldr	r4, [r3, #16]
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <bno055_get_operation_mode+0x80>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	7a58      	ldrb	r0, [r3, #9]
 8000b74:	f107 020d 	add.w	r2, r7, #13
 8000b78:	2301      	movs	r3, #1
 8000b7a:	213d      	movs	r1, #61	@ 0x3d
 8000b7c:	47a0      	blx	r4
 8000b7e:	4603      	mov	r3, r0
 8000b80:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000b82:	7b7b      	ldrb	r3, [r7, #13]
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e001      	b.n	8000b94 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b90:	23ff      	movs	r3, #255	@ 0xff
 8000b92:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	2400031c 	.word	0x2400031c

08000ba4 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000bae:	23ff      	movs	r3, #255	@ 0xff
 8000bb0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000bba:	23ff      	movs	r3, #255	@ 0xff
 8000bbc:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000bc6:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000bca:	e0ac      	b.n	8000d26 <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffa5 	bl	8000b20 <bno055_get_operation_mode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 809d 	bne.w	8000d1e <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d137      	bne.n	8000c5a <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bea:	4b51      	ldr	r3, [pc, #324]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	691c      	ldr	r4, [r3, #16]
 8000bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	7a58      	ldrb	r0, [r3, #9]
 8000bf6:	f107 020d 	add.w	r2, r7, #13
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	213d      	movs	r1, #61	@ 0x3d
 8000bfe:	47a0      	blx	r4
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f040 808a 	bne.w	8000d22 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000c0e:	7b7b      	ldrb	r3, [r7, #13]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	f023 030f 	bic.w	r3, r3, #15
 8000c16:	b25a      	sxtb	r2, r3
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000c2a:	4b41      	ldr	r3, [pc, #260]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68dc      	ldr	r4, [r3, #12]
 8000c30:	4b3f      	ldr	r3, [pc, #252]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	7a58      	ldrb	r0, [r3, #9]
 8000c36:	f107 020d 	add.w	r2, r7, #13
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	213d      	movs	r1, #61	@ 0x3d
 8000c3e:	47a0      	blx	r4
 8000c40:	4603      	mov	r3, r0
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	4413      	add	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000c4c:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000c56:	4798      	blx	r3
 8000c58:	e063      	b.n	8000d22 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	691c      	ldr	r4, [r3, #16]
 8000c60:	4b33      	ldr	r3, [pc, #204]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	7a58      	ldrb	r0, [r3, #9]
 8000c66:	f107 020d 	add.w	r2, r7, #13
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	213d      	movs	r1, #61	@ 0x3d
 8000c6e:	47a0      	blx	r4
 8000c70:	4603      	mov	r3, r0
 8000c72:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d116      	bne.n	8000caa <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000c7c:	7b7b      	ldrb	r3, [r7, #13]
 8000c7e:	f023 030f 	bic.w	r3, r3, #15
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000c86:	f107 030d 	add.w	r3, r7, #13
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	203d      	movs	r0, #61	@ 0x3d
 8000c90:	f7ff fed8 	bl	8000a44 <bno055_write_register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000ca0:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	2014      	movs	r0, #20
 8000ca8:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d038      	beq.n	8000d22 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	691c      	ldr	r4, [r3, #16]
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	7a58      	ldrb	r0, [r3, #9]
 8000cbc:	f107 020d 	add.w	r2, r7, #13
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	213d      	movs	r1, #61	@ 0x3d
 8000cc4:	47a0      	blx	r4
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d127      	bne.n	8000d22 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000cd2:	7b7b      	ldrb	r3, [r7, #13]
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	f023 030f 	bic.w	r3, r3, #15
 8000cda:	b25a      	sxtb	r2, r3
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68dc      	ldr	r4, [r3, #12]
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	7a58      	ldrb	r0, [r3, #9]
 8000cfa:	f107 020d 	add.w	r2, r7, #13
 8000cfe:	2301      	movs	r3, #1
 8000d00:	213d      	movs	r1, #61	@ 0x3d
 8000d02:	47a0      	blx	r4
 8000d04:	4603      	mov	r3, r0
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <bno055_set_operation_mode+0x18c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000d1a:	4798      	blx	r3
 8000d1c:	e001      	b.n	8000d22 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000d1e:	23ff      	movs	r3, #255	@ 0xff
 8000d20:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd90      	pop	{r4, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2400031c 	.word	0x2400031c

08000d34 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d3e:	23ff      	movs	r3, #255	@ 0xff
 8000d40:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000d46:	2300      	movs	r3, #0
 8000d48:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000d4a:	23ff      	movs	r3, #255	@ 0xff
 8000d4c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d4e:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000d56:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000d5a:	e05f      	b.n	8000e1c <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fedd 	bl	8000b20 <bno055_get_operation_mode>
 8000d66:	4603      	mov	r3, r0
 8000d68:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d143      	bne.n	8000dfa <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ff13 	bl	8000ba4 <bno055_set_operation_mode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	4413      	add	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d130      	bne.n	8000df4 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d92:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	691c      	ldr	r4, [r3, #16]
 8000d98:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	7a58      	ldrb	r0, [r3, #9]
 8000d9e:	f107 020d 	add.w	r2, r7, #13
 8000da2:	2301      	movs	r3, #1
 8000da4:	213e      	movs	r1, #62	@ 0x3e
 8000da6:	47a0      	blx	r4
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d124      	bne.n	8000dfe <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	f023 0303 	bic.w	r3, r3, #3
 8000dbc:	b25a      	sxtb	r2, r3
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68dc      	ldr	r4, [r3, #12]
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <bno055_set_power_mode+0xf0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	7a58      	ldrb	r0, [r3, #9]
 8000ddc:	f107 020d 	add.w	r2, r7, #13
 8000de0:	2301      	movs	r3, #1
 8000de2:	213e      	movs	r1, #62	@ 0x3e
 8000de4:	47a0      	blx	r4
 8000de6:	4603      	mov	r3, r0
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	4413      	add	r3, r2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e004      	b.n	8000dfe <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000df4:	23ff      	movs	r3, #255	@ 0xff
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e001      	b.n	8000dfe <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000dfa:	23ff      	movs	r3, #255	@ 0xff
 8000dfc:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000dfe:	7b3b      	ldrb	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d009      	beq.n	8000e18 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000e04:	7b3b      	ldrb	r3, [r7, #12]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fecc 	bl	8000ba4 <bno055_set_operation_mode>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	4413      	add	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	2400031c 	.word	0x2400031c

08000e28 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	603a      	str	r2, [r7, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	460b      	mov	r3, r1
 8000e38:	71bb      	strb	r3, [r7, #6]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8000e46:	1dba      	adds	r2, r7, #6
 8000e48:	89f9      	ldrh	r1, [r7, #14]
 8000e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <bno055_platform_read+0x50>)
 8000e54:	f001 ff90 	bl	8002d78 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	89f9      	ldrh	r1, [r7, #14]
 8000e5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <bno055_platform_read+0x50>)
 8000e68:	f002 f89e 	bl	8002fa8 <HAL_I2C_Master_Receive>
    return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	240005f4 	.word	0x240005f4

08000e7c <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	603a      	str	r2, [r7, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	71bb      	strb	r3, [r7, #6]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <bno055_platform_write+0x54>)
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 8000ea0:	797b      	ldrb	r3, [r7, #5]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <bno055_platform_write+0x58>)
 8000ea8:	f013 f947 	bl	801413a <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8000eac:	797b      	ldrb	r3, [r7, #5]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	89f9      	ldrh	r1, [r7, #14]
 8000eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <bno055_platform_write+0x54>)
 8000ebe:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <bno055_platform_write+0x5c>)
 8000ec0:	f001 ff5a 	bl	8002d78 <HAL_I2C_Master_Transmit>
    return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000338 	.word	0x24000338
 8000ed4:	24000339 	.word	0x24000339
 8000ed8:	240005f4 	.word	0x240005f4

08000edc <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
//		{
//			;
//		}
//	}

	HAL_Delay(Delay);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 fb11 	bl	800250c <HAL_Delay>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 0 -> no Error)
  *
  */
int8_t BNO055_Init(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <BNO055_Init+0x94>)
 8000efc:	4a23      	ldr	r2, [pc, #140]	@ (8000f8c <BNO055_Init+0x98>)
 8000efe:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8000f00:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <BNO055_Init+0x94>)
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <BNO055_Init+0x9c>)
 8000f04:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <BNO055_Init+0x94>)
 8000f08:	4a22      	ldr	r2, [pc, #136]	@ (8000f94 <BNO055_Init+0xa0>)
 8000f0a:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <BNO055_Init+0x94>)
 8000f0e:	2228      	movs	r2, #40	@ 0x28
 8000f10:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	2301      	movs	r3, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	2028      	movs	r0, #40	@ 0x28
 8000f1a:	f7ff ff85 	bl	8000e28 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 8000f1e:	481a      	ldr	r0, [pc, #104]	@ (8000f88 <BNO055_Init+0x94>)
 8000f20:	f7ff fcd0 	bl	80008c4 <bno055_init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <BNO055_Init+0xa4>)
 8000f2a:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <BNO055_Init+0xa8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 8000f32:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <BNO055_Init+0xa8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fefc 	bl	8000d34 <bno055_set_power_mode>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <BNO055_Init+0xa4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a14      	ldr	r2, [pc, #80]	@ (8000f98 <BNO055_Init+0xa4>)
 8000f48:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
	    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8000f4a:	200c      	movs	r0, #12
 8000f4c:	f7ff fe2a 	bl	8000ba4 <bno055_set_operation_mode>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <BNO055_Init+0xa4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f98 <BNO055_Init+0xa4>)
 8000f5c:	6013      	str	r3, [r2, #0]
	    comres += bno055_get_operation_mode(&op_mode_current);
 8000f5e:	4810      	ldr	r0, [pc, #64]	@ (8000fa0 <BNO055_Init+0xac>)
 8000f60:	f7ff fdde 	bl	8000b20 <bno055_get_operation_mode>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <BNO055_Init+0xa4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <BNO055_Init+0xa4>)
 8000f70:	6013      	str	r3, [r2, #0]
//		}
//		else
//		{
//			printf("bno055_init failed, comres=%d\r\n", comres);
//		}
	    DelayUs(1000); // 1 second
 8000f72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f76:	f7ff ffb1 	bl	8000edc <DelayUs>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <BNO055_Init+0xa4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	24000320 	.word	0x24000320
 8000f8c:	08000e7d 	.word	0x08000e7d
 8000f90:	08000e29 	.word	0x08000e29
 8000f94:	08000edd 	.word	0x08000edd
 8000f98:	24000018 	.word	0x24000018
 8000f9c:	24000539 	.word	0x24000539
 8000fa0:	24000538 	.word	0x24000538

08000fa4 <ms5607_delay_func>:
#define STANDARD_TEMP 288.15         // Standard temperature at sea level in K
#define PASCAL_TO_HECTOPASCAL 100 	 //Divide the pressure by this number to get hPa
#define PASCAL_TO_KILOPASCAL 1000	 //Divide the pressure by this number to get kPa

void ms5607_delay_func(uint32_t period)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(period--)
 8000fac:	e008      	b.n	8000fc0 <ms5607_delay_func+0x1c>
	{
		for(i = 0; i < 64; i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e002      	b.n	8000fba <ms5607_delay_func+0x16>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fbe:	d9f9      	bls.n	8000fb4 <ms5607_delay_func+0x10>
	while(period--)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f1      	bne.n	8000fae <ms5607_delay_func+0xa>
		{
			;
		}
	}
//	HAL_Delay(period/1000);
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  enableCSB();
 8000fdc:	f000 f87c 	bl	80010d8 <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <MS5607_Init+0x54>)
 8000fe2:	221e      	movs	r2, #30
 8000fe4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4910      	ldr	r1, [pc, #64]	@ (800102c <MS5607_Init+0x54>)
 8000fec:	4810      	ldr	r0, [pc, #64]	@ (8001030 <MS5607_Init+0x58>)
 8000fee:	f009 f909 	bl	800a204 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000ff2:	bf00      	nop
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MS5607_Init+0x58>)
 8000ff6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d0f9      	beq.n	8000ff4 <MS5607_Init+0x1c>
//  HAL_Delay(3);
  ms5607_delay_func(3000);
 8001000:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001004:	f7ff ffce 	bl	8000fa4 <ms5607_delay_func>
  disableCSB();
 8001008:	f000 f872 	bl	80010f0 <disableCSB>

  MS5607PromRead(&promData);
 800100c:	4809      	ldr	r0, [pc, #36]	@ (8001034 <MS5607_Init+0x5c>)
 800100e:	f000 f813 	bl	8001038 <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MS5607_Init+0x5c>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <MS5607_Init+0x4a>
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MS5607_Init+0x5c>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	2bff      	cmp	r3, #255	@ 0xff
 8001020:	d101      	bne.n	8001026 <MS5607_Init+0x4e>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <MS5607_Init+0x50>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8001026:	2300      	movs	r3, #0
  }
}
 8001028:	4618      	mov	r0, r3
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2400053a 	.word	0x2400053a
 8001030:	2400074c 	.word	0x2400074c
 8001034:	2400053c 	.word	0x2400053c

08001038 <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]
 8001048:	e01e      	b.n	8001088 <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	b25b      	sxtb	r3, r3
 8001050:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8001054:	b25b      	sxtb	r3, r3
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <MS5607PromRead+0x98>)
 800105a:	701a      	strb	r2, [r3, #0]
    enableCSB();
 800105c:	f000 f83c 	bl	80010d8 <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8001060:	230a      	movs	r3, #10
 8001062:	2201      	movs	r2, #1
 8001064:	491a      	ldr	r1, [pc, #104]	@ (80010d0 <MS5607PromRead+0x98>)
 8001066:	481b      	ldr	r0, [pc, #108]	@ (80010d4 <MS5607PromRead+0x9c>)
 8001068:	f009 f8cc 	bl	800a204 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 800106c:	230a      	movs	r3, #10
 800106e:	2202      	movs	r2, #2
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	4818      	ldr	r0, [pc, #96]	@ (80010d4 <MS5607PromRead+0x9c>)
 8001074:	f009 fab4 	bl	800a5e0 <HAL_SPI_Receive>
    disableCSB();
 8001078:	f000 f83a 	bl	80010f0 <disableCSB>
    structPointer++;
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	3302      	adds	r3, #2
 8001080:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	3301      	adds	r3, #1
 8001086:	75fb      	strb	r3, [r7, #23]
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	2b07      	cmp	r3, #7
 800108c:	d9dd      	bls.n	800104a <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8001092:	2300      	movs	r3, #0
 8001094:	75fb      	strb	r3, [r7, #23]
 8001096:	e012      	b.n	80010be <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	785a      	ldrb	r2, [r3, #1]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	7afa      	ldrb	r2, [r7, #11]
 80010b0:	701a      	strb	r2, [r3, #0]
    structPointer++;
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3302      	adds	r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	3301      	adds	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d9e9      	bls.n	8001098 <MS5607PromRead+0x60>
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400053a 	.word	0x2400053a
 80010d4:	2400074c 	.word	0x2400074c

080010d8 <enableCSB>:
int32_t MS5607GetPressurePa(void){
  return readings.pressure;
}

/* Sets the CS pin */
void enableCSB(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2108      	movs	r1, #8
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <enableCSB+0x14>)
 80010e2:	f001 fd93 	bl	8002c0c <HAL_GPIO_WritePin>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	58021000 	.word	0x58021000

080010f0 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2108      	movs	r1, #8
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <disableCSB+0x14>)
 80010fa:	f001 fd87 	bl	8002c0c <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	58021000 	.word	0x58021000

08001108 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001110:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001114:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001120:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001124:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001128:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001130:	e000      	b.n	8001134 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001132:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001134:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f9      	beq.n	8001132 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800113e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
	int i=0;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e009      	b.n	8001180 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60ba      	str	r2, [r7, #8]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ffc7 	bl	8001108 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbf1      	blt.n	800116c <_write+0x16>
	}
	return len;
 8001188:	687b      	ldr	r3, [r7, #4]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001196:	f000 fbfd 	bl	8001994 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f001 f925 	bl	80023e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119e:	f000 f81d 	bl	80011dc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011a2:	f000 f89f 	bl	80012e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f000 faf5 	bl	8001794 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011aa:	f000 f8b9 	bl	8001320 <MX_I2C1_Init>
  MX_I2C2_Init();
 80011ae:	f000 f8f7 	bl	80013a0 <MX_I2C2_Init>
  MX_I2C4_Init();
 80011b2:	f000 f935 	bl	8001420 <MX_I2C4_Init>
  MX_SDMMC1_SD_Init();
 80011b6:	f000 f973 	bl	80014a0 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80011ba:	f000 f993 	bl	80014e4 <MX_SPI1_Init>
  MX_SPI4_Init();
 80011be:	f000 f9e9 	bl	8001594 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80011c2:	f000 fa3d 	bl	8001640 <MX_USART2_UART_Init>
  MX_USART3_Init();
 80011c6:	f000 fa87 	bl	80016d8 <MX_USART3_Init>
  MX_FATFS_Init();
 80011ca:	f00d fed3 	bl	800ef74 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80011ce:	f011 fbbb 	bl	8012948 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  SensorManager_Init();
 80011d2:	f7ff fa55 	bl	8000680 <SensorManager_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d6:	bf00      	nop
 80011d8:	e7fd      	b.n	80011d6 <main+0x44>
	...

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b09c      	sub	sp, #112	@ 0x70
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e6:	224c      	movs	r2, #76	@ 0x4c
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f012 ff26 	bl	801403c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2220      	movs	r2, #32
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f012 ff20 	bl	801403c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011fc:	2002      	movs	r0, #2
 80011fe:	f003 fdd1 	bl	8004da4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b35      	ldr	r3, [pc, #212]	@ (80012dc <SystemClock_Config+0x100>)
 8001208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120a:	4a34      	ldr	r2, [pc, #208]	@ (80012dc <SystemClock_Config+0x100>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001212:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <SystemClock_Config+0x100>)
 8001214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	4b30      	ldr	r3, [pc, #192]	@ (80012e0 <SystemClock_Config+0x104>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001224:	4a2e      	ldr	r2, [pc, #184]	@ (80012e0 <SystemClock_Config+0x104>)
 8001226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b2c      	ldr	r3, [pc, #176]	@ (80012e0 <SystemClock_Config+0x104>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001238:	bf00      	nop
 800123a:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <SystemClock_Config+0x104>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001246:	d1f8      	bne.n	800123a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001248:	2323      	movs	r3, #35	@ 0x23
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001252:	2301      	movs	r3, #1
 8001254:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001256:	2340      	movs	r3, #64	@ 0x40
 8001258:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800125a:	2301      	movs	r3, #1
 800125c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	2302      	movs	r3, #2
 8001264:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001266:	2302      	movs	r3, #2
 8001268:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800126a:	230c      	movs	r3, #12
 800126c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800126e:	2302      	movs	r3, #2
 8001270:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001272:	2303      	movs	r3, #3
 8001274:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001276:	2302      	movs	r3, #2
 8001278:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800127a:	230c      	movs	r3, #12
 800127c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800127e:	2302      	movs	r3, #2
 8001280:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128a:	4618      	mov	r0, r3
 800128c:	f003 fdd4 	bl	8004e38 <HAL_RCC_OscConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001296:	f000 fba9 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129a:	233f      	movs	r3, #63	@ 0x3f
 800129c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129e:	2303      	movs	r3, #3
 80012a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012ae:	2340      	movs	r3, #64	@ 0x40
 80012b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012b8:	2340      	movs	r3, #64	@ 0x40
 80012ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2101      	movs	r1, #1
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fa13 	bl	80056ec <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80012cc:	f000 fb8e 	bl	80019ec <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80012d0:	f004 fbc2 	bl	8005a58 <HAL_RCC_EnableCSS>
}
 80012d4:	bf00      	nop
 80012d6:	3770      	adds	r7, #112	@ 0x70
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	58000400 	.word	0x58000400
 80012e0:	58024800 	.word	0x58024800

080012e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b0      	sub	sp, #192	@ 0xc0
 80012e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	22c0      	movs	r2, #192	@ 0xc0
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f012 fea3 	bl	801403c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80012f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001302:	2300      	movs	r3, #0
 8001304:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4618      	mov	r0, r3
 800130a:	f004 fda7 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001314:	f000 fb6a 	bl	80019ec <Error_Handler>
  }
}
 8001318:	bf00      	nop
 800131a:	37c0      	adds	r7, #192	@ 0xc0
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <MX_I2C1_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <MX_I2C1_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_I2C1_Init+0x74>)
 800132c:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <MX_I2C1_Init+0x7c>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_I2C1_Init+0x74>)
 8001338:	2201      	movs	r2, #1
 800133a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_I2C1_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_I2C1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800135a:	480e      	ldr	r0, [pc, #56]	@ (8001394 <MX_I2C1_Init+0x74>)
 800135c:	f001 fc70 	bl	8002c40 <HAL_I2C_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001366:	f000 fb41 	bl	80019ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4809      	ldr	r0, [pc, #36]	@ (8001394 <MX_I2C1_Init+0x74>)
 800136e:	f002 f9b7 	bl	80036e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001378:	f000 fb38 	bl	80019ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_I2C1_Init+0x74>)
 8001380:	f002 f9f9 	bl	8003776 <HAL_I2CEx_ConfigDigitalFilter>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800138a:	f000 fb2f 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2400054c 	.word	0x2400054c
 8001398:	40005400 	.word	0x40005400
 800139c:	00909fce 	.word	0x00909fce

080013a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <MX_I2C2_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013ac:	4a1b      	ldr	r2, [pc, #108]	@ (800141c <MX_I2C2_Init+0x7c>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013c2:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013da:	480e      	ldr	r0, [pc, #56]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013dc:	f001 fc30 	bl	8002c40 <HAL_I2C_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013e6:	f000 fb01 	bl	80019ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4809      	ldr	r0, [pc, #36]	@ (8001414 <MX_I2C2_Init+0x74>)
 80013ee:	f002 f977 	bl	80036e0 <HAL_I2CEx_ConfigAnalogFilter>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013f8:	f000 faf8 	bl	80019ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_I2C2_Init+0x74>)
 8001400:	f002 f9b9 	bl	8003776 <HAL_I2CEx_ConfigDigitalFilter>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 faef 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	240005a0 	.word	0x240005a0
 8001418:	40005800 	.word	0x40005800
 800141c:	00909fce 	.word	0x00909fce

08001420 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <MX_I2C4_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <MX_I2C4_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_I2C4_Init+0x74>)
 800142c:	4a1b      	ldr	r2, [pc, #108]	@ (800149c <MX_I2C4_Init+0x7c>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_I2C4_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <MX_I2C4_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <MX_I2C4_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_I2C4_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_I2C4_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_I2C4_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_I2C4_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800145a:	480e      	ldr	r0, [pc, #56]	@ (8001494 <MX_I2C4_Init+0x74>)
 800145c:	f001 fbf0 	bl	8002c40 <HAL_I2C_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001466:	f000 fac1 	bl	80019ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146a:	2100      	movs	r1, #0
 800146c:	4809      	ldr	r0, [pc, #36]	@ (8001494 <MX_I2C4_Init+0x74>)
 800146e:	f002 f937 	bl	80036e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001478:	f000 fab8 	bl	80019ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_I2C4_Init+0x74>)
 8001480:	f002 f979 	bl	8003776 <HAL_I2CEx_ConfigDigitalFilter>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 faaf 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	240005f4 	.word	0x240005f4
 8001498:	58001c00 	.word	0x58001c00
 800149c:	00909fce 	.word	0x00909fce

080014a0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80014a4:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <MX_SDMMC1_SD_Init+0x3c>)
 80014a6:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <MX_SDMMC1_SD_Init+0x40>)
 80014a8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_SDMMC1_SD_Init+0x3c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <MX_SDMMC1_SD_Init+0x3c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_SDMMC1_SD_Init+0x3c>)
 80014b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014bc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <MX_SDMMC1_SD_Init+0x3c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <MX_SDMMC1_SD_Init+0x3c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  HAL_SD_Init(&hsd1);
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <MX_SDMMC1_SD_Init+0x3c>)
 80014cc:	f007 f9c4 	bl	8008858 <HAL_SD_Init>
  HAL_SD_InitCard(&hsd1);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <MX_SDMMC1_SD_Init+0x3c>)
 80014d2:	f007 fa45 	bl	8008960 <HAL_SD_InitCard>
  //printf("%d \n",ret);
  /* USER CODE END SDMMC1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	24000648 	.word	0x24000648
 80014e0:	52007000 	.word	0x52007000

080014e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e8:	4b28      	ldr	r3, [pc, #160]	@ (800158c <MX_SPI1_Init+0xa8>)
 80014ea:	4a29      	ldr	r2, [pc, #164]	@ (8001590 <MX_SPI1_Init+0xac>)
 80014ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ee:	4b27      	ldr	r3, [pc, #156]	@ (800158c <MX_SPI1_Init+0xa8>)
 80014f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014f6:	4b25      	ldr	r3, [pc, #148]	@ (800158c <MX_SPI1_Init+0xa8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014fc:	4b23      	ldr	r3, [pc, #140]	@ (800158c <MX_SPI1_Init+0xa8>)
 80014fe:	2207      	movs	r2, #7
 8001500:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001502:	4b22      	ldr	r3, [pc, #136]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001504:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001508:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <MX_SPI1_Init+0xa8>)
 800150c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001510:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001512:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001514:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001518:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800151a:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <MX_SPI1_Init+0xa8>)
 800151c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001520:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_SPI1_Init+0xa8>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001536:	2200      	movs	r2, #0
 8001538:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_SPI1_Init+0xa8>)
 800153c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001540:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001544:	2200      	movs	r2, #0
 8001546:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <MX_SPI1_Init+0xa8>)
 800154a:	2200      	movs	r2, #0
 800154c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001550:	2200      	movs	r2, #0
 8001552:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001554:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800155a:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_SPI1_Init+0xa8>)
 800155c:	2200      	movs	r2, #0
 800155e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001560:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001562:	2200      	movs	r2, #0
 8001564:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001568:	2200      	movs	r2, #0
 800156a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <MX_SPI1_Init+0xa8>)
 800156e:	2200      	movs	r2, #0
 8001570:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_SPI1_Init+0xa8>)
 8001574:	2200      	movs	r2, #0
 8001576:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	@ (800158c <MX_SPI1_Init+0xa8>)
 800157a:	f008 fd1f 	bl	8009fbc <HAL_SPI_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001584:	f000 fa32 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	240006c4 	.word	0x240006c4
 8001590:	40013000 	.word	0x40013000

08001594 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001598:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <MX_SPI4_Init+0xa4>)
 800159a:	4a28      	ldr	r2, [pc, #160]	@ (800163c <MX_SPI4_Init+0xa8>)
 800159c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800159e:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015a4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015a6:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80015ac:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015ae:	2203      	movs	r2, #3
 80015b0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015c4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80015de:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <MX_SPI4_Init+0xa4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_SPI4_Init+0xa4>)
 8001600:	2200      	movs	r2, #0
 8001602:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_SPI4_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <MX_SPI4_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_SPI4_Init+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <MX_SPI4_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_SPI4_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_SPI4_Init+0xa4>)
 8001624:	f008 fcca 	bl	8009fbc <HAL_SPI_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800162e:	f000 f9dd 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2400074c 	.word	0x2400074c
 800163c:	40013400 	.word	0x40013400

08001640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001644:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001646:	4a23      	ldr	r2, [pc, #140]	@ (80016d4 <MX_USART2_UART_Init+0x94>)
 8001648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800164a:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001676:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001688:	4811      	ldr	r0, [pc, #68]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800168a:	f009 fb04 	bl	800ac96 <HAL_UART_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001694:	f000 f9aa 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 800169c:	f00a fb0d 	bl	800bcba <HAL_UARTEx_SetTxFifoThreshold>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016a6:	f000 f9a1 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4808      	ldr	r0, [pc, #32]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 80016ae:	f00a fb42 	bl	800bd36 <HAL_UARTEx_SetRxFifoThreshold>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016b8:	f000 f998 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <MX_USART2_UART_Init+0x90>)
 80016be:	f00a fac3 	bl	800bc48 <HAL_UARTEx_DisableFifoMode>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016c8:	f000 f990 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	240007d4 	.word	0x240007d4
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 80016dc:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <MX_USART3_Init+0xb4>)
 80016de:	4a2c      	ldr	r2, [pc, #176]	@ (8001790 <MX_USART3_Init+0xb8>)
 80016e0:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <MX_USART3_Init+0xb4>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80016ea:	4b28      	ldr	r3, [pc, #160]	@ (800178c <MX_USART3_Init+0xb4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <MX_USART3_Init+0xb4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80016f6:	4b25      	ldr	r3, [pc, #148]	@ (800178c <MX_USART3_Init+0xb4>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <MX_USART3_Init+0xb4>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001702:	4b22      	ldr	r3, [pc, #136]	@ (800178c <MX_USART3_Init+0xb4>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <MX_USART3_Init+0xb4>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800170e:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <MX_USART3_Init+0xb4>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <MX_USART3_Init+0xb4>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <MX_USART3_Init+0xb4>)
 800171c:	2201      	movs	r2, #1
 800171e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001720:	481a      	ldr	r0, [pc, #104]	@ (800178c <MX_USART3_Init+0xb4>)
 8001722:	f00a fb95 	bl	800be50 <HAL_USART_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 800172c:	f000 f95e 	bl	80019ec <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001730:	2100      	movs	r1, #0
 8001732:	4816      	ldr	r0, [pc, #88]	@ (800178c <MX_USART3_Init+0xb4>)
 8001734:	f00b fa3a 	bl	800cbac <HAL_USARTEx_SetTxFifoThreshold>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 800173e:	f000 f955 	bl	80019ec <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001742:	2100      	movs	r1, #0
 8001744:	4811      	ldr	r0, [pc, #68]	@ (800178c <MX_USART3_Init+0xb4>)
 8001746:	f00b fa6f 	bl	800cc28 <HAL_USARTEx_SetRxFifoThreshold>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8001750:	f000 f94c 	bl	80019ec <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8001754:	2100      	movs	r1, #0
 8001756:	480d      	ldr	r0, [pc, #52]	@ (800178c <MX_USART3_Init+0xb4>)
 8001758:	f00b f9b2 	bl	800cac0 <HAL_USARTEx_ConfigNSS>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8001762:	f000 f943 	bl	80019ec <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001766:	4809      	ldr	r0, [pc, #36]	@ (800178c <MX_USART3_Init+0xb4>)
 8001768:	f00b f9e7 	bl	800cb3a <HAL_USARTEx_DisableFifoMode>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8001772:	f000 f93b 	bl	80019ec <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	@ (800178c <MX_USART3_Init+0xb4>)
 8001778:	f00b f94d 	bl	800ca16 <HAL_USARTEx_EnableSlaveMode>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8001782:	f000 f933 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	24000868 	.word	0x24000868
 8001790:	40004800 	.word	0x40004800

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	@ 0x30
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017aa:	4b74      	ldr	r3, [pc, #464]	@ (800197c <MX_GPIO_Init+0x1e8>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	4a72      	ldr	r2, [pc, #456]	@ (800197c <MX_GPIO_Init+0x1e8>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ba:	4b70      	ldr	r3, [pc, #448]	@ (800197c <MX_GPIO_Init+0x1e8>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c8:	4b6c      	ldr	r3, [pc, #432]	@ (800197c <MX_GPIO_Init+0x1e8>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ce:	4a6b      	ldr	r2, [pc, #428]	@ (800197c <MX_GPIO_Init+0x1e8>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d8:	4b68      	ldr	r3, [pc, #416]	@ (800197c <MX_GPIO_Init+0x1e8>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	4b65      	ldr	r3, [pc, #404]	@ (800197c <MX_GPIO_Init+0x1e8>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ec:	4a63      	ldr	r2, [pc, #396]	@ (800197c <MX_GPIO_Init+0x1e8>)
 80017ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f6:	4b61      	ldr	r3, [pc, #388]	@ (800197c <MX_GPIO_Init+0x1e8>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b5d      	ldr	r3, [pc, #372]	@ (800197c <MX_GPIO_Init+0x1e8>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180a:	4a5c      	ldr	r2, [pc, #368]	@ (800197c <MX_GPIO_Init+0x1e8>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001814:	4b59      	ldr	r3, [pc, #356]	@ (800197c <MX_GPIO_Init+0x1e8>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4b56      	ldr	r3, [pc, #344]	@ (800197c <MX_GPIO_Init+0x1e8>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001828:	4a54      	ldr	r2, [pc, #336]	@ (800197c <MX_GPIO_Init+0x1e8>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001832:	4b52      	ldr	r3, [pc, #328]	@ (800197c <MX_GPIO_Init+0x1e8>)
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001840:	4b4e      	ldr	r3, [pc, #312]	@ (800197c <MX_GPIO_Init+0x1e8>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001846:	4a4d      	ldr	r2, [pc, #308]	@ (800197c <MX_GPIO_Init+0x1e8>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001850:	4b4a      	ldr	r3, [pc, #296]	@ (800197c <MX_GPIO_Init+0x1e8>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2108      	movs	r1, #8
 8001862:	4847      	ldr	r0, [pc, #284]	@ (8001980 <MX_GPIO_Init+0x1ec>)
 8001864:	f001 f9d2 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5607_ON_GPIO_Port, MS5607_ON_Pin, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800186e:	4845      	ldr	r0, [pc, #276]	@ (8001984 <MX_GPIO_Init+0x1f0>)
 8001870:	f001 f9cc 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADXL375_ON_Pin|BNO055_ON_Pin, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f248 0108 	movw	r1, #32776	@ 0x8008
 800187a:	4843      	ldr	r0, [pc, #268]	@ (8001988 <MX_GPIO_Init+0x1f4>)
 800187c:	f001 f9c6 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2110      	movs	r1, #16
 8001884:	483f      	ldr	r0, [pc, #252]	@ (8001984 <MX_GPIO_Init+0x1f0>)
 8001886:	f001 f9c1 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MPL311_ON_Pin|BNO086_ON_Pin, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001890:	483b      	ldr	r0, [pc, #236]	@ (8001980 <MX_GPIO_Init+0x1ec>)
 8001892:	f001 f9bb 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEARTBEAT_Pin|BNO086_RST_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	f248 0120 	movw	r1, #32800	@ 0x8020
 800189c:	483b      	ldr	r0, [pc, #236]	@ (800198c <MX_GPIO_Init+0x1f8>)
 800189e:	f001 f9b5 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO055_RST_Pin|GPS_RST_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2118      	movs	r1, #24
 80018a6:	483a      	ldr	r0, [pc, #232]	@ (8001990 <MX_GPIO_Init+0x1fc>)
 80018a8:	f001 f9b0 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI4_CS_Pin MPL311_ON_Pin BNO086_ON_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|MPL311_ON_Pin|BNO086_ON_Pin;
 80018ac:	f244 030a 	movw	r3, #16394	@ 0x400a
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	482e      	ldr	r0, [pc, #184]	@ (8001980 <MX_GPIO_Init+0x1ec>)
 80018c6:	f000 ffd9 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : MS5607_ON_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = MS5607_ON_Pin|SPI1_CS_Pin;
 80018ca:	f242 0310 	movw	r3, #8208	@ 0x2010
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4828      	ldr	r0, [pc, #160]	@ (8001984 <MX_GPIO_Init+0x1f0>)
 80018e4:	f000 ffca 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f0:	2302      	movs	r3, #2
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4823      	ldr	r0, [pc, #140]	@ (8001988 <MX_GPIO_Init+0x1f4>)
 80018fc:	f000 ffbe 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADXL375_ON_Pin BNO055_ON_Pin */
  GPIO_InitStruct.Pin = ADXL375_ON_Pin|BNO055_ON_Pin;
 8001900:	f248 0308 	movw	r3, #32776	@ 0x8008
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	481b      	ldr	r0, [pc, #108]	@ (8001988 <MX_GPIO_Init+0x1f4>)
 800191a:	f000 ffaf 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : HEARTBEAT_Pin BNO086_RST_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin|BNO086_RST_Pin;
 800191e:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	4815      	ldr	r0, [pc, #84]	@ (800198c <MX_GPIO_Init+0x1f8>)
 8001938:	f000 ffa0 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800193c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	480d      	ldr	r0, [pc, #52]	@ (8001988 <MX_GPIO_Init+0x1f4>)
 8001952:	f000 ff93 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO055_RST_Pin GPS_RST_Pin */
  GPIO_InitStruct.Pin = BNO055_RST_Pin|GPS_RST_Pin;
 8001956:	2318      	movs	r3, #24
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	4808      	ldr	r0, [pc, #32]	@ (8001990 <MX_GPIO_Init+0x1fc>)
 800196e:	f000 ff85 	bl	800287c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001972:	bf00      	nop
 8001974:	3730      	adds	r7, #48	@ 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	58024400 	.word	0x58024400
 8001980:	58021000 	.word	0x58021000
 8001984:	58020800 	.word	0x58020800
 8001988:	58020000 	.word	0x58020000
 800198c:	58020400 	.word	0x58020400
 8001990:	58020c00 	.word	0x58020c00

08001994 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800199a:	463b      	mov	r3, r7
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80019a6:	f000 fef1 	bl	800278c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80019b6:	231f      	movs	r3, #31
 80019b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80019ba:	2387      	movs	r3, #135	@ 0x87
 80019bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80019be:	2300      	movs	r3, #0
 80019c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80019c2:	2300      	movs	r3, #0
 80019c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019d6:	463b      	mov	r3, r7
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 ff0f 	bl	80027fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80019de:	2004      	movs	r0, #4
 80019e0:	f000 feec 	bl	80027bc <HAL_MPU_Enable>

}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <Error_Handler+0x8>

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_MspInit+0x30>)
 8001a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a04:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <HAL_MspInit+0x30>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_MspInit+0x30>)
 8001a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	58024400 	.word	0x58024400

08001a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0be      	sub	sp, #248	@ 0xf8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	22c0      	movs	r2, #192	@ 0xc0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f012 faf5 	bl	801403c <memset>
  if(hi2c->Instance==I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a73      	ldr	r2, [pc, #460]	@ (8001c24 <HAL_I2C_MspInit+0x1f8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d146      	bne.n	8001aea <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a5c:	f04f 0208 	mov.w	r2, #8
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 f9f2 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001a7e:	f7ff ffb5 	bl	80019ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b69      	ldr	r3, [pc, #420]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a88:	4a67      	ldr	r2, [pc, #412]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a92:	4b65      	ldr	r3, [pc, #404]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa0:	23c0      	movs	r3, #192	@ 0xc0
 8001aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa6:	2312      	movs	r3, #18
 8001aa8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4859      	ldr	r0, [pc, #356]	@ (8001c2c <HAL_I2C_MspInit+0x200>)
 8001ac6:	f000 fed9 	bl	800287c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aca:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ad0:	4a55      	ldr	r2, [pc, #340]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001ad2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ada:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001ae8:	e098      	b.n	8001c1c <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a50      	ldr	r2, [pc, #320]	@ (8001c30 <HAL_I2C_MspInit+0x204>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d147      	bne.n	8001b84 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001af4:	f04f 0208 	mov.w	r2, #8
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b06:	f107 0320 	add.w	r3, r7, #32
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 f9a6 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001b16:	f7ff ff69 	bl	80019ec <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b43      	ldr	r3, [pc, #268]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b20:	4a41      	ldr	r2, [pc, #260]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b38:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b40:	2312      	movs	r3, #18
 8001b42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b52:	2304      	movs	r3, #4
 8001b54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4833      	ldr	r0, [pc, #204]	@ (8001c2c <HAL_I2C_MspInit+0x200>)
 8001b60:	f000 fe8c 	bl	800287c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b64:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001b6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b74:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
}
 8001b82:	e04b      	b.n	8001c1c <HAL_I2C_MspInit+0x1f0>
  else if(hi2c->Instance==I2C4)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2a      	ldr	r2, [pc, #168]	@ (8001c34 <HAL_I2C_MspInit+0x208>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d146      	bne.n	8001c1c <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b8e:	f04f 0210 	mov.w	r2, #16
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f004 f959 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8001bb0:	f7ff ff1c 	bl	80019ec <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bba:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc4:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001bd2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bda:	2312      	movs	r3, #18
 8001bdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001bec:	2304      	movs	r3, #4
 8001bee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480f      	ldr	r0, [pc, #60]	@ (8001c38 <HAL_I2C_MspInit+0x20c>)
 8001bfa:	f000 fe3f 	bl	800287c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c04:	4a08      	ldr	r2, [pc, #32]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_I2C_MspInit+0x1fc>)
 8001c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	37f8      	adds	r7, #248	@ 0xf8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40005400 	.word	0x40005400
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	58020400 	.word	0x58020400
 8001c30:	40005800 	.word	0x40005800
 8001c34:	58001c00 	.word	0x58001c00
 8001c38:	58020c00 	.word	0x58020c00

08001c3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0bc      	sub	sp, #240	@ 0xf0
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	22c0      	movs	r2, #192	@ 0xc0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f012 f9ed 	bl	801403c <memset>
  if(hsd->Instance==SDMMC1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a38      	ldr	r2, [pc, #224]	@ (8001d48 <HAL_SD_MspInit+0x10c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d169      	bne.n	8001d40 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001c6c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 f8eb 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001c8c:	f7ff feae 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c90:	4b2e      	ldr	r3, [pc, #184]	@ (8001d4c <HAL_SD_MspInit+0x110>)
 8001c92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c96:	4a2d      	ldr	r2, [pc, #180]	@ (8001d4c <HAL_SD_MspInit+0x110>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <HAL_SD_MspInit+0x110>)
 8001ca2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cae:	4b27      	ldr	r3, [pc, #156]	@ (8001d4c <HAL_SD_MspInit+0x110>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb4:	4a25      	ldr	r2, [pc, #148]	@ (8001d4c <HAL_SD_MspInit+0x110>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cbe:	4b23      	ldr	r3, [pc, #140]	@ (8001d4c <HAL_SD_MspInit+0x110>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <HAL_SD_MspInit+0x110>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d4c <HAL_SD_MspInit+0x110>)
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <HAL_SD_MspInit+0x110>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001cea:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001d04:	230c      	movs	r3, #12
 8001d06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480f      	ldr	r0, [pc, #60]	@ (8001d50 <HAL_SD_MspInit+0x114>)
 8001d12:	f000 fdb3 	bl	800287c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d16:	2304      	movs	r3, #4
 8001d18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4806      	ldr	r0, [pc, #24]	@ (8001d54 <HAL_SD_MspInit+0x118>)
 8001d3c:	f000 fd9e 	bl	800287c <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001d40:	bf00      	nop
 8001d42:	37f0      	adds	r7, #240	@ 0xf0
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	52007000 	.word	0x52007000
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58020800 	.word	0x58020800
 8001d54:	58020c00 	.word	0x58020c00

08001d58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0bc      	sub	sp, #240	@ 0xf0
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	22c0      	movs	r2, #192	@ 0xc0
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f012 f95f 	bl	801403c <memset>
  if(hspi->Instance==SPI1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb4 <HAL_SPI_MspInit+0x15c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d146      	bne.n	8001e16 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001d94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d98:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9a:	f107 0318 	add.w	r3, r7, #24
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 f85c 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001daa:	f7ff fe1f 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dae:	4b42      	ldr	r3, [pc, #264]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db4:	4a40      	ldr	r2, [pc, #256]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001db6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd2:	4a39      	ldr	r2, [pc, #228]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ddc:	4b36      	ldr	r3, [pc, #216]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dea:	23e0      	movs	r3, #224	@ 0xe0
 8001dec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e02:	2305      	movs	r3, #5
 8001e04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	482b      	ldr	r0, [pc, #172]	@ (8001ebc <HAL_SPI_MspInit+0x164>)
 8001e10:	f000 fd34 	bl	800287c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001e14:	e049      	b.n	8001eaa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI4)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a29      	ldr	r2, [pc, #164]	@ (8001ec0 <HAL_SPI_MspInit+0x168>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d144      	bne.n	8001eaa <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001e20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	4618      	mov	r0, r3
 8001e36:	f004 f811 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8001e40:	f7ff fdd4 	bl	80019ec <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e44:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001e4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e54:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e68:	4a13      	ldr	r2, [pc, #76]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <HAL_SPI_MspInit+0x160>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e80:	2364      	movs	r3, #100	@ 0x64
 8001e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e98:	2305      	movs	r3, #5
 8001e9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4807      	ldr	r0, [pc, #28]	@ (8001ec4 <HAL_SPI_MspInit+0x16c>)
 8001ea6:	f000 fce9 	bl	800287c <HAL_GPIO_Init>
}
 8001eaa:	bf00      	nop
 8001eac:	37f0      	adds	r7, #240	@ 0xf0
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40013000 	.word	0x40013000
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	58020000 	.word	0x58020000
 8001ec0:	40013400 	.word	0x40013400
 8001ec4:	58021000 	.word	0x58021000

08001ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0ba      	sub	sp, #232	@ 0xe8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	22c0      	movs	r2, #192	@ 0xc0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f012 f8a7 	bl	801403c <memset>
  if(huart->Instance==USART2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <HAL_UART_MspInit+0xc4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d145      	bne.n	8001f84 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ef8:	f04f 0202 	mov.w	r2, #2
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 ffa4 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f1a:	f7ff fd67 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <HAL_UART_MspInit+0xc8>)
 8001f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f24:	4a1a      	ldr	r2, [pc, #104]	@ (8001f90 <HAL_UART_MspInit+0xc8>)
 8001f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f2e:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <HAL_UART_MspInit+0xc8>)
 8001f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3c:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <HAL_UART_MspInit+0xc8>)
 8001f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f42:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <HAL_UART_MspInit+0xc8>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f4c:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <HAL_UART_MspInit+0xc8>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f5a:	2360      	movs	r3, #96	@ 0x60
 8001f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f72:	2307      	movs	r3, #7
 8001f74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <HAL_UART_MspInit+0xcc>)
 8001f80:	f000 fc7c 	bl	800287c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f84:	bf00      	nop
 8001f86:	37e8      	adds	r7, #232	@ 0xe8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	58024400 	.word	0x58024400
 8001f94:	58020c00 	.word	0x58020c00

08001f98 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b0bc      	sub	sp, #240	@ 0xf0
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb0:	f107 0318 	add.w	r3, r7, #24
 8001fb4:	22c0      	movs	r2, #192	@ 0xc0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f012 f83f 	bl	801403c <memset>
  if(husart->Instance==USART3)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a39      	ldr	r2, [pc, #228]	@ (80020a8 <HAL_USART_MspInit+0x110>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d16b      	bne.n	80020a0 <HAL_USART_MspInit+0x108>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fc8:	f04f 0202 	mov.w	r2, #2
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 ff3c 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8001fea:	f7ff fcff 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fee:	4b2f      	ldr	r3, [pc, #188]	@ (80020ac <HAL_USART_MspInit+0x114>)
 8001ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80020ac <HAL_USART_MspInit+0x114>)
 8001ff6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80020ac <HAL_USART_MspInit+0x114>)
 8002000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <HAL_USART_MspInit+0x114>)
 800200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002012:	4a26      	ldr	r2, [pc, #152]	@ (80020ac <HAL_USART_MspInit+0x114>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800201c:	4b23      	ldr	r3, [pc, #140]	@ (80020ac <HAL_USART_MspInit+0x114>)
 800201e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800202a:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <HAL_USART_MspInit+0x114>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002030:	4a1e      	ldr	r2, [pc, #120]	@ (80020ac <HAL_USART_MspInit+0x114>)
 8002032:	f043 0308 	orr.w	r3, r3, #8
 8002036:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800203a:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <HAL_USART_MspInit+0x114>)
 800203c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    PD11     ------> USART3_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002062:	2307      	movs	r3, #7
 8002064:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800206c:	4619      	mov	r1, r3
 800206e:	4810      	ldr	r0, [pc, #64]	@ (80020b0 <HAL_USART_MspInit+0x118>)
 8002070:	f000 fc04 	bl	800287c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8002074:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8002078:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800208e:	2307      	movs	r3, #7
 8002090:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002094:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002098:	4619      	mov	r1, r3
 800209a:	4806      	ldr	r0, [pc, #24]	@ (80020b4 <HAL_USART_MspInit+0x11c>)
 800209c:	f000 fbee 	bl	800287c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80020a0:	bf00      	nop
 80020a2:	37f0      	adds	r7, #240	@ 0xf0
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40004800 	.word	0x40004800
 80020ac:	58024400 	.word	0x58024400
 80020b0:	58020400 	.word	0x58020400
 80020b4:	58020c00 	.word	0x58020c00

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80020bc:	f003 feb2 	bl	8005e24 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <NMI_Handler+0x8>

080020c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <MemManage_Handler+0x4>

080020d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002112:	f000 f9db 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <OTG_FS_IRQHandler+0x10>)
 8002122:	f001 fcb5 	bl	8003a90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	24000dc4 	.word	0x24000dc4

08002130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return 1;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_kill>:

int _kill(int pid, int sig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800214a:	f011 ffc9 	bl	80140e0 <__errno>
 800214e:	4603      	mov	r3, r0
 8002150:	2216      	movs	r2, #22
 8002152:	601a      	str	r2, [r3, #0]
  return -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_exit>:

void _exit (int status)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffe7 	bl	8002140 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002172:	bf00      	nop
 8002174:	e7fd      	b.n	8002172 <_exit+0x12>

08002176 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e00a      	b.n	800219e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002188:	f3af 8000 	nop.w
 800218c:	4601      	mov	r1, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	60ba      	str	r2, [r7, #8]
 8002194:	b2ca      	uxtb	r2, r1
 8002196:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dbf0      	blt.n	8002188 <_read+0x12>
  }

  return len;
 80021a6:	687b      	ldr	r3, [r7, #4]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021d8:	605a      	str	r2, [r3, #4]
  return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_isatty>:

int _isatty(int file)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021f0:	2301      	movs	r3, #1
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	@ (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	@ (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	@ (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f011 ff4a 	bl	80140e0 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	@ (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	@ (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	24080000 	.word	0x24080000
 8002278:	00000400 	.word	0x00000400
 800227c:	240008c8 	.word	0x240008c8
 8002280:	24001670 	.word	0x24001670

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002288:	4b37      	ldr	r3, [pc, #220]	@ (8002368 <SystemInit+0xe4>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	4a36      	ldr	r2, [pc, #216]	@ (8002368 <SystemInit+0xe4>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002298:	4b34      	ldr	r3, [pc, #208]	@ (800236c <SystemInit+0xe8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	2b06      	cmp	r3, #6
 80022a2:	d807      	bhi.n	80022b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <SystemInit+0xe8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 030f 	bic.w	r3, r3, #15
 80022ac:	4a2f      	ldr	r2, [pc, #188]	@ (800236c <SystemInit+0xe8>)
 80022ae:	f043 0307 	orr.w	r3, r3, #7
 80022b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80022b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002370 <SystemInit+0xec>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002370 <SystemInit+0xec>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002370 <SystemInit+0xec>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002370 <SystemInit+0xec>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4929      	ldr	r1, [pc, #164]	@ (8002370 <SystemInit+0xec>)
 80022cc:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <SystemInit+0xf0>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022d2:	4b26      	ldr	r3, [pc, #152]	@ (800236c <SystemInit+0xe8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022de:	4b23      	ldr	r3, [pc, #140]	@ (800236c <SystemInit+0xe8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 030f 	bic.w	r3, r3, #15
 80022e6:	4a21      	ldr	r2, [pc, #132]	@ (800236c <SystemInit+0xe8>)
 80022e8:	f043 0307 	orr.w	r3, r3, #7
 80022ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <SystemInit+0xec>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <SystemInit+0xec>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <SystemInit+0xec>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002300:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <SystemInit+0xec>)
 8002302:	4a1d      	ldr	r2, [pc, #116]	@ (8002378 <SystemInit+0xf4>)
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002306:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <SystemInit+0xec>)
 8002308:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <SystemInit+0xf8>)
 800230a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800230c:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <SystemInit+0xec>)
 800230e:	4a1c      	ldr	r2, [pc, #112]	@ (8002380 <SystemInit+0xfc>)
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <SystemInit+0xec>)
 8002314:	2200      	movs	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002318:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <SystemInit+0xec>)
 800231a:	4a19      	ldr	r2, [pc, #100]	@ (8002380 <SystemInit+0xfc>)
 800231c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800231e:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <SystemInit+0xec>)
 8002320:	2200      	movs	r2, #0
 8002322:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002324:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <SystemInit+0xec>)
 8002326:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <SystemInit+0xfc>)
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800232a:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <SystemInit+0xec>)
 800232c:	2200      	movs	r2, #0
 800232e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002330:	4b0f      	ldr	r3, [pc, #60]	@ (8002370 <SystemInit+0xec>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0e      	ldr	r2, [pc, #56]	@ (8002370 <SystemInit+0xec>)
 8002336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800233c:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <SystemInit+0xec>)
 800233e:	2200      	movs	r2, #0
 8002340:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <SystemInit+0x100>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <SystemInit+0x104>)
 8002348:	4013      	ands	r3, r2
 800234a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800234e:	d202      	bcs.n	8002356 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002350:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <SystemInit+0x108>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <SystemInit+0x10c>)
 8002358:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800235c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00
 800236c:	52002000 	.word	0x52002000
 8002370:	58024400 	.word	0x58024400
 8002374:	eaf6ed7f 	.word	0xeaf6ed7f
 8002378:	02020200 	.word	0x02020200
 800237c:	01ff0000 	.word	0x01ff0000
 8002380:	01010280 	.word	0x01010280
 8002384:	5c001000 	.word	0x5c001000
 8002388:	ffff0000 	.word	0xffff0000
 800238c:	51008108 	.word	0x51008108
 8002390:	52004000 	.word	0x52004000

08002394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002398:	f7ff ff74 	bl	8002284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800239c:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800239e:	490d      	ldr	r1, [pc, #52]	@ (80023d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b4:	4c0a      	ldr	r4, [pc, #40]	@ (80023e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023c2:	f011 fe93 	bl	80140ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c6:	f7fe fee4 	bl	8001192 <main>
  bx  lr
 80023ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023d4:	240002e8 	.word	0x240002e8
  ldr r2, =_sidata
 80023d8:	080161d8 	.word	0x080161d8
  ldr r2, =_sbss
 80023dc:	240002e8 	.word	0x240002e8
  ldr r4, =_ebss
 80023e0:	2400166c 	.word	0x2400166c

080023e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC3_IRQHandler>
	...

080023e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ee:	2003      	movs	r0, #3
 80023f0:	f000 f98c 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023f4:	f003 fb40 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_Init+0x68>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	4913      	ldr	r1, [pc, #76]	@ (8002454 <HAL_Init+0x6c>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <HAL_Init+0x68>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	4a0e      	ldr	r2, [pc, #56]	@ (8002454 <HAL_Init+0x6c>)
 800241c:	5cd3      	ldrb	r3, [r2, r3]
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	4a0b      	ldr	r2, [pc, #44]	@ (8002458 <HAL_Init+0x70>)
 800242a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800242c:	4a0b      	ldr	r2, [pc, #44]	@ (800245c <HAL_Init+0x74>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002432:	200f      	movs	r0, #15
 8002434:	f000 f814 	bl	8002460 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e002      	b.n	8002448 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002442:	f7ff fad9 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	58024400 	.word	0x58024400
 8002454:	08015dd4 	.word	0x08015dd4
 8002458:	24000020 	.word	0x24000020
 800245c:	2400001c 	.word	0x2400001c

08002460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002468:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_InitTick+0x60>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e021      	b.n	80024b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_InitTick+0x64>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <HAL_InitTick+0x60>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f971 	bl	8002772 <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f000 f93b 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	@ (80024c8 <HAL_InitTick+0x68>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	24000028 	.word	0x24000028
 80024c4:	2400001c 	.word	0x2400001c
 80024c8:	24000024 	.word	0x24000024

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	24000028 	.word	0x24000028
 80024f0:	240008cc 	.word	0x240008cc

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	240008cc 	.word	0x240008cc

0800250c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff ffee 	bl	80024f4 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d005      	beq.n	8002532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_Delay+0x44>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002532:	bf00      	nop
 8002534:	f7ff ffde 	bl	80024f4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f7      	bhi.n	8002534 <HAL_Delay+0x28>
  {
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	24000028 	.word	0x24000028

08002554 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002558:	4b03      	ldr	r3, [pc, #12]	@ (8002568 <HAL_GetREVID+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0c1b      	lsrs	r3, r3, #16
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	5c001000 	.word	0x5c001000

0800256c <__NVIC_SetPriorityGrouping>:
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <__NVIC_SetPriorityGrouping+0x40>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	4313      	orrs	r3, r2
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	@ (80025ac <__NVIC_SetPriorityGrouping+0x40>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00
 80025b0:	05fa0000 	.word	0x05fa0000

080025b4 <__NVIC_GetPriorityGrouping>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b8:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <__NVIC_GetPriorityGrouping+0x18>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0307 	and.w	r3, r3, #7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_EnableIRQ>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db0b      	blt.n	80025fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4907      	ldr	r1, [pc, #28]	@ (8002608 <__NVIC_EnableIRQ+0x38>)
 80025ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	@ (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	@ (800265c <__NVIC_SetPriority+0x50>)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	@ 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	@ 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff29 	bl	800256c <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff40 	bl	80025b4 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff90 	bl	8002660 <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5f 	bl	800260c <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff33 	bl	80025d0 <__NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffa4 	bl	80026c8 <SysTick_Config>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002790:	f3bf 8f5f 	dmb	sy
}
 8002794:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002796:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <HAL_MPU_Disable+0x28>)
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	4a06      	ldr	r2, [pc, #24]	@ (80027b4 <HAL_MPU_Disable+0x28>)
 800279c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80027a2:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_MPU_Disable+0x2c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00
 80027b8:	e000ed90 	.word	0xe000ed90

080027bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80027c4:	4a0b      	ldr	r2, [pc, #44]	@ (80027f4 <HAL_MPU_Enable+0x38>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_MPU_Enable+0x3c>)
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <HAL_MPU_Enable+0x3c>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80027da:	f3bf 8f4f 	dsb	sy
}
 80027de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027e0:	f3bf 8f6f 	isb	sy
}
 80027e4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000ed90 	.word	0xe000ed90
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	785a      	ldrb	r2, [r3, #1]
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_MPU_ConfigRegion+0x7c>)
 800280a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800280c:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <HAL_MPU_ConfigRegion+0x7c>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	4a19      	ldr	r2, [pc, #100]	@ (8002878 <HAL_MPU_ConfigRegion+0x7c>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002818:	4a17      	ldr	r2, [pc, #92]	@ (8002878 <HAL_MPU_ConfigRegion+0x7c>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7b1b      	ldrb	r3, [r3, #12]
 8002824:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7adb      	ldrb	r3, [r3, #11]
 800282a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800282c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7a9b      	ldrb	r3, [r3, #10]
 8002832:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002834:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7b5b      	ldrb	r3, [r3, #13]
 800283a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800283c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7b9b      	ldrb	r3, [r3, #14]
 8002842:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002844:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7bdb      	ldrb	r3, [r3, #15]
 800284a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800284c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7a5b      	ldrb	r3, [r3, #9]
 8002852:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002854:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7a1b      	ldrb	r3, [r3, #8]
 800285a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800285c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002864:	4a04      	ldr	r2, [pc, #16]	@ (8002878 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002866:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002868:	6113      	str	r3, [r2, #16]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed90 	.word	0xe000ed90

0800287c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	@ 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800288a:	4b89      	ldr	r3, [pc, #548]	@ (8002ab0 <HAL_GPIO_Init+0x234>)
 800288c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800288e:	e194      	b.n	8002bba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8186 	beq.w	8002bb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d005      	beq.n	80028c0 <HAL_GPIO_Init+0x44>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d130      	bne.n	8002922 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f6:	2201      	movs	r2, #1
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 0201 	and.w	r2, r3, #1
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b03      	cmp	r3, #3
 800292c:	d017      	beq.n	800295e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d123      	bne.n	80029b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	69b9      	ldr	r1, [r7, #24]
 80029ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0203 	and.w	r2, r3, #3
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80e0 	beq.w	8002bb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab4 <HAL_GPIO_Init+0x238>)
 80029f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029fa:	4a2e      	ldr	r2, [pc, #184]	@ (8002ab4 <HAL_GPIO_Init+0x238>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a04:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab4 <HAL_GPIO_Init+0x238>)
 8002a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a12:	4a29      	ldr	r2, [pc, #164]	@ (8002ab8 <HAL_GPIO_Init+0x23c>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a20      	ldr	r2, [pc, #128]	@ (8002abc <HAL_GPIO_Init+0x240>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d052      	beq.n	8002ae4 <HAL_GPIO_Init+0x268>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac0 <HAL_GPIO_Init+0x244>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d031      	beq.n	8002aaa <HAL_GPIO_Init+0x22e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac4 <HAL_GPIO_Init+0x248>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02b      	beq.n	8002aa6 <HAL_GPIO_Init+0x22a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac8 <HAL_GPIO_Init+0x24c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d025      	beq.n	8002aa2 <HAL_GPIO_Init+0x226>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1c      	ldr	r2, [pc, #112]	@ (8002acc <HAL_GPIO_Init+0x250>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01f      	beq.n	8002a9e <HAL_GPIO_Init+0x222>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <HAL_GPIO_Init+0x254>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d019      	beq.n	8002a9a <HAL_GPIO_Init+0x21e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad4 <HAL_GPIO_Init+0x258>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_Init+0x21a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_GPIO_Init+0x25c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00d      	beq.n	8002a92 <HAL_GPIO_Init+0x216>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <HAL_GPIO_Init+0x260>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x212>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_GPIO_Init+0x264>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_GPIO_Init+0x20e>
 8002a86:	2309      	movs	r3, #9
 8002a88:	e02d      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002a8a:	230a      	movs	r3, #10
 8002a8c:	e02b      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002a8e:	2308      	movs	r3, #8
 8002a90:	e029      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002a92:	2307      	movs	r3, #7
 8002a94:	e027      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002a96:	2306      	movs	r3, #6
 8002a98:	e025      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002a9a:	2305      	movs	r3, #5
 8002a9c:	e023      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e021      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e01f      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e01d      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e01b      	b.n	8002ae6 <HAL_GPIO_Init+0x26a>
 8002aae:	bf00      	nop
 8002ab0:	58000080 	.word	0x58000080
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	58000400 	.word	0x58000400
 8002abc:	58020000 	.word	0x58020000
 8002ac0:	58020400 	.word	0x58020400
 8002ac4:	58020800 	.word	0x58020800
 8002ac8:	58020c00 	.word	0x58020c00
 8002acc:	58021000 	.word	0x58021000
 8002ad0:	58021400 	.word	0x58021400
 8002ad4:	58021800 	.word	0x58021800
 8002ad8:	58021c00 	.word	0x58021c00
 8002adc:	58022000 	.word	0x58022000
 8002ae0:	58022400 	.word	0x58022400
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	f002 0203 	and.w	r2, r2, #3
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	4093      	lsls	r3, r2
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af6:	4938      	ldr	r1, [pc, #224]	@ (8002bd8 <HAL_GPIO_Init+0x35c>)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	3302      	adds	r3, #2
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f47f ae63 	bne.w	8002890 <HAL_GPIO_Init+0x14>
  }
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	3724      	adds	r7, #36	@ 0x24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	58000400 	.word	0x58000400

08002bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	887b      	ldrh	r3, [r7, #2]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e001      	b.n	8002bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002c28:	e003      	b.n	8002c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e08b      	b.n	8002d6a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fee0 	bl	8001a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	@ 0x24
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	e006      	b.n	8002cc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d108      	bne.n	8002ce2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	e007      	b.n	8002cf2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <HAL_I2C_Init+0x134>)
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69d9      	ldr	r1, [r3, #28]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1a      	ldr	r2, [r3, #32]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	02008000 	.word	0x02008000

08002d78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	461a      	mov	r2, r3
 8002d84:	460b      	mov	r3, r1
 8002d86:	817b      	strh	r3, [r7, #10]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	f040 80fd 	bne.w	8002f94 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2C_Master_Transmit+0x30>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e0f6      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x21e>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002db0:	f7ff fba0 	bl	80024f4 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2319      	movs	r3, #25
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fa0a 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0e1      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2221      	movs	r2, #33	@ 0x21
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	893a      	ldrh	r2, [r7, #8]
 8002df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2bff      	cmp	r3, #255	@ 0xff
 8002e02:	d906      	bls.n	8002e12 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	22ff      	movs	r2, #255	@ 0xff
 8002e08:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e007      	b.n	8002e22 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002e1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e20:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d024      	beq.n	8002e74 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	8979      	ldrh	r1, [r7, #10]
 8002e66:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa0 <HAL_I2C_Master_Transmit+0x228>)
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fc05 	bl	800367c <I2C_TransferConfig>
 8002e72:	e066      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	8979      	ldrh	r1, [r7, #10]
 8002e7c:	4b48      	ldr	r3, [pc, #288]	@ (8002fa0 <HAL_I2C_Master_Transmit+0x228>)
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fbfa 	bl	800367c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e88:	e05b      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	6a39      	ldr	r1, [r7, #32]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f9fd 	bl	800328e <I2C_WaitOnTXISFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e07b      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d034      	beq.n	8002f42 <HAL_I2C_Master_Transmit+0x1ca>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d130      	bne.n	8002f42 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2180      	movs	r1, #128	@ 0x80
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f976 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e04d      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2bff      	cmp	r3, #255	@ 0xff
 8002f02:	d90e      	bls.n	8002f22 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	22ff      	movs	r2, #255	@ 0xff
 8002f08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	8979      	ldrh	r1, [r7, #10]
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fbae 	bl	800367c <I2C_TransferConfig>
 8002f20:	e00f      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	8979      	ldrh	r1, [r7, #10]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fb9d 	bl	800367c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d19e      	bne.n	8002e8a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	6a39      	ldr	r1, [r7, #32]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f9e3 	bl	800331c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e01a      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2220      	movs	r2, #32
 8002f66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <HAL_I2C_Master_Transmit+0x22c>)
 8002f74:	400b      	ands	r3, r1
 8002f76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	80002000 	.word	0x80002000
 8002fa4:	fe00e800 	.word	0xfe00e800

08002fa8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	817b      	strh	r3, [r7, #10]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	f040 80db 	bne.w	8003180 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_I2C_Master_Receive+0x30>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e0d4      	b.n	8003182 <HAL_I2C_Master_Receive+0x1da>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fe0:	f7ff fa88 	bl	80024f4 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2319      	movs	r3, #25
 8002fec:	2201      	movs	r2, #1
 8002fee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f8f2 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0bf      	b.n	8003182 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2222      	movs	r2, #34	@ 0x22
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2210      	movs	r2, #16
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	893a      	ldrh	r2, [r7, #8]
 8003022:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	2bff      	cmp	r3, #255	@ 0xff
 8003032:	d90e      	bls.n	8003052 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	22ff      	movs	r2, #255	@ 0xff
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303e:	b2da      	uxtb	r2, r3
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	4b52      	ldr	r3, [pc, #328]	@ (800318c <HAL_I2C_Master_Receive+0x1e4>)
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fb16 	bl	800367c <I2C_TransferConfig>
 8003050:	e06d      	b.n	800312e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003060:	b2da      	uxtb	r2, r3
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	4b49      	ldr	r3, [pc, #292]	@ (800318c <HAL_I2C_Master_Receive+0x1e4>)
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fb05 	bl	800367c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003072:	e05c      	b.n	800312e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	6a39      	ldr	r1, [r7, #32]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f993 	bl	80033a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e07c      	b.n	8003182 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d034      	beq.n	800312e <HAL_I2C_Master_Receive+0x186>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d130      	bne.n	800312e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	2200      	movs	r2, #0
 80030d4:	2180      	movs	r1, #128	@ 0x80
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f880 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e04d      	b.n	8003182 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2bff      	cmp	r3, #255	@ 0xff
 80030ee:	d90e      	bls.n	800310e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	22ff      	movs	r2, #255	@ 0xff
 80030f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	2300      	movs	r3, #0
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fab8 	bl	800367c <I2C_TransferConfig>
 800310c:	e00f      	b.n	800312e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311c:	b2da      	uxtb	r2, r3
 800311e:	8979      	ldrh	r1, [r7, #10]
 8003120:	2300      	movs	r3, #0
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 faa7 	bl	800367c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d19d      	bne.n	8003074 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	6a39      	ldr	r1, [r7, #32]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f8ed 	bl	800331c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e01a      	b.n	8003182 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2220      	movs	r2, #32
 8003152:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6859      	ldr	r1, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <HAL_I2C_Master_Receive+0x1e8>)
 8003160:	400b      	ands	r3, r1
 8003162:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	e000      	b.n	8003182 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	80002400 	.word	0x80002400
 8003190:	fe00e800 	.word	0xfe00e800

08003194 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d103      	bne.n	80031b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d007      	beq.n	80031d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	619a      	str	r2, [r3, #24]
  }
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ec:	e03b      	b.n	8003266 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	6839      	ldr	r1, [r7, #0]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f962 	bl	80034bc <I2C_IsErrorOccurred>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e041      	b.n	8003286 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d02d      	beq.n	8003266 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7ff f973 	bl	80024f4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x44>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d122      	bne.n	8003266 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4013      	ands	r3, r2
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	429a      	cmp	r2, r3
 800323c:	d113      	bne.n	8003266 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	429a      	cmp	r2, r3
 8003282:	d0b4      	beq.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800329a:	e033      	b.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f90b 	bl	80034bc <I2C_IsErrorOccurred>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e031      	b.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d025      	beq.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b8:	f7ff f91c 	bl	80024f4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d302      	bcc.n	80032ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11a      	bne.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d013      	beq.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d1c4      	bne.n	800329c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003328:	e02f      	b.n	800338a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f8c4 	bl	80034bc <I2C_IsErrorOccurred>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e02d      	b.n	800339a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7ff f8d9 	bl	80024f4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11a      	bne.n	800338a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b20      	cmp	r3, #32
 8003360:	d013      	beq.n	800338a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e007      	b.n	800339a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b20      	cmp	r3, #32
 8003396:	d1c8      	bne.n	800332a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80033b4:	e071      	b.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f87e 	bl	80034bc <I2C_IsErrorOccurred>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d13b      	bne.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d138      	bne.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d105      	bne.n	80033f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b10      	cmp	r3, #16
 8003404:	d121      	bne.n	800344a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2210      	movs	r2, #16
 800340c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2204      	movs	r2, #4
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2220      	movs	r2, #32
 800341a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b24      	ldr	r3, [pc, #144]	@ (80034b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003428:	400b      	ands	r3, r1
 800342a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
 8003448:	e002      	b.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003450:	f7ff f850 	bl	80024f4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d119      	bne.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d116      	bne.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b04      	cmp	r3, #4
 8003478:	d00f      	beq.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f043 0220 	orr.w	r2, r3, #32
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d002      	beq.n	80034ae <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d083      	beq.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	fe00e800 	.word	0xfe00e800

080034bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	@ 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d068      	beq.n	80035ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2210      	movs	r2, #16
 80034ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034f0:	e049      	b.n	8003586 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d045      	beq.n	8003586 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	f7fe fffb 	bl	80024f4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	d302      	bcc.n	8003510 <I2C_IsErrorOccurred+0x54>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d13a      	bne.n	8003586 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800351a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003522:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800352e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003532:	d121      	bne.n	8003578 <I2C_IsErrorOccurred+0xbc>
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800353a:	d01d      	beq.n	8003578 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	2b20      	cmp	r3, #32
 8003540:	d01a      	beq.n	8003578 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003550:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003552:	f7fe ffcf 	bl	80024f4 <HAL_GetTick>
 8003556:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003558:	e00e      	b.n	8003578 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800355a:	f7fe ffcb 	bl	80024f4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b19      	cmp	r3, #25
 8003566:	d907      	bls.n	8003578 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	f043 0320 	orr.w	r3, r3, #32
 800356e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003576:	e006      	b.n	8003586 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b20      	cmp	r3, #32
 8003584:	d1e9      	bne.n	800355a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b20      	cmp	r3, #32
 8003592:	d003      	beq.n	800359c <I2C_IsErrorOccurred+0xe0>
 8003594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0aa      	beq.n	80034f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800359c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2220      	movs	r2, #32
 80035aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00b      	beq.n	80035e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003620:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01c      	beq.n	800366a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7ff fdaf 	bl	8003194 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <I2C_IsErrorOccurred+0x1bc>)
 8003642:	400b      	ands	r3, r1
 8003644:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800366a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	@ 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	fe00e800 	.word	0xfe00e800

0800367c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	817b      	strh	r3, [r7, #10]
 800368a:	4613      	mov	r3, r2
 800368c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003694:	7a7b      	ldrb	r3, [r7, #9]
 8003696:	041b      	lsls	r3, r3, #16
 8003698:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800369c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	0d5b      	lsrs	r3, r3, #21
 80036b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80036ba:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <I2C_TransferConfig+0x60>)
 80036bc:	430b      	orrs	r3, r1
 80036be:	43db      	mvns	r3, r3
 80036c0:	ea02 0103 	and.w	r1, r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	03ff63ff 	.word	0x03ff63ff

080036e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d138      	bne.n	8003768 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003700:	2302      	movs	r3, #2
 8003702:	e032      	b.n	800376a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	@ 0x24
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003732:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b20      	cmp	r3, #32
 800378a:	d139      	bne.n	8003800 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003796:	2302      	movs	r3, #2
 8003798:	e033      	b.n	8003802 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2224      	movs	r2, #36	@ 0x24
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af02      	add	r7, sp, #8
 8003814:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0fe      	b.n	8003a1e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f00f fa67 	bl	8012d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2203      	movs	r2, #3
 800383e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f00a f965 	bl	800db16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7c1a      	ldrb	r2, [r3, #16]
 8003854:	f88d 2000 	strb.w	r2, [sp]
 8003858:	3304      	adds	r3, #4
 800385a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385c:	f00a f836 	bl	800d8cc <USB_CoreInit>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0d5      	b.n	8003a1e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f00a f95d 	bl	800db38 <USB_SetCurrentMode>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0c6      	b.n	8003a1e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	e04a      	b.n	800392c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3315      	adds	r3, #21
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3314      	adds	r3, #20
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	b298      	uxth	r0, r3
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	332e      	adds	r3, #46	@ 0x2e
 80038d2:	4602      	mov	r2, r0
 80038d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3318      	adds	r3, #24
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	331c      	adds	r3, #28
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3320      	adds	r3, #32
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	3324      	adds	r3, #36	@ 0x24
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	3301      	adds	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	791b      	ldrb	r3, [r3, #4]
 8003930:	7bfa      	ldrb	r2, [r7, #15]
 8003932:	429a      	cmp	r2, r3
 8003934:	d3af      	bcc.n	8003896 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
 800393a:	e044      	b.n	80039c6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	3301      	adds	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	791b      	ldrb	r3, [r3, #4]
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d3b5      	bcc.n	800393c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7c1a      	ldrb	r2, [r3, #16]
 80039d8:	f88d 2000 	strb.w	r2, [sp]
 80039dc:	3304      	adds	r3, #4
 80039de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e0:	f00a f8f6 	bl	800dbd0 <USB_DevInit>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e013      	b.n	8003a1e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7b1b      	ldrb	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d102      	bne.n	8003a12 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f001 f999 	bl	8004d44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f00b f935 	bl	800ec86 <USB_DevDisconnect>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_PCD_Start+0x1c>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e022      	b.n	8003a88 <HAL_PCD_Start+0x62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f00a f840 	bl	800daf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f00b f8e3 	bl	800ec44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b08d      	sub	sp, #52	@ 0x34
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f00b f9a1 	bl	800edee <USB_GetMode>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f040 84b9 	bne.w	8004426 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f00b f905 	bl	800ecc8 <USB_ReadInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 84af 	beq.w	8004424 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f00b f8f2 	bl	800ecc8 <USB_ReadInterrupts>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d107      	bne.n	8003afe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f002 0202 	and.w	r2, r2, #2
 8003afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00b f8e0 	bl	800ecc8 <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d161      	bne.n	8003bd6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699a      	ldr	r2, [r3, #24]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0210 	bic.w	r2, r2, #16
 8003b20:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 020f 	and.w	r2, r3, #15
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	0c5b      	lsrs	r3, r3, #17
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d124      	bne.n	8003b98 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d035      	beq.n	8003bc6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6a38      	ldr	r0, [r7, #32]
 8003b6e:	f00a ff17 	bl	800e9a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b7e:	441a      	add	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b90:	441a      	add	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	615a      	str	r2, [r3, #20]
 8003b96:	e016      	b.n	8003bc6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	0c5b      	lsrs	r3, r3, #17
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	2b06      	cmp	r3, #6
 8003ba2:	d110      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003baa:	2208      	movs	r2, #8
 8003bac:	4619      	mov	r1, r3
 8003bae:	6a38      	ldr	r0, [r7, #32]
 8003bb0:	f00a fef6 	bl	800e9a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bc0:	441a      	add	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0210 	orr.w	r2, r2, #16
 8003bd4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f00b f874 	bl	800ecc8 <USB_ReadInterrupts>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bea:	f040 80a7 	bne.w	8003d3c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f00b f879 	bl	800ecee <USB_ReadDevAllOutEpInterrupt>
 8003bfc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bfe:	e099      	b.n	8003d34 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 808e 	beq.w	8003d28 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f00b f89d 	bl	800ed56 <USB_ReadDevOutEPInterrupt>
 8003c1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00c      	beq.n	8003c42 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c34:	461a      	mov	r2, r3
 8003c36:	2301      	movs	r3, #1
 8003c38:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fefb 	bl	8004a38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00c      	beq.n	8003c66 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 ffd1 	bl	8004c08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2310      	movs	r3, #16
 8003c80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d030      	beq.n	8003cee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c94:	2b80      	cmp	r3, #128	@ 0x80
 8003c96:	d109      	bne.n	8003cac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003caa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	78db      	ldrb	r3, [r3, #3]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d108      	bne.n	8003cdc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f00f f93c 	bl	8012f54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2302      	movs	r3, #2
 8003cec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d04:	461a      	mov	r2, r3
 8003d06:	2320      	movs	r3, #32
 8003d08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d009      	beq.n	8003d28 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d20:	461a      	mov	r2, r3
 8003d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f47f af62 	bne.w	8003c00 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f00a ffc1 	bl	800ecc8 <USB_ReadInterrupts>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d50:	f040 80db 	bne.w	8003f0a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f00a ffe2 	bl	800ed22 <USB_ReadDevAllInEpInterrupt>
 8003d5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d64:	e0cd      	b.n	8003f02 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80c2 	beq.w	8003ef6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f00b f808 	bl	800ed92 <USB_ReadDevInEPInterrupt>
 8003d82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d057      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	2201      	movs	r2, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69f9      	ldr	r1, [r7, #28]
 8003daa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dae:	4013      	ands	r3, r2
 8003db0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	799b      	ldrb	r3, [r3, #6]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d132      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3320      	adds	r3, #32
 8003ddc:	6819      	ldr	r1, [r3, #0]
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4403      	add	r3, r0
 8003dec:	331c      	adds	r3, #28
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4419      	add	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4403      	add	r3, r0
 8003e00:	3320      	adds	r3, #32
 8003e02:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d113      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x3a2>
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3324      	adds	r3, #36	@ 0x24
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	f00b f811 	bl	800ee54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f00f f806 	bl	8012e4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e54:	461a      	mov	r2, r3
 8003e56:	2308      	movs	r3, #8
 8003e58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e70:	461a      	mov	r2, r3
 8003e72:	2310      	movs	r3, #16
 8003e74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2340      	movs	r3, #64	@ 0x40
 8003e90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d023      	beq.n	8003ee4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e9e:	6a38      	ldr	r0, [r7, #32]
 8003ea0:	f009 fff4 	bl	800de8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	3310      	adds	r3, #16
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	78db      	ldrb	r3, [r3, #3]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d108      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f00f f853 	bl	8012f78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003eee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fd15 	bl	8004920 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	3301      	adds	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f47f af2e 	bne.w	8003d66 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f00a feda 	bl	800ecc8 <USB_ReadInterrupts>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f1e:	d122      	bne.n	8003f66 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d108      	bne.n	8003f50 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f46:	2100      	movs	r1, #0
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 ff1f 	bl	8004d8c <HAL_PCDEx_LPM_Callback>
 8003f4e:	e002      	b.n	8003f56 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f00e fff1 	bl	8012f38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f00a feac 	bl	800ecc8 <USB_ReadInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f7a:	d112      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f00e ffad 	bl	8012eec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f00a fe8e 	bl	800ecc8 <USB_ReadInterrupts>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fb6:	d121      	bne.n	8003ffc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003fc6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d111      	bne.n	8003ff6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe0:	089b      	lsrs	r3, r3, #2
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fec:	2101      	movs	r1, #1
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fecc 	bl	8004d8c <HAL_PCDEx_LPM_Callback>
 8003ff4:	e002      	b.n	8003ffc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f00e ff78 	bl	8012eec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f00a fe61 	bl	800ecc8 <USB_ReadInterrupts>
 8004006:	4603      	mov	r3, r0
 8004008:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004010:	f040 80b7 	bne.w	8004182 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2110      	movs	r1, #16
 800402e:	4618      	mov	r0, r3
 8004030:	f009 ff2c 	bl	800de8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004038:	e046      	b.n	80040c8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800403a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004046:	461a      	mov	r2, r3
 8004048:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800404c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800404e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	440a      	add	r2, r1
 8004064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004068:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800406c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800406e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407a:	461a      	mov	r2, r3
 800407c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004080:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800409c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80040c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c4:	3301      	adds	r3, #1
 80040c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	791b      	ldrb	r3, [r3, #4]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d3b2      	bcc.n	800403a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040e2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80040e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7bdb      	ldrb	r3, [r3, #15]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d016      	beq.n	800411e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004100:	f043 030b 	orr.w	r3, r3, #11
 8004104:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800410e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004116:	f043 030b 	orr.w	r3, r3, #11
 800411a:	6453      	str	r3, [r2, #68]	@ 0x44
 800411c:	e015      	b.n	800414a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412c:	4619      	mov	r1, r3
 800412e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004132:	4313      	orrs	r3, r2
 8004134:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004144:	f043 030b 	orr.w	r3, r3, #11
 8004148:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004158:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800415c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800416c:	461a      	mov	r2, r3
 800416e:	f00a fe71 	bl	800ee54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f00a fd9e 	bl	800ecc8 <USB_ReadInterrupts>
 800418c:	4603      	mov	r3, r0
 800418e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004196:	d123      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f00a fe35 	bl	800ee0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f009 fee9 	bl	800df7e <USB_GetDevSpeed>
 80041ac:	4603      	mov	r3, r0
 80041ae:	461a      	mov	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681c      	ldr	r4, [r3, #0]
 80041b8:	f001 fdd8 	bl	8005d6c <HAL_RCC_GetHCLKFreq>
 80041bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041c2:	461a      	mov	r2, r3
 80041c4:	4620      	mov	r0, r4
 80041c6:	f009 fbf3 	bl	800d9b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f00e fe65 	bl	8012e9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80041de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f00a fd6f 	bl	800ecc8 <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d10a      	bne.n	800420a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f00e fe42 	bl	8012e7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f002 0208 	and.w	r2, r2, #8
 8004208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f00a fd5a 	bl	800ecc8 <USB_ReadInterrupts>
 8004214:	4603      	mov	r3, r0
 8004216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421a:	2b80      	cmp	r3, #128	@ 0x80
 800421c:	d123      	bne.n	8004266 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800422a:	2301      	movs	r3, #1
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
 800422e:	e014      	b.n	800425a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	b2db      	uxtb	r3, r3
 800424c:	4619      	mov	r1, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fb08 	bl	8004864 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	3301      	adds	r3, #1
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	791b      	ldrb	r3, [r3, #4]
 800425e:	461a      	mov	r2, r3
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	4293      	cmp	r3, r2
 8004264:	d3e4      	bcc.n	8004230 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f00a fd2c 	bl	800ecc8 <USB_ReadInterrupts>
 8004270:	4603      	mov	r3, r0
 8004272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800427a:	d13c      	bne.n	80042f6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800427c:	2301      	movs	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004280:	e02b      	b.n	80042da <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	3318      	adds	r3, #24
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d115      	bne.n	80042d4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80042a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da12      	bge.n	80042d4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3317      	adds	r3, #23
 80042be:	2201      	movs	r2, #1
 80042c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fac8 	bl	8004864 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	3301      	adds	r3, #1
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	791b      	ldrb	r3, [r3, #4]
 80042de:	461a      	mov	r2, r3
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d3cd      	bcc.n	8004282 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80042f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f00a fce4 	bl	800ecc8 <USB_ReadInterrupts>
 8004300:	4603      	mov	r3, r0
 8004302:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004306:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800430a:	d156      	bne.n	80043ba <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800430c:	2301      	movs	r3, #1
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004310:	e045      	b.n	800439e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d12e      	bne.n	8004398 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800433a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800433c:	2b00      	cmp	r3, #0
 800433e:	da2b      	bge.n	8004398 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800434c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004350:	429a      	cmp	r2, r3
 8004352:	d121      	bne.n	8004398 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004366:	2201      	movs	r2, #1
 8004368:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004390:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004394:	6053      	str	r3, [r2, #4]
            break;
 8004396:	e008      	b.n	80043aa <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	3301      	adds	r3, #1
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	791b      	ldrb	r3, [r3, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d3b3      	bcc.n	8004312 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80043b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f00a fc82 	bl	800ecc8 <USB_ReadInterrupts>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ce:	d10a      	bne.n	80043e6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f00e fde3 	bl	8012f9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695a      	ldr	r2, [r3, #20]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80043e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f00a fc6c 	bl	800ecc8 <USB_ReadInterrupts>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d115      	bne.n	8004426 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f00e fdd3 	bl	8012fb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6859      	ldr	r1, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e000      	b.n	8004426 <HAL_PCD_IRQHandler+0x996>
      return;
 8004424:	bf00      	nop
    }
  }
}
 8004426:	3734      	adds	r7, #52	@ 0x34
 8004428:	46bd      	mov	sp, r7
 800442a:	bd90      	pop	{r4, r7, pc}

0800442c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_PCD_SetAddress+0x1a>
 8004442:	2302      	movs	r3, #2
 8004444:	e012      	b.n	800446c <HAL_PCD_SetAddress+0x40>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f00a fbcb 	bl	800ebf8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	4608      	mov	r0, r1
 800447e:	4611      	mov	r1, r2
 8004480:	461a      	mov	r2, r3
 8004482:	4603      	mov	r3, r0
 8004484:	70fb      	strb	r3, [r7, #3]
 8004486:	460b      	mov	r3, r1
 8004488:	803b      	strh	r3, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004496:	2b00      	cmp	r3, #0
 8004498:	da0f      	bge.n	80044ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	f003 020f 	and.w	r2, r3, #15
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3310      	adds	r3, #16
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	705a      	strb	r2, [r3, #1]
 80044b8:	e00f      	b.n	80044da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	f003 020f 	and.w	r2, r3, #15
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	4413      	add	r3, r2
 80044d0:	3304      	adds	r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80044e6:	883a      	ldrh	r2, [r7, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	78ba      	ldrb	r2, [r7, #2]
 80044f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	785b      	ldrb	r3, [r3, #1]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004504:	78bb      	ldrb	r3, [r7, #2]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d102      	bne.n	8004510 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_PCD_EP_Open+0xaa>
 800451a:	2302      	movs	r3, #2
 800451c:	e00e      	b.n	800453c <HAL_PCD_EP_Open+0xc8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68f9      	ldr	r1, [r7, #12]
 800452c:	4618      	mov	r0, r3
 800452e:	f009 fd4b 	bl	800dfc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800453a:	7afb      	ldrb	r3, [r7, #11]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004554:	2b00      	cmp	r3, #0
 8004556:	da0f      	bge.n	8004578 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	f003 020f 	and.w	r2, r3, #15
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	3310      	adds	r3, #16
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	705a      	strb	r2, [r3, #1]
 8004576:	e00f      	b.n	8004598 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	f003 020f 	and.w	r2, r3, #15
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_PCD_EP_Close+0x6e>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e00e      	b.n	80045d0 <HAL_PCD_EP_Close+0x8c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68f9      	ldr	r1, [r7, #12]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f009 fd89 	bl	800e0d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	460b      	mov	r3, r1
 80045e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e8:	7afb      	ldrb	r3, [r7, #11]
 80045ea:	f003 020f 	and.w	r2, r3, #15
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	3304      	adds	r3, #4
 8004600:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2200      	movs	r2, #0
 8004618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	b2da      	uxtb	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	799b      	ldrb	r3, [r3, #6]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d102      	bne.n	8004634 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	799b      	ldrb	r3, [r3, #6]
 800463c:	461a      	mov	r2, r3
 800463e:	6979      	ldr	r1, [r7, #20]
 8004640:	f009 fe26 	bl	800e290 <USB_EPStartXfer>

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004670:	681b      	ldr	r3, [r3, #0]
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b086      	sub	sp, #24
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	460b      	mov	r3, r1
 800468c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800468e:	7afb      	ldrb	r3, [r7, #11]
 8004690:	f003 020f 	and.w	r2, r3, #15
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	3310      	adds	r3, #16
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	3304      	adds	r3, #4
 80046a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2201      	movs	r2, #1
 80046bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046be:	7afb      	ldrb	r3, [r7, #11]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	799b      	ldrb	r3, [r3, #6]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d102      	bne.n	80046d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	799b      	ldrb	r3, [r3, #6]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6979      	ldr	r1, [r7, #20]
 80046e4:	f009 fdd4 	bl	800e290 <USB_EPStartXfer>

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	7912      	ldrb	r2, [r2, #4]
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e04f      	b.n	80047b0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	da0f      	bge.n	8004738 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	3310      	adds	r3, #16
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	3304      	adds	r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	705a      	strb	r2, [r3, #1]
 8004736:	e00d      	b.n	8004754 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_PCD_EP_SetStall+0x82>
 8004770:	2302      	movs	r3, #2
 8004772:	e01d      	b.n	80047b0 <HAL_PCD_EP_SetStall+0xbe>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68f9      	ldr	r1, [r7, #12]
 8004782:	4618      	mov	r0, r3
 8004784:	f00a f964 	bl	800ea50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	7999      	ldrb	r1, [r3, #6]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047a0:	461a      	mov	r2, r3
 80047a2:	f00a fb57 	bl	800ee54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	7912      	ldrb	r2, [r2, #4]
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e042      	b.n	800485c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da0f      	bge.n	80047fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	f003 020f 	and.w	r2, r3, #15
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	3310      	adds	r3, #16
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	3304      	adds	r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	705a      	strb	r2, [r3, #1]
 80047fc:	e00f      	b.n	800481e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	3304      	adds	r3, #4
 8004816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_PCD_EP_ClrStall+0x86>
 800483a:	2302      	movs	r3, #2
 800483c:	e00e      	b.n	800485c <HAL_PCD_EP_ClrStall+0xa4>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	4618      	mov	r0, r3
 800484e:	f00a f96d 	bl	800eb2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004874:	2b00      	cmp	r3, #0
 8004876:	da0c      	bge.n	8004892 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	f003 020f 	and.w	r2, r3, #15
 800487e:	4613      	mov	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	3310      	adds	r3, #16
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	3304      	adds	r3, #4
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e00c      	b.n	80048ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	f003 020f 	and.w	r2, r3, #15
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4413      	add	r3, r2
 80048a8:	3304      	adds	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68f9      	ldr	r1, [r7, #12]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f009 ff8c 	bl	800e7d0 <USB_EPStopXfer>
 80048b8:	4603      	mov	r3, r0
 80048ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80048bc:	7afb      	ldrb	r3, [r7, #11]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_PCD_EP_Flush+0x1a>
 80048dc:	2302      	movs	r3, #2
 80048de:	e01b      	b.n	8004918 <HAL_PCD_EP_Flush+0x52>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80048e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	da09      	bge.n	8004904 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f009 fac5 	bl	800de8c <USB_FlushTxFifo>
 8004902:	e004      	b.n	800490e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f009 faf1 	bl	800def0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	@ 0x28
 8004924:	af02      	add	r7, sp, #8
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	3310      	adds	r3, #16
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	3304      	adds	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d901      	bls.n	8004958 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e06b      	b.n	8004a30 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	429a      	cmp	r2, r3
 800496c:	d902      	bls.n	8004974 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3303      	adds	r3, #3
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800497c:	e02a      	b.n	80049d4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	429a      	cmp	r2, r3
 8004992:	d902      	bls.n	800499a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3303      	adds	r3, #3
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68d9      	ldr	r1, [r3, #12]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4603      	mov	r3, r0
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f009 ffb4 	bl	800e924 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	441a      	add	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d809      	bhi.n	80049fe <PCD_WriteEmptyTxFifo+0xde>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d203      	bcs.n	80049fe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1bf      	bne.n	800497e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d811      	bhi.n	8004a2e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2201      	movs	r2, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	6939      	ldr	r1, [r7, #16]
 8004a26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	333c      	adds	r3, #60	@ 0x3c
 8004a50:	3304      	adds	r3, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	799b      	ldrb	r3, [r3, #6]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d17b      	bne.n	8004b66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d015      	beq.n	8004aa4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	4a61      	ldr	r2, [pc, #388]	@ (8004c00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f240 80b9 	bls.w	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80b3 	beq.w	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa0:	6093      	str	r3, [r2, #8]
 8004aa2:	e0a7      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	2320      	movs	r3, #32
 8004abe:	6093      	str	r3, [r2, #8]
 8004ac0:	e098      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f040 8093 	bne.w	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8004c00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d90f      	bls.n	8004af6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aec:	461a      	mov	r2, r3
 8004aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004af2:	6093      	str	r3, [r2, #8]
 8004af4:	e07e      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	3304      	adds	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	0159      	lsls	r1, r3, #5
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	440b      	add	r3, r1
 8004b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b22:	1ad2      	subs	r2, r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d114      	bne.n	8004b58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b40:	461a      	mov	r2, r3
 8004b42:	2101      	movs	r1, #1
 8004b44:	f00a f986 	bl	800ee54 <USB_EP0_OutStart>
 8004b48:	e006      	b.n	8004b58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	441a      	add	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f00e f958 	bl	8012e14 <HAL_PCD_DataOutStageCallback>
 8004b64:	e046      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	4a26      	ldr	r2, [pc, #152]	@ (8004c04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d124      	bne.n	8004bb8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b8a:	6093      	str	r3, [r2, #8]
 8004b8c:	e032      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f00e f92f 	bl	8012e14 <HAL_PCD_DataOutStageCallback>
 8004bb6:	e01d      	b.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d114      	bne.n	8004be8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d108      	bne.n	8004be8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004be0:	461a      	mov	r2, r3
 8004be2:	2100      	movs	r1, #0
 8004be4:	f00a f936 	bl	800ee54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f00e f910 	bl	8012e14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	4f54300a 	.word	0x4f54300a
 8004c04:	4f54310a 	.word	0x4f54310a

08004c08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	333c      	adds	r3, #60	@ 0x3c
 8004c20:	3304      	adds	r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a15      	ldr	r2, [pc, #84]	@ (8004c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d90e      	bls.n	8004c5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c54:	461a      	mov	r2, r3
 8004c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f00e f8c7 	bl	8012df0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a0a      	ldr	r2, [pc, #40]	@ (8004c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d90c      	bls.n	8004c84 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	799b      	ldrb	r3, [r3, #6]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d108      	bne.n	8004c84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2101      	movs	r1, #1
 8004c80:	f00a f8e8 	bl	800ee54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	4f54300a 	.word	0x4f54300a

08004c94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d107      	bne.n	8004cc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cb2:	883b      	ldrh	r3, [r7, #0]
 8004cb4:	0419      	lsls	r1, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cc0:	e028      	b.n	8004d14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	0c1b      	lsrs	r3, r3, #16
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73fb      	strb	r3, [r7, #15]
 8004cd4:	e00d      	b.n	8004cf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	3340      	adds	r3, #64	@ 0x40
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d3ec      	bcc.n	8004cd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cfc:	883b      	ldrh	r3, [r7, #0]
 8004cfe:	0418      	lsls	r0, r3, #16
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	4302      	orrs	r2, r0
 8004d0c:	3340      	adds	r3, #64	@ 0x40
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d72:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_PCDEx_ActivateLPM+0x44>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	10000003 	.word	0x10000003

08004d8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004dac:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <HAL_PWREx_ConfigSupply+0x70>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d00a      	beq.n	8004dce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004db8:	4b16      	ldr	r3, [pc, #88]	@ (8004e14 <HAL_PWREx_ConfigSupply+0x70>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d001      	beq.n	8004dca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e01f      	b.n	8004e0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e01d      	b.n	8004e0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004dce:	4b11      	ldr	r3, [pc, #68]	@ (8004e14 <HAL_PWREx_ConfigSupply+0x70>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 0207 	bic.w	r2, r3, #7
 8004dd6:	490f      	ldr	r1, [pc, #60]	@ (8004e14 <HAL_PWREx_ConfigSupply+0x70>)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004dde:	f7fd fb89 	bl	80024f4 <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004de4:	e009      	b.n	8004dfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004de6:	f7fd fb85 	bl	80024f4 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004df4:	d901      	bls.n	8004dfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e007      	b.n	8004e0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004dfa:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <HAL_PWREx_ConfigSupply+0x70>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e06:	d1ee      	bne.n	8004de6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	58024800 	.word	0x58024800

08004e18 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e26:	60d3      	str	r3, [r2, #12]
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	58024800 	.word	0x58024800

08004e38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08c      	sub	sp, #48	@ 0x30
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f000 bc48 	b.w	80056dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8088 	beq.w	8004f6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5a:	4b99      	ldr	r3, [pc, #612]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e64:	4b96      	ldr	r3, [pc, #600]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d007      	beq.n	8004e80 <HAL_RCC_OscConfig+0x48>
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	2b18      	cmp	r3, #24
 8004e74:	d111      	bne.n	8004e9a <HAL_RCC_OscConfig+0x62>
 8004e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e80:	4b8f      	ldr	r3, [pc, #572]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d06d      	beq.n	8004f68 <HAL_RCC_OscConfig+0x130>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d169      	bne.n	8004f68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f000 bc21 	b.w	80056dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x7a>
 8004ea4:	4b86      	ldr	r3, [pc, #536]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a85      	ldr	r2, [pc, #532]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e02e      	b.n	8004f10 <HAL_RCC_OscConfig+0xd8>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x9c>
 8004eba:	4b81      	ldr	r3, [pc, #516]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a80      	ldr	r2, [pc, #512]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b7e      	ldr	r3, [pc, #504]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a7d      	ldr	r2, [pc, #500]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004ecc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e01d      	b.n	8004f10 <HAL_RCC_OscConfig+0xd8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0xc0>
 8004ede:	4b78      	ldr	r3, [pc, #480]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a77      	ldr	r2, [pc, #476]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b75      	ldr	r3, [pc, #468]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a74      	ldr	r2, [pc, #464]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCC_OscConfig+0xd8>
 8004ef8:	4b71      	ldr	r3, [pc, #452]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a70      	ldr	r2, [pc, #448]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b6e      	ldr	r3, [pc, #440]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a6d      	ldr	r2, [pc, #436]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d013      	beq.n	8004f40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd faec 	bl	80024f4 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fd fae8 	bl	80024f4 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	@ 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e3d4      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f32:	4b63      	ldr	r3, [pc, #396]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0xe8>
 8004f3e:	e014      	b.n	8004f6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd fad8 	bl	80024f4 <HAL_GetTick>
 8004f44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fd fad4 	bl	80024f4 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	@ 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e3c0      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f5a:	4b59      	ldr	r3, [pc, #356]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x110>
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80ca 	beq.w	800510c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f78:	4b51      	ldr	r3, [pc, #324]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f82:	4b4f      	ldr	r3, [pc, #316]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <HAL_RCC_OscConfig+0x166>
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	2b18      	cmp	r3, #24
 8004f92:	d156      	bne.n	8005042 <HAL_RCC_OscConfig+0x20a>
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d151      	bne.n	8005042 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f9e:	4b48      	ldr	r3, [pc, #288]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x17e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e392      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fb6:	4b42      	ldr	r3, [pc, #264]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 0219 	bic.w	r2, r3, #25
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	493f      	ldr	r1, [pc, #252]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fd fa94 	bl	80024f4 <HAL_GetTick>
 8004fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd0:	f7fd fa90 	bl	80024f4 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e37c      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fe2:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fee:	f7fd fab1 	bl	8002554 <HAL_GetREVID>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d817      	bhi.n	800502c <HAL_RCC_OscConfig+0x1f4>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b40      	cmp	r3, #64	@ 0x40
 8005002:	d108      	bne.n	8005016 <HAL_RCC_OscConfig+0x1de>
 8005004:	4b2e      	ldr	r3, [pc, #184]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800500c:	4a2c      	ldr	r2, [pc, #176]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 800500e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005012:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005014:	e07a      	b.n	800510c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005016:	4b2a      	ldr	r3, [pc, #168]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	031b      	lsls	r3, r3, #12
 8005024:	4926      	ldr	r1, [pc, #152]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8005026:	4313      	orrs	r3, r2
 8005028:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800502a:	e06f      	b.n	800510c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502c:	4b24      	ldr	r3, [pc, #144]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	061b      	lsls	r3, r3, #24
 800503a:	4921      	ldr	r1, [pc, #132]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 800503c:	4313      	orrs	r3, r2
 800503e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005040:	e064      	b.n	800510c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d047      	beq.n	80050da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800504a:	4b1d      	ldr	r3, [pc, #116]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 0219 	bic.w	r2, r3, #25
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	491a      	ldr	r1, [pc, #104]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8005058:	4313      	orrs	r3, r2
 800505a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fd fa4a 	bl	80024f4 <HAL_GetTick>
 8005060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005064:	f7fd fa46 	bl	80024f4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e332      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005076:	4b12      	ldr	r3, [pc, #72]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005082:	f7fd fa67 	bl	8002554 <HAL_GetREVID>
 8005086:	4603      	mov	r3, r0
 8005088:	f241 0203 	movw	r2, #4099	@ 0x1003
 800508c:	4293      	cmp	r3, r2
 800508e:	d819      	bhi.n	80050c4 <HAL_RCC_OscConfig+0x28c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	d108      	bne.n	80050aa <HAL_RCC_OscConfig+0x272>
 8005098:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80050a0:	4a07      	ldr	r2, [pc, #28]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a6:	6053      	str	r3, [r2, #4]
 80050a8:	e030      	b.n	800510c <HAL_RCC_OscConfig+0x2d4>
 80050aa:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	031b      	lsls	r3, r3, #12
 80050b8:	4901      	ldr	r1, [pc, #4]	@ (80050c0 <HAL_RCC_OscConfig+0x288>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]
 80050be:	e025      	b.n	800510c <HAL_RCC_OscConfig+0x2d4>
 80050c0:	58024400 	.word	0x58024400
 80050c4:	4b9a      	ldr	r3, [pc, #616]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	061b      	lsls	r3, r3, #24
 80050d2:	4997      	ldr	r1, [pc, #604]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	604b      	str	r3, [r1, #4]
 80050d8:	e018      	b.n	800510c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050da:	4b95      	ldr	r3, [pc, #596]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a94      	ldr	r2, [pc, #592]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e6:	f7fd fa05 	bl	80024f4 <HAL_GetTick>
 80050ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ee:	f7fd fa01 	bl	80024f4 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e2ed      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005100:	4b8b      	ldr	r3, [pc, #556]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f0      	bne.n	80050ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80a9 	beq.w	800526c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511a:	4b85      	ldr	r3, [pc, #532]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005122:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005124:	4b82      	ldr	r3, [pc, #520]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d007      	beq.n	8005140 <HAL_RCC_OscConfig+0x308>
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b18      	cmp	r3, #24
 8005134:	d13a      	bne.n	80051ac <HAL_RCC_OscConfig+0x374>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d135      	bne.n	80051ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005140:	4b7b      	ldr	r3, [pc, #492]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_RCC_OscConfig+0x320>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	2b80      	cmp	r3, #128	@ 0x80
 8005152:	d001      	beq.n	8005158 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e2c1      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005158:	f7fd f9fc 	bl	8002554 <HAL_GetREVID>
 800515c:	4603      	mov	r3, r0
 800515e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005162:	4293      	cmp	r3, r2
 8005164:	d817      	bhi.n	8005196 <HAL_RCC_OscConfig+0x35e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	2b20      	cmp	r3, #32
 800516c:	d108      	bne.n	8005180 <HAL_RCC_OscConfig+0x348>
 800516e:	4b70      	ldr	r3, [pc, #448]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005176:	4a6e      	ldr	r2, [pc, #440]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005178:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800517c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800517e:	e075      	b.n	800526c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005180:	4b6b      	ldr	r3, [pc, #428]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	069b      	lsls	r3, r3, #26
 800518e:	4968      	ldr	r1, [pc, #416]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005190:	4313      	orrs	r3, r2
 8005192:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005194:	e06a      	b.n	800526c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005196:	4b66      	ldr	r3, [pc, #408]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	4962      	ldr	r1, [pc, #392]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051aa:	e05f      	b.n	800526c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d042      	beq.n	800523a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80051ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fd f998 	bl	80024f4 <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051c8:	f7fd f994 	bl	80024f4 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e280      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051da:	4b55      	ldr	r3, [pc, #340]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051e6:	f7fd f9b5 	bl	8002554 <HAL_GetREVID>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d817      	bhi.n	8005224 <HAL_RCC_OscConfig+0x3ec>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d108      	bne.n	800520e <HAL_RCC_OscConfig+0x3d6>
 80051fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005204:	4a4a      	ldr	r2, [pc, #296]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005206:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800520a:	6053      	str	r3, [r2, #4]
 800520c:	e02e      	b.n	800526c <HAL_RCC_OscConfig+0x434>
 800520e:	4b48      	ldr	r3, [pc, #288]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	069b      	lsls	r3, r3, #26
 800521c:	4944      	ldr	r1, [pc, #272]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 800521e:	4313      	orrs	r3, r2
 8005220:	604b      	str	r3, [r1, #4]
 8005222:	e023      	b.n	800526c <HAL_RCC_OscConfig+0x434>
 8005224:	4b42      	ldr	r3, [pc, #264]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	493f      	ldr	r1, [pc, #252]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005234:	4313      	orrs	r3, r2
 8005236:	60cb      	str	r3, [r1, #12]
 8005238:	e018      	b.n	800526c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800523a:	4b3d      	ldr	r3, [pc, #244]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a3c      	ldr	r2, [pc, #240]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fd f955 	bl	80024f4 <HAL_GetTick>
 800524a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800524e:	f7fd f951 	bl	80024f4 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e23d      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005260:	4b33      	ldr	r3, [pc, #204]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f0      	bne.n	800524e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d036      	beq.n	80052e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d019      	beq.n	80052b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005280:	4b2b      	ldr	r3, [pc, #172]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005284:	4a2a      	ldr	r2, [pc, #168]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7fd f932 	bl	80024f4 <HAL_GetTick>
 8005290:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005294:	f7fd f92e 	bl	80024f4 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e21a      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052a6:	4b22      	ldr	r3, [pc, #136]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80052a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x45c>
 80052b2:	e018      	b.n	80052e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80052b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80052ba:	f023 0301 	bic.w	r3, r3, #1
 80052be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fd f918 	bl	80024f4 <HAL_GetTick>
 80052c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c8:	f7fd f914 	bl	80024f4 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e200      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052da:	4b15      	ldr	r3, [pc, #84]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80052dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d039      	beq.n	8005366 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01c      	beq.n	8005334 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005300:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005304:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005306:	f7fd f8f5 	bl	80024f4 <HAL_GetTick>
 800530a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800530e:	f7fd f8f1 	bl	80024f4 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e1dd      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005320:	4b03      	ldr	r3, [pc, #12]	@ (8005330 <HAL_RCC_OscConfig+0x4f8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x4d6>
 800532c:	e01b      	b.n	8005366 <HAL_RCC_OscConfig+0x52e>
 800532e:	bf00      	nop
 8005330:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005334:	4b9b      	ldr	r3, [pc, #620]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a9a      	ldr	r2, [pc, #616]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800533a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800533e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005340:	f7fd f8d8 	bl	80024f4 <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005348:	f7fd f8d4 	bl	80024f4 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e1c0      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800535a:	4b92      	ldr	r3, [pc, #584]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8081 	beq.w	8005476 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005374:	4b8c      	ldr	r3, [pc, #560]	@ (80055a8 <HAL_RCC_OscConfig+0x770>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a8b      	ldr	r2, [pc, #556]	@ (80055a8 <HAL_RCC_OscConfig+0x770>)
 800537a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005380:	f7fd f8b8 	bl	80024f4 <HAL_GetTick>
 8005384:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005388:	f7fd f8b4 	bl	80024f4 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	@ 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e1a0      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800539a:	4b83      	ldr	r3, [pc, #524]	@ (80055a8 <HAL_RCC_OscConfig+0x770>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d106      	bne.n	80053bc <HAL_RCC_OscConfig+0x584>
 80053ae:	4b7d      	ldr	r3, [pc, #500]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b2:	4a7c      	ldr	r2, [pc, #496]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ba:	e02d      	b.n	8005418 <HAL_RCC_OscConfig+0x5e0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10c      	bne.n	80053de <HAL_RCC_OscConfig+0x5a6>
 80053c4:	4b77      	ldr	r3, [pc, #476]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c8:	4a76      	ldr	r2, [pc, #472]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d0:	4b74      	ldr	r3, [pc, #464]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d4:	4a73      	ldr	r2, [pc, #460]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053d6:	f023 0304 	bic.w	r3, r3, #4
 80053da:	6713      	str	r3, [r2, #112]	@ 0x70
 80053dc:	e01c      	b.n	8005418 <HAL_RCC_OscConfig+0x5e0>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0x5c8>
 80053e6:	4b6f      	ldr	r3, [pc, #444]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ea:	4a6e      	ldr	r2, [pc, #440]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053ec:	f043 0304 	orr.w	r3, r3, #4
 80053f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f2:	4b6c      	ldr	r3, [pc, #432]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f6:	4a6b      	ldr	r2, [pc, #428]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053fe:	e00b      	b.n	8005418 <HAL_RCC_OscConfig+0x5e0>
 8005400:	4b68      	ldr	r3, [pc, #416]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005404:	4a67      	ldr	r2, [pc, #412]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	6713      	str	r3, [r2, #112]	@ 0x70
 800540c:	4b65      	ldr	r3, [pc, #404]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005410:	4a64      	ldr	r2, [pc, #400]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005412:	f023 0304 	bic.w	r3, r3, #4
 8005416:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d015      	beq.n	800544c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fd f868 	bl	80024f4 <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fd f864 	bl	80024f4 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e14e      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800543e:	4b59      	ldr	r3, [pc, #356]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0ee      	beq.n	8005428 <HAL_RCC_OscConfig+0x5f0>
 800544a:	e014      	b.n	8005476 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fd f852 	bl	80024f4 <HAL_GetTick>
 8005450:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005452:	e00a      	b.n	800546a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005454:	f7fd f84e 	bl	80024f4 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e138      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800546a:	4b4e      	ldr	r3, [pc, #312]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1ee      	bne.n	8005454 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 812d 	beq.w	80056da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005480:	4b48      	ldr	r3, [pc, #288]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005488:	2b18      	cmp	r3, #24
 800548a:	f000 80bd 	beq.w	8005608 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	2b02      	cmp	r3, #2
 8005494:	f040 809e 	bne.w	80055d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005498:	4b42      	ldr	r3, [pc, #264]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a41      	ldr	r2, [pc, #260]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800549e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fd f826 	bl	80024f4 <HAL_GetTick>
 80054a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fd f822 	bl	80024f4 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e10e      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054be:	4b39      	ldr	r3, [pc, #228]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ca:	4b36      	ldr	r3, [pc, #216]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80054cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054ce:	4b37      	ldr	r3, [pc, #220]	@ (80055ac <HAL_RCC_OscConfig+0x774>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054da:	0112      	lsls	r2, r2, #4
 80054dc:	430a      	orrs	r2, r1
 80054de:	4931      	ldr	r1, [pc, #196]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e8:	3b01      	subs	r3, #1
 80054ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f2:	3b01      	subs	r3, #1
 80054f4:	025b      	lsls	r3, r3, #9
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fe:	3b01      	subs	r3, #1
 8005500:	041b      	lsls	r3, r3, #16
 8005502:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550c:	3b01      	subs	r3, #1
 800550e:	061b      	lsls	r3, r3, #24
 8005510:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005514:	4923      	ldr	r1, [pc, #140]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800551a:	4b22      	ldr	r3, [pc, #136]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	4a21      	ldr	r2, [pc, #132]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005520:	f023 0301 	bic.w	r3, r3, #1
 8005524:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005526:	4b1f      	ldr	r3, [pc, #124]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800552a:	4b21      	ldr	r3, [pc, #132]	@ (80055b0 <HAL_RCC_OscConfig+0x778>)
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005532:	00d2      	lsls	r2, r2, #3
 8005534:	491b      	ldr	r1, [pc, #108]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800553a:	4b1a      	ldr	r3, [pc, #104]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800553c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553e:	f023 020c 	bic.w	r2, r3, #12
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	4917      	ldr	r1, [pc, #92]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005548:	4313      	orrs	r3, r2
 800554a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800554c:	4b15      	ldr	r3, [pc, #84]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	f023 0202 	bic.w	r2, r3, #2
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005558:	4912      	ldr	r1, [pc, #72]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800555e:	4b11      	ldr	r3, [pc, #68]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	4a10      	ldr	r2, [pc, #64]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556a:	4b0e      	ldr	r3, [pc, #56]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	4a0d      	ldr	r2, [pc, #52]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005576:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557a:	4a0a      	ldr	r2, [pc, #40]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 800557c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005582:	4b08      	ldr	r3, [pc, #32]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005586:	4a07      	ldr	r2, [pc, #28]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800558e:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a04      	ldr	r2, [pc, #16]	@ (80055a4 <HAL_RCC_OscConfig+0x76c>)
 8005594:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559a:	f7fc ffab 	bl	80024f4 <HAL_GetTick>
 800559e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055a0:	e011      	b.n	80055c6 <HAL_RCC_OscConfig+0x78e>
 80055a2:	bf00      	nop
 80055a4:	58024400 	.word	0x58024400
 80055a8:	58024800 	.word	0x58024800
 80055ac:	fffffc0c 	.word	0xfffffc0c
 80055b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fc ff9e 	bl	80024f4 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e08a      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055c6:	4b47      	ldr	r3, [pc, #284]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x77c>
 80055d2:	e082      	b.n	80056da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d4:	4b43      	ldr	r3, [pc, #268]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a42      	ldr	r2, [pc, #264]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 80055da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fc ff88 	bl	80024f4 <HAL_GetTick>
 80055e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e8:	f7fc ff84 	bl	80024f4 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e070      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055fa:	4b3a      	ldr	r3, [pc, #232]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f0      	bne.n	80055e8 <HAL_RCC_OscConfig+0x7b0>
 8005606:	e068      	b.n	80056da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005608:	4b36      	ldr	r3, [pc, #216]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800560e:	4b35      	ldr	r3, [pc, #212]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005612:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	2b01      	cmp	r3, #1
 800561a:	d031      	beq.n	8005680 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f003 0203 	and.w	r2, r3, #3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d12a      	bne.n	8005680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005636:	429a      	cmp	r2, r3
 8005638:	d122      	bne.n	8005680 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005646:	429a      	cmp	r2, r3
 8005648:	d11a      	bne.n	8005680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	0a5b      	lsrs	r3, r3, #9
 800564e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005656:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005658:	429a      	cmp	r2, r3
 800565a:	d111      	bne.n	8005680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	0c1b      	lsrs	r3, r3, #16
 8005660:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800566a:	429a      	cmp	r2, r3
 800566c:	d108      	bne.n	8005680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	0e1b      	lsrs	r3, r3, #24
 8005672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e02b      	b.n	80056dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005684:	4b17      	ldr	r3, [pc, #92]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 8005686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005688:	08db      	lsrs	r3, r3, #3
 800568a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800568e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	429a      	cmp	r2, r3
 8005698:	d01f      	beq.n	80056da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	4a11      	ldr	r2, [pc, #68]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 80056a0:	f023 0301 	bic.w	r3, r3, #1
 80056a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056a6:	f7fc ff25 	bl	80024f4 <HAL_GetTick>
 80056aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80056ac:	bf00      	nop
 80056ae:	f7fc ff21 	bl	80024f4 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d0f9      	beq.n	80056ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056ba:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 80056bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056be:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <HAL_RCC_OscConfig+0x8b0>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056c6:	00d2      	lsls	r2, r2, #3
 80056c8:	4906      	ldr	r1, [pc, #24]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d2:	4a04      	ldr	r2, [pc, #16]	@ (80056e4 <HAL_RCC_OscConfig+0x8ac>)
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3730      	adds	r7, #48	@ 0x30
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	58024400 	.word	0x58024400
 80056e8:	ffff0007 	.word	0xffff0007

080056ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e19c      	b.n	8005a3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005700:	4b8a      	ldr	r3, [pc, #552]	@ (800592c <HAL_RCC_ClockConfig+0x240>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d910      	bls.n	8005730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b87      	ldr	r3, [pc, #540]	@ (800592c <HAL_RCC_ClockConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 020f 	bic.w	r2, r3, #15
 8005716:	4985      	ldr	r1, [pc, #532]	@ (800592c <HAL_RCC_ClockConfig+0x240>)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b83      	ldr	r3, [pc, #524]	@ (800592c <HAL_RCC_ClockConfig+0x240>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e184      	b.n	8005a3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d010      	beq.n	800575e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	4b7b      	ldr	r3, [pc, #492]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005748:	429a      	cmp	r2, r3
 800574a:	d908      	bls.n	800575e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800574c:	4b78      	ldr	r3, [pc, #480]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	4975      	ldr	r1, [pc, #468]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 800575a:	4313      	orrs	r3, r2
 800575c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d010      	beq.n	800578c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	4b70      	ldr	r3, [pc, #448]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005776:	429a      	cmp	r2, r3
 8005778:	d908      	bls.n	800578c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800577a:	4b6d      	ldr	r3, [pc, #436]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	496a      	ldr	r1, [pc, #424]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 8005788:	4313      	orrs	r3, r2
 800578a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	d010      	beq.n	80057ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	4b64      	ldr	r3, [pc, #400]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d908      	bls.n	80057ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057a8:	4b61      	ldr	r3, [pc, #388]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	495e      	ldr	r1, [pc, #376]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d010      	beq.n	80057e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69da      	ldr	r2, [r3, #28]
 80057ca:	4b59      	ldr	r3, [pc, #356]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d908      	bls.n	80057e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057d6:	4b56      	ldr	r3, [pc, #344]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	4953      	ldr	r1, [pc, #332]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d010      	beq.n	8005816 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	429a      	cmp	r2, r3
 8005802:	d908      	bls.n	8005816 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005804:	4b4a      	ldr	r3, [pc, #296]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f023 020f 	bic.w	r2, r3, #15
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4947      	ldr	r1, [pc, #284]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 8005812:	4313      	orrs	r3, r2
 8005814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d055      	beq.n	80058ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005822:	4b43      	ldr	r3, [pc, #268]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	4940      	ldr	r1, [pc, #256]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 8005830:	4313      	orrs	r3, r2
 8005832:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d107      	bne.n	800584c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800583c:	4b3c      	ldr	r3, [pc, #240]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d121      	bne.n	800588c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0f6      	b.n	8005a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b03      	cmp	r3, #3
 8005852:	d107      	bne.n	8005864 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005854:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d115      	bne.n	800588c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0ea      	b.n	8005a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d107      	bne.n	800587c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800586c:	4b30      	ldr	r3, [pc, #192]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0de      	b.n	8005a3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800587c:	4b2c      	ldr	r3, [pc, #176]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0d6      	b.n	8005a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800588c:	4b28      	ldr	r3, [pc, #160]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f023 0207 	bic.w	r2, r3, #7
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4925      	ldr	r1, [pc, #148]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 800589a:	4313      	orrs	r3, r2
 800589c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800589e:	f7fc fe29 	bl	80024f4 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a4:	e00a      	b.n	80058bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a6:	f7fc fe25 	bl	80024f4 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e0be      	b.n	8005a3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d1eb      	bne.n	80058a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d010      	beq.n	80058fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	4b14      	ldr	r3, [pc, #80]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d208      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ea:	4b11      	ldr	r3, [pc, #68]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f023 020f 	bic.w	r2, r3, #15
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	490e      	ldr	r1, [pc, #56]	@ (8005930 <HAL_RCC_ClockConfig+0x244>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058fc:	4b0b      	ldr	r3, [pc, #44]	@ (800592c <HAL_RCC_ClockConfig+0x240>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d214      	bcs.n	8005934 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590a:	4b08      	ldr	r3, [pc, #32]	@ (800592c <HAL_RCC_ClockConfig+0x240>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f023 020f 	bic.w	r2, r3, #15
 8005912:	4906      	ldr	r1, [pc, #24]	@ (800592c <HAL_RCC_ClockConfig+0x240>)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	4313      	orrs	r3, r2
 8005918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591a:	4b04      	ldr	r3, [pc, #16]	@ (800592c <HAL_RCC_ClockConfig+0x240>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e086      	b.n	8005a3a <HAL_RCC_ClockConfig+0x34e>
 800592c:	52002000 	.word	0x52002000
 8005930:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d010      	beq.n	8005962 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	4b3f      	ldr	r3, [pc, #252]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800594c:	429a      	cmp	r2, r3
 800594e:	d208      	bcs.n	8005962 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005950:	4b3c      	ldr	r3, [pc, #240]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	4939      	ldr	r1, [pc, #228]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 800595e:	4313      	orrs	r3, r2
 8005960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d010      	beq.n	8005990 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695a      	ldr	r2, [r3, #20]
 8005972:	4b34      	ldr	r3, [pc, #208]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800597a:	429a      	cmp	r2, r3
 800597c:	d208      	bcs.n	8005990 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800597e:	4b31      	ldr	r3, [pc, #196]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	492e      	ldr	r1, [pc, #184]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 800598c:	4313      	orrs	r3, r2
 800598e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d010      	beq.n	80059be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	4b28      	ldr	r3, [pc, #160]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d208      	bcs.n	80059be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059ac:	4b25      	ldr	r3, [pc, #148]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	4922      	ldr	r1, [pc, #136]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d208      	bcs.n	80059ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059da:	4b1a      	ldr	r3, [pc, #104]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	4917      	ldr	r1, [pc, #92]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80059ec:	f000 f844 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b14      	ldr	r3, [pc, #80]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	4912      	ldr	r1, [pc, #72]	@ (8005a48 <HAL_RCC_ClockConfig+0x35c>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
 8005a08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005a44 <HAL_RCC_ClockConfig+0x358>)
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	4a0d      	ldr	r2, [pc, #52]	@ (8005a48 <HAL_RCC_ClockConfig+0x35c>)
 8005a14:	5cd3      	ldrb	r3, [r2, r3]
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a20:	4a0a      	ldr	r2, [pc, #40]	@ (8005a4c <HAL_RCC_ClockConfig+0x360>)
 8005a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a24:	4a0a      	ldr	r2, [pc, #40]	@ (8005a50 <HAL_RCC_ClockConfig+0x364>)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <HAL_RCC_ClockConfig+0x368>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fc fd16 	bl	8002460 <HAL_InitTick>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	58024400 	.word	0x58024400
 8005a48:	08015dd4 	.word	0x08015dd4
 8005a4c:	24000020 	.word	0x24000020
 8005a50:	2400001c 	.word	0x2400001c
 8005a54:	24000024 	.word	0x24000024

08005a58 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005a5c:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <HAL_RCC_EnableCSS+0x1c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a04      	ldr	r2, [pc, #16]	@ (8005a74 <HAL_RCC_EnableCSS+0x1c>)
 8005a62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a66:	6013      	str	r3, [r2, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	58024400 	.word	0x58024400

08005a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a7e:	4bb3      	ldr	r3, [pc, #716]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a86:	2b18      	cmp	r3, #24
 8005a88:	f200 8155 	bhi.w	8005d36 <HAL_RCC_GetSysClockFreq+0x2be>
 8005a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005af9 	.word	0x08005af9
 8005a98:	08005d37 	.word	0x08005d37
 8005a9c:	08005d37 	.word	0x08005d37
 8005aa0:	08005d37 	.word	0x08005d37
 8005aa4:	08005d37 	.word	0x08005d37
 8005aa8:	08005d37 	.word	0x08005d37
 8005aac:	08005d37 	.word	0x08005d37
 8005ab0:	08005d37 	.word	0x08005d37
 8005ab4:	08005b1f 	.word	0x08005b1f
 8005ab8:	08005d37 	.word	0x08005d37
 8005abc:	08005d37 	.word	0x08005d37
 8005ac0:	08005d37 	.word	0x08005d37
 8005ac4:	08005d37 	.word	0x08005d37
 8005ac8:	08005d37 	.word	0x08005d37
 8005acc:	08005d37 	.word	0x08005d37
 8005ad0:	08005d37 	.word	0x08005d37
 8005ad4:	08005b25 	.word	0x08005b25
 8005ad8:	08005d37 	.word	0x08005d37
 8005adc:	08005d37 	.word	0x08005d37
 8005ae0:	08005d37 	.word	0x08005d37
 8005ae4:	08005d37 	.word	0x08005d37
 8005ae8:	08005d37 	.word	0x08005d37
 8005aec:	08005d37 	.word	0x08005d37
 8005af0:	08005d37 	.word	0x08005d37
 8005af4:	08005b2b 	.word	0x08005b2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005af8:	4b94      	ldr	r3, [pc, #592]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b04:	4b91      	ldr	r3, [pc, #580]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	08db      	lsrs	r3, r3, #3
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	4a90      	ldr	r2, [pc, #576]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b16:	e111      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b18:	4b8d      	ldr	r3, [pc, #564]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b1a:	61bb      	str	r3, [r7, #24]
      break;
 8005b1c:	e10e      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b20:	61bb      	str	r3, [r7, #24]
      break;
 8005b22:	e10b      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b24:	4b8c      	ldr	r3, [pc, #560]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b26:	61bb      	str	r3, [r7, #24]
      break;
 8005b28:	e108      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b2a:	4b88      	ldr	r3, [pc, #544]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b34:	4b85      	ldr	r3, [pc, #532]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b38:	091b      	lsrs	r3, r3, #4
 8005b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b40:	4b82      	ldr	r3, [pc, #520]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b4a:	4b80      	ldr	r3, [pc, #512]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4e:	08db      	lsrs	r3, r3, #3
 8005b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	fb02 f303 	mul.w	r3, r2, r3
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80e1 	beq.w	8005d30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	f000 8083 	beq.w	8005c7c <HAL_RCC_GetSysClockFreq+0x204>
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	f200 80a1 	bhi.w	8005cc0 <HAL_RCC_GetSysClockFreq+0x248>
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_RCC_GetSysClockFreq+0x114>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d056      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b8a:	e099      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d02d      	beq.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b98:	4b6c      	ldr	r3, [pc, #432]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	08db      	lsrs	r3, r3, #3
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	4a6b      	ldr	r2, [pc, #428]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc2:	4b62      	ldr	r3, [pc, #392]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bd6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005bf2:	e087      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005d60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c06:	4b51      	ldr	r3, [pc, #324]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c36:	e065      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	4b40      	ldr	r3, [pc, #256]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c7a:	e043      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005d68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ca2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cbe:	e021      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ce6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d04:	4b11      	ldr	r3, [pc, #68]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d08:	0a5b      	lsrs	r3, r3, #9
 8005d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d0e:	3301      	adds	r3, #1
 8005d10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d28:	ee17 3a90 	vmov	r3, s15
 8005d2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d2e:	e005      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61bb      	str	r3, [r7, #24]
      break;
 8005d34:	e002      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d36:	4b07      	ldr	r3, [pc, #28]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d38:	61bb      	str	r3, [r7, #24]
      break;
 8005d3a:	bf00      	nop
  }

  return sysclockfreq;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3724      	adds	r7, #36	@ 0x24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	58024400 	.word	0x58024400
 8005d50:	03d09000 	.word	0x03d09000
 8005d54:	003d0900 	.word	0x003d0900
 8005d58:	017d7840 	.word	0x017d7840
 8005d5c:	46000000 	.word	0x46000000
 8005d60:	4c742400 	.word	0x4c742400
 8005d64:	4a742400 	.word	0x4a742400
 8005d68:	4bbebc20 	.word	0x4bbebc20

08005d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d72:	f7ff fe81 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8005d76:	4602      	mov	r2, r0
 8005d78:	4b10      	ldr	r3, [pc, #64]	@ (8005dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	490f      	ldr	r1, [pc, #60]	@ (8005dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d84:	5ccb      	ldrb	r3, [r1, r3]
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d90:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	4a09      	ldr	r2, [pc, #36]	@ (8005dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d9a:	5cd3      	ldrb	r3, [r2, r3]
 8005d9c:	f003 031f 	and.w	r3, r3, #31
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	fa22 f303 	lsr.w	r3, r2, r3
 8005da6:	4a07      	ldr	r2, [pc, #28]	@ (8005dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005da8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005daa:	4a07      	ldr	r2, [pc, #28]	@ (8005dc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005db0:	4b04      	ldr	r3, [pc, #16]	@ (8005dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005db2:	681b      	ldr	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	58024400 	.word	0x58024400
 8005dc0:	08015dd4 	.word	0x08015dd4
 8005dc4:	24000020 	.word	0x24000020
 8005dc8:	2400001c 	.word	0x2400001c

08005dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005dd0:	f7ff ffcc 	bl	8005d6c <HAL_RCC_GetHCLKFreq>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	4b06      	ldr	r3, [pc, #24]	@ (8005df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	4904      	ldr	r1, [pc, #16]	@ (8005df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005de2:	5ccb      	ldrb	r3, [r1, r3]
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	58024400 	.word	0x58024400
 8005df4:	08015dd4 	.word	0x08015dd4

08005df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005dfc:	f7ff ffb6 	bl	8005d6c <HAL_RCC_GetHCLKFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b06      	ldr	r3, [pc, #24]	@ (8005e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	4904      	ldr	r1, [pc, #16]	@ (8005e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	08015dd4 	.word	0x08015dd4

08005e24 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005e28:	4b07      	ldr	r3, [pc, #28]	@ (8005e48 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e34:	d105      	bne.n	8005e42 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005e36:	f000 f809 	bl	8005e4c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005e3a:	4b03      	ldr	r3, [pc, #12]	@ (8005e48 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e40:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
 8005e42:	bf00      	nop
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	58024400 	.word	0x58024400

08005e4c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e60:	b0ca      	sub	sp, #296	@ 0x128
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005e80:	2500      	movs	r5, #0
 8005e82:	ea54 0305 	orrs.w	r3, r4, r5
 8005e86:	d049      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e92:	d02f      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e98:	d828      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e9e:	d01a      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ea0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ea4:	d822      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eae:	d007      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005eb0:	e01c      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb2:	4bb8      	ldr	r3, [pc, #736]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	4ab7      	ldr	r2, [pc, #732]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ebe:	e01a      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f002 fb61 	bl	8008590 <RCCEx_PLL2_Config>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ed4:	e00f      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eda:	3328      	adds	r3, #40	@ 0x28
 8005edc:	2102      	movs	r1, #2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f002 fc08 	bl	80086f4 <RCCEx_PLL3_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005eea:	e004      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005efe:	4ba5      	ldr	r3, [pc, #660]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f0c:	4aa1      	ldr	r2, [pc, #644]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f12:	e003      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005f28:	f04f 0900 	mov.w	r9, #0
 8005f2c:	ea58 0309 	orrs.w	r3, r8, r9
 8005f30:	d047      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d82a      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f59 	.word	0x08005f59
 8005f48:	08005f67 	.word	0x08005f67
 8005f4c:	08005f7d 	.word	0x08005f7d
 8005f50:	08005f9b 	.word	0x08005f9b
 8005f54:	08005f9b 	.word	0x08005f9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f58:	4b8e      	ldr	r3, [pc, #568]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	4a8d      	ldr	r2, [pc, #564]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f64:	e01a      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f002 fb0e 	bl	8008590 <RCCEx_PLL2_Config>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f7a:	e00f      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f80:	3328      	adds	r3, #40	@ 0x28
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f002 fbb5 	bl	80086f4 <RCCEx_PLL3_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f90:	e004      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f98:	e000      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fa4:	4b7b      	ldr	r3, [pc, #492]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa8:	f023 0107 	bic.w	r1, r3, #7
 8005fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb2:	4a78      	ldr	r2, [pc, #480]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fb8:	e003      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005fce:	f04f 0b00 	mov.w	fp, #0
 8005fd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fd6:	d04c      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe2:	d030      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005fe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe8:	d829      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fea:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fec:	d02d      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005fee:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ff0:	d825      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ff2:	2b80      	cmp	r3, #128	@ 0x80
 8005ff4:	d018      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005ff6:	2b80      	cmp	r3, #128	@ 0x80
 8005ff8:	d821      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005ffe:	2b40      	cmp	r3, #64	@ 0x40
 8006000:	d007      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006002:	e01c      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006004:	4b63      	ldr	r3, [pc, #396]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	4a62      	ldr	r2, [pc, #392]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800600a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800600e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006010:	e01c      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006016:	3308      	adds	r3, #8
 8006018:	2100      	movs	r1, #0
 800601a:	4618      	mov	r0, r3
 800601c:	f002 fab8 	bl	8008590 <RCCEx_PLL2_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006026:	e011      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602c:	3328      	adds	r3, #40	@ 0x28
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f002 fb5f 	bl	80086f4 <RCCEx_PLL3_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800603c:	e006      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006044:	e002      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006046:	bf00      	nop
 8006048:	e000      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800604a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006054:	4b4f      	ldr	r3, [pc, #316]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006058:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006062:	4a4c      	ldr	r2, [pc, #304]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006064:	430b      	orrs	r3, r1
 8006066:	6513      	str	r3, [r2, #80]	@ 0x50
 8006068:	e003      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800607e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006082:	2300      	movs	r3, #0
 8006084:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006088:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800608c:	460b      	mov	r3, r1
 800608e:	4313      	orrs	r3, r2
 8006090:	d053      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006096:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800609a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800609e:	d035      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80060a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060a4:	d82e      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80060a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80060aa:	d031      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80060ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80060b0:	d828      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80060b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060b6:	d01a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 80060b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060bc:	d822      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80060c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060c6:	d007      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80060c8:	e01c      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ca:	4b32      	ldr	r3, [pc, #200]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ce:	4a31      	ldr	r2, [pc, #196]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060d6:	e01c      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060dc:	3308      	adds	r3, #8
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f002 fa55 	bl	8008590 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060ec:	e011      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f2:	3328      	adds	r3, #40	@ 0x28
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f002 fafc 	bl	80086f4 <RCCEx_PLL3_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006102:	e006      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800610a:	e002      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800610c:	bf00      	nop
 800610e:	e000      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800611a:	4b1e      	ldr	r3, [pc, #120]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800611c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800612a:	4a1a      	ldr	r2, [pc, #104]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800612c:	430b      	orrs	r3, r1
 800612e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006130:	e003      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006146:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800614a:	2300      	movs	r3, #0
 800614c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006150:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006154:	460b      	mov	r3, r1
 8006156:	4313      	orrs	r3, r2
 8006158:	d056      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800615a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006162:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006166:	d038      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006168:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800616c:	d831      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800616e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006172:	d034      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006174:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006178:	d82b      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800617a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800617e:	d01d      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006180:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006184:	d825      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d006      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800618a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006190:	e01f      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006192:	bf00      	nop
 8006194:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006198:	4ba2      	ldr	r3, [pc, #648]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	4aa1      	ldr	r2, [pc, #644]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061a4:	e01c      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	3308      	adds	r3, #8
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f002 f9ee 	bl	8008590 <RCCEx_PLL2_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061ba:	e011      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c0:	3328      	adds	r3, #40	@ 0x28
 80061c2:	2100      	movs	r1, #0
 80061c4:	4618      	mov	r0, r3
 80061c6:	f002 fa95 	bl	80086f4 <RCCEx_PLL3_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061d0:	e006      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061d8:	e002      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061da:	bf00      	nop
 80061dc:	e000      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10b      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061e8:	4b8e      	ldr	r3, [pc, #568]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061f8:	4a8a      	ldr	r2, [pc, #552]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061fa:	430b      	orrs	r3, r1
 80061fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80061fe:	e003      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006214:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006218:	2300      	movs	r3, #0
 800621a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800621e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006222:	460b      	mov	r3, r1
 8006224:	4313      	orrs	r3, r2
 8006226:	d03a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800622e:	2b30      	cmp	r3, #48	@ 0x30
 8006230:	d01f      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006232:	2b30      	cmp	r3, #48	@ 0x30
 8006234:	d819      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006236:	2b20      	cmp	r3, #32
 8006238:	d00c      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800623a:	2b20      	cmp	r3, #32
 800623c:	d815      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d019      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006242:	2b10      	cmp	r3, #16
 8006244:	d111      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006246:	4b77      	ldr	r3, [pc, #476]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624a:	4a76      	ldr	r2, [pc, #472]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800624c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006250:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006252:	e011      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006258:	3308      	adds	r3, #8
 800625a:	2102      	movs	r1, #2
 800625c:	4618      	mov	r0, r3
 800625e:	f002 f997 	bl	8008590 <RCCEx_PLL2_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006268:	e006      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006270:	e002      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006280:	4b68      	ldr	r3, [pc, #416]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006284:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800628e:	4a65      	ldr	r2, [pc, #404]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006290:	430b      	orrs	r3, r1
 8006292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006294:	e003      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80062aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80062ae:	2300      	movs	r3, #0
 80062b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80062b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4313      	orrs	r3, r2
 80062bc:	d051      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c8:	d035      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80062ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ce:	d82e      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062d4:	d031      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80062d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062da:	d828      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e0:	d01a      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80062e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e6:	d822      	bhi.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f0:	d007      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80062f2:	e01c      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f4:	4b4b      	ldr	r3, [pc, #300]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f8:	4a4a      	ldr	r2, [pc, #296]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006300:	e01c      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006306:	3308      	adds	r3, #8
 8006308:	2100      	movs	r1, #0
 800630a:	4618      	mov	r0, r3
 800630c:	f002 f940 	bl	8008590 <RCCEx_PLL2_Config>
 8006310:	4603      	mov	r3, r0
 8006312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006316:	e011      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631c:	3328      	adds	r3, #40	@ 0x28
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f002 f9e7 	bl	80086f4 <RCCEx_PLL3_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800632c:	e006      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006334:	e002      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800633a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006344:	4b37      	ldr	r3, [pc, #220]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006348:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800634c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006352:	4a34      	ldr	r2, [pc, #208]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006354:	430b      	orrs	r3, r1
 8006356:	6513      	str	r3, [r2, #80]	@ 0x50
 8006358:	e003      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800635e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800636e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006372:	2300      	movs	r3, #0
 8006374:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006378:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800637c:	460b      	mov	r3, r1
 800637e:	4313      	orrs	r3, r2
 8006380:	d056      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006386:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800638c:	d033      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800638e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006392:	d82c      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006394:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006398:	d02f      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800639a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800639e:	d826      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063a4:	d02b      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80063a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063aa:	d820      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063b0:	d012      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80063b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063b6:	d81a      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d022      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80063bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c0:	d115      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	3308      	adds	r3, #8
 80063c8:	2101      	movs	r1, #1
 80063ca:	4618      	mov	r0, r3
 80063cc:	f002 f8e0 	bl	8008590 <RCCEx_PLL2_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063d6:	e015      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063dc:	3328      	adds	r3, #40	@ 0x28
 80063de:	2101      	movs	r1, #1
 80063e0:	4618      	mov	r0, r3
 80063e2:	f002 f987 	bl	80086f4 <RCCEx_PLL3_Config>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063ec:	e00a      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063f4:	e006      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063f6:	bf00      	nop
 80063f8:	e004      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063fa:	bf00      	nop
 80063fc:	e002      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063fe:	bf00      	nop
 8006400:	e000      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10d      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800640c:	4b05      	ldr	r3, [pc, #20]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800640e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006410:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800641a:	4a02      	ldr	r2, [pc, #8]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800641c:	430b      	orrs	r3, r1
 800641e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006420:	e006      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006422:	bf00      	nop
 8006424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800643c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006440:	2300      	movs	r3, #0
 8006442:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006446:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800644a:	460b      	mov	r3, r1
 800644c:	4313      	orrs	r3, r2
 800644e:	d055      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006458:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800645c:	d033      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800645e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006462:	d82c      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006468:	d02f      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646e:	d826      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006470:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006474:	d02b      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006476:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800647a:	d820      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800647c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006480:	d012      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006486:	d81a      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d022      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800648c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006490:	d115      	bne.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006496:	3308      	adds	r3, #8
 8006498:	2101      	movs	r1, #1
 800649a:	4618      	mov	r0, r3
 800649c:	f002 f878 	bl	8008590 <RCCEx_PLL2_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064a6:	e015      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ac:	3328      	adds	r3, #40	@ 0x28
 80064ae:	2101      	movs	r1, #1
 80064b0:	4618      	mov	r0, r3
 80064b2:	f002 f91f 	bl	80086f4 <RCCEx_PLL3_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064bc:	e00a      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064c4:	e006      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064c6:	bf00      	nop
 80064c8:	e004      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064ca:	bf00      	nop
 80064cc:	e002      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064ce:	bf00      	nop
 80064d0:	e000      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80064d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064dc:	4ba3      	ldr	r3, [pc, #652]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064ec:	4a9f      	ldr	r2, [pc, #636]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064ee:	430b      	orrs	r3, r1
 80064f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80064f2:	e003      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006508:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800650c:	2300      	movs	r3, #0
 800650e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006516:	460b      	mov	r3, r1
 8006518:	4313      	orrs	r3, r2
 800651a:	d037      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800651c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006526:	d00e      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800652c:	d816      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006536:	d111      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006538:	4b8c      	ldr	r3, [pc, #560]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	4a8b      	ldr	r2, [pc, #556]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800653e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006544:	e00f      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	3308      	adds	r3, #8
 800654c:	2101      	movs	r1, #1
 800654e:	4618      	mov	r0, r3
 8006550:	f002 f81e 	bl	8008590 <RCCEx_PLL2_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800655a:	e004      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800656e:	4b7f      	ldr	r3, [pc, #508]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006572:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657c:	4a7b      	ldr	r2, [pc, #492]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800657e:	430b      	orrs	r3, r1
 8006580:	6513      	str	r3, [r2, #80]	@ 0x50
 8006582:	e003      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800659c:	2300      	movs	r3, #0
 800659e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	d039      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d81c      	bhi.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80065b6:	a201      	add	r2, pc, #4	@ (adr r2, 80065bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065f9 	.word	0x080065f9
 80065c0:	080065cd 	.word	0x080065cd
 80065c4:	080065db 	.word	0x080065db
 80065c8:	080065f9 	.word	0x080065f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065cc:	4b67      	ldr	r3, [pc, #412]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	4a66      	ldr	r2, [pc, #408]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065d8:	e00f      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	3308      	adds	r3, #8
 80065e0:	2102      	movs	r1, #2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 ffd4 	bl	8008590 <RCCEx_PLL2_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065ee:	e004      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065f6:	e000      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80065f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006602:	4b5a      	ldr	r3, [pc, #360]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006606:	f023 0103 	bic.w	r1, r3, #3
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006610:	4a56      	ldr	r2, [pc, #344]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006612:	430b      	orrs	r3, r1
 8006614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006616:	e003      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800662c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006630:	2300      	movs	r3, #0
 8006632:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006636:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800663a:	460b      	mov	r3, r1
 800663c:	4313      	orrs	r3, r2
 800663e:	f000 809f 	beq.w	8006780 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006642:	4b4b      	ldr	r3, [pc, #300]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a4a      	ldr	r2, [pc, #296]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800664c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800664e:	f7fb ff51 	bl	80024f4 <HAL_GetTick>
 8006652:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006656:	e00b      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006658:	f7fb ff4c 	bl	80024f4 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b64      	cmp	r3, #100	@ 0x64
 8006666:	d903      	bls.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800666e:	e005      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006670:	4b3f      	ldr	r3, [pc, #252]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ed      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800667c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006680:	2b00      	cmp	r3, #0
 8006682:	d179      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006684:	4b39      	ldr	r3, [pc, #228]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006686:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006690:	4053      	eors	r3, r2
 8006692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006696:	2b00      	cmp	r3, #0
 8006698:	d015      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800669a:	4b34      	ldr	r3, [pc, #208]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066a6:	4b31      	ldr	r3, [pc, #196]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066aa:	4a30      	ldr	r2, [pc, #192]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066b2:	4b2e      	ldr	r3, [pc, #184]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b6:	4a2d      	ldr	r2, [pc, #180]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066be:	4a2b      	ldr	r2, [pc, #172]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d2:	d118      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7fb ff0e 	bl	80024f4 <HAL_GetTick>
 80066d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066dc:	e00d      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066de:	f7fb ff09 	bl	80024f4 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d903      	bls.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80066f8:	e005      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066fa:	4b1c      	ldr	r3, [pc, #112]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0eb      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670a:	2b00      	cmp	r3, #0
 800670c:	d129      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006712:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800671a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800671e:	d10e      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006720:	4b12      	ldr	r3, [pc, #72]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006730:	091a      	lsrs	r2, r3, #4
 8006732:	4b10      	ldr	r3, [pc, #64]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006734:	4013      	ands	r3, r2
 8006736:	4a0d      	ldr	r2, [pc, #52]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006738:	430b      	orrs	r3, r1
 800673a:	6113      	str	r3, [r2, #16]
 800673c:	e005      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800673e:	4b0b      	ldr	r3, [pc, #44]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	4a0a      	ldr	r2, [pc, #40]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006744:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006748:	6113      	str	r3, [r2, #16]
 800674a:	4b08      	ldr	r3, [pc, #32]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800674c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006752:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675a:	4a04      	ldr	r2, [pc, #16]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006760:	e00e      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800676a:	e009      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800676c:	58024400 	.word	0x58024400
 8006770:	58024800 	.word	0x58024800
 8006774:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f002 0301 	and.w	r3, r2, #1
 800678c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006790:	2300      	movs	r3, #0
 8006792:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006796:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800679a:	460b      	mov	r3, r1
 800679c:	4313      	orrs	r3, r2
 800679e:	f000 8089 	beq.w	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067a8:	2b28      	cmp	r3, #40	@ 0x28
 80067aa:	d86b      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80067ac:	a201      	add	r2, pc, #4	@ (adr r2, 80067b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b2:	bf00      	nop
 80067b4:	0800688d 	.word	0x0800688d
 80067b8:	08006885 	.word	0x08006885
 80067bc:	08006885 	.word	0x08006885
 80067c0:	08006885 	.word	0x08006885
 80067c4:	08006885 	.word	0x08006885
 80067c8:	08006885 	.word	0x08006885
 80067cc:	08006885 	.word	0x08006885
 80067d0:	08006885 	.word	0x08006885
 80067d4:	08006859 	.word	0x08006859
 80067d8:	08006885 	.word	0x08006885
 80067dc:	08006885 	.word	0x08006885
 80067e0:	08006885 	.word	0x08006885
 80067e4:	08006885 	.word	0x08006885
 80067e8:	08006885 	.word	0x08006885
 80067ec:	08006885 	.word	0x08006885
 80067f0:	08006885 	.word	0x08006885
 80067f4:	0800686f 	.word	0x0800686f
 80067f8:	08006885 	.word	0x08006885
 80067fc:	08006885 	.word	0x08006885
 8006800:	08006885 	.word	0x08006885
 8006804:	08006885 	.word	0x08006885
 8006808:	08006885 	.word	0x08006885
 800680c:	08006885 	.word	0x08006885
 8006810:	08006885 	.word	0x08006885
 8006814:	0800688d 	.word	0x0800688d
 8006818:	08006885 	.word	0x08006885
 800681c:	08006885 	.word	0x08006885
 8006820:	08006885 	.word	0x08006885
 8006824:	08006885 	.word	0x08006885
 8006828:	08006885 	.word	0x08006885
 800682c:	08006885 	.word	0x08006885
 8006830:	08006885 	.word	0x08006885
 8006834:	0800688d 	.word	0x0800688d
 8006838:	08006885 	.word	0x08006885
 800683c:	08006885 	.word	0x08006885
 8006840:	08006885 	.word	0x08006885
 8006844:	08006885 	.word	0x08006885
 8006848:	08006885 	.word	0x08006885
 800684c:	08006885 	.word	0x08006885
 8006850:	08006885 	.word	0x08006885
 8006854:	0800688d 	.word	0x0800688d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685c:	3308      	adds	r3, #8
 800685e:	2101      	movs	r1, #1
 8006860:	4618      	mov	r0, r3
 8006862:	f001 fe95 	bl	8008590 <RCCEx_PLL2_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800686c:	e00f      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800686e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006872:	3328      	adds	r3, #40	@ 0x28
 8006874:	2101      	movs	r1, #1
 8006876:	4618      	mov	r0, r3
 8006878:	f001 ff3c 	bl	80086f4 <RCCEx_PLL3_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006882:	e004      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800688a:	e000      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800688c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800688e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10a      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006896:	4bbf      	ldr	r3, [pc, #764]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068a4:	4abb      	ldr	r2, [pc, #748]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068a6:	430b      	orrs	r3, r1
 80068a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80068aa:	e003      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	f002 0302 	and.w	r3, r2, #2
 80068c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068c4:	2300      	movs	r3, #0
 80068c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80068ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80068ce:	460b      	mov	r3, r1
 80068d0:	4313      	orrs	r3, r2
 80068d2:	d041      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d824      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80068de:	a201      	add	r2, pc, #4	@ (adr r2, 80068e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	08006931 	.word	0x08006931
 80068e8:	080068fd 	.word	0x080068fd
 80068ec:	08006913 	.word	0x08006913
 80068f0:	08006931 	.word	0x08006931
 80068f4:	08006931 	.word	0x08006931
 80068f8:	08006931 	.word	0x08006931
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006900:	3308      	adds	r3, #8
 8006902:	2101      	movs	r1, #1
 8006904:	4618      	mov	r0, r3
 8006906:	f001 fe43 	bl	8008590 <RCCEx_PLL2_Config>
 800690a:	4603      	mov	r3, r0
 800690c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006910:	e00f      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	3328      	adds	r3, #40	@ 0x28
 8006918:	2101      	movs	r1, #1
 800691a:	4618      	mov	r0, r3
 800691c:	f001 feea 	bl	80086f4 <RCCEx_PLL3_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006926:	e004      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800692e:	e000      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800693a:	4b96      	ldr	r3, [pc, #600]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800693c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693e:	f023 0107 	bic.w	r1, r3, #7
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006948:	4a92      	ldr	r2, [pc, #584]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800694a:	430b      	orrs	r3, r1
 800694c:	6553      	str	r3, [r2, #84]	@ 0x54
 800694e:	e003      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	f002 0304 	and.w	r3, r2, #4
 8006964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006968:	2300      	movs	r3, #0
 800696a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800696e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006972:	460b      	mov	r3, r1
 8006974:	4313      	orrs	r3, r2
 8006976:	d044      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006980:	2b05      	cmp	r3, #5
 8006982:	d825      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006984:	a201      	add	r2, pc, #4	@ (adr r2, 800698c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069d9 	.word	0x080069d9
 8006990:	080069a5 	.word	0x080069a5
 8006994:	080069bb 	.word	0x080069bb
 8006998:	080069d9 	.word	0x080069d9
 800699c:	080069d9 	.word	0x080069d9
 80069a0:	080069d9 	.word	0x080069d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a8:	3308      	adds	r3, #8
 80069aa:	2101      	movs	r1, #1
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fdef 	bl	8008590 <RCCEx_PLL2_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069b8:	e00f      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	3328      	adds	r3, #40	@ 0x28
 80069c0:	2101      	movs	r1, #1
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fe96 	bl	80086f4 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069ce:	e004      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d6:	e000      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80069d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069e2:	4b6c      	ldr	r3, [pc, #432]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e6:	f023 0107 	bic.w	r1, r3, #7
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069f2:	4a68      	ldr	r2, [pc, #416]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069f4:	430b      	orrs	r3, r1
 80069f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80069f8:	e003      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f002 0320 	and.w	r3, r2, #32
 8006a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a12:	2300      	movs	r3, #0
 8006a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	d055      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a2e:	d033      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a34:	d82c      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a3a:	d02f      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a40:	d826      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a46:	d02b      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006a48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a4c:	d820      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a52:	d012      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a58:	d81a      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d022      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a62:	d115      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a68:	3308      	adds	r3, #8
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 fd8f 	bl	8008590 <RCCEx_PLL2_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a78:	e015      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	3328      	adds	r3, #40	@ 0x28
 8006a80:	2102      	movs	r1, #2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 fe36 	bl	80086f4 <RCCEx_PLL3_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a8e:	e00a      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a96:	e006      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a98:	bf00      	nop
 8006a9a:	e004      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a9c:	bf00      	nop
 8006a9e:	e002      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006aa0:	bf00      	nop
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10b      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aae:	4b39      	ldr	r3, [pc, #228]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006abe:	4a35      	ldr	r2, [pc, #212]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ac4:	e003      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ae4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4313      	orrs	r3, r2
 8006aec:	d058      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006af6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006afa:	d033      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006afc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b00:	d82c      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b06:	d02f      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b0c:	d826      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b12:	d02b      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006b14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b18:	d820      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1e:	d012      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b24:	d81a      	bhi.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d022      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b2e:	d115      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b34:	3308      	adds	r3, #8
 8006b36:	2100      	movs	r1, #0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f001 fd29 	bl	8008590 <RCCEx_PLL2_Config>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b44:	e015      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4a:	3328      	adds	r3, #40	@ 0x28
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 fdd0 	bl	80086f4 <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b5a:	e00a      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b62:	e006      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b64:	bf00      	nop
 8006b66:	e004      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b68:	bf00      	nop
 8006b6a:	e002      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b6c:	bf00      	nop
 8006b6e:	e000      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10e      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b7a:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b8a:	4a02      	ldr	r2, [pc, #8]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b90:	e006      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006b92:	bf00      	nop
 8006b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bb6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	d055      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bc8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006bcc:	d033      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006bce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006bd2:	d82c      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd8:	d02f      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bde:	d826      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006be0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006be4:	d02b      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006be6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006bea:	d820      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006bec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf0:	d012      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006bf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf6:	d81a      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d022      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c00:	d115      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	3308      	adds	r3, #8
 8006c08:	2100      	movs	r1, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fcc0 	bl	8008590 <RCCEx_PLL2_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c16:	e015      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1c:	3328      	adds	r3, #40	@ 0x28
 8006c1e:	2102      	movs	r1, #2
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 fd67 	bl	80086f4 <RCCEx_PLL3_Config>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c2c:	e00a      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c34:	e006      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c36:	bf00      	nop
 8006c38:	e004      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c3a:	bf00      	nop
 8006c3c:	e002      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c4c:	4ba1      	ldr	r3, [pc, #644]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c5c:	4a9d      	ldr	r2, [pc, #628]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c62:	e003      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f002 0308 	and.w	r3, r2, #8
 8006c78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006c86:	460b      	mov	r3, r1
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	d01e      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c98:	d10c      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9e:	3328      	adds	r3, #40	@ 0x28
 8006ca0:	2102      	movs	r1, #2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f001 fd26 	bl	80086f4 <RCCEx_PLL3_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006cb4:	4b87      	ldr	r3, [pc, #540]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cc4:	4a83      	ldr	r2, [pc, #524]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	f002 0310 	and.w	r3, r2, #16
 8006cd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ce0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	d01e      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf6:	d10c      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfc:	3328      	adds	r3, #40	@ 0x28
 8006cfe:	2102      	movs	r1, #2
 8006d00:	4618      	mov	r0, r3
 8006d02:	f001 fcf7 	bl	80086f4 <RCCEx_PLL3_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d12:	4b70      	ldr	r3, [pc, #448]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d22:	4a6c      	ldr	r2, [pc, #432]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d24:	430b      	orrs	r3, r1
 8006d26:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006d34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d3e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d03e      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d54:	d022      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d5a:	d81b      	bhi.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d64:	d00b      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006d66:	e015      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fc0d 	bl	8008590 <RCCEx_PLL2_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d7c:	e00f      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	3328      	adds	r3, #40	@ 0x28
 8006d84:	2102      	movs	r1, #2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 fcb4 	bl	80086f4 <RCCEx_PLL3_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d92:	e004      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d9a:	e000      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006da6:	4b4b      	ldr	r3, [pc, #300]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006daa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006db6:	4a47      	ldr	r2, [pc, #284]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dbc:	e003      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006dd8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4313      	orrs	r3, r2
 8006de0:	d03b      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006dee:	d01f      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006df0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006df4:	d818      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dfa:	d003      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006dfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e00:	d007      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006e02:	e011      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e04:	4b33      	ldr	r3, [pc, #204]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e08:	4a32      	ldr	r2, [pc, #200]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e10:	e00f      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e16:	3328      	adds	r3, #40	@ 0x28
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 fc6a 	bl	80086f4 <RCCEx_PLL3_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e26:	e004      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e2e:	e000      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e3a:	4b26      	ldr	r3, [pc, #152]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4a:	4a22      	ldr	r2, [pc, #136]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e4c:	430b      	orrs	r3, r1
 8006e4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e50:	e003      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006e66:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e68:	2300      	movs	r3, #0
 8006e6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006e70:	460b      	mov	r3, r1
 8006e72:	4313      	orrs	r3, r2
 8006e74:	d034      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e84:	d007      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006e86:	e011      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e88:	4b12      	ldr	r3, [pc, #72]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8c:	4a11      	ldr	r2, [pc, #68]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e94:	e00e      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f001 fb76 	bl	8008590 <RCCEx_PLL2_Config>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10d      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ebc:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eca:	4a02      	ldr	r2, [pc, #8]	@ (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ed0:	e006      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006ed2:	bf00      	nop
 8006ed4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eee:	2300      	movs	r3, #0
 8006ef0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ef2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	d00c      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f00:	3328      	adds	r3, #40	@ 0x28
 8006f02:	2102      	movs	r1, #2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 fbf5 	bl	80086f4 <RCCEx_PLL3_Config>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006f22:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f24:	2300      	movs	r3, #0
 8006f26:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	d038      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f3e:	d018      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006f40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f44:	d811      	bhi.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006f46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f4a:	d014      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f50:	d80b      	bhi.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d011      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f5a:	d106      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5c:	4bc3      	ldr	r3, [pc, #780]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f60:	4ac2      	ldr	r2, [pc, #776]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f68:	e008      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f70:	e004      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f72:	bf00      	nop
 8006f74:	e002      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f76:	bf00      	nop
 8006f78:	e000      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10b      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f84:	4bb9      	ldr	r3, [pc, #740]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f88:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f94:	4ab5      	ldr	r2, [pc, #724]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f96:	430b      	orrs	r3, r1
 8006f98:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f9a:	e003      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	d009      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fc0:	4baa      	ldr	r3, [pc, #680]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fce:	4aa7      	ldr	r2, [pc, #668]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006fe0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fe6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006fea:	460b      	mov	r3, r1
 8006fec:	4313      	orrs	r3, r2
 8006fee:	d00a      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ff0:	4b9e      	ldr	r3, [pc, #632]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007000:	4a9a      	ldr	r2, [pc, #616]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007002:	430b      	orrs	r3, r1
 8007004:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007014:	2300      	movs	r3, #0
 8007016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007018:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800701c:	460b      	mov	r3, r1
 800701e:	4313      	orrs	r3, r2
 8007020:	d009      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007022:	4b92      	ldr	r3, [pc, #584]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007026:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007030:	4a8e      	ldr	r2, [pc, #568]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007032:	430b      	orrs	r3, r1
 8007034:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007042:	643b      	str	r3, [r7, #64]	@ 0x40
 8007044:	2300      	movs	r3, #0
 8007046:	647b      	str	r3, [r7, #68]	@ 0x44
 8007048:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800704c:	460b      	mov	r3, r1
 800704e:	4313      	orrs	r3, r2
 8007050:	d00e      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007052:	4b86      	ldr	r3, [pc, #536]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	4a85      	ldr	r2, [pc, #532]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007058:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800705c:	6113      	str	r3, [r2, #16]
 800705e:	4b83      	ldr	r3, [pc, #524]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007060:	6919      	ldr	r1, [r3, #16]
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007066:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800706a:	4a80      	ldr	r2, [pc, #512]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800706c:	430b      	orrs	r3, r1
 800706e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800707c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800707e:	2300      	movs	r3, #0
 8007080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007082:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007086:	460b      	mov	r3, r1
 8007088:	4313      	orrs	r3, r2
 800708a:	d009      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800708c:	4b77      	ldr	r3, [pc, #476]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800708e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007090:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800709a:	4a74      	ldr	r2, [pc, #464]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800709c:	430b      	orrs	r3, r1
 800709e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80070ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80070ae:	2300      	movs	r3, #0
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d00a      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070bc:	4b6b      	ldr	r3, [pc, #428]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070cc:	4a67      	ldr	r2, [pc, #412]	@ (800726c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ce:	430b      	orrs	r3, r1
 80070d0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80070d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	2100      	movs	r1, #0
 80070dc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80070e8:	460b      	mov	r3, r1
 80070ea:	4313      	orrs	r3, r2
 80070ec:	d011      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f2:	3308      	adds	r3, #8
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 fa4a 	bl	8008590 <RCCEx_PLL2_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800710e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	2100      	movs	r1, #0
 800711c:	6239      	str	r1, [r7, #32]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
 8007124:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007128:	460b      	mov	r3, r1
 800712a:	4313      	orrs	r3, r2
 800712c:	d011      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007132:	3308      	adds	r3, #8
 8007134:	2101      	movs	r1, #1
 8007136:	4618      	mov	r0, r3
 8007138:	f001 fa2a 	bl	8008590 <RCCEx_PLL2_Config>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800714e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	2100      	movs	r1, #0
 800715c:	61b9      	str	r1, [r7, #24]
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007168:	460b      	mov	r3, r1
 800716a:	4313      	orrs	r3, r2
 800716c:	d011      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007172:	3308      	adds	r3, #8
 8007174:	2102      	movs	r1, #2
 8007176:	4618      	mov	r0, r3
 8007178:	f001 fa0a 	bl	8008590 <RCCEx_PLL2_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800718e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	2100      	movs	r1, #0
 800719c:	6139      	str	r1, [r7, #16]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80071a8:	460b      	mov	r3, r1
 80071aa:	4313      	orrs	r3, r2
 80071ac:	d011      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b2:	3328      	adds	r3, #40	@ 0x28
 80071b4:	2100      	movs	r1, #0
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fa9c 	bl	80086f4 <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80071c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	2100      	movs	r1, #0
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071e8:	460b      	mov	r3, r1
 80071ea:	4313      	orrs	r3, r2
 80071ec:	d011      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f2:	3328      	adds	r3, #40	@ 0x28
 80071f4:	2101      	movs	r1, #1
 80071f6:	4618      	mov	r0, r3
 80071f8:	f001 fa7c 	bl	80086f4 <RCCEx_PLL3_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800720e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	2100      	movs	r1, #0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	607b      	str	r3, [r7, #4]
 8007224:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007228:	460b      	mov	r3, r1
 800722a:	4313      	orrs	r3, r2
 800722c:	d011      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007232:	3328      	adds	r3, #40	@ 0x28
 8007234:	2102      	movs	r1, #2
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fa5c 	bl	80086f4 <RCCEx_PLL3_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007252:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	e000      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
}
 8007260:	4618      	mov	r0, r3
 8007262:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007266:	46bd      	mov	sp, r7
 8007268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800726c:	58024400 	.word	0x58024400

08007270 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b090      	sub	sp, #64	@ 0x40
 8007274:	af00      	add	r7, sp, #0
 8007276:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800727a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007282:	430b      	orrs	r3, r1
 8007284:	f040 8094 	bne.w	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007288:	4b9e      	ldr	r3, [pc, #632]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800728a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	2b04      	cmp	r3, #4
 8007296:	f200 8087 	bhi.w	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800729a:	a201      	add	r2, pc, #4	@ (adr r2, 80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072b5 	.word	0x080072b5
 80072a4:	080072dd 	.word	0x080072dd
 80072a8:	08007305 	.word	0x08007305
 80072ac:	080073a1 	.word	0x080073a1
 80072b0:	0800732d 	.word	0x0800732d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072b4:	4b93      	ldr	r3, [pc, #588]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072c0:	d108      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 f810 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072d0:	f000 bd45 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d8:	f000 bd41 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072dc:	4b89      	ldr	r3, [pc, #548]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e8:	d108      	bne.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ea:	f107 0318 	add.w	r3, r7, #24
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fd54 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f8:	f000 bd31 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007300:	f000 bd2d 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007304:	4b7f      	ldr	r3, [pc, #508]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800730c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007310:	d108      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007312:	f107 030c 	add.w	r3, r7, #12
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fe94 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007320:	f000 bd1d 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007328:	f000 bd19 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800732c:	4b75      	ldr	r3, [pc, #468]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800732e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007330:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007334:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007336:	4b73      	ldr	r3, [pc, #460]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b04      	cmp	r3, #4
 8007340:	d10c      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007344:	2b00      	cmp	r3, #0
 8007346:	d109      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007348:	4b6e      	ldr	r3, [pc, #440]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	08db      	lsrs	r3, r3, #3
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	4a6d      	ldr	r2, [pc, #436]	@ (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
 8007358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800735a:	e01f      	b.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800735c:	4b69      	ldr	r3, [pc, #420]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007368:	d106      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800736a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007370:	d102      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007372:	4b66      	ldr	r3, [pc, #408]	@ (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007376:	e011      	b.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007378:	4b62      	ldr	r3, [pc, #392]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007384:	d106      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800738c:	d102      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800738e:	4b60      	ldr	r3, [pc, #384]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007392:	e003      	b.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007398:	f000 bce1 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800739c:	f000 bcdf 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a4:	f000 bcdb 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ac:	f000 bcd7 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80073b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80073b8:	430b      	orrs	r3, r1
 80073ba:	f040 80ad 	bne.w	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80073be:	4b51      	ldr	r3, [pc, #324]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80073c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80073c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ce:	d056      	beq.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073d6:	f200 8090 	bhi.w	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80073de:	f000 8088 	beq.w	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80073e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80073e6:	f200 8088 	bhi.w	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	2b80      	cmp	r3, #128	@ 0x80
 80073ee:	d032      	beq.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	2b80      	cmp	r3, #128	@ 0x80
 80073f4:	f200 8081 	bhi.w	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	2b40      	cmp	r3, #64	@ 0x40
 8007402:	d014      	beq.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007404:	e079      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007406:	4b3f      	ldr	r3, [pc, #252]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007412:	d108      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007418:	4618      	mov	r0, r3
 800741a:	f000 ff67 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007422:	f000 bc9c 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800742a:	f000 bc98 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800742e:	4b35      	ldr	r3, [pc, #212]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800743a:	d108      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800743c:	f107 0318 	add.w	r3, r7, #24
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fcab 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800744a:	f000 bc88 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007452:	f000 bc84 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007456:	4b2b      	ldr	r3, [pc, #172]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800745e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007462:	d108      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007464:	f107 030c 	add.w	r3, r7, #12
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fdeb 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007472:	f000 bc74 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800747a:	f000 bc70 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800747e:	4b21      	ldr	r3, [pc, #132]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007482:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007488:	4b1e      	ldr	r3, [pc, #120]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b04      	cmp	r3, #4
 8007492:	d10c      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007496:	2b00      	cmp	r3, #0
 8007498:	d109      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800749a:	4b1a      	ldr	r3, [pc, #104]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	08db      	lsrs	r3, r3, #3
 80074a0:	f003 0303 	and.w	r3, r3, #3
 80074a4:	4a18      	ldr	r2, [pc, #96]	@ (8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074a6:	fa22 f303 	lsr.w	r3, r2, r3
 80074aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ac:	e01f      	b.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074ae:	4b15      	ldr	r3, [pc, #84]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074ba:	d106      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80074bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074c2:	d102      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074c4:	4b11      	ldr	r3, [pc, #68]	@ (800750c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80074c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074c8:	e011      	b.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074d6:	d106      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80074d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074de:	d102      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80074e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074e4:	e003      	b.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80074ea:	f000 bc38 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074ee:	f000 bc36 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80074f2:	4b08      	ldr	r3, [pc, #32]	@ (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80074f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f6:	f000 bc32 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074fe:	f000 bc2e 	b.w	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007502:	bf00      	nop
 8007504:	58024400 	.word	0x58024400
 8007508:	03d09000 	.word	0x03d09000
 800750c:	003d0900 	.word	0x003d0900
 8007510:	017d7840 	.word	0x017d7840
 8007514:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800751c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007520:	430b      	orrs	r3, r1
 8007522:	f040 809c 	bne.w	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007526:	4b9e      	ldr	r3, [pc, #632]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800752a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800752e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007532:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007536:	d054      	beq.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800753e:	f200 808b 	bhi.w	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007544:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007548:	f000 8083 	beq.w	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800754c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007552:	f200 8081 	bhi.w	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800755c:	d02f      	beq.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007564:	d878      	bhi.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007572:	d012      	beq.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007574:	e070      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007576:	4b8a      	ldr	r3, [pc, #552]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800757e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007582:	d107      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007588:	4618      	mov	r0, r3
 800758a:	f000 feaf 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007592:	e3e4      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007598:	e3e1      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800759a:	4b81      	ldr	r3, [pc, #516]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075a6:	d107      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a8:	f107 0318 	add.w	r3, r7, #24
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fbf5 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b6:	e3d2      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075bc:	e3cf      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075be:	4b78      	ldr	r3, [pc, #480]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075ca:	d107      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075cc:	f107 030c 	add.w	r3, r7, #12
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fd37 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075da:	e3c0      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075e0:	e3bd      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075e2:	4b6f      	ldr	r3, [pc, #444]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075ec:	4b6c      	ldr	r3, [pc, #432]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d10c      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80075f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075fe:	4b68      	ldr	r3, [pc, #416]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	08db      	lsrs	r3, r3, #3
 8007604:	f003 0303 	and.w	r3, r3, #3
 8007608:	4a66      	ldr	r2, [pc, #408]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800760a:	fa22 f303 	lsr.w	r3, r2, r3
 800760e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007610:	e01e      	b.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007612:	4b63      	ldr	r3, [pc, #396]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800761e:	d106      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007626:	d102      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007628:	4b5f      	ldr	r3, [pc, #380]	@ (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800762a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800762c:	e010      	b.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800762e:	4b5c      	ldr	r3, [pc, #368]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800763a:	d106      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800763c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800763e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007642:	d102      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007644:	4b59      	ldr	r3, [pc, #356]	@ (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007648:	e002      	b.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800764e:	e386      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007650:	e385      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007652:	4b57      	ldr	r3, [pc, #348]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007656:	e382      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800765c:	e37f      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800765e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007662:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007666:	430b      	orrs	r3, r1
 8007668:	f040 80a7 	bne.w	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800766c:	4b4c      	ldr	r3, [pc, #304]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800766e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007670:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007674:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800767c:	d055      	beq.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007684:	f200 8096 	bhi.w	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800768e:	f000 8084 	beq.w	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007698:	f200 808c 	bhi.w	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076a2:	d030      	beq.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076aa:	f200 8083 	bhi.w	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80076ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076ba:	d012      	beq.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80076bc:	e07a      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076be:	4b38      	ldr	r3, [pc, #224]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076ca:	d107      	bne.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fe0b 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076da:	e340      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e0:	e33d      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076e2:	4b2f      	ldr	r3, [pc, #188]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ee:	d107      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076f0:	f107 0318 	add.w	r3, r7, #24
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fb51 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076fe:	e32e      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007704:	e32b      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007706:	4b26      	ldr	r3, [pc, #152]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800770e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007712:	d107      	bne.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007714:	f107 030c 	add.w	r3, r7, #12
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fc93 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007722:	e31c      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007728:	e319      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800772a:	4b1d      	ldr	r3, [pc, #116]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800772c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800772e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007732:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007734:	4b1a      	ldr	r3, [pc, #104]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d10c      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007742:	2b00      	cmp	r3, #0
 8007744:	d109      	bne.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007746:	4b16      	ldr	r3, [pc, #88]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	08db      	lsrs	r3, r3, #3
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	4a14      	ldr	r2, [pc, #80]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007752:	fa22 f303 	lsr.w	r3, r2, r3
 8007756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007758:	e01e      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800775a:	4b11      	ldr	r3, [pc, #68]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007766:	d106      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800776e:	d102      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007770:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007774:	e010      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007776:	4b0a      	ldr	r3, [pc, #40]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800777e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007782:	d106      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800778a:	d102      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800778c:	4b07      	ldr	r3, [pc, #28]	@ (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007790:	e002      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007796:	e2e2      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007798:	e2e1      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800779a:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800779c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800779e:	e2de      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077a0:	58024400 	.word	0x58024400
 80077a4:	03d09000 	.word	0x03d09000
 80077a8:	003d0900 	.word	0x003d0900
 80077ac:	017d7840 	.word	0x017d7840
 80077b0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077b8:	e2d1      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80077ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077be:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80077c2:	430b      	orrs	r3, r1
 80077c4:	f040 809c 	bne.w	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80077c8:	4b93      	ldr	r3, [pc, #588]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077cc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80077d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80077d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077d8:	d054      	beq.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80077da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077e0:	f200 808b 	bhi.w	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80077e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077ea:	f000 8083 	beq.w	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077f4:	f200 8081 	bhi.w	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80077f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077fe:	d02f      	beq.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007806:	d878      	bhi.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800780e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007814:	d012      	beq.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007816:	e070      	b.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007818:	4b7f      	ldr	r3, [pc, #508]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007820:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007824:	d107      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fd5e 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007834:	e293      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800783a:	e290      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800783c:	4b76      	ldr	r3, [pc, #472]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007848:	d107      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784a:	f107 0318 	add.w	r3, r7, #24
 800784e:	4618      	mov	r0, r3
 8007850:	f000 faa4 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007858:	e281      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785e:	e27e      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007860:	4b6d      	ldr	r3, [pc, #436]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800786c:	d107      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800786e:	f107 030c 	add.w	r3, r7, #12
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fbe6 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800787c:	e26f      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007882:	e26c      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007884:	4b64      	ldr	r3, [pc, #400]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007888:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800788c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800788e:	4b62      	ldr	r3, [pc, #392]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b04      	cmp	r3, #4
 8007898:	d10c      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800789a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789c:	2b00      	cmp	r3, #0
 800789e:	d109      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078a0:	4b5d      	ldr	r3, [pc, #372]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	08db      	lsrs	r3, r3, #3
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	4a5c      	ldr	r2, [pc, #368]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80078ac:	fa22 f303 	lsr.w	r3, r2, r3
 80078b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078b2:	e01e      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078b4:	4b58      	ldr	r3, [pc, #352]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078c0:	d106      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80078c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078c8:	d102      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078ca:	4b55      	ldr	r3, [pc, #340]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80078cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078ce:	e010      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078d0:	4b51      	ldr	r3, [pc, #324]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078dc:	d106      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80078de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078e4:	d102      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80078e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078ea:	e002      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80078f0:	e235      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078f2:	e234      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078f4:	4b4c      	ldr	r3, [pc, #304]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f8:	e231      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078fe:	e22e      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007904:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007908:	430b      	orrs	r3, r1
 800790a:	f040 808f 	bne.w	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800790e:	4b42      	ldr	r3, [pc, #264]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007912:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007916:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800791e:	d06b      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007922:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007926:	d874      	bhi.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800792e:	d056      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007936:	d86c      	bhi.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800793e:	d03b      	beq.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007946:	d864      	bhi.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800794e:	d021      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007956:	d85c      	bhi.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007964:	d004      	beq.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007966:	e054      	b.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007968:	f7fe fa30 	bl	8005dcc <HAL_RCC_GetPCLK1Freq>
 800796c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800796e:	e1f6      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007970:	4b29      	ldr	r3, [pc, #164]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800797c:	d107      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800797e:	f107 0318 	add.w	r3, r7, #24
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fa0a 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800798c:	e1e7      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007992:	e1e4      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007994:	4b20      	ldr	r3, [pc, #128]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800799c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079a0:	d107      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fb4c 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079b0:	e1d5      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079b6:	e1d2      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079b8:	4b17      	ldr	r3, [pc, #92]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d109      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079c4:	4b14      	ldr	r3, [pc, #80]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	08db      	lsrs	r3, r3, #3
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	4a13      	ldr	r2, [pc, #76]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80079d0:	fa22 f303 	lsr.w	r3, r2, r3
 80079d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079d6:	e1c2      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079dc:	e1bf      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80079de:	4b0e      	ldr	r3, [pc, #56]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079ea:	d102      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80079ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80079ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079f0:	e1b5      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f6:	e1b2      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80079f8:	4b07      	ldr	r3, [pc, #28]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a04:	d102      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007a06:	4b07      	ldr	r3, [pc, #28]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a0a:	e1a8      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a10:	e1a5      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a16:	e1a2      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	03d09000 	.word	0x03d09000
 8007a20:	003d0900 	.word	0x003d0900
 8007a24:	017d7840 	.word	0x017d7840
 8007a28:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a30:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007a34:	430b      	orrs	r3, r1
 8007a36:	d173      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007a38:	4b9c      	ldr	r3, [pc, #624]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a48:	d02f      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a50:	d863      	bhi.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5e:	d012      	beq.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007a60:	e05b      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a62:	4b92      	ldr	r3, [pc, #584]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a6e:	d107      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a70:	f107 0318 	add.w	r3, r7, #24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f991 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a7e:	e16e      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a84:	e16b      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a86:	4b89      	ldr	r3, [pc, #548]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a92:	d107      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a94:	f107 030c 	add.w	r3, r7, #12
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 fad3 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aa2:	e15c      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa8:	e159      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007aaa:	4b80      	ldr	r3, [pc, #512]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ab2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ab4:	4b7d      	ldr	r3, [pc, #500]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d10c      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ac6:	4b79      	ldr	r3, [pc, #484]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	08db      	lsrs	r3, r3, #3
 8007acc:	f003 0303 	and.w	r3, r3, #3
 8007ad0:	4a77      	ldr	r2, [pc, #476]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ad8:	e01e      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ada:	4b74      	ldr	r3, [pc, #464]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae6:	d106      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007aee:	d102      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007af0:	4b70      	ldr	r3, [pc, #448]	@ (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af4:	e010      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007af6:	4b6d      	ldr	r3, [pc, #436]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007afe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b02:	d106      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b0a:	d102      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b10:	e002      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007b16:	e122      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b18:	e121      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b1e:	e11e      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b24:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	d133      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b42:	d012      	beq.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007b44:	e023      	b.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b46:	4b59      	ldr	r3, [pc, #356]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b52:	d107      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fbc7 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b62:	e0fc      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b68:	e0f9      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b6a:	4b50      	ldr	r3, [pc, #320]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b76:	d107      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b78:	f107 0318 	add.w	r3, r7, #24
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 f90d 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b86:	e0ea      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b8c:	e0e7      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b92:	e0e4      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b98:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	f040 808d 	bne.w	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007ba2:	4b42      	ldr	r3, [pc, #264]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007baa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bb2:	d06b      	beq.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bba:	d874      	bhi.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc2:	d056      	beq.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bca:	d86c      	bhi.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007bd2:	d03b      	beq.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007bda:	d864      	bhi.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007be2:	d021      	beq.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bea:	d85c      	bhi.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bf8:	d004      	beq.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007bfa:	e054      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007bfc:	f000 f8b8 	bl	8007d70 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c00:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c02:	e0ac      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c04:	4b29      	ldr	r3, [pc, #164]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c10:	d107      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c12:	f107 0318 	add.w	r3, r7, #24
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 f8c0 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c20:	e09d      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c26:	e09a      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c28:	4b20      	ldr	r3, [pc, #128]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c34:	d107      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c36:	f107 030c 	add.w	r3, r7, #12
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fa02 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c44:	e08b      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c4a:	e088      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c4c:	4b17      	ldr	r3, [pc, #92]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d109      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c58:	4b14      	ldr	r3, [pc, #80]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	08db      	lsrs	r3, r3, #3
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	4a13      	ldr	r2, [pc, #76]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c64:	fa22 f303 	lsr.w	r3, r2, r3
 8007c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c6a:	e078      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c70:	e075      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007c72:	4b0e      	ldr	r3, [pc, #56]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c7e:	d102      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007c80:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c84:	e06b      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c8a:	e068      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c8c:	4b07      	ldr	r3, [pc, #28]	@ (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c98:	d102      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007c9a:	4b07      	ldr	r3, [pc, #28]	@ (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c9e:	e05e      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ca4:	e05b      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007caa:	e058      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cac:	58024400 	.word	0x58024400
 8007cb0:	03d09000 	.word	0x03d09000
 8007cb4:	003d0900 	.word	0x003d0900
 8007cb8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	d148      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007cc8:	4b27      	ldr	r3, [pc, #156]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ccc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007cd0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cd8:	d02a      	beq.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ce0:	d838      	bhi.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d004      	beq.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cee:	d00d      	beq.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007cf0:	e030      	b.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cfe:	d102      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007d00:	4b1a      	ldr	r3, [pc, #104]	@ (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d04:	e02b      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0a:	e028      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d0c:	4b16      	ldr	r3, [pc, #88]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d18:	d107      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 fae4 	bl	80082ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d28:	e019      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d2e:	e016      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d30:	4b0d      	ldr	r3, [pc, #52]	@ (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d3c:	d107      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d3e:	f107 0318 	add.w	r3, r7, #24
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f82a 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d4c:	e007      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d52:	e004      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d58:	e001      	b.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3740      	adds	r7, #64	@ 0x40
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	017d7840 	.word	0x017d7840

08007d70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d74:	f7fd fffa 	bl	8005d6c <HAL_RCC_GetHCLKFreq>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	4b06      	ldr	r3, [pc, #24]	@ (8007d94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	091b      	lsrs	r3, r3, #4
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	4904      	ldr	r1, [pc, #16]	@ (8007d98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d86:	5ccb      	ldrb	r3, [r1, r3]
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	58024400 	.word	0x58024400
 8007d98:	08015dd4 	.word	0x08015dd4

08007d9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b089      	sub	sp, #36	@ 0x24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007da4:	4ba1      	ldr	r3, [pc, #644]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007dae:	4b9f      	ldr	r3, [pc, #636]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db2:	0b1b      	lsrs	r3, r3, #12
 8007db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007db8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007dba:	4b9c      	ldr	r3, [pc, #624]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbe:	091b      	lsrs	r3, r3, #4
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007dc6:	4b99      	ldr	r3, [pc, #612]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dca:	08db      	lsrs	r3, r3, #3
 8007dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	fb02 f303 	mul.w	r3, r2, r3
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8111 	beq.w	800800c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	f000 8083 	beq.w	8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	f200 80a1 	bhi.w	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d056      	beq.n	8007eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e06:	e099      	b.n	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e08:	4b88      	ldr	r3, [pc, #544]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02d      	beq.n	8007e70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e14:	4b85      	ldr	r3, [pc, #532]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	08db      	lsrs	r3, r3, #3
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	4a84      	ldr	r2, [pc, #528]	@ (8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
 8007e24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e6e:	e087      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e82:	4b6a      	ldr	r3, [pc, #424]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eb2:	e065      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800803c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec6:	4b59      	ldr	r3, [pc, #356]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ef6:	e043      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0a:	4b48      	ldr	r3, [pc, #288]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f3a:	e021      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800803c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f4e:	4b37      	ldr	r3, [pc, #220]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007f80:	4b2a      	ldr	r3, [pc, #168]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f84:	0a5b      	lsrs	r3, r3, #9
 8007f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa6:	ee17 2a90 	vmov	r2, s15
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007fae:	4b1f      	ldr	r3, [pc, #124]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb2:	0c1b      	lsrs	r3, r3, #16
 8007fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd4:	ee17 2a90 	vmov	r2, s15
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007fdc:	4b13      	ldr	r3, [pc, #76]	@ (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe0:	0e1b      	lsrs	r3, r3, #24
 8007fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008002:	ee17 2a90 	vmov	r2, s15
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800800a:	e008      	b.n	800801e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	609a      	str	r2, [r3, #8]
}
 800801e:	bf00      	nop
 8008020:	3724      	adds	r7, #36	@ 0x24
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	58024400 	.word	0x58024400
 8008030:	03d09000 	.word	0x03d09000
 8008034:	46000000 	.word	0x46000000
 8008038:	4c742400 	.word	0x4c742400
 800803c:	4a742400 	.word	0x4a742400
 8008040:	4bbebc20 	.word	0x4bbebc20

08008044 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008044:	b480      	push	{r7}
 8008046:	b089      	sub	sp, #36	@ 0x24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800804c:	4ba1      	ldr	r3, [pc, #644]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800804e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008056:	4b9f      	ldr	r3, [pc, #636]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805a:	0d1b      	lsrs	r3, r3, #20
 800805c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008060:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008062:	4b9c      	ldr	r3, [pc, #624]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800806e:	4b99      	ldr	r3, [pc, #612]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008072:	08db      	lsrs	r3, r3, #3
 8008074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8111 	beq.w	80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b02      	cmp	r3, #2
 8008096:	f000 8083 	beq.w	80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	2b02      	cmp	r3, #2
 800809e:	f200 80a1 	bhi.w	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d056      	beq.n	800815c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80080ae:	e099      	b.n	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080b0:	4b88      	ldr	r3, [pc, #544]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d02d      	beq.n	8008118 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080bc:	4b85      	ldr	r3, [pc, #532]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	08db      	lsrs	r3, r3, #3
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	4a84      	ldr	r2, [pc, #528]	@ (80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080c8:	fa22 f303 	lsr.w	r3, r2, r3
 80080cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e6:	4b7b      	ldr	r3, [pc, #492]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800810a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800810e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008112:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008116:	e087      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008122:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812a:	4b6a      	ldr	r3, [pc, #424]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800812c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813a:	ed97 6a03 	vldr	s12, [r7, #12]
 800813e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800814e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800815a:	e065      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800816a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816e:	4b59      	ldr	r3, [pc, #356]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008182:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800819e:	e043      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80081ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b2:	4b48      	ldr	r3, [pc, #288]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081e2:	e021      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f6:	4b37      	ldr	r3, [pc, #220]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008206:	ed97 6a03 	vldr	s12, [r7, #12]
 800820a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800820e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800821a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008226:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008228:	4b2a      	ldr	r3, [pc, #168]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800822a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822c:	0a5b      	lsrs	r3, r3, #9
 800822e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800823e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008242:	edd7 6a07 	vldr	s13, [r7, #28]
 8008246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800824a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800824e:	ee17 2a90 	vmov	r2, s15
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008256:	4b1f      	ldr	r3, [pc, #124]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825a:	0c1b      	lsrs	r3, r3, #16
 800825c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008268:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800826c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008270:	edd7 6a07 	vldr	s13, [r7, #28]
 8008274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827c:	ee17 2a90 	vmov	r2, s15
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008284:	4b13      	ldr	r3, [pc, #76]	@ (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008288:	0e1b      	lsrs	r3, r3, #24
 800828a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800829a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800829e:	edd7 6a07 	vldr	s13, [r7, #28]
 80082a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082aa:	ee17 2a90 	vmov	r2, s15
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80082b2:	e008      	b.n	80082c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	609a      	str	r2, [r3, #8]
}
 80082c6:	bf00      	nop
 80082c8:	3724      	adds	r7, #36	@ 0x24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	58024400 	.word	0x58024400
 80082d8:	03d09000 	.word	0x03d09000
 80082dc:	46000000 	.word	0x46000000
 80082e0:	4c742400 	.word	0x4c742400
 80082e4:	4a742400 	.word	0x4a742400
 80082e8:	4bbebc20 	.word	0x4bbebc20

080082ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b089      	sub	sp, #36	@ 0x24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082f4:	4ba0      	ldr	r3, [pc, #640]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80082fe:	4b9e      	ldr	r3, [pc, #632]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008302:	091b      	lsrs	r3, r3, #4
 8008304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008308:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800830a:	4b9b      	ldr	r3, [pc, #620]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800830c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008314:	4b98      	ldr	r3, [pc, #608]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008318:	08db      	lsrs	r3, r3, #3
 800831a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	fb02 f303 	mul.w	r3, r2, r3
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8111 	beq.w	800855a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b02      	cmp	r3, #2
 800833c:	f000 8083 	beq.w	8008446 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	2b02      	cmp	r3, #2
 8008344:	f200 80a1 	bhi.w	800848a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d056      	beq.n	8008402 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008354:	e099      	b.n	800848a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008356:	4b88      	ldr	r3, [pc, #544]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d02d      	beq.n	80083be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008362:	4b85      	ldr	r3, [pc, #532]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	08db      	lsrs	r3, r3, #3
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	4a83      	ldr	r2, [pc, #524]	@ (800857c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800836e:	fa22 f303 	lsr.w	r3, r2, r3
 8008372:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	ee07 3a90 	vmov	s15, r3
 8008384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838c:	4b7a      	ldr	r3, [pc, #488]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800838e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008394:	ee07 3a90 	vmov	s15, r3
 8008398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839c:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083bc:	e087      	b.n	80084ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	ee07 3a90 	vmov	s15, r3
 80083c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80083cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d0:	4b69      	ldr	r3, [pc, #420]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d8:	ee07 3a90 	vmov	s15, r3
 80083dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008400:	e065      	b.n	80084ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	ee07 3a90 	vmov	s15, r3
 8008408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008588 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008414:	4b58      	ldr	r3, [pc, #352]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841c:	ee07 3a90 	vmov	s15, r3
 8008420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008424:	ed97 6a03 	vldr	s12, [r7, #12]
 8008428:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800842c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008434:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008444:	e043      	b.n	80084ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	ee07 3a90 	vmov	s15, r3
 800844c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008450:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800858c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008458:	4b47      	ldr	r3, [pc, #284]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800845a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800845c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008460:	ee07 3a90 	vmov	s15, r3
 8008464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008468:	ed97 6a03 	vldr	s12, [r7, #12]
 800846c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008478:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800847c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008484:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008488:	e021      	b.n	80084ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008494:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800849c:	4b36      	ldr	r3, [pc, #216]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800849e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a4:	ee07 3a90 	vmov	s15, r3
 80084a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80084b0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80084ce:	4b2a      	ldr	r3, [pc, #168]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d2:	0a5b      	lsrs	r3, r3, #9
 80084d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084f4:	ee17 2a90 	vmov	r2, s15
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80084fc:	4b1e      	ldr	r3, [pc, #120]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008500:	0c1b      	lsrs	r3, r3, #16
 8008502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008516:	edd7 6a07 	vldr	s13, [r7, #28]
 800851a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800851e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008522:	ee17 2a90 	vmov	r2, s15
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800852a:	4b13      	ldr	r3, [pc, #76]	@ (8008578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852e:	0e1b      	lsrs	r3, r3, #24
 8008530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008534:	ee07 3a90 	vmov	s15, r3
 8008538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008544:	edd7 6a07 	vldr	s13, [r7, #28]
 8008548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800854c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008550:	ee17 2a90 	vmov	r2, s15
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008558:	e008      	b.n	800856c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	609a      	str	r2, [r3, #8]
}
 800856c:	bf00      	nop
 800856e:	3724      	adds	r7, #36	@ 0x24
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	58024400 	.word	0x58024400
 800857c:	03d09000 	.word	0x03d09000
 8008580:	46000000 	.word	0x46000000
 8008584:	4c742400 	.word	0x4c742400
 8008588:	4a742400 	.word	0x4a742400
 800858c:	4bbebc20 	.word	0x4bbebc20

08008590 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800859e:	4b53      	ldr	r3, [pc, #332]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d101      	bne.n	80085ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e099      	b.n	80086e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80085ae:	4b4f      	ldr	r3, [pc, #316]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a4e      	ldr	r2, [pc, #312]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ba:	f7f9 ff9b 	bl	80024f4 <HAL_GetTick>
 80085be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085c0:	e008      	b.n	80085d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80085c2:	f7f9 ff97 	bl	80024f4 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e086      	b.n	80086e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085d4:	4b45      	ldr	r3, [pc, #276]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f0      	bne.n	80085c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80085e0:	4b42      	ldr	r3, [pc, #264]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	031b      	lsls	r3, r3, #12
 80085ee:	493f      	ldr	r1, [pc, #252]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	3b01      	subs	r3, #1
 8008604:	025b      	lsls	r3, r3, #9
 8008606:	b29b      	uxth	r3, r3
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	3b01      	subs	r3, #1
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	3b01      	subs	r3, #1
 800861e:	061b      	lsls	r3, r3, #24
 8008620:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008624:	4931      	ldr	r1, [pc, #196]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008626:	4313      	orrs	r3, r2
 8008628:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800862a:	4b30      	ldr	r3, [pc, #192]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 800862c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	492d      	ldr	r1, [pc, #180]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008638:	4313      	orrs	r3, r2
 800863a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800863c:	4b2b      	ldr	r3, [pc, #172]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 800863e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008640:	f023 0220 	bic.w	r2, r3, #32
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	4928      	ldr	r1, [pc, #160]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 800864a:	4313      	orrs	r3, r2
 800864c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800864e:	4b27      	ldr	r3, [pc, #156]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008652:	4a26      	ldr	r2, [pc, #152]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800865a:	4b24      	ldr	r3, [pc, #144]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 800865c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800865e:	4b24      	ldr	r3, [pc, #144]	@ (80086f0 <RCCEx_PLL2_Config+0x160>)
 8008660:	4013      	ands	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	69d2      	ldr	r2, [r2, #28]
 8008666:	00d2      	lsls	r2, r2, #3
 8008668:	4920      	ldr	r1, [pc, #128]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 800866a:	4313      	orrs	r3, r2
 800866c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800866e:	4b1f      	ldr	r3, [pc, #124]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008672:	4a1e      	ldr	r2, [pc, #120]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008674:	f043 0310 	orr.w	r3, r3, #16
 8008678:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008680:	4b1a      	ldr	r3, [pc, #104]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008684:	4a19      	ldr	r2, [pc, #100]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008686:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800868a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800868c:	e00f      	b.n	80086ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d106      	bne.n	80086a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008694:	4b15      	ldr	r3, [pc, #84]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008698:	4a14      	ldr	r2, [pc, #80]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 800869a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800869e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086a0:	e005      	b.n	80086ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086a2:	4b12      	ldr	r3, [pc, #72]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a6:	4a11      	ldr	r2, [pc, #68]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80086ae:	4b0f      	ldr	r3, [pc, #60]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a0e      	ldr	r2, [pc, #56]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ba:	f7f9 ff1b 	bl	80024f4 <HAL_GetTick>
 80086be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086c0:	e008      	b.n	80086d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086c2:	f7f9 ff17 	bl	80024f4 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d901      	bls.n	80086d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e006      	b.n	80086e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086d4:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0f0      	beq.n	80086c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
 80086f0:	ffff0007 	.word	0xffff0007

080086f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008702:	4b53      	ldr	r3, [pc, #332]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b03      	cmp	r3, #3
 800870c:	d101      	bne.n	8008712 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e099      	b.n	8008846 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008712:	4b4f      	ldr	r3, [pc, #316]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a4e      	ldr	r2, [pc, #312]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800871c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800871e:	f7f9 fee9 	bl	80024f4 <HAL_GetTick>
 8008722:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008724:	e008      	b.n	8008738 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008726:	f7f9 fee5 	bl	80024f4 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e086      	b.n	8008846 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008738:	4b45      	ldr	r3, [pc, #276]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1f0      	bne.n	8008726 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008744:	4b42      	ldr	r3, [pc, #264]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008748:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	051b      	lsls	r3, r3, #20
 8008752:	493f      	ldr	r1, [pc, #252]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008754:	4313      	orrs	r3, r2
 8008756:	628b      	str	r3, [r1, #40]	@ 0x28
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	3b01      	subs	r3, #1
 800875e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	3b01      	subs	r3, #1
 8008768:	025b      	lsls	r3, r3, #9
 800876a:	b29b      	uxth	r3, r3
 800876c:	431a      	orrs	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	3b01      	subs	r3, #1
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	3b01      	subs	r3, #1
 8008782:	061b      	lsls	r3, r3, #24
 8008784:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008788:	4931      	ldr	r1, [pc, #196]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 800878a:	4313      	orrs	r3, r2
 800878c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800878e:	4b30      	ldr	r3, [pc, #192]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008792:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	492d      	ldr	r1, [pc, #180]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 800879c:	4313      	orrs	r3, r2
 800879e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	4928      	ldr	r1, [pc, #160]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80087b2:	4b27      	ldr	r3, [pc, #156]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b6:	4a26      	ldr	r2, [pc, #152]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087be:	4b24      	ldr	r3, [pc, #144]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087c2:	4b24      	ldr	r3, [pc, #144]	@ (8008854 <RCCEx_PLL3_Config+0x160>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	69d2      	ldr	r2, [r2, #28]
 80087ca:	00d2      	lsls	r2, r2, #3
 80087cc:	4920      	ldr	r1, [pc, #128]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80087d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80087e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	4a19      	ldr	r2, [pc, #100]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80087ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087f0:	e00f      	b.n	8008812 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d106      	bne.n	8008806 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80087f8:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fc:	4a14      	ldr	r2, [pc, #80]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008802:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008804:	e005      	b.n	8008812 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008806:	4b12      	ldr	r3, [pc, #72]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880a:	4a11      	ldr	r2, [pc, #68]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 800880c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008810:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008812:	4b0f      	ldr	r3, [pc, #60]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a0e      	ldr	r2, [pc, #56]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800881c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881e:	f7f9 fe69 	bl	80024f4 <HAL_GetTick>
 8008822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008824:	e008      	b.n	8008838 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008826:	f7f9 fe65 	bl	80024f4 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e006      	b.n	8008846 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008838:	4b05      	ldr	r3, [pc, #20]	@ (8008850 <RCCEx_PLL3_Config+0x15c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0f0      	beq.n	8008826 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008844:	7bfb      	ldrb	r3, [r7, #15]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	58024400 	.word	0x58024400
 8008854:	ffff0007 	.word	0xffff0007

08008858 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	@ 0x28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e075      	b.n	8008956 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d105      	bne.n	8008882 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7f9 f9dd 	bl	8001c3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2204      	movs	r2, #4
 8008886:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f868 	bl	8008960 <HAL_SD_InitCard>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e05d      	b.n	8008956 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800889a:	f107 0308 	add.w	r3, r7, #8
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fdb5 	bl	8009410 <HAL_SD_GetCardStatus>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e052      	b.n	8008956 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80088b0:	7e3b      	ldrb	r3, [r7, #24]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80088b6:	7e7b      	ldrb	r3, [r7, #25]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d10a      	bne.n	80088da <HAL_SD_Init+0x82>
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d102      	bne.n	80088d0 <HAL_SD_Init+0x78>
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d004      	beq.n	80088da <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80088d8:	e00b      	b.n	80088f2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d104      	bne.n	80088ec <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80088ea:	e002      	b.n	80088f2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fe73 	bl	80095e4 <HAL_SD_ConfigWideBusOperation>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e026      	b.n	8008956 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008908:	f7f9 fdf4 	bl	80024f4 <HAL_GetTick>
 800890c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800890e:	e011      	b.n	8008934 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008910:	f7f9 fdf0 	bl	80024f4 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891e:	d109      	bne.n	8008934 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008926:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e010      	b.n	8008956 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 ff67 	bl	8009808 <HAL_SD_GetCardState>
 800893a:	4603      	mov	r3, r0
 800893c:	2b04      	cmp	r3, #4
 800893e:	d1e7      	bne.n	8008910 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3728      	adds	r7, #40	@ 0x28
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008960:	b590      	push	{r4, r7, lr}
 8008962:	b08d      	sub	sp, #52	@ 0x34
 8008964:	af02      	add	r7, sp, #8
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008968:	2300      	movs	r3, #0
 800896a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008970:	2300      	movs	r3, #0
 8008972:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008974:	2300      	movs	r3, #0
 8008976:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008978:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800897c:	f04f 0100 	mov.w	r1, #0
 8008980:	f7fe fc76 	bl	8007270 <HAL_RCCEx_GetPeriphCLKFreq>
 8008984:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	2b00      	cmp	r3, #0
 800898a:	d109      	bne.n	80089a0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800899a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e070      	b.n	8008a82 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80089a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a2:	0a1b      	lsrs	r3, r3, #8
 80089a4:	4a39      	ldr	r2, [pc, #228]	@ (8008a8c <HAL_SD_InitCard+0x12c>)
 80089a6:	fba2 2303 	umull	r2, r3, r2, r3
 80089aa:	091b      	lsrs	r3, r3, #4
 80089ac:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681c      	ldr	r4, [r3, #0]
 80089b2:	466a      	mov	r2, sp
 80089b4:	f107 0318 	add.w	r3, r7, #24
 80089b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80089bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80089c0:	f107 030c 	add.w	r3, r7, #12
 80089c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089c6:	4620      	mov	r0, r4
 80089c8:	f004 f9b6 	bl	800cd38 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f004 f9f9 	bl	800cdc8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80089e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d007      	beq.n	80089fe <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80089ee:	4a28      	ldr	r2, [pc, #160]	@ (8008a90 <HAL_SD_InitCard+0x130>)
 80089f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f6:	3301      	adds	r3, #1
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7f9 fd87 	bl	800250c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fff0 	bl	80099e4 <SD_PowerON>
 8008a04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e02e      	b.n	8008a82 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 ff0f 	bl	8009848 <SD_InitCard>
 8008a2a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00b      	beq.n	8008a4a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	431a      	orrs	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e01b      	b.n	8008a82 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a52:	4618      	mov	r0, r3
 8008a54:	f004 fa4e 	bl	800cef4 <SDMMC_CmdBlockLength>
 8008a58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00f      	beq.n	8008a80 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a0b      	ldr	r2, [pc, #44]	@ (8008a94 <HAL_SD_InitCard+0x134>)
 8008a66:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e000      	b.n	8008a82 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	372c      	adds	r7, #44	@ 0x2c
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd90      	pop	{r4, r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	014f8b59 	.word	0x014f8b59
 8008a90:	00012110 	.word	0x00012110
 8008a94:	1fe00fff 	.word	0x1fe00fff

08008a98 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b092      	sub	sp, #72	@ 0x48
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008aa6:	f7f9 fd25 	bl	80024f4 <HAL_GetTick>
 8008aaa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d107      	bne.n	8008aca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008abe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e167      	b.n	8008d9a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	f040 815a 	bne.w	8008d8c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ade:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	441a      	add	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d907      	bls.n	8008afc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e14e      	b.n	8008d9a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2203      	movs	r2, #3
 8008b00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d002      	beq.n	8008b1a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	025b      	lsls	r3, r3, #9
 8008b18:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	025b      	lsls	r3, r3, #9
 8008b24:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b26:	2390      	movs	r3, #144	@ 0x90
 8008b28:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008b32:	2300      	movs	r3, #0
 8008b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f107 0214 	add.w	r2, r7, #20
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f004 f9ab 	bl	800ce9c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b54:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d90a      	bls.n	8008b72 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f004 fa09 	bl	800cf80 <SDMMC_CmdReadMultiBlock>
 8008b6e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008b70:	e009      	b.n	8008b86 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f004 f9db 	bl	800cf3a <SDMMC_CmdReadSingleBlock>
 8008b84:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d012      	beq.n	8008bb2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a84      	ldr	r2, [pc, #528]	@ (8008da4 <HAL_SD_ReadBlocks+0x30c>)
 8008b92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e0f3      	b.n	8008d9a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008bb6:	e058      	b.n	8008c6a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d033      	beq.n	8008c2e <HAL_SD_ReadBlocks+0x196>
 8008bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc8:	2b1f      	cmp	r3, #31
 8008bca:	d930      	bls.n	8008c2e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bd0:	e027      	b.n	8008c22 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f004 f8d8 	bl	800cd8c <SDMMC_ReadFIFO>
 8008bdc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be8:	3301      	adds	r3, #1
 8008bea:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bee:	0a1b      	lsrs	r3, r3, #8
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfe:	0c1b      	lsrs	r3, r3, #16
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c08:	3301      	adds	r3, #1
 8008c0a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0e:	0e1b      	lsrs	r3, r3, #24
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c18:	3301      	adds	r3, #1
 8008c1a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8008c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c1e:	3301      	adds	r3, #1
 8008c20:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c24:	2b07      	cmp	r3, #7
 8008c26:	d9d4      	bls.n	8008bd2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c2a:	3b20      	subs	r3, #32
 8008c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008c2e:	f7f9 fc61 	bl	80024f4 <HAL_GetTick>
 8008c32:	4602      	mov	r2, r0
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d902      	bls.n	8008c44 <HAL_SD_ReadBlocks+0x1ac>
 8008c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d112      	bne.n	8008c6a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a56      	ldr	r2, [pc, #344]	@ (8008da4 <HAL_SD_ReadBlocks+0x30c>)
 8008c4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e097      	b.n	8008d9a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c70:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d09f      	beq.n	8008bb8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c86:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d022      	beq.n	8008cdc <HAL_SD_ReadBlocks+0x244>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d91f      	bls.n	8008cdc <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d01b      	beq.n	8008cdc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f004 f9d3 	bl	800d054 <SDMMC_CmdStopTransfer>
 8008cae:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d012      	beq.n	8008cdc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a3a      	ldr	r2, [pc, #232]	@ (8008da4 <HAL_SD_ReadBlocks+0x30c>)
 8008cbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e05e      	b.n	8008d9a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d012      	beq.n	8008d10 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a2d      	ldr	r2, [pc, #180]	@ (8008da4 <HAL_SD_ReadBlocks+0x30c>)
 8008cf0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf6:	f043 0208 	orr.w	r2, r3, #8
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e044      	b.n	8008d9a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d012      	beq.n	8008d44 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a20      	ldr	r2, [pc, #128]	@ (8008da4 <HAL_SD_ReadBlocks+0x30c>)
 8008d24:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d2a:	f043 0202 	orr.w	r2, r3, #2
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e02a      	b.n	8008d9a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d012      	beq.n	8008d78 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a13      	ldr	r2, [pc, #76]	@ (8008da4 <HAL_SD_ReadBlocks+0x30c>)
 8008d58:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d5e:	f043 0220 	orr.w	r2, r3, #32
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e010      	b.n	8008d9a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8008da8 <HAL_SD_ReadBlocks+0x310>)
 8008d7e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	e006      	b.n	8008d9a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d90:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
  }
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3748      	adds	r7, #72	@ 0x48
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	1fe00fff 	.word	0x1fe00fff
 8008da8:	18000f3a 	.word	0x18000f3a

08008dac <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b092      	sub	sp, #72	@ 0x48
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008dba:	f7f9 fb9b 	bl	80024f4 <HAL_GetTick>
 8008dbe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d107      	bne.n	8008dde <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dd2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e16b      	b.n	80090b6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	f040 815e 	bne.w	80090a8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008df2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	441a      	add	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d907      	bls.n	8008e10 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e04:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e152      	b.n	80090b6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2203      	movs	r2, #3
 8008e14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d002      	beq.n	8008e2e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2a:	025b      	lsls	r3, r3, #9
 8008e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e32:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	025b      	lsls	r3, r3, #9
 8008e38:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e3a:	2390      	movs	r3, #144	@ 0x90
 8008e3c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f107 0218 	add.w	r2, r7, #24
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f004 f821 	bl	800ce9c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e68:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d90a      	bls.n	8008e86 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2220      	movs	r2, #32
 8008e74:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f004 f8c5 	bl	800d00c <SDMMC_CmdWriteMultiBlock>
 8008e82:	6478      	str	r0, [r7, #68]	@ 0x44
 8008e84:	e009      	b.n	8008e9a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2210      	movs	r2, #16
 8008e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e92:	4618      	mov	r0, r3
 8008e94:	f004 f897 	bl	800cfc6 <SDMMC_CmdWriteSingleBlock>
 8008e98:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d012      	beq.n	8008ec6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a86      	ldr	r2, [pc, #536]	@ (80090c0 <HAL_SD_WriteBlocks+0x314>)
 8008ea6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e0f7      	b.n	80090b6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008eca:	e05c      	b.n	8008f86 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d037      	beq.n	8008f4a <HAL_SD_WriteBlocks+0x19e>
 8008eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008edc:	2b1f      	cmp	r3, #31
 8008ede:	d934      	bls.n	8008f4a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ee4:	e02b      	b.n	8008f3e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eee:	3301      	adds	r3, #1
 8008ef0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	021a      	lsls	r2, r3, #8
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f00:	3301      	adds	r3, #1
 8008f02:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	041a      	lsls	r2, r3, #16
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f12:	3301      	adds	r3, #1
 8008f14:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	061a      	lsls	r2, r3, #24
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f24:	3301      	adds	r3, #1
 8008f26:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f107 0214 	add.w	r2, r7, #20
 8008f30:	4611      	mov	r1, r2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f003 ff37 	bl	800cda6 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f40:	2b07      	cmp	r3, #7
 8008f42:	d9d0      	bls.n	8008ee6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f46:	3b20      	subs	r3, #32
 8008f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008f4a:	f7f9 fad3 	bl	80024f4 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d902      	bls.n	8008f60 <HAL_SD_WriteBlocks+0x1b4>
 8008f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d112      	bne.n	8008f86 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a56      	ldr	r2, [pc, #344]	@ (80090c0 <HAL_SD_WriteBlocks+0x314>)
 8008f66:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e097      	b.n	80090b6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f8c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d09b      	beq.n	8008ecc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68da      	ldr	r2, [r3, #12]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fa2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d022      	beq.n	8008ff8 <HAL_SD_WriteBlocks+0x24c>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d91f      	bls.n	8008ff8 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d01b      	beq.n	8008ff8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f004 f845 	bl	800d054 <SDMMC_CmdStopTransfer>
 8008fca:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d012      	beq.n	8008ff8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a3a      	ldr	r2, [pc, #232]	@ (80090c0 <HAL_SD_WriteBlocks+0x314>)
 8008fd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e05e      	b.n	80090b6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d012      	beq.n	800902c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a2d      	ldr	r2, [pc, #180]	@ (80090c0 <HAL_SD_WriteBlocks+0x314>)
 800900c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009012:	f043 0208 	orr.w	r2, r3, #8
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e044      	b.n	80090b6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b00      	cmp	r3, #0
 8009038:	d012      	beq.n	8009060 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a20      	ldr	r2, [pc, #128]	@ (80090c0 <HAL_SD_WriteBlocks+0x314>)
 8009040:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009046:	f043 0202 	orr.w	r2, r3, #2
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e02a      	b.n	80090b6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009066:	f003 0310 	and.w	r3, r3, #16
 800906a:	2b00      	cmp	r3, #0
 800906c:	d012      	beq.n	8009094 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a13      	ldr	r2, [pc, #76]	@ (80090c0 <HAL_SD_WriteBlocks+0x314>)
 8009074:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800907a:	f043 0210 	orr.w	r2, r3, #16
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e010      	b.n	80090b6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a0a      	ldr	r2, [pc, #40]	@ (80090c4 <HAL_SD_WriteBlocks+0x318>)
 800909a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	e006      	b.n	80090b6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
  }
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3748      	adds	r7, #72	@ 0x48
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	1fe00fff 	.word	0x1fe00fff
 80090c4:	18000f3a 	.word	0x18000f3a

080090c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090d6:	0f9b      	lsrs	r3, r3, #30
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090e2:	0e9b      	lsrs	r3, r3, #26
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090f4:	0e1b      	lsrs	r3, r3, #24
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	f003 0303 	and.w	r3, r3, #3
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	b2da      	uxtb	r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009112:	0a1b      	lsrs	r3, r3, #8
 8009114:	b2da      	uxtb	r2, r3
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800911e:	b2da      	uxtb	r2, r3
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009128:	0d1b      	lsrs	r3, r3, #20
 800912a:	b29a      	uxth	r2, r3
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009134:	0c1b      	lsrs	r3, r3, #16
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	b2da      	uxtb	r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009146:	0bdb      	lsrs	r3, r3, #15
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009158:	0b9b      	lsrs	r3, r3, #14
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800916a:	0b5b      	lsrs	r3, r3, #13
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800917c:	0b1b      	lsrs	r3, r3, #12
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	b2da      	uxtb	r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2200      	movs	r2, #0
 800918e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d163      	bne.n	8009260 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800919c:	009a      	lsls	r2, r3, #2
 800919e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80091a2:	4013      	ands	r3, r2
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80091a8:	0f92      	lsrs	r2, r2, #30
 80091aa:	431a      	orrs	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091b4:	0edb      	lsrs	r3, r3, #27
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 0307 	and.w	r3, r3, #7
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091c6:	0e1b      	lsrs	r3, r3, #24
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091d8:	0d5b      	lsrs	r3, r3, #21
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	f003 0307 	and.w	r3, r3, #7
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091ea:	0c9b      	lsrs	r3, r3, #18
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091fc:	0bdb      	lsrs	r3, r3, #15
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	f003 0307 	and.w	r3, r3, #7
 8009204:	b2da      	uxtb	r2, r3
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	7e1b      	ldrb	r3, [r3, #24]
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	3302      	adds	r3, #2
 8009220:	2201      	movs	r2, #1
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800922a:	fb03 f202 	mul.w	r2, r3, r2
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	7a1b      	ldrb	r3, [r3, #8]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	2201      	movs	r2, #1
 800923e:	409a      	lsls	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800924c:	0a52      	lsrs	r2, r2, #9
 800924e:	fb03 f202 	mul.w	r2, r3, r2
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800925c:	655a      	str	r2, [r3, #84]	@ 0x54
 800925e:	e031      	b.n	80092c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009264:	2b01      	cmp	r3, #1
 8009266:	d11d      	bne.n	80092a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800926c:	041b      	lsls	r3, r3, #16
 800926e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009276:	0c1b      	lsrs	r3, r3, #16
 8009278:	431a      	orrs	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	3301      	adds	r3, #1
 8009284:	029a      	lsls	r2, r3, #10
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009298:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80092a2:	e00f      	b.n	80092c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a58      	ldr	r2, [pc, #352]	@ (800940c <HAL_SD_GetCardCSD+0x344>)
 80092aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e09d      	b.n	8009400 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092c8:	0b9b      	lsrs	r3, r3, #14
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092da:	09db      	lsrs	r3, r3, #7
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092fc:	0fdb      	lsrs	r3, r3, #31
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009308:	0f5b      	lsrs	r3, r3, #29
 800930a:	b2db      	uxtb	r3, r3
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	b2da      	uxtb	r2, r3
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800931a:	0e9b      	lsrs	r3, r3, #26
 800931c:	b2db      	uxtb	r3, r3
 800931e:	f003 0307 	and.w	r3, r3, #7
 8009322:	b2da      	uxtb	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800932c:	0d9b      	lsrs	r3, r3, #22
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	b2da      	uxtb	r2, r3
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800933e:	0d5b      	lsrs	r3, r3, #21
 8009340:	b2db      	uxtb	r3, r3
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	b2da      	uxtb	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800935a:	0c1b      	lsrs	r3, r3, #16
 800935c:	b2db      	uxtb	r3, r3
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	b2da      	uxtb	r2, r3
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800936e:	0bdb      	lsrs	r3, r3, #15
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	b2da      	uxtb	r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009382:	0b9b      	lsrs	r3, r3, #14
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	b2da      	uxtb	r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009396:	0b5b      	lsrs	r3, r3, #13
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093aa:	0b1b      	lsrs	r3, r3, #12
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093be:	0a9b      	lsrs	r3, r3, #10
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093d2:	0a1b      	lsrs	r3, r3, #8
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093e6:	085b      	lsrs	r3, r3, #1
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	1fe00fff 	.word	0x1fe00fff

08009410 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b094      	sub	sp, #80	@ 0x50
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b03      	cmp	r3, #3
 800942a:	d101      	bne.n	8009430 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e0a7      	b.n	8009580 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009430:	f107 0308 	add.w	r3, r7, #8
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fb62 	bl	8009b00 <SD_SendSDStatus>
 800943c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800943e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009440:	2b00      	cmp	r3, #0
 8009442:	d011      	beq.n	8009468 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a4f      	ldr	r2, [pc, #316]	@ (8009588 <HAL_SD_GetCardStatus+0x178>)
 800944a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009452:	431a      	orrs	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009466:	e070      	b.n	800954a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	099b      	lsrs	r3, r3, #6
 800946c:	b2db      	uxtb	r3, r3
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	b2da      	uxtb	r2, r3
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	b2db      	uxtb	r3, r3
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	b2da      	uxtb	r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	0a1b      	lsrs	r3, r3, #8
 800948c:	b29b      	uxth	r3, r3
 800948e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009492:	b29a      	uxth	r2, r3
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	0e1b      	lsrs	r3, r3, #24
 8009498:	b29b      	uxth	r3, r3
 800949a:	4313      	orrs	r3, r2
 800949c:	b29a      	uxth	r2, r3
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	061a      	lsls	r2, r3, #24
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	021b      	lsls	r3, r3, #8
 80094aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80094ae:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	0a1b      	lsrs	r3, r3, #8
 80094b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80094b8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	0e1b      	lsrs	r3, r3, #24
 80094be:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	0a1b      	lsrs	r3, r3, #8
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	0d1b      	lsrs	r3, r3, #20
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	f003 030f 	and.w	r3, r3, #15
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	0c1b      	lsrs	r3, r3, #16
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	4313      	orrs	r3, r2
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	0a9b      	lsrs	r3, r3, #10
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800950c:	b2da      	uxtb	r2, r3
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	0a1b      	lsrs	r3, r3, #8
 8009516:	b2db      	uxtb	r3, r3
 8009518:	f003 0303 	and.w	r3, r3, #3
 800951c:	b2da      	uxtb	r2, r3
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	091b      	lsrs	r3, r3, #4
 8009526:	b2db      	uxtb	r3, r3
 8009528:	f003 030f 	and.w	r3, r3, #15
 800952c:	b2da      	uxtb	r2, r3
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 030f 	and.w	r3, r3, #15
 800953a:	b2da      	uxtb	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	0e1b      	lsrs	r3, r3, #24
 8009544:	b2da      	uxtb	r2, r3
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009552:	4618      	mov	r0, r3
 8009554:	f003 fcce 	bl	800cef4 <SDMMC_CmdBlockLength>
 8009558:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800955a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00d      	beq.n	800957c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a08      	ldr	r2, [pc, #32]	@ (8009588 <HAL_SD_GetCardStatus+0x178>)
 8009566:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800956c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800957c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009580:	4618      	mov	r0, r3
 8009582:	3750      	adds	r7, #80	@ 0x50
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	1fe00fff 	.word	0x1fe00fff

0800958c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80095e4:	b590      	push	{r4, r7, lr}
 80095e6:	b08d      	sub	sp, #52	@ 0x34
 80095e8:	af02      	add	r7, sp, #8
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2203      	movs	r2, #3
 80095f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009600:	2b03      	cmp	r3, #3
 8009602:	d02e      	beq.n	8009662 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800960a:	d106      	bne.n	800961a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009610:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	635a      	str	r2, [r3, #52]	@ 0x34
 8009618:	e029      	b.n	800966e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009620:	d10a      	bne.n	8009638 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fb64 	bl	8009cf0 <SD_WideBus_Enable>
 8009628:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	635a      	str	r2, [r3, #52]	@ 0x34
 8009636:	e01a      	b.n	800966e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fba1 	bl	8009d86 <SD_WideBus_Disable>
 8009644:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	635a      	str	r2, [r3, #52]	@ 0x34
 8009652:	e00c      	b.n	800966e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009658:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	635a      	str	r2, [r3, #52]	@ 0x34
 8009660:	e005      	b.n	800966e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009666:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009672:	2b00      	cmp	r3, #0
 8009674:	d007      	beq.n	8009686 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a5f      	ldr	r2, [pc, #380]	@ (80097f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800967c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009684:	e096      	b.n	80097b4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009686:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800968a:	f04f 0100 	mov.w	r1, #0
 800968e:	f7fd fdef 	bl	8007270 <HAL_RCCEx_GetPeriphCLKFreq>
 8009692:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 8083 	beq.w	80097a2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	695a      	ldr	r2, [r3, #20]
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4950      	ldr	r1, [pc, #320]	@ (80097fc <HAL_SD_ConfigWideBusOperation+0x218>)
 80096ba:	fba1 1303 	umull	r1, r3, r1, r3
 80096be:	0e1b      	lsrs	r3, r3, #24
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d303      	bcc.n	80096cc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	e05a      	b.n	8009782 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096d4:	d103      	bne.n	80096de <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	61bb      	str	r3, [r7, #24]
 80096dc:	e051      	b.n	8009782 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096e6:	d126      	bne.n	8009736 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10e      	bne.n	800970e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	4a43      	ldr	r2, [pc, #268]	@ (8009800 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d906      	bls.n	8009706 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	4a40      	ldr	r2, [pc, #256]	@ (80097fc <HAL_SD_ConfigWideBusOperation+0x218>)
 80096fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009700:	0e5b      	lsrs	r3, r3, #25
 8009702:	61bb      	str	r3, [r7, #24]
 8009704:	e03d      	b.n	8009782 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	e039      	b.n	8009782 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	69fa      	ldr	r2, [r7, #28]
 8009716:	fbb2 f3f3 	udiv	r3, r2, r3
 800971a:	4a39      	ldr	r2, [pc, #228]	@ (8009800 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d906      	bls.n	800972e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4a36      	ldr	r2, [pc, #216]	@ (80097fc <HAL_SD_ConfigWideBusOperation+0x218>)
 8009724:	fba2 2303 	umull	r2, r3, r2, r3
 8009728:	0e5b      	lsrs	r3, r3, #25
 800972a:	61bb      	str	r3, [r7, #24]
 800972c:	e029      	b.n	8009782 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	e025      	b.n	8009782 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10e      	bne.n	800975c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4a30      	ldr	r2, [pc, #192]	@ (8009804 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d906      	bls.n	8009754 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	4a2c      	ldr	r2, [pc, #176]	@ (80097fc <HAL_SD_ConfigWideBusOperation+0x218>)
 800974a:	fba2 2303 	umull	r2, r3, r2, r3
 800974e:	0e1b      	lsrs	r3, r3, #24
 8009750:	61bb      	str	r3, [r7, #24]
 8009752:	e016      	b.n	8009782 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	61bb      	str	r3, [r7, #24]
 800975a:	e012      	b.n	8009782 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	fbb2 f3f3 	udiv	r3, r2, r3
 8009768:	4a26      	ldr	r2, [pc, #152]	@ (8009804 <HAL_SD_ConfigWideBusOperation+0x220>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d906      	bls.n	800977c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4a22      	ldr	r2, [pc, #136]	@ (80097fc <HAL_SD_ConfigWideBusOperation+0x218>)
 8009772:	fba2 2303 	umull	r2, r3, r2, r3
 8009776:	0e1b      	lsrs	r3, r3, #24
 8009778:	61bb      	str	r3, [r7, #24]
 800977a:	e002      	b.n	8009782 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681c      	ldr	r4, [r3, #0]
 8009786:	466a      	mov	r2, sp
 8009788:	f107 0314 	add.w	r3, r7, #20
 800978c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009790:	e882 0003 	stmia.w	r2, {r0, r1}
 8009794:	f107 0308 	add.w	r3, r7, #8
 8009798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800979a:	4620      	mov	r0, r4
 800979c:	f003 facc 	bl	800cd38 <SDMMC_Init>
 80097a0:	e008      	b.n	80097b4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80097bc:	4618      	mov	r0, r3
 80097be:	f003 fb99 	bl	800cef4 <SDMMC_CmdBlockLength>
 80097c2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00c      	beq.n	80097e4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a0a      	ldr	r2, [pc, #40]	@ (80097f8 <HAL_SD_ConfigWideBusOperation+0x214>)
 80097d0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80097ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	372c      	adds	r7, #44	@ 0x2c
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd90      	pop	{r4, r7, pc}
 80097f8:	1fe00fff 	.word	0x1fe00fff
 80097fc:	55e63b89 	.word	0x55e63b89
 8009800:	02faf080 	.word	0x02faf080
 8009804:	017d7840 	.word	0x017d7840

08009808 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009814:	f107 030c 	add.w	r3, r7, #12
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa40 	bl	8009ca0 <SD_SendStatus>
 8009820:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	0a5b      	lsrs	r3, r3, #9
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800983e:	693b      	ldr	r3, [r7, #16]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b090      	sub	sp, #64	@ 0x40
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009854:	f7f8 fe4e 	bl	80024f4 <HAL_GetTick>
 8009858:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4618      	mov	r0, r3
 8009860:	f003 fac3 	bl	800cdea <SDMMC_GetPowerState>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d102      	bne.n	8009870 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800986a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800986e:	e0b5      	b.n	80099dc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009874:	2b03      	cmp	r3, #3
 8009876:	d02e      	beq.n	80098d6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4618      	mov	r0, r3
 800987e:	f003 fd0e 	bl	800d29e <SDMMC_CmdSendCID>
 8009882:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <SD_InitCard+0x46>
    {
      return errorstate;
 800988a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988c:	e0a6      	b.n	80099dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2100      	movs	r1, #0
 8009894:	4618      	mov	r0, r3
 8009896:	f003 faee 	bl	800ce76 <SDMMC_GetResponse>
 800989a:	4602      	mov	r2, r0
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2104      	movs	r1, #4
 80098a6:	4618      	mov	r0, r3
 80098a8:	f003 fae5 	bl	800ce76 <SDMMC_GetResponse>
 80098ac:	4602      	mov	r2, r0
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2108      	movs	r1, #8
 80098b8:	4618      	mov	r0, r3
 80098ba:	f003 fadc 	bl	800ce76 <SDMMC_GetResponse>
 80098be:	4602      	mov	r2, r0
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	210c      	movs	r1, #12
 80098ca:	4618      	mov	r0, r3
 80098cc:	f003 fad3 	bl	800ce76 <SDMMC_GetResponse>
 80098d0:	4602      	mov	r2, r0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d01d      	beq.n	800991a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80098de:	e019      	b.n	8009914 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f107 020a 	add.w	r2, r7, #10
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f003 fd16 	bl	800d31c <SDMMC_CmdSetRelAdd>
 80098f0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80098f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <SD_InitCard+0xb4>
      {
        return errorstate;
 80098f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fa:	e06f      	b.n	80099dc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80098fc:	f7f8 fdfa 	bl	80024f4 <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	f241 3287 	movw	r2, #4999	@ 0x1387
 800990a:	4293      	cmp	r3, r2
 800990c:	d902      	bls.n	8009914 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800990e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009912:	e063      	b.n	80099dc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009914:	897b      	ldrh	r3, [r7, #10]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0e2      	beq.n	80098e0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800991e:	2b03      	cmp	r3, #3
 8009920:	d036      	beq.n	8009990 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009922:	897b      	ldrh	r3, [r7, #10]
 8009924:	461a      	mov	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009932:	041b      	lsls	r3, r3, #16
 8009934:	4619      	mov	r1, r3
 8009936:	4610      	mov	r0, r2
 8009938:	f003 fcd0 	bl	800d2dc <SDMMC_CmdSendCSD>
 800993c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <SD_InitCard+0x100>
    {
      return errorstate;
 8009944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009946:	e049      	b.n	80099dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2100      	movs	r1, #0
 800994e:	4618      	mov	r0, r3
 8009950:	f003 fa91 	bl	800ce76 <SDMMC_GetResponse>
 8009954:	4602      	mov	r2, r0
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2104      	movs	r1, #4
 8009960:	4618      	mov	r0, r3
 8009962:	f003 fa88 	bl	800ce76 <SDMMC_GetResponse>
 8009966:	4602      	mov	r2, r0
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2108      	movs	r1, #8
 8009972:	4618      	mov	r0, r3
 8009974:	f003 fa7f 	bl	800ce76 <SDMMC_GetResponse>
 8009978:	4602      	mov	r2, r0
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	210c      	movs	r1, #12
 8009984:	4618      	mov	r0, r3
 8009986:	f003 fa76 	bl	800ce76 <SDMMC_GetResponse>
 800998a:	4602      	mov	r2, r0
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2104      	movs	r1, #4
 8009996:	4618      	mov	r0, r3
 8009998:	f003 fa6d 	bl	800ce76 <SDMMC_GetResponse>
 800999c:	4603      	mov	r3, r0
 800999e:	0d1a      	lsrs	r2, r3, #20
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80099a4:	f107 030c 	add.w	r3, r7, #12
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff fb8c 	bl	80090c8 <HAL_SD_GetCardCSD>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80099ba:	e00f      	b.n	80099dc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c4:	041b      	lsls	r3, r3, #16
 80099c6:	4619      	mov	r1, r3
 80099c8:	4610      	mov	r0, r2
 80099ca:	f003 fb7f 	bl	800d0cc <SDMMC_CmdSelDesel>
 80099ce:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80099d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <SD_InitCard+0x192>
  {
    return errorstate;
 80099d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d8:	e000      	b.n	80099dc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3740      	adds	r7, #64	@ 0x40
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f003 fb88 	bl	800d112 <SDMMC_CmdGoIdleState>
 8009a02:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	e072      	b.n	8009af4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f003 fb9b 	bl	800d14e <SDMMC_CmdOperCond>
 8009a18:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a20:	d10d      	bne.n	8009a3e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f003 fb70 	bl	800d112 <SDMMC_CmdGoIdleState>
 8009a32:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d004      	beq.n	8009a44 <SD_PowerON+0x60>
    {
      return errorstate;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	e05a      	b.n	8009af4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d137      	bne.n	8009abc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2100      	movs	r1, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f003 fb9b 	bl	800d18e <SDMMC_CmdAppCommand>
 8009a58:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d02d      	beq.n	8009abc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009a64:	e046      	b.n	8009af4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f003 fb8e 	bl	800d18e <SDMMC_CmdAppCommand>
 8009a72:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <SD_PowerON+0x9a>
    {
      return errorstate;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	e03a      	b.n	8009af4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	491e      	ldr	r1, [pc, #120]	@ (8009afc <SD_PowerON+0x118>)
 8009a84:	4618      	mov	r0, r3
 8009a86:	f003 fba5 	bl	800d1d4 <SDMMC_CmdAppOperCommand>
 8009a8a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009a96:	e02d      	b.n	8009af4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f003 f9e9 	bl	800ce76 <SDMMC_GetResponse>
 8009aa4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	0fdb      	lsrs	r3, r3, #31
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <SD_PowerON+0xce>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e000      	b.n	8009ab4 <SD_PowerON+0xd0>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	613b      	str	r3, [r7, #16]

    count++;
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d802      	bhi.n	8009acc <SD_PowerON+0xe8>
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d0cc      	beq.n	8009a66 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d902      	bls.n	8009adc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ad6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ada:	e00b      	b.n	8009af4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	c1100000 	.word	0xc1100000

08009b00 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08c      	sub	sp, #48	@ 0x30
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b0a:	f7f8 fcf3 	bl	80024f4 <HAL_GetTick>
 8009b0e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f003 f9ab 	bl	800ce76 <SDMMC_GetResponse>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b2a:	d102      	bne.n	8009b32 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b30:	e0b0      	b.n	8009c94 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2140      	movs	r1, #64	@ 0x40
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f003 f9db 	bl	800cef4 <SDMMC_CmdBlockLength>
 8009b3e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d005      	beq.n	8009b52 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	e0a0      	b.n	8009c94 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b5a:	041b      	lsls	r3, r3, #16
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4610      	mov	r0, r2
 8009b60:	f003 fb15 	bl	800d18e <SDMMC_CmdAppCommand>
 8009b64:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d005      	beq.n	8009b78 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	e08d      	b.n	8009c94 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b78:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009b7e:	2340      	movs	r3, #64	@ 0x40
 8009b80:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009b82:	2360      	movs	r3, #96	@ 0x60
 8009b84:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009b86:	2302      	movs	r3, #2
 8009b88:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f107 0208 	add.w	r2, r7, #8
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f003 f97d 	bl	800ce9c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f003 fbfd 	bl	800d3a6 <SDMMC_CmdStatusRegister>
 8009bac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d02b      	beq.n	8009c0c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	e069      	b.n	8009c94 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d013      	beq.n	8009bf6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009bce:	2300      	movs	r3, #0
 8009bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bd2:	e00d      	b.n	8009bf0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f003 f8d7 	bl	800cd8c <SDMMC_ReadFIFO>
 8009bde:	4602      	mov	r2, r0
 8009be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be2:	601a      	str	r2, [r3, #0]
        pData++;
 8009be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be6:	3304      	adds	r3, #4
 8009be8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bec:	3301      	adds	r3, #1
 8009bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf2:	2b07      	cmp	r3, #7
 8009bf4:	d9ee      	bls.n	8009bd4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009bf6:	f7f8 fc7d 	bl	80024f4 <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c04:	d102      	bne.n	8009c0c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c0a:	e043      	b.n	8009c94 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c12:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0d2      	beq.n	8009bc0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c20:	f003 0308 	and.w	r3, r3, #8
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009c28:	2308      	movs	r3, #8
 8009c2a:	e033      	b.n	8009c94 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c32:	f003 0302 	and.w	r3, r3, #2
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e02a      	b.n	8009c94 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c44:	f003 0320 	and.w	r3, r3, #32
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d017      	beq.n	8009c7c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009c4c:	2320      	movs	r3, #32
 8009c4e:	e021      	b.n	8009c94 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f003 f899 	bl	800cd8c <SDMMC_ReadFIFO>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5e:	601a      	str	r2, [r3, #0]
    pData++;
 8009c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c62:	3304      	adds	r3, #4
 8009c64:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c66:	f7f8 fc45 	bl	80024f4 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c74:	d102      	bne.n	8009c7c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009c76:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c7a:	e00b      	b.n	8009c94 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1e2      	bne.n	8009c50 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a03      	ldr	r2, [pc, #12]	@ (8009c9c <SD_SendSDStatus+0x19c>)
 8009c90:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3730      	adds	r7, #48	@ 0x30
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	18000f3a 	.word	0x18000f3a

08009ca0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d102      	bne.n	8009cb6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009cb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009cb4:	e018      	b.n	8009ce8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cbe:	041b      	lsls	r3, r3, #16
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	f003 fb4c 	bl	800d360 <SDMMC_CmdSendStatus>
 8009cc8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	e009      	b.n	8009ce8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f003 f8cb 	bl	800ce76 <SDMMC_GetResponse>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2100      	movs	r1, #0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f003 f8b5 	bl	800ce76 <SDMMC_GetResponse>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d16:	d102      	bne.n	8009d1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d1c:	e02f      	b.n	8009d7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d1e:	f107 030c 	add.w	r3, r7, #12
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f879 	bl	8009e1c <SD_FindSCR>
 8009d2a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	e023      	b.n	8009d7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01c      	beq.n	8009d7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d48:	041b      	lsls	r3, r3, #16
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	f003 fa1e 	bl	800d18e <SDMMC_CmdAppCommand>
 8009d52:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	e00f      	b.n	8009d7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2102      	movs	r1, #2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f003 fa55 	bl	800d214 <SDMMC_CmdBusWidth>
 8009d6a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	e003      	b.n	8009d7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d76:	2300      	movs	r3, #0
 8009d78:	e001      	b.n	8009d7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d7a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b086      	sub	sp, #24
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	2300      	movs	r3, #0
 8009d94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f003 f86a 	bl	800ce76 <SDMMC_GetResponse>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009da8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dac:	d102      	bne.n	8009db4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009dae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009db2:	e02f      	b.n	8009e14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009db4:	f107 030c 	add.w	r3, r7, #12
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f82e 	bl	8009e1c <SD_FindSCR>
 8009dc0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	e023      	b.n	8009e14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01c      	beq.n	8009e10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dde:	041b      	lsls	r3, r3, #16
 8009de0:	4619      	mov	r1, r3
 8009de2:	4610      	mov	r0, r2
 8009de4:	f003 f9d3 	bl	800d18e <SDMMC_CmdAppCommand>
 8009de8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	e00f      	b.n	8009e14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2100      	movs	r1, #0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f003 fa0a 	bl	800d214 <SDMMC_CmdBusWidth>
 8009e00:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	e003      	b.n	8009e14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e001      	b.n	8009e14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e10:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08e      	sub	sp, #56	@ 0x38
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e26:	f7f8 fb65 	bl	80024f4 <HAL_GetTick>
 8009e2a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009e30:	2300      	movs	r3, #0
 8009e32:	60bb      	str	r3, [r7, #8]
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2108      	movs	r1, #8
 8009e42:	4618      	mov	r0, r3
 8009e44:	f003 f856 	bl	800cef4 <SDMMC_CmdBlockLength>
 8009e48:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e52:	e0ad      	b.n	8009fb0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e5c:	041b      	lsls	r3, r3, #16
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4610      	mov	r0, r2
 8009e62:	f003 f994 	bl	800d18e <SDMMC_CmdAppCommand>
 8009e66:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e70:	e09e      	b.n	8009fb0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e72:	f04f 33ff 	mov.w	r3, #4294967295
 8009e76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009e78:	2308      	movs	r3, #8
 8009e7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009e7c:	2330      	movs	r3, #48	@ 0x30
 8009e7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e80:	2302      	movs	r3, #2
 8009e82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f107 0210 	add.w	r2, r7, #16
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f003 f800 	bl	800ce9c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f003 f9da 	bl	800d25a <SDMMC_CmdSendSCR>
 8009ea6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d027      	beq.n	8009efe <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb0:	e07e      	b.n	8009fb0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d113      	bne.n	8009ee8 <SD_FindSCR+0xcc>
 8009ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d110      	bne.n	8009ee8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f002 ff5e 	bl	800cd8c <SDMMC_ReadFIFO>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f002 ff57 	bl	800cd8c <SDMMC_ReadFIFO>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	60fb      	str	r3, [r7, #12]
      index++;
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ee8:	f7f8 fb04 	bl	80024f4 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef6:	d102      	bne.n	8009efe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009ef8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009efc:	e058      	b.n	8009fb0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f04:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009f08:	4013      	ands	r3, r2
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0d1      	beq.n	8009eb2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d005      	beq.n	8009f28 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2208      	movs	r2, #8
 8009f22:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009f24:	2308      	movs	r3, #8
 8009f26:	e043      	b.n	8009fb0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d005      	beq.n	8009f42 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f3e:	2302      	movs	r3, #2
 8009f40:	e036      	b.n	8009fb0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f48:	f003 0320 	and.w	r3, r3, #32
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d005      	beq.n	8009f5c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2220      	movs	r2, #32
 8009f56:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009f58:	2320      	movs	r3, #32
 8009f5a:	e029      	b.n	8009fb0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a15      	ldr	r2, [pc, #84]	@ (8009fb8 <SD_FindSCR+0x19c>)
 8009f62:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	061a      	lsls	r2, r3, #24
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	021b      	lsls	r3, r3, #8
 8009f6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009f70:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	0a1b      	lsrs	r3, r3, #8
 8009f76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009f7a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	0e1b      	lsrs	r3, r3, #24
 8009f80:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f84:	601a      	str	r2, [r3, #0]
    scr++;
 8009f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f88:	3304      	adds	r3, #4
 8009f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	061a      	lsls	r2, r3, #24
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009f98:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	0a1b      	lsrs	r3, r3, #8
 8009f9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009fa2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	0e1b      	lsrs	r3, r3, #24
 8009fa8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3738      	adds	r7, #56	@ 0x38
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	18000f3a 	.word	0x18000f3a

08009fbc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e10f      	b.n	800a1ee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a87      	ldr	r2, [pc, #540]	@ (800a1f8 <HAL_SPI_Init+0x23c>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d00f      	beq.n	8009ffe <HAL_SPI_Init+0x42>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a86      	ldr	r2, [pc, #536]	@ (800a1fc <HAL_SPI_Init+0x240>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d00a      	beq.n	8009ffe <HAL_SPI_Init+0x42>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a84      	ldr	r2, [pc, #528]	@ (800a200 <HAL_SPI_Init+0x244>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d005      	beq.n	8009ffe <HAL_SPI_Init+0x42>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	2b0f      	cmp	r3, #15
 8009ff8:	d901      	bls.n	8009ffe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e0f7      	b.n	800a1ee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fe2e 	bl	800ac60 <SPI_GetPacketSize>
 800a004:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a7b      	ldr	r2, [pc, #492]	@ (800a1f8 <HAL_SPI_Init+0x23c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d00c      	beq.n	800a02a <HAL_SPI_Init+0x6e>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a79      	ldr	r2, [pc, #484]	@ (800a1fc <HAL_SPI_Init+0x240>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d007      	beq.n	800a02a <HAL_SPI_Init+0x6e>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a78      	ldr	r2, [pc, #480]	@ (800a200 <HAL_SPI_Init+0x244>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d002      	beq.n	800a02a <HAL_SPI_Init+0x6e>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b08      	cmp	r3, #8
 800a028:	d811      	bhi.n	800a04e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a02e:	4a72      	ldr	r2, [pc, #456]	@ (800a1f8 <HAL_SPI_Init+0x23c>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d009      	beq.n	800a048 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a70      	ldr	r2, [pc, #448]	@ (800a1fc <HAL_SPI_Init+0x240>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d004      	beq.n	800a048 <HAL_SPI_Init+0x8c>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a6f      	ldr	r2, [pc, #444]	@ (800a200 <HAL_SPI_Init+0x244>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d104      	bne.n	800a052 <HAL_SPI_Init+0x96>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2b10      	cmp	r3, #16
 800a04c:	d901      	bls.n	800a052 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e0cd      	b.n	800a1ee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7f7 fe76 	bl	8001d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2202      	movs	r2, #2
 800a070:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f022 0201 	bic.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a08e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a098:	d119      	bne.n	800a0ce <HAL_SPI_Init+0x112>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0a2:	d103      	bne.n	800a0ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d008      	beq.n	800a0be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10c      	bne.n	800a0ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a0b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0bc:	d107      	bne.n	800a0ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a0cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00f      	beq.n	800a0fa <HAL_SPI_Init+0x13e>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	2b06      	cmp	r3, #6
 800a0e0:	d90b      	bls.n	800a0fa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	e007      	b.n	800a10a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a108:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	69da      	ldr	r2, [r3, #28]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a112:	431a      	orrs	r2, r3
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	431a      	orrs	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a11c:	ea42 0103 	orr.w	r1, r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a134:	431a      	orrs	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a13a:	431a      	orrs	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	431a      	orrs	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	431a      	orrs	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	431a      	orrs	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	431a      	orrs	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	431a      	orrs	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a15e:	431a      	orrs	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	431a      	orrs	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a16a:	ea42 0103 	orr.w	r1, r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	430a      	orrs	r2, r1
 800a178:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d113      	bne.n	800a1aa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a194:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a1a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 0201 	bic.w	r2, r2, #1
 800a1b8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00a      	beq.n	800a1dc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	40013000 	.word	0x40013000
 800a1fc:	40003800 	.word	0x40003800
 800a200:	40003c00 	.word	0x40003c00

0800a204 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af02      	add	r7, sp, #8
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	603b      	str	r3, [r7, #0]
 800a210:	4613      	mov	r3, r2
 800a212:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3320      	adds	r3, #32
 800a21a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a21c:	f7f8 f96a 	bl	80024f4 <HAL_GetTick>
 800a220:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d001      	beq.n	800a232 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a22e:	2302      	movs	r3, #2
 800a230:	e1d1      	b.n	800a5d6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <HAL_SPI_Transmit+0x3a>
 800a238:	88fb      	ldrh	r3, [r7, #6]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e1c9      	b.n	800a5d6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d101      	bne.n	800a250 <HAL_SPI_Transmit+0x4c>
 800a24c:	2302      	movs	r3, #2
 800a24e:	e1c2      	b.n	800a5d6 <HAL_SPI_Transmit+0x3d2>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2203      	movs	r2, #3
 800a25c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	88fa      	ldrh	r2, [r7, #6]
 800a272:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	88fa      	ldrh	r2, [r7, #6]
 800a27a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a2a8:	d108      	bne.n	800a2bc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	e009      	b.n	800a2d0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a2ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	4b96      	ldr	r3, [pc, #600]	@ (800a530 <HAL_SPI_Transmit+0x32c>)
 800a2d8:	4013      	ands	r3, r2
 800a2da:	88f9      	ldrh	r1, [r7, #6]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	6812      	ldr	r2, [r2, #0]
 800a2e0:	430b      	orrs	r3, r1
 800a2e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0201 	orr.w	r2, r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2fc:	d107      	bne.n	800a30e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a30c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	2b0f      	cmp	r3, #15
 800a314:	d947      	bls.n	800a3a6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a316:	e03f      	b.n	800a398 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	f003 0302 	and.w	r3, r3, #2
 800a322:	2b02      	cmp	r3, #2
 800a324:	d114      	bne.n	800a350 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	6812      	ldr	r2, [r2, #0]
 800a330:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a336:	1d1a      	adds	r2, r3, #4
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a342:	b29b      	uxth	r3, r3
 800a344:	3b01      	subs	r3, #1
 800a346:	b29a      	uxth	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a34e:	e023      	b.n	800a398 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a350:	f7f8 f8d0 	bl	80024f4 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d803      	bhi.n	800a368 <HAL_SPI_Transmit+0x164>
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a366:	d102      	bne.n	800a36e <HAL_SPI_Transmit+0x16a>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d114      	bne.n	800a398 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 fba8 	bl	800aac4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a37a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	e11e      	b.n	800a5d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1b9      	bne.n	800a318 <HAL_SPI_Transmit+0x114>
 800a3a4:	e0f1      	b.n	800a58a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	2b07      	cmp	r3, #7
 800a3ac:	f240 80e6 	bls.w	800a57c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a3b0:	e05d      	b.n	800a46e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	695b      	ldr	r3, [r3, #20]
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d132      	bne.n	800a426 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d918      	bls.n	800a3fe <HAL_SPI_Transmit+0x1fa>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d014      	beq.n	800a3fe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6812      	ldr	r2, [r2, #0]
 800a3de:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3e4:	1d1a      	adds	r2, r3, #4
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3b02      	subs	r3, #2
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a3fc:	e037      	b.n	800a46e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a402:	881a      	ldrh	r2, [r3, #0]
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a40c:	1c9a      	adds	r2, r3, #2
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a418:	b29b      	uxth	r3, r3
 800a41a:	3b01      	subs	r3, #1
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a424:	e023      	b.n	800a46e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a426:	f7f8 f865 	bl	80024f4 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d803      	bhi.n	800a43e <HAL_SPI_Transmit+0x23a>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43c:	d102      	bne.n	800a444 <HAL_SPI_Transmit+0x240>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d114      	bne.n	800a46e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 fb3d 	bl	800aac4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a450:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e0b3      	b.n	800a5d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a474:	b29b      	uxth	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d19b      	bne.n	800a3b2 <HAL_SPI_Transmit+0x1ae>
 800a47a:	e086      	b.n	800a58a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b02      	cmp	r3, #2
 800a488:	d154      	bne.n	800a534 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a490:	b29b      	uxth	r3, r3
 800a492:	2b03      	cmp	r3, #3
 800a494:	d918      	bls.n	800a4c8 <HAL_SPI_Transmit+0x2c4>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a49a:	2b40      	cmp	r3, #64	@ 0x40
 800a49c:	d914      	bls.n	800a4c8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6812      	ldr	r2, [r2, #0]
 800a4a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4ae:	1d1a      	adds	r2, r3, #4
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	3b04      	subs	r3, #4
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a4c6:	e059      	b.n	800a57c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d917      	bls.n	800a504 <HAL_SPI_Transmit+0x300>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d013      	beq.n	800a504 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4e0:	881a      	ldrh	r2, [r3, #0]
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4ea:	1c9a      	adds	r2, r3, #2
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	3b02      	subs	r3, #2
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a502:	e03b      	b.n	800a57c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3320      	adds	r3, #32
 800a50e:	7812      	ldrb	r2, [r2, #0]
 800a510:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a522:	b29b      	uxth	r3, r3
 800a524:	3b01      	subs	r3, #1
 800a526:	b29a      	uxth	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a52e:	e025      	b.n	800a57c <HAL_SPI_Transmit+0x378>
 800a530:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a534:	f7f7 ffde 	bl	80024f4 <HAL_GetTick>
 800a538:	4602      	mov	r2, r0
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d803      	bhi.n	800a54c <HAL_SPI_Transmit+0x348>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54a:	d102      	bne.n	800a552 <HAL_SPI_Transmit+0x34e>
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d114      	bne.n	800a57c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f000 fab6 	bl	800aac4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a55e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e02c      	b.n	800a5d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a582:	b29b      	uxth	r3, r3
 800a584:	2b00      	cmp	r3, #0
 800a586:	f47f af79 	bne.w	800a47c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2200      	movs	r2, #0
 800a592:	2108      	movs	r1, #8
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 fb35 	bl	800ac04 <SPI_WaitOnFlagUntilTimeout>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d007      	beq.n	800a5b0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5a6:	f043 0220 	orr.w	r2, r3, #32
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 fa87 	bl	800aac4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e000      	b.n	800a5d6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
  }
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop

0800a5e0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5f4:	095b      	lsrs	r3, r3, #5
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3330      	adds	r3, #48	@ 0x30
 800a602:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a604:	f7f7 ff76 	bl	80024f4 <HAL_GetTick>
 800a608:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2b01      	cmp	r3, #1
 800a614:	d001      	beq.n	800a61a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a616:	2302      	movs	r3, #2
 800a618:	e250      	b.n	800aabc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <HAL_SPI_Receive+0x46>
 800a620:	88fb      	ldrh	r3, [r7, #6]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e248      	b.n	800aabc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_SPI_Receive+0x58>
 800a634:	2302      	movs	r3, #2
 800a636:	e241      	b.n	800aabc <HAL_SPI_Receive+0x4dc>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2204      	movs	r2, #4
 800a644:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	88fa      	ldrh	r2, [r7, #6]
 800a65a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	88fa      	ldrh	r2, [r7, #6]
 800a662:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a690:	d108      	bne.n	800a6a4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	e009      	b.n	800a6b8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a6b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	4b95      	ldr	r3, [pc, #596]	@ (800a914 <HAL_SPI_Receive+0x334>)
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	88f9      	ldrh	r1, [r7, #6]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	6812      	ldr	r2, [r2, #0]
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f042 0201 	orr.w	r2, r2, #1
 800a6da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6e4:	d107      	bne.n	800a6f6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	2b0f      	cmp	r3, #15
 800a6fc:	d96c      	bls.n	800a7d8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a6fe:	e064      	b.n	800a7ca <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b01      	cmp	r3, #1
 800a714:	d114      	bne.n	800a740 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a71e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a720:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a726:	1d1a      	adds	r2, r3, #4
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a732:	b29b      	uxth	r3, r3
 800a734:	3b01      	subs	r3, #1
 800a736:	b29a      	uxth	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a73e:	e044      	b.n	800a7ca <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a746:	b29b      	uxth	r3, r3
 800a748:	8bfa      	ldrh	r2, [r7, #30]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d919      	bls.n	800a782 <HAL_SPI_Receive+0x1a2>
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d014      	beq.n	800a782 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a760:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a762:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a768:	1d1a      	adds	r2, r3, #4
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a774:	b29b      	uxth	r3, r3
 800a776:	3b01      	subs	r3, #1
 800a778:	b29a      	uxth	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a780:	e023      	b.n	800a7ca <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a782:	f7f7 feb7 	bl	80024f4 <HAL_GetTick>
 800a786:	4602      	mov	r2, r0
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d803      	bhi.n	800a79a <HAL_SPI_Receive+0x1ba>
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a798:	d102      	bne.n	800a7a0 <HAL_SPI_Receive+0x1c0>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d114      	bne.n	800a7ca <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 f98f 	bl	800aac4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e178      	b.n	800aabc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d194      	bne.n	800a700 <HAL_SPI_Receive+0x120>
 800a7d6:	e15e      	b.n	800aa96 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	2b07      	cmp	r3, #7
 800a7de:	f240 8153 	bls.w	800aa88 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a7e2:	e08f      	b.n	800a904 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d114      	bne.n	800a824 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7fe:	69ba      	ldr	r2, [r7, #24]
 800a800:	8812      	ldrh	r2, [r2, #0]
 800a802:	b292      	uxth	r2, r2
 800a804:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a80a:	1c9a      	adds	r2, r3, #2
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a816:	b29b      	uxth	r3, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a822:	e06f      	b.n	800a904 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	8bfa      	ldrh	r2, [r7, #30]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d924      	bls.n	800a87c <HAL_SPI_Receive+0x29c>
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d01f      	beq.n	800a87c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a840:	69ba      	ldr	r2, [r7, #24]
 800a842:	8812      	ldrh	r2, [r2, #0]
 800a844:	b292      	uxth	r2, r2
 800a846:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a84c:	1c9a      	adds	r2, r3, #2
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	8812      	ldrh	r2, [r2, #0]
 800a85a:	b292      	uxth	r2, r2
 800a85c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a862:	1c9a      	adds	r2, r3, #2
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a86e:	b29b      	uxth	r3, r3
 800a870:	3b02      	subs	r3, #2
 800a872:	b29a      	uxth	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a87a:	e043      	b.n	800a904 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a882:	b29b      	uxth	r3, r3
 800a884:	2b01      	cmp	r3, #1
 800a886:	d119      	bne.n	800a8bc <HAL_SPI_Receive+0x2dc>
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d014      	beq.n	800a8bc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	8812      	ldrh	r2, [r2, #0]
 800a89a:	b292      	uxth	r2, r2
 800a89c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8a2:	1c9a      	adds	r2, r3, #2
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a8ba:	e023      	b.n	800a904 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8bc:	f7f7 fe1a 	bl	80024f4 <HAL_GetTick>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d803      	bhi.n	800a8d4 <HAL_SPI_Receive+0x2f4>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d102      	bne.n	800a8da <HAL_SPI_Receive+0x2fa>
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d114      	bne.n	800a904 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 f8f2 	bl	800aac4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e0db      	b.n	800aabc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f47f af69 	bne.w	800a7e4 <HAL_SPI_Receive+0x204>
 800a912:	e0c0      	b.n	800aa96 <HAL_SPI_Receive+0x4b6>
 800a914:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d117      	bne.n	800a95e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a93a:	7812      	ldrb	r2, [r2, #0]
 800a93c:	b2d2      	uxtb	r2, r2
 800a93e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a950:	b29b      	uxth	r3, r3
 800a952:	3b01      	subs	r3, #1
 800a954:	b29a      	uxth	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a95c:	e094      	b.n	800aa88 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a964:	b29b      	uxth	r3, r3
 800a966:	8bfa      	ldrh	r2, [r7, #30]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d946      	bls.n	800a9fa <HAL_SPI_Receive+0x41a>
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d041      	beq.n	800a9fa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a982:	7812      	ldrb	r2, [r2, #0]
 800a984:	b2d2      	uxtb	r2, r2
 800a986:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a98c:	1c5a      	adds	r2, r3, #1
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a99e:	7812      	ldrb	r2, [r2, #0]
 800a9a0:	b2d2      	uxtb	r2, r2
 800a9a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a8:	1c5a      	adds	r2, r3, #1
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9ba:	7812      	ldrb	r2, [r2, #0]
 800a9bc:	b2d2      	uxtb	r2, r2
 800a9be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9c4:	1c5a      	adds	r2, r3, #1
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9d6:	7812      	ldrb	r2, [r2, #0]
 800a9d8:	b2d2      	uxtb	r2, r2
 800a9da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	3b04      	subs	r3, #4
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a9f8:	e046      	b.n	800aa88 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d81c      	bhi.n	800aa40 <HAL_SPI_Receive+0x460>
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d017      	beq.n	800aa40 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa1c:	7812      	ldrb	r2, [r2, #0]
 800aa1e:	b2d2      	uxtb	r2, r2
 800aa20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	3b01      	subs	r3, #1
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aa3e:	e023      	b.n	800aa88 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa40:	f7f7 fd58 	bl	80024f4 <HAL_GetTick>
 800aa44:	4602      	mov	r2, r0
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d803      	bhi.n	800aa58 <HAL_SPI_Receive+0x478>
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa56:	d102      	bne.n	800aa5e <HAL_SPI_Receive+0x47e>
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d114      	bne.n	800aa88 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 f830 	bl	800aac4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e019      	b.n	800aabc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f47f af41 	bne.w	800a918 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 f814 	bl	800aac4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d001      	beq.n	800aaba <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e000      	b.n	800aabc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800aaba:	2300      	movs	r3, #0
  }
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3720      	adds	r7, #32
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	699a      	ldr	r2, [r3, #24]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f042 0208 	orr.w	r2, r2, #8
 800aae2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	699a      	ldr	r2, [r3, #24]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0210 	orr.w	r2, r2, #16
 800aaf2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 0201 	bic.w	r2, r2, #1
 800ab02:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6919      	ldr	r1, [r3, #16]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	4b3c      	ldr	r3, [pc, #240]	@ (800ac00 <SPI_CloseTransfer+0x13c>)
 800ab10:	400b      	ands	r3, r1
 800ab12:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689a      	ldr	r2, [r3, #8]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ab22:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d014      	beq.n	800ab5a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f003 0320 	and.w	r3, r3, #32
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00f      	beq.n	800ab5a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	699a      	ldr	r2, [r3, #24]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f042 0220 	orr.w	r2, r2, #32
 800ab58:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d014      	beq.n	800ab90 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00f      	beq.n	800ab90 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab76:	f043 0204 	orr.w	r2, r3, #4
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	699a      	ldr	r2, [r3, #24]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab8e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00f      	beq.n	800abba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aba0:	f043 0201 	orr.w	r2, r3, #1
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	699a      	ldr	r2, [r3, #24]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abb8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00f      	beq.n	800abe4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abca:	f043 0208 	orr.w	r2, r3, #8
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	699a      	ldr	r2, [r3, #24]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abe2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800abf4:	bf00      	nop
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	fffffc90 	.word	0xfffffc90

0800ac04 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	4613      	mov	r3, r2
 800ac12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ac14:	e010      	b.n	800ac38 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac16:	f7f7 fc6d 	bl	80024f4 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d803      	bhi.n	800ac2e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2c:	d102      	bne.n	800ac34 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e00f      	b.n	800ac58 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	695a      	ldr	r2, [r3, #20]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	4013      	ands	r3, r2
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	bf0c      	ite	eq
 800ac48:	2301      	moveq	r3, #1
 800ac4a:	2300      	movne	r3, #0
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	461a      	mov	r2, r3
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d0df      	beq.n	800ac16 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac6c:	095b      	lsrs	r3, r3, #5
 800ac6e:	3301      	adds	r3, #1
 800ac70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	3301      	adds	r3, #1
 800ac78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	3307      	adds	r3, #7
 800ac7e:	08db      	lsrs	r3, r3, #3
 800ac80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	fb02 f303 	mul.w	r3, r2, r3
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e042      	b.n	800ad2e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d106      	bne.n	800acc0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7f7 f904 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2224      	movs	r2, #36	@ 0x24
 800acc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0201 	bic.w	r2, r2, #1
 800acd6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fd91 	bl	800b808 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f826 	bl	800ad38 <UART_SetConfig>
 800acec:	4603      	mov	r3, r0
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d101      	bne.n	800acf6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e01b      	b.n	800ad2e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ad04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ad14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f042 0201 	orr.w	r2, r2, #1
 800ad24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fe10 	bl	800b94c <UART_CheckIdleState>
 800ad2c:	4603      	mov	r3, r0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
	...

0800ad38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad3c:	b092      	sub	sp, #72	@ 0x48
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	689a      	ldr	r2, [r3, #8]
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	431a      	orrs	r2, r3
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	431a      	orrs	r2, r3
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	69db      	ldr	r3, [r3, #28]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	4bbe      	ldr	r3, [pc, #760]	@ (800b060 <UART_SetConfig+0x328>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	6812      	ldr	r2, [r2, #0]
 800ad6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ad70:	430b      	orrs	r3, r1
 800ad72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	68da      	ldr	r2, [r3, #12]
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	430a      	orrs	r2, r1
 800ad88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4ab3      	ldr	r2, [pc, #716]	@ (800b064 <UART_SetConfig+0x32c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d004      	beq.n	800ada4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ada0:	4313      	orrs	r3, r2
 800ada2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	689a      	ldr	r2, [r3, #8]
 800adaa:	4baf      	ldr	r3, [pc, #700]	@ (800b068 <UART_SetConfig+0x330>)
 800adac:	4013      	ands	r3, r2
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	6812      	ldr	r2, [r2, #0]
 800adb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800adb4:	430b      	orrs	r3, r1
 800adb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adbe:	f023 010f 	bic.w	r1, r3, #15
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	430a      	orrs	r2, r1
 800adcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4aa6      	ldr	r2, [pc, #664]	@ (800b06c <UART_SetConfig+0x334>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d177      	bne.n	800aec8 <UART_SetConfig+0x190>
 800add8:	4ba5      	ldr	r3, [pc, #660]	@ (800b070 <UART_SetConfig+0x338>)
 800adda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800addc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ade0:	2b28      	cmp	r3, #40	@ 0x28
 800ade2:	d86d      	bhi.n	800aec0 <UART_SetConfig+0x188>
 800ade4:	a201      	add	r2, pc, #4	@ (adr r2, 800adec <UART_SetConfig+0xb4>)
 800ade6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adea:	bf00      	nop
 800adec:	0800ae91 	.word	0x0800ae91
 800adf0:	0800aec1 	.word	0x0800aec1
 800adf4:	0800aec1 	.word	0x0800aec1
 800adf8:	0800aec1 	.word	0x0800aec1
 800adfc:	0800aec1 	.word	0x0800aec1
 800ae00:	0800aec1 	.word	0x0800aec1
 800ae04:	0800aec1 	.word	0x0800aec1
 800ae08:	0800aec1 	.word	0x0800aec1
 800ae0c:	0800ae99 	.word	0x0800ae99
 800ae10:	0800aec1 	.word	0x0800aec1
 800ae14:	0800aec1 	.word	0x0800aec1
 800ae18:	0800aec1 	.word	0x0800aec1
 800ae1c:	0800aec1 	.word	0x0800aec1
 800ae20:	0800aec1 	.word	0x0800aec1
 800ae24:	0800aec1 	.word	0x0800aec1
 800ae28:	0800aec1 	.word	0x0800aec1
 800ae2c:	0800aea1 	.word	0x0800aea1
 800ae30:	0800aec1 	.word	0x0800aec1
 800ae34:	0800aec1 	.word	0x0800aec1
 800ae38:	0800aec1 	.word	0x0800aec1
 800ae3c:	0800aec1 	.word	0x0800aec1
 800ae40:	0800aec1 	.word	0x0800aec1
 800ae44:	0800aec1 	.word	0x0800aec1
 800ae48:	0800aec1 	.word	0x0800aec1
 800ae4c:	0800aea9 	.word	0x0800aea9
 800ae50:	0800aec1 	.word	0x0800aec1
 800ae54:	0800aec1 	.word	0x0800aec1
 800ae58:	0800aec1 	.word	0x0800aec1
 800ae5c:	0800aec1 	.word	0x0800aec1
 800ae60:	0800aec1 	.word	0x0800aec1
 800ae64:	0800aec1 	.word	0x0800aec1
 800ae68:	0800aec1 	.word	0x0800aec1
 800ae6c:	0800aeb1 	.word	0x0800aeb1
 800ae70:	0800aec1 	.word	0x0800aec1
 800ae74:	0800aec1 	.word	0x0800aec1
 800ae78:	0800aec1 	.word	0x0800aec1
 800ae7c:	0800aec1 	.word	0x0800aec1
 800ae80:	0800aec1 	.word	0x0800aec1
 800ae84:	0800aec1 	.word	0x0800aec1
 800ae88:	0800aec1 	.word	0x0800aec1
 800ae8c:	0800aeb9 	.word	0x0800aeb9
 800ae90:	2301      	movs	r3, #1
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae96:	e222      	b.n	800b2de <UART_SetConfig+0x5a6>
 800ae98:	2304      	movs	r3, #4
 800ae9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9e:	e21e      	b.n	800b2de <UART_SetConfig+0x5a6>
 800aea0:	2308      	movs	r3, #8
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea6:	e21a      	b.n	800b2de <UART_SetConfig+0x5a6>
 800aea8:	2310      	movs	r3, #16
 800aeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeae:	e216      	b.n	800b2de <UART_SetConfig+0x5a6>
 800aeb0:	2320      	movs	r3, #32
 800aeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb6:	e212      	b.n	800b2de <UART_SetConfig+0x5a6>
 800aeb8:	2340      	movs	r3, #64	@ 0x40
 800aeba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aebe:	e20e      	b.n	800b2de <UART_SetConfig+0x5a6>
 800aec0:	2380      	movs	r3, #128	@ 0x80
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec6:	e20a      	b.n	800b2de <UART_SetConfig+0x5a6>
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a69      	ldr	r2, [pc, #420]	@ (800b074 <UART_SetConfig+0x33c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d130      	bne.n	800af34 <UART_SetConfig+0x1fc>
 800aed2:	4b67      	ldr	r3, [pc, #412]	@ (800b070 <UART_SetConfig+0x338>)
 800aed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	2b05      	cmp	r3, #5
 800aedc:	d826      	bhi.n	800af2c <UART_SetConfig+0x1f4>
 800aede:	a201      	add	r2, pc, #4	@ (adr r2, 800aee4 <UART_SetConfig+0x1ac>)
 800aee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee4:	0800aefd 	.word	0x0800aefd
 800aee8:	0800af05 	.word	0x0800af05
 800aeec:	0800af0d 	.word	0x0800af0d
 800aef0:	0800af15 	.word	0x0800af15
 800aef4:	0800af1d 	.word	0x0800af1d
 800aef8:	0800af25 	.word	0x0800af25
 800aefc:	2300      	movs	r3, #0
 800aefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af02:	e1ec      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af04:	2304      	movs	r3, #4
 800af06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af0a:	e1e8      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af0c:	2308      	movs	r3, #8
 800af0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af12:	e1e4      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af14:	2310      	movs	r3, #16
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1a:	e1e0      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af1c:	2320      	movs	r3, #32
 800af1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af22:	e1dc      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af24:	2340      	movs	r3, #64	@ 0x40
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2a:	e1d8      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af2c:	2380      	movs	r3, #128	@ 0x80
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af32:	e1d4      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a4f      	ldr	r2, [pc, #316]	@ (800b078 <UART_SetConfig+0x340>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d130      	bne.n	800afa0 <UART_SetConfig+0x268>
 800af3e:	4b4c      	ldr	r3, [pc, #304]	@ (800b070 <UART_SetConfig+0x338>)
 800af40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	2b05      	cmp	r3, #5
 800af48:	d826      	bhi.n	800af98 <UART_SetConfig+0x260>
 800af4a:	a201      	add	r2, pc, #4	@ (adr r2, 800af50 <UART_SetConfig+0x218>)
 800af4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af50:	0800af69 	.word	0x0800af69
 800af54:	0800af71 	.word	0x0800af71
 800af58:	0800af79 	.word	0x0800af79
 800af5c:	0800af81 	.word	0x0800af81
 800af60:	0800af89 	.word	0x0800af89
 800af64:	0800af91 	.word	0x0800af91
 800af68:	2300      	movs	r3, #0
 800af6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af6e:	e1b6      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af70:	2304      	movs	r3, #4
 800af72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af76:	e1b2      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af78:	2308      	movs	r3, #8
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7e:	e1ae      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af80:	2310      	movs	r3, #16
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af86:	e1aa      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af88:	2320      	movs	r3, #32
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8e:	e1a6      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af90:	2340      	movs	r3, #64	@ 0x40
 800af92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af96:	e1a2      	b.n	800b2de <UART_SetConfig+0x5a6>
 800af98:	2380      	movs	r3, #128	@ 0x80
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9e:	e19e      	b.n	800b2de <UART_SetConfig+0x5a6>
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a35      	ldr	r2, [pc, #212]	@ (800b07c <UART_SetConfig+0x344>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d130      	bne.n	800b00c <UART_SetConfig+0x2d4>
 800afaa:	4b31      	ldr	r3, [pc, #196]	@ (800b070 <UART_SetConfig+0x338>)
 800afac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afae:	f003 0307 	and.w	r3, r3, #7
 800afb2:	2b05      	cmp	r3, #5
 800afb4:	d826      	bhi.n	800b004 <UART_SetConfig+0x2cc>
 800afb6:	a201      	add	r2, pc, #4	@ (adr r2, 800afbc <UART_SetConfig+0x284>)
 800afb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbc:	0800afd5 	.word	0x0800afd5
 800afc0:	0800afdd 	.word	0x0800afdd
 800afc4:	0800afe5 	.word	0x0800afe5
 800afc8:	0800afed 	.word	0x0800afed
 800afcc:	0800aff5 	.word	0x0800aff5
 800afd0:	0800affd 	.word	0x0800affd
 800afd4:	2300      	movs	r3, #0
 800afd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afda:	e180      	b.n	800b2de <UART_SetConfig+0x5a6>
 800afdc:	2304      	movs	r3, #4
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe2:	e17c      	b.n	800b2de <UART_SetConfig+0x5a6>
 800afe4:	2308      	movs	r3, #8
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afea:	e178      	b.n	800b2de <UART_SetConfig+0x5a6>
 800afec:	2310      	movs	r3, #16
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff2:	e174      	b.n	800b2de <UART_SetConfig+0x5a6>
 800aff4:	2320      	movs	r3, #32
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affa:	e170      	b.n	800b2de <UART_SetConfig+0x5a6>
 800affc:	2340      	movs	r3, #64	@ 0x40
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b002:	e16c      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b004:	2380      	movs	r3, #128	@ 0x80
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00a:	e168      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a1b      	ldr	r2, [pc, #108]	@ (800b080 <UART_SetConfig+0x348>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d142      	bne.n	800b09c <UART_SetConfig+0x364>
 800b016:	4b16      	ldr	r3, [pc, #88]	@ (800b070 <UART_SetConfig+0x338>)
 800b018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01a:	f003 0307 	and.w	r3, r3, #7
 800b01e:	2b05      	cmp	r3, #5
 800b020:	d838      	bhi.n	800b094 <UART_SetConfig+0x35c>
 800b022:	a201      	add	r2, pc, #4	@ (adr r2, 800b028 <UART_SetConfig+0x2f0>)
 800b024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b028:	0800b041 	.word	0x0800b041
 800b02c:	0800b049 	.word	0x0800b049
 800b030:	0800b051 	.word	0x0800b051
 800b034:	0800b059 	.word	0x0800b059
 800b038:	0800b085 	.word	0x0800b085
 800b03c:	0800b08d 	.word	0x0800b08d
 800b040:	2300      	movs	r3, #0
 800b042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b046:	e14a      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b048:	2304      	movs	r3, #4
 800b04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04e:	e146      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b050:	2308      	movs	r3, #8
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b056:	e142      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b058:	2310      	movs	r3, #16
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b05e:	e13e      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b060:	cfff69f3 	.word	0xcfff69f3
 800b064:	58000c00 	.word	0x58000c00
 800b068:	11fff4ff 	.word	0x11fff4ff
 800b06c:	40011000 	.word	0x40011000
 800b070:	58024400 	.word	0x58024400
 800b074:	40004400 	.word	0x40004400
 800b078:	40004800 	.word	0x40004800
 800b07c:	40004c00 	.word	0x40004c00
 800b080:	40005000 	.word	0x40005000
 800b084:	2320      	movs	r3, #32
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b08a:	e128      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b08c:	2340      	movs	r3, #64	@ 0x40
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b092:	e124      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b094:	2380      	movs	r3, #128	@ 0x80
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b09a:	e120      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4acb      	ldr	r2, [pc, #812]	@ (800b3d0 <UART_SetConfig+0x698>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d176      	bne.n	800b194 <UART_SetConfig+0x45c>
 800b0a6:	4bcb      	ldr	r3, [pc, #812]	@ (800b3d4 <UART_SetConfig+0x69c>)
 800b0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0ae:	2b28      	cmp	r3, #40	@ 0x28
 800b0b0:	d86c      	bhi.n	800b18c <UART_SetConfig+0x454>
 800b0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b8 <UART_SetConfig+0x380>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b15d 	.word	0x0800b15d
 800b0bc:	0800b18d 	.word	0x0800b18d
 800b0c0:	0800b18d 	.word	0x0800b18d
 800b0c4:	0800b18d 	.word	0x0800b18d
 800b0c8:	0800b18d 	.word	0x0800b18d
 800b0cc:	0800b18d 	.word	0x0800b18d
 800b0d0:	0800b18d 	.word	0x0800b18d
 800b0d4:	0800b18d 	.word	0x0800b18d
 800b0d8:	0800b165 	.word	0x0800b165
 800b0dc:	0800b18d 	.word	0x0800b18d
 800b0e0:	0800b18d 	.word	0x0800b18d
 800b0e4:	0800b18d 	.word	0x0800b18d
 800b0e8:	0800b18d 	.word	0x0800b18d
 800b0ec:	0800b18d 	.word	0x0800b18d
 800b0f0:	0800b18d 	.word	0x0800b18d
 800b0f4:	0800b18d 	.word	0x0800b18d
 800b0f8:	0800b16d 	.word	0x0800b16d
 800b0fc:	0800b18d 	.word	0x0800b18d
 800b100:	0800b18d 	.word	0x0800b18d
 800b104:	0800b18d 	.word	0x0800b18d
 800b108:	0800b18d 	.word	0x0800b18d
 800b10c:	0800b18d 	.word	0x0800b18d
 800b110:	0800b18d 	.word	0x0800b18d
 800b114:	0800b18d 	.word	0x0800b18d
 800b118:	0800b175 	.word	0x0800b175
 800b11c:	0800b18d 	.word	0x0800b18d
 800b120:	0800b18d 	.word	0x0800b18d
 800b124:	0800b18d 	.word	0x0800b18d
 800b128:	0800b18d 	.word	0x0800b18d
 800b12c:	0800b18d 	.word	0x0800b18d
 800b130:	0800b18d 	.word	0x0800b18d
 800b134:	0800b18d 	.word	0x0800b18d
 800b138:	0800b17d 	.word	0x0800b17d
 800b13c:	0800b18d 	.word	0x0800b18d
 800b140:	0800b18d 	.word	0x0800b18d
 800b144:	0800b18d 	.word	0x0800b18d
 800b148:	0800b18d 	.word	0x0800b18d
 800b14c:	0800b18d 	.word	0x0800b18d
 800b150:	0800b18d 	.word	0x0800b18d
 800b154:	0800b18d 	.word	0x0800b18d
 800b158:	0800b185 	.word	0x0800b185
 800b15c:	2301      	movs	r3, #1
 800b15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b162:	e0bc      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b164:	2304      	movs	r3, #4
 800b166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b16a:	e0b8      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b16c:	2308      	movs	r3, #8
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b172:	e0b4      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b174:	2310      	movs	r3, #16
 800b176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b17a:	e0b0      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b17c:	2320      	movs	r3, #32
 800b17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b182:	e0ac      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b184:	2340      	movs	r3, #64	@ 0x40
 800b186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b18a:	e0a8      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b18c:	2380      	movs	r3, #128	@ 0x80
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b192:	e0a4      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a8f      	ldr	r2, [pc, #572]	@ (800b3d8 <UART_SetConfig+0x6a0>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d130      	bne.n	800b200 <UART_SetConfig+0x4c8>
 800b19e:	4b8d      	ldr	r3, [pc, #564]	@ (800b3d4 <UART_SetConfig+0x69c>)
 800b1a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1a2:	f003 0307 	and.w	r3, r3, #7
 800b1a6:	2b05      	cmp	r3, #5
 800b1a8:	d826      	bhi.n	800b1f8 <UART_SetConfig+0x4c0>
 800b1aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b0 <UART_SetConfig+0x478>)
 800b1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b0:	0800b1c9 	.word	0x0800b1c9
 800b1b4:	0800b1d1 	.word	0x0800b1d1
 800b1b8:	0800b1d9 	.word	0x0800b1d9
 800b1bc:	0800b1e1 	.word	0x0800b1e1
 800b1c0:	0800b1e9 	.word	0x0800b1e9
 800b1c4:	0800b1f1 	.word	0x0800b1f1
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ce:	e086      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b1d0:	2304      	movs	r3, #4
 800b1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1d6:	e082      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b1d8:	2308      	movs	r3, #8
 800b1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1de:	e07e      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b1e0:	2310      	movs	r3, #16
 800b1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1e6:	e07a      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b1e8:	2320      	movs	r3, #32
 800b1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ee:	e076      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b1f0:	2340      	movs	r3, #64	@ 0x40
 800b1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f6:	e072      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b1f8:	2380      	movs	r3, #128	@ 0x80
 800b1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fe:	e06e      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a75      	ldr	r2, [pc, #468]	@ (800b3dc <UART_SetConfig+0x6a4>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d130      	bne.n	800b26c <UART_SetConfig+0x534>
 800b20a:	4b72      	ldr	r3, [pc, #456]	@ (800b3d4 <UART_SetConfig+0x69c>)
 800b20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b20e:	f003 0307 	and.w	r3, r3, #7
 800b212:	2b05      	cmp	r3, #5
 800b214:	d826      	bhi.n	800b264 <UART_SetConfig+0x52c>
 800b216:	a201      	add	r2, pc, #4	@ (adr r2, 800b21c <UART_SetConfig+0x4e4>)
 800b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21c:	0800b235 	.word	0x0800b235
 800b220:	0800b23d 	.word	0x0800b23d
 800b224:	0800b245 	.word	0x0800b245
 800b228:	0800b24d 	.word	0x0800b24d
 800b22c:	0800b255 	.word	0x0800b255
 800b230:	0800b25d 	.word	0x0800b25d
 800b234:	2300      	movs	r3, #0
 800b236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b23a:	e050      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b23c:	2304      	movs	r3, #4
 800b23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b242:	e04c      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b244:	2308      	movs	r3, #8
 800b246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b24a:	e048      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b24c:	2310      	movs	r3, #16
 800b24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b252:	e044      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b254:	2320      	movs	r3, #32
 800b256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25a:	e040      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b25c:	2340      	movs	r3, #64	@ 0x40
 800b25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b262:	e03c      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b264:	2380      	movs	r3, #128	@ 0x80
 800b266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b26a:	e038      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a5b      	ldr	r2, [pc, #364]	@ (800b3e0 <UART_SetConfig+0x6a8>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d130      	bne.n	800b2d8 <UART_SetConfig+0x5a0>
 800b276:	4b57      	ldr	r3, [pc, #348]	@ (800b3d4 <UART_SetConfig+0x69c>)
 800b278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b27a:	f003 0307 	and.w	r3, r3, #7
 800b27e:	2b05      	cmp	r3, #5
 800b280:	d826      	bhi.n	800b2d0 <UART_SetConfig+0x598>
 800b282:	a201      	add	r2, pc, #4	@ (adr r2, 800b288 <UART_SetConfig+0x550>)
 800b284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b288:	0800b2a1 	.word	0x0800b2a1
 800b28c:	0800b2a9 	.word	0x0800b2a9
 800b290:	0800b2b1 	.word	0x0800b2b1
 800b294:	0800b2b9 	.word	0x0800b2b9
 800b298:	0800b2c1 	.word	0x0800b2c1
 800b29c:	0800b2c9 	.word	0x0800b2c9
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2a6:	e01a      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ae:	e016      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b2b0:	2308      	movs	r3, #8
 800b2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2b6:	e012      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b2b8:	2310      	movs	r3, #16
 800b2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2be:	e00e      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b2c0:	2320      	movs	r3, #32
 800b2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2c6:	e00a      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b2c8:	2340      	movs	r3, #64	@ 0x40
 800b2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ce:	e006      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b2d0:	2380      	movs	r3, #128	@ 0x80
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2d6:	e002      	b.n	800b2de <UART_SetConfig+0x5a6>
 800b2d8:	2380      	movs	r3, #128	@ 0x80
 800b2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a3f      	ldr	r2, [pc, #252]	@ (800b3e0 <UART_SetConfig+0x6a8>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	f040 80f8 	bne.w	800b4da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b2ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b2ee:	2b20      	cmp	r3, #32
 800b2f0:	dc46      	bgt.n	800b380 <UART_SetConfig+0x648>
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	f2c0 8082 	blt.w	800b3fc <UART_SetConfig+0x6c4>
 800b2f8:	3b02      	subs	r3, #2
 800b2fa:	2b1e      	cmp	r3, #30
 800b2fc:	d87e      	bhi.n	800b3fc <UART_SetConfig+0x6c4>
 800b2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b304 <UART_SetConfig+0x5cc>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b387 	.word	0x0800b387
 800b308:	0800b3fd 	.word	0x0800b3fd
 800b30c:	0800b38f 	.word	0x0800b38f
 800b310:	0800b3fd 	.word	0x0800b3fd
 800b314:	0800b3fd 	.word	0x0800b3fd
 800b318:	0800b3fd 	.word	0x0800b3fd
 800b31c:	0800b39f 	.word	0x0800b39f
 800b320:	0800b3fd 	.word	0x0800b3fd
 800b324:	0800b3fd 	.word	0x0800b3fd
 800b328:	0800b3fd 	.word	0x0800b3fd
 800b32c:	0800b3fd 	.word	0x0800b3fd
 800b330:	0800b3fd 	.word	0x0800b3fd
 800b334:	0800b3fd 	.word	0x0800b3fd
 800b338:	0800b3fd 	.word	0x0800b3fd
 800b33c:	0800b3af 	.word	0x0800b3af
 800b340:	0800b3fd 	.word	0x0800b3fd
 800b344:	0800b3fd 	.word	0x0800b3fd
 800b348:	0800b3fd 	.word	0x0800b3fd
 800b34c:	0800b3fd 	.word	0x0800b3fd
 800b350:	0800b3fd 	.word	0x0800b3fd
 800b354:	0800b3fd 	.word	0x0800b3fd
 800b358:	0800b3fd 	.word	0x0800b3fd
 800b35c:	0800b3fd 	.word	0x0800b3fd
 800b360:	0800b3fd 	.word	0x0800b3fd
 800b364:	0800b3fd 	.word	0x0800b3fd
 800b368:	0800b3fd 	.word	0x0800b3fd
 800b36c:	0800b3fd 	.word	0x0800b3fd
 800b370:	0800b3fd 	.word	0x0800b3fd
 800b374:	0800b3fd 	.word	0x0800b3fd
 800b378:	0800b3fd 	.word	0x0800b3fd
 800b37c:	0800b3ef 	.word	0x0800b3ef
 800b380:	2b40      	cmp	r3, #64	@ 0x40
 800b382:	d037      	beq.n	800b3f4 <UART_SetConfig+0x6bc>
 800b384:	e03a      	b.n	800b3fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b386:	f7fc fcf3 	bl	8007d70 <HAL_RCCEx_GetD3PCLK1Freq>
 800b38a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b38c:	e03c      	b.n	800b408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b38e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b392:	4618      	mov	r0, r3
 800b394:	f7fc fd02 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b39c:	e034      	b.n	800b408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b39e:	f107 0318 	add.w	r3, r7, #24
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fc fe4e 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ac:	e02c      	b.n	800b408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ae:	4b09      	ldr	r3, [pc, #36]	@ (800b3d4 <UART_SetConfig+0x69c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 0320 	and.w	r3, r3, #32
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d016      	beq.n	800b3e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3ba:	4b06      	ldr	r3, [pc, #24]	@ (800b3d4 <UART_SetConfig+0x69c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	08db      	lsrs	r3, r3, #3
 800b3c0:	f003 0303 	and.w	r3, r3, #3
 800b3c4:	4a07      	ldr	r2, [pc, #28]	@ (800b3e4 <UART_SetConfig+0x6ac>)
 800b3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3cc:	e01c      	b.n	800b408 <UART_SetConfig+0x6d0>
 800b3ce:	bf00      	nop
 800b3d0:	40011400 	.word	0x40011400
 800b3d4:	58024400 	.word	0x58024400
 800b3d8:	40007800 	.word	0x40007800
 800b3dc:	40007c00 	.word	0x40007c00
 800b3e0:	58000c00 	.word	0x58000c00
 800b3e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b3e8:	4b9d      	ldr	r3, [pc, #628]	@ (800b660 <UART_SetConfig+0x928>)
 800b3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ec:	e00c      	b.n	800b408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3ee:	4b9d      	ldr	r3, [pc, #628]	@ (800b664 <UART_SetConfig+0x92c>)
 800b3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f2:	e009      	b.n	800b408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3fa:	e005      	b.n	800b408 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b406:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f000 81de 	beq.w	800b7cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b414:	4a94      	ldr	r2, [pc, #592]	@ (800b668 <UART_SetConfig+0x930>)
 800b416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b41a:	461a      	mov	r2, r3
 800b41c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b422:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	685a      	ldr	r2, [r3, #4]
 800b428:	4613      	mov	r3, r2
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	4413      	add	r3, r2
 800b42e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b430:	429a      	cmp	r2, r3
 800b432:	d305      	bcc.n	800b440 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d903      	bls.n	800b448 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b446:	e1c1      	b.n	800b7cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b44a:	2200      	movs	r2, #0
 800b44c:	60bb      	str	r3, [r7, #8]
 800b44e:	60fa      	str	r2, [r7, #12]
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b454:	4a84      	ldr	r2, [pc, #528]	@ (800b668 <UART_SetConfig+0x930>)
 800b456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	2200      	movs	r2, #0
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	607a      	str	r2, [r7, #4]
 800b462:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b466:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b46a:	f7f4 ff91 	bl	8000390 <__aeabi_uldivmod>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	4610      	mov	r0, r2
 800b474:	4619      	mov	r1, r3
 800b476:	f04f 0200 	mov.w	r2, #0
 800b47a:	f04f 0300 	mov.w	r3, #0
 800b47e:	020b      	lsls	r3, r1, #8
 800b480:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b484:	0202      	lsls	r2, r0, #8
 800b486:	6979      	ldr	r1, [r7, #20]
 800b488:	6849      	ldr	r1, [r1, #4]
 800b48a:	0849      	lsrs	r1, r1, #1
 800b48c:	2000      	movs	r0, #0
 800b48e:	460c      	mov	r4, r1
 800b490:	4605      	mov	r5, r0
 800b492:	eb12 0804 	adds.w	r8, r2, r4
 800b496:	eb43 0905 	adc.w	r9, r3, r5
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	469a      	mov	sl, r3
 800b4a2:	4693      	mov	fp, r2
 800b4a4:	4652      	mov	r2, sl
 800b4a6:	465b      	mov	r3, fp
 800b4a8:	4640      	mov	r0, r8
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	f7f4 ff70 	bl	8000390 <__aeabi_uldivmod>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4be:	d308      	bcc.n	800b4d2 <UART_SetConfig+0x79a>
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4c6:	d204      	bcs.n	800b4d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4ce:	60da      	str	r2, [r3, #12]
 800b4d0:	e17c      	b.n	800b7cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b4d8:	e178      	b.n	800b7cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	69db      	ldr	r3, [r3, #28]
 800b4de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4e2:	f040 80c5 	bne.w	800b670 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b4e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4ea:	2b20      	cmp	r3, #32
 800b4ec:	dc48      	bgt.n	800b580 <UART_SetConfig+0x848>
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	db7b      	blt.n	800b5ea <UART_SetConfig+0x8b2>
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	d879      	bhi.n	800b5ea <UART_SetConfig+0x8b2>
 800b4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4fc <UART_SetConfig+0x7c4>)
 800b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fc:	0800b587 	.word	0x0800b587
 800b500:	0800b58f 	.word	0x0800b58f
 800b504:	0800b5eb 	.word	0x0800b5eb
 800b508:	0800b5eb 	.word	0x0800b5eb
 800b50c:	0800b597 	.word	0x0800b597
 800b510:	0800b5eb 	.word	0x0800b5eb
 800b514:	0800b5eb 	.word	0x0800b5eb
 800b518:	0800b5eb 	.word	0x0800b5eb
 800b51c:	0800b5a7 	.word	0x0800b5a7
 800b520:	0800b5eb 	.word	0x0800b5eb
 800b524:	0800b5eb 	.word	0x0800b5eb
 800b528:	0800b5eb 	.word	0x0800b5eb
 800b52c:	0800b5eb 	.word	0x0800b5eb
 800b530:	0800b5eb 	.word	0x0800b5eb
 800b534:	0800b5eb 	.word	0x0800b5eb
 800b538:	0800b5eb 	.word	0x0800b5eb
 800b53c:	0800b5b7 	.word	0x0800b5b7
 800b540:	0800b5eb 	.word	0x0800b5eb
 800b544:	0800b5eb 	.word	0x0800b5eb
 800b548:	0800b5eb 	.word	0x0800b5eb
 800b54c:	0800b5eb 	.word	0x0800b5eb
 800b550:	0800b5eb 	.word	0x0800b5eb
 800b554:	0800b5eb 	.word	0x0800b5eb
 800b558:	0800b5eb 	.word	0x0800b5eb
 800b55c:	0800b5eb 	.word	0x0800b5eb
 800b560:	0800b5eb 	.word	0x0800b5eb
 800b564:	0800b5eb 	.word	0x0800b5eb
 800b568:	0800b5eb 	.word	0x0800b5eb
 800b56c:	0800b5eb 	.word	0x0800b5eb
 800b570:	0800b5eb 	.word	0x0800b5eb
 800b574:	0800b5eb 	.word	0x0800b5eb
 800b578:	0800b5eb 	.word	0x0800b5eb
 800b57c:	0800b5dd 	.word	0x0800b5dd
 800b580:	2b40      	cmp	r3, #64	@ 0x40
 800b582:	d02e      	beq.n	800b5e2 <UART_SetConfig+0x8aa>
 800b584:	e031      	b.n	800b5ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b586:	f7fa fc21 	bl	8005dcc <HAL_RCC_GetPCLK1Freq>
 800b58a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b58c:	e033      	b.n	800b5f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b58e:	f7fa fc33 	bl	8005df8 <HAL_RCC_GetPCLK2Freq>
 800b592:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b594:	e02f      	b.n	800b5f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fc fbfe 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a4:	e027      	b.n	800b5f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a6:	f107 0318 	add.w	r3, r7, #24
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fc fd4a 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5b4:	e01f      	b.n	800b5f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5b6:	4b2d      	ldr	r3, [pc, #180]	@ (800b66c <UART_SetConfig+0x934>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5c2:	4b2a      	ldr	r3, [pc, #168]	@ (800b66c <UART_SetConfig+0x934>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	08db      	lsrs	r3, r3, #3
 800b5c8:	f003 0303 	and.w	r3, r3, #3
 800b5cc:	4a24      	ldr	r2, [pc, #144]	@ (800b660 <UART_SetConfig+0x928>)
 800b5ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5d4:	e00f      	b.n	800b5f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b5d6:	4b22      	ldr	r3, [pc, #136]	@ (800b660 <UART_SetConfig+0x928>)
 800b5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5da:	e00c      	b.n	800b5f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5dc:	4b21      	ldr	r3, [pc, #132]	@ (800b664 <UART_SetConfig+0x92c>)
 800b5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e0:	e009      	b.n	800b5f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e8:	e005      	b.n	800b5f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b5f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 80e7 	beq.w	800b7cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b602:	4a19      	ldr	r2, [pc, #100]	@ (800b668 <UART_SetConfig+0x930>)
 800b604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b608:	461a      	mov	r2, r3
 800b60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b60c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b610:	005a      	lsls	r2, r3, #1
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	085b      	lsrs	r3, r3, #1
 800b618:	441a      	add	r2, r3
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b622:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b626:	2b0f      	cmp	r3, #15
 800b628:	d916      	bls.n	800b658 <UART_SetConfig+0x920>
 800b62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b630:	d212      	bcs.n	800b658 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b634:	b29b      	uxth	r3, r3
 800b636:	f023 030f 	bic.w	r3, r3, #15
 800b63a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63e:	085b      	lsrs	r3, r3, #1
 800b640:	b29b      	uxth	r3, r3
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	b29a      	uxth	r2, r3
 800b648:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b64a:	4313      	orrs	r3, r2
 800b64c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b654:	60da      	str	r2, [r3, #12]
 800b656:	e0b9      	b.n	800b7cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b65e:	e0b5      	b.n	800b7cc <UART_SetConfig+0xa94>
 800b660:	03d09000 	.word	0x03d09000
 800b664:	003d0900 	.word	0x003d0900
 800b668:	08015de4 	.word	0x08015de4
 800b66c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b670:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b674:	2b20      	cmp	r3, #32
 800b676:	dc49      	bgt.n	800b70c <UART_SetConfig+0x9d4>
 800b678:	2b00      	cmp	r3, #0
 800b67a:	db7c      	blt.n	800b776 <UART_SetConfig+0xa3e>
 800b67c:	2b20      	cmp	r3, #32
 800b67e:	d87a      	bhi.n	800b776 <UART_SetConfig+0xa3e>
 800b680:	a201      	add	r2, pc, #4	@ (adr r2, 800b688 <UART_SetConfig+0x950>)
 800b682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b686:	bf00      	nop
 800b688:	0800b713 	.word	0x0800b713
 800b68c:	0800b71b 	.word	0x0800b71b
 800b690:	0800b777 	.word	0x0800b777
 800b694:	0800b777 	.word	0x0800b777
 800b698:	0800b723 	.word	0x0800b723
 800b69c:	0800b777 	.word	0x0800b777
 800b6a0:	0800b777 	.word	0x0800b777
 800b6a4:	0800b777 	.word	0x0800b777
 800b6a8:	0800b733 	.word	0x0800b733
 800b6ac:	0800b777 	.word	0x0800b777
 800b6b0:	0800b777 	.word	0x0800b777
 800b6b4:	0800b777 	.word	0x0800b777
 800b6b8:	0800b777 	.word	0x0800b777
 800b6bc:	0800b777 	.word	0x0800b777
 800b6c0:	0800b777 	.word	0x0800b777
 800b6c4:	0800b777 	.word	0x0800b777
 800b6c8:	0800b743 	.word	0x0800b743
 800b6cc:	0800b777 	.word	0x0800b777
 800b6d0:	0800b777 	.word	0x0800b777
 800b6d4:	0800b777 	.word	0x0800b777
 800b6d8:	0800b777 	.word	0x0800b777
 800b6dc:	0800b777 	.word	0x0800b777
 800b6e0:	0800b777 	.word	0x0800b777
 800b6e4:	0800b777 	.word	0x0800b777
 800b6e8:	0800b777 	.word	0x0800b777
 800b6ec:	0800b777 	.word	0x0800b777
 800b6f0:	0800b777 	.word	0x0800b777
 800b6f4:	0800b777 	.word	0x0800b777
 800b6f8:	0800b777 	.word	0x0800b777
 800b6fc:	0800b777 	.word	0x0800b777
 800b700:	0800b777 	.word	0x0800b777
 800b704:	0800b777 	.word	0x0800b777
 800b708:	0800b769 	.word	0x0800b769
 800b70c:	2b40      	cmp	r3, #64	@ 0x40
 800b70e:	d02e      	beq.n	800b76e <UART_SetConfig+0xa36>
 800b710:	e031      	b.n	800b776 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b712:	f7fa fb5b 	bl	8005dcc <HAL_RCC_GetPCLK1Freq>
 800b716:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b718:	e033      	b.n	800b782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b71a:	f7fa fb6d 	bl	8005df8 <HAL_RCC_GetPCLK2Freq>
 800b71e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b720:	e02f      	b.n	800b782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b726:	4618      	mov	r0, r3
 800b728:	f7fc fb38 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b730:	e027      	b.n	800b782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b732:	f107 0318 	add.w	r3, r7, #24
 800b736:	4618      	mov	r0, r3
 800b738:	f7fc fc84 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b740:	e01f      	b.n	800b782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b742:	4b2d      	ldr	r3, [pc, #180]	@ (800b7f8 <UART_SetConfig+0xac0>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 0320 	and.w	r3, r3, #32
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d009      	beq.n	800b762 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b74e:	4b2a      	ldr	r3, [pc, #168]	@ (800b7f8 <UART_SetConfig+0xac0>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	08db      	lsrs	r3, r3, #3
 800b754:	f003 0303 	and.w	r3, r3, #3
 800b758:	4a28      	ldr	r2, [pc, #160]	@ (800b7fc <UART_SetConfig+0xac4>)
 800b75a:	fa22 f303 	lsr.w	r3, r2, r3
 800b75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b760:	e00f      	b.n	800b782 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b762:	4b26      	ldr	r3, [pc, #152]	@ (800b7fc <UART_SetConfig+0xac4>)
 800b764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b766:	e00c      	b.n	800b782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b768:	4b25      	ldr	r3, [pc, #148]	@ (800b800 <UART_SetConfig+0xac8>)
 800b76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b76c:	e009      	b.n	800b782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b76e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b774:	e005      	b.n	800b782 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b780:	bf00      	nop
    }

    if (pclk != 0U)
 800b782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b784:	2b00      	cmp	r3, #0
 800b786:	d021      	beq.n	800b7cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b78c:	4a1d      	ldr	r2, [pc, #116]	@ (800b804 <UART_SetConfig+0xacc>)
 800b78e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b792:	461a      	mov	r2, r3
 800b794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b796:	fbb3 f2f2 	udiv	r2, r3, r2
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	085b      	lsrs	r3, r3, #1
 800b7a0:	441a      	add	r2, r3
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ae:	2b0f      	cmp	r3, #15
 800b7b0:	d909      	bls.n	800b7c6 <UART_SetConfig+0xa8e>
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7b8:	d205      	bcs.n	800b7c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	60da      	str	r2, [r3, #12]
 800b7c4:	e002      	b.n	800b7cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b7e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3748      	adds	r7, #72	@ 0x48
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7f6:	bf00      	nop
 800b7f8:	58024400 	.word	0x58024400
 800b7fc:	03d09000 	.word	0x03d09000
 800b800:	003d0900 	.word	0x003d0900
 800b804:	08015de4 	.word	0x08015de4

0800b808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b814:	f003 0308 	and.w	r3, r3, #8
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00a      	beq.n	800b832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	430a      	orrs	r2, r1
 800b830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00a      	beq.n	800b854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b858:	f003 0302 	and.w	r3, r3, #2
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00a      	beq.n	800b876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	430a      	orrs	r2, r1
 800b874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b87a:	f003 0304 	and.w	r3, r3, #4
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00a      	beq.n	800b898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	430a      	orrs	r2, r1
 800b896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b89c:	f003 0310 	and.w	r3, r3, #16
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00a      	beq.n	800b8ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8be:	f003 0320 	and.w	r3, r3, #32
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00a      	beq.n	800b8dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d01a      	beq.n	800b91e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b906:	d10a      	bne.n	800b91e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	430a      	orrs	r2, r1
 800b91c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	430a      	orrs	r2, r1
 800b93e:	605a      	str	r2, [r3, #4]
  }
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b098      	sub	sp, #96	@ 0x60
 800b950:	af02      	add	r7, sp, #8
 800b952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b95c:	f7f6 fdca 	bl	80024f4 <HAL_GetTick>
 800b960:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0308 	and.w	r3, r3, #8
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d12f      	bne.n	800b9d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b970:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b978:	2200      	movs	r2, #0
 800b97a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f88e 	bl	800baa0 <UART_WaitOnFlagUntilTimeout>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d022      	beq.n	800b9d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b992:	e853 3f00 	ldrex	r3, [r3]
 800b996:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b99a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b99e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9b0:	e841 2300 	strex	r3, r2, [r1]
 800b9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e6      	bne.n	800b98a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2220      	movs	r2, #32
 800b9c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	e063      	b.n	800ba98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 0304 	and.w	r3, r3, #4
 800b9da:	2b04      	cmp	r3, #4
 800b9dc:	d149      	bne.n	800ba72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f857 	bl	800baa0 <UART_WaitOnFlagUntilTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d03c      	beq.n	800ba72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba00:	e853 3f00 	ldrex	r3, [r3]
 800ba04:	623b      	str	r3, [r7, #32]
   return(result);
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba16:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba1e:	e841 2300 	strex	r3, r2, [r1]
 800ba22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e6      	bne.n	800b9f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3308      	adds	r3, #8
 800ba30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f023 0301 	bic.w	r3, r3, #1
 800ba40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3308      	adds	r3, #8
 800ba48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba4a:	61fa      	str	r2, [r7, #28]
 800ba4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	69b9      	ldr	r1, [r7, #24]
 800ba50:	69fa      	ldr	r2, [r7, #28]
 800ba52:	e841 2300 	strex	r3, r2, [r1]
 800ba56:	617b      	str	r3, [r7, #20]
   return(result);
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e5      	bne.n	800ba2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2220      	movs	r2, #32
 800ba62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba6e:	2303      	movs	r3, #3
 800ba70:	e012      	b.n	800ba98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2220      	movs	r2, #32
 800ba76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3758      	adds	r7, #88	@ 0x58
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	603b      	str	r3, [r7, #0]
 800baac:	4613      	mov	r3, r2
 800baae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bab0:	e04f      	b.n	800bb52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab8:	d04b      	beq.n	800bb52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baba:	f7f6 fd1b 	bl	80024f4 <HAL_GetTick>
 800babe:	4602      	mov	r2, r0
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	69ba      	ldr	r2, [r7, #24]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d302      	bcc.n	800bad0 <UART_WaitOnFlagUntilTimeout+0x30>
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e04e      	b.n	800bb72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 0304 	and.w	r3, r3, #4
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d037      	beq.n	800bb52 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2b80      	cmp	r3, #128	@ 0x80
 800bae6:	d034      	beq.n	800bb52 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2b40      	cmp	r3, #64	@ 0x40
 800baec:	d031      	beq.n	800bb52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	69db      	ldr	r3, [r3, #28]
 800baf4:	f003 0308 	and.w	r3, r3, #8
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	d110      	bne.n	800bb1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2208      	movs	r2, #8
 800bb02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 f839 	bl	800bb7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2208      	movs	r2, #8
 800bb0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e029      	b.n	800bb72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	69db      	ldr	r3, [r3, #28]
 800bb24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb2c:	d111      	bne.n	800bb52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f000 f81f 	bl	800bb7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2220      	movs	r2, #32
 800bb42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	e00f      	b.n	800bb72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	69da      	ldr	r2, [r3, #28]
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	4013      	ands	r3, r2
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	bf0c      	ite	eq
 800bb62:	2301      	moveq	r3, #1
 800bb64:	2300      	movne	r3, #0
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	461a      	mov	r2, r3
 800bb6a:	79fb      	ldrb	r3, [r7, #7]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d0a0      	beq.n	800bab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b095      	sub	sp, #84	@ 0x54
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb8c:	e853 3f00 	ldrex	r3, [r3]
 800bb90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bba2:	643b      	str	r3, [r7, #64]	@ 0x40
 800bba4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bba8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbaa:	e841 2300 	strex	r3, r2, [r1]
 800bbae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e6      	bne.n	800bb84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbc6:	69fa      	ldr	r2, [r7, #28]
 800bbc8:	4b1e      	ldr	r3, [pc, #120]	@ (800bc44 <UART_EndRxTransfer+0xc8>)
 800bbca:	4013      	ands	r3, r2
 800bbcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3308      	adds	r3, #8
 800bbd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e5      	bne.n	800bbb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d118      	bne.n	800bc24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	e853 3f00 	ldrex	r3, [r3]
 800bbfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	f023 0310 	bic.w	r3, r3, #16
 800bc06:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc10:	61bb      	str	r3, [r7, #24]
 800bc12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	6979      	ldr	r1, [r7, #20]
 800bc16:	69ba      	ldr	r2, [r7, #24]
 800bc18:	e841 2300 	strex	r3, r2, [r1]
 800bc1c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e6      	bne.n	800bbf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2220      	movs	r2, #32
 800bc28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bc38:	bf00      	nop
 800bc3a:	3754      	adds	r7, #84	@ 0x54
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	effffffe 	.word	0xeffffffe

0800bc48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d101      	bne.n	800bc5e <HAL_UARTEx_DisableFifoMode+0x16>
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	e027      	b.n	800bcae <HAL_UARTEx_DisableFifoMode+0x66>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2224      	movs	r2, #36	@ 0x24
 800bc6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f022 0201 	bic.w	r2, r2, #1
 800bc84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bc8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2220      	movs	r2, #32
 800bca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d101      	bne.n	800bcd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcce:	2302      	movs	r3, #2
 800bcd0:	e02d      	b.n	800bd2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2224      	movs	r2, #36	@ 0x24
 800bcde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f022 0201 	bic.w	r2, r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f850 	bl	800bdb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2220      	movs	r2, #32
 800bd20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b084      	sub	sp, #16
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d101      	bne.n	800bd4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	e02d      	b.n	800bdaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2224      	movs	r2, #36	@ 0x24
 800bd5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 0201 	bic.w	r2, r2, #1
 800bd74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	430a      	orrs	r2, r1
 800bd88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f812 	bl	800bdb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d108      	bne.n	800bdd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bdd4:	e031      	b.n	800be3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdd6:	2310      	movs	r3, #16
 800bdd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdda:	2310      	movs	r3, #16
 800bddc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	0e5b      	lsrs	r3, r3, #25
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	f003 0307 	and.w	r3, r3, #7
 800bdec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	0f5b      	lsrs	r3, r3, #29
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	f003 0307 	and.w	r3, r3, #7
 800bdfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
 800be00:	7b3a      	ldrb	r2, [r7, #12]
 800be02:	4911      	ldr	r1, [pc, #68]	@ (800be48 <UARTEx_SetNbDataToProcess+0x94>)
 800be04:	5c8a      	ldrb	r2, [r1, r2]
 800be06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be0a:	7b3a      	ldrb	r2, [r7, #12]
 800be0c:	490f      	ldr	r1, [pc, #60]	@ (800be4c <UARTEx_SetNbDataToProcess+0x98>)
 800be0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be10:	fb93 f3f2 	sdiv	r3, r3, r2
 800be14:	b29a      	uxth	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
 800be1e:	7b7a      	ldrb	r2, [r7, #13]
 800be20:	4909      	ldr	r1, [pc, #36]	@ (800be48 <UARTEx_SetNbDataToProcess+0x94>)
 800be22:	5c8a      	ldrb	r2, [r1, r2]
 800be24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be28:	7b7a      	ldrb	r2, [r7, #13]
 800be2a:	4908      	ldr	r1, [pc, #32]	@ (800be4c <UARTEx_SetNbDataToProcess+0x98>)
 800be2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be32:	b29a      	uxth	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be3a:	bf00      	nop
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	08015dfc 	.word	0x08015dfc
 800be4c:	08015e04 	.word	0x08015e04

0800be50 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e03c      	b.n	800bedc <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d106      	bne.n	800be7c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7f6 f88e 	bl	8001f98 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2202      	movs	r2, #2
 800be80:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f022 0201 	bic.w	r2, r2, #1
 800be92:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f85b 	bl	800bf50 <USART_SetConfig>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d101      	bne.n	800bea4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	e01b      	b.n	800bedc <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	685a      	ldr	r2, [r3, #4]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800beb2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bec2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f042 0201 	orr.w	r2, r2, #1
 800bed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fd5b 	bl	800c990 <USART_CheckIdleState>
 800beda:	4603      	mov	r3, r0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	603b      	str	r3, [r7, #0]
 800bef0:	4613      	mov	r3, r2
 800bef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bef4:	e018      	b.n	800bf28 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befc:	d014      	beq.n	800bf28 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800befe:	f7f6 faf9 	bl	80024f4 <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	69ba      	ldr	r2, [r7, #24]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d302      	bcc.n	800bf14 <USART_WaitOnFlagUntilTimeout+0x30>
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d109      	bne.n	800bf28 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800bf24:	2303      	movs	r3, #3
 800bf26:	e00f      	b.n	800bf48 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	69da      	ldr	r2, [r3, #28]
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	4013      	ands	r3, r2
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	bf0c      	ite	eq
 800bf38:	2301      	moveq	r3, #1
 800bf3a:	2300      	movne	r3, #0
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	461a      	mov	r2, r3
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d0d7      	beq.n	800bef6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08e      	sub	sp, #56	@ 0x38
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	689a      	ldr	r2, [r3, #8]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	431a      	orrs	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	4bc9      	ldr	r3, [pc, #804]	@ (800c2a4 <USART_SetConfig+0x354>)
 800bf80:	4013      	ands	r3, r2
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	6812      	ldr	r2, [r2, #0]
 800bf86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf88:	430b      	orrs	r3, r1
 800bf8a:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bf8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	699a      	ldr	r2, [r3, #24]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	69db      	ldr	r3, [r3, #28]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	4bba      	ldr	r3, [pc, #744]	@ (800c2a8 <USART_SetConfig+0x358>)
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	6812      	ldr	r2, [r2, #0]
 800bfc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd0:	f023 010f 	bic.w	r1, r3, #15
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	430a      	orrs	r2, r1
 800bfde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4ab1      	ldr	r2, [pc, #708]	@ (800c2ac <USART_SetConfig+0x35c>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d176      	bne.n	800c0d8 <USART_SetConfig+0x188>
 800bfea:	4bb1      	ldr	r3, [pc, #708]	@ (800c2b0 <USART_SetConfig+0x360>)
 800bfec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bff2:	2b28      	cmp	r3, #40	@ 0x28
 800bff4:	d86c      	bhi.n	800c0d0 <USART_SetConfig+0x180>
 800bff6:	a201      	add	r2, pc, #4	@ (adr r2, 800bffc <USART_SetConfig+0xac>)
 800bff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffc:	0800c0a1 	.word	0x0800c0a1
 800c000:	0800c0d1 	.word	0x0800c0d1
 800c004:	0800c0d1 	.word	0x0800c0d1
 800c008:	0800c0d1 	.word	0x0800c0d1
 800c00c:	0800c0d1 	.word	0x0800c0d1
 800c010:	0800c0d1 	.word	0x0800c0d1
 800c014:	0800c0d1 	.word	0x0800c0d1
 800c018:	0800c0d1 	.word	0x0800c0d1
 800c01c:	0800c0a9 	.word	0x0800c0a9
 800c020:	0800c0d1 	.word	0x0800c0d1
 800c024:	0800c0d1 	.word	0x0800c0d1
 800c028:	0800c0d1 	.word	0x0800c0d1
 800c02c:	0800c0d1 	.word	0x0800c0d1
 800c030:	0800c0d1 	.word	0x0800c0d1
 800c034:	0800c0d1 	.word	0x0800c0d1
 800c038:	0800c0d1 	.word	0x0800c0d1
 800c03c:	0800c0b1 	.word	0x0800c0b1
 800c040:	0800c0d1 	.word	0x0800c0d1
 800c044:	0800c0d1 	.word	0x0800c0d1
 800c048:	0800c0d1 	.word	0x0800c0d1
 800c04c:	0800c0d1 	.word	0x0800c0d1
 800c050:	0800c0d1 	.word	0x0800c0d1
 800c054:	0800c0d1 	.word	0x0800c0d1
 800c058:	0800c0d1 	.word	0x0800c0d1
 800c05c:	0800c0b9 	.word	0x0800c0b9
 800c060:	0800c0d1 	.word	0x0800c0d1
 800c064:	0800c0d1 	.word	0x0800c0d1
 800c068:	0800c0d1 	.word	0x0800c0d1
 800c06c:	0800c0d1 	.word	0x0800c0d1
 800c070:	0800c0d1 	.word	0x0800c0d1
 800c074:	0800c0d1 	.word	0x0800c0d1
 800c078:	0800c0d1 	.word	0x0800c0d1
 800c07c:	0800c0c1 	.word	0x0800c0c1
 800c080:	0800c0d1 	.word	0x0800c0d1
 800c084:	0800c0d1 	.word	0x0800c0d1
 800c088:	0800c0d1 	.word	0x0800c0d1
 800c08c:	0800c0d1 	.word	0x0800c0d1
 800c090:	0800c0d1 	.word	0x0800c0d1
 800c094:	0800c0d1 	.word	0x0800c0d1
 800c098:	0800c0d1 	.word	0x0800c0d1
 800c09c:	0800c0c9 	.word	0x0800c0c9
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0a6:	e112      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0ae:	e10e      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c0b0:	2304      	movs	r3, #4
 800c0b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0b6:	e10a      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c0b8:	2308      	movs	r3, #8
 800c0ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0be:	e106      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c0c0:	2310      	movs	r3, #16
 800c0c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0c6:	e102      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c0c8:	2320      	movs	r3, #32
 800c0ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0ce:	e0fe      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c0d0:	2340      	movs	r3, #64	@ 0x40
 800c0d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c0d6:	e0fa      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a75      	ldr	r2, [pc, #468]	@ (800c2b4 <USART_SetConfig+0x364>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d130      	bne.n	800c144 <USART_SetConfig+0x1f4>
 800c0e2:	4b73      	ldr	r3, [pc, #460]	@ (800c2b0 <USART_SetConfig+0x360>)
 800c0e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	2b05      	cmp	r3, #5
 800c0ec:	d826      	bhi.n	800c13c <USART_SetConfig+0x1ec>
 800c0ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c0f4 <USART_SetConfig+0x1a4>)
 800c0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f4:	0800c10d 	.word	0x0800c10d
 800c0f8:	0800c115 	.word	0x0800c115
 800c0fc:	0800c11d 	.word	0x0800c11d
 800c100:	0800c125 	.word	0x0800c125
 800c104:	0800c12d 	.word	0x0800c12d
 800c108:	0800c135 	.word	0x0800c135
 800c10c:	2300      	movs	r3, #0
 800c10e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c112:	e0dc      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c114:	2302      	movs	r3, #2
 800c116:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c11a:	e0d8      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c11c:	2304      	movs	r3, #4
 800c11e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c122:	e0d4      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c124:	2308      	movs	r3, #8
 800c126:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c12a:	e0d0      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c12c:	2310      	movs	r3, #16
 800c12e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c132:	e0cc      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c134:	2320      	movs	r3, #32
 800c136:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c13a:	e0c8      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c13c:	2340      	movs	r3, #64	@ 0x40
 800c13e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c142:	e0c4      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a5b      	ldr	r2, [pc, #364]	@ (800c2b8 <USART_SetConfig+0x368>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d130      	bne.n	800c1b0 <USART_SetConfig+0x260>
 800c14e:	4b58      	ldr	r3, [pc, #352]	@ (800c2b0 <USART_SetConfig+0x360>)
 800c150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c152:	f003 0307 	and.w	r3, r3, #7
 800c156:	2b05      	cmp	r3, #5
 800c158:	d826      	bhi.n	800c1a8 <USART_SetConfig+0x258>
 800c15a:	a201      	add	r2, pc, #4	@ (adr r2, 800c160 <USART_SetConfig+0x210>)
 800c15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c160:	0800c179 	.word	0x0800c179
 800c164:	0800c181 	.word	0x0800c181
 800c168:	0800c189 	.word	0x0800c189
 800c16c:	0800c191 	.word	0x0800c191
 800c170:	0800c199 	.word	0x0800c199
 800c174:	0800c1a1 	.word	0x0800c1a1
 800c178:	2300      	movs	r3, #0
 800c17a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c17e:	e0a6      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c180:	2302      	movs	r3, #2
 800c182:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c186:	e0a2      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c188:	2304      	movs	r3, #4
 800c18a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c18e:	e09e      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c190:	2308      	movs	r3, #8
 800c192:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c196:	e09a      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c198:	2310      	movs	r3, #16
 800c19a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c19e:	e096      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c1a0:	2320      	movs	r3, #32
 800c1a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c1a6:	e092      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c1a8:	2340      	movs	r3, #64	@ 0x40
 800c1aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c1ae:	e08e      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a41      	ldr	r2, [pc, #260]	@ (800c2bc <USART_SetConfig+0x36c>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	f040 8086 	bne.w	800c2c8 <USART_SetConfig+0x378>
 800c1bc:	4b3c      	ldr	r3, [pc, #240]	@ (800c2b0 <USART_SetConfig+0x360>)
 800c1be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1c4:	2b28      	cmp	r3, #40	@ 0x28
 800c1c6:	d87b      	bhi.n	800c2c0 <USART_SetConfig+0x370>
 800c1c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d0 <USART_SetConfig+0x280>)
 800c1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ce:	bf00      	nop
 800c1d0:	0800c275 	.word	0x0800c275
 800c1d4:	0800c2c1 	.word	0x0800c2c1
 800c1d8:	0800c2c1 	.word	0x0800c2c1
 800c1dc:	0800c2c1 	.word	0x0800c2c1
 800c1e0:	0800c2c1 	.word	0x0800c2c1
 800c1e4:	0800c2c1 	.word	0x0800c2c1
 800c1e8:	0800c2c1 	.word	0x0800c2c1
 800c1ec:	0800c2c1 	.word	0x0800c2c1
 800c1f0:	0800c27d 	.word	0x0800c27d
 800c1f4:	0800c2c1 	.word	0x0800c2c1
 800c1f8:	0800c2c1 	.word	0x0800c2c1
 800c1fc:	0800c2c1 	.word	0x0800c2c1
 800c200:	0800c2c1 	.word	0x0800c2c1
 800c204:	0800c2c1 	.word	0x0800c2c1
 800c208:	0800c2c1 	.word	0x0800c2c1
 800c20c:	0800c2c1 	.word	0x0800c2c1
 800c210:	0800c285 	.word	0x0800c285
 800c214:	0800c2c1 	.word	0x0800c2c1
 800c218:	0800c2c1 	.word	0x0800c2c1
 800c21c:	0800c2c1 	.word	0x0800c2c1
 800c220:	0800c2c1 	.word	0x0800c2c1
 800c224:	0800c2c1 	.word	0x0800c2c1
 800c228:	0800c2c1 	.word	0x0800c2c1
 800c22c:	0800c2c1 	.word	0x0800c2c1
 800c230:	0800c28d 	.word	0x0800c28d
 800c234:	0800c2c1 	.word	0x0800c2c1
 800c238:	0800c2c1 	.word	0x0800c2c1
 800c23c:	0800c2c1 	.word	0x0800c2c1
 800c240:	0800c2c1 	.word	0x0800c2c1
 800c244:	0800c2c1 	.word	0x0800c2c1
 800c248:	0800c2c1 	.word	0x0800c2c1
 800c24c:	0800c2c1 	.word	0x0800c2c1
 800c250:	0800c295 	.word	0x0800c295
 800c254:	0800c2c1 	.word	0x0800c2c1
 800c258:	0800c2c1 	.word	0x0800c2c1
 800c25c:	0800c2c1 	.word	0x0800c2c1
 800c260:	0800c2c1 	.word	0x0800c2c1
 800c264:	0800c2c1 	.word	0x0800c2c1
 800c268:	0800c2c1 	.word	0x0800c2c1
 800c26c:	0800c2c1 	.word	0x0800c2c1
 800c270:	0800c29d 	.word	0x0800c29d
 800c274:	2301      	movs	r3, #1
 800c276:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c27a:	e028      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c27c:	2302      	movs	r3, #2
 800c27e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c282:	e024      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c284:	2304      	movs	r3, #4
 800c286:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c28a:	e020      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c28c:	2308      	movs	r3, #8
 800c28e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c292:	e01c      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c294:	2310      	movs	r3, #16
 800c296:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c29a:	e018      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c29c:	2320      	movs	r3, #32
 800c29e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c2a2:	e014      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c2a4:	cfff69f3 	.word	0xcfff69f3
 800c2a8:	ffffc0f6 	.word	0xffffc0f6
 800c2ac:	40011000 	.word	0x40011000
 800c2b0:	58024400 	.word	0x58024400
 800c2b4:	40004400 	.word	0x40004400
 800c2b8:	40004800 	.word	0x40004800
 800c2bc:	40011400 	.word	0x40011400
 800c2c0:	2340      	movs	r3, #64	@ 0x40
 800c2c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c2c6:	e002      	b.n	800c2ce <USART_SetConfig+0x37e>
 800c2c8:	2340      	movs	r3, #64	@ 0x40
 800c2ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800c2ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2d2:	2b20      	cmp	r3, #32
 800c2d4:	f200 8329 	bhi.w	800c92a <USART_SetConfig+0x9da>
 800c2d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e0 <USART_SetConfig+0x390>)
 800c2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2de:	bf00      	nop
 800c2e0:	0800c365 	.word	0x0800c365
 800c2e4:	0800c41b 	.word	0x0800c41b
 800c2e8:	0800c4d1 	.word	0x0800c4d1
 800c2ec:	0800c92b 	.word	0x0800c92b
 800c2f0:	0800c58b 	.word	0x0800c58b
 800c2f4:	0800c92b 	.word	0x0800c92b
 800c2f8:	0800c92b 	.word	0x0800c92b
 800c2fc:	0800c92b 	.word	0x0800c92b
 800c300:	0800c645 	.word	0x0800c645
 800c304:	0800c92b 	.word	0x0800c92b
 800c308:	0800c92b 	.word	0x0800c92b
 800c30c:	0800c92b 	.word	0x0800c92b
 800c310:	0800c92b 	.word	0x0800c92b
 800c314:	0800c92b 	.word	0x0800c92b
 800c318:	0800c92b 	.word	0x0800c92b
 800c31c:	0800c92b 	.word	0x0800c92b
 800c320:	0800c7bd 	.word	0x0800c7bd
 800c324:	0800c92b 	.word	0x0800c92b
 800c328:	0800c92b 	.word	0x0800c92b
 800c32c:	0800c92b 	.word	0x0800c92b
 800c330:	0800c92b 	.word	0x0800c92b
 800c334:	0800c92b 	.word	0x0800c92b
 800c338:	0800c92b 	.word	0x0800c92b
 800c33c:	0800c92b 	.word	0x0800c92b
 800c340:	0800c92b 	.word	0x0800c92b
 800c344:	0800c92b 	.word	0x0800c92b
 800c348:	0800c92b 	.word	0x0800c92b
 800c34c:	0800c92b 	.word	0x0800c92b
 800c350:	0800c92b 	.word	0x0800c92b
 800c354:	0800c92b 	.word	0x0800c92b
 800c358:	0800c92b 	.word	0x0800c92b
 800c35c:	0800c92b 	.word	0x0800c92b
 800c360:	0800c879 	.word	0x0800c879
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800c364:	f7f9 fd32 	bl	8005dcc <HAL_RCC_GetPCLK1Freq>
 800c368:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d044      	beq.n	800c3fc <USART_SetConfig+0x4ac>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c376:	2b01      	cmp	r3, #1
 800c378:	d03e      	beq.n	800c3f8 <USART_SetConfig+0x4a8>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d038      	beq.n	800c3f4 <USART_SetConfig+0x4a4>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c386:	2b03      	cmp	r3, #3
 800c388:	d032      	beq.n	800c3f0 <USART_SetConfig+0x4a0>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c38e:	2b04      	cmp	r3, #4
 800c390:	d02c      	beq.n	800c3ec <USART_SetConfig+0x49c>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c396:	2b05      	cmp	r3, #5
 800c398:	d026      	beq.n	800c3e8 <USART_SetConfig+0x498>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c39e:	2b06      	cmp	r3, #6
 800c3a0:	d020      	beq.n	800c3e4 <USART_SetConfig+0x494>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a6:	2b07      	cmp	r3, #7
 800c3a8:	d01a      	beq.n	800c3e0 <USART_SetConfig+0x490>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ae:	2b08      	cmp	r3, #8
 800c3b0:	d014      	beq.n	800c3dc <USART_SetConfig+0x48c>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3b6:	2b09      	cmp	r3, #9
 800c3b8:	d00e      	beq.n	800c3d8 <USART_SetConfig+0x488>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3be:	2b0a      	cmp	r3, #10
 800c3c0:	d008      	beq.n	800c3d4 <USART_SetConfig+0x484>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c6:	2b0b      	cmp	r3, #11
 800c3c8:	d102      	bne.n	800c3d0 <USART_SetConfig+0x480>
 800c3ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c3ce:	e016      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e014      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3d4:	2380      	movs	r3, #128	@ 0x80
 800c3d6:	e012      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3d8:	2340      	movs	r3, #64	@ 0x40
 800c3da:	e010      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3dc:	2320      	movs	r3, #32
 800c3de:	e00e      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3e0:	2310      	movs	r3, #16
 800c3e2:	e00c      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3e4:	230c      	movs	r3, #12
 800c3e6:	e00a      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3e8:	230a      	movs	r3, #10
 800c3ea:	e008      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3ec:	2308      	movs	r3, #8
 800c3ee:	e006      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3f0:	2306      	movs	r3, #6
 800c3f2:	e004      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3f4:	2304      	movs	r3, #4
 800c3f6:	e002      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e000      	b.n	800c3fe <USART_SetConfig+0x4ae>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c400:	fbb2 f3f3 	udiv	r3, r2, r3
 800c404:	005a      	lsls	r2, r3, #1
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	085b      	lsrs	r3, r3, #1
 800c40c:	441a      	add	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	fbb2 f3f3 	udiv	r3, r2, r3
 800c416:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c418:	e28b      	b.n	800c932 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800c41a:	f7f9 fced 	bl	8005df8 <HAL_RCC_GetPCLK2Freq>
 800c41e:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c424:	2b00      	cmp	r3, #0
 800c426:	d044      	beq.n	800c4b2 <USART_SetConfig+0x562>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d03e      	beq.n	800c4ae <USART_SetConfig+0x55e>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c434:	2b02      	cmp	r3, #2
 800c436:	d038      	beq.n	800c4aa <USART_SetConfig+0x55a>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43c:	2b03      	cmp	r3, #3
 800c43e:	d032      	beq.n	800c4a6 <USART_SetConfig+0x556>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c444:	2b04      	cmp	r3, #4
 800c446:	d02c      	beq.n	800c4a2 <USART_SetConfig+0x552>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c44c:	2b05      	cmp	r3, #5
 800c44e:	d026      	beq.n	800c49e <USART_SetConfig+0x54e>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c454:	2b06      	cmp	r3, #6
 800c456:	d020      	beq.n	800c49a <USART_SetConfig+0x54a>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45c:	2b07      	cmp	r3, #7
 800c45e:	d01a      	beq.n	800c496 <USART_SetConfig+0x546>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c464:	2b08      	cmp	r3, #8
 800c466:	d014      	beq.n	800c492 <USART_SetConfig+0x542>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c46c:	2b09      	cmp	r3, #9
 800c46e:	d00e      	beq.n	800c48e <USART_SetConfig+0x53e>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c474:	2b0a      	cmp	r3, #10
 800c476:	d008      	beq.n	800c48a <USART_SetConfig+0x53a>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c47c:	2b0b      	cmp	r3, #11
 800c47e:	d102      	bne.n	800c486 <USART_SetConfig+0x536>
 800c480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c484:	e016      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c486:	2301      	movs	r3, #1
 800c488:	e014      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c48a:	2380      	movs	r3, #128	@ 0x80
 800c48c:	e012      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c48e:	2340      	movs	r3, #64	@ 0x40
 800c490:	e010      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c492:	2320      	movs	r3, #32
 800c494:	e00e      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c496:	2310      	movs	r3, #16
 800c498:	e00c      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c49a:	230c      	movs	r3, #12
 800c49c:	e00a      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c49e:	230a      	movs	r3, #10
 800c4a0:	e008      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c4a2:	2308      	movs	r3, #8
 800c4a4:	e006      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c4a6:	2306      	movs	r3, #6
 800c4a8:	e004      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c4aa:	2304      	movs	r3, #4
 800c4ac:	e002      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	e000      	b.n	800c4b4 <USART_SetConfig+0x564>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ba:	005a      	lsls	r2, r3, #1
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	085b      	lsrs	r3, r3, #1
 800c4c2:	441a      	add	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4cc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c4ce:	e230      	b.n	800c932 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4d0:	f107 0318 	add.w	r3, r7, #24
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fb fc61 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800c4da:	69fa      	ldr	r2, [r7, #28]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d044      	beq.n	800c56e <USART_SetConfig+0x61e>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d03e      	beq.n	800c56a <USART_SetConfig+0x61a>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d038      	beq.n	800c566 <USART_SetConfig+0x616>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d032      	beq.n	800c562 <USART_SetConfig+0x612>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c500:	2b04      	cmp	r3, #4
 800c502:	d02c      	beq.n	800c55e <USART_SetConfig+0x60e>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c508:	2b05      	cmp	r3, #5
 800c50a:	d026      	beq.n	800c55a <USART_SetConfig+0x60a>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c510:	2b06      	cmp	r3, #6
 800c512:	d020      	beq.n	800c556 <USART_SetConfig+0x606>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c518:	2b07      	cmp	r3, #7
 800c51a:	d01a      	beq.n	800c552 <USART_SetConfig+0x602>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c520:	2b08      	cmp	r3, #8
 800c522:	d014      	beq.n	800c54e <USART_SetConfig+0x5fe>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c528:	2b09      	cmp	r3, #9
 800c52a:	d00e      	beq.n	800c54a <USART_SetConfig+0x5fa>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c530:	2b0a      	cmp	r3, #10
 800c532:	d008      	beq.n	800c546 <USART_SetConfig+0x5f6>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c538:	2b0b      	cmp	r3, #11
 800c53a:	d102      	bne.n	800c542 <USART_SetConfig+0x5f2>
 800c53c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c540:	e016      	b.n	800c570 <USART_SetConfig+0x620>
 800c542:	2301      	movs	r3, #1
 800c544:	e014      	b.n	800c570 <USART_SetConfig+0x620>
 800c546:	2380      	movs	r3, #128	@ 0x80
 800c548:	e012      	b.n	800c570 <USART_SetConfig+0x620>
 800c54a:	2340      	movs	r3, #64	@ 0x40
 800c54c:	e010      	b.n	800c570 <USART_SetConfig+0x620>
 800c54e:	2320      	movs	r3, #32
 800c550:	e00e      	b.n	800c570 <USART_SetConfig+0x620>
 800c552:	2310      	movs	r3, #16
 800c554:	e00c      	b.n	800c570 <USART_SetConfig+0x620>
 800c556:	230c      	movs	r3, #12
 800c558:	e00a      	b.n	800c570 <USART_SetConfig+0x620>
 800c55a:	230a      	movs	r3, #10
 800c55c:	e008      	b.n	800c570 <USART_SetConfig+0x620>
 800c55e:	2308      	movs	r3, #8
 800c560:	e006      	b.n	800c570 <USART_SetConfig+0x620>
 800c562:	2306      	movs	r3, #6
 800c564:	e004      	b.n	800c570 <USART_SetConfig+0x620>
 800c566:	2304      	movs	r3, #4
 800c568:	e002      	b.n	800c570 <USART_SetConfig+0x620>
 800c56a:	2302      	movs	r3, #2
 800c56c:	e000      	b.n	800c570 <USART_SetConfig+0x620>
 800c56e:	2301      	movs	r3, #1
 800c570:	fbb2 f3f3 	udiv	r3, r2, r3
 800c574:	005a      	lsls	r2, r3, #1
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	085b      	lsrs	r3, r3, #1
 800c57c:	441a      	add	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	fbb2 f3f3 	udiv	r3, r2, r3
 800c586:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c588:	e1d3      	b.n	800c932 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c58a:	f107 030c 	add.w	r3, r7, #12
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fb fd58 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d044      	beq.n	800c628 <USART_SetConfig+0x6d8>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d03e      	beq.n	800c624 <USART_SetConfig+0x6d4>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d038      	beq.n	800c620 <USART_SetConfig+0x6d0>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b2:	2b03      	cmp	r3, #3
 800c5b4:	d032      	beq.n	800c61c <USART_SetConfig+0x6cc>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ba:	2b04      	cmp	r3, #4
 800c5bc:	d02c      	beq.n	800c618 <USART_SetConfig+0x6c8>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c2:	2b05      	cmp	r3, #5
 800c5c4:	d026      	beq.n	800c614 <USART_SetConfig+0x6c4>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ca:	2b06      	cmp	r3, #6
 800c5cc:	d020      	beq.n	800c610 <USART_SetConfig+0x6c0>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d2:	2b07      	cmp	r3, #7
 800c5d4:	d01a      	beq.n	800c60c <USART_SetConfig+0x6bc>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5da:	2b08      	cmp	r3, #8
 800c5dc:	d014      	beq.n	800c608 <USART_SetConfig+0x6b8>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e2:	2b09      	cmp	r3, #9
 800c5e4:	d00e      	beq.n	800c604 <USART_SetConfig+0x6b4>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ea:	2b0a      	cmp	r3, #10
 800c5ec:	d008      	beq.n	800c600 <USART_SetConfig+0x6b0>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f2:	2b0b      	cmp	r3, #11
 800c5f4:	d102      	bne.n	800c5fc <USART_SetConfig+0x6ac>
 800c5f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c5fa:	e016      	b.n	800c62a <USART_SetConfig+0x6da>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e014      	b.n	800c62a <USART_SetConfig+0x6da>
 800c600:	2380      	movs	r3, #128	@ 0x80
 800c602:	e012      	b.n	800c62a <USART_SetConfig+0x6da>
 800c604:	2340      	movs	r3, #64	@ 0x40
 800c606:	e010      	b.n	800c62a <USART_SetConfig+0x6da>
 800c608:	2320      	movs	r3, #32
 800c60a:	e00e      	b.n	800c62a <USART_SetConfig+0x6da>
 800c60c:	2310      	movs	r3, #16
 800c60e:	e00c      	b.n	800c62a <USART_SetConfig+0x6da>
 800c610:	230c      	movs	r3, #12
 800c612:	e00a      	b.n	800c62a <USART_SetConfig+0x6da>
 800c614:	230a      	movs	r3, #10
 800c616:	e008      	b.n	800c62a <USART_SetConfig+0x6da>
 800c618:	2308      	movs	r3, #8
 800c61a:	e006      	b.n	800c62a <USART_SetConfig+0x6da>
 800c61c:	2306      	movs	r3, #6
 800c61e:	e004      	b.n	800c62a <USART_SetConfig+0x6da>
 800c620:	2304      	movs	r3, #4
 800c622:	e002      	b.n	800c62a <USART_SetConfig+0x6da>
 800c624:	2302      	movs	r3, #2
 800c626:	e000      	b.n	800c62a <USART_SetConfig+0x6da>
 800c628:	2301      	movs	r3, #1
 800c62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c62e:	005a      	lsls	r2, r3, #1
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	085b      	lsrs	r3, r3, #1
 800c636:	441a      	add	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c640:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800c642:	e176      	b.n	800c932 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c644:	4b89      	ldr	r3, [pc, #548]	@ (800c86c <USART_SetConfig+0x91c>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0320 	and.w	r3, r3, #32
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d05d      	beq.n	800c70c <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800c650:	4b86      	ldr	r3, [pc, #536]	@ (800c86c <USART_SetConfig+0x91c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	08db      	lsrs	r3, r3, #3
 800c656:	f003 0303 	and.w	r3, r3, #3
 800c65a:	4a85      	ldr	r2, [pc, #532]	@ (800c870 <USART_SetConfig+0x920>)
 800c65c:	40da      	lsrs	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c662:	2b00      	cmp	r3, #0
 800c664:	d044      	beq.n	800c6f0 <USART_SetConfig+0x7a0>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d03e      	beq.n	800c6ec <USART_SetConfig+0x79c>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c672:	2b02      	cmp	r3, #2
 800c674:	d038      	beq.n	800c6e8 <USART_SetConfig+0x798>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	d032      	beq.n	800c6e4 <USART_SetConfig+0x794>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c682:	2b04      	cmp	r3, #4
 800c684:	d02c      	beq.n	800c6e0 <USART_SetConfig+0x790>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c68a:	2b05      	cmp	r3, #5
 800c68c:	d026      	beq.n	800c6dc <USART_SetConfig+0x78c>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c692:	2b06      	cmp	r3, #6
 800c694:	d020      	beq.n	800c6d8 <USART_SetConfig+0x788>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c69a:	2b07      	cmp	r3, #7
 800c69c:	d01a      	beq.n	800c6d4 <USART_SetConfig+0x784>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a2:	2b08      	cmp	r3, #8
 800c6a4:	d014      	beq.n	800c6d0 <USART_SetConfig+0x780>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6aa:	2b09      	cmp	r3, #9
 800c6ac:	d00e      	beq.n	800c6cc <USART_SetConfig+0x77c>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b2:	2b0a      	cmp	r3, #10
 800c6b4:	d008      	beq.n	800c6c8 <USART_SetConfig+0x778>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ba:	2b0b      	cmp	r3, #11
 800c6bc:	d102      	bne.n	800c6c4 <USART_SetConfig+0x774>
 800c6be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c6c2:	e016      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e014      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6c8:	2380      	movs	r3, #128	@ 0x80
 800c6ca:	e012      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6cc:	2340      	movs	r3, #64	@ 0x40
 800c6ce:	e010      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6d0:	2320      	movs	r3, #32
 800c6d2:	e00e      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6d4:	2310      	movs	r3, #16
 800c6d6:	e00c      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6d8:	230c      	movs	r3, #12
 800c6da:	e00a      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6dc:	230a      	movs	r3, #10
 800c6de:	e008      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	e006      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6e4:	2306      	movs	r3, #6
 800c6e6:	e004      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6e8:	2304      	movs	r3, #4
 800c6ea:	e002      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	e000      	b.n	800c6f2 <USART_SetConfig+0x7a2>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f6:	005a      	lsls	r2, r3, #1
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	085b      	lsrs	r3, r3, #1
 800c6fe:	441a      	add	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	fbb2 f3f3 	udiv	r3, r2, r3
 800c708:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800c70a:	e112      	b.n	800c932 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c710:	2b00      	cmp	r3, #0
 800c712:	d044      	beq.n	800c79e <USART_SetConfig+0x84e>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d03e      	beq.n	800c79a <USART_SetConfig+0x84a>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c720:	2b02      	cmp	r3, #2
 800c722:	d038      	beq.n	800c796 <USART_SetConfig+0x846>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c728:	2b03      	cmp	r3, #3
 800c72a:	d032      	beq.n	800c792 <USART_SetConfig+0x842>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c730:	2b04      	cmp	r3, #4
 800c732:	d02c      	beq.n	800c78e <USART_SetConfig+0x83e>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c738:	2b05      	cmp	r3, #5
 800c73a:	d026      	beq.n	800c78a <USART_SetConfig+0x83a>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c740:	2b06      	cmp	r3, #6
 800c742:	d020      	beq.n	800c786 <USART_SetConfig+0x836>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c748:	2b07      	cmp	r3, #7
 800c74a:	d01a      	beq.n	800c782 <USART_SetConfig+0x832>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c750:	2b08      	cmp	r3, #8
 800c752:	d014      	beq.n	800c77e <USART_SetConfig+0x82e>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c758:	2b09      	cmp	r3, #9
 800c75a:	d00e      	beq.n	800c77a <USART_SetConfig+0x82a>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c760:	2b0a      	cmp	r3, #10
 800c762:	d008      	beq.n	800c776 <USART_SetConfig+0x826>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c768:	2b0b      	cmp	r3, #11
 800c76a:	d102      	bne.n	800c772 <USART_SetConfig+0x822>
 800c76c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c770:	e016      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c772:	2301      	movs	r3, #1
 800c774:	e014      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c776:	2380      	movs	r3, #128	@ 0x80
 800c778:	e012      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c77a:	2340      	movs	r3, #64	@ 0x40
 800c77c:	e010      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c77e:	2320      	movs	r3, #32
 800c780:	e00e      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c782:	2310      	movs	r3, #16
 800c784:	e00c      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c786:	230c      	movs	r3, #12
 800c788:	e00a      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c78a:	230a      	movs	r3, #10
 800c78c:	e008      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c78e:	2308      	movs	r3, #8
 800c790:	e006      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c792:	2306      	movs	r3, #6
 800c794:	e004      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c796:	2304      	movs	r3, #4
 800c798:	e002      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c79a:	2302      	movs	r3, #2
 800c79c:	e000      	b.n	800c7a0 <USART_SetConfig+0x850>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	4a33      	ldr	r2, [pc, #204]	@ (800c870 <USART_SetConfig+0x920>)
 800c7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7a6:	005a      	lsls	r2, r3, #1
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	085b      	lsrs	r3, r3, #1
 800c7ae:	441a      	add	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7b8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c7ba:	e0ba      	b.n	800c932 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d044      	beq.n	800c84e <USART_SetConfig+0x8fe>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d03e      	beq.n	800c84a <USART_SetConfig+0x8fa>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d038      	beq.n	800c846 <USART_SetConfig+0x8f6>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d8:	2b03      	cmp	r3, #3
 800c7da:	d032      	beq.n	800c842 <USART_SetConfig+0x8f2>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e0:	2b04      	cmp	r3, #4
 800c7e2:	d02c      	beq.n	800c83e <USART_SetConfig+0x8ee>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e8:	2b05      	cmp	r3, #5
 800c7ea:	d026      	beq.n	800c83a <USART_SetConfig+0x8ea>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7f0:	2b06      	cmp	r3, #6
 800c7f2:	d020      	beq.n	800c836 <USART_SetConfig+0x8e6>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7f8:	2b07      	cmp	r3, #7
 800c7fa:	d01a      	beq.n	800c832 <USART_SetConfig+0x8e2>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c800:	2b08      	cmp	r3, #8
 800c802:	d014      	beq.n	800c82e <USART_SetConfig+0x8de>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c808:	2b09      	cmp	r3, #9
 800c80a:	d00e      	beq.n	800c82a <USART_SetConfig+0x8da>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c810:	2b0a      	cmp	r3, #10
 800c812:	d008      	beq.n	800c826 <USART_SetConfig+0x8d6>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c818:	2b0b      	cmp	r3, #11
 800c81a:	d102      	bne.n	800c822 <USART_SetConfig+0x8d2>
 800c81c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c820:	e016      	b.n	800c850 <USART_SetConfig+0x900>
 800c822:	2301      	movs	r3, #1
 800c824:	e014      	b.n	800c850 <USART_SetConfig+0x900>
 800c826:	2380      	movs	r3, #128	@ 0x80
 800c828:	e012      	b.n	800c850 <USART_SetConfig+0x900>
 800c82a:	2340      	movs	r3, #64	@ 0x40
 800c82c:	e010      	b.n	800c850 <USART_SetConfig+0x900>
 800c82e:	2320      	movs	r3, #32
 800c830:	e00e      	b.n	800c850 <USART_SetConfig+0x900>
 800c832:	2310      	movs	r3, #16
 800c834:	e00c      	b.n	800c850 <USART_SetConfig+0x900>
 800c836:	230c      	movs	r3, #12
 800c838:	e00a      	b.n	800c850 <USART_SetConfig+0x900>
 800c83a:	230a      	movs	r3, #10
 800c83c:	e008      	b.n	800c850 <USART_SetConfig+0x900>
 800c83e:	2308      	movs	r3, #8
 800c840:	e006      	b.n	800c850 <USART_SetConfig+0x900>
 800c842:	2306      	movs	r3, #6
 800c844:	e004      	b.n	800c850 <USART_SetConfig+0x900>
 800c846:	2304      	movs	r3, #4
 800c848:	e002      	b.n	800c850 <USART_SetConfig+0x900>
 800c84a:	2302      	movs	r3, #2
 800c84c:	e000      	b.n	800c850 <USART_SetConfig+0x900>
 800c84e:	2301      	movs	r3, #1
 800c850:	4a08      	ldr	r2, [pc, #32]	@ (800c874 <USART_SetConfig+0x924>)
 800c852:	fbb2 f3f3 	udiv	r3, r2, r3
 800c856:	005a      	lsls	r2, r3, #1
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	085b      	lsrs	r3, r3, #1
 800c85e:	441a      	add	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	fbb2 f3f3 	udiv	r3, r2, r3
 800c868:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c86a:	e062      	b.n	800c932 <USART_SetConfig+0x9e2>
 800c86c:	58024400 	.word	0x58024400
 800c870:	03d09000 	.word	0x03d09000
 800c874:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d044      	beq.n	800c90a <USART_SetConfig+0x9ba>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c884:	2b01      	cmp	r3, #1
 800c886:	d03e      	beq.n	800c906 <USART_SetConfig+0x9b6>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d038      	beq.n	800c902 <USART_SetConfig+0x9b2>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c894:	2b03      	cmp	r3, #3
 800c896:	d032      	beq.n	800c8fe <USART_SetConfig+0x9ae>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c89c:	2b04      	cmp	r3, #4
 800c89e:	d02c      	beq.n	800c8fa <USART_SetConfig+0x9aa>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a4:	2b05      	cmp	r3, #5
 800c8a6:	d026      	beq.n	800c8f6 <USART_SetConfig+0x9a6>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ac:	2b06      	cmp	r3, #6
 800c8ae:	d020      	beq.n	800c8f2 <USART_SetConfig+0x9a2>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b4:	2b07      	cmp	r3, #7
 800c8b6:	d01a      	beq.n	800c8ee <USART_SetConfig+0x99e>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8bc:	2b08      	cmp	r3, #8
 800c8be:	d014      	beq.n	800c8ea <USART_SetConfig+0x99a>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8c4:	2b09      	cmp	r3, #9
 800c8c6:	d00e      	beq.n	800c8e6 <USART_SetConfig+0x996>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8cc:	2b0a      	cmp	r3, #10
 800c8ce:	d008      	beq.n	800c8e2 <USART_SetConfig+0x992>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d4:	2b0b      	cmp	r3, #11
 800c8d6:	d102      	bne.n	800c8de <USART_SetConfig+0x98e>
 800c8d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c8dc:	e016      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e014      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c8e2:	2380      	movs	r3, #128	@ 0x80
 800c8e4:	e012      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c8e6:	2340      	movs	r3, #64	@ 0x40
 800c8e8:	e010      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c8ea:	2320      	movs	r3, #32
 800c8ec:	e00e      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c8ee:	2310      	movs	r3, #16
 800c8f0:	e00c      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c8f2:	230c      	movs	r3, #12
 800c8f4:	e00a      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c8f6:	230a      	movs	r3, #10
 800c8f8:	e008      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c8fa:	2308      	movs	r3, #8
 800c8fc:	e006      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c8fe:	2306      	movs	r3, #6
 800c900:	e004      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c902:	2304      	movs	r3, #4
 800c904:	e002      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c906:	2302      	movs	r3, #2
 800c908:	e000      	b.n	800c90c <USART_SetConfig+0x9bc>
 800c90a:	2301      	movs	r3, #1
 800c90c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800c910:	fbb2 f3f3 	udiv	r3, r2, r3
 800c914:	005a      	lsls	r2, r3, #1
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	085b      	lsrs	r3, r3, #1
 800c91c:	441a      	add	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	fbb2 f3f3 	udiv	r3, r2, r3
 800c926:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c928:	e003      	b.n	800c932 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800c930:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800c932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c934:	2b0f      	cmp	r3, #15
 800c936:	d916      	bls.n	800c966 <USART_SetConfig+0xa16>
 800c938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c93e:	d212      	bcs.n	800c966 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c942:	b29b      	uxth	r3, r3
 800c944:	f023 030f 	bic.w	r3, r3, #15
 800c948:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c94c:	085b      	lsrs	r3, r3, #1
 800c94e:	b29b      	uxth	r3, r3
 800c950:	f003 0307 	and.w	r3, r3, #7
 800c954:	b29a      	uxth	r2, r3
 800c956:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c958:	4313      	orrs	r3, r2
 800c95a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c962:	60da      	str	r2, [r3, #12]
 800c964:	e002      	b.n	800c96c <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800c984:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3738      	adds	r7, #56	@ 0x38
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af02      	add	r7, sp, #8
 800c996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c99e:	f7f5 fda9 	bl	80024f4 <HAL_GetTick>
 800c9a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f003 0308 	and.w	r3, r3, #8
 800c9ae:	2b08      	cmp	r3, #8
 800c9b0:	d10e      	bne.n	800c9d0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c9b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff fa8f 	bl	800bee4 <USART_WaitOnFlagUntilTimeout>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e01e      	b.n	800ca0e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	d10e      	bne.n	800c9fc <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c9de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f7ff fa79 	bl	800bee4 <USART_WaitOnFlagUntilTimeout>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	e008      	b.n	800ca0e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b085      	sub	sp, #20
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d101      	bne.n	800ca2c <HAL_USARTEx_EnableSlaveMode+0x16>
 800ca28:	2302      	movs	r3, #2
 800ca2a:	e043      	b.n	800cab4 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2202      	movs	r2, #2
 800ca38:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f022 0201 	bic.w	r2, r2, #1
 800ca52:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	685a      	ldr	r2, [r3, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	689a      	ldr	r2, [r3, #8]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca72:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f042 0201 	orr.w	r2, r2, #1
 800ca82:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2201      	movs	r2, #1
 800ca96:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f042 0201 	orr.w	r2, r2, #1
 800caa8:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d101      	bne.n	800cad8 <HAL_USARTEx_ConfigNSS+0x18>
 800cad4:	2302      	movs	r3, #2
 800cad6:	e02a      	b.n	800cb2e <HAL_USARTEx_ConfigNSS+0x6e>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2202      	movs	r2, #2
 800cae4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f022 0201 	bic.w	r2, r2, #1
 800cafe:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f023 0108 	bic.w	r1, r3, #8
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	683a      	ldr	r2, [r7, #0]
 800cb10:	430a      	orrs	r2, r1
 800cb12:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr

0800cb3a <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800cb3a:	b480      	push	{r7}
 800cb3c:	b085      	sub	sp, #20
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d101      	bne.n	800cb50 <HAL_USARTEx_DisableFifoMode+0x16>
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	e027      	b.n	800cba0 <HAL_USARTEx_DisableFifoMode+0x66>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f022 0201 	bic.w	r2, r2, #1
 800cb76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cb7e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d101      	bne.n	800cbc4 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	e02d      	b.n	800cc20 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2202      	movs	r2, #2
 800cbd0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 0201 	bic.w	r2, r2, #1
 800cbea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	430a      	orrs	r2, r1
 800cbfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 f84f 	bl	800cca4 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2201      	movs	r2, #1
 800cc12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d101      	bne.n	800cc40 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	e02d      	b.n	800cc9c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f022 0201 	bic.w	r2, r2, #1
 800cc66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	430a      	orrs	r2, r1
 800cc7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 f811 	bl	800cca4 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d106      	bne.n	800ccc2 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ccc0:	e02f      	b.n	800cd22 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ccc2:	2310      	movs	r3, #16
 800ccc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ccc6:	2310      	movs	r3, #16
 800ccc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800ccd0:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	f003 0307 	and.w	r3, r3, #7
 800ccd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800cce0:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	f003 0307 	and.w	r3, r3, #7
 800cce8:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccea:	7bbb      	ldrb	r3, [r7, #14]
 800ccec:	7b3a      	ldrb	r2, [r7, #12]
 800ccee:	4910      	ldr	r1, [pc, #64]	@ (800cd30 <USARTEx_SetNbDataToProcess+0x8c>)
 800ccf0:	5c8a      	ldrb	r2, [r1, r2]
 800ccf2:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800ccf6:	7b3a      	ldrb	r2, [r7, #12]
 800ccf8:	490e      	ldr	r1, [pc, #56]	@ (800cd34 <USARTEx_SetNbDataToProcess+0x90>)
 800ccfa:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	7b7a      	ldrb	r2, [r7, #13]
 800cd0a:	4909      	ldr	r1, [pc, #36]	@ (800cd30 <USARTEx_SetNbDataToProcess+0x8c>)
 800cd0c:	5c8a      	ldrb	r2, [r1, r2]
 800cd0e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800cd12:	7b7a      	ldrb	r2, [r7, #13]
 800cd14:	4907      	ldr	r1, [pc, #28]	@ (800cd34 <USARTEx_SetNbDataToProcess+0x90>)
 800cd16:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd18:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800cd22:	bf00      	nop
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	08015e0c 	.word	0x08015e0c
 800cd34:	08015e14 	.word	0x08015e14

0800cd38 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cd38:	b084      	sub	sp, #16
 800cd3a:	b480      	push	{r7}
 800cd3c:	b085      	sub	sp, #20
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	f107 001c 	add.w	r0, r7, #28
 800cd46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800cd4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800cd50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800cd52:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800cd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800cd56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800cd58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800cd5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800cd5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800cd60:	68fa      	ldr	r2, [r7, #12]
 800cd62:	4313      	orrs	r3, r2
 800cd64:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685a      	ldr	r2, [r3, #4]
 800cd6a:	4b07      	ldr	r3, [pc, #28]	@ (800cd88 <SDMMC_Init+0x50>)
 800cd6c:	4013      	ands	r3, r2
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	431a      	orrs	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	b004      	add	sp, #16
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	ffc02c00 	.word	0xffc02c00

0800cd8c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	370c      	adds	r7, #12
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr

0800cda6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cda6:	b480      	push	{r7}
 800cda8:	b083      	sub	sp, #12
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f043 0203 	orr.w	r2, r3, #3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b083      	sub	sp, #12
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 0303 	and.w	r3, r3, #3
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	370c      	adds	r7, #12
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
	...

0800ce08 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ce26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ce2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ce32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	4313      	orrs	r3, r2
 800ce38:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	68da      	ldr	r2, [r3, #12]
 800ce3e:	4b06      	ldr	r3, [pc, #24]	@ (800ce58 <SDMMC_SendCommand+0x50>)
 800ce40:	4013      	ands	r3, r2
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	431a      	orrs	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr
 800ce58:	fffee0c0 	.word	0xfffee0c0

0800ce5c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	b2db      	uxtb	r3, r3
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ce76:	b480      	push	{r7}
 800ce78:	b085      	sub	sp, #20
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	3314      	adds	r3, #20
 800ce84:	461a      	mov	r2, r3
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	4413      	add	r3, r2
 800ce8a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	685a      	ldr	r2, [r3, #4]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800cec2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800cec8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800cece:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	431a      	orrs	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cee6:	2300      	movs	r3, #0

}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3714      	adds	r7, #20
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b088      	sub	sp, #32
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cf02:	2310      	movs	r3, #16
 800cf04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf16:	f107 0308 	add.w	r3, r7, #8
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7ff ff73 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cf22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf26:	2110      	movs	r1, #16
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fa5f 	bl	800d3ec <SDMMC_GetCmdResp1>
 800cf2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf30:	69fb      	ldr	r3, [r7, #28]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3720      	adds	r7, #32
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b088      	sub	sp, #32
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cf48:	2311      	movs	r3, #17
 800cf4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf52:	2300      	movs	r3, #0
 800cf54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf5c:	f107 0308 	add.w	r3, r7, #8
 800cf60:	4619      	mov	r1, r3
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7ff ff50 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cf68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf6c:	2111      	movs	r1, #17
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fa3c 	bl	800d3ec <SDMMC_GetCmdResp1>
 800cf74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf76:	69fb      	ldr	r3, [r7, #28]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3720      	adds	r7, #32
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cf8e:	2312      	movs	r3, #18
 800cf90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfa2:	f107 0308 	add.w	r3, r7, #8
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7ff ff2d 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cfae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfb2:	2112      	movs	r1, #18
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fa19 	bl	800d3ec <SDMMC_GetCmdResp1>
 800cfba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfbc:	69fb      	ldr	r3, [r7, #28]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3720      	adds	r7, #32
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b088      	sub	sp, #32
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cfd4:	2318      	movs	r3, #24
 800cfd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cfdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfe8:	f107 0308 	add.w	r3, r7, #8
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff ff0a 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cff8:	2118      	movs	r1, #24
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f9f6 	bl	800d3ec <SDMMC_GetCmdResp1>
 800d000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d002:	69fb      	ldr	r3, [r7, #28]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3720      	adds	r7, #32
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d01a:	2319      	movs	r3, #25
 800d01c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d01e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d024:	2300      	movs	r3, #0
 800d026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d02c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d02e:	f107 0308 	add.w	r3, r7, #8
 800d032:	4619      	mov	r1, r3
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7ff fee7 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d03a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d03e:	2119      	movs	r1, #25
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 f9d3 	bl	800d3ec <SDMMC_GetCmdResp1>
 800d046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d048:	69fb      	ldr	r3, [r7, #28]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3720      	adds	r7, #32
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
	...

0800d054 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b088      	sub	sp, #32
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d05c:	2300      	movs	r3, #0
 800d05e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d060:	230c      	movs	r3, #12
 800d062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d06a:	2300      	movs	r3, #0
 800d06c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d06e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d072:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d08c:	f107 0308 	add.w	r3, r7, #8
 800d090:	4619      	mov	r1, r3
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff feb8 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d098:	4a0b      	ldr	r2, [pc, #44]	@ (800d0c8 <SDMMC_CmdStopTransfer+0x74>)
 800d09a:	210c      	movs	r1, #12
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 f9a5 	bl	800d3ec <SDMMC_GetCmdResp1>
 800d0a2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0b6:	d101      	bne.n	800d0bc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d0bc:	69fb      	ldr	r3, [r7, #28]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3720      	adds	r7, #32
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	05f5e100 	.word	0x05f5e100

0800d0cc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b088      	sub	sp, #32
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d0da:	2307      	movs	r3, #7
 800d0dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d0ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ee:	f107 0308 	add.w	r3, r7, #8
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7ff fe87 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d0fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0fe:	2107      	movs	r1, #7
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f973 	bl	800d3ec <SDMMC_GetCmdResp1>
 800d106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d108:	69fb      	ldr	r3, [r7, #28]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3720      	adds	r7, #32
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b088      	sub	sp, #32
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d11a:	2300      	movs	r3, #0
 800d11c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d122:	2300      	movs	r3, #0
 800d124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d126:	2300      	movs	r3, #0
 800d128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d12a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d12e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d130:	f107 0308 	add.w	r3, r7, #8
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7ff fe66 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fb97 	bl	800d870 <SDMMC_GetCmdError>
 800d142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d144:	69fb      	ldr	r3, [r7, #28]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3720      	adds	r7, #32
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b088      	sub	sp, #32
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d156:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d15a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d15c:	2308      	movs	r3, #8
 800d15e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d166:	2300      	movs	r3, #0
 800d168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d16a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d16e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d170:	f107 0308 	add.w	r3, r7, #8
 800d174:	4619      	mov	r1, r3
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7ff fe46 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fb29 	bl	800d7d4 <SDMMC_GetCmdResp7>
 800d182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d184:	69fb      	ldr	r3, [r7, #28]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3720      	adds	r7, #32
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b088      	sub	sp, #32
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d19c:	2337      	movs	r3, #55	@ 0x37
 800d19e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1b0:	f107 0308 	add.w	r3, r7, #8
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7ff fe26 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d1bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1c0:	2137      	movs	r1, #55	@ 0x37
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 f912 	bl	800d3ec <SDMMC_GetCmdResp1>
 800d1c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1ca:	69fb      	ldr	r3, [r7, #28]
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3720      	adds	r7, #32
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d1e2:	2329      	movs	r3, #41	@ 0x29
 800d1e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d1ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1f6:	f107 0308 	add.w	r3, r7, #8
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff fe03 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 fa2e 	bl	800d664 <SDMMC_GetCmdResp3>
 800d208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d20a:	69fb      	ldr	r3, [r7, #28]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3720      	adds	r7, #32
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b088      	sub	sp, #32
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d222:	2306      	movs	r3, #6
 800d224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d226:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d22a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d22c:	2300      	movs	r3, #0
 800d22e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d234:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d236:	f107 0308 	add.w	r3, r7, #8
 800d23a:	4619      	mov	r1, r3
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff fde3 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d242:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d246:	2106      	movs	r1, #6
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f8cf 	bl	800d3ec <SDMMC_GetCmdResp1>
 800d24e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d250:	69fb      	ldr	r3, [r7, #28]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3720      	adds	r7, #32
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b088      	sub	sp, #32
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d262:	2300      	movs	r3, #0
 800d264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d266:	2333      	movs	r3, #51	@ 0x33
 800d268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d26a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d26e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d270:	2300      	movs	r3, #0
 800d272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d27a:	f107 0308 	add.w	r3, r7, #8
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff fdc1 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d28a:	2133      	movs	r1, #51	@ 0x33
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f8ad 	bl	800d3ec <SDMMC_GetCmdResp1>
 800d292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d294:	69fb      	ldr	r3, [r7, #28]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3720      	adds	r7, #32
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b088      	sub	sp, #32
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d2b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2be:	f107 0308 	add.w	r3, r7, #8
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff fd9f 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f980 	bl	800d5d0 <SDMMC_GetCmdResp2>
 800d2d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2d2:	69fb      	ldr	r3, [r7, #28]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3720      	adds	r7, #32
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b088      	sub	sp, #32
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d2ea:	2309      	movs	r3, #9
 800d2ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d2f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2fe:	f107 0308 	add.w	r3, r7, #8
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f7ff fd7f 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f960 	bl	800d5d0 <SDMMC_GetCmdResp2>
 800d310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d312:	69fb      	ldr	r3, [r7, #28]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3720      	adds	r7, #32
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b088      	sub	sp, #32
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d326:	2300      	movs	r3, #0
 800d328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d32a:	2303      	movs	r3, #3
 800d32c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d32e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d334:	2300      	movs	r3, #0
 800d336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d33c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d33e:	f107 0308 	add.w	r3, r7, #8
 800d342:	4619      	mov	r1, r3
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff fd5f 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d34a:	683a      	ldr	r2, [r7, #0]
 800d34c:	2103      	movs	r1, #3
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f9c8 	bl	800d6e4 <SDMMC_GetCmdResp6>
 800d354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d356:	69fb      	ldr	r3, [r7, #28]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3720      	adds	r7, #32
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b088      	sub	sp, #32
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d36e:	230d      	movs	r3, #13
 800d370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d378:	2300      	movs	r3, #0
 800d37a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d37c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d382:	f107 0308 	add.w	r3, r7, #8
 800d386:	4619      	mov	r1, r3
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7ff fd3d 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d38e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d392:	210d      	movs	r1, #13
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f829 	bl	800d3ec <SDMMC_GetCmdResp1>
 800d39a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d39c:	69fb      	ldr	r3, [r7, #28]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3720      	adds	r7, #32
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b088      	sub	sp, #32
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d3b2:	230d      	movs	r3, #13
 800d3b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3c6:	f107 0308 	add.w	r3, r7, #8
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff fd1b 	bl	800ce08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d3d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3d6:	210d      	movs	r1, #13
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 f807 	bl	800d3ec <SDMMC_GetCmdResp1>
 800d3de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3e0:	69fb      	ldr	r3, [r7, #28]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3720      	adds	r7, #32
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
	...

0800d3ec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b088      	sub	sp, #32
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d3fa:	4b70      	ldr	r3, [pc, #448]	@ (800d5bc <SDMMC_GetCmdResp1+0x1d0>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a70      	ldr	r2, [pc, #448]	@ (800d5c0 <SDMMC_GetCmdResp1+0x1d4>)
 800d400:	fba2 2303 	umull	r2, r3, r2, r3
 800d404:	0a5a      	lsrs	r2, r3, #9
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	fb02 f303 	mul.w	r3, r2, r3
 800d40c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	1e5a      	subs	r2, r3, #1
 800d412:	61fa      	str	r2, [r7, #28]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d102      	bne.n	800d41e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d418:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d41c:	e0c9      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d422:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d424:	69ba      	ldr	r2, [r7, #24]
 800d426:	4b67      	ldr	r3, [pc, #412]	@ (800d5c4 <SDMMC_GetCmdResp1+0x1d8>)
 800d428:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d0ef      	beq.n	800d40e <SDMMC_GetCmdResp1+0x22>
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1ea      	bne.n	800d40e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d43c:	f003 0304 	and.w	r3, r3, #4
 800d440:	2b00      	cmp	r3, #0
 800d442:	d004      	beq.n	800d44e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2204      	movs	r2, #4
 800d448:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d44a:	2304      	movs	r3, #4
 800d44c:	e0b1      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d452:	f003 0301 	and.w	r3, r3, #1
 800d456:	2b00      	cmp	r3, #0
 800d458:	d004      	beq.n	800d464 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2201      	movs	r2, #1
 800d45e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d460:	2301      	movs	r3, #1
 800d462:	e0a6      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	4a58      	ldr	r2, [pc, #352]	@ (800d5c8 <SDMMC_GetCmdResp1+0x1dc>)
 800d468:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f7ff fcf6 	bl	800ce5c <SDMMC_GetCommandResponse>
 800d470:	4603      	mov	r3, r0
 800d472:	461a      	mov	r2, r3
 800d474:	7afb      	ldrb	r3, [r7, #11]
 800d476:	4293      	cmp	r3, r2
 800d478:	d001      	beq.n	800d47e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d47a:	2301      	movs	r3, #1
 800d47c:	e099      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d47e:	2100      	movs	r1, #0
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f7ff fcf8 	bl	800ce76 <SDMMC_GetResponse>
 800d486:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d488:	697a      	ldr	r2, [r7, #20]
 800d48a:	4b50      	ldr	r3, [pc, #320]	@ (800d5cc <SDMMC_GetCmdResp1+0x1e0>)
 800d48c:	4013      	ands	r3, r2
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d101      	bne.n	800d496 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d492:	2300      	movs	r3, #0
 800d494:	e08d      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	da02      	bge.n	800d4a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d49c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d4a0:	e087      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d001      	beq.n	800d4b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d4ac:	2340      	movs	r3, #64	@ 0x40
 800d4ae:	e080      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d4ba:	2380      	movs	r3, #128	@ 0x80
 800d4bc:	e079      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d4c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d4cc:	e071      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d4d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4dc:	e069      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d4e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4ec:	e061      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d4f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4fc:	e059      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d504:	2b00      	cmp	r3, #0
 800d506:	d002      	beq.n	800d50e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d50c:	e051      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d002      	beq.n	800d51e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d51c:	e049      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d524:	2b00      	cmp	r3, #0
 800d526:	d002      	beq.n	800d52e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d528:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d52c:	e041      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d538:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d53c:	e039      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d548:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d54c:	e031      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d558:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d55c:	e029      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d568:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d56c:	e021      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d578:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d57c:	e019      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d588:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d58c:	e011      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d598:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d59c:	e009      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	f003 0308 	and.w	r3, r3, #8
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d002      	beq.n	800d5ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d5a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d5ac:	e001      	b.n	800d5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d5ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3720      	adds	r7, #32
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	2400001c 	.word	0x2400001c
 800d5c0:	10624dd3 	.word	0x10624dd3
 800d5c4:	00200045 	.word	0x00200045
 800d5c8:	002000c5 	.word	0x002000c5
 800d5cc:	fdffe008 	.word	0xfdffe008

0800d5d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d5d8:	4b1f      	ldr	r3, [pc, #124]	@ (800d658 <SDMMC_GetCmdResp2+0x88>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a1f      	ldr	r2, [pc, #124]	@ (800d65c <SDMMC_GetCmdResp2+0x8c>)
 800d5de:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e2:	0a5b      	lsrs	r3, r3, #9
 800d5e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5e8:	fb02 f303 	mul.w	r3, r2, r3
 800d5ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	1e5a      	subs	r2, r3, #1
 800d5f2:	60fa      	str	r2, [r7, #12]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d102      	bne.n	800d5fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d5fc:	e026      	b.n	800d64c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d602:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d0ef      	beq.n	800d5ee <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d614:	2b00      	cmp	r3, #0
 800d616:	d1ea      	bne.n	800d5ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d61c:	f003 0304 	and.w	r3, r3, #4
 800d620:	2b00      	cmp	r3, #0
 800d622:	d004      	beq.n	800d62e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2204      	movs	r2, #4
 800d628:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d62a:	2304      	movs	r3, #4
 800d62c:	e00e      	b.n	800d64c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	2b00      	cmp	r3, #0
 800d638:	d004      	beq.n	800d644 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d640:	2301      	movs	r3, #1
 800d642:	e003      	b.n	800d64c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a06      	ldr	r2, [pc, #24]	@ (800d660 <SDMMC_GetCmdResp2+0x90>)
 800d648:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d64a:	2300      	movs	r3, #0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3714      	adds	r7, #20
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr
 800d658:	2400001c 	.word	0x2400001c
 800d65c:	10624dd3 	.word	0x10624dd3
 800d660:	002000c5 	.word	0x002000c5

0800d664 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d66c:	4b1a      	ldr	r3, [pc, #104]	@ (800d6d8 <SDMMC_GetCmdResp3+0x74>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a1a      	ldr	r2, [pc, #104]	@ (800d6dc <SDMMC_GetCmdResp3+0x78>)
 800d672:	fba2 2303 	umull	r2, r3, r2, r3
 800d676:	0a5b      	lsrs	r3, r3, #9
 800d678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d67c:	fb02 f303 	mul.w	r3, r2, r3
 800d680:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	1e5a      	subs	r2, r3, #1
 800d686:	60fa      	str	r2, [r7, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d68c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d690:	e01b      	b.n	800d6ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d696:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d0ef      	beq.n	800d682 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1ea      	bne.n	800d682 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6b0:	f003 0304 	and.w	r3, r3, #4
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d004      	beq.n	800d6c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2204      	movs	r2, #4
 800d6bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6be:	2304      	movs	r3, #4
 800d6c0:	e003      	b.n	800d6ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a06      	ldr	r2, [pc, #24]	@ (800d6e0 <SDMMC_GetCmdResp3+0x7c>)
 800d6c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3714      	adds	r7, #20
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	2400001c 	.word	0x2400001c
 800d6dc:	10624dd3 	.word	0x10624dd3
 800d6e0:	002000c5 	.word	0x002000c5

0800d6e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b088      	sub	sp, #32
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	607a      	str	r2, [r7, #4]
 800d6f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d6f2:	4b35      	ldr	r3, [pc, #212]	@ (800d7c8 <SDMMC_GetCmdResp6+0xe4>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a35      	ldr	r2, [pc, #212]	@ (800d7cc <SDMMC_GetCmdResp6+0xe8>)
 800d6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fc:	0a5b      	lsrs	r3, r3, #9
 800d6fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d702:	fb02 f303 	mul.w	r3, r2, r3
 800d706:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	1e5a      	subs	r2, r3, #1
 800d70c:	61fa      	str	r2, [r7, #28]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d102      	bne.n	800d718 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d712:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d716:	e052      	b.n	800d7be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d71c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d724:	2b00      	cmp	r3, #0
 800d726:	d0ef      	beq.n	800d708 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1ea      	bne.n	800d708 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d736:	f003 0304 	and.w	r3, r3, #4
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d004      	beq.n	800d748 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2204      	movs	r2, #4
 800d742:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d744:	2304      	movs	r3, #4
 800d746:	e03a      	b.n	800d7be <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	2b00      	cmp	r3, #0
 800d752:	d004      	beq.n	800d75e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2201      	movs	r2, #1
 800d758:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e02f      	b.n	800d7be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f7ff fb7c 	bl	800ce5c <SDMMC_GetCommandResponse>
 800d764:	4603      	mov	r3, r0
 800d766:	461a      	mov	r2, r3
 800d768:	7afb      	ldrb	r3, [r7, #11]
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d001      	beq.n	800d772 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d76e:	2301      	movs	r3, #1
 800d770:	e025      	b.n	800d7be <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	4a16      	ldr	r2, [pc, #88]	@ (800d7d0 <SDMMC_GetCmdResp6+0xec>)
 800d776:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d778:	2100      	movs	r1, #0
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f7ff fb7b 	bl	800ce76 <SDMMC_GetResponse>
 800d780:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d106      	bne.n	800d79a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	0c1b      	lsrs	r3, r3, #16
 800d790:	b29a      	uxth	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d796:	2300      	movs	r3, #0
 800d798:	e011      	b.n	800d7be <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d002      	beq.n	800d7aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d7a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d7a8:	e009      	b.n	800d7be <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d002      	beq.n	800d7ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d7b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d7b8:	e001      	b.n	800d7be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d7ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3720      	adds	r7, #32
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	2400001c 	.word	0x2400001c
 800d7cc:	10624dd3 	.word	0x10624dd3
 800d7d0:	002000c5 	.word	0x002000c5

0800d7d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d7dc:	4b22      	ldr	r3, [pc, #136]	@ (800d868 <SDMMC_GetCmdResp7+0x94>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a22      	ldr	r2, [pc, #136]	@ (800d86c <SDMMC_GetCmdResp7+0x98>)
 800d7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7e6:	0a5b      	lsrs	r3, r3, #9
 800d7e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7ec:	fb02 f303 	mul.w	r3, r2, r3
 800d7f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	1e5a      	subs	r2, r3, #1
 800d7f6:	60fa      	str	r2, [r7, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d102      	bne.n	800d802 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d800:	e02c      	b.n	800d85c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d806:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d0ef      	beq.n	800d7f2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d1ea      	bne.n	800d7f2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d820:	f003 0304 	and.w	r3, r3, #4
 800d824:	2b00      	cmp	r3, #0
 800d826:	d004      	beq.n	800d832 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2204      	movs	r2, #4
 800d82c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d82e:	2304      	movs	r3, #4
 800d830:	e014      	b.n	800d85c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d836:	f003 0301 	and.w	r3, r3, #1
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d004      	beq.n	800d848 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d844:	2301      	movs	r3, #1
 800d846:	e009      	b.n	800d85c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d84c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2240      	movs	r2, #64	@ 0x40
 800d858:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d85a:	2300      	movs	r3, #0

}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	2400001c 	.word	0x2400001c
 800d86c:	10624dd3 	.word	0x10624dd3

0800d870 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d870:	b480      	push	{r7}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d878:	4b11      	ldr	r3, [pc, #68]	@ (800d8c0 <SDMMC_GetCmdError+0x50>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a11      	ldr	r2, [pc, #68]	@ (800d8c4 <SDMMC_GetCmdError+0x54>)
 800d87e:	fba2 2303 	umull	r2, r3, r2, r3
 800d882:	0a5b      	lsrs	r3, r3, #9
 800d884:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d888:	fb02 f303 	mul.w	r3, r2, r3
 800d88c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	1e5a      	subs	r2, r3, #1
 800d892:	60fa      	str	r2, [r7, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d102      	bne.n	800d89e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d898:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d89c:	e009      	b.n	800d8b2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0f1      	beq.n	800d88e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a06      	ldr	r2, [pc, #24]	@ (800d8c8 <SDMMC_GetCmdError+0x58>)
 800d8ae:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	2400001c 	.word	0x2400001c
 800d8c4:	10624dd3 	.word	0x10624dd3
 800d8c8:	002000c5 	.word	0x002000c5

0800d8cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d8cc:	b084      	sub	sp, #16
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b084      	sub	sp, #16
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
 800d8d6:	f107 001c 	add.w	r0, r7, #28
 800d8da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d8de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d121      	bne.n	800d92a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68da      	ldr	r2, [r3, #12]
 800d8f6:	4b2c      	ldr	r3, [pc, #176]	@ (800d9a8 <USB_CoreInit+0xdc>)
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d90a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d105      	bne.n	800d91e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f001 faf6 	bl	800ef10 <USB_CoreReset>
 800d924:	4603      	mov	r3, r0
 800d926:	73fb      	strb	r3, [r7, #15]
 800d928:	e01b      	b.n	800d962 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f001 faea 	bl	800ef10 <USB_CoreReset>
 800d93c:	4603      	mov	r3, r0
 800d93e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d940:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d944:	2b00      	cmp	r3, #0
 800d946:	d106      	bne.n	800d956 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d94c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	639a      	str	r2, [r3, #56]	@ 0x38
 800d954:	e005      	b.n	800d962 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d95a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d962:	7fbb      	ldrb	r3, [r7, #30]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d116      	bne.n	800d996 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d976:	4b0d      	ldr	r3, [pc, #52]	@ (800d9ac <USB_CoreInit+0xe0>)
 800d978:	4313      	orrs	r3, r2
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	f043 0206 	orr.w	r2, r3, #6
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	f043 0220 	orr.w	r2, r3, #32
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9a2:	b004      	add	sp, #16
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	ffbdffbf 	.word	0xffbdffbf
 800d9ac:	03ee0000 	.word	0x03ee0000

0800d9b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d9be:	79fb      	ldrb	r3, [r7, #7]
 800d9c0:	2b02      	cmp	r3, #2
 800d9c2:	d165      	bne.n	800da90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	4a41      	ldr	r2, [pc, #260]	@ (800dacc <USB_SetTurnaroundTime+0x11c>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d906      	bls.n	800d9da <USB_SetTurnaroundTime+0x2a>
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	4a40      	ldr	r2, [pc, #256]	@ (800dad0 <USB_SetTurnaroundTime+0x120>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d202      	bcs.n	800d9da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d9d4:	230f      	movs	r3, #15
 800d9d6:	617b      	str	r3, [r7, #20]
 800d9d8:	e062      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	4a3c      	ldr	r2, [pc, #240]	@ (800dad0 <USB_SetTurnaroundTime+0x120>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d306      	bcc.n	800d9f0 <USB_SetTurnaroundTime+0x40>
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	4a3b      	ldr	r2, [pc, #236]	@ (800dad4 <USB_SetTurnaroundTime+0x124>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d202      	bcs.n	800d9f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d9ea:	230e      	movs	r3, #14
 800d9ec:	617b      	str	r3, [r7, #20]
 800d9ee:	e057      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	4a38      	ldr	r2, [pc, #224]	@ (800dad4 <USB_SetTurnaroundTime+0x124>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d306      	bcc.n	800da06 <USB_SetTurnaroundTime+0x56>
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	4a37      	ldr	r2, [pc, #220]	@ (800dad8 <USB_SetTurnaroundTime+0x128>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d202      	bcs.n	800da06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800da00:	230d      	movs	r3, #13
 800da02:	617b      	str	r3, [r7, #20]
 800da04:	e04c      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	4a33      	ldr	r2, [pc, #204]	@ (800dad8 <USB_SetTurnaroundTime+0x128>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d306      	bcc.n	800da1c <USB_SetTurnaroundTime+0x6c>
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	4a32      	ldr	r2, [pc, #200]	@ (800dadc <USB_SetTurnaroundTime+0x12c>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d802      	bhi.n	800da1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800da16:	230c      	movs	r3, #12
 800da18:	617b      	str	r3, [r7, #20]
 800da1a:	e041      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	4a2f      	ldr	r2, [pc, #188]	@ (800dadc <USB_SetTurnaroundTime+0x12c>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d906      	bls.n	800da32 <USB_SetTurnaroundTime+0x82>
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	4a2e      	ldr	r2, [pc, #184]	@ (800dae0 <USB_SetTurnaroundTime+0x130>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d802      	bhi.n	800da32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800da2c:	230b      	movs	r3, #11
 800da2e:	617b      	str	r3, [r7, #20]
 800da30:	e036      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	4a2a      	ldr	r2, [pc, #168]	@ (800dae0 <USB_SetTurnaroundTime+0x130>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d906      	bls.n	800da48 <USB_SetTurnaroundTime+0x98>
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	4a29      	ldr	r2, [pc, #164]	@ (800dae4 <USB_SetTurnaroundTime+0x134>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d802      	bhi.n	800da48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800da42:	230a      	movs	r3, #10
 800da44:	617b      	str	r3, [r7, #20]
 800da46:	e02b      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	4a26      	ldr	r2, [pc, #152]	@ (800dae4 <USB_SetTurnaroundTime+0x134>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d906      	bls.n	800da5e <USB_SetTurnaroundTime+0xae>
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	4a25      	ldr	r2, [pc, #148]	@ (800dae8 <USB_SetTurnaroundTime+0x138>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d202      	bcs.n	800da5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800da58:	2309      	movs	r3, #9
 800da5a:	617b      	str	r3, [r7, #20]
 800da5c:	e020      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	4a21      	ldr	r2, [pc, #132]	@ (800dae8 <USB_SetTurnaroundTime+0x138>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d306      	bcc.n	800da74 <USB_SetTurnaroundTime+0xc4>
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	4a20      	ldr	r2, [pc, #128]	@ (800daec <USB_SetTurnaroundTime+0x13c>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d802      	bhi.n	800da74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800da6e:	2308      	movs	r3, #8
 800da70:	617b      	str	r3, [r7, #20]
 800da72:	e015      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	4a1d      	ldr	r2, [pc, #116]	@ (800daec <USB_SetTurnaroundTime+0x13c>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d906      	bls.n	800da8a <USB_SetTurnaroundTime+0xda>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	4a1c      	ldr	r2, [pc, #112]	@ (800daf0 <USB_SetTurnaroundTime+0x140>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d202      	bcs.n	800da8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800da84:	2307      	movs	r3, #7
 800da86:	617b      	str	r3, [r7, #20]
 800da88:	e00a      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800da8a:	2306      	movs	r3, #6
 800da8c:	617b      	str	r3, [r7, #20]
 800da8e:	e007      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800da90:	79fb      	ldrb	r3, [r7, #7]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d102      	bne.n	800da9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800da96:	2309      	movs	r3, #9
 800da98:	617b      	str	r3, [r7, #20]
 800da9a:	e001      	b.n	800daa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800da9c:	2309      	movs	r3, #9
 800da9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	68da      	ldr	r2, [r3, #12]
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	029b      	lsls	r3, r3, #10
 800dab4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800dab8:	431a      	orrs	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	371c      	adds	r7, #28
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	00d8acbf 	.word	0x00d8acbf
 800dad0:	00e4e1c0 	.word	0x00e4e1c0
 800dad4:	00f42400 	.word	0x00f42400
 800dad8:	01067380 	.word	0x01067380
 800dadc:	011a499f 	.word	0x011a499f
 800dae0:	01312cff 	.word	0x01312cff
 800dae4:	014ca43f 	.word	0x014ca43f
 800dae8:	016e3600 	.word	0x016e3600
 800daec:	01a6ab1f 	.word	0x01a6ab1f
 800daf0:	01e84800 	.word	0x01e84800

0800daf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	f043 0201 	orr.w	r2, r3, #1
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	370c      	adds	r7, #12
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db16:	b480      	push	{r7}
 800db18:	b083      	sub	sp, #12
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f023 0201 	bic.w	r2, r3, #1
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800db44:	2300      	movs	r3, #0
 800db46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800db54:	78fb      	ldrb	r3, [r7, #3]
 800db56:	2b01      	cmp	r3, #1
 800db58:	d115      	bne.n	800db86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800db66:	200a      	movs	r0, #10
 800db68:	f7f4 fcd0 	bl	800250c <HAL_Delay>
      ms += 10U;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	330a      	adds	r3, #10
 800db70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f001 f93b 	bl	800edee <USB_GetMode>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d01e      	beq.n	800dbbc <USB_SetCurrentMode+0x84>
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2bc7      	cmp	r3, #199	@ 0xc7
 800db82:	d9f0      	bls.n	800db66 <USB_SetCurrentMode+0x2e>
 800db84:	e01a      	b.n	800dbbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800db86:	78fb      	ldrb	r3, [r7, #3]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d115      	bne.n	800dbb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800db98:	200a      	movs	r0, #10
 800db9a:	f7f4 fcb7 	bl	800250c <HAL_Delay>
      ms += 10U;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	330a      	adds	r3, #10
 800dba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f001 f922 	bl	800edee <USB_GetMode>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d005      	beq.n	800dbbc <USB_SetCurrentMode+0x84>
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2bc7      	cmp	r3, #199	@ 0xc7
 800dbb4:	d9f0      	bls.n	800db98 <USB_SetCurrentMode+0x60>
 800dbb6:	e001      	b.n	800dbbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e005      	b.n	800dbc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2bc8      	cmp	r3, #200	@ 0xc8
 800dbc0:	d101      	bne.n	800dbc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e000      	b.n	800dbc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dbd0:	b084      	sub	sp, #16
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b086      	sub	sp, #24
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dbde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dbea:	2300      	movs	r3, #0
 800dbec:	613b      	str	r3, [r7, #16]
 800dbee:	e009      	b.n	800dc04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	3340      	adds	r3, #64	@ 0x40
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	3301      	adds	r3, #1
 800dc02:	613b      	str	r3, [r7, #16]
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2b0e      	cmp	r3, #14
 800dc08:	d9f2      	bls.n	800dbf0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dc0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d11c      	bne.n	800dc4c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc20:	f043 0302 	orr.w	r3, r3, #2
 800dc24:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc2a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	601a      	str	r2, [r3, #0]
 800dc4a:	e005      	b.n	800dc58 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc50:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dc5e:	461a      	mov	r2, r3
 800dc60:	2300      	movs	r3, #0
 800dc62:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d10d      	bne.n	800dc88 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d104      	bne.n	800dc7e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dc74:	2100      	movs	r1, #0
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f000 f968 	bl	800df4c <USB_SetDevSpeed>
 800dc7c:	e008      	b.n	800dc90 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dc7e:	2101      	movs	r1, #1
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 f963 	bl	800df4c <USB_SetDevSpeed>
 800dc86:	e003      	b.n	800dc90 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dc88:	2103      	movs	r1, #3
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f95e 	bl	800df4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dc90:	2110      	movs	r1, #16
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f8fa 	bl	800de8c <USB_FlushTxFifo>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d001      	beq.n	800dca2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f924 	bl	800def0 <USB_FlushRxFifo>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d001      	beq.n	800dcb2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcb8:	461a      	mov	r2, r3
 800dcba:	2300      	movs	r3, #0
 800dcbc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	613b      	str	r3, [r7, #16]
 800dcda:	e043      	b.n	800dd64 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	015a      	lsls	r2, r3, #5
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	4413      	add	r3, r2
 800dce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dcee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dcf2:	d118      	bne.n	800dd26 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10a      	bne.n	800dd10 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	015a      	lsls	r2, r3, #5
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	4413      	add	r3, r2
 800dd02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd06:	461a      	mov	r2, r3
 800dd08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dd0c:	6013      	str	r3, [r2, #0]
 800dd0e:	e013      	b.n	800dd38 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	015a      	lsls	r2, r3, #5
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	4413      	add	r3, r2
 800dd18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dd22:	6013      	str	r3, [r2, #0]
 800dd24:	e008      	b.n	800dd38 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	015a      	lsls	r2, r3, #5
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd32:	461a      	mov	r2, r3
 800dd34:	2300      	movs	r3, #0
 800dd36:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	015a      	lsls	r2, r3, #5
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	4413      	add	r3, r2
 800dd40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd44:	461a      	mov	r2, r3
 800dd46:	2300      	movs	r3, #0
 800dd48:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	015a      	lsls	r2, r3, #5
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	4413      	add	r3, r2
 800dd52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd56:	461a      	mov	r2, r3
 800dd58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dd5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	3301      	adds	r3, #1
 800dd62:	613b      	str	r3, [r7, #16]
 800dd64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd68:	461a      	mov	r2, r3
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d3b5      	bcc.n	800dcdc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd70:	2300      	movs	r3, #0
 800dd72:	613b      	str	r3, [r7, #16]
 800dd74:	e043      	b.n	800ddfe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	015a      	lsls	r2, r3, #5
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd8c:	d118      	bne.n	800ddc0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d10a      	bne.n	800ddaa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	015a      	lsls	r2, r3, #5
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dda0:	461a      	mov	r2, r3
 800dda2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dda6:	6013      	str	r3, [r2, #0]
 800dda8:	e013      	b.n	800ddd2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	015a      	lsls	r2, r3, #5
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ddbc:	6013      	str	r3, [r2, #0]
 800ddbe:	e008      	b.n	800ddd2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	015a      	lsls	r2, r3, #5
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddcc:	461a      	mov	r2, r3
 800ddce:	2300      	movs	r3, #0
 800ddd0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	015a      	lsls	r2, r3, #5
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	4413      	add	r3, r2
 800ddda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddde:	461a      	mov	r2, r3
 800dde0:	2300      	movs	r3, #0
 800dde2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	015a      	lsls	r2, r3, #5
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	4413      	add	r3, r2
 800ddec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ddf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	613b      	str	r3, [r7, #16]
 800ddfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800de02:	461a      	mov	r2, r3
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	4293      	cmp	r3, r2
 800de08:	d3b5      	bcc.n	800dd76 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800de18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800de2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800de2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800de30:	2b00      	cmp	r3, #0
 800de32:	d105      	bne.n	800de40 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	699b      	ldr	r3, [r3, #24]
 800de38:	f043 0210 	orr.w	r2, r3, #16
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	699a      	ldr	r2, [r3, #24]
 800de44:	4b0f      	ldr	r3, [pc, #60]	@ (800de84 <USB_DevInit+0x2b4>)
 800de46:	4313      	orrs	r3, r2
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800de4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	699b      	ldr	r3, [r3, #24]
 800de58:	f043 0208 	orr.w	r2, r3, #8
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800de60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800de64:	2b01      	cmp	r3, #1
 800de66:	d105      	bne.n	800de74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	699a      	ldr	r2, [r3, #24]
 800de6c:	4b06      	ldr	r3, [pc, #24]	@ (800de88 <USB_DevInit+0x2b8>)
 800de6e:	4313      	orrs	r3, r2
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800de74:	7dfb      	ldrb	r3, [r7, #23]
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de80:	b004      	add	sp, #16
 800de82:	4770      	bx	lr
 800de84:	803c3800 	.word	0x803c3800
 800de88:	40000004 	.word	0x40000004

0800de8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de96:	2300      	movs	r3, #0
 800de98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3301      	adds	r3, #1
 800de9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dea6:	d901      	bls.n	800deac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dea8:	2303      	movs	r3, #3
 800deaa:	e01b      	b.n	800dee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	691b      	ldr	r3, [r3, #16]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	daf2      	bge.n	800de9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800deb4:	2300      	movs	r3, #0
 800deb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	019b      	lsls	r3, r3, #6
 800debc:	f043 0220 	orr.w	r2, r3, #32
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ded0:	d901      	bls.n	800ded6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e006      	b.n	800dee4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	f003 0320 	and.w	r3, r3, #32
 800dede:	2b20      	cmp	r3, #32
 800dee0:	d0f0      	beq.n	800dec4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800def8:	2300      	movs	r3, #0
 800defa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	3301      	adds	r3, #1
 800df00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df08:	d901      	bls.n	800df0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800df0a:	2303      	movs	r3, #3
 800df0c:	e018      	b.n	800df40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	2b00      	cmp	r3, #0
 800df14:	daf2      	bge.n	800defc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800df16:	2300      	movs	r3, #0
 800df18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2210      	movs	r2, #16
 800df1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	3301      	adds	r3, #1
 800df24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df2c:	d901      	bls.n	800df32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800df2e:	2303      	movs	r3, #3
 800df30:	e006      	b.n	800df40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	f003 0310 	and.w	r3, r3, #16
 800df3a:	2b10      	cmp	r3, #16
 800df3c:	d0f0      	beq.n	800df20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	460b      	mov	r3, r1
 800df56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	78fb      	ldrb	r3, [r7, #3]
 800df66:	68f9      	ldr	r1, [r7, #12]
 800df68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df6c:	4313      	orrs	r3, r2
 800df6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3714      	adds	r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr

0800df7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800df7e:	b480      	push	{r7}
 800df80:	b087      	sub	sp, #28
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	f003 0306 	and.w	r3, r3, #6
 800df96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d102      	bne.n	800dfa4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	75fb      	strb	r3, [r7, #23]
 800dfa2:	e00a      	b.n	800dfba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d002      	beq.n	800dfb0 <USB_GetDevSpeed+0x32>
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2b06      	cmp	r3, #6
 800dfae:	d102      	bne.n	800dfb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	75fb      	strb	r3, [r7, #23]
 800dfb4:	e001      	b.n	800dfba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dfb6:	230f      	movs	r3, #15
 800dfb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dfba:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	371c      	adds	r7, #28
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	785b      	ldrb	r3, [r3, #1]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d139      	bne.n	800e058 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfea:	69da      	ldr	r2, [r3, #28]
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	f003 030f 	and.w	r3, r3, #15
 800dff4:	2101      	movs	r1, #1
 800dff6:	fa01 f303 	lsl.w	r3, r1, r3
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	68f9      	ldr	r1, [r7, #12]
 800dffe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e002:	4313      	orrs	r3, r2
 800e004:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	015a      	lsls	r2, r3, #5
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	4413      	add	r3, r2
 800e00e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d153      	bne.n	800e0c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	015a      	lsls	r2, r3, #5
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	4413      	add	r3, r2
 800e024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	791b      	ldrb	r3, [r3, #4]
 800e036:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e038:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	059b      	lsls	r3, r3, #22
 800e03e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e040:	431a      	orrs	r2, r3
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	0159      	lsls	r1, r3, #5
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	440b      	add	r3, r1
 800e04a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e04e:	4619      	mov	r1, r3
 800e050:	4b20      	ldr	r3, [pc, #128]	@ (800e0d4 <USB_ActivateEndpoint+0x10c>)
 800e052:	4313      	orrs	r3, r2
 800e054:	600b      	str	r3, [r1, #0]
 800e056:	e035      	b.n	800e0c4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e05e:	69da      	ldr	r2, [r3, #28]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	f003 030f 	and.w	r3, r3, #15
 800e068:	2101      	movs	r1, #1
 800e06a:	fa01 f303 	lsl.w	r3, r1, r3
 800e06e:	041b      	lsls	r3, r3, #16
 800e070:	68f9      	ldr	r1, [r7, #12]
 800e072:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e076:	4313      	orrs	r3, r2
 800e078:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	015a      	lsls	r2, r3, #5
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	4413      	add	r3, r2
 800e082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d119      	bne.n	800e0c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	015a      	lsls	r2, r3, #5
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	4413      	add	r3, r2
 800e098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	791b      	ldrb	r3, [r3, #4]
 800e0aa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e0ac:	430b      	orrs	r3, r1
 800e0ae:	431a      	orrs	r2, r3
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	0159      	lsls	r1, r3, #5
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	440b      	add	r3, r1
 800e0b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4b05      	ldr	r3, [pc, #20]	@ (800e0d4 <USB_ActivateEndpoint+0x10c>)
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	10008000 	.word	0x10008000

0800e0d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	785b      	ldrb	r3, [r3, #1]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d161      	bne.n	800e1b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	015a      	lsls	r2, r3, #5
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e10a:	d11f      	bne.n	800e14c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	015a      	lsls	r2, r3, #5
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	4413      	add	r3, r2
 800e114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	0151      	lsls	r1, r2, #5
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	440a      	add	r2, r1
 800e122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e126:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e12a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	015a      	lsls	r2, r3, #5
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	4413      	add	r3, r2
 800e134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68ba      	ldr	r2, [r7, #8]
 800e13c:	0151      	lsls	r1, r2, #5
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	440a      	add	r2, r1
 800e142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e146:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e14a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	f003 030f 	and.w	r3, r3, #15
 800e15c:	2101      	movs	r1, #1
 800e15e:	fa01 f303 	lsl.w	r3, r1, r3
 800e162:	b29b      	uxth	r3, r3
 800e164:	43db      	mvns	r3, r3
 800e166:	68f9      	ldr	r1, [r7, #12]
 800e168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e16c:	4013      	ands	r3, r2
 800e16e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e176:	69da      	ldr	r2, [r3, #28]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	f003 030f 	and.w	r3, r3, #15
 800e180:	2101      	movs	r1, #1
 800e182:	fa01 f303 	lsl.w	r3, r1, r3
 800e186:	b29b      	uxth	r3, r3
 800e188:	43db      	mvns	r3, r3
 800e18a:	68f9      	ldr	r1, [r7, #12]
 800e18c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e190:	4013      	ands	r3, r2
 800e192:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	015a      	lsls	r2, r3, #5
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	4413      	add	r3, r2
 800e19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	0159      	lsls	r1, r3, #5
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	440b      	add	r3, r1
 800e1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4b35      	ldr	r3, [pc, #212]	@ (800e288 <USB_DeactivateEndpoint+0x1b0>)
 800e1b2:	4013      	ands	r3, r2
 800e1b4:	600b      	str	r3, [r1, #0]
 800e1b6:	e060      	b.n	800e27a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1ce:	d11f      	bne.n	800e210 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	015a      	lsls	r2, r3, #5
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	0151      	lsls	r1, r2, #5
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	440a      	add	r2, r1
 800e1e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e1ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e1ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	015a      	lsls	r2, r3, #5
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	68ba      	ldr	r2, [r7, #8]
 800e200:	0151      	lsls	r1, r2, #5
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	440a      	add	r2, r1
 800e206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e20a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e20e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	f003 030f 	and.w	r3, r3, #15
 800e220:	2101      	movs	r1, #1
 800e222:	fa01 f303 	lsl.w	r3, r1, r3
 800e226:	041b      	lsls	r3, r3, #16
 800e228:	43db      	mvns	r3, r3
 800e22a:	68f9      	ldr	r1, [r7, #12]
 800e22c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e230:	4013      	ands	r3, r2
 800e232:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e23a:	69da      	ldr	r2, [r3, #28]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	f003 030f 	and.w	r3, r3, #15
 800e244:	2101      	movs	r1, #1
 800e246:	fa01 f303 	lsl.w	r3, r1, r3
 800e24a:	041b      	lsls	r3, r3, #16
 800e24c:	43db      	mvns	r3, r3
 800e24e:	68f9      	ldr	r1, [r7, #12]
 800e250:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e254:	4013      	ands	r3, r2
 800e256:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	015a      	lsls	r2, r3, #5
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	4413      	add	r3, r2
 800e260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	0159      	lsls	r1, r3, #5
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	440b      	add	r3, r1
 800e26e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e272:	4619      	mov	r1, r3
 800e274:	4b05      	ldr	r3, [pc, #20]	@ (800e28c <USB_DeactivateEndpoint+0x1b4>)
 800e276:	4013      	ands	r3, r2
 800e278:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3714      	adds	r7, #20
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	ec337800 	.word	0xec337800
 800e28c:	eff37800 	.word	0xeff37800

0800e290 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b08a      	sub	sp, #40	@ 0x28
 800e294:	af02      	add	r7, sp, #8
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	4613      	mov	r3, r2
 800e29c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	785b      	ldrb	r3, [r3, #1]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	f040 8181 	bne.w	800e5b4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d132      	bne.n	800e320 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	015a      	lsls	r2, r3, #5
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2c6:	691a      	ldr	r2, [r3, #16]
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	0159      	lsls	r1, r3, #5
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	440b      	add	r3, r1
 800e2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4ba5      	ldr	r3, [pc, #660]	@ (800e56c <USB_EPStartXfer+0x2dc>)
 800e2d8:	4013      	ands	r3, r2
 800e2da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	015a      	lsls	r2, r3, #5
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	69ba      	ldr	r2, [r7, #24]
 800e2ec:	0151      	lsls	r1, r2, #5
 800e2ee:	69fa      	ldr	r2, [r7, #28]
 800e2f0:	440a      	add	r2, r1
 800e2f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e2fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	015a      	lsls	r2, r3, #5
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	4413      	add	r3, r2
 800e304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e308:	691a      	ldr	r2, [r3, #16]
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	0159      	lsls	r1, r3, #5
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	440b      	add	r3, r1
 800e312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e316:	4619      	mov	r1, r3
 800e318:	4b95      	ldr	r3, [pc, #596]	@ (800e570 <USB_EPStartXfer+0x2e0>)
 800e31a:	4013      	ands	r3, r2
 800e31c:	610b      	str	r3, [r1, #16]
 800e31e:	e092      	b.n	800e446 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	015a      	lsls	r2, r3, #5
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	4413      	add	r3, r2
 800e328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e32c:	691a      	ldr	r2, [r3, #16]
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	0159      	lsls	r1, r3, #5
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	440b      	add	r3, r1
 800e336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e33a:	4619      	mov	r1, r3
 800e33c:	4b8c      	ldr	r3, [pc, #560]	@ (800e570 <USB_EPStartXfer+0x2e0>)
 800e33e:	4013      	ands	r3, r2
 800e340:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	015a      	lsls	r2, r3, #5
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	4413      	add	r3, r2
 800e34a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e34e:	691a      	ldr	r2, [r3, #16]
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	0159      	lsls	r1, r3, #5
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	440b      	add	r3, r1
 800e358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e35c:	4619      	mov	r1, r3
 800e35e:	4b83      	ldr	r3, [pc, #524]	@ (800e56c <USB_EPStartXfer+0x2dc>)
 800e360:	4013      	ands	r3, r2
 800e362:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d11a      	bne.n	800e3a0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	691a      	ldr	r2, [r3, #16]
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	429a      	cmp	r2, r3
 800e374:	d903      	bls.n	800e37e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	689a      	ldr	r2, [r3, #8]
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	015a      	lsls	r2, r3, #5
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	4413      	add	r3, r2
 800e386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	69ba      	ldr	r2, [r7, #24]
 800e38e:	0151      	lsls	r1, r2, #5
 800e390:	69fa      	ldr	r2, [r7, #28]
 800e392:	440a      	add	r2, r1
 800e394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e398:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e39c:	6113      	str	r3, [r2, #16]
 800e39e:	e01b      	b.n	800e3d8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	015a      	lsls	r2, r3, #5
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3ac:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	6919      	ldr	r1, [r3, #16]
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	440b      	add	r3, r1
 800e3b8:	1e59      	subs	r1, r3, #1
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	689b      	ldr	r3, [r3, #8]
 800e3be:	fbb1 f3f3 	udiv	r3, r1, r3
 800e3c2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e3c4:	4b6b      	ldr	r3, [pc, #428]	@ (800e574 <USB_EPStartXfer+0x2e4>)
 800e3c6:	400b      	ands	r3, r1
 800e3c8:	69b9      	ldr	r1, [r7, #24]
 800e3ca:	0148      	lsls	r0, r1, #5
 800e3cc:	69f9      	ldr	r1, [r7, #28]
 800e3ce:	4401      	add	r1, r0
 800e3d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	015a      	lsls	r2, r3, #5
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	4413      	add	r3, r2
 800e3e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3e4:	691a      	ldr	r2, [r3, #16]
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	691b      	ldr	r3, [r3, #16]
 800e3ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3ee:	69b9      	ldr	r1, [r7, #24]
 800e3f0:	0148      	lsls	r0, r1, #5
 800e3f2:	69f9      	ldr	r1, [r7, #28]
 800e3f4:	4401      	add	r1, r0
 800e3f6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	791b      	ldrb	r3, [r3, #4]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d11f      	bne.n	800e446 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	015a      	lsls	r2, r3, #5
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	4413      	add	r3, r2
 800e40e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	69ba      	ldr	r2, [r7, #24]
 800e416:	0151      	lsls	r1, r2, #5
 800e418:	69fa      	ldr	r2, [r7, #28]
 800e41a:	440a      	add	r2, r1
 800e41c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e420:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e424:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	015a      	lsls	r2, r3, #5
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	4413      	add	r3, r2
 800e42e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e432:	691b      	ldr	r3, [r3, #16]
 800e434:	69ba      	ldr	r2, [r7, #24]
 800e436:	0151      	lsls	r1, r2, #5
 800e438:	69fa      	ldr	r2, [r7, #28]
 800e43a:	440a      	add	r2, r1
 800e43c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e440:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e444:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e446:	79fb      	ldrb	r3, [r7, #7]
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d14b      	bne.n	800e4e4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	69db      	ldr	r3, [r3, #28]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d009      	beq.n	800e468 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	015a      	lsls	r2, r3, #5
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	4413      	add	r3, r2
 800e45c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e460:	461a      	mov	r2, r3
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	791b      	ldrb	r3, [r3, #4]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d128      	bne.n	800e4c2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d110      	bne.n	800e4a2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	015a      	lsls	r2, r3, #5
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	4413      	add	r3, r2
 800e488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	69ba      	ldr	r2, [r7, #24]
 800e490:	0151      	lsls	r1, r2, #5
 800e492:	69fa      	ldr	r2, [r7, #28]
 800e494:	440a      	add	r2, r1
 800e496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e49a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e49e:	6013      	str	r3, [r2, #0]
 800e4a0:	e00f      	b.n	800e4c2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	015a      	lsls	r2, r3, #5
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	69ba      	ldr	r2, [r7, #24]
 800e4b2:	0151      	lsls	r1, r2, #5
 800e4b4:	69fa      	ldr	r2, [r7, #28]
 800e4b6:	440a      	add	r2, r1
 800e4b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	015a      	lsls	r2, r3, #5
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	69ba      	ldr	r2, [r7, #24]
 800e4d2:	0151      	lsls	r1, r2, #5
 800e4d4:	69fa      	ldr	r2, [r7, #28]
 800e4d6:	440a      	add	r2, r1
 800e4d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e4e0:	6013      	str	r3, [r2, #0]
 800e4e2:	e16a      	b.n	800e7ba <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	015a      	lsls	r2, r3, #5
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	69ba      	ldr	r2, [r7, #24]
 800e4f4:	0151      	lsls	r1, r2, #5
 800e4f6:	69fa      	ldr	r2, [r7, #28]
 800e4f8:	440a      	add	r2, r1
 800e4fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e502:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	791b      	ldrb	r3, [r3, #4]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d015      	beq.n	800e538 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	2b00      	cmp	r3, #0
 800e512:	f000 8152 	beq.w	800e7ba <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e51c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	f003 030f 	and.w	r3, r3, #15
 800e526:	2101      	movs	r1, #1
 800e528:	fa01 f303 	lsl.w	r3, r1, r3
 800e52c:	69f9      	ldr	r1, [r7, #28]
 800e52e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e532:	4313      	orrs	r3, r2
 800e534:	634b      	str	r3, [r1, #52]	@ 0x34
 800e536:	e140      	b.n	800e7ba <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e544:	2b00      	cmp	r3, #0
 800e546:	d117      	bne.n	800e578 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	015a      	lsls	r2, r3, #5
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	4413      	add	r3, r2
 800e550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	69ba      	ldr	r2, [r7, #24]
 800e558:	0151      	lsls	r1, r2, #5
 800e55a:	69fa      	ldr	r2, [r7, #28]
 800e55c:	440a      	add	r2, r1
 800e55e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e562:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e566:	6013      	str	r3, [r2, #0]
 800e568:	e016      	b.n	800e598 <USB_EPStartXfer+0x308>
 800e56a:	bf00      	nop
 800e56c:	e007ffff 	.word	0xe007ffff
 800e570:	fff80000 	.word	0xfff80000
 800e574:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	015a      	lsls	r2, r3, #5
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	4413      	add	r3, r2
 800e580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	69ba      	ldr	r2, [r7, #24]
 800e588:	0151      	lsls	r1, r2, #5
 800e58a:	69fa      	ldr	r2, [r7, #28]
 800e58c:	440a      	add	r2, r1
 800e58e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e596:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	68d9      	ldr	r1, [r3, #12]
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	781a      	ldrb	r2, [r3, #0]
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	691b      	ldr	r3, [r3, #16]
 800e5a4:	b298      	uxth	r0, r3
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	68f8      	ldr	r0, [r7, #12]
 800e5ae:	f000 f9b9 	bl	800e924 <USB_WritePacket>
 800e5b2:	e102      	b.n	800e7ba <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e5b4:	69bb      	ldr	r3, [r7, #24]
 800e5b6:	015a      	lsls	r2, r3, #5
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5c0:	691a      	ldr	r2, [r3, #16]
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	0159      	lsls	r1, r3, #5
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	440b      	add	r3, r1
 800e5ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4b7c      	ldr	r3, [pc, #496]	@ (800e7c4 <USB_EPStartXfer+0x534>)
 800e5d2:	4013      	ands	r3, r2
 800e5d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	015a      	lsls	r2, r3, #5
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	4413      	add	r3, r2
 800e5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5e2:	691a      	ldr	r2, [r3, #16]
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	0159      	lsls	r1, r3, #5
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	440b      	add	r3, r1
 800e5ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	4b75      	ldr	r3, [pc, #468]	@ (800e7c8 <USB_EPStartXfer+0x538>)
 800e5f4:	4013      	ands	r3, r2
 800e5f6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d12f      	bne.n	800e65e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	691b      	ldr	r3, [r3, #16]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d003      	beq.n	800e60e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	689a      	ldr	r2, [r3, #8]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	689a      	ldr	r2, [r3, #8]
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	015a      	lsls	r2, r3, #5
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	4413      	add	r3, r2
 800e61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e622:	691a      	ldr	r2, [r3, #16]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	6a1b      	ldr	r3, [r3, #32]
 800e628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e62c:	69b9      	ldr	r1, [r7, #24]
 800e62e:	0148      	lsls	r0, r1, #5
 800e630:	69f9      	ldr	r1, [r7, #28]
 800e632:	4401      	add	r1, r0
 800e634:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e638:	4313      	orrs	r3, r2
 800e63a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	015a      	lsls	r2, r3, #5
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	4413      	add	r3, r2
 800e644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e648:	691b      	ldr	r3, [r3, #16]
 800e64a:	69ba      	ldr	r2, [r7, #24]
 800e64c:	0151      	lsls	r1, r2, #5
 800e64e:	69fa      	ldr	r2, [r7, #28]
 800e650:	440a      	add	r2, r1
 800e652:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e656:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e65a:	6113      	str	r3, [r2, #16]
 800e65c:	e05f      	b.n	800e71e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d123      	bne.n	800e6ae <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	015a      	lsls	r2, r3, #5
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	4413      	add	r3, r2
 800e66e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e672:	691a      	ldr	r2, [r3, #16]
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e67c:	69b9      	ldr	r1, [r7, #24]
 800e67e:	0148      	lsls	r0, r1, #5
 800e680:	69f9      	ldr	r1, [r7, #28]
 800e682:	4401      	add	r1, r0
 800e684:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e688:	4313      	orrs	r3, r2
 800e68a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	015a      	lsls	r2, r3, #5
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	4413      	add	r3, r2
 800e694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e698:	691b      	ldr	r3, [r3, #16]
 800e69a:	69ba      	ldr	r2, [r7, #24]
 800e69c:	0151      	lsls	r1, r2, #5
 800e69e:	69fa      	ldr	r2, [r7, #28]
 800e6a0:	440a      	add	r2, r1
 800e6a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e6aa:	6113      	str	r3, [r2, #16]
 800e6ac:	e037      	b.n	800e71e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	691a      	ldr	r2, [r3, #16]
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	1e5a      	subs	r2, r3, #1
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6c2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	689b      	ldr	r3, [r3, #8]
 800e6c8:	8afa      	ldrh	r2, [r7, #22]
 800e6ca:	fb03 f202 	mul.w	r2, r3, r2
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	015a      	lsls	r2, r3, #5
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	4413      	add	r3, r2
 800e6da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6de:	691a      	ldr	r2, [r3, #16]
 800e6e0:	8afb      	ldrh	r3, [r7, #22]
 800e6e2:	04d9      	lsls	r1, r3, #19
 800e6e4:	4b39      	ldr	r3, [pc, #228]	@ (800e7cc <USB_EPStartXfer+0x53c>)
 800e6e6:	400b      	ands	r3, r1
 800e6e8:	69b9      	ldr	r1, [r7, #24]
 800e6ea:	0148      	lsls	r0, r1, #5
 800e6ec:	69f9      	ldr	r1, [r7, #28]
 800e6ee:	4401      	add	r1, r0
 800e6f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	015a      	lsls	r2, r3, #5
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	4413      	add	r3, r2
 800e700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e704:	691a      	ldr	r2, [r3, #16]
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	6a1b      	ldr	r3, [r3, #32]
 800e70a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e70e:	69b9      	ldr	r1, [r7, #24]
 800e710:	0148      	lsls	r0, r1, #5
 800e712:	69f9      	ldr	r1, [r7, #28]
 800e714:	4401      	add	r1, r0
 800e716:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e71a:	4313      	orrs	r3, r2
 800e71c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e71e:	79fb      	ldrb	r3, [r7, #7]
 800e720:	2b01      	cmp	r3, #1
 800e722:	d10d      	bne.n	800e740 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d009      	beq.n	800e740 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	68d9      	ldr	r1, [r3, #12]
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	015a      	lsls	r2, r3, #5
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	4413      	add	r3, r2
 800e738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e73c:	460a      	mov	r2, r1
 800e73e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	791b      	ldrb	r3, [r3, #4]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d128      	bne.n	800e79a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e754:	2b00      	cmp	r3, #0
 800e756:	d110      	bne.n	800e77a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	015a      	lsls	r2, r3, #5
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	4413      	add	r3, r2
 800e760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	69ba      	ldr	r2, [r7, #24]
 800e768:	0151      	lsls	r1, r2, #5
 800e76a:	69fa      	ldr	r2, [r7, #28]
 800e76c:	440a      	add	r2, r1
 800e76e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e772:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e776:	6013      	str	r3, [r2, #0]
 800e778:	e00f      	b.n	800e79a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	015a      	lsls	r2, r3, #5
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	4413      	add	r3, r2
 800e782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	69ba      	ldr	r2, [r7, #24]
 800e78a:	0151      	lsls	r1, r2, #5
 800e78c:	69fa      	ldr	r2, [r7, #28]
 800e78e:	440a      	add	r2, r1
 800e790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e798:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	015a      	lsls	r2, r3, #5
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	69ba      	ldr	r2, [r7, #24]
 800e7aa:	0151      	lsls	r1, r2, #5
 800e7ac:	69fa      	ldr	r2, [r7, #28]
 800e7ae:	440a      	add	r2, r1
 800e7b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e7b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e7b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3720      	adds	r7, #32
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	fff80000 	.word	0xfff80000
 800e7c8:	e007ffff 	.word	0xe007ffff
 800e7cc:	1ff80000 	.word	0x1ff80000

0800e7d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b087      	sub	sp, #28
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	785b      	ldrb	r3, [r3, #1]
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d14a      	bne.n	800e884 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	015a      	lsls	r2, r3, #5
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e806:	f040 8086 	bne.w	800e916 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	015a      	lsls	r2, r3, #5
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	4413      	add	r3, r2
 800e814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	7812      	ldrb	r2, [r2, #0]
 800e81e:	0151      	lsls	r1, r2, #5
 800e820:	693a      	ldr	r2, [r7, #16]
 800e822:	440a      	add	r2, r1
 800e824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e828:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e82c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	015a      	lsls	r2, r3, #5
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	4413      	add	r3, r2
 800e838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	683a      	ldr	r2, [r7, #0]
 800e840:	7812      	ldrb	r2, [r2, #0]
 800e842:	0151      	lsls	r1, r2, #5
 800e844:	693a      	ldr	r2, [r7, #16]
 800e846:	440a      	add	r2, r1
 800e848:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e84c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e850:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3301      	adds	r3, #1
 800e856:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e85e:	4293      	cmp	r3, r2
 800e860:	d902      	bls.n	800e868 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	75fb      	strb	r3, [r7, #23]
          break;
 800e866:	e056      	b.n	800e916 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	015a      	lsls	r2, r3, #5
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	4413      	add	r3, r2
 800e872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e87c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e880:	d0e7      	beq.n	800e852 <USB_EPStopXfer+0x82>
 800e882:	e048      	b.n	800e916 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	015a      	lsls	r2, r3, #5
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	4413      	add	r3, r2
 800e88e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e89c:	d13b      	bne.n	800e916 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	015a      	lsls	r2, r3, #5
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	683a      	ldr	r2, [r7, #0]
 800e8b0:	7812      	ldrb	r2, [r2, #0]
 800e8b2:	0151      	lsls	r1, r2, #5
 800e8b4:	693a      	ldr	r2, [r7, #16]
 800e8b6:	440a      	add	r2, r1
 800e8b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e8c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	015a      	lsls	r2, r3, #5
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	683a      	ldr	r2, [r7, #0]
 800e8d4:	7812      	ldrb	r2, [r2, #0]
 800e8d6:	0151      	lsls	r1, r2, #5
 800e8d8:	693a      	ldr	r2, [r7, #16]
 800e8da:	440a      	add	r2, r1
 800e8dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e8e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d902      	bls.n	800e8fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	75fb      	strb	r3, [r7, #23]
          break;
 800e8fa:	e00c      	b.n	800e916 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	015a      	lsls	r2, r3, #5
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	4413      	add	r3, r2
 800e906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e910:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e914:	d0e7      	beq.n	800e8e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e916:	7dfb      	ldrb	r3, [r7, #23]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	371c      	adds	r7, #28
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e924:	b480      	push	{r7}
 800e926:	b089      	sub	sp, #36	@ 0x24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	4611      	mov	r1, r2
 800e930:	461a      	mov	r2, r3
 800e932:	460b      	mov	r3, r1
 800e934:	71fb      	strb	r3, [r7, #7]
 800e936:	4613      	mov	r3, r2
 800e938:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e942:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e946:	2b00      	cmp	r3, #0
 800e948:	d123      	bne.n	800e992 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e94a:	88bb      	ldrh	r3, [r7, #4]
 800e94c:	3303      	adds	r3, #3
 800e94e:	089b      	lsrs	r3, r3, #2
 800e950:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e952:	2300      	movs	r3, #0
 800e954:	61bb      	str	r3, [r7, #24]
 800e956:	e018      	b.n	800e98a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e958:	79fb      	ldrb	r3, [r7, #7]
 800e95a:	031a      	lsls	r2, r3, #12
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	4413      	add	r3, r2
 800e960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e964:	461a      	mov	r2, r3
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	3301      	adds	r3, #1
 800e970:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	3301      	adds	r3, #1
 800e976:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	3301      	adds	r3, #1
 800e97c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	3301      	adds	r3, #1
 800e982:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	3301      	adds	r3, #1
 800e988:	61bb      	str	r3, [r7, #24]
 800e98a:	69ba      	ldr	r2, [r7, #24]
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d3e2      	bcc.n	800e958 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	3724      	adds	r7, #36	@ 0x24
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b08b      	sub	sp, #44	@ 0x2c
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e9b6:	88fb      	ldrh	r3, [r7, #6]
 800e9b8:	089b      	lsrs	r3, r3, #2
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e9be:	88fb      	ldrh	r3, [r7, #6]
 800e9c0:	f003 0303 	and.w	r3, r3, #3
 800e9c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	623b      	str	r3, [r7, #32]
 800e9ca:	e014      	b.n	800e9f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800e9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9da:	3301      	adds	r3, #1
 800e9dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e9f0:	6a3b      	ldr	r3, [r7, #32]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	623b      	str	r3, [r7, #32]
 800e9f6:	6a3a      	ldr	r2, [r7, #32]
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d3e6      	bcc.n	800e9cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e9fe:	8bfb      	ldrh	r3, [r7, #30]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d01e      	beq.n	800ea42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ea04:	2300      	movs	r3, #0
 800ea06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea0e:	461a      	mov	r2, r3
 800ea10:	f107 0310 	add.w	r3, r7, #16
 800ea14:	6812      	ldr	r2, [r2, #0]
 800ea16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ea18:	693a      	ldr	r2, [r7, #16]
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	00db      	lsls	r3, r3, #3
 800ea20:	fa22 f303 	lsr.w	r3, r2, r3
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea28:	701a      	strb	r2, [r3, #0]
      i++;
 800ea2a:	6a3b      	ldr	r3, [r7, #32]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ea30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea32:	3301      	adds	r3, #1
 800ea34:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ea36:	8bfb      	ldrh	r3, [r7, #30]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ea3c:	8bfb      	ldrh	r3, [r7, #30]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1ea      	bne.n	800ea18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ea42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	372c      	adds	r7, #44	@ 0x2c
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	785b      	ldrb	r3, [r3, #1]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d12c      	bne.n	800eac6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	015a      	lsls	r2, r3, #5
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	4413      	add	r3, r2
 800ea74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	db12      	blt.n	800eaa4 <USB_EPSetStall+0x54>
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d00f      	beq.n	800eaa4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	015a      	lsls	r2, r3, #5
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	68ba      	ldr	r2, [r7, #8]
 800ea94:	0151      	lsls	r1, r2, #5
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	440a      	add	r2, r1
 800ea9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eaa2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	015a      	lsls	r2, r3, #5
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	4413      	add	r3, r2
 800eaac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	0151      	lsls	r1, r2, #5
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	440a      	add	r2, r1
 800eaba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eabe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eac2:	6013      	str	r3, [r2, #0]
 800eac4:	e02b      	b.n	800eb1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	015a      	lsls	r2, r3, #5
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	4413      	add	r3, r2
 800eace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	db12      	blt.n	800eafe <USB_EPSetStall+0xae>
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00f      	beq.n	800eafe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	015a      	lsls	r2, r3, #5
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	4413      	add	r3, r2
 800eae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	0151      	lsls	r1, r2, #5
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	440a      	add	r2, r1
 800eaf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eaf8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eafc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	015a      	lsls	r2, r3, #5
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	4413      	add	r3, r2
 800eb06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	68ba      	ldr	r2, [r7, #8]
 800eb0e:	0151      	lsls	r1, r2, #5
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	440a      	add	r2, r1
 800eb14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eb1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3714      	adds	r7, #20
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b085      	sub	sp, #20
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	785b      	ldrb	r3, [r3, #1]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d128      	bne.n	800eb9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	015a      	lsls	r2, r3, #5
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	4413      	add	r3, r2
 800eb50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	0151      	lsls	r1, r2, #5
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	440a      	add	r2, r1
 800eb5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eb66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	791b      	ldrb	r3, [r3, #4]
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	d003      	beq.n	800eb78 <USB_EPClearStall+0x4c>
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	791b      	ldrb	r3, [r3, #4]
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	d138      	bne.n	800ebea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	015a      	lsls	r2, r3, #5
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	4413      	add	r3, r2
 800eb80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68ba      	ldr	r2, [r7, #8]
 800eb88:	0151      	lsls	r1, r2, #5
 800eb8a:	68fa      	ldr	r2, [r7, #12]
 800eb8c:	440a      	add	r2, r1
 800eb8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb96:	6013      	str	r3, [r2, #0]
 800eb98:	e027      	b.n	800ebea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	015a      	lsls	r2, r3, #5
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	4413      	add	r3, r2
 800eba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68ba      	ldr	r2, [r7, #8]
 800ebaa:	0151      	lsls	r1, r2, #5
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	440a      	add	r2, r1
 800ebb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebb4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ebb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	791b      	ldrb	r3, [r3, #4]
 800ebbe:	2b03      	cmp	r3, #3
 800ebc0:	d003      	beq.n	800ebca <USB_EPClearStall+0x9e>
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	791b      	ldrb	r3, [r3, #4]
 800ebc6:	2b02      	cmp	r3, #2
 800ebc8:	d10f      	bne.n	800ebea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	015a      	lsls	r2, r3, #5
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	68ba      	ldr	r2, [r7, #8]
 800ebda:	0151      	lsls	r1, r2, #5
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	440a      	add	r2, r1
 800ebe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ebe8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ebea:	2300      	movs	r3, #0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	460b      	mov	r3, r1
 800ec02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec16:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ec1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	78fb      	ldrb	r3, [r7, #3]
 800ec26:	011b      	lsls	r3, r3, #4
 800ec28:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ec2c:	68f9      	ldr	r1, [r7, #12]
 800ec2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ec32:	4313      	orrs	r3, r2
 800ec34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3714      	adds	r7, #20
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ec5e:	f023 0303 	bic.w	r3, r3, #3
 800ec62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec72:	f023 0302 	bic.w	r3, r3, #2
 800ec76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr

0800ec86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ec86:	b480      	push	{r7}
 800ec88:	b085      	sub	sp, #20
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eca0:	f023 0303 	bic.w	r3, r3, #3
 800eca4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ecb4:	f043 0302 	orr.w	r3, r3, #2
 800ecb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	695b      	ldr	r3, [r3, #20]
 800ecd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	699b      	ldr	r3, [r3, #24]
 800ecda:	68fa      	ldr	r2, [r7, #12]
 800ecdc:	4013      	ands	r3, r2
 800ecde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ece0:	68fb      	ldr	r3, [r7, #12]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3714      	adds	r7, #20
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ecee:	b480      	push	{r7}
 800ecf0:	b085      	sub	sp, #20
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed0a:	69db      	ldr	r3, [r3, #28]
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	4013      	ands	r3, r2
 800ed10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	0c1b      	lsrs	r3, r3, #16
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3714      	adds	r7, #20
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ed22:	b480      	push	{r7}
 800ed24:	b085      	sub	sp, #20
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed3e:	69db      	ldr	r3, [r3, #28]
 800ed40:	68ba      	ldr	r2, [r7, #8]
 800ed42:	4013      	ands	r3, r2
 800ed44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	b29b      	uxth	r3, r3
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ed56:	b480      	push	{r7}
 800ed58:	b085      	sub	sp, #20
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	460b      	mov	r3, r1
 800ed60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ed66:	78fb      	ldrb	r3, [r7, #3]
 800ed68:	015a      	lsls	r2, r3, #5
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	68ba      	ldr	r2, [r7, #8]
 800ed80:	4013      	ands	r3, r2
 800ed82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ed84:	68bb      	ldr	r3, [r7, #8]
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3714      	adds	r7, #20
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr

0800ed92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ed92:	b480      	push	{r7}
 800ed94:	b087      	sub	sp, #28
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eda8:	691b      	ldr	r3, [r3, #16]
 800edaa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800edb6:	78fb      	ldrb	r3, [r7, #3]
 800edb8:	f003 030f 	and.w	r3, r3, #15
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	fa22 f303 	lsr.w	r3, r2, r3
 800edc2:	01db      	lsls	r3, r3, #7
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	693a      	ldr	r2, [r7, #16]
 800edc8:	4313      	orrs	r3, r2
 800edca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800edcc:	78fb      	ldrb	r3, [r7, #3]
 800edce:	015a      	lsls	r2, r3, #5
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	4413      	add	r3, r2
 800edd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	693a      	ldr	r2, [r7, #16]
 800eddc:	4013      	ands	r3, r2
 800edde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ede0:	68bb      	ldr	r3, [r7, #8]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	371c      	adds	r7, #28
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800edee:	b480      	push	{r7}
 800edf0:	b083      	sub	sp, #12
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	695b      	ldr	r3, [r3, #20]
 800edfa:	f003 0301 	and.w	r3, r3, #1
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
	...

0800ee0c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee26:	4619      	mov	r1, r3
 800ee28:	4b09      	ldr	r3, [pc, #36]	@ (800ee50 <USB_ActivateSetup+0x44>)
 800ee2a:	4013      	ands	r3, r2
 800ee2c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	68fa      	ldr	r2, [r7, #12]
 800ee38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ee3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ee40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ee42:	2300      	movs	r3, #0
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3714      	adds	r7, #20
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr
 800ee50:	fffff800 	.word	0xfffff800

0800ee54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b087      	sub	sp, #28
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	607a      	str	r2, [r7, #4]
 800ee60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	333c      	adds	r3, #60	@ 0x3c
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	4a26      	ldr	r2, [pc, #152]	@ (800ef0c <USB_EP0_OutStart+0xb8>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d90a      	bls.n	800ee8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee88:	d101      	bne.n	800ee8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	e037      	b.n	800eefe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee94:	461a      	mov	r2, r3
 800ee96:	2300      	movs	r3, #0
 800ee98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eea0:	691b      	ldr	r3, [r3, #16]
 800eea2:	697a      	ldr	r2, [r7, #20]
 800eea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eea8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eeac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	697a      	ldr	r2, [r7, #20]
 800eeb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eebc:	f043 0318 	orr.w	r3, r3, #24
 800eec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eed0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800eed4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800eed6:	7afb      	ldrb	r3, [r7, #11]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d10f      	bne.n	800eefc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eee2:	461a      	mov	r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	697a      	ldr	r2, [r7, #20]
 800eef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eef6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800eefa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	371c      	adds	r7, #28
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	4f54300a 	.word	0x4f54300a

0800ef10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b085      	sub	sp, #20
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ef28:	d901      	bls.n	800ef2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ef2a:	2303      	movs	r3, #3
 800ef2c:	e01b      	b.n	800ef66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	691b      	ldr	r3, [r3, #16]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	daf2      	bge.n	800ef1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ef36:	2300      	movs	r3, #0
 800ef38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	f043 0201 	orr.w	r2, r3, #1
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ef52:	d901      	bls.n	800ef58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ef54:	2303      	movs	r3, #3
 800ef56:	e006      	b.n	800ef66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	691b      	ldr	r3, [r3, #16]
 800ef5c:	f003 0301 	and.w	r3, r3, #1
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d0f0      	beq.n	800ef46 <USB_CoreReset+0x36>

  return HAL_OK;
 800ef64:	2300      	movs	r3, #0
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3714      	adds	r7, #20
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr
	...

0800ef74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ef78:	4904      	ldr	r1, [pc, #16]	@ (800ef8c <MX_FATFS_Init+0x18>)
 800ef7a:	4805      	ldr	r0, [pc, #20]	@ (800ef90 <MX_FATFS_Init+0x1c>)
 800ef7c:	f003 fcd4 	bl	8012928 <FATFS_LinkDriver>
 800ef80:	4603      	mov	r3, r0
 800ef82:	461a      	mov	r2, r3
 800ef84:	4b03      	ldr	r3, [pc, #12]	@ (800ef94 <MX_FATFS_Init+0x20>)
 800ef86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ef88:	bf00      	nop
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	240008d4 	.word	0x240008d4
 800ef90:	08015e1c 	.word	0x08015e1c
 800ef94:	240008d0 	.word	0x240008d0

0800ef98 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800efa2:	f000 f879 	bl	800f098 <BSP_SD_IsDetected>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d001      	beq.n	800efb0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800efac:	2302      	movs	r3, #2
 800efae:	e012      	b.n	800efd6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800efb0:	480b      	ldr	r0, [pc, #44]	@ (800efe0 <BSP_SD_Init+0x48>)
 800efb2:	f7f9 fc51 	bl	8008858 <HAL_SD_Init>
 800efb6:	4603      	mov	r3, r0
 800efb8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800efba:	79fb      	ldrb	r3, [r7, #7]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d109      	bne.n	800efd4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800efc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800efc4:	4806      	ldr	r0, [pc, #24]	@ (800efe0 <BSP_SD_Init+0x48>)
 800efc6:	f7fa fb0d 	bl	80095e4 <HAL_SD_ConfigWideBusOperation>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d001      	beq.n	800efd4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800efd0:	2301      	movs	r3, #1
 800efd2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800efd4:	79fb      	ldrb	r3, [r7, #7]
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3708      	adds	r7, #8
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	24000648 	.word	0x24000648

0800efe4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af02      	add	r7, sp, #8
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
 800eff0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800eff2:	2300      	movs	r3, #0
 800eff4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	68ba      	ldr	r2, [r7, #8]
 800effe:	68f9      	ldr	r1, [r7, #12]
 800f000:	4806      	ldr	r0, [pc, #24]	@ (800f01c <BSP_SD_ReadBlocks+0x38>)
 800f002:	f7f9 fd49 	bl	8008a98 <HAL_SD_ReadBlocks>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d001      	beq.n	800f010 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f010:	7dfb      	ldrb	r3, [r7, #23]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3718      	adds	r7, #24
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	24000648 	.word	0x24000648

0800f020 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af02      	add	r7, sp, #8
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]
 800f02c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f02e:	2300      	movs	r3, #0
 800f030:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	9300      	str	r3, [sp, #0]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	68ba      	ldr	r2, [r7, #8]
 800f03a:	68f9      	ldr	r1, [r7, #12]
 800f03c:	4806      	ldr	r0, [pc, #24]	@ (800f058 <BSP_SD_WriteBlocks+0x38>)
 800f03e:	f7f9 feb5 	bl	8008dac <HAL_SD_WriteBlocks>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d001      	beq.n	800f04c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f048:	2301      	movs	r3, #1
 800f04a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f04c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3718      	adds	r7, #24
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	24000648 	.word	0x24000648

0800f05c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f060:	4805      	ldr	r0, [pc, #20]	@ (800f078 <BSP_SD_GetCardState+0x1c>)
 800f062:	f7fa fbd1 	bl	8009808 <HAL_SD_GetCardState>
 800f066:	4603      	mov	r3, r0
 800f068:	2b04      	cmp	r3, #4
 800f06a:	bf14      	ite	ne
 800f06c:	2301      	movne	r3, #1
 800f06e:	2300      	moveq	r3, #0
 800f070:	b2db      	uxtb	r3, r3
}
 800f072:	4618      	mov	r0, r3
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	24000648 	.word	0x24000648

0800f07c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f084:	6879      	ldr	r1, [r7, #4]
 800f086:	4803      	ldr	r0, [pc, #12]	@ (800f094 <BSP_SD_GetCardInfo+0x18>)
 800f088:	f7fa fa80 	bl	800958c <HAL_SD_GetCardInfo>
}
 800f08c:	bf00      	nop
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}
 800f094:	24000648 	.word	0x24000648

0800f098 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f0a2:	f000 f80b 	bl	800f0bc <BSP_PlatformIsDetected>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f0b0:	79fb      	ldrb	r3, [r7, #7]
 800f0b2:	b2db      	uxtb	r3, r3
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f0c6:	2102      	movs	r1, #2
 800f0c8:	4806      	ldr	r0, [pc, #24]	@ (800f0e4 <BSP_PlatformIsDetected+0x28>)
 800f0ca:	f7f3 fd87 	bl	8002bdc <HAL_GPIO_ReadPin>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d001      	beq.n	800f0d8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f0d8:	79fb      	ldrb	r3, [r7, #7]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3708      	adds	r7, #8
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	58020000 	.word	0x58020000

0800f0e8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f0f2:	4b0b      	ldr	r3, [pc, #44]	@ (800f120 <SD_CheckStatus+0x38>)
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f0f8:	f7ff ffb0 	bl	800f05c <BSP_SD_GetCardState>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d107      	bne.n	800f112 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f102:	4b07      	ldr	r3, [pc, #28]	@ (800f120 <SD_CheckStatus+0x38>)
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	b2db      	uxtb	r3, r3
 800f108:	f023 0301 	bic.w	r3, r3, #1
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	4b04      	ldr	r3, [pc, #16]	@ (800f120 <SD_CheckStatus+0x38>)
 800f110:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f112:	4b03      	ldr	r3, [pc, #12]	@ (800f120 <SD_CheckStatus+0x38>)
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	b2db      	uxtb	r3, r3
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	24000029 	.word	0x24000029

0800f124 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	4603      	mov	r3, r0
 800f12c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f12e:	4b0b      	ldr	r3, [pc, #44]	@ (800f15c <SD_initialize+0x38>)
 800f130:	2201      	movs	r2, #1
 800f132:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f134:	f7ff ff30 	bl	800ef98 <BSP_SD_Init>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d107      	bne.n	800f14e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f13e:	79fb      	ldrb	r3, [r7, #7]
 800f140:	4618      	mov	r0, r3
 800f142:	f7ff ffd1 	bl	800f0e8 <SD_CheckStatus>
 800f146:	4603      	mov	r3, r0
 800f148:	461a      	mov	r2, r3
 800f14a:	4b04      	ldr	r3, [pc, #16]	@ (800f15c <SD_initialize+0x38>)
 800f14c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f14e:	4b03      	ldr	r3, [pc, #12]	@ (800f15c <SD_initialize+0x38>)
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	b2db      	uxtb	r3, r3
}
 800f154:	4618      	mov	r0, r3
 800f156:	3708      	adds	r7, #8
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	24000029 	.word	0x24000029

0800f160 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	4603      	mov	r3, r0
 800f168:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f16a:	79fb      	ldrb	r3, [r7, #7]
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7ff ffbb 	bl	800f0e8 <SD_CheckStatus>
 800f172:	4603      	mov	r3, r0
}
 800f174:	4618      	mov	r0, r3
 800f176:	3708      	adds	r7, #8
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	60b9      	str	r1, [r7, #8]
 800f184:	607a      	str	r2, [r7, #4]
 800f186:	603b      	str	r3, [r7, #0]
 800f188:	4603      	mov	r3, r0
 800f18a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f18c:	2301      	movs	r3, #1
 800f18e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f190:	f04f 33ff 	mov.w	r3, #4294967295
 800f194:	683a      	ldr	r2, [r7, #0]
 800f196:	6879      	ldr	r1, [r7, #4]
 800f198:	68b8      	ldr	r0, [r7, #8]
 800f19a:	f7ff ff23 	bl	800efe4 <BSP_SD_ReadBlocks>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d107      	bne.n	800f1b4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f1a4:	bf00      	nop
 800f1a6:	f7ff ff59 	bl	800f05c <BSP_SD_GetCardState>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d1fa      	bne.n	800f1a6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3718      	adds	r7, #24
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b086      	sub	sp, #24
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	603b      	str	r3, [r7, #0]
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1d6:	683a      	ldr	r2, [r7, #0]
 800f1d8:	6879      	ldr	r1, [r7, #4]
 800f1da:	68b8      	ldr	r0, [r7, #8]
 800f1dc:	f7ff ff20 	bl	800f020 <BSP_SD_WriteBlocks>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d107      	bne.n	800f1f6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f1e6:	bf00      	nop
 800f1e8:	f7ff ff38 	bl	800f05c <BSP_SD_GetCardState>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1fa      	bne.n	800f1e8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f1f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3718      	adds	r7, #24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b08c      	sub	sp, #48	@ 0x30
 800f204:	af00      	add	r7, sp, #0
 800f206:	4603      	mov	r3, r0
 800f208:	603a      	str	r2, [r7, #0]
 800f20a:	71fb      	strb	r3, [r7, #7]
 800f20c:	460b      	mov	r3, r1
 800f20e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f210:	2301      	movs	r3, #1
 800f212:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f216:	4b25      	ldr	r3, [pc, #148]	@ (800f2ac <SD_ioctl+0xac>)
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	f003 0301 	and.w	r3, r3, #1
 800f220:	2b00      	cmp	r3, #0
 800f222:	d001      	beq.n	800f228 <SD_ioctl+0x28>
 800f224:	2303      	movs	r3, #3
 800f226:	e03c      	b.n	800f2a2 <SD_ioctl+0xa2>

  switch (cmd)
 800f228:	79bb      	ldrb	r3, [r7, #6]
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d834      	bhi.n	800f298 <SD_ioctl+0x98>
 800f22e:	a201      	add	r2, pc, #4	@ (adr r2, 800f234 <SD_ioctl+0x34>)
 800f230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f234:	0800f245 	.word	0x0800f245
 800f238:	0800f24d 	.word	0x0800f24d
 800f23c:	0800f265 	.word	0x0800f265
 800f240:	0800f27f 	.word	0x0800f27f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f244:	2300      	movs	r3, #0
 800f246:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f24a:	e028      	b.n	800f29e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f24c:	f107 0308 	add.w	r3, r7, #8
 800f250:	4618      	mov	r0, r3
 800f252:	f7ff ff13 	bl	800f07c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f256:	6a3a      	ldr	r2, [r7, #32]
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f25c:	2300      	movs	r3, #0
 800f25e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f262:	e01c      	b.n	800f29e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f264:	f107 0308 	add.w	r3, r7, #8
 800f268:	4618      	mov	r0, r3
 800f26a:	f7ff ff07 	bl	800f07c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f270:	b29a      	uxth	r2, r3
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f276:	2300      	movs	r3, #0
 800f278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f27c:	e00f      	b.n	800f29e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f27e:	f107 0308 	add.w	r3, r7, #8
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff fefa 	bl	800f07c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f28a:	0a5a      	lsrs	r2, r3, #9
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f290:	2300      	movs	r3, #0
 800f292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f296:	e002      	b.n	800f29e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f298:	2304      	movs	r3, #4
 800f29a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f29e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3730      	adds	r7, #48	@ 0x30
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	24000029 	.word	0x24000029

0800f2b0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800f2bc:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800f2c0:	f004 f836 	bl	8013330 <USBD_static_malloc>
 800f2c4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d109      	bne.n	800f2e0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	32b0      	adds	r2, #176	@ 0xb0
 800f2d6:	2100      	movs	r1, #0
 800f2d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f2dc:	2302      	movs	r3, #2
 800f2de:	e06e      	b.n	800f3be <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	32b0      	adds	r2, #176	@ 0xb0
 800f2ea:	68f9      	ldr	r1, [r7, #12]
 800f2ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	32b0      	adds	r2, #176	@ 0xb0
 800f2fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	7c1b      	ldrb	r3, [r3, #16]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d12b      	bne.n	800f364 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800f30c:	4b2e      	ldr	r3, [pc, #184]	@ (800f3c8 <USBD_MSC_Init+0x118>)
 800f30e:	7819      	ldrb	r1, [r3, #0]
 800f310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f314:	2202      	movs	r2, #2
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f003 fec7 	bl	80130aa <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800f31c:	4b2a      	ldr	r3, [pc, #168]	@ (800f3c8 <USBD_MSC_Init+0x118>)
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	f003 020f 	and.w	r2, r3, #15
 800f324:	6879      	ldr	r1, [r7, #4]
 800f326:	4613      	mov	r3, r2
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	4413      	add	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	440b      	add	r3, r1
 800f330:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f334:	2201      	movs	r2, #1
 800f336:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800f338:	4b24      	ldr	r3, [pc, #144]	@ (800f3cc <USBD_MSC_Init+0x11c>)
 800f33a:	7819      	ldrb	r1, [r3, #0]
 800f33c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f340:	2202      	movs	r2, #2
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f003 feb1 	bl	80130aa <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800f348:	4b20      	ldr	r3, [pc, #128]	@ (800f3cc <USBD_MSC_Init+0x11c>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	f003 020f 	and.w	r2, r3, #15
 800f350:	6879      	ldr	r1, [r7, #4]
 800f352:	4613      	mov	r3, r2
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	4413      	add	r3, r2
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	440b      	add	r3, r1
 800f35c:	3324      	adds	r3, #36	@ 0x24
 800f35e:	2201      	movs	r2, #1
 800f360:	801a      	strh	r2, [r3, #0]
 800f362:	e028      	b.n	800f3b6 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800f364:	4b18      	ldr	r3, [pc, #96]	@ (800f3c8 <USBD_MSC_Init+0x118>)
 800f366:	7819      	ldrb	r1, [r3, #0]
 800f368:	2340      	movs	r3, #64	@ 0x40
 800f36a:	2202      	movs	r2, #2
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f003 fe9c 	bl	80130aa <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800f372:	4b15      	ldr	r3, [pc, #84]	@ (800f3c8 <USBD_MSC_Init+0x118>)
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	f003 020f 	and.w	r2, r3, #15
 800f37a:	6879      	ldr	r1, [r7, #4]
 800f37c:	4613      	mov	r3, r2
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	4413      	add	r3, r2
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	440b      	add	r3, r1
 800f386:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f38a:	2201      	movs	r2, #1
 800f38c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800f38e:	4b0f      	ldr	r3, [pc, #60]	@ (800f3cc <USBD_MSC_Init+0x11c>)
 800f390:	7819      	ldrb	r1, [r3, #0]
 800f392:	2340      	movs	r3, #64	@ 0x40
 800f394:	2202      	movs	r2, #2
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f003 fe87 	bl	80130aa <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800f39c:	4b0b      	ldr	r3, [pc, #44]	@ (800f3cc <USBD_MSC_Init+0x11c>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	f003 020f 	and.w	r2, r3, #15
 800f3a4:	6879      	ldr	r1, [r7, #4]
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	4413      	add	r3, r2
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	440b      	add	r3, r1
 800f3b0:	3324      	adds	r3, #36	@ 0x24
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f000 fa2c 	bl	800f814 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	2400008f 	.word	0x2400008f
 800f3cc:	2400008e 	.word	0x2400008e

0800f3d0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	460b      	mov	r3, r1
 800f3da:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800f3dc:	4b26      	ldr	r3, [pc, #152]	@ (800f478 <USBD_MSC_DeInit+0xa8>)
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f003 fe87 	bl	80130f6 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800f3e8:	4b23      	ldr	r3, [pc, #140]	@ (800f478 <USBD_MSC_DeInit+0xa8>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	f003 020f 	and.w	r2, r3, #15
 800f3f0:	6879      	ldr	r1, [r7, #4]
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	4413      	add	r3, r2
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	440b      	add	r3, r1
 800f3fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f400:	2200      	movs	r2, #0
 800f402:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800f404:	4b1d      	ldr	r3, [pc, #116]	@ (800f47c <USBD_MSC_DeInit+0xac>)
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	4619      	mov	r1, r3
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f003 fe73 	bl	80130f6 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800f410:	4b1a      	ldr	r3, [pc, #104]	@ (800f47c <USBD_MSC_DeInit+0xac>)
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	f003 020f 	and.w	r2, r3, #15
 800f418:	6879      	ldr	r1, [r7, #4]
 800f41a:	4613      	mov	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	4413      	add	r3, r2
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	440b      	add	r3, r1
 800f424:	3324      	adds	r3, #36	@ 0x24
 800f426:	2200      	movs	r2, #0
 800f428:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	32b0      	adds	r2, #176	@ 0xb0
 800f434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d018      	beq.n	800f46e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 fa67 	bl	800f910 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	32b0      	adds	r2, #176	@ 0xb0
 800f44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f450:	4618      	mov	r0, r3
 800f452:	f003 ff7b 	bl	801334c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	32b0      	adds	r2, #176	@ 0xb0
 800f460:	2100      	movs	r1, #0
 800f462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2200      	movs	r2, #0
 800f46a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f46e:	2300      	movs	r3, #0
}
 800f470:	4618      	mov	r0, r3
 800f472:	3708      	adds	r7, #8
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}
 800f478:	2400008f 	.word	0x2400008f
 800f47c:	2400008e 	.word	0x2400008e

0800f480 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	32b0      	adds	r2, #176	@ 0xb0
 800f494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f498:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800f49a:	2300      	movs	r3, #0
 800f49c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	e0e1      	b.n	800f670 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d053      	beq.n	800f560 <USBD_MSC_Setup+0xe0>
 800f4b8:	2b20      	cmp	r3, #32
 800f4ba:	f040 80d1 	bne.w	800f660 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	785b      	ldrb	r3, [r3, #1]
 800f4c2:	2bfe      	cmp	r3, #254	@ 0xfe
 800f4c4:	d002      	beq.n	800f4cc <USBD_MSC_Setup+0x4c>
 800f4c6:	2bff      	cmp	r3, #255	@ 0xff
 800f4c8:	d02a      	beq.n	800f520 <USBD_MSC_Setup+0xa0>
 800f4ca:	e041      	b.n	800f550 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	885b      	ldrh	r3, [r3, #2]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d11e      	bne.n	800f512 <USBD_MSC_Setup+0x92>
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	88db      	ldrh	r3, [r3, #6]
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d11a      	bne.n	800f512 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	da15      	bge.n	800f512 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	33b0      	adds	r3, #176	@ 0xb0
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	4413      	add	r3, r2
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	699b      	ldr	r3, [r3, #24]
 800f4f8:	4798      	blx	r3
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	2201      	movs	r2, #1
 800f506:	4619      	mov	r1, r3
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f003 f95d 	bl	80127c8 <USBD_CtlSendData>
 800f50e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f510:	e025      	b.n	800f55e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800f512:	6839      	ldr	r1, [r7, #0]
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f003 f8da 	bl	80126ce <USBD_CtlError>
            ret = USBD_FAIL;
 800f51a:	2303      	movs	r3, #3
 800f51c:	75fb      	strb	r3, [r7, #23]
          break;
 800f51e:	e01e      	b.n	800f55e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	885b      	ldrh	r3, [r3, #2]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d10c      	bne.n	800f542 <USBD_MSC_Setup+0xc2>
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	88db      	ldrh	r3, [r3, #6]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d108      	bne.n	800f542 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800f536:	2b00      	cmp	r3, #0
 800f538:	db03      	blt.n	800f542 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 f9b4 	bl	800f8a8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f540:	e00d      	b.n	800f55e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800f542:	6839      	ldr	r1, [r7, #0]
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f003 f8c2 	bl	80126ce <USBD_CtlError>
            ret = USBD_FAIL;
 800f54a:	2303      	movs	r3, #3
 800f54c:	75fb      	strb	r3, [r7, #23]
          break;
 800f54e:	e006      	b.n	800f55e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800f550:	6839      	ldr	r1, [r7, #0]
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f003 f8bb 	bl	80126ce <USBD_CtlError>
          ret = USBD_FAIL;
 800f558:	2303      	movs	r3, #3
 800f55a:	75fb      	strb	r3, [r7, #23]
          break;
 800f55c:	bf00      	nop
      }
      break;
 800f55e:	e086      	b.n	800f66e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	785b      	ldrb	r3, [r3, #1]
 800f564:	2b0b      	cmp	r3, #11
 800f566:	d872      	bhi.n	800f64e <USBD_MSC_Setup+0x1ce>
 800f568:	a201      	add	r2, pc, #4	@ (adr r2, 800f570 <USBD_MSC_Setup+0xf0>)
 800f56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f56e:	bf00      	nop
 800f570:	0800f5a1 	.word	0x0800f5a1
 800f574:	0800f61d 	.word	0x0800f61d
 800f578:	0800f64f 	.word	0x0800f64f
 800f57c:	0800f64f 	.word	0x0800f64f
 800f580:	0800f64f 	.word	0x0800f64f
 800f584:	0800f64f 	.word	0x0800f64f
 800f588:	0800f64f 	.word	0x0800f64f
 800f58c:	0800f64f 	.word	0x0800f64f
 800f590:	0800f64f 	.word	0x0800f64f
 800f594:	0800f64f 	.word	0x0800f64f
 800f598:	0800f5cb 	.word	0x0800f5cb
 800f59c:	0800f5f5 	.word	0x0800f5f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d107      	bne.n	800f5bc <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f5ac:	f107 030e 	add.w	r3, r7, #14
 800f5b0:	2202      	movs	r2, #2
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f003 f907 	bl	80127c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f5ba:	e050      	b.n	800f65e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f003 f885 	bl	80126ce <USBD_CtlError>
            ret = USBD_FAIL;
 800f5c4:	2303      	movs	r3, #3
 800f5c6:	75fb      	strb	r3, [r7, #23]
          break;
 800f5c8:	e049      	b.n	800f65e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	2b03      	cmp	r3, #3
 800f5d4:	d107      	bne.n	800f5e6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	3304      	adds	r3, #4
 800f5da:	2201      	movs	r2, #1
 800f5dc:	4619      	mov	r1, r3
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f003 f8f2 	bl	80127c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f5e4:	e03b      	b.n	800f65e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f003 f870 	bl	80126ce <USBD_CtlError>
            ret = USBD_FAIL;
 800f5ee:	2303      	movs	r3, #3
 800f5f0:	75fb      	strb	r3, [r7, #23]
          break;
 800f5f2:	e034      	b.n	800f65e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	2b03      	cmp	r3, #3
 800f5fe:	d106      	bne.n	800f60e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	885b      	ldrh	r3, [r3, #2]
 800f604:	b2db      	uxtb	r3, r3
 800f606:	461a      	mov	r2, r3
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f60c:	e027      	b.n	800f65e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800f60e:	6839      	ldr	r1, [r7, #0]
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f003 f85c 	bl	80126ce <USBD_CtlError>
            ret = USBD_FAIL;
 800f616:	2303      	movs	r3, #3
 800f618:	75fb      	strb	r3, [r7, #23]
          break;
 800f61a:	e020      	b.n	800f65e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f622:	b2db      	uxtb	r3, r3
 800f624:	2b03      	cmp	r3, #3
 800f626:	d119      	bne.n	800f65c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	885b      	ldrh	r3, [r3, #2]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d115      	bne.n	800f65c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	889b      	ldrh	r3, [r3, #4]
 800f634:	b2db      	uxtb	r3, r3
 800f636:	4619      	mov	r1, r3
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f003 fd7b 	bl	8013134 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	889b      	ldrh	r3, [r3, #4]
 800f642:	b2db      	uxtb	r3, r3
 800f644:	4619      	mov	r1, r3
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 fb2e 	bl	800fca8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800f64c:	e006      	b.n	800f65c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800f64e:	6839      	ldr	r1, [r7, #0]
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f003 f83c 	bl	80126ce <USBD_CtlError>
          ret = USBD_FAIL;
 800f656:	2303      	movs	r3, #3
 800f658:	75fb      	strb	r3, [r7, #23]
          break;
 800f65a:	e000      	b.n	800f65e <USBD_MSC_Setup+0x1de>
          break;
 800f65c:	bf00      	nop
      }
      break;
 800f65e:	e006      	b.n	800f66e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800f660:	6839      	ldr	r1, [r7, #0]
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f003 f833 	bl	80126ce <USBD_CtlError>
      ret = USBD_FAIL;
 800f668:	2303      	movs	r3, #3
 800f66a:	75fb      	strb	r3, [r7, #23]
      break;
 800f66c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3718      	adds	r7, #24
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	460b      	mov	r3, r1
 800f682:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800f684:	78fb      	ldrb	r3, [r7, #3]
 800f686:	4619      	mov	r1, r3
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 f959 	bl	800f940 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	3708      	adds	r7, #8
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800f6a4:	78fb      	ldrb	r3, [r7, #3]
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 f983 	bl	800f9b4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800f6ae:	2300      	movs	r3, #0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800f6c0:	2181      	movs	r1, #129	@ 0x81
 800f6c2:	4812      	ldr	r0, [pc, #72]	@ (800f70c <USBD_MSC_GetHSCfgDesc+0x54>)
 800f6c4:	f002 f9a4 	bl	8011a10 <USBD_GetEpDesc>
 800f6c8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800f6ca:	2101      	movs	r1, #1
 800f6cc:	480f      	ldr	r0, [pc, #60]	@ (800f70c <USBD_MSC_GetHSCfgDesc+0x54>)
 800f6ce:	f002 f99f 	bl	8011a10 <USBD_GetEpDesc>
 800f6d2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d006      	beq.n	800f6e8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	711a      	strb	r2, [r3, #4]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	f042 0202 	orr.w	r2, r2, #2
 800f6e6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d006      	beq.n	800f6fc <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	711a      	strb	r2, [r3, #4]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f042 0202 	orr.w	r2, r2, #2
 800f6fa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2220      	movs	r2, #32
 800f700:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800f702:	4b02      	ldr	r3, [pc, #8]	@ (800f70c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800f704:	4618      	mov	r0, r3
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	24000064 	.word	0x24000064

0800f710 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800f718:	2181      	movs	r1, #129	@ 0x81
 800f71a:	4812      	ldr	r0, [pc, #72]	@ (800f764 <USBD_MSC_GetFSCfgDesc+0x54>)
 800f71c:	f002 f978 	bl	8011a10 <USBD_GetEpDesc>
 800f720:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800f722:	2101      	movs	r1, #1
 800f724:	480f      	ldr	r0, [pc, #60]	@ (800f764 <USBD_MSC_GetFSCfgDesc+0x54>)
 800f726:	f002 f973 	bl	8011a10 <USBD_GetEpDesc>
 800f72a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d006      	beq.n	800f740 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2200      	movs	r2, #0
 800f736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f73a:	711a      	strb	r2, [r3, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d006      	beq.n	800f754 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	2200      	movs	r2, #0
 800f74a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f74e:	711a      	strb	r2, [r3, #4]
 800f750:	2200      	movs	r2, #0
 800f752:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2220      	movs	r2, #32
 800f758:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800f75a:	4b02      	ldr	r3, [pc, #8]	@ (800f764 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3710      	adds	r7, #16
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	24000064 	.word	0x24000064

0800f768 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800f770:	2181      	movs	r1, #129	@ 0x81
 800f772:	4812      	ldr	r0, [pc, #72]	@ (800f7bc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800f774:	f002 f94c 	bl	8011a10 <USBD_GetEpDesc>
 800f778:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800f77a:	2101      	movs	r1, #1
 800f77c:	480f      	ldr	r0, [pc, #60]	@ (800f7bc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800f77e:	f002 f947 	bl	8011a10 <USBD_GetEpDesc>
 800f782:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d006      	beq.n	800f798 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2200      	movs	r2, #0
 800f78e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f792:	711a      	strb	r2, [r3, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d006      	beq.n	800f7ac <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f7a6:	711a      	strb	r2, [r3, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2220      	movs	r2, #32
 800f7b0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800f7b2:	4b02      	ldr	r3, [pc, #8]	@ (800f7bc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	24000064 	.word	0x24000064

0800f7c0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	220a      	movs	r2, #10
 800f7cc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800f7ce:	4b03      	ldr	r3, [pc, #12]	@ (800f7dc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr
 800f7dc:	24000084 	.word	0x24000084

0800f7e0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d101      	bne.n	800f7f4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	e009      	b.n	800f808 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	33b0      	adds	r3, #176	@ 0xb0
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	4413      	add	r3, r2
 800f802:	683a      	ldr	r2, [r7, #0]
 800f804:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	32b0      	adds	r2, #176	@ 0xb0
 800f826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f82a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d032      	beq.n	800f898 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2200      	movs	r2, #0
 800f836:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2200      	movs	r2, #0
 800f83c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2200      	movs	r2, #0
 800f84a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	2200      	movs	r2, #0
 800f852:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	33b0      	adds	r3, #176	@ 0xb0
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	4413      	add	r3, r2
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2000      	movs	r0, #0
 800f86a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800f86c:	4b0c      	ldr	r3, [pc, #48]	@ (800f8a0 <MSC_BOT_Init+0x8c>)
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	4619      	mov	r1, r3
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f003 fc5e 	bl	8013134 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800f878:	4b0a      	ldr	r3, [pc, #40]	@ (800f8a4 <MSC_BOT_Init+0x90>)
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	4619      	mov	r1, r3
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f003 fc58 	bl	8013134 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800f884:	4b06      	ldr	r3, [pc, #24]	@ (800f8a0 <MSC_BOT_Init+0x8c>)
 800f886:	7819      	ldrb	r1, [r3, #0]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800f88e:	231f      	movs	r3, #31
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f003 fd18 	bl	80132c6 <USBD_LL_PrepareReceive>
 800f896:	e000      	b.n	800f89a <MSC_BOT_Init+0x86>
    return;
 800f898:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	2400008f 	.word	0x2400008f
 800f8a4:	2400008e 	.word	0x2400008e

0800f8a8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	32b0      	adds	r2, #176	@ 0xb0
 800f8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8be:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d01b      	beq.n	800f8fe <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800f8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f908 <MSC_BOT_Reset+0x60>)
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f003 fc69 	bl	80131b0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800f8de:	4b0b      	ldr	r3, [pc, #44]	@ (800f90c <MSC_BOT_Reset+0x64>)
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f003 fc63 	bl	80131b0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800f8ea:	4b08      	ldr	r3, [pc, #32]	@ (800f90c <MSC_BOT_Reset+0x64>)
 800f8ec:	7819      	ldrb	r1, [r3, #0]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800f8f4:	231f      	movs	r3, #31
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f003 fce5 	bl	80132c6 <USBD_LL_PrepareReceive>
 800f8fc:	e000      	b.n	800f900 <MSC_BOT_Reset+0x58>
    return;
 800f8fe:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800f900:	3710      	adds	r7, #16
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	2400008e 	.word	0x2400008e
 800f90c:	2400008f 	.word	0x2400008f

0800f910 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800f910:	b480      	push	{r7}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	32b0      	adds	r2, #176	@ 0xb0
 800f922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f926:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d002      	beq.n	800f934 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2200      	movs	r2, #0
 800f932:	721a      	strb	r2, [r3, #8]
  }
}
 800f934:	bf00      	nop
 800f936:	3714      	adds	r7, #20
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	460b      	mov	r3, r1
 800f94a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	32b0      	adds	r2, #176	@ 0xb0
 800f956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f95a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d020      	beq.n	800f9a4 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	7a1b      	ldrb	r3, [r3, #8]
 800f966:	2b02      	cmp	r3, #2
 800f968:	d005      	beq.n	800f976 <MSC_BOT_DataIn+0x36>
 800f96a:	2b02      	cmp	r3, #2
 800f96c:	db1c      	blt.n	800f9a8 <MSC_BOT_DataIn+0x68>
 800f96e:	3b03      	subs	r3, #3
 800f970:	2b01      	cmp	r3, #1
 800f972:	d819      	bhi.n	800f9a8 <MSC_BOT_DataIn+0x68>
 800f974:	e011      	b.n	800f99a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800f982:	461a      	mov	r2, r3
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 f9c9 	bl	800fd1c <SCSI_ProcessCmd>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	da0d      	bge.n	800f9ac <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f990:	2101      	movs	r1, #1
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 f90c 	bl	800fbb0 <MSC_BOT_SendCSW>
      }
      break;
 800f998:	e008      	b.n	800f9ac <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f99a:	2100      	movs	r1, #0
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 f907 	bl	800fbb0 <MSC_BOT_SendCSW>
      break;
 800f9a2:	e004      	b.n	800f9ae <MSC_BOT_DataIn+0x6e>
    return;
 800f9a4:	bf00      	nop
 800f9a6:	e002      	b.n	800f9ae <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800f9a8:	bf00      	nop
 800f9aa:	e000      	b.n	800f9ae <MSC_BOT_DataIn+0x6e>
      break;
 800f9ac:	bf00      	nop
  }
}
 800f9ae:	3710      	adds	r7, #16
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}

0800f9b4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	460b      	mov	r3, r1
 800f9be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	32b0      	adds	r2, #176	@ 0xb0
 800f9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ce:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d01c      	beq.n	800fa10 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	7a1b      	ldrb	r3, [r3, #8]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d002      	beq.n	800f9e4 <MSC_BOT_DataOut+0x30>
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d004      	beq.n	800f9ec <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800f9e2:	e018      	b.n	800fa16 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 f819 	bl	800fa1c <MSC_BOT_CBW_Decode>
      break;
 800f9ea:	e014      	b.n	800fa16 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 f98e 	bl	800fd1c <SCSI_ProcessCmd>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	da06      	bge.n	800fa14 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800fa06:	2101      	movs	r1, #1
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f8d1 	bl	800fbb0 <MSC_BOT_SendCSW>
      break;
 800fa0e:	e001      	b.n	800fa14 <MSC_BOT_DataOut+0x60>
    return;
 800fa10:	bf00      	nop
 800fa12:	e000      	b.n	800fa16 <MSC_BOT_DataOut+0x62>
      break;
 800fa14:	bf00      	nop
  }
}
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	32b0      	adds	r2, #176	@ 0xb0
 800fa2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa32:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d079      	beq.n	800fb2e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800fa52:	4b3a      	ldr	r3, [pc, #232]	@ (800fb3c <MSC_BOT_CBW_Decode+0x120>)
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f003 fc55 	bl	8013308 <USBD_LL_GetRxDataSize>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b1f      	cmp	r3, #31
 800fa62:	d114      	bne.n	800fa8e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800fa6a:	4a35      	ldr	r2, [pc, #212]	@ (800fb40 <MSC_BOT_CBW_Decode+0x124>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d10e      	bne.n	800fa8e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d809      	bhi.n	800fa8e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d004      	beq.n	800fa8e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800fa8a:	2b10      	cmp	r3, #16
 800fa8c:	d90e      	bls.n	800faac <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800fa94:	2320      	movs	r3, #32
 800fa96:	2205      	movs	r2, #5
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 fe54 	bl	8010746 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2202      	movs	r2, #2
 800faa2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 f8bd 	bl	800fc24 <MSC_BOT_Abort>
 800faaa:	e043      	b.n	800fb34 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800fab8:	461a      	mov	r2, r3
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 f92e 	bl	800fd1c <SCSI_ProcessCmd>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	da0c      	bge.n	800fae0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	7a1b      	ldrb	r3, [r3, #8]
 800faca:	2b05      	cmp	r3, #5
 800facc:	d104      	bne.n	800fad8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800face:	2101      	movs	r1, #1
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 f86d 	bl	800fbb0 <MSC_BOT_SendCSW>
 800fad6:	e02d      	b.n	800fb34 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 f8a3 	bl	800fc24 <MSC_BOT_Abort>
 800fade:	e029      	b.n	800fb34 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	7a1b      	ldrb	r3, [r3, #8]
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	d024      	beq.n	800fb32 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800faec:	2b01      	cmp	r3, #1
 800faee:	d020      	beq.n	800fb32 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800faf4:	2b03      	cmp	r3, #3
 800faf6:	d01c      	beq.n	800fb32 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d009      	beq.n	800fb14 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f103 0110 	add.w	r1, r3, #16
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f000 f819 	bl	800fb44 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800fb12:	e00f      	b.n	800fb34 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d104      	bne.n	800fb26 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 f846 	bl	800fbb0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800fb24:	e006      	b.n	800fb34 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 f87c 	bl	800fc24 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800fb2c:	e002      	b.n	800fb34 <MSC_BOT_CBW_Decode+0x118>
    return;
 800fb2e:	bf00      	nop
 800fb30:	e000      	b.n	800fb34 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800fb32:	bf00      	nop
    }
  }
}
 800fb34:	3710      	adds	r7, #16
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	2400008f 	.word	0x2400008f
 800fb40:	43425355 	.word	0x43425355

0800fb44 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b086      	sub	sp, #24
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	60b9      	str	r1, [r7, #8]
 800fb4e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	32b0      	adds	r2, #176	@ 0xb0
 800fb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb5e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d01e      	beq.n	800fba4 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	bf28      	it	cs
 800fb72:	4613      	movcs	r3, r2
 800fb74:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	1ad2      	subs	r2, r2, r3
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	2204      	movs	r2, #4
 800fb92:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800fb94:	4b05      	ldr	r3, [pc, #20]	@ (800fbac <MSC_BOT_SendData+0x68>)
 800fb96:	7819      	ldrb	r1, [r3, #0]
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f003 fb71 	bl	8013284 <USBD_LL_Transmit>
 800fba2:	e000      	b.n	800fba6 <MSC_BOT_SendData+0x62>
    return;
 800fba4:	bf00      	nop
}
 800fba6:	3718      	adds	r7, #24
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	2400008e 	.word	0x2400008e

0800fbb0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	32b0      	adds	r2, #176	@ 0xb0
 800fbc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d01d      	beq.n	800fc0e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	4a10      	ldr	r2, [pc, #64]	@ (800fc18 <MSC_BOT_SendCSW+0x68>)
 800fbd6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	78fa      	ldrb	r2, [r7, #3]
 800fbde:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800fbe8:	4b0c      	ldr	r3, [pc, #48]	@ (800fc1c <MSC_BOT_SendCSW+0x6c>)
 800fbea:	7819      	ldrb	r1, [r3, #0]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800fbf2:	230d      	movs	r3, #13
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f003 fb45 	bl	8013284 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800fbfa:	4b09      	ldr	r3, [pc, #36]	@ (800fc20 <MSC_BOT_SendCSW+0x70>)
 800fbfc:	7819      	ldrb	r1, [r3, #0]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800fc04:	231f      	movs	r3, #31
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f003 fb5d 	bl	80132c6 <USBD_LL_PrepareReceive>
 800fc0c:	e000      	b.n	800fc10 <MSC_BOT_SendCSW+0x60>
    return;
 800fc0e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	53425355 	.word	0x53425355
 800fc1c:	2400008e 	.word	0x2400008e
 800fc20:	2400008f 	.word	0x2400008f

0800fc24 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	32b0      	adds	r2, #176	@ 0xb0
 800fc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc3a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d02a      	beq.n	800fc98 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d10e      	bne.n	800fc6a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d009      	beq.n	800fc6a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d105      	bne.n	800fc6a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800fc5e:	4b10      	ldr	r3, [pc, #64]	@ (800fca0 <MSC_BOT_Abort+0x7c>)
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	4619      	mov	r1, r3
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f003 fa84 	bl	8013172 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800fc6a:	4b0e      	ldr	r3, [pc, #56]	@ (800fca4 <MSC_BOT_Abort+0x80>)
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	4619      	mov	r1, r3
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f003 fa7e 	bl	8013172 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	7a5b      	ldrb	r3, [r3, #9]
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d10d      	bne.n	800fc9a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800fc7e:	4b09      	ldr	r3, [pc, #36]	@ (800fca4 <MSC_BOT_Abort+0x80>)
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	4619      	mov	r1, r3
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f003 fa74 	bl	8013172 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800fc8a:	4b05      	ldr	r3, [pc, #20]	@ (800fca0 <MSC_BOT_Abort+0x7c>)
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	4619      	mov	r1, r3
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f003 fa6e 	bl	8013172 <USBD_LL_StallEP>
 800fc96:	e000      	b.n	800fc9a <MSC_BOT_Abort+0x76>
    return;
 800fc98:	bf00      	nop
  }
}
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	2400008f 	.word	0x2400008f
 800fca4:	2400008e 	.word	0x2400008e

0800fca8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	32b0      	adds	r2, #176	@ 0xb0
 800fcbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcc2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d01d      	beq.n	800fd06 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	7a5b      	ldrb	r3, [r3, #9]
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	d10c      	bne.n	800fcec <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800fcd2:	4b10      	ldr	r3, [pc, #64]	@ (800fd14 <MSC_BOT_CplClrFeature+0x6c>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f003 fa4a 	bl	8013172 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800fcde:	4b0e      	ldr	r3, [pc, #56]	@ (800fd18 <MSC_BOT_CplClrFeature+0x70>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	4619      	mov	r1, r3
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f003 fa44 	bl	8013172 <USBD_LL_StallEP>
 800fcea:	e00f      	b.n	800fd0c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800fcec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	da0a      	bge.n	800fd0a <MSC_BOT_CplClrFeature+0x62>
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	7a5b      	ldrb	r3, [r3, #9]
 800fcf8:	2b01      	cmp	r3, #1
 800fcfa:	d006      	beq.n	800fd0a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800fcfc:	2101      	movs	r1, #1
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f7ff ff56 	bl	800fbb0 <MSC_BOT_SendCSW>
 800fd04:	e002      	b.n	800fd0c <MSC_BOT_CplClrFeature+0x64>
    return;
 800fd06:	bf00      	nop
 800fd08:	e000      	b.n	800fd0c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800fd0a:	bf00      	nop
  }
}
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	2400008e 	.word	0x2400008e
 800fd18:	2400008f 	.word	0x2400008f

0800fd1c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	460b      	mov	r3, r1
 800fd26:	607a      	str	r2, [r7, #4]
 800fd28:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	32b0      	adds	r2, #176	@ 0xb0
 800fd34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd38:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d102      	bne.n	800fd46 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800fd40:	f04f 33ff 	mov.w	r3, #4294967295
 800fd44:	e168      	b.n	8010018 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	2baa      	cmp	r3, #170	@ 0xaa
 800fd4c:	f000 8144 	beq.w	800ffd8 <SCSI_ProcessCmd+0x2bc>
 800fd50:	2baa      	cmp	r3, #170	@ 0xaa
 800fd52:	f300 8153 	bgt.w	800fffc <SCSI_ProcessCmd+0x2e0>
 800fd56:	2ba8      	cmp	r3, #168	@ 0xa8
 800fd58:	f000 812c 	beq.w	800ffb4 <SCSI_ProcessCmd+0x298>
 800fd5c:	2ba8      	cmp	r3, #168	@ 0xa8
 800fd5e:	f300 814d 	bgt.w	800fffc <SCSI_ProcessCmd+0x2e0>
 800fd62:	2b5a      	cmp	r3, #90	@ 0x5a
 800fd64:	f300 80c0 	bgt.w	800fee8 <SCSI_ProcessCmd+0x1cc>
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	f2c0 8147 	blt.w	800fffc <SCSI_ProcessCmd+0x2e0>
 800fd6e:	2b5a      	cmp	r3, #90	@ 0x5a
 800fd70:	f200 8144 	bhi.w	800fffc <SCSI_ProcessCmd+0x2e0>
 800fd74:	a201      	add	r2, pc, #4	@ (adr r2, 800fd7c <SCSI_ProcessCmd+0x60>)
 800fd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd7a:	bf00      	nop
 800fd7c:	0800feef 	.word	0x0800feef
 800fd80:	0800fffd 	.word	0x0800fffd
 800fd84:	0800fffd 	.word	0x0800fffd
 800fd88:	0800ff01 	.word	0x0800ff01
 800fd8c:	0800fffd 	.word	0x0800fffd
 800fd90:	0800fffd 	.word	0x0800fffd
 800fd94:	0800fffd 	.word	0x0800fffd
 800fd98:	0800fffd 	.word	0x0800fffd
 800fd9c:	0800fffd 	.word	0x0800fffd
 800fda0:	0800fffd 	.word	0x0800fffd
 800fda4:	0800fffd 	.word	0x0800fffd
 800fda8:	0800fffd 	.word	0x0800fffd
 800fdac:	0800fffd 	.word	0x0800fffd
 800fdb0:	0800fffd 	.word	0x0800fffd
 800fdb4:	0800fffd 	.word	0x0800fffd
 800fdb8:	0800fffd 	.word	0x0800fffd
 800fdbc:	0800fffd 	.word	0x0800fffd
 800fdc0:	0800fffd 	.word	0x0800fffd
 800fdc4:	0800ff13 	.word	0x0800ff13
 800fdc8:	0800fffd 	.word	0x0800fffd
 800fdcc:	0800fffd 	.word	0x0800fffd
 800fdd0:	0800fffd 	.word	0x0800fffd
 800fdd4:	0800fffd 	.word	0x0800fffd
 800fdd8:	0800fffd 	.word	0x0800fffd
 800fddc:	0800fffd 	.word	0x0800fffd
 800fde0:	0800fffd 	.word	0x0800fffd
 800fde4:	0800ff49 	.word	0x0800ff49
 800fde8:	0800ff25 	.word	0x0800ff25
 800fdec:	0800fffd 	.word	0x0800fffd
 800fdf0:	0800fffd 	.word	0x0800fffd
 800fdf4:	0800ff37 	.word	0x0800ff37
 800fdf8:	0800fffd 	.word	0x0800fffd
 800fdfc:	0800fffd 	.word	0x0800fffd
 800fe00:	0800fffd 	.word	0x0800fffd
 800fe04:	0800fffd 	.word	0x0800fffd
 800fe08:	0800ff6d 	.word	0x0800ff6d
 800fe0c:	0800fffd 	.word	0x0800fffd
 800fe10:	0800ff7f 	.word	0x0800ff7f
 800fe14:	0800fffd 	.word	0x0800fffd
 800fe18:	0800fffd 	.word	0x0800fffd
 800fe1c:	0800ffa3 	.word	0x0800ffa3
 800fe20:	0800fffd 	.word	0x0800fffd
 800fe24:	0800ffc7 	.word	0x0800ffc7
 800fe28:	0800fffd 	.word	0x0800fffd
 800fe2c:	0800fffd 	.word	0x0800fffd
 800fe30:	0800fffd 	.word	0x0800fffd
 800fe34:	0800fffd 	.word	0x0800fffd
 800fe38:	0800ffeb 	.word	0x0800ffeb
 800fe3c:	0800fffd 	.word	0x0800fffd
 800fe40:	0800fffd 	.word	0x0800fffd
 800fe44:	0800fffd 	.word	0x0800fffd
 800fe48:	0800fffd 	.word	0x0800fffd
 800fe4c:	0800fffd 	.word	0x0800fffd
 800fe50:	0800fffd 	.word	0x0800fffd
 800fe54:	0800fffd 	.word	0x0800fffd
 800fe58:	0800fffd 	.word	0x0800fffd
 800fe5c:	0800fffd 	.word	0x0800fffd
 800fe60:	0800fffd 	.word	0x0800fffd
 800fe64:	0800fffd 	.word	0x0800fffd
 800fe68:	0800fffd 	.word	0x0800fffd
 800fe6c:	0800fffd 	.word	0x0800fffd
 800fe70:	0800fffd 	.word	0x0800fffd
 800fe74:	0800fffd 	.word	0x0800fffd
 800fe78:	0800fffd 	.word	0x0800fffd
 800fe7c:	0800fffd 	.word	0x0800fffd
 800fe80:	0800fffd 	.word	0x0800fffd
 800fe84:	0800fffd 	.word	0x0800fffd
 800fe88:	0800fffd 	.word	0x0800fffd
 800fe8c:	0800fffd 	.word	0x0800fffd
 800fe90:	0800fffd 	.word	0x0800fffd
 800fe94:	0800fffd 	.word	0x0800fffd
 800fe98:	0800fffd 	.word	0x0800fffd
 800fe9c:	0800fffd 	.word	0x0800fffd
 800fea0:	0800fffd 	.word	0x0800fffd
 800fea4:	0800fffd 	.word	0x0800fffd
 800fea8:	0800fffd 	.word	0x0800fffd
 800feac:	0800fffd 	.word	0x0800fffd
 800feb0:	0800fffd 	.word	0x0800fffd
 800feb4:	0800fffd 	.word	0x0800fffd
 800feb8:	0800fffd 	.word	0x0800fffd
 800febc:	0800fffd 	.word	0x0800fffd
 800fec0:	0800fffd 	.word	0x0800fffd
 800fec4:	0800fffd 	.word	0x0800fffd
 800fec8:	0800fffd 	.word	0x0800fffd
 800fecc:	0800fffd 	.word	0x0800fffd
 800fed0:	0800fffd 	.word	0x0800fffd
 800fed4:	0800fffd 	.word	0x0800fffd
 800fed8:	0800fffd 	.word	0x0800fffd
 800fedc:	0800fffd 	.word	0x0800fffd
 800fee0:	0800fffd 	.word	0x0800fffd
 800fee4:	0800ff5b 	.word	0x0800ff5b
 800fee8:	2b9e      	cmp	r3, #158	@ 0x9e
 800feea:	d051      	beq.n	800ff90 <SCSI_ProcessCmd+0x274>
 800feec:	e086      	b.n	800fffc <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800feee:	7afb      	ldrb	r3, [r7, #11]
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	4619      	mov	r1, r3
 800fef4:	68f8      	ldr	r0, [r7, #12]
 800fef6:	f000 f893 	bl	8010020 <SCSI_TestUnitReady>
 800fefa:	4603      	mov	r3, r0
 800fefc:	75fb      	strb	r3, [r7, #23]
      break;
 800fefe:	e089      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800ff00:	7afb      	ldrb	r3, [r7, #11]
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	4619      	mov	r1, r3
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f000 fb9a 	bl	8010640 <SCSI_RequestSense>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ff10:	e080      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800ff12:	7afb      	ldrb	r3, [r7, #11]
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	4619      	mov	r1, r3
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f000 f8db 	bl	80100d4 <SCSI_Inquiry>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	75fb      	strb	r3, [r7, #23]
      break;
 800ff22:	e077      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800ff24:	7afb      	ldrb	r3, [r7, #11]
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f000 fc56 	bl	80107dc <SCSI_StartStopUnit>
 800ff30:	4603      	mov	r3, r0
 800ff32:	75fb      	strb	r3, [r7, #23]
      break;
 800ff34:	e06e      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800ff36:	7afb      	ldrb	r3, [r7, #11]
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f000 fca2 	bl	8010886 <SCSI_AllowPreventRemovable>
 800ff42:	4603      	mov	r3, r0
 800ff44:	75fb      	strb	r3, [r7, #23]
      break;
 800ff46:	e065      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800ff48:	7afb      	ldrb	r3, [r7, #11]
 800ff4a:	687a      	ldr	r2, [r7, #4]
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f000 faea 	bl	8010528 <SCSI_ModeSense6>
 800ff54:	4603      	mov	r3, r0
 800ff56:	75fb      	strb	r3, [r7, #23]
      break;
 800ff58:	e05c      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800ff5a:	7afb      	ldrb	r3, [r7, #11]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	4619      	mov	r1, r3
 800ff60:	68f8      	ldr	r0, [r7, #12]
 800ff62:	f000 fb27 	bl	80105b4 <SCSI_ModeSense10>
 800ff66:	4603      	mov	r3, r0
 800ff68:	75fb      	strb	r3, [r7, #23]
      break;
 800ff6a:	e053      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800ff6c:	7afb      	ldrb	r3, [r7, #11]
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	4619      	mov	r1, r3
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f000 fa5c 	bl	8010430 <SCSI_ReadFormatCapacity>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	75fb      	strb	r3, [r7, #23]
      break;
 800ff7c:	e04a      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800ff7e:	7afb      	ldrb	r3, [r7, #11]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	4619      	mov	r1, r3
 800ff84:	68f8      	ldr	r0, [r7, #12]
 800ff86:	f000 f921 	bl	80101cc <SCSI_ReadCapacity10>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ff8e:	e041      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800ff90:	7afb      	ldrb	r3, [r7, #11]
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	4619      	mov	r1, r3
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	f000 f996 	bl	80102c8 <SCSI_ReadCapacity16>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	75fb      	strb	r3, [r7, #23]
      break;
 800ffa0:	e038      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800ffa2:	7afb      	ldrb	r3, [r7, #11]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f000 fc99 	bl	80108e0 <SCSI_Read10>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	75fb      	strb	r3, [r7, #23]
      break;
 800ffb2:	e02f      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800ffb4:	7afb      	ldrb	r3, [r7, #11]
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4619      	mov	r1, r3
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f000 fd3a 	bl	8010a34 <SCSI_Read12>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	75fb      	strb	r3, [r7, #23]
      break;
 800ffc4:	e026      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800ffc6:	7afb      	ldrb	r3, [r7, #11]
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	4619      	mov	r1, r3
 800ffcc:	68f8      	ldr	r0, [r7, #12]
 800ffce:	f000 fde5 	bl	8010b9c <SCSI_Write10>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	75fb      	strb	r3, [r7, #23]
      break;
 800ffd6:	e01d      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800ffd8:	7afb      	ldrb	r3, [r7, #11]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	4619      	mov	r1, r3
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f000 feb2 	bl	8010d48 <SCSI_Write12>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	75fb      	strb	r3, [r7, #23]
      break;
 800ffe8:	e014      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800ffea:	7afb      	ldrb	r3, [r7, #11]
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	4619      	mov	r1, r3
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f000 ff8f 	bl	8010f14 <SCSI_Verify10>
 800fff6:	4603      	mov	r3, r0
 800fff8:	75fb      	strb	r3, [r7, #23]
      break;
 800fffa:	e00b      	b.n	8010014 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800fffc:	7af9      	ldrb	r1, [r7, #11]
 800fffe:	2320      	movs	r3, #32
 8010000:	2205      	movs	r2, #5
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f000 fb9f 	bl	8010746 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	2202      	movs	r2, #2
 801000c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801000e:	23ff      	movs	r3, #255	@ 0xff
 8010010:	75fb      	strb	r3, [r7, #23]
      break;
 8010012:	bf00      	nop
  }

  return ret;
 8010014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010018:	4618      	mov	r0, r3
 801001a:	3718      	adds	r7, #24
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	460b      	mov	r3, r1
 801002a:	607a      	str	r2, [r7, #4]
 801002c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	32b0      	adds	r2, #176	@ 0xb0
 8010038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801003c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d102      	bne.n	801004a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8010044:	f04f 33ff 	mov.w	r3, #4294967295
 8010048:	e03f      	b.n	80100ca <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010050:	2b00      	cmp	r3, #0
 8010052:	d00a      	beq.n	801006a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801005a:	2320      	movs	r3, #32
 801005c:	2205      	movs	r2, #5
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f000 fb71 	bl	8010746 <SCSI_SenseCode>

    return -1;
 8010064:	f04f 33ff 	mov.w	r3, #4294967295
 8010068:	e02f      	b.n	80100ca <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8010070:	2b02      	cmp	r3, #2
 8010072:	d10b      	bne.n	801008c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010074:	7af9      	ldrb	r1, [r7, #11]
 8010076:	233a      	movs	r3, #58	@ 0x3a
 8010078:	2202      	movs	r2, #2
 801007a:	68f8      	ldr	r0, [r7, #12]
 801007c:	f000 fb63 	bl	8010746 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	2205      	movs	r2, #5
 8010084:	721a      	strb	r2, [r3, #8]
    return -1;
 8010086:	f04f 33ff 	mov.w	r3, #4294967295
 801008a:	e01e      	b.n	80100ca <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	33b0      	adds	r3, #176	@ 0xb0
 8010096:	009b      	lsls	r3, r3, #2
 8010098:	4413      	add	r3, r2
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	689b      	ldr	r3, [r3, #8]
 801009e:	7afa      	ldrb	r2, [r7, #11]
 80100a0:	4610      	mov	r0, r2
 80100a2:	4798      	blx	r3
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00b      	beq.n	80100c2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80100aa:	7af9      	ldrb	r1, [r7, #11]
 80100ac:	233a      	movs	r3, #58	@ 0x3a
 80100ae:	2202      	movs	r2, #2
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	f000 fb48 	bl	8010746 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	2205      	movs	r2, #5
 80100ba:	721a      	strb	r2, [r3, #8]

    return -1;
 80100bc:	f04f 33ff 	mov.w	r3, #4294967295
 80100c0:	e003      	b.n	80100ca <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2200      	movs	r2, #0
 80100c6:	60da      	str	r2, [r3, #12]

  return 0;
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3718      	adds	r7, #24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
	...

080100d4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b088      	sub	sp, #32
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	460b      	mov	r3, r1
 80100de:	607a      	str	r2, [r7, #4]
 80100e0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	32b0      	adds	r2, #176	@ 0xb0
 80100ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d102      	bne.n	80100fe <SCSI_Inquiry+0x2a>
  {
    return -1;
 80100f8:	f04f 33ff 	mov.w	r3, #4294967295
 80100fc:	e05e      	b.n	80101bc <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010104:	2b00      	cmp	r3, #0
 8010106:	d10a      	bne.n	801011e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801010e:	2320      	movs	r3, #32
 8010110:	2205      	movs	r2, #5
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f000 fb17 	bl	8010746 <SCSI_SenseCode>
    return -1;
 8010118:	f04f 33ff 	mov.w	r3, #4294967295
 801011c:	e04e      	b.n	80101bc <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3301      	adds	r3, #1
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	f003 0301 	and.w	r3, r3, #1
 8010128:	2b00      	cmp	r3, #0
 801012a:	d020      	beq.n	801016e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	3302      	adds	r3, #2
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d105      	bne.n	8010142 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8010136:	2206      	movs	r2, #6
 8010138:	4922      	ldr	r1, [pc, #136]	@ (80101c4 <SCSI_Inquiry+0xf0>)
 801013a:	69b8      	ldr	r0, [r7, #24]
 801013c:	f001 f870 	bl	8011220 <SCSI_UpdateBotData>
 8010140:	e03b      	b.n	80101ba <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	3302      	adds	r3, #2
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2b80      	cmp	r3, #128	@ 0x80
 801014a:	d105      	bne.n	8010158 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801014c:	2208      	movs	r2, #8
 801014e:	491e      	ldr	r1, [pc, #120]	@ (80101c8 <SCSI_Inquiry+0xf4>)
 8010150:	69b8      	ldr	r0, [r7, #24]
 8010152:	f001 f865 	bl	8011220 <SCSI_UpdateBotData>
 8010156:	e030      	b.n	80101ba <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801015e:	2324      	movs	r3, #36	@ 0x24
 8010160:	2205      	movs	r2, #5
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f000 faef 	bl	8010746 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8010168:	f04f 33ff 	mov.w	r3, #4294967295
 801016c:	e026      	b.n	80101bc <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010174:	68fa      	ldr	r2, [r7, #12]
 8010176:	33b0      	adds	r3, #176	@ 0xb0
 8010178:	009b      	lsls	r3, r3, #2
 801017a:	4413      	add	r3, r2
 801017c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801017e:	69d9      	ldr	r1, [r3, #28]
 8010180:	7afa      	ldrb	r2, [r7, #11]
 8010182:	4613      	mov	r3, r2
 8010184:	00db      	lsls	r3, r3, #3
 8010186:	4413      	add	r3, r2
 8010188:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 801018a:	440b      	add	r3, r1
 801018c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	3304      	adds	r3, #4
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	3305      	adds	r3, #5
 8010196:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	3304      	adds	r3, #4
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	461a      	mov	r2, r3
 80101a0:	8bfb      	ldrh	r3, [r7, #30]
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d303      	bcc.n	80101ae <SCSI_Inquiry+0xda>
    {
      len = params[4];
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	3304      	adds	r3, #4
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80101ae:	8bfb      	ldrh	r3, [r7, #30]
 80101b0:	461a      	mov	r2, r3
 80101b2:	6979      	ldr	r1, [r7, #20]
 80101b4:	69b8      	ldr	r0, [r7, #24]
 80101b6:	f001 f833 	bl	8011220 <SCSI_UpdateBotData>
  }

  return 0;
 80101ba:	2300      	movs	r3, #0
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3720      	adds	r7, #32
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	24000090 	.word	0x24000090
 80101c8:	24000098 	.word	0x24000098

080101cc <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	460b      	mov	r3, r1
 80101d6:	607a      	str	r2, [r7, #4]
 80101d8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	32b0      	adds	r2, #176	@ 0xb0
 80101e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d102      	bne.n	80101f6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80101f0:	f04f 33ff 	mov.w	r3, #4294967295
 80101f4:	e064      	b.n	80102c0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	33b0      	adds	r3, #176	@ 0xb0
 8010200:	009b      	lsls	r3, r3, #2
 8010202:	4413      	add	r3, r2
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	697a      	ldr	r2, [r7, #20]
 801020a:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 801020e:	697a      	ldr	r2, [r7, #20]
 8010210:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8010214:	7af8      	ldrb	r0, [r7, #11]
 8010216:	4798      	blx	r3
 8010218:	4603      	mov	r3, r0
 801021a:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801021c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d104      	bne.n	801022e <SCSI_ReadCapacity10+0x62>
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 801022a:	2b02      	cmp	r3, #2
 801022c:	d108      	bne.n	8010240 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801022e:	7af9      	ldrb	r1, [r7, #11]
 8010230:	233a      	movs	r3, #58	@ 0x3a
 8010232:	2202      	movs	r2, #2
 8010234:	68f8      	ldr	r0, [r7, #12]
 8010236:	f000 fa86 	bl	8010746 <SCSI_SenseCode>
    return -1;
 801023a:	f04f 33ff 	mov.w	r3, #4294967295
 801023e:	e03f      	b.n	80102c0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010246:	3b01      	subs	r3, #1
 8010248:	0e1b      	lsrs	r3, r3, #24
 801024a:	b2da      	uxtb	r2, r3
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010256:	3b01      	subs	r3, #1
 8010258:	0c1b      	lsrs	r3, r3, #16
 801025a:	b2da      	uxtb	r2, r3
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010266:	3b01      	subs	r3, #1
 8010268:	0a1b      	lsrs	r3, r3, #8
 801026a:	b2da      	uxtb	r2, r3
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010276:	b2db      	uxtb	r3, r3
 8010278:	3b01      	subs	r3, #1
 801027a:	b2da      	uxtb	r2, r3
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010286:	161b      	asrs	r3, r3, #24
 8010288:	b2da      	uxtb	r2, r3
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8010294:	141b      	asrs	r3, r3, #16
 8010296:	b2da      	uxtb	r2, r3
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80102a2:	0a1b      	lsrs	r3, r3, #8
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	b2da      	uxtb	r2, r3
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80102b2:	b2da      	uxtb	r2, r3
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	2208      	movs	r2, #8
 80102bc:	60da      	str	r2, [r3, #12]

  return 0;
 80102be:	2300      	movs	r3, #0

}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3718      	adds	r7, #24
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b088      	sub	sp, #32
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	460b      	mov	r3, r1
 80102d2:	607a      	str	r2, [r7, #4]
 80102d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	32b0      	adds	r2, #176	@ 0xb0
 80102e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102e4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d102      	bne.n	80102f2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80102ec:	f04f 33ff 	mov.w	r3, #4294967295
 80102f0:	e09a      	b.n	8010428 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80102f8:	68fa      	ldr	r2, [r7, #12]
 80102fa:	33b0      	adds	r3, #176	@ 0xb0
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	4413      	add	r3, r2
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	69ba      	ldr	r2, [r7, #24]
 8010306:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 801030a:	69ba      	ldr	r2, [r7, #24]
 801030c:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 8010310:	7af8      	ldrb	r0, [r7, #11]
 8010312:	4798      	blx	r3
 8010314:	4603      	mov	r3, r0
 8010316:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d104      	bne.n	801032a <SCSI_ReadCapacity16+0x62>
 8010320:	69bb      	ldr	r3, [r7, #24]
 8010322:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8010326:	2b02      	cmp	r3, #2
 8010328:	d108      	bne.n	801033c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801032a:	7af9      	ldrb	r1, [r7, #11]
 801032c:	233a      	movs	r3, #58	@ 0x3a
 801032e:	2202      	movs	r2, #2
 8010330:	68f8      	ldr	r0, [r7, #12]
 8010332:	f000 fa08 	bl	8010746 <SCSI_SenseCode>
    return -1;
 8010336:	f04f 33ff 	mov.w	r3, #4294967295
 801033a:	e075      	b.n	8010428 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	330a      	adds	r3, #10
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	330b      	adds	r3, #11
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801034c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	330c      	adds	r3, #12
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010356:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	320d      	adds	r2, #13
 801035c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801035e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010364:	2300      	movs	r3, #0
 8010366:	61fb      	str	r3, [r7, #28]
 8010368:	e008      	b.n	801037c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 801036a:	69ba      	ldr	r2, [r7, #24]
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	4413      	add	r3, r2
 8010370:	3310      	adds	r3, #16
 8010372:	2200      	movs	r2, #0
 8010374:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	3301      	adds	r3, #1
 801037a:	61fb      	str	r3, [r7, #28]
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	69fa      	ldr	r2, [r7, #28]
 8010382:	429a      	cmp	r2, r3
 8010384:	d3f1      	bcc.n	801036a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010386:	69bb      	ldr	r3, [r7, #24]
 8010388:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 801038c:	3b01      	subs	r3, #1
 801038e:	0e1b      	lsrs	r3, r3, #24
 8010390:	b2da      	uxtb	r2, r3
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 801039c:	3b01      	subs	r3, #1
 801039e:	0c1b      	lsrs	r3, r3, #16
 80103a0:	b2da      	uxtb	r2, r3
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80103ac:	3b01      	subs	r3, #1
 80103ae:	0a1b      	lsrs	r3, r3, #8
 80103b0:	b2da      	uxtb	r2, r3
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	3b01      	subs	r3, #1
 80103c0:	b2da      	uxtb	r2, r3
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80103c6:	69bb      	ldr	r3, [r7, #24]
 80103c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80103cc:	161b      	asrs	r3, r3, #24
 80103ce:	b2da      	uxtb	r2, r3
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80103da:	141b      	asrs	r3, r3, #16
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80103e2:	69bb      	ldr	r3, [r7, #24]
 80103e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80103e8:	0a1b      	lsrs	r3, r3, #8
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	b2da      	uxtb	r2, r3
 80103ee:	69bb      	ldr	r3, [r7, #24]
 80103f0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80103f8:	b2da      	uxtb	r2, r3
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	330a      	adds	r3, #10
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	330b      	adds	r3, #11
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801040e:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	330c      	adds	r3, #12
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010418:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	320d      	adds	r2, #13
 801041e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010420:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	60da      	str	r2, [r3, #12]

  return 0;
 8010426:	2300      	movs	r3, #0
}
 8010428:	4618      	mov	r0, r3
 801042a:	3720      	adds	r7, #32
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	460b      	mov	r3, r1
 801043a:	607a      	str	r2, [r7, #4]
 801043c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	32b0      	adds	r2, #176	@ 0xb0
 8010448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801044c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d102      	bne.n	801045a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8010454:	f04f 33ff 	mov.w	r3, #4294967295
 8010458:	e061      	b.n	801051e <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010460:	68fa      	ldr	r2, [r7, #12]
 8010462:	33b0      	adds	r3, #176	@ 0xb0
 8010464:	009b      	lsls	r3, r3, #2
 8010466:	4413      	add	r3, r2
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	f107 0214 	add.w	r2, r7, #20
 8010470:	f107 0110 	add.w	r1, r7, #16
 8010474:	7af8      	ldrb	r0, [r7, #11]
 8010476:	4798      	blx	r3
 8010478:	4603      	mov	r3, r0
 801047a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801047c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d104      	bne.n	801048e <SCSI_ReadFormatCapacity+0x5e>
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 801048a:	2b02      	cmp	r3, #2
 801048c:	d108      	bne.n	80104a0 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801048e:	7af9      	ldrb	r1, [r7, #11]
 8010490:	233a      	movs	r3, #58	@ 0x3a
 8010492:	2202      	movs	r2, #2
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f000 f956 	bl	8010746 <SCSI_SenseCode>
    return -1;
 801049a:	f04f 33ff 	mov.w	r3, #4294967295
 801049e:	e03e      	b.n	801051e <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80104a0:	2300      	movs	r3, #0
 80104a2:	83fb      	strh	r3, [r7, #30]
 80104a4:	e007      	b.n	80104b6 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80104a6:	8bfb      	ldrh	r3, [r7, #30]
 80104a8:	69ba      	ldr	r2, [r7, #24]
 80104aa:	4413      	add	r3, r2
 80104ac:	2200      	movs	r2, #0
 80104ae:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80104b0:	8bfb      	ldrh	r3, [r7, #30]
 80104b2:	3301      	adds	r3, #1
 80104b4:	83fb      	strh	r3, [r7, #30]
 80104b6:	8bfb      	ldrh	r3, [r7, #30]
 80104b8:	2b0b      	cmp	r3, #11
 80104ba:	d9f4      	bls.n	80104a6 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80104bc:	69bb      	ldr	r3, [r7, #24]
 80104be:	2208      	movs	r2, #8
 80104c0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	3b01      	subs	r3, #1
 80104c6:	0e1b      	lsrs	r3, r3, #24
 80104c8:	b2da      	uxtb	r2, r3
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	3b01      	subs	r3, #1
 80104d2:	0c1b      	lsrs	r3, r3, #16
 80104d4:	b2da      	uxtb	r2, r3
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	3b01      	subs	r3, #1
 80104de:	0a1b      	lsrs	r3, r3, #8
 80104e0:	b2da      	uxtb	r2, r3
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	3b01      	subs	r3, #1
 80104ec:	b2da      	uxtb	r2, r3
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80104f2:	69bb      	ldr	r3, [r7, #24]
 80104f4:	2202      	movs	r2, #2
 80104f6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80104f8:	8abb      	ldrh	r3, [r7, #20]
 80104fa:	141b      	asrs	r3, r3, #16
 80104fc:	b2da      	uxtb	r2, r3
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8010502:	8abb      	ldrh	r3, [r7, #20]
 8010504:	0a1b      	lsrs	r3, r3, #8
 8010506:	b29b      	uxth	r3, r3
 8010508:	b2da      	uxtb	r2, r3
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801050e:	8abb      	ldrh	r3, [r7, #20]
 8010510:	b2da      	uxtb	r2, r3
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	220c      	movs	r2, #12
 801051a:	60da      	str	r2, [r3, #12]

  return 0;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3720      	adds	r7, #32
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
	...

08010528 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b086      	sub	sp, #24
 801052c:	af00      	add	r7, sp, #0
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	460b      	mov	r3, r1
 8010532:	607a      	str	r2, [r7, #4]
 8010534:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	32b0      	adds	r2, #176	@ 0xb0
 8010540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010544:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8010546:	2304      	movs	r3, #4
 8010548:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d102      	bne.n	8010556 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8010550:	f04f 33ff 	mov.w	r3, #4294967295
 8010554:	e027      	b.n	80105a6 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	33b0      	adds	r3, #176	@ 0xb0
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	4413      	add	r3, r2
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	7afa      	ldrb	r2, [r7, #11]
 801056a:	4610      	mov	r0, r2
 801056c:	4798      	blx	r3
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d006      	beq.n	8010582 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8010574:	4b0e      	ldr	r3, [pc, #56]	@ (80105b0 <SCSI_ModeSense6+0x88>)
 8010576:	789b      	ldrb	r3, [r3, #2]
 8010578:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801057c:	b2da      	uxtb	r2, r3
 801057e:	4b0c      	ldr	r3, [pc, #48]	@ (80105b0 <SCSI_ModeSense6+0x88>)
 8010580:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	3304      	adds	r3, #4
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	461a      	mov	r2, r3
 801058a:	8afb      	ldrh	r3, [r7, #22]
 801058c:	4293      	cmp	r3, r2
 801058e:	d303      	bcc.n	8010598 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	3304      	adds	r3, #4
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8010598:	8afb      	ldrh	r3, [r7, #22]
 801059a:	461a      	mov	r2, r3
 801059c:	4904      	ldr	r1, [pc, #16]	@ (80105b0 <SCSI_ModeSense6+0x88>)
 801059e:	6938      	ldr	r0, [r7, #16]
 80105a0:	f000 fe3e 	bl	8011220 <SCSI_UpdateBotData>

  return 0;
 80105a4:	2300      	movs	r3, #0
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3718      	adds	r7, #24
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	240000a0 	.word	0x240000a0

080105b4 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b086      	sub	sp, #24
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	460b      	mov	r3, r1
 80105be:	607a      	str	r2, [r7, #4]
 80105c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	32b0      	adds	r2, #176	@ 0xb0
 80105cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105d0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80105d2:	2308      	movs	r3, #8
 80105d4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d102      	bne.n	80105e2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80105dc:	f04f 33ff 	mov.w	r3, #4294967295
 80105e0:	e027      	b.n	8010632 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	33b0      	adds	r3, #176	@ 0xb0
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	4413      	add	r3, r2
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	7afa      	ldrb	r2, [r7, #11]
 80105f6:	4610      	mov	r0, r2
 80105f8:	4798      	blx	r3
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d006      	beq.n	801060e <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8010600:	4b0e      	ldr	r3, [pc, #56]	@ (801063c <SCSI_ModeSense10+0x88>)
 8010602:	78db      	ldrb	r3, [r3, #3]
 8010604:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010608:	b2da      	uxtb	r2, r3
 801060a:	4b0c      	ldr	r3, [pc, #48]	@ (801063c <SCSI_ModeSense10+0x88>)
 801060c:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	3308      	adds	r3, #8
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	461a      	mov	r2, r3
 8010616:	8afb      	ldrh	r3, [r7, #22]
 8010618:	4293      	cmp	r3, r2
 801061a:	d303      	bcc.n	8010624 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	3308      	adds	r3, #8
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8010624:	8afb      	ldrh	r3, [r7, #22]
 8010626:	461a      	mov	r2, r3
 8010628:	4904      	ldr	r1, [pc, #16]	@ (801063c <SCSI_ModeSense10+0x88>)
 801062a:	6938      	ldr	r0, [r7, #16]
 801062c:	f000 fdf8 	bl	8011220 <SCSI_UpdateBotData>

  return 0;
 8010630:	2300      	movs	r3, #0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3718      	adds	r7, #24
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	240000a4 	.word	0x240000a4

08010640 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b086      	sub	sp, #24
 8010644:	af00      	add	r7, sp, #0
 8010646:	60f8      	str	r0, [r7, #12]
 8010648:	460b      	mov	r3, r1
 801064a:	607a      	str	r2, [r7, #4]
 801064c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	32b0      	adds	r2, #176	@ 0xb0
 8010658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801065c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d102      	bne.n	801066a <SCSI_RequestSense+0x2a>
  {
    return -1;
 8010664:	f04f 33ff 	mov.w	r3, #4294967295
 8010668:	e069      	b.n	801073e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010670:	2b00      	cmp	r3, #0
 8010672:	d10a      	bne.n	801068a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 801067a:	2320      	movs	r3, #32
 801067c:	2205      	movs	r2, #5
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	f000 f861 	bl	8010746 <SCSI_SenseCode>
    return -1;
 8010684:	f04f 33ff 	mov.w	r3, #4294967295
 8010688:	e059      	b.n	801073e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801068a:	2300      	movs	r3, #0
 801068c:	75fb      	strb	r3, [r7, #23]
 801068e:	e007      	b.n	80106a0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8010690:	7dfb      	ldrb	r3, [r7, #23]
 8010692:	693a      	ldr	r2, [r7, #16]
 8010694:	4413      	add	r3, r2
 8010696:	2200      	movs	r2, #0
 8010698:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801069a:	7dfb      	ldrb	r3, [r7, #23]
 801069c:	3301      	adds	r3, #1
 801069e:	75fb      	strb	r3, [r7, #23]
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
 80106a2:	2b11      	cmp	r3, #17
 80106a4:	d9f4      	bls.n	8010690 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	2270      	movs	r2, #112	@ 0x70
 80106aa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	220c      	movs	r2, #12
 80106b0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80106be:	429a      	cmp	r2, r3
 80106c0:	d02e      	beq.n	8010720 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80106c8:	461a      	mov	r2, r3
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	3248      	adds	r2, #72	@ 0x48
 80106ce:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	3348      	adds	r3, #72	@ 0x48
 80106e0:	00db      	lsls	r3, r3, #3
 80106e2:	4413      	add	r3, r2
 80106e4:	791a      	ldrb	r2, [r3, #4]
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80106f0:	693a      	ldr	r2, [r7, #16]
 80106f2:	3348      	adds	r3, #72	@ 0x48
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	4413      	add	r3, r2
 80106f8:	795a      	ldrb	r2, [r3, #5]
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8010704:	3301      	adds	r3, #1
 8010706:	b2da      	uxtb	r2, r3
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8010714:	2b04      	cmp	r3, #4
 8010716:	d103      	bne.n	8010720 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	2200      	movs	r2, #0
 801071c:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	2212      	movs	r2, #18
 8010724:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	3304      	adds	r3, #4
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	2b12      	cmp	r3, #18
 801072e:	d805      	bhi.n	801073c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	3304      	adds	r3, #4
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3718      	adds	r7, #24
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8010746:	b480      	push	{r7}
 8010748:	b085      	sub	sp, #20
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
 801074e:	4608      	mov	r0, r1
 8010750:	4611      	mov	r1, r2
 8010752:	461a      	mov	r2, r3
 8010754:	4603      	mov	r3, r0
 8010756:	70fb      	strb	r3, [r7, #3]
 8010758:	460b      	mov	r3, r1
 801075a:	70bb      	strb	r3, [r7, #2]
 801075c:	4613      	mov	r3, r2
 801075e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	32b0      	adds	r2, #176	@ 0xb0
 801076a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801076e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d02c      	beq.n	80107d0 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801077c:	461a      	mov	r2, r3
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	3248      	adds	r2, #72	@ 0x48
 8010782:	78b9      	ldrb	r1, [r7, #2]
 8010784:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	3348      	adds	r3, #72	@ 0x48
 8010792:	00db      	lsls	r3, r3, #3
 8010794:	4413      	add	r3, r2
 8010796:	787a      	ldrb	r2, [r7, #1]
 8010798:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	3348      	adds	r3, #72	@ 0x48
 80107a4:	00db      	lsls	r3, r3, #3
 80107a6:	4413      	add	r3, r2
 80107a8:	2200      	movs	r2, #0
 80107aa:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80107b2:	3301      	adds	r3, #1
 80107b4:	b2da      	uxtb	r2, r3
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80107c2:	2b04      	cmp	r3, #4
 80107c4:	d105      	bne.n	80107d2 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2200      	movs	r2, #0
 80107ca:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80107ce:	e000      	b.n	80107d2 <SCSI_SenseCode+0x8c>
    return;
 80107d0:	bf00      	nop
  }
}
 80107d2:	3714      	adds	r7, #20
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b086      	sub	sp, #24
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	460b      	mov	r3, r1
 80107e6:	607a      	str	r2, [r7, #4]
 80107e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	32b0      	adds	r2, #176	@ 0xb0
 80107f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107f8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d102      	bne.n	8010806 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8010800:	f04f 33ff 	mov.w	r3, #4294967295
 8010804:	e03b      	b.n	801087e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 801080c:	2b01      	cmp	r3, #1
 801080e:	d10f      	bne.n	8010830 <SCSI_StartStopUnit+0x54>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	3304      	adds	r3, #4
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	f003 0303 	and.w	r3, r3, #3
 801081a:	2b02      	cmp	r3, #2
 801081c:	d108      	bne.n	8010830 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801081e:	7af9      	ldrb	r1, [r7, #11]
 8010820:	2324      	movs	r3, #36	@ 0x24
 8010822:	2205      	movs	r2, #5
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f7ff ff8e 	bl	8010746 <SCSI_SenseCode>

    return -1;
 801082a:	f04f 33ff 	mov.w	r3, #4294967295
 801082e:	e026      	b.n	801087e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	3304      	adds	r3, #4
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	f003 0303 	and.w	r3, r3, #3
 801083a:	2b01      	cmp	r3, #1
 801083c:	d104      	bne.n	8010848 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	2200      	movs	r2, #0
 8010842:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8010846:	e016      	b.n	8010876 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	3304      	adds	r3, #4
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	f003 0303 	and.w	r3, r3, #3
 8010852:	2b02      	cmp	r3, #2
 8010854:	d104      	bne.n	8010860 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	2202      	movs	r2, #2
 801085a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 801085e:	e00a      	b.n	8010876 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	3304      	adds	r3, #4
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	f003 0303 	and.w	r3, r3, #3
 801086a:	2b03      	cmp	r3, #3
 801086c:	d103      	bne.n	8010876 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	2200      	movs	r2, #0
 8010872:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	2200      	movs	r2, #0
 801087a:	60da      	str	r2, [r3, #12]

  return 0;
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	3718      	adds	r7, #24
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010886:	b480      	push	{r7}
 8010888:	b087      	sub	sp, #28
 801088a:	af00      	add	r7, sp, #0
 801088c:	60f8      	str	r0, [r7, #12]
 801088e:	460b      	mov	r3, r1
 8010890:	607a      	str	r2, [r7, #4]
 8010892:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	32b0      	adds	r2, #176	@ 0xb0
 801089e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108a2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d102      	bne.n	80108b0 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 80108aa:	f04f 33ff 	mov.w	r3, #4294967295
 80108ae:	e011      	b.n	80108d4 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	3304      	adds	r3, #4
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d104      	bne.n	80108c4 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	2200      	movs	r2, #0
 80108be:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80108c2:	e003      	b.n	80108cc <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	2201      	movs	r2, #1
 80108c8:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	2200      	movs	r2, #0
 80108d0:	60da      	str	r2, [r3, #12]

  return 0;
 80108d2:	2300      	movs	r3, #0
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	371c      	adds	r7, #28
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	460b      	mov	r3, r1
 80108ea:	607a      	str	r2, [r7, #4]
 80108ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	32b0      	adds	r2, #176	@ 0xb0
 80108f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108fc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d102      	bne.n	801090a <SCSI_Read10+0x2a>
  {
    return -1;
 8010904:	f04f 33ff 	mov.w	r3, #4294967295
 8010908:	e090      	b.n	8010a2c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	7a1b      	ldrb	r3, [r3, #8]
 801090e:	2b00      	cmp	r3, #0
 8010910:	f040 8082 	bne.w	8010a18 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 801091a:	b25b      	sxtb	r3, r3
 801091c:	2b00      	cmp	r3, #0
 801091e:	db0a      	blt.n	8010936 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010926:	2320      	movs	r3, #32
 8010928:	2205      	movs	r2, #5
 801092a:	68f8      	ldr	r0, [r7, #12]
 801092c:	f7ff ff0b 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010930:	f04f 33ff 	mov.w	r3, #4294967295
 8010934:	e07a      	b.n	8010a2c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 801093c:	2b02      	cmp	r3, #2
 801093e:	d108      	bne.n	8010952 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010940:	7af9      	ldrb	r1, [r7, #11]
 8010942:	233a      	movs	r3, #58	@ 0x3a
 8010944:	2202      	movs	r2, #2
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f7ff fefd 	bl	8010746 <SCSI_SenseCode>

      return -1;
 801094c:	f04f 33ff 	mov.w	r3, #4294967295
 8010950:	e06c      	b.n	8010a2c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010958:	68fa      	ldr	r2, [r7, #12]
 801095a:	33b0      	adds	r3, #176	@ 0xb0
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4413      	add	r3, r2
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	689b      	ldr	r3, [r3, #8]
 8010964:	7afa      	ldrb	r2, [r7, #11]
 8010966:	4610      	mov	r0, r2
 8010968:	4798      	blx	r3
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d008      	beq.n	8010982 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010970:	7af9      	ldrb	r1, [r7, #11]
 8010972:	233a      	movs	r3, #58	@ 0x3a
 8010974:	2202      	movs	r2, #2
 8010976:	68f8      	ldr	r0, [r7, #12]
 8010978:	f7ff fee5 	bl	8010746 <SCSI_SenseCode>
      return -1;
 801097c:	f04f 33ff 	mov.w	r3, #4294967295
 8010980:	e054      	b.n	8010a2c <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	3302      	adds	r3, #2
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	3303      	adds	r3, #3
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010992:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	3304      	adds	r3, #4
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801099c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	3205      	adds	r2, #5
 80109a2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80109a4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	3307      	adds	r3, #7
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	021b      	lsls	r3, r3, #8
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	3208      	adds	r2, #8
 80109b8:	7812      	ldrb	r2, [r2, #0]
 80109ba:	431a      	orrs	r2, r3
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80109ce:	7af9      	ldrb	r1, [r7, #11]
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f000 fadc 	bl	8010f8e <SCSI_CheckAddressRange>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	da02      	bge.n	80109e2 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80109dc:	f04f 33ff 	mov.w	r3, #4294967295
 80109e0:	e024      	b.n	8010a2c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80109ee:	6979      	ldr	r1, [r7, #20]
 80109f0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 80109f4:	fb01 f303 	mul.w	r3, r1, r3
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d00a      	beq.n	8010a12 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010a02:	2320      	movs	r3, #32
 8010a04:	2205      	movs	r2, #5
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	f7ff fe9d 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a10:	e00c      	b.n	8010a2c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	2202      	movs	r2, #2
 8010a16:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a1e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8010a20:	7afb      	ldrb	r3, [r7, #11]
 8010a22:	4619      	mov	r1, r3
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f000 fadf 	bl	8010fe8 <SCSI_ProcessRead>
 8010a2a:	4603      	mov	r3, r0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3718      	adds	r7, #24
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	607a      	str	r2, [r7, #4]
 8010a40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	32b0      	adds	r2, #176	@ 0xb0
 8010a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a50:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d102      	bne.n	8010a5e <SCSI_Read12+0x2a>
  {
    return -1;
 8010a58:	f04f 33ff 	mov.w	r3, #4294967295
 8010a5c:	e09a      	b.n	8010b94 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	7a1b      	ldrb	r3, [r3, #8]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f040 808c 	bne.w	8010b80 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8010a6e:	b25b      	sxtb	r3, r3
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	db0a      	blt.n	8010a8a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010a7a:	2320      	movs	r3, #32
 8010a7c:	2205      	movs	r2, #5
 8010a7e:	68f8      	ldr	r0, [r7, #12]
 8010a80:	f7ff fe61 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010a84:	f04f 33ff 	mov.w	r3, #4294967295
 8010a88:	e084      	b.n	8010b94 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	d108      	bne.n	8010aa6 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010a94:	7af9      	ldrb	r1, [r7, #11]
 8010a96:	233a      	movs	r3, #58	@ 0x3a
 8010a98:	2202      	movs	r2, #2
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f7ff fe53 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa4:	e076      	b.n	8010b94 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010aac:	68fa      	ldr	r2, [r7, #12]
 8010aae:	33b0      	adds	r3, #176	@ 0xb0
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	4413      	add	r3, r2
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	689b      	ldr	r3, [r3, #8]
 8010ab8:	7afa      	ldrb	r2, [r7, #11]
 8010aba:	4610      	mov	r0, r2
 8010abc:	4798      	blx	r3
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d008      	beq.n	8010ad6 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010ac4:	7af9      	ldrb	r1, [r7, #11]
 8010ac6:	233a      	movs	r3, #58	@ 0x3a
 8010ac8:	2202      	movs	r2, #2
 8010aca:	68f8      	ldr	r0, [r7, #12]
 8010acc:	f7ff fe3b 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ad4:	e05e      	b.n	8010b94 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	3302      	adds	r3, #2
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	3303      	adds	r3, #3
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010ae6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	3304      	adds	r3, #4
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010af0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	3205      	adds	r2, #5
 8010af6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8010af8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	3306      	adds	r3, #6
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	3307      	adds	r3, #7
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010b10:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	3308      	adds	r3, #8
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8010b1a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	3209      	adds	r2, #9
 8010b20:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8010b22:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010b36:	7af9      	ldrb	r1, [r7, #11]
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f000 fa28 	bl	8010f8e <SCSI_CheckAddressRange>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	da02      	bge.n	8010b4a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010b44:	f04f 33ff 	mov.w	r3, #4294967295
 8010b48:	e024      	b.n	8010b94 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010b56:	6979      	ldr	r1, [r7, #20]
 8010b58:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8010b5c:	fb01 f303 	mul.w	r3, r1, r3
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d00a      	beq.n	8010b7a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010b6a:	2320      	movs	r3, #32
 8010b6c:	2205      	movs	r2, #5
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f7ff fde9 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010b74:	f04f 33ff 	mov.w	r3, #4294967295
 8010b78:	e00c      	b.n	8010b94 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	2202      	movs	r2, #2
 8010b7e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b86:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8010b88:	7afb      	ldrb	r3, [r7, #11]
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	68f8      	ldr	r0, [r7, #12]
 8010b8e:	f000 fa2b 	bl	8010fe8 <SCSI_ProcessRead>
 8010b92:	4603      	mov	r3, r0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3718      	adds	r7, #24
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b086      	sub	sp, #24
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	607a      	str	r2, [r7, #4]
 8010ba8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	32b0      	adds	r2, #176	@ 0xb0
 8010bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bb8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d102      	bne.n	8010bc6 <SCSI_Write10+0x2a>
  {
    return -1;
 8010bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc4:	e0ba      	b.n	8010d3c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	7a1b      	ldrb	r3, [r3, #8]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f040 80b0 	bne.w	8010d30 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d10a      	bne.n	8010bf0 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010be0:	2320      	movs	r3, #32
 8010be2:	2205      	movs	r2, #5
 8010be4:	68f8      	ldr	r0, [r7, #12]
 8010be6:	f7ff fdae 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010bea:	f04f 33ff 	mov.w	r3, #4294967295
 8010bee:	e0a5      	b.n	8010d3c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8010bf6:	b25b      	sxtb	r3, r3
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	da0a      	bge.n	8010c12 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010c02:	2320      	movs	r3, #32
 8010c04:	2205      	movs	r2, #5
 8010c06:	68f8      	ldr	r0, [r7, #12]
 8010c08:	f7ff fd9d 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c10:	e094      	b.n	8010d3c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c18:	68fa      	ldr	r2, [r7, #12]
 8010c1a:	33b0      	adds	r3, #176	@ 0xb0
 8010c1c:	009b      	lsls	r3, r3, #2
 8010c1e:	4413      	add	r3, r2
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	7afa      	ldrb	r2, [r7, #11]
 8010c26:	4610      	mov	r0, r2
 8010c28:	4798      	blx	r3
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d008      	beq.n	8010c42 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010c30:	7af9      	ldrb	r1, [r7, #11]
 8010c32:	233a      	movs	r3, #58	@ 0x3a
 8010c34:	2202      	movs	r2, #2
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	f7ff fd85 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c40:	e07c      	b.n	8010d3c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c48:	68fa      	ldr	r2, [r7, #12]
 8010c4a:	33b0      	adds	r3, #176	@ 0xb0
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	4413      	add	r3, r2
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	7afa      	ldrb	r2, [r7, #11]
 8010c56:	4610      	mov	r0, r2
 8010c58:	4798      	blx	r3
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d008      	beq.n	8010c72 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8010c60:	7af9      	ldrb	r1, [r7, #11]
 8010c62:	2327      	movs	r3, #39	@ 0x27
 8010c64:	2202      	movs	r2, #2
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	f7ff fd6d 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c70:	e064      	b.n	8010d3c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	3302      	adds	r3, #2
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	3303      	adds	r3, #3
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010c82:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	3304      	adds	r3, #4
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010c8c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	3205      	adds	r2, #5
 8010c92:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8010c94:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	3307      	adds	r3, #7
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	3208      	adds	r2, #8
 8010ca8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010caa:	431a      	orrs	r2, r3
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010cbe:	7af9      	ldrb	r1, [r7, #11]
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f000 f964 	bl	8010f8e <SCSI_CheckAddressRange>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	da02      	bge.n	8010cd2 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8010cd0:	e034      	b.n	8010d3c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010cd8:	697a      	ldr	r2, [r7, #20]
 8010cda:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8010cde:	fb02 f303 	mul.w	r3, r2, r3
 8010ce2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010cea:	693a      	ldr	r2, [r7, #16]
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d00a      	beq.n	8010d06 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010cf6:	2320      	movs	r3, #32
 8010cf8:	2205      	movs	r2, #5
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f7ff fd23 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010d00:	f04f 33ff 	mov.w	r3, #4294967295
 8010d04:	e01a      	b.n	8010d3c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d0c:	bf28      	it	cs
 8010d0e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8010d12:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	2201      	movs	r2, #1
 8010d18:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8010d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8010d44 <SCSI_Write10+0x1a8>)
 8010d1c:	7819      	ldrb	r1, [r3, #0]
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	f103 0210 	add.w	r2, r3, #16
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	68f8      	ldr	r0, [r7, #12]
 8010d28:	f002 facd 	bl	80132c6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	e005      	b.n	8010d3c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8010d30:	7afb      	ldrb	r3, [r7, #11]
 8010d32:	4619      	mov	r1, r3
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f000 f9dd 	bl	80110f4 <SCSI_ProcessWrite>
 8010d3a:	4603      	mov	r3, r0
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3718      	adds	r7, #24
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	2400008f 	.word	0x2400008f

08010d48 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b086      	sub	sp, #24
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	460b      	mov	r3, r1
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	32b0      	adds	r2, #176	@ 0xb0
 8010d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d64:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d102      	bne.n	8010d72 <SCSI_Write12+0x2a>
  {
    return -1;
 8010d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d70:	e0ca      	b.n	8010f08 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	7a1b      	ldrb	r3, [r3, #8]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	f040 80c0 	bne.w	8010efc <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d10a      	bne.n	8010d9c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010d8c:	2320      	movs	r3, #32
 8010d8e:	2205      	movs	r2, #5
 8010d90:	68f8      	ldr	r0, [r7, #12]
 8010d92:	f7ff fcd8 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010d96:	f04f 33ff 	mov.w	r3, #4294967295
 8010d9a:	e0b5      	b.n	8010f08 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8010da2:	b25b      	sxtb	r3, r3
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	da0a      	bge.n	8010dbe <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010dae:	2320      	movs	r3, #32
 8010db0:	2205      	movs	r2, #5
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	f7ff fcc7 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010db8:	f04f 33ff 	mov.w	r3, #4294967295
 8010dbc:	e0a4      	b.n	8010f08 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	33b0      	adds	r3, #176	@ 0xb0
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	4413      	add	r3, r2
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	689b      	ldr	r3, [r3, #8]
 8010dd0:	7afa      	ldrb	r2, [r7, #11]
 8010dd2:	4610      	mov	r0, r2
 8010dd4:	4798      	blx	r3
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00b      	beq.n	8010df4 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010ddc:	7af9      	ldrb	r1, [r7, #11]
 8010dde:	233a      	movs	r3, #58	@ 0x3a
 8010de0:	2202      	movs	r2, #2
 8010de2:	68f8      	ldr	r0, [r7, #12]
 8010de4:	f7ff fcaf 	bl	8010746 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	2205      	movs	r2, #5
 8010dec:	721a      	strb	r2, [r3, #8]
      return -1;
 8010dee:	f04f 33ff 	mov.w	r3, #4294967295
 8010df2:	e089      	b.n	8010f08 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010dfa:	68fa      	ldr	r2, [r7, #12]
 8010dfc:	33b0      	adds	r3, #176	@ 0xb0
 8010dfe:	009b      	lsls	r3, r3, #2
 8010e00:	4413      	add	r3, r2
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	7afa      	ldrb	r2, [r7, #11]
 8010e08:	4610      	mov	r0, r2
 8010e0a:	4798      	blx	r3
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d00b      	beq.n	8010e2a <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8010e12:	7af9      	ldrb	r1, [r7, #11]
 8010e14:	2327      	movs	r3, #39	@ 0x27
 8010e16:	2202      	movs	r2, #2
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	f7ff fc94 	bl	8010746 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	2205      	movs	r2, #5
 8010e22:	721a      	strb	r2, [r3, #8]
      return -1;
 8010e24:	f04f 33ff 	mov.w	r3, #4294967295
 8010e28:	e06e      	b.n	8010f08 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	3302      	adds	r3, #2
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	3303      	adds	r3, #3
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010e3a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	3304      	adds	r3, #4
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010e44:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	3205      	adds	r2, #5
 8010e4a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8010e4c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	3306      	adds	r3, #6
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	3307      	adds	r3, #7
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010e64:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	3308      	adds	r3, #8
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8010e6e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	3209      	adds	r2, #9
 8010e74:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8010e76:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010e8a:	7af9      	ldrb	r1, [r7, #11]
 8010e8c:	68f8      	ldr	r0, [r7, #12]
 8010e8e:	f000 f87e 	bl	8010f8e <SCSI_CheckAddressRange>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	da02      	bge.n	8010e9e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010e98:	f04f 33ff 	mov.w	r3, #4294967295
 8010e9c:	e034      	b.n	8010f08 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010ea4:	697a      	ldr	r2, [r7, #20]
 8010ea6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8010eaa:	fb02 f303 	mul.w	r3, r2, r3
 8010eae:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010eb6:	693a      	ldr	r2, [r7, #16]
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	d00a      	beq.n	8010ed2 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8010ec2:	2320      	movs	r3, #32
 8010ec4:	2205      	movs	r2, #5
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f7ff fc3d 	bl	8010746 <SCSI_SenseCode>
      return -1;
 8010ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ed0:	e01a      	b.n	8010f08 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ed8:	bf28      	it	cs
 8010eda:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8010ede:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8010ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8010f10 <SCSI_Write12+0x1c8>)
 8010ee8:	7819      	ldrb	r1, [r3, #0]
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f103 0210 	add.w	r2, r3, #16
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	68f8      	ldr	r0, [r7, #12]
 8010ef4:	f002 f9e7 	bl	80132c6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	e005      	b.n	8010f08 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8010efc:	7afb      	ldrb	r3, [r7, #11]
 8010efe:	4619      	mov	r1, r3
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f000 f8f7 	bl	80110f4 <SCSI_ProcessWrite>
 8010f06:	4603      	mov	r3, r0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3718      	adds	r7, #24
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	2400008f 	.word	0x2400008f

08010f14 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b086      	sub	sp, #24
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60f8      	str	r0, [r7, #12]
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	607a      	str	r2, [r7, #4]
 8010f20:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	32b0      	adds	r2, #176	@ 0xb0
 8010f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f30:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d102      	bne.n	8010f3e <SCSI_Verify10+0x2a>
  {
    return -1;
 8010f38:	f04f 33ff 	mov.w	r3, #4294967295
 8010f3c:	e023      	b.n	8010f86 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	3301      	adds	r3, #1
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	f003 0302 	and.w	r3, r3, #2
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d008      	beq.n	8010f5e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8010f4c:	7af9      	ldrb	r1, [r7, #11]
 8010f4e:	2324      	movs	r3, #36	@ 0x24
 8010f50:	2205      	movs	r2, #5
 8010f52:	68f8      	ldr	r0, [r7, #12]
 8010f54:	f7ff fbf7 	bl	8010746 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8010f58:	f04f 33ff 	mov.w	r3, #4294967295
 8010f5c:	e013      	b.n	8010f86 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8010f6a:	7af9      	ldrb	r1, [r7, #11]
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f000 f80e 	bl	8010f8e <SCSI_CheckAddressRange>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	da02      	bge.n	8010f7e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8010f78:	f04f 33ff 	mov.w	r3, #4294967295
 8010f7c:	e003      	b.n	8010f86 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	2200      	movs	r2, #0
 8010f82:	60da      	str	r2, [r3, #12]

  return 0;
 8010f84:	2300      	movs	r3, #0
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3718      	adds	r7, #24
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}

08010f8e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8010f8e:	b580      	push	{r7, lr}
 8010f90:	b086      	sub	sp, #24
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	60f8      	str	r0, [r7, #12]
 8010f96:	607a      	str	r2, [r7, #4]
 8010f98:	603b      	str	r3, [r7, #0]
 8010f9a:	460b      	mov	r3, r1
 8010f9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	32b0      	adds	r2, #176	@ 0xb0
 8010fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d102      	bne.n	8010fba <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8010fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8010fb8:	e011      	b.n	8010fde <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8010fba:	687a      	ldr	r2, [r7, #4]
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	441a      	add	r2, r3
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d908      	bls.n	8010fdc <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8010fca:	7af9      	ldrb	r1, [r7, #11]
 8010fcc:	2321      	movs	r3, #33	@ 0x21
 8010fce:	2205      	movs	r2, #5
 8010fd0:	68f8      	ldr	r0, [r7, #12]
 8010fd2:	f7ff fbb8 	bl	8010746 <SCSI_SenseCode>
    return -1;
 8010fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8010fda:	e000      	b.n	8010fde <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8010fdc:	2300      	movs	r3, #0
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3718      	adds	r7, #24
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
	...

08010fe8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8010fe8:	b590      	push	{r4, r7, lr}
 8010fea:	b085      	sub	sp, #20
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	32b0      	adds	r2, #176	@ 0xb0
 8010ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011002:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d102      	bne.n	8011010 <SCSI_ProcessRead+0x28>
  {
    return -1;
 801100a:	f04f 33ff 	mov.w	r3, #4294967295
 801100e:	e06a      	b.n	80110e6 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011016:	68fa      	ldr	r2, [r7, #12]
 8011018:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 801101c:	fb02 f303 	mul.w	r3, r2, r3
 8011020:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011028:	bf28      	it	cs
 801102a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 801102e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	33b0      	adds	r3, #176	@ 0xb0
 801103a:	009b      	lsls	r3, r3, #2
 801103c:	4413      	add	r3, r2
 801103e:	685b      	ldr	r3, [r3, #4]
 8011040:	691c      	ldr	r4, [r3, #16]
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f103 0110 	add.w	r1, r3, #16
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011054:	4618      	mov	r0, r3
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 801105c:	b29b      	uxth	r3, r3
 801105e:	78f8      	ldrb	r0, [r7, #3]
 8011060:	47a0      	blx	r4
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	da08      	bge.n	801107a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8011068:	78f9      	ldrb	r1, [r7, #3]
 801106a:	2311      	movs	r3, #17
 801106c:	2204      	movs	r2, #4
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7ff fb69 	bl	8010746 <SCSI_SenseCode>
    return -1;
 8011074:	f04f 33ff 	mov.w	r3, #4294967295
 8011078:	e035      	b.n	80110e6 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 801107a:	4b1d      	ldr	r3, [pc, #116]	@ (80110f0 <SCSI_ProcessRead+0x108>)
 801107c:	7819      	ldrb	r1, [r3, #0]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	f103 0210 	add.w	r2, r3, #16
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f002 f8fc 	bl	8013284 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011098:	4619      	mov	r1, r3
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	fbb3 f3f1 	udiv	r3, r3, r1
 80110a0:	441a      	add	r2, r3
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80110b4:	4619      	mov	r1, r3
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80110bc:	1ad2      	subs	r2, r2, r3
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	1ad2      	subs	r2, r2, r3
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d102      	bne.n	80110e4 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2203      	movs	r2, #3
 80110e2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80110e4:	2300      	movs	r3, #0
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3714      	adds	r7, #20
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd90      	pop	{r4, r7, pc}
 80110ee:	bf00      	nop
 80110f0:	2400008e 	.word	0x2400008e

080110f4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80110f4:	b590      	push	{r4, r7, lr}
 80110f6:	b085      	sub	sp, #20
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	460b      	mov	r3, r1
 80110fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	32b0      	adds	r2, #176	@ 0xb0
 801110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801110e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d102      	bne.n	801111c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8011116:	f04f 33ff 	mov.w	r3, #4294967295
 801111a:	e07a      	b.n	8011212 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8011122:	68fa      	ldr	r2, [r7, #12]
 8011124:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8011128:	fb02 f303 	mul.w	r3, r2, r3
 801112c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011134:	bf28      	it	cs
 8011136:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 801113a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	33b0      	adds	r3, #176	@ 0xb0
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	695c      	ldr	r4, [r3, #20]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f103 0110 	add.w	r1, r3, #16
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011160:	4618      	mov	r0, r3
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8011168:	b29b      	uxth	r3, r3
 801116a:	78f8      	ldrb	r0, [r7, #3]
 801116c:	47a0      	blx	r4
 801116e:	4603      	mov	r3, r0
 8011170:	2b00      	cmp	r3, #0
 8011172:	da08      	bge.n	8011186 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8011174:	78f9      	ldrb	r1, [r7, #3]
 8011176:	2303      	movs	r3, #3
 8011178:	2204      	movs	r2, #4
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7ff fae3 	bl	8010746 <SCSI_SenseCode>
    return -1;
 8011180:	f04f 33ff 	mov.w	r3, #4294967295
 8011184:	e045      	b.n	8011212 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8011192:	4619      	mov	r1, r3
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	fbb3 f3f1 	udiv	r3, r3, r1
 801119a:	441a      	add	r2, r3
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80111ae:	4619      	mov	r1, r3
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80111b6:	1ad2      	subs	r2, r2, r3
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	1ad2      	subs	r2, r2, r3
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d104      	bne.n	80111e2 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80111d8:	2100      	movs	r1, #0
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f7fe fce8 	bl	800fbb0 <MSC_BOT_SendCSW>
 80111e0:	e016      	b.n	8011210 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80111e8:	68fa      	ldr	r2, [r7, #12]
 80111ea:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80111ee:	fb02 f303 	mul.w	r3, r2, r3
 80111f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80111f6:	bf28      	it	cs
 80111f8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80111fc:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80111fe:	4b07      	ldr	r3, [pc, #28]	@ (801121c <SCSI_ProcessWrite+0x128>)
 8011200:	7819      	ldrb	r1, [r3, #0]
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	f103 0210 	add.w	r2, r3, #16
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f002 f85b 	bl	80132c6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8011210:	2300      	movs	r3, #0
}
 8011212:	4618      	mov	r0, r3
 8011214:	3714      	adds	r7, #20
 8011216:	46bd      	mov	sp, r7
 8011218:	bd90      	pop	{r4, r7, pc}
 801121a:	bf00      	nop
 801121c:	2400008f 	.word	0x2400008f

08011220 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8011220:	b480      	push	{r7}
 8011222:	b087      	sub	sp, #28
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	4613      	mov	r3, r2
 801122c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801122e:	88fb      	ldrh	r3, [r7, #6]
 8011230:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d102      	bne.n	801123e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8011238:	f04f 33ff 	mov.w	r3, #4294967295
 801123c:	e013      	b.n	8011266 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801123e:	8afa      	ldrh	r2, [r7, #22]
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8011244:	e00b      	b.n	801125e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8011246:	8afb      	ldrh	r3, [r7, #22]
 8011248:	3b01      	subs	r3, #1
 801124a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801124c:	8afb      	ldrh	r3, [r7, #22]
 801124e:	68ba      	ldr	r2, [r7, #8]
 8011250:	441a      	add	r2, r3
 8011252:	8afb      	ldrh	r3, [r7, #22]
 8011254:	7811      	ldrb	r1, [r2, #0]
 8011256:	68fa      	ldr	r2, [r7, #12]
 8011258:	4413      	add	r3, r2
 801125a:	460a      	mov	r2, r1
 801125c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801125e:	8afb      	ldrh	r3, [r7, #22]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d1f0      	bne.n	8011246 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8011264:	2300      	movs	r3, #0
}
 8011266:	4618      	mov	r0, r3
 8011268:	371c      	adds	r7, #28
 801126a:	46bd      	mov	sp, r7
 801126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011270:	4770      	bx	lr

08011272 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b086      	sub	sp, #24
 8011276:	af00      	add	r7, sp, #0
 8011278:	60f8      	str	r0, [r7, #12]
 801127a:	60b9      	str	r1, [r7, #8]
 801127c:	4613      	mov	r3, r2
 801127e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d101      	bne.n	801128a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011286:	2303      	movs	r3, #3
 8011288:	e01f      	b.n	80112ca <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	2200      	movs	r2, #0
 801128e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2200      	movs	r2, #0
 8011296:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	2200      	movs	r2, #0
 801129e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d003      	beq.n	80112b0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2201      	movs	r2, #1
 80112b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	79fa      	ldrb	r2, [r7, #7]
 80112bc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f001 fe88 	bl	8012fd4 <USBD_LL_Init>
 80112c4:	4603      	mov	r3, r0
 80112c6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80112c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3718      	adds	r7, #24
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b084      	sub	sp, #16
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
 80112da:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80112dc:	2300      	movs	r3, #0
 80112de:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d101      	bne.n	80112ea <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80112e6:	2303      	movs	r3, #3
 80112e8:	e025      	b.n	8011336 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	683a      	ldr	r2, [r7, #0]
 80112ee:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	32ae      	adds	r2, #174	@ 0xae
 80112fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011302:	2b00      	cmp	r3, #0
 8011304:	d00f      	beq.n	8011326 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	32ae      	adds	r2, #174	@ 0xae
 8011310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011316:	f107 020e 	add.w	r2, r7, #14
 801131a:	4610      	mov	r0, r2
 801131c:	4798      	blx	r3
 801131e:	4602      	mov	r2, r0
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801132c:	1c5a      	adds	r2, r3, #1
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011334:	2300      	movs	r3, #0
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801133e:	b580      	push	{r7, lr}
 8011340:	b082      	sub	sp, #8
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f001 fe94 	bl	8013074 <USBD_LL_Start>
 801134c:	4603      	mov	r3, r0
}
 801134e:	4618      	mov	r0, r3
 8011350:	3708      	adds	r7, #8
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011356:	b480      	push	{r7}
 8011358:	b083      	sub	sp, #12
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801135e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011360:	4618      	mov	r0, r3
 8011362:	370c      	adds	r7, #12
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011378:	2300      	movs	r3, #0
 801137a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011382:	2b00      	cmp	r3, #0
 8011384:	d009      	beq.n	801139a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	78fa      	ldrb	r2, [r7, #3]
 8011390:	4611      	mov	r1, r2
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	4798      	blx	r3
 8011396:	4603      	mov	r3, r0
 8011398:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801139a:	7bfb      	ldrb	r3, [r7, #15]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3710      	adds	r7, #16
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b084      	sub	sp, #16
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	460b      	mov	r3, r1
 80113ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80113b0:	2300      	movs	r3, #0
 80113b2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	78fa      	ldrb	r2, [r7, #3]
 80113be:	4611      	mov	r1, r2
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	4798      	blx	r3
 80113c4:	4603      	mov	r3, r0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d001      	beq.n	80113ce <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80113ca:	2303      	movs	r3, #3
 80113cc:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80113ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3710      	adds	r7, #16
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80113e8:	6839      	ldr	r1, [r7, #0]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f001 f935 	bl	801265a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2201      	movs	r2, #1
 80113f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80113fe:	461a      	mov	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801140c:	f003 031f 	and.w	r3, r3, #31
 8011410:	2b02      	cmp	r3, #2
 8011412:	d01a      	beq.n	801144a <USBD_LL_SetupStage+0x72>
 8011414:	2b02      	cmp	r3, #2
 8011416:	d822      	bhi.n	801145e <USBD_LL_SetupStage+0x86>
 8011418:	2b00      	cmp	r3, #0
 801141a:	d002      	beq.n	8011422 <USBD_LL_SetupStage+0x4a>
 801141c:	2b01      	cmp	r3, #1
 801141e:	d00a      	beq.n	8011436 <USBD_LL_SetupStage+0x5e>
 8011420:	e01d      	b.n	801145e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011428:	4619      	mov	r1, r3
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 fb62 	bl	8011af4 <USBD_StdDevReq>
 8011430:	4603      	mov	r3, r0
 8011432:	73fb      	strb	r3, [r7, #15]
      break;
 8011434:	e020      	b.n	8011478 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801143c:	4619      	mov	r1, r3
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f000 fbca 	bl	8011bd8 <USBD_StdItfReq>
 8011444:	4603      	mov	r3, r0
 8011446:	73fb      	strb	r3, [r7, #15]
      break;
 8011448:	e016      	b.n	8011478 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011450:	4619      	mov	r1, r3
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f000 fc2c 	bl	8011cb0 <USBD_StdEPReq>
 8011458:	4603      	mov	r3, r0
 801145a:	73fb      	strb	r3, [r7, #15]
      break;
 801145c:	e00c      	b.n	8011478 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011464:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011468:	b2db      	uxtb	r3, r3
 801146a:	4619      	mov	r1, r3
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f001 fe80 	bl	8013172 <USBD_LL_StallEP>
 8011472:	4603      	mov	r3, r0
 8011474:	73fb      	strb	r3, [r7, #15]
      break;
 8011476:	bf00      	nop
  }

  return ret;
 8011478:	7bfb      	ldrb	r3, [r7, #15]
}
 801147a:	4618      	mov	r0, r3
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011482:	b580      	push	{r7, lr}
 8011484:	b086      	sub	sp, #24
 8011486:	af00      	add	r7, sp, #0
 8011488:	60f8      	str	r0, [r7, #12]
 801148a:	460b      	mov	r3, r1
 801148c:	607a      	str	r2, [r7, #4]
 801148e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011490:	2300      	movs	r3, #0
 8011492:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011494:	7afb      	ldrb	r3, [r7, #11]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d16e      	bne.n	8011578 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80114a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80114a8:	2b03      	cmp	r3, #3
 80114aa:	f040 8098 	bne.w	80115de <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	689a      	ldr	r2, [r3, #8]
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d913      	bls.n	80114e2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	689a      	ldr	r2, [r3, #8]
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	1ad2      	subs	r2, r2, r3
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	68da      	ldr	r2, [r3, #12]
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	689b      	ldr	r3, [r3, #8]
 80114d0:	4293      	cmp	r3, r2
 80114d2:	bf28      	it	cs
 80114d4:	4613      	movcs	r3, r2
 80114d6:	461a      	mov	r2, r3
 80114d8:	6879      	ldr	r1, [r7, #4]
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	f001 f9a0 	bl	8012820 <USBD_CtlContinueRx>
 80114e0:	e07d      	b.n	80115de <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80114e8:	f003 031f 	and.w	r3, r3, #31
 80114ec:	2b02      	cmp	r3, #2
 80114ee:	d014      	beq.n	801151a <USBD_LL_DataOutStage+0x98>
 80114f0:	2b02      	cmp	r3, #2
 80114f2:	d81d      	bhi.n	8011530 <USBD_LL_DataOutStage+0xae>
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d002      	beq.n	80114fe <USBD_LL_DataOutStage+0x7c>
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d003      	beq.n	8011504 <USBD_LL_DataOutStage+0x82>
 80114fc:	e018      	b.n	8011530 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80114fe:	2300      	movs	r3, #0
 8011500:	75bb      	strb	r3, [r7, #22]
            break;
 8011502:	e018      	b.n	8011536 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801150a:	b2db      	uxtb	r3, r3
 801150c:	4619      	mov	r1, r3
 801150e:	68f8      	ldr	r0, [r7, #12]
 8011510:	f000 fa64 	bl	80119dc <USBD_CoreFindIF>
 8011514:	4603      	mov	r3, r0
 8011516:	75bb      	strb	r3, [r7, #22]
            break;
 8011518:	e00d      	b.n	8011536 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011520:	b2db      	uxtb	r3, r3
 8011522:	4619      	mov	r1, r3
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f000 fa66 	bl	80119f6 <USBD_CoreFindEP>
 801152a:	4603      	mov	r3, r0
 801152c:	75bb      	strb	r3, [r7, #22]
            break;
 801152e:	e002      	b.n	8011536 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011530:	2300      	movs	r3, #0
 8011532:	75bb      	strb	r3, [r7, #22]
            break;
 8011534:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011536:	7dbb      	ldrb	r3, [r7, #22]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d119      	bne.n	8011570 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011542:	b2db      	uxtb	r3, r3
 8011544:	2b03      	cmp	r3, #3
 8011546:	d113      	bne.n	8011570 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011548:	7dba      	ldrb	r2, [r7, #22]
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	32ae      	adds	r2, #174	@ 0xae
 801154e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011552:	691b      	ldr	r3, [r3, #16]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d00b      	beq.n	8011570 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011558:	7dba      	ldrb	r2, [r7, #22]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011560:	7dba      	ldrb	r2, [r7, #22]
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	32ae      	adds	r2, #174	@ 0xae
 8011566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801156a:	691b      	ldr	r3, [r3, #16]
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f001 f966 	bl	8012842 <USBD_CtlSendStatus>
 8011576:	e032      	b.n	80115de <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011578:	7afb      	ldrb	r3, [r7, #11]
 801157a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801157e:	b2db      	uxtb	r3, r3
 8011580:	4619      	mov	r1, r3
 8011582:	68f8      	ldr	r0, [r7, #12]
 8011584:	f000 fa37 	bl	80119f6 <USBD_CoreFindEP>
 8011588:	4603      	mov	r3, r0
 801158a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801158c:	7dbb      	ldrb	r3, [r7, #22]
 801158e:	2bff      	cmp	r3, #255	@ 0xff
 8011590:	d025      	beq.n	80115de <USBD_LL_DataOutStage+0x15c>
 8011592:	7dbb      	ldrb	r3, [r7, #22]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d122      	bne.n	80115de <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	2b03      	cmp	r3, #3
 80115a2:	d117      	bne.n	80115d4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80115a4:	7dba      	ldrb	r2, [r7, #22]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	32ae      	adds	r2, #174	@ 0xae
 80115aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115ae:	699b      	ldr	r3, [r3, #24]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00f      	beq.n	80115d4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80115b4:	7dba      	ldrb	r2, [r7, #22]
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80115bc:	7dba      	ldrb	r2, [r7, #22]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	32ae      	adds	r2, #174	@ 0xae
 80115c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115c6:	699b      	ldr	r3, [r3, #24]
 80115c8:	7afa      	ldrb	r2, [r7, #11]
 80115ca:	4611      	mov	r1, r2
 80115cc:	68f8      	ldr	r0, [r7, #12]
 80115ce:	4798      	blx	r3
 80115d0:	4603      	mov	r3, r0
 80115d2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80115d4:	7dfb      	ldrb	r3, [r7, #23]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d001      	beq.n	80115de <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80115da:	7dfb      	ldrb	r3, [r7, #23]
 80115dc:	e000      	b.n	80115e0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80115de:	2300      	movs	r3, #0
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3718      	adds	r7, #24
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b086      	sub	sp, #24
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	460b      	mov	r3, r1
 80115f2:	607a      	str	r2, [r7, #4]
 80115f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80115f6:	7afb      	ldrb	r3, [r7, #11]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d16f      	bne.n	80116dc <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	3314      	adds	r3, #20
 8011600:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011608:	2b02      	cmp	r3, #2
 801160a:	d15a      	bne.n	80116c2 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	689a      	ldr	r2, [r3, #8]
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	429a      	cmp	r2, r3
 8011616:	d914      	bls.n	8011642 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	689a      	ldr	r2, [r3, #8]
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	1ad2      	subs	r2, r2, r3
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	689b      	ldr	r3, [r3, #8]
 801162a:	461a      	mov	r2, r3
 801162c:	6879      	ldr	r1, [r7, #4]
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f001 f8e5 	bl	80127fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011634:	2300      	movs	r3, #0
 8011636:	2200      	movs	r2, #0
 8011638:	2100      	movs	r1, #0
 801163a:	68f8      	ldr	r0, [r7, #12]
 801163c:	f001 fe43 	bl	80132c6 <USBD_LL_PrepareReceive>
 8011640:	e03f      	b.n	80116c2 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	68da      	ldr	r2, [r3, #12]
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	689b      	ldr	r3, [r3, #8]
 801164a:	429a      	cmp	r2, r3
 801164c:	d11c      	bne.n	8011688 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	685a      	ldr	r2, [r3, #4]
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011656:	429a      	cmp	r2, r3
 8011658:	d316      	bcc.n	8011688 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	685a      	ldr	r2, [r3, #4]
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011664:	429a      	cmp	r2, r3
 8011666:	d20f      	bcs.n	8011688 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011668:	2200      	movs	r2, #0
 801166a:	2100      	movs	r1, #0
 801166c:	68f8      	ldr	r0, [r7, #12]
 801166e:	f001 f8c6 	bl	80127fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2200      	movs	r2, #0
 8011676:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801167a:	2300      	movs	r3, #0
 801167c:	2200      	movs	r2, #0
 801167e:	2100      	movs	r1, #0
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f001 fe20 	bl	80132c6 <USBD_LL_PrepareReceive>
 8011686:	e01c      	b.n	80116c2 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801168e:	b2db      	uxtb	r3, r3
 8011690:	2b03      	cmp	r3, #3
 8011692:	d10f      	bne.n	80116b4 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d009      	beq.n	80116b4 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	68f8      	ldr	r0, [r7, #12]
 80116b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80116b4:	2180      	movs	r1, #128	@ 0x80
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	f001 fd5b 	bl	8013172 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80116bc:	68f8      	ldr	r0, [r7, #12]
 80116be:	f001 f8d3 	bl	8012868 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d03a      	beq.n	8011742 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f7ff fe42 	bl	8011356 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80116da:	e032      	b.n	8011742 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80116dc:	7afb      	ldrb	r3, [r7, #11]
 80116de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	4619      	mov	r1, r3
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f000 f985 	bl	80119f6 <USBD_CoreFindEP>
 80116ec:	4603      	mov	r3, r0
 80116ee:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80116f0:	7dfb      	ldrb	r3, [r7, #23]
 80116f2:	2bff      	cmp	r3, #255	@ 0xff
 80116f4:	d025      	beq.n	8011742 <USBD_LL_DataInStage+0x15a>
 80116f6:	7dfb      	ldrb	r3, [r7, #23]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d122      	bne.n	8011742 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011702:	b2db      	uxtb	r3, r3
 8011704:	2b03      	cmp	r3, #3
 8011706:	d11c      	bne.n	8011742 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011708:	7dfa      	ldrb	r2, [r7, #23]
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	32ae      	adds	r2, #174	@ 0xae
 801170e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011712:	695b      	ldr	r3, [r3, #20]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d014      	beq.n	8011742 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011718:	7dfa      	ldrb	r2, [r7, #23]
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011720:	7dfa      	ldrb	r2, [r7, #23]
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	32ae      	adds	r2, #174	@ 0xae
 8011726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801172a:	695b      	ldr	r3, [r3, #20]
 801172c:	7afa      	ldrb	r2, [r7, #11]
 801172e:	4611      	mov	r1, r2
 8011730:	68f8      	ldr	r0, [r7, #12]
 8011732:	4798      	blx	r3
 8011734:	4603      	mov	r3, r0
 8011736:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011738:	7dbb      	ldrb	r3, [r7, #22]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d001      	beq.n	8011742 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801173e:	7dbb      	ldrb	r3, [r7, #22]
 8011740:	e000      	b.n	8011744 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011742:	2300      	movs	r3, #0
}
 8011744:	4618      	mov	r0, r3
 8011746:	3718      	adds	r7, #24
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}

0801174c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b084      	sub	sp, #16
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011754:	2300      	movs	r3, #0
 8011756:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2201      	movs	r2, #1
 801175c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2200      	movs	r2, #0
 8011764:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2200      	movs	r2, #0
 801176c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2200      	movs	r2, #0
 801177a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011784:	2b00      	cmp	r3, #0
 8011786:	d014      	beq.n	80117b2 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d00e      	beq.n	80117b2 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	687a      	ldr	r2, [r7, #4]
 801179e:	6852      	ldr	r2, [r2, #4]
 80117a0:	b2d2      	uxtb	r2, r2
 80117a2:	4611      	mov	r1, r2
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	4798      	blx	r3
 80117a8:	4603      	mov	r3, r0
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d001      	beq.n	80117b2 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80117ae:	2303      	movs	r3, #3
 80117b0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117b2:	2340      	movs	r3, #64	@ 0x40
 80117b4:	2200      	movs	r2, #0
 80117b6:	2100      	movs	r1, #0
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f001 fc76 	bl	80130aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2201      	movs	r2, #1
 80117c2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2240      	movs	r2, #64	@ 0x40
 80117ca:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117ce:	2340      	movs	r3, #64	@ 0x40
 80117d0:	2200      	movs	r2, #0
 80117d2:	2180      	movs	r1, #128	@ 0x80
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f001 fc68 	bl	80130aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2201      	movs	r2, #1
 80117de:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2240      	movs	r2, #64	@ 0x40
 80117e4:	621a      	str	r2, [r3, #32]

  return ret;
 80117e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3710      	adds	r7, #16
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	460b      	mov	r3, r1
 80117fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	78fa      	ldrb	r2, [r7, #3]
 8011800:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011802:	2300      	movs	r3, #0
}
 8011804:	4618      	mov	r0, r3
 8011806:	370c      	adds	r7, #12
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr

08011810 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801181e:	b2db      	uxtb	r3, r3
 8011820:	2b04      	cmp	r3, #4
 8011822:	d006      	beq.n	8011832 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801182a:	b2da      	uxtb	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2204      	movs	r2, #4
 8011836:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801183a:	2300      	movs	r3, #0
}
 801183c:	4618      	mov	r0, r3
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011848:	b480      	push	{r7}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011856:	b2db      	uxtb	r3, r3
 8011858:	2b04      	cmp	r3, #4
 801185a:	d106      	bne.n	801186a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011862:	b2da      	uxtb	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801186a:	2300      	movs	r3, #0
}
 801186c:	4618      	mov	r0, r3
 801186e:	370c      	adds	r7, #12
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr

08011878 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011886:	b2db      	uxtb	r3, r3
 8011888:	2b03      	cmp	r3, #3
 801188a:	d110      	bne.n	80118ae <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00b      	beq.n	80118ae <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801189c:	69db      	ldr	r3, [r3, #28]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d005      	beq.n	80118ae <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118a8:	69db      	ldr	r3, [r3, #28]
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80118ae:	2300      	movs	r3, #0
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	460b      	mov	r3, r1
 80118c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	32ae      	adds	r2, #174	@ 0xae
 80118ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d101      	bne.n	80118da <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80118d6:	2303      	movs	r3, #3
 80118d8:	e01c      	b.n	8011914 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118e0:	b2db      	uxtb	r3, r3
 80118e2:	2b03      	cmp	r3, #3
 80118e4:	d115      	bne.n	8011912 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	32ae      	adds	r2, #174	@ 0xae
 80118f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118f4:	6a1b      	ldr	r3, [r3, #32]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d00b      	beq.n	8011912 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	32ae      	adds	r2, #174	@ 0xae
 8011904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011908:	6a1b      	ldr	r3, [r3, #32]
 801190a:	78fa      	ldrb	r2, [r7, #3]
 801190c:	4611      	mov	r1, r2
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011912:	2300      	movs	r3, #0
}
 8011914:	4618      	mov	r0, r3
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	460b      	mov	r3, r1
 8011926:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	32ae      	adds	r2, #174	@ 0xae
 8011932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d101      	bne.n	801193e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801193a:	2303      	movs	r3, #3
 801193c:	e01c      	b.n	8011978 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011944:	b2db      	uxtb	r3, r3
 8011946:	2b03      	cmp	r3, #3
 8011948:	d115      	bne.n	8011976 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	32ae      	adds	r2, #174	@ 0xae
 8011954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801195a:	2b00      	cmp	r3, #0
 801195c:	d00b      	beq.n	8011976 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	32ae      	adds	r2, #174	@ 0xae
 8011968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801196e:	78fa      	ldrb	r2, [r7, #3]
 8011970:	4611      	mov	r1, r2
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011988:	2300      	movs	r3, #0
}
 801198a:	4618      	mov	r0, r3
 801198c:	370c      	adds	r7, #12
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr

08011996 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011996:	b580      	push	{r7, lr}
 8011998:	b084      	sub	sp, #16
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801199e:	2300      	movs	r3, #0
 80119a0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2201      	movs	r2, #1
 80119a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d00e      	beq.n	80119d2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	6852      	ldr	r2, [r2, #4]
 80119c0:	b2d2      	uxtb	r2, r2
 80119c2:	4611      	mov	r1, r2
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	4798      	blx	r3
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d001      	beq.n	80119d2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80119ce:	2303      	movs	r3, #3
 80119d0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80119d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80119dc:	b480      	push	{r7}
 80119de:	b083      	sub	sp, #12
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	460b      	mov	r3, r1
 80119e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80119e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	370c      	adds	r7, #12
 80119ee:	46bd      	mov	sp, r7
 80119f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f4:	4770      	bx	lr

080119f6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80119f6:	b480      	push	{r7}
 80119f8:	b083      	sub	sp, #12
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
 80119fe:	460b      	mov	r3, r1
 8011a00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011a02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	370c      	adds	r7, #12
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr

08011a10 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b086      	sub	sp, #24
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	460b      	mov	r3, r1
 8011a1a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011a24:	2300      	movs	r3, #0
 8011a26:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	885b      	ldrh	r3, [r3, #2]
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	68fa      	ldr	r2, [r7, #12]
 8011a30:	7812      	ldrb	r2, [r2, #0]
 8011a32:	4293      	cmp	r3, r2
 8011a34:	d91f      	bls.n	8011a76 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011a3c:	e013      	b.n	8011a66 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011a3e:	f107 030a 	add.w	r3, r7, #10
 8011a42:	4619      	mov	r1, r3
 8011a44:	6978      	ldr	r0, [r7, #20]
 8011a46:	f000 f81b 	bl	8011a80 <USBD_GetNextDesc>
 8011a4a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	785b      	ldrb	r3, [r3, #1]
 8011a50:	2b05      	cmp	r3, #5
 8011a52:	d108      	bne.n	8011a66 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	789b      	ldrb	r3, [r3, #2]
 8011a5c:	78fa      	ldrb	r2, [r7, #3]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d008      	beq.n	8011a74 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011a62:	2300      	movs	r3, #0
 8011a64:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	885b      	ldrh	r3, [r3, #2]
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	897b      	ldrh	r3, [r7, #10]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d8e5      	bhi.n	8011a3e <USBD_GetEpDesc+0x2e>
 8011a72:	e000      	b.n	8011a76 <USBD_GetEpDesc+0x66>
          break;
 8011a74:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011a76:	693b      	ldr	r3, [r7, #16]
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3718      	adds	r7, #24
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011a80:	b480      	push	{r7}
 8011a82:	b085      	sub	sp, #20
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	881b      	ldrh	r3, [r3, #0]
 8011a92:	68fa      	ldr	r2, [r7, #12]
 8011a94:	7812      	ldrb	r2, [r2, #0]
 8011a96:	4413      	add	r3, r2
 8011a98:	b29a      	uxth	r2, r3
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3714      	adds	r7, #20
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr

08011ab8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b087      	sub	sp, #28
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	3301      	adds	r3, #1
 8011ace:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011ad6:	8a3b      	ldrh	r3, [r7, #16]
 8011ad8:	021b      	lsls	r3, r3, #8
 8011ada:	b21a      	sxth	r2, r3
 8011adc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011ae0:	4313      	orrs	r3, r2
 8011ae2:	b21b      	sxth	r3, r3
 8011ae4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011ae6:	89fb      	ldrh	r3, [r7, #14]
}
 8011ae8:	4618      	mov	r0, r3
 8011aea:	371c      	adds	r7, #28
 8011aec:	46bd      	mov	sp, r7
 8011aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af2:	4770      	bx	lr

08011af4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011afe:	2300      	movs	r3, #0
 8011b00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011b0a:	2b40      	cmp	r3, #64	@ 0x40
 8011b0c:	d005      	beq.n	8011b1a <USBD_StdDevReq+0x26>
 8011b0e:	2b40      	cmp	r3, #64	@ 0x40
 8011b10:	d857      	bhi.n	8011bc2 <USBD_StdDevReq+0xce>
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00f      	beq.n	8011b36 <USBD_StdDevReq+0x42>
 8011b16:	2b20      	cmp	r3, #32
 8011b18:	d153      	bne.n	8011bc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	32ae      	adds	r2, #174	@ 0xae
 8011b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b28:	689b      	ldr	r3, [r3, #8]
 8011b2a:	6839      	ldr	r1, [r7, #0]
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	4798      	blx	r3
 8011b30:	4603      	mov	r3, r0
 8011b32:	73fb      	strb	r3, [r7, #15]
      break;
 8011b34:	e04a      	b.n	8011bcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	785b      	ldrb	r3, [r3, #1]
 8011b3a:	2b09      	cmp	r3, #9
 8011b3c:	d83b      	bhi.n	8011bb6 <USBD_StdDevReq+0xc2>
 8011b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8011b44 <USBD_StdDevReq+0x50>)
 8011b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b44:	08011b99 	.word	0x08011b99
 8011b48:	08011bad 	.word	0x08011bad
 8011b4c:	08011bb7 	.word	0x08011bb7
 8011b50:	08011ba3 	.word	0x08011ba3
 8011b54:	08011bb7 	.word	0x08011bb7
 8011b58:	08011b77 	.word	0x08011b77
 8011b5c:	08011b6d 	.word	0x08011b6d
 8011b60:	08011bb7 	.word	0x08011bb7
 8011b64:	08011b8f 	.word	0x08011b8f
 8011b68:	08011b81 	.word	0x08011b81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011b6c:	6839      	ldr	r1, [r7, #0]
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 fa3c 	bl	8011fec <USBD_GetDescriptor>
          break;
 8011b74:	e024      	b.n	8011bc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011b76:	6839      	ldr	r1, [r7, #0]
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f000 fbcb 	bl	8012314 <USBD_SetAddress>
          break;
 8011b7e:	e01f      	b.n	8011bc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f000 fc0a 	bl	801239c <USBD_SetConfig>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	73fb      	strb	r3, [r7, #15]
          break;
 8011b8c:	e018      	b.n	8011bc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011b8e:	6839      	ldr	r1, [r7, #0]
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f000 fcad 	bl	80124f0 <USBD_GetConfig>
          break;
 8011b96:	e013      	b.n	8011bc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011b98:	6839      	ldr	r1, [r7, #0]
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f000 fcde 	bl	801255c <USBD_GetStatus>
          break;
 8011ba0:	e00e      	b.n	8011bc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011ba2:	6839      	ldr	r1, [r7, #0]
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f000 fd0d 	bl	80125c4 <USBD_SetFeature>
          break;
 8011baa:	e009      	b.n	8011bc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 fd31 	bl	8012616 <USBD_ClrFeature>
          break;
 8011bb4:	e004      	b.n	8011bc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011bb6:	6839      	ldr	r1, [r7, #0]
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f000 fd88 	bl	80126ce <USBD_CtlError>
          break;
 8011bbe:	bf00      	nop
      }
      break;
 8011bc0:	e004      	b.n	8011bcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011bc2:	6839      	ldr	r1, [r7, #0]
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f000 fd82 	bl	80126ce <USBD_CtlError>
      break;
 8011bca:	bf00      	nop
  }

  return ret;
 8011bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3710      	adds	r7, #16
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop

08011bd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011be2:	2300      	movs	r3, #0
 8011be4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011bee:	2b40      	cmp	r3, #64	@ 0x40
 8011bf0:	d005      	beq.n	8011bfe <USBD_StdItfReq+0x26>
 8011bf2:	2b40      	cmp	r3, #64	@ 0x40
 8011bf4:	d852      	bhi.n	8011c9c <USBD_StdItfReq+0xc4>
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d001      	beq.n	8011bfe <USBD_StdItfReq+0x26>
 8011bfa:	2b20      	cmp	r3, #32
 8011bfc:	d14e      	bne.n	8011c9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c04:	b2db      	uxtb	r3, r3
 8011c06:	3b01      	subs	r3, #1
 8011c08:	2b02      	cmp	r3, #2
 8011c0a:	d840      	bhi.n	8011c8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	889b      	ldrh	r3, [r3, #4]
 8011c10:	b2db      	uxtb	r3, r3
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d836      	bhi.n	8011c84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	889b      	ldrh	r3, [r3, #4]
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7ff fedc 	bl	80119dc <USBD_CoreFindIF>
 8011c24:	4603      	mov	r3, r0
 8011c26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011c28:	7bbb      	ldrb	r3, [r7, #14]
 8011c2a:	2bff      	cmp	r3, #255	@ 0xff
 8011c2c:	d01d      	beq.n	8011c6a <USBD_StdItfReq+0x92>
 8011c2e:	7bbb      	ldrb	r3, [r7, #14]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d11a      	bne.n	8011c6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011c34:	7bba      	ldrb	r2, [r7, #14]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	32ae      	adds	r2, #174	@ 0xae
 8011c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00f      	beq.n	8011c64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011c44:	7bba      	ldrb	r2, [r7, #14]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011c4c:	7bba      	ldrb	r2, [r7, #14]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	32ae      	adds	r2, #174	@ 0xae
 8011c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	6839      	ldr	r1, [r7, #0]
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	4798      	blx	r3
 8011c5e:	4603      	mov	r3, r0
 8011c60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011c62:	e004      	b.n	8011c6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011c64:	2303      	movs	r3, #3
 8011c66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011c68:	e001      	b.n	8011c6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011c6a:	2303      	movs	r3, #3
 8011c6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	88db      	ldrh	r3, [r3, #6]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d110      	bne.n	8011c98 <USBD_StdItfReq+0xc0>
 8011c76:	7bfb      	ldrb	r3, [r7, #15]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d10d      	bne.n	8011c98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 fde0 	bl	8012842 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011c82:	e009      	b.n	8011c98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011c84:	6839      	ldr	r1, [r7, #0]
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f000 fd21 	bl	80126ce <USBD_CtlError>
          break;
 8011c8c:	e004      	b.n	8011c98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011c8e:	6839      	ldr	r1, [r7, #0]
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fd1c 	bl	80126ce <USBD_CtlError>
          break;
 8011c96:	e000      	b.n	8011c9a <USBD_StdItfReq+0xc2>
          break;
 8011c98:	bf00      	nop
      }
      break;
 8011c9a:	e004      	b.n	8011ca6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011c9c:	6839      	ldr	r1, [r7, #0]
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f000 fd15 	bl	80126ce <USBD_CtlError>
      break;
 8011ca4:	bf00      	nop
  }

  return ret;
 8011ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3710      	adds	r7, #16
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	889b      	ldrh	r3, [r3, #4]
 8011cc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011ccc:	2b40      	cmp	r3, #64	@ 0x40
 8011cce:	d007      	beq.n	8011ce0 <USBD_StdEPReq+0x30>
 8011cd0:	2b40      	cmp	r3, #64	@ 0x40
 8011cd2:	f200 817f 	bhi.w	8011fd4 <USBD_StdEPReq+0x324>
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d02a      	beq.n	8011d30 <USBD_StdEPReq+0x80>
 8011cda:	2b20      	cmp	r3, #32
 8011cdc:	f040 817a 	bne.w	8011fd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011ce0:	7bbb      	ldrb	r3, [r7, #14]
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f7ff fe86 	bl	80119f6 <USBD_CoreFindEP>
 8011cea:	4603      	mov	r3, r0
 8011cec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011cee:	7b7b      	ldrb	r3, [r7, #13]
 8011cf0:	2bff      	cmp	r3, #255	@ 0xff
 8011cf2:	f000 8174 	beq.w	8011fde <USBD_StdEPReq+0x32e>
 8011cf6:	7b7b      	ldrb	r3, [r7, #13]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	f040 8170 	bne.w	8011fde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011cfe:	7b7a      	ldrb	r2, [r7, #13]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011d06:	7b7a      	ldrb	r2, [r7, #13]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	32ae      	adds	r2, #174	@ 0xae
 8011d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	f000 8163 	beq.w	8011fde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011d18:	7b7a      	ldrb	r2, [r7, #13]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	32ae      	adds	r2, #174	@ 0xae
 8011d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d22:	689b      	ldr	r3, [r3, #8]
 8011d24:	6839      	ldr	r1, [r7, #0]
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	4798      	blx	r3
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011d2e:	e156      	b.n	8011fde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	785b      	ldrb	r3, [r3, #1]
 8011d34:	2b03      	cmp	r3, #3
 8011d36:	d008      	beq.n	8011d4a <USBD_StdEPReq+0x9a>
 8011d38:	2b03      	cmp	r3, #3
 8011d3a:	f300 8145 	bgt.w	8011fc8 <USBD_StdEPReq+0x318>
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f000 809b 	beq.w	8011e7a <USBD_StdEPReq+0x1ca>
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d03c      	beq.n	8011dc2 <USBD_StdEPReq+0x112>
 8011d48:	e13e      	b.n	8011fc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	2b02      	cmp	r3, #2
 8011d54:	d002      	beq.n	8011d5c <USBD_StdEPReq+0xac>
 8011d56:	2b03      	cmp	r3, #3
 8011d58:	d016      	beq.n	8011d88 <USBD_StdEPReq+0xd8>
 8011d5a:	e02c      	b.n	8011db6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d5c:	7bbb      	ldrb	r3, [r7, #14]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00d      	beq.n	8011d7e <USBD_StdEPReq+0xce>
 8011d62:	7bbb      	ldrb	r3, [r7, #14]
 8011d64:	2b80      	cmp	r3, #128	@ 0x80
 8011d66:	d00a      	beq.n	8011d7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011d68:	7bbb      	ldrb	r3, [r7, #14]
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f001 fa00 	bl	8013172 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d72:	2180      	movs	r1, #128	@ 0x80
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f001 f9fc 	bl	8013172 <USBD_LL_StallEP>
 8011d7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011d7c:	e020      	b.n	8011dc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011d7e:	6839      	ldr	r1, [r7, #0]
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f000 fca4 	bl	80126ce <USBD_CtlError>
              break;
 8011d86:	e01b      	b.n	8011dc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	885b      	ldrh	r3, [r3, #2]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d10e      	bne.n	8011dae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011d90:	7bbb      	ldrb	r3, [r7, #14]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d00b      	beq.n	8011dae <USBD_StdEPReq+0xfe>
 8011d96:	7bbb      	ldrb	r3, [r7, #14]
 8011d98:	2b80      	cmp	r3, #128	@ 0x80
 8011d9a:	d008      	beq.n	8011dae <USBD_StdEPReq+0xfe>
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	88db      	ldrh	r3, [r3, #6]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d104      	bne.n	8011dae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011da4:	7bbb      	ldrb	r3, [r7, #14]
 8011da6:	4619      	mov	r1, r3
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f001 f9e2 	bl	8013172 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 fd47 	bl	8012842 <USBD_CtlSendStatus>

              break;
 8011db4:	e004      	b.n	8011dc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011db6:	6839      	ldr	r1, [r7, #0]
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f000 fc88 	bl	80126ce <USBD_CtlError>
              break;
 8011dbe:	bf00      	nop
          }
          break;
 8011dc0:	e107      	b.n	8011fd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	2b02      	cmp	r3, #2
 8011dcc:	d002      	beq.n	8011dd4 <USBD_StdEPReq+0x124>
 8011dce:	2b03      	cmp	r3, #3
 8011dd0:	d016      	beq.n	8011e00 <USBD_StdEPReq+0x150>
 8011dd2:	e04b      	b.n	8011e6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011dd4:	7bbb      	ldrb	r3, [r7, #14]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00d      	beq.n	8011df6 <USBD_StdEPReq+0x146>
 8011dda:	7bbb      	ldrb	r3, [r7, #14]
 8011ddc:	2b80      	cmp	r3, #128	@ 0x80
 8011dde:	d00a      	beq.n	8011df6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011de0:	7bbb      	ldrb	r3, [r7, #14]
 8011de2:	4619      	mov	r1, r3
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f001 f9c4 	bl	8013172 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011dea:	2180      	movs	r1, #128	@ 0x80
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f001 f9c0 	bl	8013172 <USBD_LL_StallEP>
 8011df2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011df4:	e040      	b.n	8011e78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011df6:	6839      	ldr	r1, [r7, #0]
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f000 fc68 	bl	80126ce <USBD_CtlError>
              break;
 8011dfe:	e03b      	b.n	8011e78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	885b      	ldrh	r3, [r3, #2]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d136      	bne.n	8011e76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011e08:	7bbb      	ldrb	r3, [r7, #14]
 8011e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d004      	beq.n	8011e1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011e12:	7bbb      	ldrb	r3, [r7, #14]
 8011e14:	4619      	mov	r1, r3
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f001 f9ca 	bl	80131b0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f000 fd10 	bl	8012842 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011e22:	7bbb      	ldrb	r3, [r7, #14]
 8011e24:	4619      	mov	r1, r3
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f7ff fde5 	bl	80119f6 <USBD_CoreFindEP>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011e30:	7b7b      	ldrb	r3, [r7, #13]
 8011e32:	2bff      	cmp	r3, #255	@ 0xff
 8011e34:	d01f      	beq.n	8011e76 <USBD_StdEPReq+0x1c6>
 8011e36:	7b7b      	ldrb	r3, [r7, #13]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d11c      	bne.n	8011e76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011e3c:	7b7a      	ldrb	r2, [r7, #13]
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011e44:	7b7a      	ldrb	r2, [r7, #13]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	32ae      	adds	r2, #174	@ 0xae
 8011e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e4e:	689b      	ldr	r3, [r3, #8]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d010      	beq.n	8011e76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011e54:	7b7a      	ldrb	r2, [r7, #13]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	32ae      	adds	r2, #174	@ 0xae
 8011e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e5e:	689b      	ldr	r3, [r3, #8]
 8011e60:	6839      	ldr	r1, [r7, #0]
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	4798      	blx	r3
 8011e66:	4603      	mov	r3, r0
 8011e68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011e6a:	e004      	b.n	8011e76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011e6c:	6839      	ldr	r1, [r7, #0]
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f000 fc2d 	bl	80126ce <USBD_CtlError>
              break;
 8011e74:	e000      	b.n	8011e78 <USBD_StdEPReq+0x1c8>
              break;
 8011e76:	bf00      	nop
          }
          break;
 8011e78:	e0ab      	b.n	8011fd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e80:	b2db      	uxtb	r3, r3
 8011e82:	2b02      	cmp	r3, #2
 8011e84:	d002      	beq.n	8011e8c <USBD_StdEPReq+0x1dc>
 8011e86:	2b03      	cmp	r3, #3
 8011e88:	d032      	beq.n	8011ef0 <USBD_StdEPReq+0x240>
 8011e8a:	e097      	b.n	8011fbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e8c:	7bbb      	ldrb	r3, [r7, #14]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d007      	beq.n	8011ea2 <USBD_StdEPReq+0x1f2>
 8011e92:	7bbb      	ldrb	r3, [r7, #14]
 8011e94:	2b80      	cmp	r3, #128	@ 0x80
 8011e96:	d004      	beq.n	8011ea2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011e98:	6839      	ldr	r1, [r7, #0]
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 fc17 	bl	80126ce <USBD_CtlError>
                break;
 8011ea0:	e091      	b.n	8011fc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ea2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	da0b      	bge.n	8011ec2 <USBD_StdEPReq+0x212>
 8011eaa:	7bbb      	ldrb	r3, [r7, #14]
 8011eac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	4413      	add	r3, r2
 8011eb6:	009b      	lsls	r3, r3, #2
 8011eb8:	3310      	adds	r3, #16
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	4413      	add	r3, r2
 8011ebe:	3304      	adds	r3, #4
 8011ec0:	e00b      	b.n	8011eda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011ec2:	7bbb      	ldrb	r3, [r7, #14]
 8011ec4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ec8:	4613      	mov	r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	4413      	add	r3, r2
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011ed4:	687a      	ldr	r2, [r7, #4]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	3304      	adds	r3, #4
 8011eda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	2202      	movs	r2, #2
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f000 fc6d 	bl	80127c8 <USBD_CtlSendData>
              break;
 8011eee:	e06a      	b.n	8011fc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	da11      	bge.n	8011f1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011ef8:	7bbb      	ldrb	r3, [r7, #14]
 8011efa:	f003 020f 	and.w	r2, r3, #15
 8011efe:	6879      	ldr	r1, [r7, #4]
 8011f00:	4613      	mov	r3, r2
 8011f02:	009b      	lsls	r3, r3, #2
 8011f04:	4413      	add	r3, r2
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	440b      	add	r3, r1
 8011f0a:	3324      	adds	r3, #36	@ 0x24
 8011f0c:	881b      	ldrh	r3, [r3, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d117      	bne.n	8011f42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011f12:	6839      	ldr	r1, [r7, #0]
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 fbda 	bl	80126ce <USBD_CtlError>
                  break;
 8011f1a:	e054      	b.n	8011fc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011f1c:	7bbb      	ldrb	r3, [r7, #14]
 8011f1e:	f003 020f 	and.w	r2, r3, #15
 8011f22:	6879      	ldr	r1, [r7, #4]
 8011f24:	4613      	mov	r3, r2
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	4413      	add	r3, r2
 8011f2a:	009b      	lsls	r3, r3, #2
 8011f2c:	440b      	add	r3, r1
 8011f2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011f32:	881b      	ldrh	r3, [r3, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d104      	bne.n	8011f42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011f38:	6839      	ldr	r1, [r7, #0]
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 fbc7 	bl	80126ce <USBD_CtlError>
                  break;
 8011f40:	e041      	b.n	8011fc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	da0b      	bge.n	8011f62 <USBD_StdEPReq+0x2b2>
 8011f4a:	7bbb      	ldrb	r3, [r7, #14]
 8011f4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011f50:	4613      	mov	r3, r2
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	4413      	add	r3, r2
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	3310      	adds	r3, #16
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	3304      	adds	r3, #4
 8011f60:	e00b      	b.n	8011f7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011f62:	7bbb      	ldrb	r3, [r7, #14]
 8011f64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f68:	4613      	mov	r3, r2
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	4413      	add	r3, r2
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	4413      	add	r3, r2
 8011f78:	3304      	adds	r3, #4
 8011f7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011f7c:	7bbb      	ldrb	r3, [r7, #14]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d002      	beq.n	8011f88 <USBD_StdEPReq+0x2d8>
 8011f82:	7bbb      	ldrb	r3, [r7, #14]
 8011f84:	2b80      	cmp	r3, #128	@ 0x80
 8011f86:	d103      	bne.n	8011f90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	601a      	str	r2, [r3, #0]
 8011f8e:	e00e      	b.n	8011fae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011f90:	7bbb      	ldrb	r3, [r7, #14]
 8011f92:	4619      	mov	r1, r3
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f001 f92a 	bl	80131ee <USBD_LL_IsStallEP>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d003      	beq.n	8011fa8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	601a      	str	r2, [r3, #0]
 8011fa6:	e002      	b.n	8011fae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	2200      	movs	r2, #0
 8011fac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	2202      	movs	r2, #2
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f000 fc07 	bl	80127c8 <USBD_CtlSendData>
              break;
 8011fba:	e004      	b.n	8011fc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011fbc:	6839      	ldr	r1, [r7, #0]
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f000 fb85 	bl	80126ce <USBD_CtlError>
              break;
 8011fc4:	bf00      	nop
          }
          break;
 8011fc6:	e004      	b.n	8011fd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011fc8:	6839      	ldr	r1, [r7, #0]
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 fb7f 	bl	80126ce <USBD_CtlError>
          break;
 8011fd0:	bf00      	nop
      }
      break;
 8011fd2:	e005      	b.n	8011fe0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011fd4:	6839      	ldr	r1, [r7, #0]
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f000 fb79 	bl	80126ce <USBD_CtlError>
      break;
 8011fdc:	e000      	b.n	8011fe0 <USBD_StdEPReq+0x330>
      break;
 8011fde:	bf00      	nop
  }

  return ret;
 8011fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3710      	adds	r7, #16
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
	...

08011fec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011ffe:	2300      	movs	r3, #0
 8012000:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	885b      	ldrh	r3, [r3, #2]
 8012006:	0a1b      	lsrs	r3, r3, #8
 8012008:	b29b      	uxth	r3, r3
 801200a:	3b01      	subs	r3, #1
 801200c:	2b0e      	cmp	r3, #14
 801200e:	f200 8152 	bhi.w	80122b6 <USBD_GetDescriptor+0x2ca>
 8012012:	a201      	add	r2, pc, #4	@ (adr r2, 8012018 <USBD_GetDescriptor+0x2c>)
 8012014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012018:	08012089 	.word	0x08012089
 801201c:	080120a1 	.word	0x080120a1
 8012020:	080120e1 	.word	0x080120e1
 8012024:	080122b7 	.word	0x080122b7
 8012028:	080122b7 	.word	0x080122b7
 801202c:	08012257 	.word	0x08012257
 8012030:	08012283 	.word	0x08012283
 8012034:	080122b7 	.word	0x080122b7
 8012038:	080122b7 	.word	0x080122b7
 801203c:	080122b7 	.word	0x080122b7
 8012040:	080122b7 	.word	0x080122b7
 8012044:	080122b7 	.word	0x080122b7
 8012048:	080122b7 	.word	0x080122b7
 801204c:	080122b7 	.word	0x080122b7
 8012050:	08012055 	.word	0x08012055
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801205a:	69db      	ldr	r3, [r3, #28]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00b      	beq.n	8012078 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012066:	69db      	ldr	r3, [r3, #28]
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	7c12      	ldrb	r2, [r2, #16]
 801206c:	f107 0108 	add.w	r1, r7, #8
 8012070:	4610      	mov	r0, r2
 8012072:	4798      	blx	r3
 8012074:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012076:	e126      	b.n	80122c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012078:	6839      	ldr	r1, [r7, #0]
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 fb27 	bl	80126ce <USBD_CtlError>
        err++;
 8012080:	7afb      	ldrb	r3, [r7, #11]
 8012082:	3301      	adds	r3, #1
 8012084:	72fb      	strb	r3, [r7, #11]
      break;
 8012086:	e11e      	b.n	80122c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	687a      	ldr	r2, [r7, #4]
 8012092:	7c12      	ldrb	r2, [r2, #16]
 8012094:	f107 0108 	add.w	r1, r7, #8
 8012098:	4610      	mov	r0, r2
 801209a:	4798      	blx	r3
 801209c:	60f8      	str	r0, [r7, #12]
      break;
 801209e:	e112      	b.n	80122c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	7c1b      	ldrb	r3, [r3, #16]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d10d      	bne.n	80120c4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120b0:	f107 0208 	add.w	r2, r7, #8
 80120b4:	4610      	mov	r0, r2
 80120b6:	4798      	blx	r3
 80120b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	3301      	adds	r3, #1
 80120be:	2202      	movs	r2, #2
 80120c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80120c2:	e100      	b.n	80122c6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120cc:	f107 0208 	add.w	r2, r7, #8
 80120d0:	4610      	mov	r0, r2
 80120d2:	4798      	blx	r3
 80120d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	3301      	adds	r3, #1
 80120da:	2202      	movs	r2, #2
 80120dc:	701a      	strb	r2, [r3, #0]
      break;
 80120de:	e0f2      	b.n	80122c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	885b      	ldrh	r3, [r3, #2]
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	2b05      	cmp	r3, #5
 80120e8:	f200 80ac 	bhi.w	8012244 <USBD_GetDescriptor+0x258>
 80120ec:	a201      	add	r2, pc, #4	@ (adr r2, 80120f4 <USBD_GetDescriptor+0x108>)
 80120ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120f2:	bf00      	nop
 80120f4:	0801210d 	.word	0x0801210d
 80120f8:	08012141 	.word	0x08012141
 80120fc:	08012175 	.word	0x08012175
 8012100:	080121a9 	.word	0x080121a9
 8012104:	080121dd 	.word	0x080121dd
 8012108:	08012211 	.word	0x08012211
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d00b      	beq.n	8012130 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	7c12      	ldrb	r2, [r2, #16]
 8012124:	f107 0108 	add.w	r1, r7, #8
 8012128:	4610      	mov	r0, r2
 801212a:	4798      	blx	r3
 801212c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801212e:	e091      	b.n	8012254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012130:	6839      	ldr	r1, [r7, #0]
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f000 facb 	bl	80126ce <USBD_CtlError>
            err++;
 8012138:	7afb      	ldrb	r3, [r7, #11]
 801213a:	3301      	adds	r3, #1
 801213c:	72fb      	strb	r3, [r7, #11]
          break;
 801213e:	e089      	b.n	8012254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012146:	689b      	ldr	r3, [r3, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d00b      	beq.n	8012164 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012152:	689b      	ldr	r3, [r3, #8]
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	7c12      	ldrb	r2, [r2, #16]
 8012158:	f107 0108 	add.w	r1, r7, #8
 801215c:	4610      	mov	r0, r2
 801215e:	4798      	blx	r3
 8012160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012162:	e077      	b.n	8012254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012164:	6839      	ldr	r1, [r7, #0]
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 fab1 	bl	80126ce <USBD_CtlError>
            err++;
 801216c:	7afb      	ldrb	r3, [r7, #11]
 801216e:	3301      	adds	r3, #1
 8012170:	72fb      	strb	r3, [r7, #11]
          break;
 8012172:	e06f      	b.n	8012254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801217a:	68db      	ldr	r3, [r3, #12]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d00b      	beq.n	8012198 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	687a      	ldr	r2, [r7, #4]
 801218a:	7c12      	ldrb	r2, [r2, #16]
 801218c:	f107 0108 	add.w	r1, r7, #8
 8012190:	4610      	mov	r0, r2
 8012192:	4798      	blx	r3
 8012194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012196:	e05d      	b.n	8012254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012198:	6839      	ldr	r1, [r7, #0]
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 fa97 	bl	80126ce <USBD_CtlError>
            err++;
 80121a0:	7afb      	ldrb	r3, [r7, #11]
 80121a2:	3301      	adds	r3, #1
 80121a4:	72fb      	strb	r3, [r7, #11]
          break;
 80121a6:	e055      	b.n	8012254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121ae:	691b      	ldr	r3, [r3, #16]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d00b      	beq.n	80121cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121ba:	691b      	ldr	r3, [r3, #16]
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	7c12      	ldrb	r2, [r2, #16]
 80121c0:	f107 0108 	add.w	r1, r7, #8
 80121c4:	4610      	mov	r0, r2
 80121c6:	4798      	blx	r3
 80121c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121ca:	e043      	b.n	8012254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80121cc:	6839      	ldr	r1, [r7, #0]
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f000 fa7d 	bl	80126ce <USBD_CtlError>
            err++;
 80121d4:	7afb      	ldrb	r3, [r7, #11]
 80121d6:	3301      	adds	r3, #1
 80121d8:	72fb      	strb	r3, [r7, #11]
          break;
 80121da:	e03b      	b.n	8012254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d00b      	beq.n	8012200 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121ee:	695b      	ldr	r3, [r3, #20]
 80121f0:	687a      	ldr	r2, [r7, #4]
 80121f2:	7c12      	ldrb	r2, [r2, #16]
 80121f4:	f107 0108 	add.w	r1, r7, #8
 80121f8:	4610      	mov	r0, r2
 80121fa:	4798      	blx	r3
 80121fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121fe:	e029      	b.n	8012254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012200:	6839      	ldr	r1, [r7, #0]
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 fa63 	bl	80126ce <USBD_CtlError>
            err++;
 8012208:	7afb      	ldrb	r3, [r7, #11]
 801220a:	3301      	adds	r3, #1
 801220c:	72fb      	strb	r3, [r7, #11]
          break;
 801220e:	e021      	b.n	8012254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012216:	699b      	ldr	r3, [r3, #24]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00b      	beq.n	8012234 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012222:	699b      	ldr	r3, [r3, #24]
 8012224:	687a      	ldr	r2, [r7, #4]
 8012226:	7c12      	ldrb	r2, [r2, #16]
 8012228:	f107 0108 	add.w	r1, r7, #8
 801222c:	4610      	mov	r0, r2
 801222e:	4798      	blx	r3
 8012230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012232:	e00f      	b.n	8012254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012234:	6839      	ldr	r1, [r7, #0]
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f000 fa49 	bl	80126ce <USBD_CtlError>
            err++;
 801223c:	7afb      	ldrb	r3, [r7, #11]
 801223e:	3301      	adds	r3, #1
 8012240:	72fb      	strb	r3, [r7, #11]
          break;
 8012242:	e007      	b.n	8012254 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012244:	6839      	ldr	r1, [r7, #0]
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 fa41 	bl	80126ce <USBD_CtlError>
          err++;
 801224c:	7afb      	ldrb	r3, [r7, #11]
 801224e:	3301      	adds	r3, #1
 8012250:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012252:	bf00      	nop
      }
      break;
 8012254:	e037      	b.n	80122c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	7c1b      	ldrb	r3, [r3, #16]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d109      	bne.n	8012272 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012266:	f107 0208 	add.w	r2, r7, #8
 801226a:	4610      	mov	r0, r2
 801226c:	4798      	blx	r3
 801226e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012270:	e029      	b.n	80122c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012272:	6839      	ldr	r1, [r7, #0]
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f000 fa2a 	bl	80126ce <USBD_CtlError>
        err++;
 801227a:	7afb      	ldrb	r3, [r7, #11]
 801227c:	3301      	adds	r3, #1
 801227e:	72fb      	strb	r3, [r7, #11]
      break;
 8012280:	e021      	b.n	80122c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	7c1b      	ldrb	r3, [r3, #16]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d10d      	bne.n	80122a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012292:	f107 0208 	add.w	r2, r7, #8
 8012296:	4610      	mov	r0, r2
 8012298:	4798      	blx	r3
 801229a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	3301      	adds	r3, #1
 80122a0:	2207      	movs	r2, #7
 80122a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80122a4:	e00f      	b.n	80122c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80122a6:	6839      	ldr	r1, [r7, #0]
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f000 fa10 	bl	80126ce <USBD_CtlError>
        err++;
 80122ae:	7afb      	ldrb	r3, [r7, #11]
 80122b0:	3301      	adds	r3, #1
 80122b2:	72fb      	strb	r3, [r7, #11]
      break;
 80122b4:	e007      	b.n	80122c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fa08 	bl	80126ce <USBD_CtlError>
      err++;
 80122be:	7afb      	ldrb	r3, [r7, #11]
 80122c0:	3301      	adds	r3, #1
 80122c2:	72fb      	strb	r3, [r7, #11]
      break;
 80122c4:	bf00      	nop
  }

  if (err != 0U)
 80122c6:	7afb      	ldrb	r3, [r7, #11]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d11e      	bne.n	801230a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	88db      	ldrh	r3, [r3, #6]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d016      	beq.n	8012302 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80122d4:	893b      	ldrh	r3, [r7, #8]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d00e      	beq.n	80122f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	88da      	ldrh	r2, [r3, #6]
 80122de:	893b      	ldrh	r3, [r7, #8]
 80122e0:	4293      	cmp	r3, r2
 80122e2:	bf28      	it	cs
 80122e4:	4613      	movcs	r3, r2
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80122ea:	893b      	ldrh	r3, [r7, #8]
 80122ec:	461a      	mov	r2, r3
 80122ee:	68f9      	ldr	r1, [r7, #12]
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 fa69 	bl	80127c8 <USBD_CtlSendData>
 80122f6:	e009      	b.n	801230c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80122f8:	6839      	ldr	r1, [r7, #0]
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f000 f9e7 	bl	80126ce <USBD_CtlError>
 8012300:	e004      	b.n	801230c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fa9d 	bl	8012842 <USBD_CtlSendStatus>
 8012308:	e000      	b.n	801230c <USBD_GetDescriptor+0x320>
    return;
 801230a:	bf00      	nop
  }
}
 801230c:	3710      	adds	r7, #16
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop

08012314 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	889b      	ldrh	r3, [r3, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d131      	bne.n	801238a <USBD_SetAddress+0x76>
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	88db      	ldrh	r3, [r3, #6]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d12d      	bne.n	801238a <USBD_SetAddress+0x76>
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	885b      	ldrh	r3, [r3, #2]
 8012332:	2b7f      	cmp	r3, #127	@ 0x7f
 8012334:	d829      	bhi.n	801238a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	885b      	ldrh	r3, [r3, #2]
 801233a:	b2db      	uxtb	r3, r3
 801233c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012340:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012348:	b2db      	uxtb	r3, r3
 801234a:	2b03      	cmp	r3, #3
 801234c:	d104      	bne.n	8012358 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801234e:	6839      	ldr	r1, [r7, #0]
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 f9bc 	bl	80126ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012356:	e01d      	b.n	8012394 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	7bfa      	ldrb	r2, [r7, #15]
 801235c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012360:	7bfb      	ldrb	r3, [r7, #15]
 8012362:	4619      	mov	r1, r3
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f000 ff6e 	bl	8013246 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 fa69 	bl	8012842 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012370:	7bfb      	ldrb	r3, [r7, #15]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d004      	beq.n	8012380 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2202      	movs	r2, #2
 801237a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801237e:	e009      	b.n	8012394 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2201      	movs	r2, #1
 8012384:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012388:	e004      	b.n	8012394 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801238a:	6839      	ldr	r1, [r7, #0]
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f000 f99e 	bl	80126ce <USBD_CtlError>
  }
}
 8012392:	bf00      	nop
 8012394:	bf00      	nop
 8012396:	3710      	adds	r7, #16
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80123a6:	2300      	movs	r3, #0
 80123a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	885b      	ldrh	r3, [r3, #2]
 80123ae:	b2da      	uxtb	r2, r3
 80123b0:	4b4e      	ldr	r3, [pc, #312]	@ (80124ec <USBD_SetConfig+0x150>)
 80123b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80123b4:	4b4d      	ldr	r3, [pc, #308]	@ (80124ec <USBD_SetConfig+0x150>)
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d905      	bls.n	80123c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80123bc:	6839      	ldr	r1, [r7, #0]
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f000 f985 	bl	80126ce <USBD_CtlError>
    return USBD_FAIL;
 80123c4:	2303      	movs	r3, #3
 80123c6:	e08c      	b.n	80124e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123ce:	b2db      	uxtb	r3, r3
 80123d0:	2b02      	cmp	r3, #2
 80123d2:	d002      	beq.n	80123da <USBD_SetConfig+0x3e>
 80123d4:	2b03      	cmp	r3, #3
 80123d6:	d029      	beq.n	801242c <USBD_SetConfig+0x90>
 80123d8:	e075      	b.n	80124c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80123da:	4b44      	ldr	r3, [pc, #272]	@ (80124ec <USBD_SetConfig+0x150>)
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d020      	beq.n	8012424 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80123e2:	4b42      	ldr	r3, [pc, #264]	@ (80124ec <USBD_SetConfig+0x150>)
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	461a      	mov	r2, r3
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80123ec:	4b3f      	ldr	r3, [pc, #252]	@ (80124ec <USBD_SetConfig+0x150>)
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	4619      	mov	r1, r3
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f7fe ffba 	bl	801136c <USBD_SetClassConfig>
 80123f8:	4603      	mov	r3, r0
 80123fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80123fc:	7bfb      	ldrb	r3, [r7, #15]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d008      	beq.n	8012414 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012402:	6839      	ldr	r1, [r7, #0]
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f000 f962 	bl	80126ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2202      	movs	r2, #2
 801240e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012412:	e065      	b.n	80124e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 fa14 	bl	8012842 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2203      	movs	r2, #3
 801241e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012422:	e05d      	b.n	80124e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f000 fa0c 	bl	8012842 <USBD_CtlSendStatus>
      break;
 801242a:	e059      	b.n	80124e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801242c:	4b2f      	ldr	r3, [pc, #188]	@ (80124ec <USBD_SetConfig+0x150>)
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d112      	bne.n	801245a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2202      	movs	r2, #2
 8012438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801243c:	4b2b      	ldr	r3, [pc, #172]	@ (80124ec <USBD_SetConfig+0x150>)
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	461a      	mov	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012446:	4b29      	ldr	r3, [pc, #164]	@ (80124ec <USBD_SetConfig+0x150>)
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	4619      	mov	r1, r3
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f7fe ffa9 	bl	80113a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f9f5 	bl	8012842 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012458:	e042      	b.n	80124e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801245a:	4b24      	ldr	r3, [pc, #144]	@ (80124ec <USBD_SetConfig+0x150>)
 801245c:	781b      	ldrb	r3, [r3, #0]
 801245e:	461a      	mov	r2, r3
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	429a      	cmp	r2, r3
 8012466:	d02a      	beq.n	80124be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	b2db      	uxtb	r3, r3
 801246e:	4619      	mov	r1, r3
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f7fe ff97 	bl	80113a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012476:	4b1d      	ldr	r3, [pc, #116]	@ (80124ec <USBD_SetConfig+0x150>)
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	461a      	mov	r2, r3
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012480:	4b1a      	ldr	r3, [pc, #104]	@ (80124ec <USBD_SetConfig+0x150>)
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	4619      	mov	r1, r3
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f7fe ff70 	bl	801136c <USBD_SetClassConfig>
 801248c:	4603      	mov	r3, r0
 801248e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012490:	7bfb      	ldrb	r3, [r7, #15]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00f      	beq.n	80124b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012496:	6839      	ldr	r1, [r7, #0]
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 f918 	bl	80126ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	4619      	mov	r1, r3
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f7fe ff7c 	bl	80113a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2202      	movs	r2, #2
 80124b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80124b4:	e014      	b.n	80124e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f000 f9c3 	bl	8012842 <USBD_CtlSendStatus>
      break;
 80124bc:	e010      	b.n	80124e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80124be:	6878      	ldr	r0, [r7, #4]
 80124c0:	f000 f9bf 	bl	8012842 <USBD_CtlSendStatus>
      break;
 80124c4:	e00c      	b.n	80124e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80124c6:	6839      	ldr	r1, [r7, #0]
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f000 f900 	bl	80126ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80124ce:	4b07      	ldr	r3, [pc, #28]	@ (80124ec <USBD_SetConfig+0x150>)
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	4619      	mov	r1, r3
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f7fe ff65 	bl	80113a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80124da:	2303      	movs	r3, #3
 80124dc:	73fb      	strb	r3, [r7, #15]
      break;
 80124de:	bf00      	nop
  }

  return ret;
 80124e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3710      	adds	r7, #16
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	240008d8 	.word	0x240008d8

080124f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	88db      	ldrh	r3, [r3, #6]
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d004      	beq.n	801250c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012502:	6839      	ldr	r1, [r7, #0]
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f000 f8e2 	bl	80126ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801250a:	e023      	b.n	8012554 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012512:	b2db      	uxtb	r3, r3
 8012514:	2b02      	cmp	r3, #2
 8012516:	dc02      	bgt.n	801251e <USBD_GetConfig+0x2e>
 8012518:	2b00      	cmp	r3, #0
 801251a:	dc03      	bgt.n	8012524 <USBD_GetConfig+0x34>
 801251c:	e015      	b.n	801254a <USBD_GetConfig+0x5a>
 801251e:	2b03      	cmp	r3, #3
 8012520:	d00b      	beq.n	801253a <USBD_GetConfig+0x4a>
 8012522:	e012      	b.n	801254a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	3308      	adds	r3, #8
 801252e:	2201      	movs	r2, #1
 8012530:	4619      	mov	r1, r3
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f000 f948 	bl	80127c8 <USBD_CtlSendData>
        break;
 8012538:	e00c      	b.n	8012554 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	3304      	adds	r3, #4
 801253e:	2201      	movs	r2, #1
 8012540:	4619      	mov	r1, r3
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 f940 	bl	80127c8 <USBD_CtlSendData>
        break;
 8012548:	e004      	b.n	8012554 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801254a:	6839      	ldr	r1, [r7, #0]
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 f8be 	bl	80126ce <USBD_CtlError>
        break;
 8012552:	bf00      	nop
}
 8012554:	bf00      	nop
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801256c:	b2db      	uxtb	r3, r3
 801256e:	3b01      	subs	r3, #1
 8012570:	2b02      	cmp	r3, #2
 8012572:	d81e      	bhi.n	80125b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	88db      	ldrh	r3, [r3, #6]
 8012578:	2b02      	cmp	r3, #2
 801257a:	d004      	beq.n	8012586 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801257c:	6839      	ldr	r1, [r7, #0]
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f000 f8a5 	bl	80126ce <USBD_CtlError>
        break;
 8012584:	e01a      	b.n	80125bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2201      	movs	r2, #1
 801258a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012592:	2b00      	cmp	r3, #0
 8012594:	d005      	beq.n	80125a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	f043 0202 	orr.w	r2, r3, #2
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	330c      	adds	r3, #12
 80125a6:	2202      	movs	r2, #2
 80125a8:	4619      	mov	r1, r3
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f000 f90c 	bl	80127c8 <USBD_CtlSendData>
      break;
 80125b0:	e004      	b.n	80125bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80125b2:	6839      	ldr	r1, [r7, #0]
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 f88a 	bl	80126ce <USBD_CtlError>
      break;
 80125ba:	bf00      	nop
  }
}
 80125bc:	bf00      	nop
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	885b      	ldrh	r3, [r3, #2]
 80125d2:	2b01      	cmp	r3, #1
 80125d4:	d107      	bne.n	80125e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	2201      	movs	r2, #1
 80125da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f000 f92f 	bl	8012842 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80125e4:	e013      	b.n	801260e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	885b      	ldrh	r3, [r3, #2]
 80125ea:	2b02      	cmp	r3, #2
 80125ec:	d10b      	bne.n	8012606 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	889b      	ldrh	r3, [r3, #4]
 80125f2:	0a1b      	lsrs	r3, r3, #8
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	b2da      	uxtb	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 f91f 	bl	8012842 <USBD_CtlSendStatus>
}
 8012604:	e003      	b.n	801260e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 f860 	bl	80126ce <USBD_CtlError>
}
 801260e:	bf00      	nop
 8012610:	3708      	adds	r7, #8
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012616:	b580      	push	{r7, lr}
 8012618:	b082      	sub	sp, #8
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
 801261e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012626:	b2db      	uxtb	r3, r3
 8012628:	3b01      	subs	r3, #1
 801262a:	2b02      	cmp	r3, #2
 801262c:	d80b      	bhi.n	8012646 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	885b      	ldrh	r3, [r3, #2]
 8012632:	2b01      	cmp	r3, #1
 8012634:	d10c      	bne.n	8012650 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2200      	movs	r2, #0
 801263a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f000 f8ff 	bl	8012842 <USBD_CtlSendStatus>
      }
      break;
 8012644:	e004      	b.n	8012650 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012646:	6839      	ldr	r1, [r7, #0]
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 f840 	bl	80126ce <USBD_CtlError>
      break;
 801264e:	e000      	b.n	8012652 <USBD_ClrFeature+0x3c>
      break;
 8012650:	bf00      	nop
  }
}
 8012652:	bf00      	nop
 8012654:	3708      	adds	r7, #8
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}

0801265a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801265a:	b580      	push	{r7, lr}
 801265c:	b084      	sub	sp, #16
 801265e:	af00      	add	r7, sp, #0
 8012660:	6078      	str	r0, [r7, #4]
 8012662:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	781a      	ldrb	r2, [r3, #0]
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	3301      	adds	r3, #1
 8012674:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	781a      	ldrb	r2, [r3, #0]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	3301      	adds	r3, #1
 8012682:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012684:	68f8      	ldr	r0, [r7, #12]
 8012686:	f7ff fa17 	bl	8011ab8 <SWAPBYTE>
 801268a:	4603      	mov	r3, r0
 801268c:	461a      	mov	r2, r3
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	3301      	adds	r3, #1
 8012696:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	3301      	adds	r3, #1
 801269c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801269e:	68f8      	ldr	r0, [r7, #12]
 80126a0:	f7ff fa0a 	bl	8011ab8 <SWAPBYTE>
 80126a4:	4603      	mov	r3, r0
 80126a6:	461a      	mov	r2, r3
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	3301      	adds	r3, #1
 80126b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	3301      	adds	r3, #1
 80126b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80126b8:	68f8      	ldr	r0, [r7, #12]
 80126ba:	f7ff f9fd 	bl	8011ab8 <SWAPBYTE>
 80126be:	4603      	mov	r3, r0
 80126c0:	461a      	mov	r2, r3
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	80da      	strh	r2, [r3, #6]
}
 80126c6:	bf00      	nop
 80126c8:	3710      	adds	r7, #16
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}

080126ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126ce:	b580      	push	{r7, lr}
 80126d0:	b082      	sub	sp, #8
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
 80126d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80126d8:	2180      	movs	r1, #128	@ 0x80
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 fd49 	bl	8013172 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80126e0:	2100      	movs	r1, #0
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f000 fd45 	bl	8013172 <USBD_LL_StallEP>
}
 80126e8:	bf00      	nop
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b086      	sub	sp, #24
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80126fc:	2300      	movs	r3, #0
 80126fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d042      	beq.n	801278c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801270a:	6938      	ldr	r0, [r7, #16]
 801270c:	f000 f842 	bl	8012794 <USBD_GetLen>
 8012710:	4603      	mov	r3, r0
 8012712:	3301      	adds	r3, #1
 8012714:	005b      	lsls	r3, r3, #1
 8012716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801271a:	d808      	bhi.n	801272e <USBD_GetString+0x3e>
 801271c:	6938      	ldr	r0, [r7, #16]
 801271e:	f000 f839 	bl	8012794 <USBD_GetLen>
 8012722:	4603      	mov	r3, r0
 8012724:	3301      	adds	r3, #1
 8012726:	b29b      	uxth	r3, r3
 8012728:	005b      	lsls	r3, r3, #1
 801272a:	b29a      	uxth	r2, r3
 801272c:	e001      	b.n	8012732 <USBD_GetString+0x42>
 801272e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012736:	7dfb      	ldrb	r3, [r7, #23]
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	4413      	add	r3, r2
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	7812      	ldrb	r2, [r2, #0]
 8012740:	701a      	strb	r2, [r3, #0]
  idx++;
 8012742:	7dfb      	ldrb	r3, [r7, #23]
 8012744:	3301      	adds	r3, #1
 8012746:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012748:	7dfb      	ldrb	r3, [r7, #23]
 801274a:	68ba      	ldr	r2, [r7, #8]
 801274c:	4413      	add	r3, r2
 801274e:	2203      	movs	r2, #3
 8012750:	701a      	strb	r2, [r3, #0]
  idx++;
 8012752:	7dfb      	ldrb	r3, [r7, #23]
 8012754:	3301      	adds	r3, #1
 8012756:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012758:	e013      	b.n	8012782 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801275a:	7dfb      	ldrb	r3, [r7, #23]
 801275c:	68ba      	ldr	r2, [r7, #8]
 801275e:	4413      	add	r3, r2
 8012760:	693a      	ldr	r2, [r7, #16]
 8012762:	7812      	ldrb	r2, [r2, #0]
 8012764:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	3301      	adds	r3, #1
 801276a:	613b      	str	r3, [r7, #16]
    idx++;
 801276c:	7dfb      	ldrb	r3, [r7, #23]
 801276e:	3301      	adds	r3, #1
 8012770:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012772:	7dfb      	ldrb	r3, [r7, #23]
 8012774:	68ba      	ldr	r2, [r7, #8]
 8012776:	4413      	add	r3, r2
 8012778:	2200      	movs	r2, #0
 801277a:	701a      	strb	r2, [r3, #0]
    idx++;
 801277c:	7dfb      	ldrb	r3, [r7, #23]
 801277e:	3301      	adds	r3, #1
 8012780:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012782:	693b      	ldr	r3, [r7, #16]
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d1e7      	bne.n	801275a <USBD_GetString+0x6a>
 801278a:	e000      	b.n	801278e <USBD_GetString+0x9e>
    return;
 801278c:	bf00      	nop
  }
}
 801278e:	3718      	adds	r7, #24
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012794:	b480      	push	{r7}
 8012796:	b085      	sub	sp, #20
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801279c:	2300      	movs	r3, #0
 801279e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80127a4:	e005      	b.n	80127b2 <USBD_GetLen+0x1e>
  {
    len++;
 80127a6:	7bfb      	ldrb	r3, [r7, #15]
 80127a8:	3301      	adds	r3, #1
 80127aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	3301      	adds	r3, #1
 80127b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d1f5      	bne.n	80127a6 <USBD_GetLen+0x12>
  }

  return len;
 80127ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3714      	adds	r7, #20
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr

080127c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2202      	movs	r2, #2
 80127d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	68ba      	ldr	r2, [r7, #8]
 80127ec:	2100      	movs	r1, #0
 80127ee:	68f8      	ldr	r0, [r7, #12]
 80127f0:	f000 fd48 	bl	8013284 <USBD_LL_Transmit>

  return USBD_OK;
 80127f4:	2300      	movs	r3, #0
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3710      	adds	r7, #16
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}

080127fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80127fe:	b580      	push	{r7, lr}
 8012800:	b084      	sub	sp, #16
 8012802:	af00      	add	r7, sp, #0
 8012804:	60f8      	str	r0, [r7, #12]
 8012806:	60b9      	str	r1, [r7, #8]
 8012808:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	68ba      	ldr	r2, [r7, #8]
 801280e:	2100      	movs	r1, #0
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	f000 fd37 	bl	8013284 <USBD_LL_Transmit>

  return USBD_OK;
 8012816:	2300      	movs	r3, #0
}
 8012818:	4618      	mov	r0, r3
 801281a:	3710      	adds	r7, #16
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b084      	sub	sp, #16
 8012824:	af00      	add	r7, sp, #0
 8012826:	60f8      	str	r0, [r7, #12]
 8012828:	60b9      	str	r1, [r7, #8]
 801282a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	68ba      	ldr	r2, [r7, #8]
 8012830:	2100      	movs	r1, #0
 8012832:	68f8      	ldr	r0, [r7, #12]
 8012834:	f000 fd47 	bl	80132c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012838:	2300      	movs	r3, #0
}
 801283a:	4618      	mov	r0, r3
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}

08012842 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012842:	b580      	push	{r7, lr}
 8012844:	b082      	sub	sp, #8
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2204      	movs	r2, #4
 801284e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012852:	2300      	movs	r3, #0
 8012854:	2200      	movs	r2, #0
 8012856:	2100      	movs	r1, #0
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f000 fd13 	bl	8013284 <USBD_LL_Transmit>

  return USBD_OK;
 801285e:	2300      	movs	r3, #0
}
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2205      	movs	r2, #5
 8012874:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012878:	2300      	movs	r3, #0
 801287a:	2200      	movs	r2, #0
 801287c:	2100      	movs	r1, #0
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f000 fd21 	bl	80132c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012884:	2300      	movs	r3, #0
}
 8012886:	4618      	mov	r0, r3
 8012888:	3708      	adds	r7, #8
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
	...

08012890 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012890:	b480      	push	{r7}
 8012892:	b087      	sub	sp, #28
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	4613      	mov	r3, r2
 801289c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801289e:	2301      	movs	r3, #1
 80128a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80128a2:	2300      	movs	r3, #0
 80128a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80128a6:	4b1f      	ldr	r3, [pc, #124]	@ (8012924 <FATFS_LinkDriverEx+0x94>)
 80128a8:	7a5b      	ldrb	r3, [r3, #9]
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d131      	bne.n	8012914 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80128b0:	4b1c      	ldr	r3, [pc, #112]	@ (8012924 <FATFS_LinkDriverEx+0x94>)
 80128b2:	7a5b      	ldrb	r3, [r3, #9]
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	461a      	mov	r2, r3
 80128b8:	4b1a      	ldr	r3, [pc, #104]	@ (8012924 <FATFS_LinkDriverEx+0x94>)
 80128ba:	2100      	movs	r1, #0
 80128bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80128be:	4b19      	ldr	r3, [pc, #100]	@ (8012924 <FATFS_LinkDriverEx+0x94>)
 80128c0:	7a5b      	ldrb	r3, [r3, #9]
 80128c2:	b2db      	uxtb	r3, r3
 80128c4:	4a17      	ldr	r2, [pc, #92]	@ (8012924 <FATFS_LinkDriverEx+0x94>)
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	4413      	add	r3, r2
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80128ce:	4b15      	ldr	r3, [pc, #84]	@ (8012924 <FATFS_LinkDriverEx+0x94>)
 80128d0:	7a5b      	ldrb	r3, [r3, #9]
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	461a      	mov	r2, r3
 80128d6:	4b13      	ldr	r3, [pc, #76]	@ (8012924 <FATFS_LinkDriverEx+0x94>)
 80128d8:	4413      	add	r3, r2
 80128da:	79fa      	ldrb	r2, [r7, #7]
 80128dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80128de:	4b11      	ldr	r3, [pc, #68]	@ (8012924 <FATFS_LinkDriverEx+0x94>)
 80128e0:	7a5b      	ldrb	r3, [r3, #9]
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	1c5a      	adds	r2, r3, #1
 80128e6:	b2d1      	uxtb	r1, r2
 80128e8:	4a0e      	ldr	r2, [pc, #56]	@ (8012924 <FATFS_LinkDriverEx+0x94>)
 80128ea:	7251      	strb	r1, [r2, #9]
 80128ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80128ee:	7dbb      	ldrb	r3, [r7, #22]
 80128f0:	3330      	adds	r3, #48	@ 0x30
 80128f2:	b2da      	uxtb	r2, r3
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	3301      	adds	r3, #1
 80128fc:	223a      	movs	r2, #58	@ 0x3a
 80128fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	3302      	adds	r3, #2
 8012904:	222f      	movs	r2, #47	@ 0x2f
 8012906:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	3303      	adds	r3, #3
 801290c:	2200      	movs	r2, #0
 801290e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012910:	2300      	movs	r3, #0
 8012912:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012914:	7dfb      	ldrb	r3, [r7, #23]
}
 8012916:	4618      	mov	r0, r3
 8012918:	371c      	adds	r7, #28
 801291a:	46bd      	mov	sp, r7
 801291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012920:	4770      	bx	lr
 8012922:	bf00      	nop
 8012924:	240008dc 	.word	0x240008dc

08012928 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012932:	2200      	movs	r2, #0
 8012934:	6839      	ldr	r1, [r7, #0]
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7ff ffaa 	bl	8012890 <FATFS_LinkDriverEx>
 801293c:	4603      	mov	r3, r0
}
 801293e:	4618      	mov	r0, r3
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
	...

08012948 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801294c:	2200      	movs	r2, #0
 801294e:	4913      	ldr	r1, [pc, #76]	@ (801299c <MX_USB_DEVICE_Init+0x54>)
 8012950:	4813      	ldr	r0, [pc, #76]	@ (80129a0 <MX_USB_DEVICE_Init+0x58>)
 8012952:	f7fe fc8e 	bl	8011272 <USBD_Init>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d001      	beq.n	8012960 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801295c:	f7ef f846 	bl	80019ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8012960:	4910      	ldr	r1, [pc, #64]	@ (80129a4 <MX_USB_DEVICE_Init+0x5c>)
 8012962:	480f      	ldr	r0, [pc, #60]	@ (80129a0 <MX_USB_DEVICE_Init+0x58>)
 8012964:	f7fe fcb5 	bl	80112d2 <USBD_RegisterClass>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d001      	beq.n	8012972 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801296e:	f7ef f83d 	bl	80019ec <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8012972:	490d      	ldr	r1, [pc, #52]	@ (80129a8 <MX_USB_DEVICE_Init+0x60>)
 8012974:	480a      	ldr	r0, [pc, #40]	@ (80129a0 <MX_USB_DEVICE_Init+0x58>)
 8012976:	f7fc ff33 	bl	800f7e0 <USBD_MSC_RegisterStorage>
 801297a:	4603      	mov	r3, r0
 801297c:	2b00      	cmp	r3, #0
 801297e:	d001      	beq.n	8012984 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012980:	f7ef f834 	bl	80019ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012984:	4806      	ldr	r0, [pc, #24]	@ (80129a0 <MX_USB_DEVICE_Init+0x58>)
 8012986:	f7fe fcda 	bl	801133e <USBD_Start>
 801298a:	4603      	mov	r3, r0
 801298c:	2b00      	cmp	r3, #0
 801298e:	d001      	beq.n	8012994 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012990:	f7ef f82c 	bl	80019ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012994:	f7f2 fa40 	bl	8004e18 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012998:	bf00      	nop
 801299a:	bd80      	pop	{r7, pc}
 801299c:	240000ac 	.word	0x240000ac
 80129a0:	240008e8 	.word	0x240008e8
 80129a4:	2400002c 	.word	0x2400002c
 80129a8:	24000100 	.word	0x24000100

080129ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	4603      	mov	r3, r0
 80129b4:	6039      	str	r1, [r7, #0]
 80129b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	2212      	movs	r2, #18
 80129bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80129be:	4b03      	ldr	r3, [pc, #12]	@ (80129cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	370c      	adds	r7, #12
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr
 80129cc:	240000cc 	.word	0x240000cc

080129d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129d0:	b480      	push	{r7}
 80129d2:	b083      	sub	sp, #12
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	4603      	mov	r3, r0
 80129d8:	6039      	str	r1, [r7, #0]
 80129da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	2204      	movs	r2, #4
 80129e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80129e2:	4b03      	ldr	r3, [pc, #12]	@ (80129f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	370c      	adds	r7, #12
 80129e8:	46bd      	mov	sp, r7
 80129ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ee:	4770      	bx	lr
 80129f0:	240000e0 	.word	0x240000e0

080129f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	4603      	mov	r3, r0
 80129fc:	6039      	str	r1, [r7, #0]
 80129fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012a00:	79fb      	ldrb	r3, [r7, #7]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d105      	bne.n	8012a12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012a06:	683a      	ldr	r2, [r7, #0]
 8012a08:	4907      	ldr	r1, [pc, #28]	@ (8012a28 <USBD_FS_ProductStrDescriptor+0x34>)
 8012a0a:	4808      	ldr	r0, [pc, #32]	@ (8012a2c <USBD_FS_ProductStrDescriptor+0x38>)
 8012a0c:	f7ff fe70 	bl	80126f0 <USBD_GetString>
 8012a10:	e004      	b.n	8012a1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012a12:	683a      	ldr	r2, [r7, #0]
 8012a14:	4904      	ldr	r1, [pc, #16]	@ (8012a28 <USBD_FS_ProductStrDescriptor+0x34>)
 8012a16:	4805      	ldr	r0, [pc, #20]	@ (8012a2c <USBD_FS_ProductStrDescriptor+0x38>)
 8012a18:	f7ff fe6a 	bl	80126f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a1c:	4b02      	ldr	r3, [pc, #8]	@ (8012a28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop
 8012a28:	24000bc4 	.word	0x24000bc4
 8012a2c:	08015d90 	.word	0x08015d90

08012a30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b082      	sub	sp, #8
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	4603      	mov	r3, r0
 8012a38:	6039      	str	r1, [r7, #0]
 8012a3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012a3c:	683a      	ldr	r2, [r7, #0]
 8012a3e:	4904      	ldr	r1, [pc, #16]	@ (8012a50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012a40:	4804      	ldr	r0, [pc, #16]	@ (8012a54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012a42:	f7ff fe55 	bl	80126f0 <USBD_GetString>
  return USBD_StrDesc;
 8012a46:	4b02      	ldr	r3, [pc, #8]	@ (8012a50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3708      	adds	r7, #8
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	24000bc4 	.word	0x24000bc4
 8012a54:	08015da4 	.word	0x08015da4

08012a58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	4603      	mov	r3, r0
 8012a60:	6039      	str	r1, [r7, #0]
 8012a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	221a      	movs	r2, #26
 8012a68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012a6a:	f000 f843 	bl	8012af4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012a6e:	4b02      	ldr	r3, [pc, #8]	@ (8012a78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3708      	adds	r7, #8
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	240000e4 	.word	0x240000e4

08012a7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b082      	sub	sp, #8
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	4603      	mov	r3, r0
 8012a84:	6039      	str	r1, [r7, #0]
 8012a86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012a88:	79fb      	ldrb	r3, [r7, #7]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d105      	bne.n	8012a9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012a8e:	683a      	ldr	r2, [r7, #0]
 8012a90:	4907      	ldr	r1, [pc, #28]	@ (8012ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012a92:	4808      	ldr	r0, [pc, #32]	@ (8012ab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012a94:	f7ff fe2c 	bl	80126f0 <USBD_GetString>
 8012a98:	e004      	b.n	8012aa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012a9a:	683a      	ldr	r2, [r7, #0]
 8012a9c:	4904      	ldr	r1, [pc, #16]	@ (8012ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012a9e:	4805      	ldr	r0, [pc, #20]	@ (8012ab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012aa0:	f7ff fe26 	bl	80126f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012aa4:	4b02      	ldr	r3, [pc, #8]	@ (8012ab0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3708      	adds	r7, #8
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	24000bc4 	.word	0x24000bc4
 8012ab4:	08015db8 	.word	0x08015db8

08012ab8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	4603      	mov	r3, r0
 8012ac0:	6039      	str	r1, [r7, #0]
 8012ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ac4:	79fb      	ldrb	r3, [r7, #7]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d105      	bne.n	8012ad6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012aca:	683a      	ldr	r2, [r7, #0]
 8012acc:	4907      	ldr	r1, [pc, #28]	@ (8012aec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012ace:	4808      	ldr	r0, [pc, #32]	@ (8012af0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012ad0:	f7ff fe0e 	bl	80126f0 <USBD_GetString>
 8012ad4:	e004      	b.n	8012ae0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012ad6:	683a      	ldr	r2, [r7, #0]
 8012ad8:	4904      	ldr	r1, [pc, #16]	@ (8012aec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012ada:	4805      	ldr	r0, [pc, #20]	@ (8012af0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012adc:	f7ff fe08 	bl	80126f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ae0:	4b02      	ldr	r3, [pc, #8]	@ (8012aec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3708      	adds	r7, #8
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	24000bc4 	.word	0x24000bc4
 8012af0:	08015dc4 	.word	0x08015dc4

08012af4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012afa:	4b0f      	ldr	r3, [pc, #60]	@ (8012b38 <Get_SerialNum+0x44>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012b00:	4b0e      	ldr	r3, [pc, #56]	@ (8012b3c <Get_SerialNum+0x48>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012b06:	4b0e      	ldr	r3, [pc, #56]	@ (8012b40 <Get_SerialNum+0x4c>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012b0c:	68fa      	ldr	r2, [r7, #12]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4413      	add	r3, r2
 8012b12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d009      	beq.n	8012b2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012b1a:	2208      	movs	r2, #8
 8012b1c:	4909      	ldr	r1, [pc, #36]	@ (8012b44 <Get_SerialNum+0x50>)
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	f000 f814 	bl	8012b4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012b24:	2204      	movs	r2, #4
 8012b26:	4908      	ldr	r1, [pc, #32]	@ (8012b48 <Get_SerialNum+0x54>)
 8012b28:	68b8      	ldr	r0, [r7, #8]
 8012b2a:	f000 f80f 	bl	8012b4c <IntToUnicode>
  }
}
 8012b2e:	bf00      	nop
 8012b30:	3710      	adds	r7, #16
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
 8012b36:	bf00      	nop
 8012b38:	1ff1e800 	.word	0x1ff1e800
 8012b3c:	1ff1e804 	.word	0x1ff1e804
 8012b40:	1ff1e808 	.word	0x1ff1e808
 8012b44:	240000e6 	.word	0x240000e6
 8012b48:	240000f6 	.word	0x240000f6

08012b4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b087      	sub	sp, #28
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	60f8      	str	r0, [r7, #12]
 8012b54:	60b9      	str	r1, [r7, #8]
 8012b56:	4613      	mov	r3, r2
 8012b58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012b5e:	2300      	movs	r3, #0
 8012b60:	75fb      	strb	r3, [r7, #23]
 8012b62:	e027      	b.n	8012bb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	0f1b      	lsrs	r3, r3, #28
 8012b68:	2b09      	cmp	r3, #9
 8012b6a:	d80b      	bhi.n	8012b84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	0f1b      	lsrs	r3, r3, #28
 8012b70:	b2da      	uxtb	r2, r3
 8012b72:	7dfb      	ldrb	r3, [r7, #23]
 8012b74:	005b      	lsls	r3, r3, #1
 8012b76:	4619      	mov	r1, r3
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	440b      	add	r3, r1
 8012b7c:	3230      	adds	r2, #48	@ 0x30
 8012b7e:	b2d2      	uxtb	r2, r2
 8012b80:	701a      	strb	r2, [r3, #0]
 8012b82:	e00a      	b.n	8012b9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	0f1b      	lsrs	r3, r3, #28
 8012b88:	b2da      	uxtb	r2, r3
 8012b8a:	7dfb      	ldrb	r3, [r7, #23]
 8012b8c:	005b      	lsls	r3, r3, #1
 8012b8e:	4619      	mov	r1, r3
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	440b      	add	r3, r1
 8012b94:	3237      	adds	r2, #55	@ 0x37
 8012b96:	b2d2      	uxtb	r2, r2
 8012b98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	011b      	lsls	r3, r3, #4
 8012b9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012ba0:	7dfb      	ldrb	r3, [r7, #23]
 8012ba2:	005b      	lsls	r3, r3, #1
 8012ba4:	3301      	adds	r3, #1
 8012ba6:	68ba      	ldr	r2, [r7, #8]
 8012ba8:	4413      	add	r3, r2
 8012baa:	2200      	movs	r2, #0
 8012bac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012bae:	7dfb      	ldrb	r3, [r7, #23]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	75fb      	strb	r3, [r7, #23]
 8012bb4:	7dfa      	ldrb	r2, [r7, #23]
 8012bb6:	79fb      	ldrb	r3, [r7, #7]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d3d3      	bcc.n	8012b64 <IntToUnicode+0x18>
  }
}
 8012bbc:	bf00      	nop
 8012bbe:	bf00      	nop
 8012bc0:	371c      	adds	r7, #28
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc8:	4770      	bx	lr

08012bca <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8012bca:	b480      	push	{r7}
 8012bcc:	b083      	sub	sp, #12
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8012bd4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	370c      	adds	r7, #12
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be0:	4770      	bx	lr
	...

08012be4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b08e      	sub	sp, #56	@ 0x38
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	4603      	mov	r3, r0
 8012bec:	60b9      	str	r1, [r7, #8]
 8012bee:	607a      	str	r2, [r7, #4]
 8012bf0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
    HAL_SD_CardInfoTypeDef info;
    int8_t ret = -1;
 8012bf2:	23ff      	movs	r3, #255	@ 0xff
 8012bf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Retrieve the card info
    if (HAL_SD_GetCardInfo(&hsd1, &info) == HAL_OK)
 8012bf8:	f107 0310 	add.w	r3, r7, #16
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	480b      	ldr	r0, [pc, #44]	@ (8012c2c <STORAGE_GetCapacity_FS+0x48>)
 8012c00:	f7f6 fcc4 	bl	800958c <HAL_SD_GetCardInfo>
 8012c04:	4603      	mov	r3, r0
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d10a      	bne.n	8012c20 <STORAGE_GetCapacity_FS+0x3c>
    {
        // Ensure the correct values are returned
        *block_num = info.LogBlockNbr - 1;
 8012c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c0c:	1e5a      	subs	r2, r3, #1
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	601a      	str	r2, [r3, #0]
        *block_size = info.LogBlockSize;
 8012c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	801a      	strh	r2, [r3, #0]
        ret = USBD_OK;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return ret;
 8012c20:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3738      	adds	r7, #56	@ 0x38
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}
 8012c2c:	24000648 	.word	0x24000648

08012c30 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	4603      	mov	r3, r0
 8012c38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 8012c3a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	4603      	mov	r3, r0
 8012c50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8012c52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	370c      	adds	r7, #12
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr

08012c60 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b088      	sub	sp, #32
 8012c64:	af02      	add	r7, sp, #8
 8012c66:	60b9      	str	r1, [r7, #8]
 8012c68:	607a      	str	r2, [r7, #4]
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	73fb      	strb	r3, [r7, #15]
 8012c70:	4613      	mov	r3, r2
 8012c72:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 8012c74:	23ff      	movs	r3, #255	@ 0xff
 8012c76:	75fb      	strb	r3, [r7, #23]

	  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8012c78:	89bb      	ldrh	r3, [r7, #12]
 8012c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c7e:	9200      	str	r2, [sp, #0]
 8012c80:	687a      	ldr	r2, [r7, #4]
 8012c82:	68b9      	ldr	r1, [r7, #8]
 8012c84:	4808      	ldr	r0, [pc, #32]	@ (8012ca8 <STORAGE_Read_FS+0x48>)
 8012c86:	f7f5 ff07 	bl	8008a98 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8012c8a:	bf00      	nop
 8012c8c:	4806      	ldr	r0, [pc, #24]	@ (8012ca8 <STORAGE_Read_FS+0x48>)
 8012c8e:	f7f6 fdbb 	bl	8009808 <HAL_SD_GetCardState>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b04      	cmp	r3, #4
 8012c96:	d1f9      	bne.n	8012c8c <STORAGE_Read_FS+0x2c>
	  ret = 0;
 8012c98:	2300      	movs	r3, #0
 8012c9a:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8012c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3718      	adds	r7, #24
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	24000648 	.word	0x24000648

08012cac <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b088      	sub	sp, #32
 8012cb0:	af02      	add	r7, sp, #8
 8012cb2:	60b9      	str	r1, [r7, #8]
 8012cb4:	607a      	str	r2, [r7, #4]
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	4603      	mov	r3, r0
 8012cba:	73fb      	strb	r3, [r7, #15]
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	  int8_t ret = -1;
 8012cc0:	23ff      	movs	r3, #255	@ 0xff
 8012cc2:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8012cc4:	89bb      	ldrh	r3, [r7, #12]
 8012cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cca:	9200      	str	r2, [sp, #0]
 8012ccc:	687a      	ldr	r2, [r7, #4]
 8012cce:	68b9      	ldr	r1, [r7, #8]
 8012cd0:	4808      	ldr	r0, [pc, #32]	@ (8012cf4 <STORAGE_Write_FS+0x48>)
 8012cd2:	f7f6 f86b 	bl	8008dac <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8012cd6:	bf00      	nop
 8012cd8:	4806      	ldr	r0, [pc, #24]	@ (8012cf4 <STORAGE_Write_FS+0x48>)
 8012cda:	f7f6 fd95 	bl	8009808 <HAL_SD_GetCardState>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b04      	cmp	r3, #4
 8012ce2:	d1f9      	bne.n	8012cd8 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8012ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3718      	adds	r7, #24
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	24000648 	.word	0x24000648

08012cf8 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8012cfc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b0ba      	sub	sp, #232	@ 0xe8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012d10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012d14:	2200      	movs	r2, #0
 8012d16:	601a      	str	r2, [r3, #0]
 8012d18:	605a      	str	r2, [r3, #4]
 8012d1a:	609a      	str	r2, [r3, #8]
 8012d1c:	60da      	str	r2, [r3, #12]
 8012d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012d20:	f107 0310 	add.w	r3, r7, #16
 8012d24:	22c0      	movs	r2, #192	@ 0xc0
 8012d26:	2100      	movs	r1, #0
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f001 f987 	bl	801403c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	4a2c      	ldr	r2, [pc, #176]	@ (8012de4 <HAL_PCD_MspInit+0xdc>)
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d151      	bne.n	8012ddc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012d38:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8012d3c:	f04f 0300 	mov.w	r3, #0
 8012d40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012d44:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8012d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012d4c:	f107 0310 	add.w	r3, r7, #16
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7f3 f883 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d001      	beq.n	8012d60 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8012d5c:	f7ee fe46 	bl	80019ec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012d60:	f7f2 f85a 	bl	8004e18 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012d64:	4b20      	ldr	r3, [pc, #128]	@ (8012de8 <HAL_PCD_MspInit+0xe0>)
 8012d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8012de8 <HAL_PCD_MspInit+0xe0>)
 8012d6c:	f043 0301 	orr.w	r3, r3, #1
 8012d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012d74:	4b1c      	ldr	r3, [pc, #112]	@ (8012de8 <HAL_PCD_MspInit+0xe0>)
 8012d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012d7a:	f003 0301 	and.w	r3, r3, #1
 8012d7e:	60fb      	str	r3, [r7, #12]
 8012d80:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012d82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d8a:	2302      	movs	r3, #2
 8012d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d90:	2300      	movs	r3, #0
 8012d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d96:	2300      	movs	r3, #0
 8012d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012d9c:	230a      	movs	r3, #10
 8012d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012da2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012da6:	4619      	mov	r1, r3
 8012da8:	4810      	ldr	r0, [pc, #64]	@ (8012dec <HAL_PCD_MspInit+0xe4>)
 8012daa:	f7ef fd67 	bl	800287c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012dae:	4b0e      	ldr	r3, [pc, #56]	@ (8012de8 <HAL_PCD_MspInit+0xe0>)
 8012db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012db4:	4a0c      	ldr	r2, [pc, #48]	@ (8012de8 <HAL_PCD_MspInit+0xe0>)
 8012db6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012dba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8012dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8012de8 <HAL_PCD_MspInit+0xe0>)
 8012dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012dc8:	60bb      	str	r3, [r7, #8]
 8012dca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012dcc:	2200      	movs	r2, #0
 8012dce:	2100      	movs	r1, #0
 8012dd0:	2065      	movs	r0, #101	@ 0x65
 8012dd2:	f7ef fca6 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012dd6:	2065      	movs	r0, #101	@ 0x65
 8012dd8:	f7ef fcbd 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012ddc:	bf00      	nop
 8012dde:	37e8      	adds	r7, #232	@ 0xe8
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	40080000 	.word	0x40080000
 8012de8:	58024400 	.word	0x58024400
 8012dec:	58020000 	.word	0x58020000

08012df0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012e04:	4619      	mov	r1, r3
 8012e06:	4610      	mov	r0, r2
 8012e08:	f7fe fae6 	bl	80113d8 <USBD_LL_SetupStage>
}
 8012e0c:	bf00      	nop
 8012e0e:	3708      	adds	r7, #8
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012e26:	78fa      	ldrb	r2, [r7, #3]
 8012e28:	6879      	ldr	r1, [r7, #4]
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	00db      	lsls	r3, r3, #3
 8012e2e:	4413      	add	r3, r2
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	440b      	add	r3, r1
 8012e34:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012e38:	681a      	ldr	r2, [r3, #0]
 8012e3a:	78fb      	ldrb	r3, [r7, #3]
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	f7fe fb20 	bl	8011482 <USBD_LL_DataOutStage>
}
 8012e42:	bf00      	nop
 8012e44:	3708      	adds	r7, #8
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}

08012e4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e4a:	b580      	push	{r7, lr}
 8012e4c:	b082      	sub	sp, #8
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
 8012e52:	460b      	mov	r3, r1
 8012e54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012e5c:	78fa      	ldrb	r2, [r7, #3]
 8012e5e:	6879      	ldr	r1, [r7, #4]
 8012e60:	4613      	mov	r3, r2
 8012e62:	00db      	lsls	r3, r3, #3
 8012e64:	4413      	add	r3, r2
 8012e66:	009b      	lsls	r3, r3, #2
 8012e68:	440b      	add	r3, r1
 8012e6a:	3320      	adds	r3, #32
 8012e6c:	681a      	ldr	r2, [r3, #0]
 8012e6e:	78fb      	ldrb	r3, [r7, #3]
 8012e70:	4619      	mov	r1, r3
 8012e72:	f7fe fbb9 	bl	80115e8 <USBD_LL_DataInStage>
}
 8012e76:	bf00      	nop
 8012e78:	3708      	adds	r7, #8
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}

08012e7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7fe fcf3 	bl	8011878 <USBD_LL_SOF>
}
 8012e92:	bf00      	nop
 8012e94:	3708      	adds	r7, #8
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}

08012e9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e9a:	b580      	push	{r7, lr}
 8012e9c:	b084      	sub	sp, #16
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	79db      	ldrb	r3, [r3, #7]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d102      	bne.n	8012eb4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	73fb      	strb	r3, [r7, #15]
 8012eb2:	e008      	b.n	8012ec6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	79db      	ldrb	r3, [r3, #7]
 8012eb8:	2b02      	cmp	r3, #2
 8012eba:	d102      	bne.n	8012ec2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	73fb      	strb	r3, [r7, #15]
 8012ec0:	e001      	b.n	8012ec6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012ec2:	f7ee fd93 	bl	80019ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012ecc:	7bfa      	ldrb	r2, [r7, #15]
 8012ece:	4611      	mov	r1, r2
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7fe fc8d 	bl	80117f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7fe fc35 	bl	801174c <USBD_LL_Reset>
}
 8012ee2:	bf00      	nop
 8012ee4:	3710      	adds	r7, #16
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
	...

08012eec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7fe fc88 	bl	8011810 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	687a      	ldr	r2, [r7, #4]
 8012f0c:	6812      	ldr	r2, [r2, #0]
 8012f0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012f12:	f043 0301 	orr.w	r3, r3, #1
 8012f16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	7adb      	ldrb	r3, [r3, #11]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d005      	beq.n	8012f2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012f20:	4b04      	ldr	r3, [pc, #16]	@ (8012f34 <HAL_PCD_SuspendCallback+0x48>)
 8012f22:	691b      	ldr	r3, [r3, #16]
 8012f24:	4a03      	ldr	r2, [pc, #12]	@ (8012f34 <HAL_PCD_SuspendCallback+0x48>)
 8012f26:	f043 0306 	orr.w	r3, r3, #6
 8012f2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012f2c:	bf00      	nop
 8012f2e:	3708      	adds	r7, #8
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}
 8012f34:	e000ed00 	.word	0xe000ed00

08012f38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7fe fc7e 	bl	8011848 <USBD_LL_Resume>
}
 8012f4c:	bf00      	nop
 8012f4e:	3708      	adds	r7, #8
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}

08012f54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012f66:	78fa      	ldrb	r2, [r7, #3]
 8012f68:	4611      	mov	r1, r2
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fe fcd6 	bl	801191c <USBD_LL_IsoOUTIncomplete>
}
 8012f70:	bf00      	nop
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012f8a:	78fa      	ldrb	r2, [r7, #3]
 8012f8c:	4611      	mov	r1, r2
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe fc92 	bl	80118b8 <USBD_LL_IsoINIncomplete>
}
 8012f94:	bf00      	nop
 8012f96:	3708      	adds	r7, #8
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7fe fce8 	bl	8011980 <USBD_LL_DevConnected>
}
 8012fb0:	bf00      	nop
 8012fb2:	3708      	adds	r7, #8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7fe fce5 	bl	8011996 <USBD_LL_DevDisconnected>
}
 8012fcc:	bf00      	nop
 8012fce:	3708      	adds	r7, #8
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d13e      	bne.n	8013062 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012fe4:	4a21      	ldr	r2, [pc, #132]	@ (801306c <USBD_LL_Init+0x98>)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	4a1f      	ldr	r2, [pc, #124]	@ (801306c <USBD_LL_Init+0x98>)
 8012ff0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012ff4:	4b1d      	ldr	r3, [pc, #116]	@ (801306c <USBD_LL_Init+0x98>)
 8012ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8013070 <USBD_LL_Init+0x9c>)
 8012ff8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012ffa:	4b1c      	ldr	r3, [pc, #112]	@ (801306c <USBD_LL_Init+0x98>)
 8012ffc:	2209      	movs	r2, #9
 8012ffe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013000:	4b1a      	ldr	r3, [pc, #104]	@ (801306c <USBD_LL_Init+0x98>)
 8013002:	2202      	movs	r2, #2
 8013004:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013006:	4b19      	ldr	r3, [pc, #100]	@ (801306c <USBD_LL_Init+0x98>)
 8013008:	2200      	movs	r2, #0
 801300a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801300c:	4b17      	ldr	r3, [pc, #92]	@ (801306c <USBD_LL_Init+0x98>)
 801300e:	2202      	movs	r2, #2
 8013010:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013012:	4b16      	ldr	r3, [pc, #88]	@ (801306c <USBD_LL_Init+0x98>)
 8013014:	2200      	movs	r2, #0
 8013016:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013018:	4b14      	ldr	r3, [pc, #80]	@ (801306c <USBD_LL_Init+0x98>)
 801301a:	2200      	movs	r2, #0
 801301c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801301e:	4b13      	ldr	r3, [pc, #76]	@ (801306c <USBD_LL_Init+0x98>)
 8013020:	2200      	movs	r2, #0
 8013022:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8013024:	4b11      	ldr	r3, [pc, #68]	@ (801306c <USBD_LL_Init+0x98>)
 8013026:	2200      	movs	r2, #0
 8013028:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801302a:	4b10      	ldr	r3, [pc, #64]	@ (801306c <USBD_LL_Init+0x98>)
 801302c:	2200      	movs	r2, #0
 801302e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013030:	4b0e      	ldr	r3, [pc, #56]	@ (801306c <USBD_LL_Init+0x98>)
 8013032:	2200      	movs	r2, #0
 8013034:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013036:	480d      	ldr	r0, [pc, #52]	@ (801306c <USBD_LL_Init+0x98>)
 8013038:	f7f0 fbe9 	bl	800380e <HAL_PCD_Init>
 801303c:	4603      	mov	r3, r0
 801303e:	2b00      	cmp	r3, #0
 8013040:	d001      	beq.n	8013046 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8013042:	f7ee fcd3 	bl	80019ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013046:	2180      	movs	r1, #128	@ 0x80
 8013048:	4808      	ldr	r0, [pc, #32]	@ (801306c <USBD_LL_Init+0x98>)
 801304a:	f7f1 fe6a 	bl	8004d22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801304e:	2240      	movs	r2, #64	@ 0x40
 8013050:	2100      	movs	r1, #0
 8013052:	4806      	ldr	r0, [pc, #24]	@ (801306c <USBD_LL_Init+0x98>)
 8013054:	f7f1 fe1e 	bl	8004c94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013058:	2280      	movs	r2, #128	@ 0x80
 801305a:	2101      	movs	r1, #1
 801305c:	4803      	ldr	r0, [pc, #12]	@ (801306c <USBD_LL_Init+0x98>)
 801305e:	f7f1 fe19 	bl	8004c94 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8013062:	2300      	movs	r3, #0
}
 8013064:	4618      	mov	r0, r3
 8013066:	3708      	adds	r7, #8
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}
 801306c:	24000dc4 	.word	0x24000dc4
 8013070:	40080000 	.word	0x40080000

08013074 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801307c:	2300      	movs	r3, #0
 801307e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013080:	2300      	movs	r3, #0
 8013082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801308a:	4618      	mov	r0, r3
 801308c:	f7f0 fccb 	bl	8003a26 <HAL_PCD_Start>
 8013090:	4603      	mov	r3, r0
 8013092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013094:	7bfb      	ldrb	r3, [r7, #15]
 8013096:	4618      	mov	r0, r3
 8013098:	f000 f962 	bl	8013360 <USBD_Get_USB_Status>
 801309c:	4603      	mov	r3, r0
 801309e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3710      	adds	r7, #16
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}

080130aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b084      	sub	sp, #16
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	6078      	str	r0, [r7, #4]
 80130b2:	4608      	mov	r0, r1
 80130b4:	4611      	mov	r1, r2
 80130b6:	461a      	mov	r2, r3
 80130b8:	4603      	mov	r3, r0
 80130ba:	70fb      	strb	r3, [r7, #3]
 80130bc:	460b      	mov	r3, r1
 80130be:	70bb      	strb	r3, [r7, #2]
 80130c0:	4613      	mov	r3, r2
 80130c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130c4:	2300      	movs	r3, #0
 80130c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130c8:	2300      	movs	r3, #0
 80130ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80130d2:	78bb      	ldrb	r3, [r7, #2]
 80130d4:	883a      	ldrh	r2, [r7, #0]
 80130d6:	78f9      	ldrb	r1, [r7, #3]
 80130d8:	f7f1 f9cc 	bl	8004474 <HAL_PCD_EP_Open>
 80130dc:	4603      	mov	r3, r0
 80130de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130e0:	7bfb      	ldrb	r3, [r7, #15]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f000 f93c 	bl	8013360 <USBD_Get_USB_Status>
 80130e8:	4603      	mov	r3, r0
 80130ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3710      	adds	r7, #16
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}

080130f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80130f6:	b580      	push	{r7, lr}
 80130f8:	b084      	sub	sp, #16
 80130fa:	af00      	add	r7, sp, #0
 80130fc:	6078      	str	r0, [r7, #4]
 80130fe:	460b      	mov	r3, r1
 8013100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013102:	2300      	movs	r3, #0
 8013104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013106:	2300      	movs	r3, #0
 8013108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013110:	78fa      	ldrb	r2, [r7, #3]
 8013112:	4611      	mov	r1, r2
 8013114:	4618      	mov	r0, r3
 8013116:	f7f1 fa15 	bl	8004544 <HAL_PCD_EP_Close>
 801311a:	4603      	mov	r3, r0
 801311c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801311e:	7bfb      	ldrb	r3, [r7, #15]
 8013120:	4618      	mov	r0, r3
 8013122:	f000 f91d 	bl	8013360 <USBD_Get_USB_Status>
 8013126:	4603      	mov	r3, r0
 8013128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801312a:	7bbb      	ldrb	r3, [r7, #14]
}
 801312c:	4618      	mov	r0, r3
 801312e:	3710      	adds	r7, #16
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}

08013134 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b084      	sub	sp, #16
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	460b      	mov	r3, r1
 801313e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013140:	2300      	movs	r3, #0
 8013142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013144:	2300      	movs	r3, #0
 8013146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801314e:	78fa      	ldrb	r2, [r7, #3]
 8013150:	4611      	mov	r1, r2
 8013152:	4618      	mov	r0, r3
 8013154:	f7f1 fbb7 	bl	80048c6 <HAL_PCD_EP_Flush>
 8013158:	4603      	mov	r3, r0
 801315a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801315c:	7bfb      	ldrb	r3, [r7, #15]
 801315e:	4618      	mov	r0, r3
 8013160:	f000 f8fe 	bl	8013360 <USBD_Get_USB_Status>
 8013164:	4603      	mov	r3, r0
 8013166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013168:	7bbb      	ldrb	r3, [r7, #14]
}
 801316a:	4618      	mov	r0, r3
 801316c:	3710      	adds	r7, #16
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b084      	sub	sp, #16
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	460b      	mov	r3, r1
 801317c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801317e:	2300      	movs	r3, #0
 8013180:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013182:	2300      	movs	r3, #0
 8013184:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801318c:	78fa      	ldrb	r2, [r7, #3]
 801318e:	4611      	mov	r1, r2
 8013190:	4618      	mov	r0, r3
 8013192:	f7f1 faae 	bl	80046f2 <HAL_PCD_EP_SetStall>
 8013196:	4603      	mov	r3, r0
 8013198:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801319a:	7bfb      	ldrb	r3, [r7, #15]
 801319c:	4618      	mov	r0, r3
 801319e:	f000 f8df 	bl	8013360 <USBD_Get_USB_Status>
 80131a2:	4603      	mov	r3, r0
 80131a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3710      	adds	r7, #16
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	460b      	mov	r3, r1
 80131ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131bc:	2300      	movs	r3, #0
 80131be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131c0:	2300      	movs	r3, #0
 80131c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80131ca:	78fa      	ldrb	r2, [r7, #3]
 80131cc:	4611      	mov	r1, r2
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7f1 faf2 	bl	80047b8 <HAL_PCD_EP_ClrStall>
 80131d4:	4603      	mov	r3, r0
 80131d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131d8:	7bfb      	ldrb	r3, [r7, #15]
 80131da:	4618      	mov	r0, r3
 80131dc:	f000 f8c0 	bl	8013360 <USBD_Get_USB_Status>
 80131e0:	4603      	mov	r3, r0
 80131e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3710      	adds	r7, #16
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}

080131ee <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131ee:	b480      	push	{r7}
 80131f0:	b085      	sub	sp, #20
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	6078      	str	r0, [r7, #4]
 80131f6:	460b      	mov	r3, r1
 80131f8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013200:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013206:	2b00      	cmp	r3, #0
 8013208:	da0b      	bge.n	8013222 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801320a:	78fb      	ldrb	r3, [r7, #3]
 801320c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013210:	68f9      	ldr	r1, [r7, #12]
 8013212:	4613      	mov	r3, r2
 8013214:	00db      	lsls	r3, r3, #3
 8013216:	4413      	add	r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	440b      	add	r3, r1
 801321c:	3316      	adds	r3, #22
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	e00b      	b.n	801323a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013222:	78fb      	ldrb	r3, [r7, #3]
 8013224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013228:	68f9      	ldr	r1, [r7, #12]
 801322a:	4613      	mov	r3, r2
 801322c:	00db      	lsls	r3, r3, #3
 801322e:	4413      	add	r3, r2
 8013230:	009b      	lsls	r3, r3, #2
 8013232:	440b      	add	r3, r1
 8013234:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8013238:	781b      	ldrb	r3, [r3, #0]
  }
}
 801323a:	4618      	mov	r0, r3
 801323c:	3714      	adds	r7, #20
 801323e:	46bd      	mov	sp, r7
 8013240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013244:	4770      	bx	lr

08013246 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013246:	b580      	push	{r7, lr}
 8013248:	b084      	sub	sp, #16
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]
 801324e:	460b      	mov	r3, r1
 8013250:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013252:	2300      	movs	r3, #0
 8013254:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013256:	2300      	movs	r3, #0
 8013258:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013260:	78fa      	ldrb	r2, [r7, #3]
 8013262:	4611      	mov	r1, r2
 8013264:	4618      	mov	r0, r3
 8013266:	f7f1 f8e1 	bl	800442c <HAL_PCD_SetAddress>
 801326a:	4603      	mov	r3, r0
 801326c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801326e:	7bfb      	ldrb	r3, [r7, #15]
 8013270:	4618      	mov	r0, r3
 8013272:	f000 f875 	bl	8013360 <USBD_Get_USB_Status>
 8013276:	4603      	mov	r3, r0
 8013278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801327a:	7bbb      	ldrb	r3, [r7, #14]
}
 801327c:	4618      	mov	r0, r3
 801327e:	3710      	adds	r7, #16
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	607a      	str	r2, [r7, #4]
 801328e:	603b      	str	r3, [r7, #0]
 8013290:	460b      	mov	r3, r1
 8013292:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013294:	2300      	movs	r3, #0
 8013296:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013298:	2300      	movs	r3, #0
 801329a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80132a2:	7af9      	ldrb	r1, [r7, #11]
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	f7f1 f9e9 	bl	800467e <HAL_PCD_EP_Transmit>
 80132ac:	4603      	mov	r3, r0
 80132ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132b0:	7dfb      	ldrb	r3, [r7, #23]
 80132b2:	4618      	mov	r0, r3
 80132b4:	f000 f854 	bl	8013360 <USBD_Get_USB_Status>
 80132b8:	4603      	mov	r3, r0
 80132ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80132bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3718      	adds	r7, #24
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}

080132c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80132c6:	b580      	push	{r7, lr}
 80132c8:	b086      	sub	sp, #24
 80132ca:	af00      	add	r7, sp, #0
 80132cc:	60f8      	str	r0, [r7, #12]
 80132ce:	607a      	str	r2, [r7, #4]
 80132d0:	603b      	str	r3, [r7, #0]
 80132d2:	460b      	mov	r3, r1
 80132d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132d6:	2300      	movs	r3, #0
 80132d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132da:	2300      	movs	r3, #0
 80132dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80132e4:	7af9      	ldrb	r1, [r7, #11]
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	f7f1 f975 	bl	80045d8 <HAL_PCD_EP_Receive>
 80132ee:	4603      	mov	r3, r0
 80132f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132f2:	7dfb      	ldrb	r3, [r7, #23]
 80132f4:	4618      	mov	r0, r3
 80132f6:	f000 f833 	bl	8013360 <USBD_Get_USB_Status>
 80132fa:	4603      	mov	r3, r0
 80132fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80132fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8013300:	4618      	mov	r0, r3
 8013302:	3718      	adds	r7, #24
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	460b      	mov	r3, r1
 8013312:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801331a:	78fa      	ldrb	r2, [r7, #3]
 801331c:	4611      	mov	r1, r2
 801331e:	4618      	mov	r0, r3
 8013320:	f7f1 f995 	bl	800464e <HAL_PCD_EP_GetRxCount>
 8013324:	4603      	mov	r3, r0
}
 8013326:	4618      	mov	r0, r3
 8013328:	3708      	adds	r7, #8
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
	...

08013330 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013330:	b480      	push	{r7}
 8013332:	b083      	sub	sp, #12
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013338:	4b03      	ldr	r3, [pc, #12]	@ (8013348 <USBD_static_malloc+0x18>)
}
 801333a:	4618      	mov	r0, r3
 801333c:	370c      	adds	r7, #12
 801333e:	46bd      	mov	sp, r7
 8013340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013344:	4770      	bx	lr
 8013346:	bf00      	nop
 8013348:	240012a8 	.word	0x240012a8

0801334c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801334c:	b480      	push	{r7}
 801334e:	b083      	sub	sp, #12
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013354:	bf00      	nop
 8013356:	370c      	adds	r7, #12
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr

08013360 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013360:	b480      	push	{r7}
 8013362:	b085      	sub	sp, #20
 8013364:	af00      	add	r7, sp, #0
 8013366:	4603      	mov	r3, r0
 8013368:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801336a:	2300      	movs	r3, #0
 801336c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801336e:	79fb      	ldrb	r3, [r7, #7]
 8013370:	2b03      	cmp	r3, #3
 8013372:	d817      	bhi.n	80133a4 <USBD_Get_USB_Status+0x44>
 8013374:	a201      	add	r2, pc, #4	@ (adr r2, 801337c <USBD_Get_USB_Status+0x1c>)
 8013376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801337a:	bf00      	nop
 801337c:	0801338d 	.word	0x0801338d
 8013380:	08013393 	.word	0x08013393
 8013384:	08013399 	.word	0x08013399
 8013388:	0801339f 	.word	0x0801339f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801338c:	2300      	movs	r3, #0
 801338e:	73fb      	strb	r3, [r7, #15]
    break;
 8013390:	e00b      	b.n	80133aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013392:	2303      	movs	r3, #3
 8013394:	73fb      	strb	r3, [r7, #15]
    break;
 8013396:	e008      	b.n	80133aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013398:	2301      	movs	r3, #1
 801339a:	73fb      	strb	r3, [r7, #15]
    break;
 801339c:	e005      	b.n	80133aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801339e:	2303      	movs	r3, #3
 80133a0:	73fb      	strb	r3, [r7, #15]
    break;
 80133a2:	e002      	b.n	80133aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80133a4:	2303      	movs	r3, #3
 80133a6:	73fb      	strb	r3, [r7, #15]
    break;
 80133a8:	bf00      	nop
  }
  return usb_status;
 80133aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3714      	adds	r7, #20
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr

080133b8 <__cvt>:
 80133b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133ba:	ed2d 8b02 	vpush	{d8}
 80133be:	eeb0 8b40 	vmov.f64	d8, d0
 80133c2:	b085      	sub	sp, #20
 80133c4:	4617      	mov	r7, r2
 80133c6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80133c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80133ca:	ee18 2a90 	vmov	r2, s17
 80133ce:	f025 0520 	bic.w	r5, r5, #32
 80133d2:	2a00      	cmp	r2, #0
 80133d4:	bfb6      	itet	lt
 80133d6:	222d      	movlt	r2, #45	@ 0x2d
 80133d8:	2200      	movge	r2, #0
 80133da:	eeb1 8b40 	vneglt.f64	d8, d0
 80133de:	2d46      	cmp	r5, #70	@ 0x46
 80133e0:	460c      	mov	r4, r1
 80133e2:	701a      	strb	r2, [r3, #0]
 80133e4:	d004      	beq.n	80133f0 <__cvt+0x38>
 80133e6:	2d45      	cmp	r5, #69	@ 0x45
 80133e8:	d100      	bne.n	80133ec <__cvt+0x34>
 80133ea:	3401      	adds	r4, #1
 80133ec:	2102      	movs	r1, #2
 80133ee:	e000      	b.n	80133f2 <__cvt+0x3a>
 80133f0:	2103      	movs	r1, #3
 80133f2:	ab03      	add	r3, sp, #12
 80133f4:	9301      	str	r3, [sp, #4]
 80133f6:	ab02      	add	r3, sp, #8
 80133f8:	9300      	str	r3, [sp, #0]
 80133fa:	4622      	mov	r2, r4
 80133fc:	4633      	mov	r3, r6
 80133fe:	eeb0 0b48 	vmov.f64	d0, d8
 8013402:	f000 ff31 	bl	8014268 <_dtoa_r>
 8013406:	2d47      	cmp	r5, #71	@ 0x47
 8013408:	d114      	bne.n	8013434 <__cvt+0x7c>
 801340a:	07fb      	lsls	r3, r7, #31
 801340c:	d50a      	bpl.n	8013424 <__cvt+0x6c>
 801340e:	1902      	adds	r2, r0, r4
 8013410:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013418:	bf08      	it	eq
 801341a:	9203      	streq	r2, [sp, #12]
 801341c:	2130      	movs	r1, #48	@ 0x30
 801341e:	9b03      	ldr	r3, [sp, #12]
 8013420:	4293      	cmp	r3, r2
 8013422:	d319      	bcc.n	8013458 <__cvt+0xa0>
 8013424:	9b03      	ldr	r3, [sp, #12]
 8013426:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013428:	1a1b      	subs	r3, r3, r0
 801342a:	6013      	str	r3, [r2, #0]
 801342c:	b005      	add	sp, #20
 801342e:	ecbd 8b02 	vpop	{d8}
 8013432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013434:	2d46      	cmp	r5, #70	@ 0x46
 8013436:	eb00 0204 	add.w	r2, r0, r4
 801343a:	d1e9      	bne.n	8013410 <__cvt+0x58>
 801343c:	7803      	ldrb	r3, [r0, #0]
 801343e:	2b30      	cmp	r3, #48	@ 0x30
 8013440:	d107      	bne.n	8013452 <__cvt+0x9a>
 8013442:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801344a:	bf1c      	itt	ne
 801344c:	f1c4 0401 	rsbne	r4, r4, #1
 8013450:	6034      	strne	r4, [r6, #0]
 8013452:	6833      	ldr	r3, [r6, #0]
 8013454:	441a      	add	r2, r3
 8013456:	e7db      	b.n	8013410 <__cvt+0x58>
 8013458:	1c5c      	adds	r4, r3, #1
 801345a:	9403      	str	r4, [sp, #12]
 801345c:	7019      	strb	r1, [r3, #0]
 801345e:	e7de      	b.n	801341e <__cvt+0x66>

08013460 <__exponent>:
 8013460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013462:	2900      	cmp	r1, #0
 8013464:	bfba      	itte	lt
 8013466:	4249      	neglt	r1, r1
 8013468:	232d      	movlt	r3, #45	@ 0x2d
 801346a:	232b      	movge	r3, #43	@ 0x2b
 801346c:	2909      	cmp	r1, #9
 801346e:	7002      	strb	r2, [r0, #0]
 8013470:	7043      	strb	r3, [r0, #1]
 8013472:	dd29      	ble.n	80134c8 <__exponent+0x68>
 8013474:	f10d 0307 	add.w	r3, sp, #7
 8013478:	461d      	mov	r5, r3
 801347a:	270a      	movs	r7, #10
 801347c:	461a      	mov	r2, r3
 801347e:	fbb1 f6f7 	udiv	r6, r1, r7
 8013482:	fb07 1416 	mls	r4, r7, r6, r1
 8013486:	3430      	adds	r4, #48	@ 0x30
 8013488:	f802 4c01 	strb.w	r4, [r2, #-1]
 801348c:	460c      	mov	r4, r1
 801348e:	2c63      	cmp	r4, #99	@ 0x63
 8013490:	f103 33ff 	add.w	r3, r3, #4294967295
 8013494:	4631      	mov	r1, r6
 8013496:	dcf1      	bgt.n	801347c <__exponent+0x1c>
 8013498:	3130      	adds	r1, #48	@ 0x30
 801349a:	1e94      	subs	r4, r2, #2
 801349c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80134a0:	1c41      	adds	r1, r0, #1
 80134a2:	4623      	mov	r3, r4
 80134a4:	42ab      	cmp	r3, r5
 80134a6:	d30a      	bcc.n	80134be <__exponent+0x5e>
 80134a8:	f10d 0309 	add.w	r3, sp, #9
 80134ac:	1a9b      	subs	r3, r3, r2
 80134ae:	42ac      	cmp	r4, r5
 80134b0:	bf88      	it	hi
 80134b2:	2300      	movhi	r3, #0
 80134b4:	3302      	adds	r3, #2
 80134b6:	4403      	add	r3, r0
 80134b8:	1a18      	subs	r0, r3, r0
 80134ba:	b003      	add	sp, #12
 80134bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134be:	f813 6b01 	ldrb.w	r6, [r3], #1
 80134c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80134c6:	e7ed      	b.n	80134a4 <__exponent+0x44>
 80134c8:	2330      	movs	r3, #48	@ 0x30
 80134ca:	3130      	adds	r1, #48	@ 0x30
 80134cc:	7083      	strb	r3, [r0, #2]
 80134ce:	70c1      	strb	r1, [r0, #3]
 80134d0:	1d03      	adds	r3, r0, #4
 80134d2:	e7f1      	b.n	80134b8 <__exponent+0x58>
 80134d4:	0000      	movs	r0, r0
	...

080134d8 <_printf_float>:
 80134d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134dc:	b08d      	sub	sp, #52	@ 0x34
 80134de:	460c      	mov	r4, r1
 80134e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80134e4:	4616      	mov	r6, r2
 80134e6:	461f      	mov	r7, r3
 80134e8:	4605      	mov	r5, r0
 80134ea:	f000 fdaf 	bl	801404c <_localeconv_r>
 80134ee:	f8d0 b000 	ldr.w	fp, [r0]
 80134f2:	4658      	mov	r0, fp
 80134f4:	f7ec ff44 	bl	8000380 <strlen>
 80134f8:	2300      	movs	r3, #0
 80134fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80134fc:	f8d8 3000 	ldr.w	r3, [r8]
 8013500:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013504:	6822      	ldr	r2, [r4, #0]
 8013506:	9005      	str	r0, [sp, #20]
 8013508:	3307      	adds	r3, #7
 801350a:	f023 0307 	bic.w	r3, r3, #7
 801350e:	f103 0108 	add.w	r1, r3, #8
 8013512:	f8c8 1000 	str.w	r1, [r8]
 8013516:	ed93 0b00 	vldr	d0, [r3]
 801351a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013778 <_printf_float+0x2a0>
 801351e:	eeb0 7bc0 	vabs.f64	d7, d0
 8013522:	eeb4 7b46 	vcmp.f64	d7, d6
 8013526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801352e:	dd24      	ble.n	801357a <_printf_float+0xa2>
 8013530:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013538:	d502      	bpl.n	8013540 <_printf_float+0x68>
 801353a:	232d      	movs	r3, #45	@ 0x2d
 801353c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013540:	498f      	ldr	r1, [pc, #572]	@ (8013780 <_printf_float+0x2a8>)
 8013542:	4b90      	ldr	r3, [pc, #576]	@ (8013784 <_printf_float+0x2ac>)
 8013544:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8013548:	bf94      	ite	ls
 801354a:	4688      	movls	r8, r1
 801354c:	4698      	movhi	r8, r3
 801354e:	f022 0204 	bic.w	r2, r2, #4
 8013552:	2303      	movs	r3, #3
 8013554:	6123      	str	r3, [r4, #16]
 8013556:	6022      	str	r2, [r4, #0]
 8013558:	f04f 0a00 	mov.w	sl, #0
 801355c:	9700      	str	r7, [sp, #0]
 801355e:	4633      	mov	r3, r6
 8013560:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013562:	4621      	mov	r1, r4
 8013564:	4628      	mov	r0, r5
 8013566:	f000 f9d1 	bl	801390c <_printf_common>
 801356a:	3001      	adds	r0, #1
 801356c:	f040 8089 	bne.w	8013682 <_printf_float+0x1aa>
 8013570:	f04f 30ff 	mov.w	r0, #4294967295
 8013574:	b00d      	add	sp, #52	@ 0x34
 8013576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801357a:	eeb4 0b40 	vcmp.f64	d0, d0
 801357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013582:	d709      	bvc.n	8013598 <_printf_float+0xc0>
 8013584:	ee10 3a90 	vmov	r3, s1
 8013588:	2b00      	cmp	r3, #0
 801358a:	bfbc      	itt	lt
 801358c:	232d      	movlt	r3, #45	@ 0x2d
 801358e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013592:	497d      	ldr	r1, [pc, #500]	@ (8013788 <_printf_float+0x2b0>)
 8013594:	4b7d      	ldr	r3, [pc, #500]	@ (801378c <_printf_float+0x2b4>)
 8013596:	e7d5      	b.n	8013544 <_printf_float+0x6c>
 8013598:	6863      	ldr	r3, [r4, #4]
 801359a:	1c59      	adds	r1, r3, #1
 801359c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80135a0:	d139      	bne.n	8013616 <_printf_float+0x13e>
 80135a2:	2306      	movs	r3, #6
 80135a4:	6063      	str	r3, [r4, #4]
 80135a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80135aa:	2300      	movs	r3, #0
 80135ac:	6022      	str	r2, [r4, #0]
 80135ae:	9303      	str	r3, [sp, #12]
 80135b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80135b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80135b6:	ab09      	add	r3, sp, #36	@ 0x24
 80135b8:	9300      	str	r3, [sp, #0]
 80135ba:	6861      	ldr	r1, [r4, #4]
 80135bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80135c0:	4628      	mov	r0, r5
 80135c2:	f7ff fef9 	bl	80133b8 <__cvt>
 80135c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80135ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80135cc:	4680      	mov	r8, r0
 80135ce:	d129      	bne.n	8013624 <_printf_float+0x14c>
 80135d0:	1cc8      	adds	r0, r1, #3
 80135d2:	db02      	blt.n	80135da <_printf_float+0x102>
 80135d4:	6863      	ldr	r3, [r4, #4]
 80135d6:	4299      	cmp	r1, r3
 80135d8:	dd41      	ble.n	801365e <_printf_float+0x186>
 80135da:	f1a9 0902 	sub.w	r9, r9, #2
 80135de:	fa5f f989 	uxtb.w	r9, r9
 80135e2:	3901      	subs	r1, #1
 80135e4:	464a      	mov	r2, r9
 80135e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80135ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80135ec:	f7ff ff38 	bl	8013460 <__exponent>
 80135f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80135f2:	1813      	adds	r3, r2, r0
 80135f4:	2a01      	cmp	r2, #1
 80135f6:	4682      	mov	sl, r0
 80135f8:	6123      	str	r3, [r4, #16]
 80135fa:	dc02      	bgt.n	8013602 <_printf_float+0x12a>
 80135fc:	6822      	ldr	r2, [r4, #0]
 80135fe:	07d2      	lsls	r2, r2, #31
 8013600:	d501      	bpl.n	8013606 <_printf_float+0x12e>
 8013602:	3301      	adds	r3, #1
 8013604:	6123      	str	r3, [r4, #16]
 8013606:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801360a:	2b00      	cmp	r3, #0
 801360c:	d0a6      	beq.n	801355c <_printf_float+0x84>
 801360e:	232d      	movs	r3, #45	@ 0x2d
 8013610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013614:	e7a2      	b.n	801355c <_printf_float+0x84>
 8013616:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801361a:	d1c4      	bne.n	80135a6 <_printf_float+0xce>
 801361c:	2b00      	cmp	r3, #0
 801361e:	d1c2      	bne.n	80135a6 <_printf_float+0xce>
 8013620:	2301      	movs	r3, #1
 8013622:	e7bf      	b.n	80135a4 <_printf_float+0xcc>
 8013624:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013628:	d9db      	bls.n	80135e2 <_printf_float+0x10a>
 801362a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801362e:	d118      	bne.n	8013662 <_printf_float+0x18a>
 8013630:	2900      	cmp	r1, #0
 8013632:	6863      	ldr	r3, [r4, #4]
 8013634:	dd0b      	ble.n	801364e <_printf_float+0x176>
 8013636:	6121      	str	r1, [r4, #16]
 8013638:	b913      	cbnz	r3, 8013640 <_printf_float+0x168>
 801363a:	6822      	ldr	r2, [r4, #0]
 801363c:	07d0      	lsls	r0, r2, #31
 801363e:	d502      	bpl.n	8013646 <_printf_float+0x16e>
 8013640:	3301      	adds	r3, #1
 8013642:	440b      	add	r3, r1
 8013644:	6123      	str	r3, [r4, #16]
 8013646:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013648:	f04f 0a00 	mov.w	sl, #0
 801364c:	e7db      	b.n	8013606 <_printf_float+0x12e>
 801364e:	b913      	cbnz	r3, 8013656 <_printf_float+0x17e>
 8013650:	6822      	ldr	r2, [r4, #0]
 8013652:	07d2      	lsls	r2, r2, #31
 8013654:	d501      	bpl.n	801365a <_printf_float+0x182>
 8013656:	3302      	adds	r3, #2
 8013658:	e7f4      	b.n	8013644 <_printf_float+0x16c>
 801365a:	2301      	movs	r3, #1
 801365c:	e7f2      	b.n	8013644 <_printf_float+0x16c>
 801365e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8013662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013664:	4299      	cmp	r1, r3
 8013666:	db05      	blt.n	8013674 <_printf_float+0x19c>
 8013668:	6823      	ldr	r3, [r4, #0]
 801366a:	6121      	str	r1, [r4, #16]
 801366c:	07d8      	lsls	r0, r3, #31
 801366e:	d5ea      	bpl.n	8013646 <_printf_float+0x16e>
 8013670:	1c4b      	adds	r3, r1, #1
 8013672:	e7e7      	b.n	8013644 <_printf_float+0x16c>
 8013674:	2900      	cmp	r1, #0
 8013676:	bfd4      	ite	le
 8013678:	f1c1 0202 	rsble	r2, r1, #2
 801367c:	2201      	movgt	r2, #1
 801367e:	4413      	add	r3, r2
 8013680:	e7e0      	b.n	8013644 <_printf_float+0x16c>
 8013682:	6823      	ldr	r3, [r4, #0]
 8013684:	055a      	lsls	r2, r3, #21
 8013686:	d407      	bmi.n	8013698 <_printf_float+0x1c0>
 8013688:	6923      	ldr	r3, [r4, #16]
 801368a:	4642      	mov	r2, r8
 801368c:	4631      	mov	r1, r6
 801368e:	4628      	mov	r0, r5
 8013690:	47b8      	blx	r7
 8013692:	3001      	adds	r0, #1
 8013694:	d12a      	bne.n	80136ec <_printf_float+0x214>
 8013696:	e76b      	b.n	8013570 <_printf_float+0x98>
 8013698:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801369c:	f240 80e0 	bls.w	8013860 <_printf_float+0x388>
 80136a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80136a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80136a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ac:	d133      	bne.n	8013716 <_printf_float+0x23e>
 80136ae:	4a38      	ldr	r2, [pc, #224]	@ (8013790 <_printf_float+0x2b8>)
 80136b0:	2301      	movs	r3, #1
 80136b2:	4631      	mov	r1, r6
 80136b4:	4628      	mov	r0, r5
 80136b6:	47b8      	blx	r7
 80136b8:	3001      	adds	r0, #1
 80136ba:	f43f af59 	beq.w	8013570 <_printf_float+0x98>
 80136be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80136c2:	4543      	cmp	r3, r8
 80136c4:	db02      	blt.n	80136cc <_printf_float+0x1f4>
 80136c6:	6823      	ldr	r3, [r4, #0]
 80136c8:	07d8      	lsls	r0, r3, #31
 80136ca:	d50f      	bpl.n	80136ec <_printf_float+0x214>
 80136cc:	9b05      	ldr	r3, [sp, #20]
 80136ce:	465a      	mov	r2, fp
 80136d0:	4631      	mov	r1, r6
 80136d2:	4628      	mov	r0, r5
 80136d4:	47b8      	blx	r7
 80136d6:	3001      	adds	r0, #1
 80136d8:	f43f af4a 	beq.w	8013570 <_printf_float+0x98>
 80136dc:	f04f 0900 	mov.w	r9, #0
 80136e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80136e4:	f104 0a1a 	add.w	sl, r4, #26
 80136e8:	45c8      	cmp	r8, r9
 80136ea:	dc09      	bgt.n	8013700 <_printf_float+0x228>
 80136ec:	6823      	ldr	r3, [r4, #0]
 80136ee:	079b      	lsls	r3, r3, #30
 80136f0:	f100 8107 	bmi.w	8013902 <_printf_float+0x42a>
 80136f4:	68e0      	ldr	r0, [r4, #12]
 80136f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136f8:	4298      	cmp	r0, r3
 80136fa:	bfb8      	it	lt
 80136fc:	4618      	movlt	r0, r3
 80136fe:	e739      	b.n	8013574 <_printf_float+0x9c>
 8013700:	2301      	movs	r3, #1
 8013702:	4652      	mov	r2, sl
 8013704:	4631      	mov	r1, r6
 8013706:	4628      	mov	r0, r5
 8013708:	47b8      	blx	r7
 801370a:	3001      	adds	r0, #1
 801370c:	f43f af30 	beq.w	8013570 <_printf_float+0x98>
 8013710:	f109 0901 	add.w	r9, r9, #1
 8013714:	e7e8      	b.n	80136e8 <_printf_float+0x210>
 8013716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013718:	2b00      	cmp	r3, #0
 801371a:	dc3b      	bgt.n	8013794 <_printf_float+0x2bc>
 801371c:	4a1c      	ldr	r2, [pc, #112]	@ (8013790 <_printf_float+0x2b8>)
 801371e:	2301      	movs	r3, #1
 8013720:	4631      	mov	r1, r6
 8013722:	4628      	mov	r0, r5
 8013724:	47b8      	blx	r7
 8013726:	3001      	adds	r0, #1
 8013728:	f43f af22 	beq.w	8013570 <_printf_float+0x98>
 801372c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013730:	ea59 0303 	orrs.w	r3, r9, r3
 8013734:	d102      	bne.n	801373c <_printf_float+0x264>
 8013736:	6823      	ldr	r3, [r4, #0]
 8013738:	07d9      	lsls	r1, r3, #31
 801373a:	d5d7      	bpl.n	80136ec <_printf_float+0x214>
 801373c:	9b05      	ldr	r3, [sp, #20]
 801373e:	465a      	mov	r2, fp
 8013740:	4631      	mov	r1, r6
 8013742:	4628      	mov	r0, r5
 8013744:	47b8      	blx	r7
 8013746:	3001      	adds	r0, #1
 8013748:	f43f af12 	beq.w	8013570 <_printf_float+0x98>
 801374c:	f04f 0a00 	mov.w	sl, #0
 8013750:	f104 0b1a 	add.w	fp, r4, #26
 8013754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013756:	425b      	negs	r3, r3
 8013758:	4553      	cmp	r3, sl
 801375a:	dc01      	bgt.n	8013760 <_printf_float+0x288>
 801375c:	464b      	mov	r3, r9
 801375e:	e794      	b.n	801368a <_printf_float+0x1b2>
 8013760:	2301      	movs	r3, #1
 8013762:	465a      	mov	r2, fp
 8013764:	4631      	mov	r1, r6
 8013766:	4628      	mov	r0, r5
 8013768:	47b8      	blx	r7
 801376a:	3001      	adds	r0, #1
 801376c:	f43f af00 	beq.w	8013570 <_printf_float+0x98>
 8013770:	f10a 0a01 	add.w	sl, sl, #1
 8013774:	e7ee      	b.n	8013754 <_printf_float+0x27c>
 8013776:	bf00      	nop
 8013778:	ffffffff 	.word	0xffffffff
 801377c:	7fefffff 	.word	0x7fefffff
 8013780:	08015e54 	.word	0x08015e54
 8013784:	08015e58 	.word	0x08015e58
 8013788:	08015e5c 	.word	0x08015e5c
 801378c:	08015e60 	.word	0x08015e60
 8013790:	08015e64 	.word	0x08015e64
 8013794:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013796:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801379a:	4553      	cmp	r3, sl
 801379c:	bfa8      	it	ge
 801379e:	4653      	movge	r3, sl
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	4699      	mov	r9, r3
 80137a4:	dc37      	bgt.n	8013816 <_printf_float+0x33e>
 80137a6:	2300      	movs	r3, #0
 80137a8:	9307      	str	r3, [sp, #28]
 80137aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137ae:	f104 021a 	add.w	r2, r4, #26
 80137b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80137b4:	9907      	ldr	r1, [sp, #28]
 80137b6:	9306      	str	r3, [sp, #24]
 80137b8:	eba3 0309 	sub.w	r3, r3, r9
 80137bc:	428b      	cmp	r3, r1
 80137be:	dc31      	bgt.n	8013824 <_printf_float+0x34c>
 80137c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137c2:	459a      	cmp	sl, r3
 80137c4:	dc3b      	bgt.n	801383e <_printf_float+0x366>
 80137c6:	6823      	ldr	r3, [r4, #0]
 80137c8:	07da      	lsls	r2, r3, #31
 80137ca:	d438      	bmi.n	801383e <_printf_float+0x366>
 80137cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137ce:	ebaa 0903 	sub.w	r9, sl, r3
 80137d2:	9b06      	ldr	r3, [sp, #24]
 80137d4:	ebaa 0303 	sub.w	r3, sl, r3
 80137d8:	4599      	cmp	r9, r3
 80137da:	bfa8      	it	ge
 80137dc:	4699      	movge	r9, r3
 80137de:	f1b9 0f00 	cmp.w	r9, #0
 80137e2:	dc34      	bgt.n	801384e <_printf_float+0x376>
 80137e4:	f04f 0800 	mov.w	r8, #0
 80137e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137ec:	f104 0b1a 	add.w	fp, r4, #26
 80137f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137f2:	ebaa 0303 	sub.w	r3, sl, r3
 80137f6:	eba3 0309 	sub.w	r3, r3, r9
 80137fa:	4543      	cmp	r3, r8
 80137fc:	f77f af76 	ble.w	80136ec <_printf_float+0x214>
 8013800:	2301      	movs	r3, #1
 8013802:	465a      	mov	r2, fp
 8013804:	4631      	mov	r1, r6
 8013806:	4628      	mov	r0, r5
 8013808:	47b8      	blx	r7
 801380a:	3001      	adds	r0, #1
 801380c:	f43f aeb0 	beq.w	8013570 <_printf_float+0x98>
 8013810:	f108 0801 	add.w	r8, r8, #1
 8013814:	e7ec      	b.n	80137f0 <_printf_float+0x318>
 8013816:	4642      	mov	r2, r8
 8013818:	4631      	mov	r1, r6
 801381a:	4628      	mov	r0, r5
 801381c:	47b8      	blx	r7
 801381e:	3001      	adds	r0, #1
 8013820:	d1c1      	bne.n	80137a6 <_printf_float+0x2ce>
 8013822:	e6a5      	b.n	8013570 <_printf_float+0x98>
 8013824:	2301      	movs	r3, #1
 8013826:	4631      	mov	r1, r6
 8013828:	4628      	mov	r0, r5
 801382a:	9206      	str	r2, [sp, #24]
 801382c:	47b8      	blx	r7
 801382e:	3001      	adds	r0, #1
 8013830:	f43f ae9e 	beq.w	8013570 <_printf_float+0x98>
 8013834:	9b07      	ldr	r3, [sp, #28]
 8013836:	9a06      	ldr	r2, [sp, #24]
 8013838:	3301      	adds	r3, #1
 801383a:	9307      	str	r3, [sp, #28]
 801383c:	e7b9      	b.n	80137b2 <_printf_float+0x2da>
 801383e:	9b05      	ldr	r3, [sp, #20]
 8013840:	465a      	mov	r2, fp
 8013842:	4631      	mov	r1, r6
 8013844:	4628      	mov	r0, r5
 8013846:	47b8      	blx	r7
 8013848:	3001      	adds	r0, #1
 801384a:	d1bf      	bne.n	80137cc <_printf_float+0x2f4>
 801384c:	e690      	b.n	8013570 <_printf_float+0x98>
 801384e:	9a06      	ldr	r2, [sp, #24]
 8013850:	464b      	mov	r3, r9
 8013852:	4442      	add	r2, r8
 8013854:	4631      	mov	r1, r6
 8013856:	4628      	mov	r0, r5
 8013858:	47b8      	blx	r7
 801385a:	3001      	adds	r0, #1
 801385c:	d1c2      	bne.n	80137e4 <_printf_float+0x30c>
 801385e:	e687      	b.n	8013570 <_printf_float+0x98>
 8013860:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8013864:	f1b9 0f01 	cmp.w	r9, #1
 8013868:	dc01      	bgt.n	801386e <_printf_float+0x396>
 801386a:	07db      	lsls	r3, r3, #31
 801386c:	d536      	bpl.n	80138dc <_printf_float+0x404>
 801386e:	2301      	movs	r3, #1
 8013870:	4642      	mov	r2, r8
 8013872:	4631      	mov	r1, r6
 8013874:	4628      	mov	r0, r5
 8013876:	47b8      	blx	r7
 8013878:	3001      	adds	r0, #1
 801387a:	f43f ae79 	beq.w	8013570 <_printf_float+0x98>
 801387e:	9b05      	ldr	r3, [sp, #20]
 8013880:	465a      	mov	r2, fp
 8013882:	4631      	mov	r1, r6
 8013884:	4628      	mov	r0, r5
 8013886:	47b8      	blx	r7
 8013888:	3001      	adds	r0, #1
 801388a:	f43f ae71 	beq.w	8013570 <_printf_float+0x98>
 801388e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013892:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801389a:	f109 39ff 	add.w	r9, r9, #4294967295
 801389e:	d018      	beq.n	80138d2 <_printf_float+0x3fa>
 80138a0:	464b      	mov	r3, r9
 80138a2:	f108 0201 	add.w	r2, r8, #1
 80138a6:	4631      	mov	r1, r6
 80138a8:	4628      	mov	r0, r5
 80138aa:	47b8      	blx	r7
 80138ac:	3001      	adds	r0, #1
 80138ae:	d10c      	bne.n	80138ca <_printf_float+0x3f2>
 80138b0:	e65e      	b.n	8013570 <_printf_float+0x98>
 80138b2:	2301      	movs	r3, #1
 80138b4:	465a      	mov	r2, fp
 80138b6:	4631      	mov	r1, r6
 80138b8:	4628      	mov	r0, r5
 80138ba:	47b8      	blx	r7
 80138bc:	3001      	adds	r0, #1
 80138be:	f43f ae57 	beq.w	8013570 <_printf_float+0x98>
 80138c2:	f108 0801 	add.w	r8, r8, #1
 80138c6:	45c8      	cmp	r8, r9
 80138c8:	dbf3      	blt.n	80138b2 <_printf_float+0x3da>
 80138ca:	4653      	mov	r3, sl
 80138cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80138d0:	e6dc      	b.n	801368c <_printf_float+0x1b4>
 80138d2:	f04f 0800 	mov.w	r8, #0
 80138d6:	f104 0b1a 	add.w	fp, r4, #26
 80138da:	e7f4      	b.n	80138c6 <_printf_float+0x3ee>
 80138dc:	2301      	movs	r3, #1
 80138de:	4642      	mov	r2, r8
 80138e0:	e7e1      	b.n	80138a6 <_printf_float+0x3ce>
 80138e2:	2301      	movs	r3, #1
 80138e4:	464a      	mov	r2, r9
 80138e6:	4631      	mov	r1, r6
 80138e8:	4628      	mov	r0, r5
 80138ea:	47b8      	blx	r7
 80138ec:	3001      	adds	r0, #1
 80138ee:	f43f ae3f 	beq.w	8013570 <_printf_float+0x98>
 80138f2:	f108 0801 	add.w	r8, r8, #1
 80138f6:	68e3      	ldr	r3, [r4, #12]
 80138f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80138fa:	1a5b      	subs	r3, r3, r1
 80138fc:	4543      	cmp	r3, r8
 80138fe:	dcf0      	bgt.n	80138e2 <_printf_float+0x40a>
 8013900:	e6f8      	b.n	80136f4 <_printf_float+0x21c>
 8013902:	f04f 0800 	mov.w	r8, #0
 8013906:	f104 0919 	add.w	r9, r4, #25
 801390a:	e7f4      	b.n	80138f6 <_printf_float+0x41e>

0801390c <_printf_common>:
 801390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013910:	4616      	mov	r6, r2
 8013912:	4698      	mov	r8, r3
 8013914:	688a      	ldr	r2, [r1, #8]
 8013916:	690b      	ldr	r3, [r1, #16]
 8013918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801391c:	4293      	cmp	r3, r2
 801391e:	bfb8      	it	lt
 8013920:	4613      	movlt	r3, r2
 8013922:	6033      	str	r3, [r6, #0]
 8013924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013928:	4607      	mov	r7, r0
 801392a:	460c      	mov	r4, r1
 801392c:	b10a      	cbz	r2, 8013932 <_printf_common+0x26>
 801392e:	3301      	adds	r3, #1
 8013930:	6033      	str	r3, [r6, #0]
 8013932:	6823      	ldr	r3, [r4, #0]
 8013934:	0699      	lsls	r1, r3, #26
 8013936:	bf42      	ittt	mi
 8013938:	6833      	ldrmi	r3, [r6, #0]
 801393a:	3302      	addmi	r3, #2
 801393c:	6033      	strmi	r3, [r6, #0]
 801393e:	6825      	ldr	r5, [r4, #0]
 8013940:	f015 0506 	ands.w	r5, r5, #6
 8013944:	d106      	bne.n	8013954 <_printf_common+0x48>
 8013946:	f104 0a19 	add.w	sl, r4, #25
 801394a:	68e3      	ldr	r3, [r4, #12]
 801394c:	6832      	ldr	r2, [r6, #0]
 801394e:	1a9b      	subs	r3, r3, r2
 8013950:	42ab      	cmp	r3, r5
 8013952:	dc26      	bgt.n	80139a2 <_printf_common+0x96>
 8013954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013958:	6822      	ldr	r2, [r4, #0]
 801395a:	3b00      	subs	r3, #0
 801395c:	bf18      	it	ne
 801395e:	2301      	movne	r3, #1
 8013960:	0692      	lsls	r2, r2, #26
 8013962:	d42b      	bmi.n	80139bc <_printf_common+0xb0>
 8013964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013968:	4641      	mov	r1, r8
 801396a:	4638      	mov	r0, r7
 801396c:	47c8      	blx	r9
 801396e:	3001      	adds	r0, #1
 8013970:	d01e      	beq.n	80139b0 <_printf_common+0xa4>
 8013972:	6823      	ldr	r3, [r4, #0]
 8013974:	6922      	ldr	r2, [r4, #16]
 8013976:	f003 0306 	and.w	r3, r3, #6
 801397a:	2b04      	cmp	r3, #4
 801397c:	bf02      	ittt	eq
 801397e:	68e5      	ldreq	r5, [r4, #12]
 8013980:	6833      	ldreq	r3, [r6, #0]
 8013982:	1aed      	subeq	r5, r5, r3
 8013984:	68a3      	ldr	r3, [r4, #8]
 8013986:	bf0c      	ite	eq
 8013988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801398c:	2500      	movne	r5, #0
 801398e:	4293      	cmp	r3, r2
 8013990:	bfc4      	itt	gt
 8013992:	1a9b      	subgt	r3, r3, r2
 8013994:	18ed      	addgt	r5, r5, r3
 8013996:	2600      	movs	r6, #0
 8013998:	341a      	adds	r4, #26
 801399a:	42b5      	cmp	r5, r6
 801399c:	d11a      	bne.n	80139d4 <_printf_common+0xc8>
 801399e:	2000      	movs	r0, #0
 80139a0:	e008      	b.n	80139b4 <_printf_common+0xa8>
 80139a2:	2301      	movs	r3, #1
 80139a4:	4652      	mov	r2, sl
 80139a6:	4641      	mov	r1, r8
 80139a8:	4638      	mov	r0, r7
 80139aa:	47c8      	blx	r9
 80139ac:	3001      	adds	r0, #1
 80139ae:	d103      	bne.n	80139b8 <_printf_common+0xac>
 80139b0:	f04f 30ff 	mov.w	r0, #4294967295
 80139b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139b8:	3501      	adds	r5, #1
 80139ba:	e7c6      	b.n	801394a <_printf_common+0x3e>
 80139bc:	18e1      	adds	r1, r4, r3
 80139be:	1c5a      	adds	r2, r3, #1
 80139c0:	2030      	movs	r0, #48	@ 0x30
 80139c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80139c6:	4422      	add	r2, r4
 80139c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80139cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80139d0:	3302      	adds	r3, #2
 80139d2:	e7c7      	b.n	8013964 <_printf_common+0x58>
 80139d4:	2301      	movs	r3, #1
 80139d6:	4622      	mov	r2, r4
 80139d8:	4641      	mov	r1, r8
 80139da:	4638      	mov	r0, r7
 80139dc:	47c8      	blx	r9
 80139de:	3001      	adds	r0, #1
 80139e0:	d0e6      	beq.n	80139b0 <_printf_common+0xa4>
 80139e2:	3601      	adds	r6, #1
 80139e4:	e7d9      	b.n	801399a <_printf_common+0x8e>
	...

080139e8 <_printf_i>:
 80139e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139ec:	7e0f      	ldrb	r7, [r1, #24]
 80139ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80139f0:	2f78      	cmp	r7, #120	@ 0x78
 80139f2:	4691      	mov	r9, r2
 80139f4:	4680      	mov	r8, r0
 80139f6:	460c      	mov	r4, r1
 80139f8:	469a      	mov	sl, r3
 80139fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80139fe:	d807      	bhi.n	8013a10 <_printf_i+0x28>
 8013a00:	2f62      	cmp	r7, #98	@ 0x62
 8013a02:	d80a      	bhi.n	8013a1a <_printf_i+0x32>
 8013a04:	2f00      	cmp	r7, #0
 8013a06:	f000 80d2 	beq.w	8013bae <_printf_i+0x1c6>
 8013a0a:	2f58      	cmp	r7, #88	@ 0x58
 8013a0c:	f000 80b9 	beq.w	8013b82 <_printf_i+0x19a>
 8013a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013a18:	e03a      	b.n	8013a90 <_printf_i+0xa8>
 8013a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013a1e:	2b15      	cmp	r3, #21
 8013a20:	d8f6      	bhi.n	8013a10 <_printf_i+0x28>
 8013a22:	a101      	add	r1, pc, #4	@ (adr r1, 8013a28 <_printf_i+0x40>)
 8013a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a28:	08013a81 	.word	0x08013a81
 8013a2c:	08013a95 	.word	0x08013a95
 8013a30:	08013a11 	.word	0x08013a11
 8013a34:	08013a11 	.word	0x08013a11
 8013a38:	08013a11 	.word	0x08013a11
 8013a3c:	08013a11 	.word	0x08013a11
 8013a40:	08013a95 	.word	0x08013a95
 8013a44:	08013a11 	.word	0x08013a11
 8013a48:	08013a11 	.word	0x08013a11
 8013a4c:	08013a11 	.word	0x08013a11
 8013a50:	08013a11 	.word	0x08013a11
 8013a54:	08013b95 	.word	0x08013b95
 8013a58:	08013abf 	.word	0x08013abf
 8013a5c:	08013b4f 	.word	0x08013b4f
 8013a60:	08013a11 	.word	0x08013a11
 8013a64:	08013a11 	.word	0x08013a11
 8013a68:	08013bb7 	.word	0x08013bb7
 8013a6c:	08013a11 	.word	0x08013a11
 8013a70:	08013abf 	.word	0x08013abf
 8013a74:	08013a11 	.word	0x08013a11
 8013a78:	08013a11 	.word	0x08013a11
 8013a7c:	08013b57 	.word	0x08013b57
 8013a80:	6833      	ldr	r3, [r6, #0]
 8013a82:	1d1a      	adds	r2, r3, #4
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	6032      	str	r2, [r6, #0]
 8013a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013a90:	2301      	movs	r3, #1
 8013a92:	e09d      	b.n	8013bd0 <_printf_i+0x1e8>
 8013a94:	6833      	ldr	r3, [r6, #0]
 8013a96:	6820      	ldr	r0, [r4, #0]
 8013a98:	1d19      	adds	r1, r3, #4
 8013a9a:	6031      	str	r1, [r6, #0]
 8013a9c:	0606      	lsls	r6, r0, #24
 8013a9e:	d501      	bpl.n	8013aa4 <_printf_i+0xbc>
 8013aa0:	681d      	ldr	r5, [r3, #0]
 8013aa2:	e003      	b.n	8013aac <_printf_i+0xc4>
 8013aa4:	0645      	lsls	r5, r0, #25
 8013aa6:	d5fb      	bpl.n	8013aa0 <_printf_i+0xb8>
 8013aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013aac:	2d00      	cmp	r5, #0
 8013aae:	da03      	bge.n	8013ab8 <_printf_i+0xd0>
 8013ab0:	232d      	movs	r3, #45	@ 0x2d
 8013ab2:	426d      	negs	r5, r5
 8013ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ab8:	4859      	ldr	r0, [pc, #356]	@ (8013c20 <_printf_i+0x238>)
 8013aba:	230a      	movs	r3, #10
 8013abc:	e011      	b.n	8013ae2 <_printf_i+0xfa>
 8013abe:	6821      	ldr	r1, [r4, #0]
 8013ac0:	6833      	ldr	r3, [r6, #0]
 8013ac2:	0608      	lsls	r0, r1, #24
 8013ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013ac8:	d402      	bmi.n	8013ad0 <_printf_i+0xe8>
 8013aca:	0649      	lsls	r1, r1, #25
 8013acc:	bf48      	it	mi
 8013ace:	b2ad      	uxthmi	r5, r5
 8013ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013ad2:	4853      	ldr	r0, [pc, #332]	@ (8013c20 <_printf_i+0x238>)
 8013ad4:	6033      	str	r3, [r6, #0]
 8013ad6:	bf14      	ite	ne
 8013ad8:	230a      	movne	r3, #10
 8013ada:	2308      	moveq	r3, #8
 8013adc:	2100      	movs	r1, #0
 8013ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013ae2:	6866      	ldr	r6, [r4, #4]
 8013ae4:	60a6      	str	r6, [r4, #8]
 8013ae6:	2e00      	cmp	r6, #0
 8013ae8:	bfa2      	ittt	ge
 8013aea:	6821      	ldrge	r1, [r4, #0]
 8013aec:	f021 0104 	bicge.w	r1, r1, #4
 8013af0:	6021      	strge	r1, [r4, #0]
 8013af2:	b90d      	cbnz	r5, 8013af8 <_printf_i+0x110>
 8013af4:	2e00      	cmp	r6, #0
 8013af6:	d04b      	beq.n	8013b90 <_printf_i+0x1a8>
 8013af8:	4616      	mov	r6, r2
 8013afa:	fbb5 f1f3 	udiv	r1, r5, r3
 8013afe:	fb03 5711 	mls	r7, r3, r1, r5
 8013b02:	5dc7      	ldrb	r7, [r0, r7]
 8013b04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b08:	462f      	mov	r7, r5
 8013b0a:	42bb      	cmp	r3, r7
 8013b0c:	460d      	mov	r5, r1
 8013b0e:	d9f4      	bls.n	8013afa <_printf_i+0x112>
 8013b10:	2b08      	cmp	r3, #8
 8013b12:	d10b      	bne.n	8013b2c <_printf_i+0x144>
 8013b14:	6823      	ldr	r3, [r4, #0]
 8013b16:	07df      	lsls	r7, r3, #31
 8013b18:	d508      	bpl.n	8013b2c <_printf_i+0x144>
 8013b1a:	6923      	ldr	r3, [r4, #16]
 8013b1c:	6861      	ldr	r1, [r4, #4]
 8013b1e:	4299      	cmp	r1, r3
 8013b20:	bfde      	ittt	le
 8013b22:	2330      	movle	r3, #48	@ 0x30
 8013b24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b2c:	1b92      	subs	r2, r2, r6
 8013b2e:	6122      	str	r2, [r4, #16]
 8013b30:	f8cd a000 	str.w	sl, [sp]
 8013b34:	464b      	mov	r3, r9
 8013b36:	aa03      	add	r2, sp, #12
 8013b38:	4621      	mov	r1, r4
 8013b3a:	4640      	mov	r0, r8
 8013b3c:	f7ff fee6 	bl	801390c <_printf_common>
 8013b40:	3001      	adds	r0, #1
 8013b42:	d14a      	bne.n	8013bda <_printf_i+0x1f2>
 8013b44:	f04f 30ff 	mov.w	r0, #4294967295
 8013b48:	b004      	add	sp, #16
 8013b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b4e:	6823      	ldr	r3, [r4, #0]
 8013b50:	f043 0320 	orr.w	r3, r3, #32
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	4833      	ldr	r0, [pc, #204]	@ (8013c24 <_printf_i+0x23c>)
 8013b58:	2778      	movs	r7, #120	@ 0x78
 8013b5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013b5e:	6823      	ldr	r3, [r4, #0]
 8013b60:	6831      	ldr	r1, [r6, #0]
 8013b62:	061f      	lsls	r7, r3, #24
 8013b64:	f851 5b04 	ldr.w	r5, [r1], #4
 8013b68:	d402      	bmi.n	8013b70 <_printf_i+0x188>
 8013b6a:	065f      	lsls	r7, r3, #25
 8013b6c:	bf48      	it	mi
 8013b6e:	b2ad      	uxthmi	r5, r5
 8013b70:	6031      	str	r1, [r6, #0]
 8013b72:	07d9      	lsls	r1, r3, #31
 8013b74:	bf44      	itt	mi
 8013b76:	f043 0320 	orrmi.w	r3, r3, #32
 8013b7a:	6023      	strmi	r3, [r4, #0]
 8013b7c:	b11d      	cbz	r5, 8013b86 <_printf_i+0x19e>
 8013b7e:	2310      	movs	r3, #16
 8013b80:	e7ac      	b.n	8013adc <_printf_i+0xf4>
 8013b82:	4827      	ldr	r0, [pc, #156]	@ (8013c20 <_printf_i+0x238>)
 8013b84:	e7e9      	b.n	8013b5a <_printf_i+0x172>
 8013b86:	6823      	ldr	r3, [r4, #0]
 8013b88:	f023 0320 	bic.w	r3, r3, #32
 8013b8c:	6023      	str	r3, [r4, #0]
 8013b8e:	e7f6      	b.n	8013b7e <_printf_i+0x196>
 8013b90:	4616      	mov	r6, r2
 8013b92:	e7bd      	b.n	8013b10 <_printf_i+0x128>
 8013b94:	6833      	ldr	r3, [r6, #0]
 8013b96:	6825      	ldr	r5, [r4, #0]
 8013b98:	6961      	ldr	r1, [r4, #20]
 8013b9a:	1d18      	adds	r0, r3, #4
 8013b9c:	6030      	str	r0, [r6, #0]
 8013b9e:	062e      	lsls	r6, r5, #24
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	d501      	bpl.n	8013ba8 <_printf_i+0x1c0>
 8013ba4:	6019      	str	r1, [r3, #0]
 8013ba6:	e002      	b.n	8013bae <_printf_i+0x1c6>
 8013ba8:	0668      	lsls	r0, r5, #25
 8013baa:	d5fb      	bpl.n	8013ba4 <_printf_i+0x1bc>
 8013bac:	8019      	strh	r1, [r3, #0]
 8013bae:	2300      	movs	r3, #0
 8013bb0:	6123      	str	r3, [r4, #16]
 8013bb2:	4616      	mov	r6, r2
 8013bb4:	e7bc      	b.n	8013b30 <_printf_i+0x148>
 8013bb6:	6833      	ldr	r3, [r6, #0]
 8013bb8:	1d1a      	adds	r2, r3, #4
 8013bba:	6032      	str	r2, [r6, #0]
 8013bbc:	681e      	ldr	r6, [r3, #0]
 8013bbe:	6862      	ldr	r2, [r4, #4]
 8013bc0:	2100      	movs	r1, #0
 8013bc2:	4630      	mov	r0, r6
 8013bc4:	f7ec fb8c 	bl	80002e0 <memchr>
 8013bc8:	b108      	cbz	r0, 8013bce <_printf_i+0x1e6>
 8013bca:	1b80      	subs	r0, r0, r6
 8013bcc:	6060      	str	r0, [r4, #4]
 8013bce:	6863      	ldr	r3, [r4, #4]
 8013bd0:	6123      	str	r3, [r4, #16]
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bd8:	e7aa      	b.n	8013b30 <_printf_i+0x148>
 8013bda:	6923      	ldr	r3, [r4, #16]
 8013bdc:	4632      	mov	r2, r6
 8013bde:	4649      	mov	r1, r9
 8013be0:	4640      	mov	r0, r8
 8013be2:	47d0      	blx	sl
 8013be4:	3001      	adds	r0, #1
 8013be6:	d0ad      	beq.n	8013b44 <_printf_i+0x15c>
 8013be8:	6823      	ldr	r3, [r4, #0]
 8013bea:	079b      	lsls	r3, r3, #30
 8013bec:	d413      	bmi.n	8013c16 <_printf_i+0x22e>
 8013bee:	68e0      	ldr	r0, [r4, #12]
 8013bf0:	9b03      	ldr	r3, [sp, #12]
 8013bf2:	4298      	cmp	r0, r3
 8013bf4:	bfb8      	it	lt
 8013bf6:	4618      	movlt	r0, r3
 8013bf8:	e7a6      	b.n	8013b48 <_printf_i+0x160>
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	4632      	mov	r2, r6
 8013bfe:	4649      	mov	r1, r9
 8013c00:	4640      	mov	r0, r8
 8013c02:	47d0      	blx	sl
 8013c04:	3001      	adds	r0, #1
 8013c06:	d09d      	beq.n	8013b44 <_printf_i+0x15c>
 8013c08:	3501      	adds	r5, #1
 8013c0a:	68e3      	ldr	r3, [r4, #12]
 8013c0c:	9903      	ldr	r1, [sp, #12]
 8013c0e:	1a5b      	subs	r3, r3, r1
 8013c10:	42ab      	cmp	r3, r5
 8013c12:	dcf2      	bgt.n	8013bfa <_printf_i+0x212>
 8013c14:	e7eb      	b.n	8013bee <_printf_i+0x206>
 8013c16:	2500      	movs	r5, #0
 8013c18:	f104 0619 	add.w	r6, r4, #25
 8013c1c:	e7f5      	b.n	8013c0a <_printf_i+0x222>
 8013c1e:	bf00      	nop
 8013c20:	08015e66 	.word	0x08015e66
 8013c24:	08015e77 	.word	0x08015e77

08013c28 <std>:
 8013c28:	2300      	movs	r3, #0
 8013c2a:	b510      	push	{r4, lr}
 8013c2c:	4604      	mov	r4, r0
 8013c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8013c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c36:	6083      	str	r3, [r0, #8]
 8013c38:	8181      	strh	r1, [r0, #12]
 8013c3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8013c3c:	81c2      	strh	r2, [r0, #14]
 8013c3e:	6183      	str	r3, [r0, #24]
 8013c40:	4619      	mov	r1, r3
 8013c42:	2208      	movs	r2, #8
 8013c44:	305c      	adds	r0, #92	@ 0x5c
 8013c46:	f000 f9f9 	bl	801403c <memset>
 8013c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8013c80 <std+0x58>)
 8013c4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8013c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8013c84 <std+0x5c>)
 8013c50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013c52:	4b0d      	ldr	r3, [pc, #52]	@ (8013c88 <std+0x60>)
 8013c54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013c56:	4b0d      	ldr	r3, [pc, #52]	@ (8013c8c <std+0x64>)
 8013c58:	6323      	str	r3, [r4, #48]	@ 0x30
 8013c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8013c90 <std+0x68>)
 8013c5c:	6224      	str	r4, [r4, #32]
 8013c5e:	429c      	cmp	r4, r3
 8013c60:	d006      	beq.n	8013c70 <std+0x48>
 8013c62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013c66:	4294      	cmp	r4, r2
 8013c68:	d002      	beq.n	8013c70 <std+0x48>
 8013c6a:	33d0      	adds	r3, #208	@ 0xd0
 8013c6c:	429c      	cmp	r4, r3
 8013c6e:	d105      	bne.n	8013c7c <std+0x54>
 8013c70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c78:	f000 ba5c 	b.w	8014134 <__retarget_lock_init_recursive>
 8013c7c:	bd10      	pop	{r4, pc}
 8013c7e:	bf00      	nop
 8013c80:	08013e8d 	.word	0x08013e8d
 8013c84:	08013eaf 	.word	0x08013eaf
 8013c88:	08013ee7 	.word	0x08013ee7
 8013c8c:	08013f0b 	.word	0x08013f0b
 8013c90:	24001520 	.word	0x24001520

08013c94 <stdio_exit_handler>:
 8013c94:	4a02      	ldr	r2, [pc, #8]	@ (8013ca0 <stdio_exit_handler+0xc>)
 8013c96:	4903      	ldr	r1, [pc, #12]	@ (8013ca4 <stdio_exit_handler+0x10>)
 8013c98:	4803      	ldr	r0, [pc, #12]	@ (8013ca8 <stdio_exit_handler+0x14>)
 8013c9a:	f000 b869 	b.w	8013d70 <_fwalk_sglue>
 8013c9e:	bf00      	nop
 8013ca0:	24000120 	.word	0x24000120
 8013ca4:	080159a5 	.word	0x080159a5
 8013ca8:	24000130 	.word	0x24000130

08013cac <cleanup_stdio>:
 8013cac:	6841      	ldr	r1, [r0, #4]
 8013cae:	4b0c      	ldr	r3, [pc, #48]	@ (8013ce0 <cleanup_stdio+0x34>)
 8013cb0:	4299      	cmp	r1, r3
 8013cb2:	b510      	push	{r4, lr}
 8013cb4:	4604      	mov	r4, r0
 8013cb6:	d001      	beq.n	8013cbc <cleanup_stdio+0x10>
 8013cb8:	f001 fe74 	bl	80159a4 <_fflush_r>
 8013cbc:	68a1      	ldr	r1, [r4, #8]
 8013cbe:	4b09      	ldr	r3, [pc, #36]	@ (8013ce4 <cleanup_stdio+0x38>)
 8013cc0:	4299      	cmp	r1, r3
 8013cc2:	d002      	beq.n	8013cca <cleanup_stdio+0x1e>
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f001 fe6d 	bl	80159a4 <_fflush_r>
 8013cca:	68e1      	ldr	r1, [r4, #12]
 8013ccc:	4b06      	ldr	r3, [pc, #24]	@ (8013ce8 <cleanup_stdio+0x3c>)
 8013cce:	4299      	cmp	r1, r3
 8013cd0:	d004      	beq.n	8013cdc <cleanup_stdio+0x30>
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cd8:	f001 be64 	b.w	80159a4 <_fflush_r>
 8013cdc:	bd10      	pop	{r4, pc}
 8013cde:	bf00      	nop
 8013ce0:	24001520 	.word	0x24001520
 8013ce4:	24001588 	.word	0x24001588
 8013ce8:	240015f0 	.word	0x240015f0

08013cec <global_stdio_init.part.0>:
 8013cec:	b510      	push	{r4, lr}
 8013cee:	4b0b      	ldr	r3, [pc, #44]	@ (8013d1c <global_stdio_init.part.0+0x30>)
 8013cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8013d20 <global_stdio_init.part.0+0x34>)
 8013cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8013d24 <global_stdio_init.part.0+0x38>)
 8013cf4:	601a      	str	r2, [r3, #0]
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	2104      	movs	r1, #4
 8013cfc:	f7ff ff94 	bl	8013c28 <std>
 8013d00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013d04:	2201      	movs	r2, #1
 8013d06:	2109      	movs	r1, #9
 8013d08:	f7ff ff8e 	bl	8013c28 <std>
 8013d0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013d10:	2202      	movs	r2, #2
 8013d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d16:	2112      	movs	r1, #18
 8013d18:	f7ff bf86 	b.w	8013c28 <std>
 8013d1c:	24001658 	.word	0x24001658
 8013d20:	24001520 	.word	0x24001520
 8013d24:	08013c95 	.word	0x08013c95

08013d28 <__sfp_lock_acquire>:
 8013d28:	4801      	ldr	r0, [pc, #4]	@ (8013d30 <__sfp_lock_acquire+0x8>)
 8013d2a:	f000 ba04 	b.w	8014136 <__retarget_lock_acquire_recursive>
 8013d2e:	bf00      	nop
 8013d30:	24001661 	.word	0x24001661

08013d34 <__sfp_lock_release>:
 8013d34:	4801      	ldr	r0, [pc, #4]	@ (8013d3c <__sfp_lock_release+0x8>)
 8013d36:	f000 b9ff 	b.w	8014138 <__retarget_lock_release_recursive>
 8013d3a:	bf00      	nop
 8013d3c:	24001661 	.word	0x24001661

08013d40 <__sinit>:
 8013d40:	b510      	push	{r4, lr}
 8013d42:	4604      	mov	r4, r0
 8013d44:	f7ff fff0 	bl	8013d28 <__sfp_lock_acquire>
 8013d48:	6a23      	ldr	r3, [r4, #32]
 8013d4a:	b11b      	cbz	r3, 8013d54 <__sinit+0x14>
 8013d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d50:	f7ff bff0 	b.w	8013d34 <__sfp_lock_release>
 8013d54:	4b04      	ldr	r3, [pc, #16]	@ (8013d68 <__sinit+0x28>)
 8013d56:	6223      	str	r3, [r4, #32]
 8013d58:	4b04      	ldr	r3, [pc, #16]	@ (8013d6c <__sinit+0x2c>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d1f5      	bne.n	8013d4c <__sinit+0xc>
 8013d60:	f7ff ffc4 	bl	8013cec <global_stdio_init.part.0>
 8013d64:	e7f2      	b.n	8013d4c <__sinit+0xc>
 8013d66:	bf00      	nop
 8013d68:	08013cad 	.word	0x08013cad
 8013d6c:	24001658 	.word	0x24001658

08013d70 <_fwalk_sglue>:
 8013d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d74:	4607      	mov	r7, r0
 8013d76:	4688      	mov	r8, r1
 8013d78:	4614      	mov	r4, r2
 8013d7a:	2600      	movs	r6, #0
 8013d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013d80:	f1b9 0901 	subs.w	r9, r9, #1
 8013d84:	d505      	bpl.n	8013d92 <_fwalk_sglue+0x22>
 8013d86:	6824      	ldr	r4, [r4, #0]
 8013d88:	2c00      	cmp	r4, #0
 8013d8a:	d1f7      	bne.n	8013d7c <_fwalk_sglue+0xc>
 8013d8c:	4630      	mov	r0, r6
 8013d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d92:	89ab      	ldrh	r3, [r5, #12]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d907      	bls.n	8013da8 <_fwalk_sglue+0x38>
 8013d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	d003      	beq.n	8013da8 <_fwalk_sglue+0x38>
 8013da0:	4629      	mov	r1, r5
 8013da2:	4638      	mov	r0, r7
 8013da4:	47c0      	blx	r8
 8013da6:	4306      	orrs	r6, r0
 8013da8:	3568      	adds	r5, #104	@ 0x68
 8013daa:	e7e9      	b.n	8013d80 <_fwalk_sglue+0x10>

08013dac <iprintf>:
 8013dac:	b40f      	push	{r0, r1, r2, r3}
 8013dae:	b507      	push	{r0, r1, r2, lr}
 8013db0:	4906      	ldr	r1, [pc, #24]	@ (8013dcc <iprintf+0x20>)
 8013db2:	ab04      	add	r3, sp, #16
 8013db4:	6808      	ldr	r0, [r1, #0]
 8013db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dba:	6881      	ldr	r1, [r0, #8]
 8013dbc:	9301      	str	r3, [sp, #4]
 8013dbe:	f001 fc55 	bl	801566c <_vfiprintf_r>
 8013dc2:	b003      	add	sp, #12
 8013dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013dc8:	b004      	add	sp, #16
 8013dca:	4770      	bx	lr
 8013dcc:	2400012c 	.word	0x2400012c

08013dd0 <_puts_r>:
 8013dd0:	6a03      	ldr	r3, [r0, #32]
 8013dd2:	b570      	push	{r4, r5, r6, lr}
 8013dd4:	6884      	ldr	r4, [r0, #8]
 8013dd6:	4605      	mov	r5, r0
 8013dd8:	460e      	mov	r6, r1
 8013dda:	b90b      	cbnz	r3, 8013de0 <_puts_r+0x10>
 8013ddc:	f7ff ffb0 	bl	8013d40 <__sinit>
 8013de0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013de2:	07db      	lsls	r3, r3, #31
 8013de4:	d405      	bmi.n	8013df2 <_puts_r+0x22>
 8013de6:	89a3      	ldrh	r3, [r4, #12]
 8013de8:	0598      	lsls	r0, r3, #22
 8013dea:	d402      	bmi.n	8013df2 <_puts_r+0x22>
 8013dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013dee:	f000 f9a2 	bl	8014136 <__retarget_lock_acquire_recursive>
 8013df2:	89a3      	ldrh	r3, [r4, #12]
 8013df4:	0719      	lsls	r1, r3, #28
 8013df6:	d502      	bpl.n	8013dfe <_puts_r+0x2e>
 8013df8:	6923      	ldr	r3, [r4, #16]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d135      	bne.n	8013e6a <_puts_r+0x9a>
 8013dfe:	4621      	mov	r1, r4
 8013e00:	4628      	mov	r0, r5
 8013e02:	f000 f8c5 	bl	8013f90 <__swsetup_r>
 8013e06:	b380      	cbz	r0, 8013e6a <_puts_r+0x9a>
 8013e08:	f04f 35ff 	mov.w	r5, #4294967295
 8013e0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e0e:	07da      	lsls	r2, r3, #31
 8013e10:	d405      	bmi.n	8013e1e <_puts_r+0x4e>
 8013e12:	89a3      	ldrh	r3, [r4, #12]
 8013e14:	059b      	lsls	r3, r3, #22
 8013e16:	d402      	bmi.n	8013e1e <_puts_r+0x4e>
 8013e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e1a:	f000 f98d 	bl	8014138 <__retarget_lock_release_recursive>
 8013e1e:	4628      	mov	r0, r5
 8013e20:	bd70      	pop	{r4, r5, r6, pc}
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	da04      	bge.n	8013e30 <_puts_r+0x60>
 8013e26:	69a2      	ldr	r2, [r4, #24]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	dc17      	bgt.n	8013e5c <_puts_r+0x8c>
 8013e2c:	290a      	cmp	r1, #10
 8013e2e:	d015      	beq.n	8013e5c <_puts_r+0x8c>
 8013e30:	6823      	ldr	r3, [r4, #0]
 8013e32:	1c5a      	adds	r2, r3, #1
 8013e34:	6022      	str	r2, [r4, #0]
 8013e36:	7019      	strb	r1, [r3, #0]
 8013e38:	68a3      	ldr	r3, [r4, #8]
 8013e3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013e3e:	3b01      	subs	r3, #1
 8013e40:	60a3      	str	r3, [r4, #8]
 8013e42:	2900      	cmp	r1, #0
 8013e44:	d1ed      	bne.n	8013e22 <_puts_r+0x52>
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	da11      	bge.n	8013e6e <_puts_r+0x9e>
 8013e4a:	4622      	mov	r2, r4
 8013e4c:	210a      	movs	r1, #10
 8013e4e:	4628      	mov	r0, r5
 8013e50:	f000 f85f 	bl	8013f12 <__swbuf_r>
 8013e54:	3001      	adds	r0, #1
 8013e56:	d0d7      	beq.n	8013e08 <_puts_r+0x38>
 8013e58:	250a      	movs	r5, #10
 8013e5a:	e7d7      	b.n	8013e0c <_puts_r+0x3c>
 8013e5c:	4622      	mov	r2, r4
 8013e5e:	4628      	mov	r0, r5
 8013e60:	f000 f857 	bl	8013f12 <__swbuf_r>
 8013e64:	3001      	adds	r0, #1
 8013e66:	d1e7      	bne.n	8013e38 <_puts_r+0x68>
 8013e68:	e7ce      	b.n	8013e08 <_puts_r+0x38>
 8013e6a:	3e01      	subs	r6, #1
 8013e6c:	e7e4      	b.n	8013e38 <_puts_r+0x68>
 8013e6e:	6823      	ldr	r3, [r4, #0]
 8013e70:	1c5a      	adds	r2, r3, #1
 8013e72:	6022      	str	r2, [r4, #0]
 8013e74:	220a      	movs	r2, #10
 8013e76:	701a      	strb	r2, [r3, #0]
 8013e78:	e7ee      	b.n	8013e58 <_puts_r+0x88>
	...

08013e7c <puts>:
 8013e7c:	4b02      	ldr	r3, [pc, #8]	@ (8013e88 <puts+0xc>)
 8013e7e:	4601      	mov	r1, r0
 8013e80:	6818      	ldr	r0, [r3, #0]
 8013e82:	f7ff bfa5 	b.w	8013dd0 <_puts_r>
 8013e86:	bf00      	nop
 8013e88:	2400012c 	.word	0x2400012c

08013e8c <__sread>:
 8013e8c:	b510      	push	{r4, lr}
 8013e8e:	460c      	mov	r4, r1
 8013e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e94:	f000 f900 	bl	8014098 <_read_r>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	bfab      	itete	ge
 8013e9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8013ea0:	181b      	addge	r3, r3, r0
 8013ea2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013ea6:	bfac      	ite	ge
 8013ea8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013eaa:	81a3      	strhlt	r3, [r4, #12]
 8013eac:	bd10      	pop	{r4, pc}

08013eae <__swrite>:
 8013eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb2:	461f      	mov	r7, r3
 8013eb4:	898b      	ldrh	r3, [r1, #12]
 8013eb6:	05db      	lsls	r3, r3, #23
 8013eb8:	4605      	mov	r5, r0
 8013eba:	460c      	mov	r4, r1
 8013ebc:	4616      	mov	r6, r2
 8013ebe:	d505      	bpl.n	8013ecc <__swrite+0x1e>
 8013ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ec4:	2302      	movs	r3, #2
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	f000 f8d4 	bl	8014074 <_lseek_r>
 8013ecc:	89a3      	ldrh	r3, [r4, #12]
 8013ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013ed6:	81a3      	strh	r3, [r4, #12]
 8013ed8:	4632      	mov	r2, r6
 8013eda:	463b      	mov	r3, r7
 8013edc:	4628      	mov	r0, r5
 8013ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee2:	f000 b8eb 	b.w	80140bc <_write_r>

08013ee6 <__sseek>:
 8013ee6:	b510      	push	{r4, lr}
 8013ee8:	460c      	mov	r4, r1
 8013eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eee:	f000 f8c1 	bl	8014074 <_lseek_r>
 8013ef2:	1c43      	adds	r3, r0, #1
 8013ef4:	89a3      	ldrh	r3, [r4, #12]
 8013ef6:	bf15      	itete	ne
 8013ef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013efa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013efe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013f02:	81a3      	strheq	r3, [r4, #12]
 8013f04:	bf18      	it	ne
 8013f06:	81a3      	strhne	r3, [r4, #12]
 8013f08:	bd10      	pop	{r4, pc}

08013f0a <__sclose>:
 8013f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f0e:	f000 b8a1 	b.w	8014054 <_close_r>

08013f12 <__swbuf_r>:
 8013f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f14:	460e      	mov	r6, r1
 8013f16:	4614      	mov	r4, r2
 8013f18:	4605      	mov	r5, r0
 8013f1a:	b118      	cbz	r0, 8013f24 <__swbuf_r+0x12>
 8013f1c:	6a03      	ldr	r3, [r0, #32]
 8013f1e:	b90b      	cbnz	r3, 8013f24 <__swbuf_r+0x12>
 8013f20:	f7ff ff0e 	bl	8013d40 <__sinit>
 8013f24:	69a3      	ldr	r3, [r4, #24]
 8013f26:	60a3      	str	r3, [r4, #8]
 8013f28:	89a3      	ldrh	r3, [r4, #12]
 8013f2a:	071a      	lsls	r2, r3, #28
 8013f2c:	d501      	bpl.n	8013f32 <__swbuf_r+0x20>
 8013f2e:	6923      	ldr	r3, [r4, #16]
 8013f30:	b943      	cbnz	r3, 8013f44 <__swbuf_r+0x32>
 8013f32:	4621      	mov	r1, r4
 8013f34:	4628      	mov	r0, r5
 8013f36:	f000 f82b 	bl	8013f90 <__swsetup_r>
 8013f3a:	b118      	cbz	r0, 8013f44 <__swbuf_r+0x32>
 8013f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8013f40:	4638      	mov	r0, r7
 8013f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f44:	6823      	ldr	r3, [r4, #0]
 8013f46:	6922      	ldr	r2, [r4, #16]
 8013f48:	1a98      	subs	r0, r3, r2
 8013f4a:	6963      	ldr	r3, [r4, #20]
 8013f4c:	b2f6      	uxtb	r6, r6
 8013f4e:	4283      	cmp	r3, r0
 8013f50:	4637      	mov	r7, r6
 8013f52:	dc05      	bgt.n	8013f60 <__swbuf_r+0x4e>
 8013f54:	4621      	mov	r1, r4
 8013f56:	4628      	mov	r0, r5
 8013f58:	f001 fd24 	bl	80159a4 <_fflush_r>
 8013f5c:	2800      	cmp	r0, #0
 8013f5e:	d1ed      	bne.n	8013f3c <__swbuf_r+0x2a>
 8013f60:	68a3      	ldr	r3, [r4, #8]
 8013f62:	3b01      	subs	r3, #1
 8013f64:	60a3      	str	r3, [r4, #8]
 8013f66:	6823      	ldr	r3, [r4, #0]
 8013f68:	1c5a      	adds	r2, r3, #1
 8013f6a:	6022      	str	r2, [r4, #0]
 8013f6c:	701e      	strb	r6, [r3, #0]
 8013f6e:	6962      	ldr	r2, [r4, #20]
 8013f70:	1c43      	adds	r3, r0, #1
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d004      	beq.n	8013f80 <__swbuf_r+0x6e>
 8013f76:	89a3      	ldrh	r3, [r4, #12]
 8013f78:	07db      	lsls	r3, r3, #31
 8013f7a:	d5e1      	bpl.n	8013f40 <__swbuf_r+0x2e>
 8013f7c:	2e0a      	cmp	r6, #10
 8013f7e:	d1df      	bne.n	8013f40 <__swbuf_r+0x2e>
 8013f80:	4621      	mov	r1, r4
 8013f82:	4628      	mov	r0, r5
 8013f84:	f001 fd0e 	bl	80159a4 <_fflush_r>
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d0d9      	beq.n	8013f40 <__swbuf_r+0x2e>
 8013f8c:	e7d6      	b.n	8013f3c <__swbuf_r+0x2a>
	...

08013f90 <__swsetup_r>:
 8013f90:	b538      	push	{r3, r4, r5, lr}
 8013f92:	4b29      	ldr	r3, [pc, #164]	@ (8014038 <__swsetup_r+0xa8>)
 8013f94:	4605      	mov	r5, r0
 8013f96:	6818      	ldr	r0, [r3, #0]
 8013f98:	460c      	mov	r4, r1
 8013f9a:	b118      	cbz	r0, 8013fa4 <__swsetup_r+0x14>
 8013f9c:	6a03      	ldr	r3, [r0, #32]
 8013f9e:	b90b      	cbnz	r3, 8013fa4 <__swsetup_r+0x14>
 8013fa0:	f7ff fece 	bl	8013d40 <__sinit>
 8013fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fa8:	0719      	lsls	r1, r3, #28
 8013faa:	d422      	bmi.n	8013ff2 <__swsetup_r+0x62>
 8013fac:	06da      	lsls	r2, r3, #27
 8013fae:	d407      	bmi.n	8013fc0 <__swsetup_r+0x30>
 8013fb0:	2209      	movs	r2, #9
 8013fb2:	602a      	str	r2, [r5, #0]
 8013fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013fb8:	81a3      	strh	r3, [r4, #12]
 8013fba:	f04f 30ff 	mov.w	r0, #4294967295
 8013fbe:	e033      	b.n	8014028 <__swsetup_r+0x98>
 8013fc0:	0758      	lsls	r0, r3, #29
 8013fc2:	d512      	bpl.n	8013fea <__swsetup_r+0x5a>
 8013fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013fc6:	b141      	cbz	r1, 8013fda <__swsetup_r+0x4a>
 8013fc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013fcc:	4299      	cmp	r1, r3
 8013fce:	d002      	beq.n	8013fd6 <__swsetup_r+0x46>
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	f000 fe9f 	bl	8014d14 <_free_r>
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8013fda:	89a3      	ldrh	r3, [r4, #12]
 8013fdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013fe0:	81a3      	strh	r3, [r4, #12]
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	6063      	str	r3, [r4, #4]
 8013fe6:	6923      	ldr	r3, [r4, #16]
 8013fe8:	6023      	str	r3, [r4, #0]
 8013fea:	89a3      	ldrh	r3, [r4, #12]
 8013fec:	f043 0308 	orr.w	r3, r3, #8
 8013ff0:	81a3      	strh	r3, [r4, #12]
 8013ff2:	6923      	ldr	r3, [r4, #16]
 8013ff4:	b94b      	cbnz	r3, 801400a <__swsetup_r+0x7a>
 8013ff6:	89a3      	ldrh	r3, [r4, #12]
 8013ff8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014000:	d003      	beq.n	801400a <__swsetup_r+0x7a>
 8014002:	4621      	mov	r1, r4
 8014004:	4628      	mov	r0, r5
 8014006:	f001 fd1b 	bl	8015a40 <__smakebuf_r>
 801400a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801400e:	f013 0201 	ands.w	r2, r3, #1
 8014012:	d00a      	beq.n	801402a <__swsetup_r+0x9a>
 8014014:	2200      	movs	r2, #0
 8014016:	60a2      	str	r2, [r4, #8]
 8014018:	6962      	ldr	r2, [r4, #20]
 801401a:	4252      	negs	r2, r2
 801401c:	61a2      	str	r2, [r4, #24]
 801401e:	6922      	ldr	r2, [r4, #16]
 8014020:	b942      	cbnz	r2, 8014034 <__swsetup_r+0xa4>
 8014022:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014026:	d1c5      	bne.n	8013fb4 <__swsetup_r+0x24>
 8014028:	bd38      	pop	{r3, r4, r5, pc}
 801402a:	0799      	lsls	r1, r3, #30
 801402c:	bf58      	it	pl
 801402e:	6962      	ldrpl	r2, [r4, #20]
 8014030:	60a2      	str	r2, [r4, #8]
 8014032:	e7f4      	b.n	801401e <__swsetup_r+0x8e>
 8014034:	2000      	movs	r0, #0
 8014036:	e7f7      	b.n	8014028 <__swsetup_r+0x98>
 8014038:	2400012c 	.word	0x2400012c

0801403c <memset>:
 801403c:	4402      	add	r2, r0
 801403e:	4603      	mov	r3, r0
 8014040:	4293      	cmp	r3, r2
 8014042:	d100      	bne.n	8014046 <memset+0xa>
 8014044:	4770      	bx	lr
 8014046:	f803 1b01 	strb.w	r1, [r3], #1
 801404a:	e7f9      	b.n	8014040 <memset+0x4>

0801404c <_localeconv_r>:
 801404c:	4800      	ldr	r0, [pc, #0]	@ (8014050 <_localeconv_r+0x4>)
 801404e:	4770      	bx	lr
 8014050:	2400026c 	.word	0x2400026c

08014054 <_close_r>:
 8014054:	b538      	push	{r3, r4, r5, lr}
 8014056:	4d06      	ldr	r5, [pc, #24]	@ (8014070 <_close_r+0x1c>)
 8014058:	2300      	movs	r3, #0
 801405a:	4604      	mov	r4, r0
 801405c:	4608      	mov	r0, r1
 801405e:	602b      	str	r3, [r5, #0]
 8014060:	f7ee f8a6 	bl	80021b0 <_close>
 8014064:	1c43      	adds	r3, r0, #1
 8014066:	d102      	bne.n	801406e <_close_r+0x1a>
 8014068:	682b      	ldr	r3, [r5, #0]
 801406a:	b103      	cbz	r3, 801406e <_close_r+0x1a>
 801406c:	6023      	str	r3, [r4, #0]
 801406e:	bd38      	pop	{r3, r4, r5, pc}
 8014070:	2400165c 	.word	0x2400165c

08014074 <_lseek_r>:
 8014074:	b538      	push	{r3, r4, r5, lr}
 8014076:	4d07      	ldr	r5, [pc, #28]	@ (8014094 <_lseek_r+0x20>)
 8014078:	4604      	mov	r4, r0
 801407a:	4608      	mov	r0, r1
 801407c:	4611      	mov	r1, r2
 801407e:	2200      	movs	r2, #0
 8014080:	602a      	str	r2, [r5, #0]
 8014082:	461a      	mov	r2, r3
 8014084:	f7ee f8bb 	bl	80021fe <_lseek>
 8014088:	1c43      	adds	r3, r0, #1
 801408a:	d102      	bne.n	8014092 <_lseek_r+0x1e>
 801408c:	682b      	ldr	r3, [r5, #0]
 801408e:	b103      	cbz	r3, 8014092 <_lseek_r+0x1e>
 8014090:	6023      	str	r3, [r4, #0]
 8014092:	bd38      	pop	{r3, r4, r5, pc}
 8014094:	2400165c 	.word	0x2400165c

08014098 <_read_r>:
 8014098:	b538      	push	{r3, r4, r5, lr}
 801409a:	4d07      	ldr	r5, [pc, #28]	@ (80140b8 <_read_r+0x20>)
 801409c:	4604      	mov	r4, r0
 801409e:	4608      	mov	r0, r1
 80140a0:	4611      	mov	r1, r2
 80140a2:	2200      	movs	r2, #0
 80140a4:	602a      	str	r2, [r5, #0]
 80140a6:	461a      	mov	r2, r3
 80140a8:	f7ee f865 	bl	8002176 <_read>
 80140ac:	1c43      	adds	r3, r0, #1
 80140ae:	d102      	bne.n	80140b6 <_read_r+0x1e>
 80140b0:	682b      	ldr	r3, [r5, #0]
 80140b2:	b103      	cbz	r3, 80140b6 <_read_r+0x1e>
 80140b4:	6023      	str	r3, [r4, #0]
 80140b6:	bd38      	pop	{r3, r4, r5, pc}
 80140b8:	2400165c 	.word	0x2400165c

080140bc <_write_r>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	4d07      	ldr	r5, [pc, #28]	@ (80140dc <_write_r+0x20>)
 80140c0:	4604      	mov	r4, r0
 80140c2:	4608      	mov	r0, r1
 80140c4:	4611      	mov	r1, r2
 80140c6:	2200      	movs	r2, #0
 80140c8:	602a      	str	r2, [r5, #0]
 80140ca:	461a      	mov	r2, r3
 80140cc:	f7ed f843 	bl	8001156 <_write>
 80140d0:	1c43      	adds	r3, r0, #1
 80140d2:	d102      	bne.n	80140da <_write_r+0x1e>
 80140d4:	682b      	ldr	r3, [r5, #0]
 80140d6:	b103      	cbz	r3, 80140da <_write_r+0x1e>
 80140d8:	6023      	str	r3, [r4, #0]
 80140da:	bd38      	pop	{r3, r4, r5, pc}
 80140dc:	2400165c 	.word	0x2400165c

080140e0 <__errno>:
 80140e0:	4b01      	ldr	r3, [pc, #4]	@ (80140e8 <__errno+0x8>)
 80140e2:	6818      	ldr	r0, [r3, #0]
 80140e4:	4770      	bx	lr
 80140e6:	bf00      	nop
 80140e8:	2400012c 	.word	0x2400012c

080140ec <__libc_init_array>:
 80140ec:	b570      	push	{r4, r5, r6, lr}
 80140ee:	4d0d      	ldr	r5, [pc, #52]	@ (8014124 <__libc_init_array+0x38>)
 80140f0:	4c0d      	ldr	r4, [pc, #52]	@ (8014128 <__libc_init_array+0x3c>)
 80140f2:	1b64      	subs	r4, r4, r5
 80140f4:	10a4      	asrs	r4, r4, #2
 80140f6:	2600      	movs	r6, #0
 80140f8:	42a6      	cmp	r6, r4
 80140fa:	d109      	bne.n	8014110 <__libc_init_array+0x24>
 80140fc:	4d0b      	ldr	r5, [pc, #44]	@ (801412c <__libc_init_array+0x40>)
 80140fe:	4c0c      	ldr	r4, [pc, #48]	@ (8014130 <__libc_init_array+0x44>)
 8014100:	f001 fdbc 	bl	8015c7c <_init>
 8014104:	1b64      	subs	r4, r4, r5
 8014106:	10a4      	asrs	r4, r4, #2
 8014108:	2600      	movs	r6, #0
 801410a:	42a6      	cmp	r6, r4
 801410c:	d105      	bne.n	801411a <__libc_init_array+0x2e>
 801410e:	bd70      	pop	{r4, r5, r6, pc}
 8014110:	f855 3b04 	ldr.w	r3, [r5], #4
 8014114:	4798      	blx	r3
 8014116:	3601      	adds	r6, #1
 8014118:	e7ee      	b.n	80140f8 <__libc_init_array+0xc>
 801411a:	f855 3b04 	ldr.w	r3, [r5], #4
 801411e:	4798      	blx	r3
 8014120:	3601      	adds	r6, #1
 8014122:	e7f2      	b.n	801410a <__libc_init_array+0x1e>
 8014124:	080161d0 	.word	0x080161d0
 8014128:	080161d0 	.word	0x080161d0
 801412c:	080161d0 	.word	0x080161d0
 8014130:	080161d4 	.word	0x080161d4

08014134 <__retarget_lock_init_recursive>:
 8014134:	4770      	bx	lr

08014136 <__retarget_lock_acquire_recursive>:
 8014136:	4770      	bx	lr

08014138 <__retarget_lock_release_recursive>:
 8014138:	4770      	bx	lr

0801413a <memcpy>:
 801413a:	440a      	add	r2, r1
 801413c:	4291      	cmp	r1, r2
 801413e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014142:	d100      	bne.n	8014146 <memcpy+0xc>
 8014144:	4770      	bx	lr
 8014146:	b510      	push	{r4, lr}
 8014148:	f811 4b01 	ldrb.w	r4, [r1], #1
 801414c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014150:	4291      	cmp	r1, r2
 8014152:	d1f9      	bne.n	8014148 <memcpy+0xe>
 8014154:	bd10      	pop	{r4, pc}

08014156 <quorem>:
 8014156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801415a:	6903      	ldr	r3, [r0, #16]
 801415c:	690c      	ldr	r4, [r1, #16]
 801415e:	42a3      	cmp	r3, r4
 8014160:	4607      	mov	r7, r0
 8014162:	db7e      	blt.n	8014262 <quorem+0x10c>
 8014164:	3c01      	subs	r4, #1
 8014166:	f101 0814 	add.w	r8, r1, #20
 801416a:	00a3      	lsls	r3, r4, #2
 801416c:	f100 0514 	add.w	r5, r0, #20
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014176:	9301      	str	r3, [sp, #4]
 8014178:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801417c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014180:	3301      	adds	r3, #1
 8014182:	429a      	cmp	r2, r3
 8014184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014188:	fbb2 f6f3 	udiv	r6, r2, r3
 801418c:	d32e      	bcc.n	80141ec <quorem+0x96>
 801418e:	f04f 0a00 	mov.w	sl, #0
 8014192:	46c4      	mov	ip, r8
 8014194:	46ae      	mov	lr, r5
 8014196:	46d3      	mov	fp, sl
 8014198:	f85c 3b04 	ldr.w	r3, [ip], #4
 801419c:	b298      	uxth	r0, r3
 801419e:	fb06 a000 	mla	r0, r6, r0, sl
 80141a2:	0c02      	lsrs	r2, r0, #16
 80141a4:	0c1b      	lsrs	r3, r3, #16
 80141a6:	fb06 2303 	mla	r3, r6, r3, r2
 80141aa:	f8de 2000 	ldr.w	r2, [lr]
 80141ae:	b280      	uxth	r0, r0
 80141b0:	b292      	uxth	r2, r2
 80141b2:	1a12      	subs	r2, r2, r0
 80141b4:	445a      	add	r2, fp
 80141b6:	f8de 0000 	ldr.w	r0, [lr]
 80141ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80141be:	b29b      	uxth	r3, r3
 80141c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80141c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80141c8:	b292      	uxth	r2, r2
 80141ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80141ce:	45e1      	cmp	r9, ip
 80141d0:	f84e 2b04 	str.w	r2, [lr], #4
 80141d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80141d8:	d2de      	bcs.n	8014198 <quorem+0x42>
 80141da:	9b00      	ldr	r3, [sp, #0]
 80141dc:	58eb      	ldr	r3, [r5, r3]
 80141de:	b92b      	cbnz	r3, 80141ec <quorem+0x96>
 80141e0:	9b01      	ldr	r3, [sp, #4]
 80141e2:	3b04      	subs	r3, #4
 80141e4:	429d      	cmp	r5, r3
 80141e6:	461a      	mov	r2, r3
 80141e8:	d32f      	bcc.n	801424a <quorem+0xf4>
 80141ea:	613c      	str	r4, [r7, #16]
 80141ec:	4638      	mov	r0, r7
 80141ee:	f001 f90b 	bl	8015408 <__mcmp>
 80141f2:	2800      	cmp	r0, #0
 80141f4:	db25      	blt.n	8014242 <quorem+0xec>
 80141f6:	4629      	mov	r1, r5
 80141f8:	2000      	movs	r0, #0
 80141fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80141fe:	f8d1 c000 	ldr.w	ip, [r1]
 8014202:	fa1f fe82 	uxth.w	lr, r2
 8014206:	fa1f f38c 	uxth.w	r3, ip
 801420a:	eba3 030e 	sub.w	r3, r3, lr
 801420e:	4403      	add	r3, r0
 8014210:	0c12      	lsrs	r2, r2, #16
 8014212:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014216:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801421a:	b29b      	uxth	r3, r3
 801421c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014220:	45c1      	cmp	r9, r8
 8014222:	f841 3b04 	str.w	r3, [r1], #4
 8014226:	ea4f 4022 	mov.w	r0, r2, asr #16
 801422a:	d2e6      	bcs.n	80141fa <quorem+0xa4>
 801422c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014230:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014234:	b922      	cbnz	r2, 8014240 <quorem+0xea>
 8014236:	3b04      	subs	r3, #4
 8014238:	429d      	cmp	r5, r3
 801423a:	461a      	mov	r2, r3
 801423c:	d30b      	bcc.n	8014256 <quorem+0x100>
 801423e:	613c      	str	r4, [r7, #16]
 8014240:	3601      	adds	r6, #1
 8014242:	4630      	mov	r0, r6
 8014244:	b003      	add	sp, #12
 8014246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424a:	6812      	ldr	r2, [r2, #0]
 801424c:	3b04      	subs	r3, #4
 801424e:	2a00      	cmp	r2, #0
 8014250:	d1cb      	bne.n	80141ea <quorem+0x94>
 8014252:	3c01      	subs	r4, #1
 8014254:	e7c6      	b.n	80141e4 <quorem+0x8e>
 8014256:	6812      	ldr	r2, [r2, #0]
 8014258:	3b04      	subs	r3, #4
 801425a:	2a00      	cmp	r2, #0
 801425c:	d1ef      	bne.n	801423e <quorem+0xe8>
 801425e:	3c01      	subs	r4, #1
 8014260:	e7ea      	b.n	8014238 <quorem+0xe2>
 8014262:	2000      	movs	r0, #0
 8014264:	e7ee      	b.n	8014244 <quorem+0xee>
	...

08014268 <_dtoa_r>:
 8014268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801426c:	ed2d 8b02 	vpush	{d8}
 8014270:	69c7      	ldr	r7, [r0, #28]
 8014272:	b091      	sub	sp, #68	@ 0x44
 8014274:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014278:	ec55 4b10 	vmov	r4, r5, d0
 801427c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801427e:	9107      	str	r1, [sp, #28]
 8014280:	4681      	mov	r9, r0
 8014282:	9209      	str	r2, [sp, #36]	@ 0x24
 8014284:	930d      	str	r3, [sp, #52]	@ 0x34
 8014286:	b97f      	cbnz	r7, 80142a8 <_dtoa_r+0x40>
 8014288:	2010      	movs	r0, #16
 801428a:	f000 fd8d 	bl	8014da8 <malloc>
 801428e:	4602      	mov	r2, r0
 8014290:	f8c9 001c 	str.w	r0, [r9, #28]
 8014294:	b920      	cbnz	r0, 80142a0 <_dtoa_r+0x38>
 8014296:	4ba0      	ldr	r3, [pc, #640]	@ (8014518 <_dtoa_r+0x2b0>)
 8014298:	21ef      	movs	r1, #239	@ 0xef
 801429a:	48a0      	ldr	r0, [pc, #640]	@ (801451c <_dtoa_r+0x2b4>)
 801429c:	f001 fc3e 	bl	8015b1c <__assert_func>
 80142a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80142a4:	6007      	str	r7, [r0, #0]
 80142a6:	60c7      	str	r7, [r0, #12]
 80142a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80142ac:	6819      	ldr	r1, [r3, #0]
 80142ae:	b159      	cbz	r1, 80142c8 <_dtoa_r+0x60>
 80142b0:	685a      	ldr	r2, [r3, #4]
 80142b2:	604a      	str	r2, [r1, #4]
 80142b4:	2301      	movs	r3, #1
 80142b6:	4093      	lsls	r3, r2
 80142b8:	608b      	str	r3, [r1, #8]
 80142ba:	4648      	mov	r0, r9
 80142bc:	f000 fe6a 	bl	8014f94 <_Bfree>
 80142c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80142c4:	2200      	movs	r2, #0
 80142c6:	601a      	str	r2, [r3, #0]
 80142c8:	1e2b      	subs	r3, r5, #0
 80142ca:	bfbb      	ittet	lt
 80142cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80142d0:	9303      	strlt	r3, [sp, #12]
 80142d2:	2300      	movge	r3, #0
 80142d4:	2201      	movlt	r2, #1
 80142d6:	bfac      	ite	ge
 80142d8:	6033      	strge	r3, [r6, #0]
 80142da:	6032      	strlt	r2, [r6, #0]
 80142dc:	4b90      	ldr	r3, [pc, #576]	@ (8014520 <_dtoa_r+0x2b8>)
 80142de:	9e03      	ldr	r6, [sp, #12]
 80142e0:	43b3      	bics	r3, r6
 80142e2:	d110      	bne.n	8014306 <_dtoa_r+0x9e>
 80142e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80142e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80142ea:	6013      	str	r3, [r2, #0]
 80142ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80142f0:	4323      	orrs	r3, r4
 80142f2:	f000 84de 	beq.w	8014cb2 <_dtoa_r+0xa4a>
 80142f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80142f8:	4f8a      	ldr	r7, [pc, #552]	@ (8014524 <_dtoa_r+0x2bc>)
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	f000 84e0 	beq.w	8014cc0 <_dtoa_r+0xa58>
 8014300:	1cfb      	adds	r3, r7, #3
 8014302:	f000 bcdb 	b.w	8014cbc <_dtoa_r+0xa54>
 8014306:	ed9d 8b02 	vldr	d8, [sp, #8]
 801430a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014312:	d10a      	bne.n	801432a <_dtoa_r+0xc2>
 8014314:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014316:	2301      	movs	r3, #1
 8014318:	6013      	str	r3, [r2, #0]
 801431a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801431c:	b113      	cbz	r3, 8014324 <_dtoa_r+0xbc>
 801431e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014320:	4b81      	ldr	r3, [pc, #516]	@ (8014528 <_dtoa_r+0x2c0>)
 8014322:	6013      	str	r3, [r2, #0]
 8014324:	4f81      	ldr	r7, [pc, #516]	@ (801452c <_dtoa_r+0x2c4>)
 8014326:	f000 bccb 	b.w	8014cc0 <_dtoa_r+0xa58>
 801432a:	aa0e      	add	r2, sp, #56	@ 0x38
 801432c:	a90f      	add	r1, sp, #60	@ 0x3c
 801432e:	4648      	mov	r0, r9
 8014330:	eeb0 0b48 	vmov.f64	d0, d8
 8014334:	f001 f918 	bl	8015568 <__d2b>
 8014338:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801433c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801433e:	9001      	str	r0, [sp, #4]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d045      	beq.n	80143d0 <_dtoa_r+0x168>
 8014344:	eeb0 7b48 	vmov.f64	d7, d8
 8014348:	ee18 1a90 	vmov	r1, s17
 801434c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014350:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014354:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014358:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801435c:	2500      	movs	r5, #0
 801435e:	ee07 1a90 	vmov	s15, r1
 8014362:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014366:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014500 <_dtoa_r+0x298>
 801436a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801436e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8014508 <_dtoa_r+0x2a0>
 8014372:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014376:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014510 <_dtoa_r+0x2a8>
 801437a:	ee07 3a90 	vmov	s15, r3
 801437e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014382:	eeb0 7b46 	vmov.f64	d7, d6
 8014386:	eea4 7b05 	vfma.f64	d7, d4, d5
 801438a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801438e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014396:	ee16 8a90 	vmov	r8, s13
 801439a:	d508      	bpl.n	80143ae <_dtoa_r+0x146>
 801439c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80143a0:	eeb4 6b47 	vcmp.f64	d6, d7
 80143a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a8:	bf18      	it	ne
 80143aa:	f108 38ff 	addne.w	r8, r8, #4294967295
 80143ae:	f1b8 0f16 	cmp.w	r8, #22
 80143b2:	d82b      	bhi.n	801440c <_dtoa_r+0x1a4>
 80143b4:	495e      	ldr	r1, [pc, #376]	@ (8014530 <_dtoa_r+0x2c8>)
 80143b6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80143ba:	ed91 7b00 	vldr	d7, [r1]
 80143be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80143c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c6:	d501      	bpl.n	80143cc <_dtoa_r+0x164>
 80143c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80143cc:	2100      	movs	r1, #0
 80143ce:	e01e      	b.n	801440e <_dtoa_r+0x1a6>
 80143d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143d2:	4413      	add	r3, r2
 80143d4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80143d8:	2920      	cmp	r1, #32
 80143da:	bfc1      	itttt	gt
 80143dc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80143e0:	408e      	lslgt	r6, r1
 80143e2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80143e6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80143ea:	bfd6      	itet	le
 80143ec:	f1c1 0120 	rsble	r1, r1, #32
 80143f0:	4331      	orrgt	r1, r6
 80143f2:	fa04 f101 	lslle.w	r1, r4, r1
 80143f6:	ee07 1a90 	vmov	s15, r1
 80143fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80143fe:	3b01      	subs	r3, #1
 8014400:	ee17 1a90 	vmov	r1, s15
 8014404:	2501      	movs	r5, #1
 8014406:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801440a:	e7a8      	b.n	801435e <_dtoa_r+0xf6>
 801440c:	2101      	movs	r1, #1
 801440e:	1ad2      	subs	r2, r2, r3
 8014410:	1e53      	subs	r3, r2, #1
 8014412:	9306      	str	r3, [sp, #24]
 8014414:	bf45      	ittet	mi
 8014416:	f1c2 0301 	rsbmi	r3, r2, #1
 801441a:	9305      	strmi	r3, [sp, #20]
 801441c:	2300      	movpl	r3, #0
 801441e:	2300      	movmi	r3, #0
 8014420:	bf4c      	ite	mi
 8014422:	9306      	strmi	r3, [sp, #24]
 8014424:	9305      	strpl	r3, [sp, #20]
 8014426:	f1b8 0f00 	cmp.w	r8, #0
 801442a:	910c      	str	r1, [sp, #48]	@ 0x30
 801442c:	db18      	blt.n	8014460 <_dtoa_r+0x1f8>
 801442e:	9b06      	ldr	r3, [sp, #24]
 8014430:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8014434:	4443      	add	r3, r8
 8014436:	9306      	str	r3, [sp, #24]
 8014438:	2300      	movs	r3, #0
 801443a:	9a07      	ldr	r2, [sp, #28]
 801443c:	2a09      	cmp	r2, #9
 801443e:	d849      	bhi.n	80144d4 <_dtoa_r+0x26c>
 8014440:	2a05      	cmp	r2, #5
 8014442:	bfc4      	itt	gt
 8014444:	3a04      	subgt	r2, #4
 8014446:	9207      	strgt	r2, [sp, #28]
 8014448:	9a07      	ldr	r2, [sp, #28]
 801444a:	f1a2 0202 	sub.w	r2, r2, #2
 801444e:	bfcc      	ite	gt
 8014450:	2400      	movgt	r4, #0
 8014452:	2401      	movle	r4, #1
 8014454:	2a03      	cmp	r2, #3
 8014456:	d848      	bhi.n	80144ea <_dtoa_r+0x282>
 8014458:	e8df f002 	tbb	[pc, r2]
 801445c:	3a2c2e0b 	.word	0x3a2c2e0b
 8014460:	9b05      	ldr	r3, [sp, #20]
 8014462:	2200      	movs	r2, #0
 8014464:	eba3 0308 	sub.w	r3, r3, r8
 8014468:	9305      	str	r3, [sp, #20]
 801446a:	920a      	str	r2, [sp, #40]	@ 0x28
 801446c:	f1c8 0300 	rsb	r3, r8, #0
 8014470:	e7e3      	b.n	801443a <_dtoa_r+0x1d2>
 8014472:	2200      	movs	r2, #0
 8014474:	9208      	str	r2, [sp, #32]
 8014476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014478:	2a00      	cmp	r2, #0
 801447a:	dc39      	bgt.n	80144f0 <_dtoa_r+0x288>
 801447c:	f04f 0b01 	mov.w	fp, #1
 8014480:	46da      	mov	sl, fp
 8014482:	465a      	mov	r2, fp
 8014484:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014488:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801448c:	2100      	movs	r1, #0
 801448e:	2004      	movs	r0, #4
 8014490:	f100 0614 	add.w	r6, r0, #20
 8014494:	4296      	cmp	r6, r2
 8014496:	d930      	bls.n	80144fa <_dtoa_r+0x292>
 8014498:	6079      	str	r1, [r7, #4]
 801449a:	4648      	mov	r0, r9
 801449c:	9304      	str	r3, [sp, #16]
 801449e:	f000 fd39 	bl	8014f14 <_Balloc>
 80144a2:	9b04      	ldr	r3, [sp, #16]
 80144a4:	4607      	mov	r7, r0
 80144a6:	2800      	cmp	r0, #0
 80144a8:	d146      	bne.n	8014538 <_dtoa_r+0x2d0>
 80144aa:	4b22      	ldr	r3, [pc, #136]	@ (8014534 <_dtoa_r+0x2cc>)
 80144ac:	4602      	mov	r2, r0
 80144ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80144b2:	e6f2      	b.n	801429a <_dtoa_r+0x32>
 80144b4:	2201      	movs	r2, #1
 80144b6:	e7dd      	b.n	8014474 <_dtoa_r+0x20c>
 80144b8:	2200      	movs	r2, #0
 80144ba:	9208      	str	r2, [sp, #32]
 80144bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144be:	eb08 0b02 	add.w	fp, r8, r2
 80144c2:	f10b 0a01 	add.w	sl, fp, #1
 80144c6:	4652      	mov	r2, sl
 80144c8:	2a01      	cmp	r2, #1
 80144ca:	bfb8      	it	lt
 80144cc:	2201      	movlt	r2, #1
 80144ce:	e7db      	b.n	8014488 <_dtoa_r+0x220>
 80144d0:	2201      	movs	r2, #1
 80144d2:	e7f2      	b.n	80144ba <_dtoa_r+0x252>
 80144d4:	2401      	movs	r4, #1
 80144d6:	2200      	movs	r2, #0
 80144d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80144dc:	f04f 3bff 	mov.w	fp, #4294967295
 80144e0:	2100      	movs	r1, #0
 80144e2:	46da      	mov	sl, fp
 80144e4:	2212      	movs	r2, #18
 80144e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80144e8:	e7ce      	b.n	8014488 <_dtoa_r+0x220>
 80144ea:	2201      	movs	r2, #1
 80144ec:	9208      	str	r2, [sp, #32]
 80144ee:	e7f5      	b.n	80144dc <_dtoa_r+0x274>
 80144f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80144f4:	46da      	mov	sl, fp
 80144f6:	465a      	mov	r2, fp
 80144f8:	e7c6      	b.n	8014488 <_dtoa_r+0x220>
 80144fa:	3101      	adds	r1, #1
 80144fc:	0040      	lsls	r0, r0, #1
 80144fe:	e7c7      	b.n	8014490 <_dtoa_r+0x228>
 8014500:	636f4361 	.word	0x636f4361
 8014504:	3fd287a7 	.word	0x3fd287a7
 8014508:	8b60c8b3 	.word	0x8b60c8b3
 801450c:	3fc68a28 	.word	0x3fc68a28
 8014510:	509f79fb 	.word	0x509f79fb
 8014514:	3fd34413 	.word	0x3fd34413
 8014518:	08015e95 	.word	0x08015e95
 801451c:	08015eac 	.word	0x08015eac
 8014520:	7ff00000 	.word	0x7ff00000
 8014524:	08015e91 	.word	0x08015e91
 8014528:	08015e65 	.word	0x08015e65
 801452c:	08015e64 	.word	0x08015e64
 8014530:	08015fa8 	.word	0x08015fa8
 8014534:	08015f04 	.word	0x08015f04
 8014538:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801453c:	f1ba 0f0e 	cmp.w	sl, #14
 8014540:	6010      	str	r0, [r2, #0]
 8014542:	d86f      	bhi.n	8014624 <_dtoa_r+0x3bc>
 8014544:	2c00      	cmp	r4, #0
 8014546:	d06d      	beq.n	8014624 <_dtoa_r+0x3bc>
 8014548:	f1b8 0f00 	cmp.w	r8, #0
 801454c:	f340 80c2 	ble.w	80146d4 <_dtoa_r+0x46c>
 8014550:	4aca      	ldr	r2, [pc, #808]	@ (801487c <_dtoa_r+0x614>)
 8014552:	f008 010f 	and.w	r1, r8, #15
 8014556:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801455a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801455e:	ed92 7b00 	vldr	d7, [r2]
 8014562:	ea4f 1128 	mov.w	r1, r8, asr #4
 8014566:	f000 80a9 	beq.w	80146bc <_dtoa_r+0x454>
 801456a:	4ac5      	ldr	r2, [pc, #788]	@ (8014880 <_dtoa_r+0x618>)
 801456c:	ed92 6b08 	vldr	d6, [r2, #32]
 8014570:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014574:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014578:	f001 010f 	and.w	r1, r1, #15
 801457c:	2203      	movs	r2, #3
 801457e:	48c0      	ldr	r0, [pc, #768]	@ (8014880 <_dtoa_r+0x618>)
 8014580:	2900      	cmp	r1, #0
 8014582:	f040 809d 	bne.w	80146c0 <_dtoa_r+0x458>
 8014586:	ed9d 6b02 	vldr	d6, [sp, #8]
 801458a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801458e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014592:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014594:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014598:	2900      	cmp	r1, #0
 801459a:	f000 80c1 	beq.w	8014720 <_dtoa_r+0x4b8>
 801459e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80145a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80145a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145aa:	f140 80b9 	bpl.w	8014720 <_dtoa_r+0x4b8>
 80145ae:	f1ba 0f00 	cmp.w	sl, #0
 80145b2:	f000 80b5 	beq.w	8014720 <_dtoa_r+0x4b8>
 80145b6:	f1bb 0f00 	cmp.w	fp, #0
 80145ba:	dd31      	ble.n	8014620 <_dtoa_r+0x3b8>
 80145bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80145c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80145c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80145c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80145cc:	9104      	str	r1, [sp, #16]
 80145ce:	3201      	adds	r2, #1
 80145d0:	465c      	mov	r4, fp
 80145d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80145d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80145da:	ee07 2a90 	vmov	s15, r2
 80145de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80145e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80145e6:	ee15 2a90 	vmov	r2, s11
 80145ea:	ec51 0b15 	vmov	r0, r1, d5
 80145ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80145f2:	2c00      	cmp	r4, #0
 80145f4:	f040 8098 	bne.w	8014728 <_dtoa_r+0x4c0>
 80145f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80145fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014600:	ec41 0b17 	vmov	d7, r0, r1
 8014604:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801460c:	f300 8261 	bgt.w	8014ad2 <_dtoa_r+0x86a>
 8014610:	eeb1 7b47 	vneg.f64	d7, d7
 8014614:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461c:	f100 80f5 	bmi.w	801480a <_dtoa_r+0x5a2>
 8014620:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014624:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014626:	2a00      	cmp	r2, #0
 8014628:	f2c0 812c 	blt.w	8014884 <_dtoa_r+0x61c>
 801462c:	f1b8 0f0e 	cmp.w	r8, #14
 8014630:	f300 8128 	bgt.w	8014884 <_dtoa_r+0x61c>
 8014634:	4b91      	ldr	r3, [pc, #580]	@ (801487c <_dtoa_r+0x614>)
 8014636:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801463a:	ed93 6b00 	vldr	d6, [r3]
 801463e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014640:	2b00      	cmp	r3, #0
 8014642:	da03      	bge.n	801464c <_dtoa_r+0x3e4>
 8014644:	f1ba 0f00 	cmp.w	sl, #0
 8014648:	f340 80d2 	ble.w	80147f0 <_dtoa_r+0x588>
 801464c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8014650:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014654:	463e      	mov	r6, r7
 8014656:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801465a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801465e:	ee15 3a10 	vmov	r3, s10
 8014662:	3330      	adds	r3, #48	@ 0x30
 8014664:	f806 3b01 	strb.w	r3, [r6], #1
 8014668:	1bf3      	subs	r3, r6, r7
 801466a:	459a      	cmp	sl, r3
 801466c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014670:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014674:	f040 80f8 	bne.w	8014868 <_dtoa_r+0x600>
 8014678:	ee37 7b07 	vadd.f64	d7, d7, d7
 801467c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014684:	f300 80dd 	bgt.w	8014842 <_dtoa_r+0x5da>
 8014688:	eeb4 7b46 	vcmp.f64	d7, d6
 801468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014690:	d104      	bne.n	801469c <_dtoa_r+0x434>
 8014692:	ee15 3a10 	vmov	r3, s10
 8014696:	07db      	lsls	r3, r3, #31
 8014698:	f100 80d3 	bmi.w	8014842 <_dtoa_r+0x5da>
 801469c:	9901      	ldr	r1, [sp, #4]
 801469e:	4648      	mov	r0, r9
 80146a0:	f000 fc78 	bl	8014f94 <_Bfree>
 80146a4:	2300      	movs	r3, #0
 80146a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80146a8:	7033      	strb	r3, [r6, #0]
 80146aa:	f108 0301 	add.w	r3, r8, #1
 80146ae:	6013      	str	r3, [r2, #0]
 80146b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	f000 8304 	beq.w	8014cc0 <_dtoa_r+0xa58>
 80146b8:	601e      	str	r6, [r3, #0]
 80146ba:	e301      	b.n	8014cc0 <_dtoa_r+0xa58>
 80146bc:	2202      	movs	r2, #2
 80146be:	e75e      	b.n	801457e <_dtoa_r+0x316>
 80146c0:	07cc      	lsls	r4, r1, #31
 80146c2:	d504      	bpl.n	80146ce <_dtoa_r+0x466>
 80146c4:	ed90 6b00 	vldr	d6, [r0]
 80146c8:	3201      	adds	r2, #1
 80146ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80146ce:	1049      	asrs	r1, r1, #1
 80146d0:	3008      	adds	r0, #8
 80146d2:	e755      	b.n	8014580 <_dtoa_r+0x318>
 80146d4:	d022      	beq.n	801471c <_dtoa_r+0x4b4>
 80146d6:	f1c8 0100 	rsb	r1, r8, #0
 80146da:	4a68      	ldr	r2, [pc, #416]	@ (801487c <_dtoa_r+0x614>)
 80146dc:	f001 000f 	and.w	r0, r1, #15
 80146e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80146e4:	ed92 7b00 	vldr	d7, [r2]
 80146e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80146ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80146f0:	4863      	ldr	r0, [pc, #396]	@ (8014880 <_dtoa_r+0x618>)
 80146f2:	1109      	asrs	r1, r1, #4
 80146f4:	2400      	movs	r4, #0
 80146f6:	2202      	movs	r2, #2
 80146f8:	b929      	cbnz	r1, 8014706 <_dtoa_r+0x49e>
 80146fa:	2c00      	cmp	r4, #0
 80146fc:	f43f af49 	beq.w	8014592 <_dtoa_r+0x32a>
 8014700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014704:	e745      	b.n	8014592 <_dtoa_r+0x32a>
 8014706:	07ce      	lsls	r6, r1, #31
 8014708:	d505      	bpl.n	8014716 <_dtoa_r+0x4ae>
 801470a:	ed90 6b00 	vldr	d6, [r0]
 801470e:	3201      	adds	r2, #1
 8014710:	2401      	movs	r4, #1
 8014712:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014716:	1049      	asrs	r1, r1, #1
 8014718:	3008      	adds	r0, #8
 801471a:	e7ed      	b.n	80146f8 <_dtoa_r+0x490>
 801471c:	2202      	movs	r2, #2
 801471e:	e738      	b.n	8014592 <_dtoa_r+0x32a>
 8014720:	f8cd 8010 	str.w	r8, [sp, #16]
 8014724:	4654      	mov	r4, sl
 8014726:	e754      	b.n	80145d2 <_dtoa_r+0x36a>
 8014728:	4a54      	ldr	r2, [pc, #336]	@ (801487c <_dtoa_r+0x614>)
 801472a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801472e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014732:	9a08      	ldr	r2, [sp, #32]
 8014734:	ec41 0b17 	vmov	d7, r0, r1
 8014738:	443c      	add	r4, r7
 801473a:	b34a      	cbz	r2, 8014790 <_dtoa_r+0x528>
 801473c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8014740:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8014744:	463e      	mov	r6, r7
 8014746:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801474a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801474e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014752:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014756:	ee14 2a90 	vmov	r2, s9
 801475a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801475e:	3230      	adds	r2, #48	@ 0x30
 8014760:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014764:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801476c:	f806 2b01 	strb.w	r2, [r6], #1
 8014770:	d438      	bmi.n	80147e4 <_dtoa_r+0x57c>
 8014772:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014776:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477e:	d462      	bmi.n	8014846 <_dtoa_r+0x5de>
 8014780:	42a6      	cmp	r6, r4
 8014782:	f43f af4d 	beq.w	8014620 <_dtoa_r+0x3b8>
 8014786:	ee27 7b03 	vmul.f64	d7, d7, d3
 801478a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801478e:	e7e0      	b.n	8014752 <_dtoa_r+0x4ea>
 8014790:	4621      	mov	r1, r4
 8014792:	463e      	mov	r6, r7
 8014794:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014798:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801479c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80147a0:	ee14 2a90 	vmov	r2, s9
 80147a4:	3230      	adds	r2, #48	@ 0x30
 80147a6:	f806 2b01 	strb.w	r2, [r6], #1
 80147aa:	42a6      	cmp	r6, r4
 80147ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80147b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80147b4:	d119      	bne.n	80147ea <_dtoa_r+0x582>
 80147b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80147ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 80147be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80147c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147c6:	dc3e      	bgt.n	8014846 <_dtoa_r+0x5de>
 80147c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80147cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80147d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d4:	f57f af24 	bpl.w	8014620 <_dtoa_r+0x3b8>
 80147d8:	460e      	mov	r6, r1
 80147da:	3901      	subs	r1, #1
 80147dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80147e0:	2b30      	cmp	r3, #48	@ 0x30
 80147e2:	d0f9      	beq.n	80147d8 <_dtoa_r+0x570>
 80147e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80147e8:	e758      	b.n	801469c <_dtoa_r+0x434>
 80147ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80147ee:	e7d5      	b.n	801479c <_dtoa_r+0x534>
 80147f0:	d10b      	bne.n	801480a <_dtoa_r+0x5a2>
 80147f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80147f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80147fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80147fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014806:	f2c0 8161 	blt.w	8014acc <_dtoa_r+0x864>
 801480a:	2400      	movs	r4, #0
 801480c:	4625      	mov	r5, r4
 801480e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014810:	43db      	mvns	r3, r3
 8014812:	9304      	str	r3, [sp, #16]
 8014814:	463e      	mov	r6, r7
 8014816:	f04f 0800 	mov.w	r8, #0
 801481a:	4621      	mov	r1, r4
 801481c:	4648      	mov	r0, r9
 801481e:	f000 fbb9 	bl	8014f94 <_Bfree>
 8014822:	2d00      	cmp	r5, #0
 8014824:	d0de      	beq.n	80147e4 <_dtoa_r+0x57c>
 8014826:	f1b8 0f00 	cmp.w	r8, #0
 801482a:	d005      	beq.n	8014838 <_dtoa_r+0x5d0>
 801482c:	45a8      	cmp	r8, r5
 801482e:	d003      	beq.n	8014838 <_dtoa_r+0x5d0>
 8014830:	4641      	mov	r1, r8
 8014832:	4648      	mov	r0, r9
 8014834:	f000 fbae 	bl	8014f94 <_Bfree>
 8014838:	4629      	mov	r1, r5
 801483a:	4648      	mov	r0, r9
 801483c:	f000 fbaa 	bl	8014f94 <_Bfree>
 8014840:	e7d0      	b.n	80147e4 <_dtoa_r+0x57c>
 8014842:	f8cd 8010 	str.w	r8, [sp, #16]
 8014846:	4633      	mov	r3, r6
 8014848:	461e      	mov	r6, r3
 801484a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801484e:	2a39      	cmp	r2, #57	@ 0x39
 8014850:	d106      	bne.n	8014860 <_dtoa_r+0x5f8>
 8014852:	429f      	cmp	r7, r3
 8014854:	d1f8      	bne.n	8014848 <_dtoa_r+0x5e0>
 8014856:	9a04      	ldr	r2, [sp, #16]
 8014858:	3201      	adds	r2, #1
 801485a:	9204      	str	r2, [sp, #16]
 801485c:	2230      	movs	r2, #48	@ 0x30
 801485e:	703a      	strb	r2, [r7, #0]
 8014860:	781a      	ldrb	r2, [r3, #0]
 8014862:	3201      	adds	r2, #1
 8014864:	701a      	strb	r2, [r3, #0]
 8014866:	e7bd      	b.n	80147e4 <_dtoa_r+0x57c>
 8014868:	ee27 7b04 	vmul.f64	d7, d7, d4
 801486c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014874:	f47f aeef 	bne.w	8014656 <_dtoa_r+0x3ee>
 8014878:	e710      	b.n	801469c <_dtoa_r+0x434>
 801487a:	bf00      	nop
 801487c:	08015fa8 	.word	0x08015fa8
 8014880:	08015f80 	.word	0x08015f80
 8014884:	9908      	ldr	r1, [sp, #32]
 8014886:	2900      	cmp	r1, #0
 8014888:	f000 80e3 	beq.w	8014a52 <_dtoa_r+0x7ea>
 801488c:	9907      	ldr	r1, [sp, #28]
 801488e:	2901      	cmp	r1, #1
 8014890:	f300 80c8 	bgt.w	8014a24 <_dtoa_r+0x7bc>
 8014894:	2d00      	cmp	r5, #0
 8014896:	f000 80c1 	beq.w	8014a1c <_dtoa_r+0x7b4>
 801489a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801489e:	9e05      	ldr	r6, [sp, #20]
 80148a0:	461c      	mov	r4, r3
 80148a2:	9304      	str	r3, [sp, #16]
 80148a4:	9b05      	ldr	r3, [sp, #20]
 80148a6:	4413      	add	r3, r2
 80148a8:	9305      	str	r3, [sp, #20]
 80148aa:	9b06      	ldr	r3, [sp, #24]
 80148ac:	2101      	movs	r1, #1
 80148ae:	4413      	add	r3, r2
 80148b0:	4648      	mov	r0, r9
 80148b2:	9306      	str	r3, [sp, #24]
 80148b4:	f000 fc22 	bl	80150fc <__i2b>
 80148b8:	9b04      	ldr	r3, [sp, #16]
 80148ba:	4605      	mov	r5, r0
 80148bc:	b166      	cbz	r6, 80148d8 <_dtoa_r+0x670>
 80148be:	9a06      	ldr	r2, [sp, #24]
 80148c0:	2a00      	cmp	r2, #0
 80148c2:	dd09      	ble.n	80148d8 <_dtoa_r+0x670>
 80148c4:	42b2      	cmp	r2, r6
 80148c6:	9905      	ldr	r1, [sp, #20]
 80148c8:	bfa8      	it	ge
 80148ca:	4632      	movge	r2, r6
 80148cc:	1a89      	subs	r1, r1, r2
 80148ce:	9105      	str	r1, [sp, #20]
 80148d0:	9906      	ldr	r1, [sp, #24]
 80148d2:	1ab6      	subs	r6, r6, r2
 80148d4:	1a8a      	subs	r2, r1, r2
 80148d6:	9206      	str	r2, [sp, #24]
 80148d8:	b1fb      	cbz	r3, 801491a <_dtoa_r+0x6b2>
 80148da:	9a08      	ldr	r2, [sp, #32]
 80148dc:	2a00      	cmp	r2, #0
 80148de:	f000 80bc 	beq.w	8014a5a <_dtoa_r+0x7f2>
 80148e2:	b19c      	cbz	r4, 801490c <_dtoa_r+0x6a4>
 80148e4:	4629      	mov	r1, r5
 80148e6:	4622      	mov	r2, r4
 80148e8:	4648      	mov	r0, r9
 80148ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80148ec:	f000 fcc6 	bl	801527c <__pow5mult>
 80148f0:	9a01      	ldr	r2, [sp, #4]
 80148f2:	4601      	mov	r1, r0
 80148f4:	4605      	mov	r5, r0
 80148f6:	4648      	mov	r0, r9
 80148f8:	f000 fc16 	bl	8015128 <__multiply>
 80148fc:	9901      	ldr	r1, [sp, #4]
 80148fe:	9004      	str	r0, [sp, #16]
 8014900:	4648      	mov	r0, r9
 8014902:	f000 fb47 	bl	8014f94 <_Bfree>
 8014906:	9a04      	ldr	r2, [sp, #16]
 8014908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801490a:	9201      	str	r2, [sp, #4]
 801490c:	1b1a      	subs	r2, r3, r4
 801490e:	d004      	beq.n	801491a <_dtoa_r+0x6b2>
 8014910:	9901      	ldr	r1, [sp, #4]
 8014912:	4648      	mov	r0, r9
 8014914:	f000 fcb2 	bl	801527c <__pow5mult>
 8014918:	9001      	str	r0, [sp, #4]
 801491a:	2101      	movs	r1, #1
 801491c:	4648      	mov	r0, r9
 801491e:	f000 fbed 	bl	80150fc <__i2b>
 8014922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014924:	4604      	mov	r4, r0
 8014926:	2b00      	cmp	r3, #0
 8014928:	f000 81d0 	beq.w	8014ccc <_dtoa_r+0xa64>
 801492c:	461a      	mov	r2, r3
 801492e:	4601      	mov	r1, r0
 8014930:	4648      	mov	r0, r9
 8014932:	f000 fca3 	bl	801527c <__pow5mult>
 8014936:	9b07      	ldr	r3, [sp, #28]
 8014938:	2b01      	cmp	r3, #1
 801493a:	4604      	mov	r4, r0
 801493c:	f300 8095 	bgt.w	8014a6a <_dtoa_r+0x802>
 8014940:	9b02      	ldr	r3, [sp, #8]
 8014942:	2b00      	cmp	r3, #0
 8014944:	f040 808b 	bne.w	8014a5e <_dtoa_r+0x7f6>
 8014948:	9b03      	ldr	r3, [sp, #12]
 801494a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801494e:	2a00      	cmp	r2, #0
 8014950:	f040 8087 	bne.w	8014a62 <_dtoa_r+0x7fa>
 8014954:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014958:	0d12      	lsrs	r2, r2, #20
 801495a:	0512      	lsls	r2, r2, #20
 801495c:	2a00      	cmp	r2, #0
 801495e:	f000 8082 	beq.w	8014a66 <_dtoa_r+0x7fe>
 8014962:	9b05      	ldr	r3, [sp, #20]
 8014964:	3301      	adds	r3, #1
 8014966:	9305      	str	r3, [sp, #20]
 8014968:	9b06      	ldr	r3, [sp, #24]
 801496a:	3301      	adds	r3, #1
 801496c:	9306      	str	r3, [sp, #24]
 801496e:	2301      	movs	r3, #1
 8014970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014974:	2b00      	cmp	r3, #0
 8014976:	f000 81af 	beq.w	8014cd8 <_dtoa_r+0xa70>
 801497a:	6922      	ldr	r2, [r4, #16]
 801497c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014980:	6910      	ldr	r0, [r2, #16]
 8014982:	f000 fb6f 	bl	8015064 <__hi0bits>
 8014986:	f1c0 0020 	rsb	r0, r0, #32
 801498a:	9b06      	ldr	r3, [sp, #24]
 801498c:	4418      	add	r0, r3
 801498e:	f010 001f 	ands.w	r0, r0, #31
 8014992:	d076      	beq.n	8014a82 <_dtoa_r+0x81a>
 8014994:	f1c0 0220 	rsb	r2, r0, #32
 8014998:	2a04      	cmp	r2, #4
 801499a:	dd69      	ble.n	8014a70 <_dtoa_r+0x808>
 801499c:	9b05      	ldr	r3, [sp, #20]
 801499e:	f1c0 001c 	rsb	r0, r0, #28
 80149a2:	4403      	add	r3, r0
 80149a4:	9305      	str	r3, [sp, #20]
 80149a6:	9b06      	ldr	r3, [sp, #24]
 80149a8:	4406      	add	r6, r0
 80149aa:	4403      	add	r3, r0
 80149ac:	9306      	str	r3, [sp, #24]
 80149ae:	9b05      	ldr	r3, [sp, #20]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	dd05      	ble.n	80149c0 <_dtoa_r+0x758>
 80149b4:	9901      	ldr	r1, [sp, #4]
 80149b6:	461a      	mov	r2, r3
 80149b8:	4648      	mov	r0, r9
 80149ba:	f000 fcb9 	bl	8015330 <__lshift>
 80149be:	9001      	str	r0, [sp, #4]
 80149c0:	9b06      	ldr	r3, [sp, #24]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	dd05      	ble.n	80149d2 <_dtoa_r+0x76a>
 80149c6:	4621      	mov	r1, r4
 80149c8:	461a      	mov	r2, r3
 80149ca:	4648      	mov	r0, r9
 80149cc:	f000 fcb0 	bl	8015330 <__lshift>
 80149d0:	4604      	mov	r4, r0
 80149d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d056      	beq.n	8014a86 <_dtoa_r+0x81e>
 80149d8:	9801      	ldr	r0, [sp, #4]
 80149da:	4621      	mov	r1, r4
 80149dc:	f000 fd14 	bl	8015408 <__mcmp>
 80149e0:	2800      	cmp	r0, #0
 80149e2:	da50      	bge.n	8014a86 <_dtoa_r+0x81e>
 80149e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80149e8:	9304      	str	r3, [sp, #16]
 80149ea:	9901      	ldr	r1, [sp, #4]
 80149ec:	2300      	movs	r3, #0
 80149ee:	220a      	movs	r2, #10
 80149f0:	4648      	mov	r0, r9
 80149f2:	f000 faf1 	bl	8014fd8 <__multadd>
 80149f6:	9b08      	ldr	r3, [sp, #32]
 80149f8:	9001      	str	r0, [sp, #4]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	f000 816e 	beq.w	8014cdc <_dtoa_r+0xa74>
 8014a00:	4629      	mov	r1, r5
 8014a02:	2300      	movs	r3, #0
 8014a04:	220a      	movs	r2, #10
 8014a06:	4648      	mov	r0, r9
 8014a08:	f000 fae6 	bl	8014fd8 <__multadd>
 8014a0c:	f1bb 0f00 	cmp.w	fp, #0
 8014a10:	4605      	mov	r5, r0
 8014a12:	dc64      	bgt.n	8014ade <_dtoa_r+0x876>
 8014a14:	9b07      	ldr	r3, [sp, #28]
 8014a16:	2b02      	cmp	r3, #2
 8014a18:	dc3e      	bgt.n	8014a98 <_dtoa_r+0x830>
 8014a1a:	e060      	b.n	8014ade <_dtoa_r+0x876>
 8014a1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014a1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014a22:	e73c      	b.n	801489e <_dtoa_r+0x636>
 8014a24:	f10a 34ff 	add.w	r4, sl, #4294967295
 8014a28:	42a3      	cmp	r3, r4
 8014a2a:	bfbf      	itttt	lt
 8014a2c:	1ae2      	sublt	r2, r4, r3
 8014a2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014a30:	189b      	addlt	r3, r3, r2
 8014a32:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8014a34:	bfae      	itee	ge
 8014a36:	1b1c      	subge	r4, r3, r4
 8014a38:	4623      	movlt	r3, r4
 8014a3a:	2400      	movlt	r4, #0
 8014a3c:	f1ba 0f00 	cmp.w	sl, #0
 8014a40:	bfb5      	itete	lt
 8014a42:	9a05      	ldrlt	r2, [sp, #20]
 8014a44:	9e05      	ldrge	r6, [sp, #20]
 8014a46:	eba2 060a 	sublt.w	r6, r2, sl
 8014a4a:	4652      	movge	r2, sl
 8014a4c:	bfb8      	it	lt
 8014a4e:	2200      	movlt	r2, #0
 8014a50:	e727      	b.n	80148a2 <_dtoa_r+0x63a>
 8014a52:	9e05      	ldr	r6, [sp, #20]
 8014a54:	9d08      	ldr	r5, [sp, #32]
 8014a56:	461c      	mov	r4, r3
 8014a58:	e730      	b.n	80148bc <_dtoa_r+0x654>
 8014a5a:	461a      	mov	r2, r3
 8014a5c:	e758      	b.n	8014910 <_dtoa_r+0x6a8>
 8014a5e:	2300      	movs	r3, #0
 8014a60:	e786      	b.n	8014970 <_dtoa_r+0x708>
 8014a62:	9b02      	ldr	r3, [sp, #8]
 8014a64:	e784      	b.n	8014970 <_dtoa_r+0x708>
 8014a66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014a68:	e783      	b.n	8014972 <_dtoa_r+0x70a>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014a6e:	e784      	b.n	801497a <_dtoa_r+0x712>
 8014a70:	d09d      	beq.n	80149ae <_dtoa_r+0x746>
 8014a72:	9b05      	ldr	r3, [sp, #20]
 8014a74:	321c      	adds	r2, #28
 8014a76:	4413      	add	r3, r2
 8014a78:	9305      	str	r3, [sp, #20]
 8014a7a:	9b06      	ldr	r3, [sp, #24]
 8014a7c:	4416      	add	r6, r2
 8014a7e:	4413      	add	r3, r2
 8014a80:	e794      	b.n	80149ac <_dtoa_r+0x744>
 8014a82:	4602      	mov	r2, r0
 8014a84:	e7f5      	b.n	8014a72 <_dtoa_r+0x80a>
 8014a86:	f1ba 0f00 	cmp.w	sl, #0
 8014a8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8014a8e:	46d3      	mov	fp, sl
 8014a90:	dc21      	bgt.n	8014ad6 <_dtoa_r+0x86e>
 8014a92:	9b07      	ldr	r3, [sp, #28]
 8014a94:	2b02      	cmp	r3, #2
 8014a96:	dd1e      	ble.n	8014ad6 <_dtoa_r+0x86e>
 8014a98:	f1bb 0f00 	cmp.w	fp, #0
 8014a9c:	f47f aeb7 	bne.w	801480e <_dtoa_r+0x5a6>
 8014aa0:	4621      	mov	r1, r4
 8014aa2:	465b      	mov	r3, fp
 8014aa4:	2205      	movs	r2, #5
 8014aa6:	4648      	mov	r0, r9
 8014aa8:	f000 fa96 	bl	8014fd8 <__multadd>
 8014aac:	4601      	mov	r1, r0
 8014aae:	4604      	mov	r4, r0
 8014ab0:	9801      	ldr	r0, [sp, #4]
 8014ab2:	f000 fca9 	bl	8015408 <__mcmp>
 8014ab6:	2800      	cmp	r0, #0
 8014ab8:	f77f aea9 	ble.w	801480e <_dtoa_r+0x5a6>
 8014abc:	463e      	mov	r6, r7
 8014abe:	2331      	movs	r3, #49	@ 0x31
 8014ac0:	f806 3b01 	strb.w	r3, [r6], #1
 8014ac4:	9b04      	ldr	r3, [sp, #16]
 8014ac6:	3301      	adds	r3, #1
 8014ac8:	9304      	str	r3, [sp, #16]
 8014aca:	e6a4      	b.n	8014816 <_dtoa_r+0x5ae>
 8014acc:	f8cd 8010 	str.w	r8, [sp, #16]
 8014ad0:	4654      	mov	r4, sl
 8014ad2:	4625      	mov	r5, r4
 8014ad4:	e7f2      	b.n	8014abc <_dtoa_r+0x854>
 8014ad6:	9b08      	ldr	r3, [sp, #32]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	f000 8103 	beq.w	8014ce4 <_dtoa_r+0xa7c>
 8014ade:	2e00      	cmp	r6, #0
 8014ae0:	dd05      	ble.n	8014aee <_dtoa_r+0x886>
 8014ae2:	4629      	mov	r1, r5
 8014ae4:	4632      	mov	r2, r6
 8014ae6:	4648      	mov	r0, r9
 8014ae8:	f000 fc22 	bl	8015330 <__lshift>
 8014aec:	4605      	mov	r5, r0
 8014aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d058      	beq.n	8014ba6 <_dtoa_r+0x93e>
 8014af4:	6869      	ldr	r1, [r5, #4]
 8014af6:	4648      	mov	r0, r9
 8014af8:	f000 fa0c 	bl	8014f14 <_Balloc>
 8014afc:	4606      	mov	r6, r0
 8014afe:	b928      	cbnz	r0, 8014b0c <_dtoa_r+0x8a4>
 8014b00:	4b82      	ldr	r3, [pc, #520]	@ (8014d0c <_dtoa_r+0xaa4>)
 8014b02:	4602      	mov	r2, r0
 8014b04:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014b08:	f7ff bbc7 	b.w	801429a <_dtoa_r+0x32>
 8014b0c:	692a      	ldr	r2, [r5, #16]
 8014b0e:	3202      	adds	r2, #2
 8014b10:	0092      	lsls	r2, r2, #2
 8014b12:	f105 010c 	add.w	r1, r5, #12
 8014b16:	300c      	adds	r0, #12
 8014b18:	f7ff fb0f 	bl	801413a <memcpy>
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	4631      	mov	r1, r6
 8014b20:	4648      	mov	r0, r9
 8014b22:	f000 fc05 	bl	8015330 <__lshift>
 8014b26:	1c7b      	adds	r3, r7, #1
 8014b28:	9305      	str	r3, [sp, #20]
 8014b2a:	eb07 030b 	add.w	r3, r7, fp
 8014b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b30:	9b02      	ldr	r3, [sp, #8]
 8014b32:	f003 0301 	and.w	r3, r3, #1
 8014b36:	46a8      	mov	r8, r5
 8014b38:	9308      	str	r3, [sp, #32]
 8014b3a:	4605      	mov	r5, r0
 8014b3c:	9b05      	ldr	r3, [sp, #20]
 8014b3e:	9801      	ldr	r0, [sp, #4]
 8014b40:	4621      	mov	r1, r4
 8014b42:	f103 3bff 	add.w	fp, r3, #4294967295
 8014b46:	f7ff fb06 	bl	8014156 <quorem>
 8014b4a:	4641      	mov	r1, r8
 8014b4c:	9002      	str	r0, [sp, #8]
 8014b4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014b52:	9801      	ldr	r0, [sp, #4]
 8014b54:	f000 fc58 	bl	8015408 <__mcmp>
 8014b58:	462a      	mov	r2, r5
 8014b5a:	9006      	str	r0, [sp, #24]
 8014b5c:	4621      	mov	r1, r4
 8014b5e:	4648      	mov	r0, r9
 8014b60:	f000 fc6e 	bl	8015440 <__mdiff>
 8014b64:	68c2      	ldr	r2, [r0, #12]
 8014b66:	4606      	mov	r6, r0
 8014b68:	b9fa      	cbnz	r2, 8014baa <_dtoa_r+0x942>
 8014b6a:	4601      	mov	r1, r0
 8014b6c:	9801      	ldr	r0, [sp, #4]
 8014b6e:	f000 fc4b 	bl	8015408 <__mcmp>
 8014b72:	4602      	mov	r2, r0
 8014b74:	4631      	mov	r1, r6
 8014b76:	4648      	mov	r0, r9
 8014b78:	920a      	str	r2, [sp, #40]	@ 0x28
 8014b7a:	f000 fa0b 	bl	8014f94 <_Bfree>
 8014b7e:	9b07      	ldr	r3, [sp, #28]
 8014b80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014b82:	9e05      	ldr	r6, [sp, #20]
 8014b84:	ea43 0102 	orr.w	r1, r3, r2
 8014b88:	9b08      	ldr	r3, [sp, #32]
 8014b8a:	4319      	orrs	r1, r3
 8014b8c:	d10f      	bne.n	8014bae <_dtoa_r+0x946>
 8014b8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014b92:	d028      	beq.n	8014be6 <_dtoa_r+0x97e>
 8014b94:	9b06      	ldr	r3, [sp, #24]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	dd02      	ble.n	8014ba0 <_dtoa_r+0x938>
 8014b9a:	9b02      	ldr	r3, [sp, #8]
 8014b9c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8014ba0:	f88b a000 	strb.w	sl, [fp]
 8014ba4:	e639      	b.n	801481a <_dtoa_r+0x5b2>
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	e7bd      	b.n	8014b26 <_dtoa_r+0x8be>
 8014baa:	2201      	movs	r2, #1
 8014bac:	e7e2      	b.n	8014b74 <_dtoa_r+0x90c>
 8014bae:	9b06      	ldr	r3, [sp, #24]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	db04      	blt.n	8014bbe <_dtoa_r+0x956>
 8014bb4:	9907      	ldr	r1, [sp, #28]
 8014bb6:	430b      	orrs	r3, r1
 8014bb8:	9908      	ldr	r1, [sp, #32]
 8014bba:	430b      	orrs	r3, r1
 8014bbc:	d120      	bne.n	8014c00 <_dtoa_r+0x998>
 8014bbe:	2a00      	cmp	r2, #0
 8014bc0:	ddee      	ble.n	8014ba0 <_dtoa_r+0x938>
 8014bc2:	9901      	ldr	r1, [sp, #4]
 8014bc4:	2201      	movs	r2, #1
 8014bc6:	4648      	mov	r0, r9
 8014bc8:	f000 fbb2 	bl	8015330 <__lshift>
 8014bcc:	4621      	mov	r1, r4
 8014bce:	9001      	str	r0, [sp, #4]
 8014bd0:	f000 fc1a 	bl	8015408 <__mcmp>
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	dc03      	bgt.n	8014be0 <_dtoa_r+0x978>
 8014bd8:	d1e2      	bne.n	8014ba0 <_dtoa_r+0x938>
 8014bda:	f01a 0f01 	tst.w	sl, #1
 8014bde:	d0df      	beq.n	8014ba0 <_dtoa_r+0x938>
 8014be0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014be4:	d1d9      	bne.n	8014b9a <_dtoa_r+0x932>
 8014be6:	2339      	movs	r3, #57	@ 0x39
 8014be8:	f88b 3000 	strb.w	r3, [fp]
 8014bec:	4633      	mov	r3, r6
 8014bee:	461e      	mov	r6, r3
 8014bf0:	3b01      	subs	r3, #1
 8014bf2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014bf6:	2a39      	cmp	r2, #57	@ 0x39
 8014bf8:	d053      	beq.n	8014ca2 <_dtoa_r+0xa3a>
 8014bfa:	3201      	adds	r2, #1
 8014bfc:	701a      	strb	r2, [r3, #0]
 8014bfe:	e60c      	b.n	801481a <_dtoa_r+0x5b2>
 8014c00:	2a00      	cmp	r2, #0
 8014c02:	dd07      	ble.n	8014c14 <_dtoa_r+0x9ac>
 8014c04:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014c08:	d0ed      	beq.n	8014be6 <_dtoa_r+0x97e>
 8014c0a:	f10a 0301 	add.w	r3, sl, #1
 8014c0e:	f88b 3000 	strb.w	r3, [fp]
 8014c12:	e602      	b.n	801481a <_dtoa_r+0x5b2>
 8014c14:	9b05      	ldr	r3, [sp, #20]
 8014c16:	9a05      	ldr	r2, [sp, #20]
 8014c18:	f803 ac01 	strb.w	sl, [r3, #-1]
 8014c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c1e:	4293      	cmp	r3, r2
 8014c20:	d029      	beq.n	8014c76 <_dtoa_r+0xa0e>
 8014c22:	9901      	ldr	r1, [sp, #4]
 8014c24:	2300      	movs	r3, #0
 8014c26:	220a      	movs	r2, #10
 8014c28:	4648      	mov	r0, r9
 8014c2a:	f000 f9d5 	bl	8014fd8 <__multadd>
 8014c2e:	45a8      	cmp	r8, r5
 8014c30:	9001      	str	r0, [sp, #4]
 8014c32:	f04f 0300 	mov.w	r3, #0
 8014c36:	f04f 020a 	mov.w	r2, #10
 8014c3a:	4641      	mov	r1, r8
 8014c3c:	4648      	mov	r0, r9
 8014c3e:	d107      	bne.n	8014c50 <_dtoa_r+0x9e8>
 8014c40:	f000 f9ca 	bl	8014fd8 <__multadd>
 8014c44:	4680      	mov	r8, r0
 8014c46:	4605      	mov	r5, r0
 8014c48:	9b05      	ldr	r3, [sp, #20]
 8014c4a:	3301      	adds	r3, #1
 8014c4c:	9305      	str	r3, [sp, #20]
 8014c4e:	e775      	b.n	8014b3c <_dtoa_r+0x8d4>
 8014c50:	f000 f9c2 	bl	8014fd8 <__multadd>
 8014c54:	4629      	mov	r1, r5
 8014c56:	4680      	mov	r8, r0
 8014c58:	2300      	movs	r3, #0
 8014c5a:	220a      	movs	r2, #10
 8014c5c:	4648      	mov	r0, r9
 8014c5e:	f000 f9bb 	bl	8014fd8 <__multadd>
 8014c62:	4605      	mov	r5, r0
 8014c64:	e7f0      	b.n	8014c48 <_dtoa_r+0x9e0>
 8014c66:	f1bb 0f00 	cmp.w	fp, #0
 8014c6a:	bfcc      	ite	gt
 8014c6c:	465e      	movgt	r6, fp
 8014c6e:	2601      	movle	r6, #1
 8014c70:	443e      	add	r6, r7
 8014c72:	f04f 0800 	mov.w	r8, #0
 8014c76:	9901      	ldr	r1, [sp, #4]
 8014c78:	2201      	movs	r2, #1
 8014c7a:	4648      	mov	r0, r9
 8014c7c:	f000 fb58 	bl	8015330 <__lshift>
 8014c80:	4621      	mov	r1, r4
 8014c82:	9001      	str	r0, [sp, #4]
 8014c84:	f000 fbc0 	bl	8015408 <__mcmp>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	dcaf      	bgt.n	8014bec <_dtoa_r+0x984>
 8014c8c:	d102      	bne.n	8014c94 <_dtoa_r+0xa2c>
 8014c8e:	f01a 0f01 	tst.w	sl, #1
 8014c92:	d1ab      	bne.n	8014bec <_dtoa_r+0x984>
 8014c94:	4633      	mov	r3, r6
 8014c96:	461e      	mov	r6, r3
 8014c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c9c:	2a30      	cmp	r2, #48	@ 0x30
 8014c9e:	d0fa      	beq.n	8014c96 <_dtoa_r+0xa2e>
 8014ca0:	e5bb      	b.n	801481a <_dtoa_r+0x5b2>
 8014ca2:	429f      	cmp	r7, r3
 8014ca4:	d1a3      	bne.n	8014bee <_dtoa_r+0x986>
 8014ca6:	9b04      	ldr	r3, [sp, #16]
 8014ca8:	3301      	adds	r3, #1
 8014caa:	9304      	str	r3, [sp, #16]
 8014cac:	2331      	movs	r3, #49	@ 0x31
 8014cae:	703b      	strb	r3, [r7, #0]
 8014cb0:	e5b3      	b.n	801481a <_dtoa_r+0x5b2>
 8014cb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014cb4:	4f16      	ldr	r7, [pc, #88]	@ (8014d10 <_dtoa_r+0xaa8>)
 8014cb6:	b11b      	cbz	r3, 8014cc0 <_dtoa_r+0xa58>
 8014cb8:	f107 0308 	add.w	r3, r7, #8
 8014cbc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014cbe:	6013      	str	r3, [r2, #0]
 8014cc0:	4638      	mov	r0, r7
 8014cc2:	b011      	add	sp, #68	@ 0x44
 8014cc4:	ecbd 8b02 	vpop	{d8}
 8014cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ccc:	9b07      	ldr	r3, [sp, #28]
 8014cce:	2b01      	cmp	r3, #1
 8014cd0:	f77f ae36 	ble.w	8014940 <_dtoa_r+0x6d8>
 8014cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014cd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014cd8:	2001      	movs	r0, #1
 8014cda:	e656      	b.n	801498a <_dtoa_r+0x722>
 8014cdc:	f1bb 0f00 	cmp.w	fp, #0
 8014ce0:	f77f aed7 	ble.w	8014a92 <_dtoa_r+0x82a>
 8014ce4:	463e      	mov	r6, r7
 8014ce6:	9801      	ldr	r0, [sp, #4]
 8014ce8:	4621      	mov	r1, r4
 8014cea:	f7ff fa34 	bl	8014156 <quorem>
 8014cee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014cf2:	f806 ab01 	strb.w	sl, [r6], #1
 8014cf6:	1bf2      	subs	r2, r6, r7
 8014cf8:	4593      	cmp	fp, r2
 8014cfa:	ddb4      	ble.n	8014c66 <_dtoa_r+0x9fe>
 8014cfc:	9901      	ldr	r1, [sp, #4]
 8014cfe:	2300      	movs	r3, #0
 8014d00:	220a      	movs	r2, #10
 8014d02:	4648      	mov	r0, r9
 8014d04:	f000 f968 	bl	8014fd8 <__multadd>
 8014d08:	9001      	str	r0, [sp, #4]
 8014d0a:	e7ec      	b.n	8014ce6 <_dtoa_r+0xa7e>
 8014d0c:	08015f04 	.word	0x08015f04
 8014d10:	08015e88 	.word	0x08015e88

08014d14 <_free_r>:
 8014d14:	b538      	push	{r3, r4, r5, lr}
 8014d16:	4605      	mov	r5, r0
 8014d18:	2900      	cmp	r1, #0
 8014d1a:	d041      	beq.n	8014da0 <_free_r+0x8c>
 8014d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d20:	1f0c      	subs	r4, r1, #4
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	bfb8      	it	lt
 8014d26:	18e4      	addlt	r4, r4, r3
 8014d28:	f000 f8e8 	bl	8014efc <__malloc_lock>
 8014d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8014da4 <_free_r+0x90>)
 8014d2e:	6813      	ldr	r3, [r2, #0]
 8014d30:	b933      	cbnz	r3, 8014d40 <_free_r+0x2c>
 8014d32:	6063      	str	r3, [r4, #4]
 8014d34:	6014      	str	r4, [r2, #0]
 8014d36:	4628      	mov	r0, r5
 8014d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d3c:	f000 b8e4 	b.w	8014f08 <__malloc_unlock>
 8014d40:	42a3      	cmp	r3, r4
 8014d42:	d908      	bls.n	8014d56 <_free_r+0x42>
 8014d44:	6820      	ldr	r0, [r4, #0]
 8014d46:	1821      	adds	r1, r4, r0
 8014d48:	428b      	cmp	r3, r1
 8014d4a:	bf01      	itttt	eq
 8014d4c:	6819      	ldreq	r1, [r3, #0]
 8014d4e:	685b      	ldreq	r3, [r3, #4]
 8014d50:	1809      	addeq	r1, r1, r0
 8014d52:	6021      	streq	r1, [r4, #0]
 8014d54:	e7ed      	b.n	8014d32 <_free_r+0x1e>
 8014d56:	461a      	mov	r2, r3
 8014d58:	685b      	ldr	r3, [r3, #4]
 8014d5a:	b10b      	cbz	r3, 8014d60 <_free_r+0x4c>
 8014d5c:	42a3      	cmp	r3, r4
 8014d5e:	d9fa      	bls.n	8014d56 <_free_r+0x42>
 8014d60:	6811      	ldr	r1, [r2, #0]
 8014d62:	1850      	adds	r0, r2, r1
 8014d64:	42a0      	cmp	r0, r4
 8014d66:	d10b      	bne.n	8014d80 <_free_r+0x6c>
 8014d68:	6820      	ldr	r0, [r4, #0]
 8014d6a:	4401      	add	r1, r0
 8014d6c:	1850      	adds	r0, r2, r1
 8014d6e:	4283      	cmp	r3, r0
 8014d70:	6011      	str	r1, [r2, #0]
 8014d72:	d1e0      	bne.n	8014d36 <_free_r+0x22>
 8014d74:	6818      	ldr	r0, [r3, #0]
 8014d76:	685b      	ldr	r3, [r3, #4]
 8014d78:	6053      	str	r3, [r2, #4]
 8014d7a:	4408      	add	r0, r1
 8014d7c:	6010      	str	r0, [r2, #0]
 8014d7e:	e7da      	b.n	8014d36 <_free_r+0x22>
 8014d80:	d902      	bls.n	8014d88 <_free_r+0x74>
 8014d82:	230c      	movs	r3, #12
 8014d84:	602b      	str	r3, [r5, #0]
 8014d86:	e7d6      	b.n	8014d36 <_free_r+0x22>
 8014d88:	6820      	ldr	r0, [r4, #0]
 8014d8a:	1821      	adds	r1, r4, r0
 8014d8c:	428b      	cmp	r3, r1
 8014d8e:	bf04      	itt	eq
 8014d90:	6819      	ldreq	r1, [r3, #0]
 8014d92:	685b      	ldreq	r3, [r3, #4]
 8014d94:	6063      	str	r3, [r4, #4]
 8014d96:	bf04      	itt	eq
 8014d98:	1809      	addeq	r1, r1, r0
 8014d9a:	6021      	streq	r1, [r4, #0]
 8014d9c:	6054      	str	r4, [r2, #4]
 8014d9e:	e7ca      	b.n	8014d36 <_free_r+0x22>
 8014da0:	bd38      	pop	{r3, r4, r5, pc}
 8014da2:	bf00      	nop
 8014da4:	24001668 	.word	0x24001668

08014da8 <malloc>:
 8014da8:	4b02      	ldr	r3, [pc, #8]	@ (8014db4 <malloc+0xc>)
 8014daa:	4601      	mov	r1, r0
 8014dac:	6818      	ldr	r0, [r3, #0]
 8014dae:	f000 b825 	b.w	8014dfc <_malloc_r>
 8014db2:	bf00      	nop
 8014db4:	2400012c 	.word	0x2400012c

08014db8 <sbrk_aligned>:
 8014db8:	b570      	push	{r4, r5, r6, lr}
 8014dba:	4e0f      	ldr	r6, [pc, #60]	@ (8014df8 <sbrk_aligned+0x40>)
 8014dbc:	460c      	mov	r4, r1
 8014dbe:	6831      	ldr	r1, [r6, #0]
 8014dc0:	4605      	mov	r5, r0
 8014dc2:	b911      	cbnz	r1, 8014dca <sbrk_aligned+0x12>
 8014dc4:	f000 fe9a 	bl	8015afc <_sbrk_r>
 8014dc8:	6030      	str	r0, [r6, #0]
 8014dca:	4621      	mov	r1, r4
 8014dcc:	4628      	mov	r0, r5
 8014dce:	f000 fe95 	bl	8015afc <_sbrk_r>
 8014dd2:	1c43      	adds	r3, r0, #1
 8014dd4:	d103      	bne.n	8014dde <sbrk_aligned+0x26>
 8014dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8014dda:	4620      	mov	r0, r4
 8014ddc:	bd70      	pop	{r4, r5, r6, pc}
 8014dde:	1cc4      	adds	r4, r0, #3
 8014de0:	f024 0403 	bic.w	r4, r4, #3
 8014de4:	42a0      	cmp	r0, r4
 8014de6:	d0f8      	beq.n	8014dda <sbrk_aligned+0x22>
 8014de8:	1a21      	subs	r1, r4, r0
 8014dea:	4628      	mov	r0, r5
 8014dec:	f000 fe86 	bl	8015afc <_sbrk_r>
 8014df0:	3001      	adds	r0, #1
 8014df2:	d1f2      	bne.n	8014dda <sbrk_aligned+0x22>
 8014df4:	e7ef      	b.n	8014dd6 <sbrk_aligned+0x1e>
 8014df6:	bf00      	nop
 8014df8:	24001664 	.word	0x24001664

08014dfc <_malloc_r>:
 8014dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e00:	1ccd      	adds	r5, r1, #3
 8014e02:	f025 0503 	bic.w	r5, r5, #3
 8014e06:	3508      	adds	r5, #8
 8014e08:	2d0c      	cmp	r5, #12
 8014e0a:	bf38      	it	cc
 8014e0c:	250c      	movcc	r5, #12
 8014e0e:	2d00      	cmp	r5, #0
 8014e10:	4606      	mov	r6, r0
 8014e12:	db01      	blt.n	8014e18 <_malloc_r+0x1c>
 8014e14:	42a9      	cmp	r1, r5
 8014e16:	d904      	bls.n	8014e22 <_malloc_r+0x26>
 8014e18:	230c      	movs	r3, #12
 8014e1a:	6033      	str	r3, [r6, #0]
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014ef8 <_malloc_r+0xfc>
 8014e26:	f000 f869 	bl	8014efc <__malloc_lock>
 8014e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8014e2e:	461c      	mov	r4, r3
 8014e30:	bb44      	cbnz	r4, 8014e84 <_malloc_r+0x88>
 8014e32:	4629      	mov	r1, r5
 8014e34:	4630      	mov	r0, r6
 8014e36:	f7ff ffbf 	bl	8014db8 <sbrk_aligned>
 8014e3a:	1c43      	adds	r3, r0, #1
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	d158      	bne.n	8014ef2 <_malloc_r+0xf6>
 8014e40:	f8d8 4000 	ldr.w	r4, [r8]
 8014e44:	4627      	mov	r7, r4
 8014e46:	2f00      	cmp	r7, #0
 8014e48:	d143      	bne.n	8014ed2 <_malloc_r+0xd6>
 8014e4a:	2c00      	cmp	r4, #0
 8014e4c:	d04b      	beq.n	8014ee6 <_malloc_r+0xea>
 8014e4e:	6823      	ldr	r3, [r4, #0]
 8014e50:	4639      	mov	r1, r7
 8014e52:	4630      	mov	r0, r6
 8014e54:	eb04 0903 	add.w	r9, r4, r3
 8014e58:	f000 fe50 	bl	8015afc <_sbrk_r>
 8014e5c:	4581      	cmp	r9, r0
 8014e5e:	d142      	bne.n	8014ee6 <_malloc_r+0xea>
 8014e60:	6821      	ldr	r1, [r4, #0]
 8014e62:	1a6d      	subs	r5, r5, r1
 8014e64:	4629      	mov	r1, r5
 8014e66:	4630      	mov	r0, r6
 8014e68:	f7ff ffa6 	bl	8014db8 <sbrk_aligned>
 8014e6c:	3001      	adds	r0, #1
 8014e6e:	d03a      	beq.n	8014ee6 <_malloc_r+0xea>
 8014e70:	6823      	ldr	r3, [r4, #0]
 8014e72:	442b      	add	r3, r5
 8014e74:	6023      	str	r3, [r4, #0]
 8014e76:	f8d8 3000 	ldr.w	r3, [r8]
 8014e7a:	685a      	ldr	r2, [r3, #4]
 8014e7c:	bb62      	cbnz	r2, 8014ed8 <_malloc_r+0xdc>
 8014e7e:	f8c8 7000 	str.w	r7, [r8]
 8014e82:	e00f      	b.n	8014ea4 <_malloc_r+0xa8>
 8014e84:	6822      	ldr	r2, [r4, #0]
 8014e86:	1b52      	subs	r2, r2, r5
 8014e88:	d420      	bmi.n	8014ecc <_malloc_r+0xd0>
 8014e8a:	2a0b      	cmp	r2, #11
 8014e8c:	d917      	bls.n	8014ebe <_malloc_r+0xc2>
 8014e8e:	1961      	adds	r1, r4, r5
 8014e90:	42a3      	cmp	r3, r4
 8014e92:	6025      	str	r5, [r4, #0]
 8014e94:	bf18      	it	ne
 8014e96:	6059      	strne	r1, [r3, #4]
 8014e98:	6863      	ldr	r3, [r4, #4]
 8014e9a:	bf08      	it	eq
 8014e9c:	f8c8 1000 	streq.w	r1, [r8]
 8014ea0:	5162      	str	r2, [r4, r5]
 8014ea2:	604b      	str	r3, [r1, #4]
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	f000 f82f 	bl	8014f08 <__malloc_unlock>
 8014eaa:	f104 000b 	add.w	r0, r4, #11
 8014eae:	1d23      	adds	r3, r4, #4
 8014eb0:	f020 0007 	bic.w	r0, r0, #7
 8014eb4:	1ac2      	subs	r2, r0, r3
 8014eb6:	bf1c      	itt	ne
 8014eb8:	1a1b      	subne	r3, r3, r0
 8014eba:	50a3      	strne	r3, [r4, r2]
 8014ebc:	e7af      	b.n	8014e1e <_malloc_r+0x22>
 8014ebe:	6862      	ldr	r2, [r4, #4]
 8014ec0:	42a3      	cmp	r3, r4
 8014ec2:	bf0c      	ite	eq
 8014ec4:	f8c8 2000 	streq.w	r2, [r8]
 8014ec8:	605a      	strne	r2, [r3, #4]
 8014eca:	e7eb      	b.n	8014ea4 <_malloc_r+0xa8>
 8014ecc:	4623      	mov	r3, r4
 8014ece:	6864      	ldr	r4, [r4, #4]
 8014ed0:	e7ae      	b.n	8014e30 <_malloc_r+0x34>
 8014ed2:	463c      	mov	r4, r7
 8014ed4:	687f      	ldr	r7, [r7, #4]
 8014ed6:	e7b6      	b.n	8014e46 <_malloc_r+0x4a>
 8014ed8:	461a      	mov	r2, r3
 8014eda:	685b      	ldr	r3, [r3, #4]
 8014edc:	42a3      	cmp	r3, r4
 8014ede:	d1fb      	bne.n	8014ed8 <_malloc_r+0xdc>
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	6053      	str	r3, [r2, #4]
 8014ee4:	e7de      	b.n	8014ea4 <_malloc_r+0xa8>
 8014ee6:	230c      	movs	r3, #12
 8014ee8:	6033      	str	r3, [r6, #0]
 8014eea:	4630      	mov	r0, r6
 8014eec:	f000 f80c 	bl	8014f08 <__malloc_unlock>
 8014ef0:	e794      	b.n	8014e1c <_malloc_r+0x20>
 8014ef2:	6005      	str	r5, [r0, #0]
 8014ef4:	e7d6      	b.n	8014ea4 <_malloc_r+0xa8>
 8014ef6:	bf00      	nop
 8014ef8:	24001668 	.word	0x24001668

08014efc <__malloc_lock>:
 8014efc:	4801      	ldr	r0, [pc, #4]	@ (8014f04 <__malloc_lock+0x8>)
 8014efe:	f7ff b91a 	b.w	8014136 <__retarget_lock_acquire_recursive>
 8014f02:	bf00      	nop
 8014f04:	24001660 	.word	0x24001660

08014f08 <__malloc_unlock>:
 8014f08:	4801      	ldr	r0, [pc, #4]	@ (8014f10 <__malloc_unlock+0x8>)
 8014f0a:	f7ff b915 	b.w	8014138 <__retarget_lock_release_recursive>
 8014f0e:	bf00      	nop
 8014f10:	24001660 	.word	0x24001660

08014f14 <_Balloc>:
 8014f14:	b570      	push	{r4, r5, r6, lr}
 8014f16:	69c6      	ldr	r6, [r0, #28]
 8014f18:	4604      	mov	r4, r0
 8014f1a:	460d      	mov	r5, r1
 8014f1c:	b976      	cbnz	r6, 8014f3c <_Balloc+0x28>
 8014f1e:	2010      	movs	r0, #16
 8014f20:	f7ff ff42 	bl	8014da8 <malloc>
 8014f24:	4602      	mov	r2, r0
 8014f26:	61e0      	str	r0, [r4, #28]
 8014f28:	b920      	cbnz	r0, 8014f34 <_Balloc+0x20>
 8014f2a:	4b18      	ldr	r3, [pc, #96]	@ (8014f8c <_Balloc+0x78>)
 8014f2c:	4818      	ldr	r0, [pc, #96]	@ (8014f90 <_Balloc+0x7c>)
 8014f2e:	216b      	movs	r1, #107	@ 0x6b
 8014f30:	f000 fdf4 	bl	8015b1c <__assert_func>
 8014f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f38:	6006      	str	r6, [r0, #0]
 8014f3a:	60c6      	str	r6, [r0, #12]
 8014f3c:	69e6      	ldr	r6, [r4, #28]
 8014f3e:	68f3      	ldr	r3, [r6, #12]
 8014f40:	b183      	cbz	r3, 8014f64 <_Balloc+0x50>
 8014f42:	69e3      	ldr	r3, [r4, #28]
 8014f44:	68db      	ldr	r3, [r3, #12]
 8014f46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014f4a:	b9b8      	cbnz	r0, 8014f7c <_Balloc+0x68>
 8014f4c:	2101      	movs	r1, #1
 8014f4e:	fa01 f605 	lsl.w	r6, r1, r5
 8014f52:	1d72      	adds	r2, r6, #5
 8014f54:	0092      	lsls	r2, r2, #2
 8014f56:	4620      	mov	r0, r4
 8014f58:	f000 fdfe 	bl	8015b58 <_calloc_r>
 8014f5c:	b160      	cbz	r0, 8014f78 <_Balloc+0x64>
 8014f5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014f62:	e00e      	b.n	8014f82 <_Balloc+0x6e>
 8014f64:	2221      	movs	r2, #33	@ 0x21
 8014f66:	2104      	movs	r1, #4
 8014f68:	4620      	mov	r0, r4
 8014f6a:	f000 fdf5 	bl	8015b58 <_calloc_r>
 8014f6e:	69e3      	ldr	r3, [r4, #28]
 8014f70:	60f0      	str	r0, [r6, #12]
 8014f72:	68db      	ldr	r3, [r3, #12]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d1e4      	bne.n	8014f42 <_Balloc+0x2e>
 8014f78:	2000      	movs	r0, #0
 8014f7a:	bd70      	pop	{r4, r5, r6, pc}
 8014f7c:	6802      	ldr	r2, [r0, #0]
 8014f7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f82:	2300      	movs	r3, #0
 8014f84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f88:	e7f7      	b.n	8014f7a <_Balloc+0x66>
 8014f8a:	bf00      	nop
 8014f8c:	08015e95 	.word	0x08015e95
 8014f90:	08015f15 	.word	0x08015f15

08014f94 <_Bfree>:
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	69c6      	ldr	r6, [r0, #28]
 8014f98:	4605      	mov	r5, r0
 8014f9a:	460c      	mov	r4, r1
 8014f9c:	b976      	cbnz	r6, 8014fbc <_Bfree+0x28>
 8014f9e:	2010      	movs	r0, #16
 8014fa0:	f7ff ff02 	bl	8014da8 <malloc>
 8014fa4:	4602      	mov	r2, r0
 8014fa6:	61e8      	str	r0, [r5, #28]
 8014fa8:	b920      	cbnz	r0, 8014fb4 <_Bfree+0x20>
 8014faa:	4b09      	ldr	r3, [pc, #36]	@ (8014fd0 <_Bfree+0x3c>)
 8014fac:	4809      	ldr	r0, [pc, #36]	@ (8014fd4 <_Bfree+0x40>)
 8014fae:	218f      	movs	r1, #143	@ 0x8f
 8014fb0:	f000 fdb4 	bl	8015b1c <__assert_func>
 8014fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014fb8:	6006      	str	r6, [r0, #0]
 8014fba:	60c6      	str	r6, [r0, #12]
 8014fbc:	b13c      	cbz	r4, 8014fce <_Bfree+0x3a>
 8014fbe:	69eb      	ldr	r3, [r5, #28]
 8014fc0:	6862      	ldr	r2, [r4, #4]
 8014fc2:	68db      	ldr	r3, [r3, #12]
 8014fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014fc8:	6021      	str	r1, [r4, #0]
 8014fca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014fce:	bd70      	pop	{r4, r5, r6, pc}
 8014fd0:	08015e95 	.word	0x08015e95
 8014fd4:	08015f15 	.word	0x08015f15

08014fd8 <__multadd>:
 8014fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fdc:	690d      	ldr	r5, [r1, #16]
 8014fde:	4607      	mov	r7, r0
 8014fe0:	460c      	mov	r4, r1
 8014fe2:	461e      	mov	r6, r3
 8014fe4:	f101 0c14 	add.w	ip, r1, #20
 8014fe8:	2000      	movs	r0, #0
 8014fea:	f8dc 3000 	ldr.w	r3, [ip]
 8014fee:	b299      	uxth	r1, r3
 8014ff0:	fb02 6101 	mla	r1, r2, r1, r6
 8014ff4:	0c1e      	lsrs	r6, r3, #16
 8014ff6:	0c0b      	lsrs	r3, r1, #16
 8014ff8:	fb02 3306 	mla	r3, r2, r6, r3
 8014ffc:	b289      	uxth	r1, r1
 8014ffe:	3001      	adds	r0, #1
 8015000:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015004:	4285      	cmp	r5, r0
 8015006:	f84c 1b04 	str.w	r1, [ip], #4
 801500a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801500e:	dcec      	bgt.n	8014fea <__multadd+0x12>
 8015010:	b30e      	cbz	r6, 8015056 <__multadd+0x7e>
 8015012:	68a3      	ldr	r3, [r4, #8]
 8015014:	42ab      	cmp	r3, r5
 8015016:	dc19      	bgt.n	801504c <__multadd+0x74>
 8015018:	6861      	ldr	r1, [r4, #4]
 801501a:	4638      	mov	r0, r7
 801501c:	3101      	adds	r1, #1
 801501e:	f7ff ff79 	bl	8014f14 <_Balloc>
 8015022:	4680      	mov	r8, r0
 8015024:	b928      	cbnz	r0, 8015032 <__multadd+0x5a>
 8015026:	4602      	mov	r2, r0
 8015028:	4b0c      	ldr	r3, [pc, #48]	@ (801505c <__multadd+0x84>)
 801502a:	480d      	ldr	r0, [pc, #52]	@ (8015060 <__multadd+0x88>)
 801502c:	21ba      	movs	r1, #186	@ 0xba
 801502e:	f000 fd75 	bl	8015b1c <__assert_func>
 8015032:	6922      	ldr	r2, [r4, #16]
 8015034:	3202      	adds	r2, #2
 8015036:	f104 010c 	add.w	r1, r4, #12
 801503a:	0092      	lsls	r2, r2, #2
 801503c:	300c      	adds	r0, #12
 801503e:	f7ff f87c 	bl	801413a <memcpy>
 8015042:	4621      	mov	r1, r4
 8015044:	4638      	mov	r0, r7
 8015046:	f7ff ffa5 	bl	8014f94 <_Bfree>
 801504a:	4644      	mov	r4, r8
 801504c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015050:	3501      	adds	r5, #1
 8015052:	615e      	str	r6, [r3, #20]
 8015054:	6125      	str	r5, [r4, #16]
 8015056:	4620      	mov	r0, r4
 8015058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801505c:	08015f04 	.word	0x08015f04
 8015060:	08015f15 	.word	0x08015f15

08015064 <__hi0bits>:
 8015064:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015068:	4603      	mov	r3, r0
 801506a:	bf36      	itet	cc
 801506c:	0403      	lslcc	r3, r0, #16
 801506e:	2000      	movcs	r0, #0
 8015070:	2010      	movcc	r0, #16
 8015072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015076:	bf3c      	itt	cc
 8015078:	021b      	lslcc	r3, r3, #8
 801507a:	3008      	addcc	r0, #8
 801507c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015080:	bf3c      	itt	cc
 8015082:	011b      	lslcc	r3, r3, #4
 8015084:	3004      	addcc	r0, #4
 8015086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801508a:	bf3c      	itt	cc
 801508c:	009b      	lslcc	r3, r3, #2
 801508e:	3002      	addcc	r0, #2
 8015090:	2b00      	cmp	r3, #0
 8015092:	db05      	blt.n	80150a0 <__hi0bits+0x3c>
 8015094:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015098:	f100 0001 	add.w	r0, r0, #1
 801509c:	bf08      	it	eq
 801509e:	2020      	moveq	r0, #32
 80150a0:	4770      	bx	lr

080150a2 <__lo0bits>:
 80150a2:	6803      	ldr	r3, [r0, #0]
 80150a4:	4602      	mov	r2, r0
 80150a6:	f013 0007 	ands.w	r0, r3, #7
 80150aa:	d00b      	beq.n	80150c4 <__lo0bits+0x22>
 80150ac:	07d9      	lsls	r1, r3, #31
 80150ae:	d421      	bmi.n	80150f4 <__lo0bits+0x52>
 80150b0:	0798      	lsls	r0, r3, #30
 80150b2:	bf49      	itett	mi
 80150b4:	085b      	lsrmi	r3, r3, #1
 80150b6:	089b      	lsrpl	r3, r3, #2
 80150b8:	2001      	movmi	r0, #1
 80150ba:	6013      	strmi	r3, [r2, #0]
 80150bc:	bf5c      	itt	pl
 80150be:	6013      	strpl	r3, [r2, #0]
 80150c0:	2002      	movpl	r0, #2
 80150c2:	4770      	bx	lr
 80150c4:	b299      	uxth	r1, r3
 80150c6:	b909      	cbnz	r1, 80150cc <__lo0bits+0x2a>
 80150c8:	0c1b      	lsrs	r3, r3, #16
 80150ca:	2010      	movs	r0, #16
 80150cc:	b2d9      	uxtb	r1, r3
 80150ce:	b909      	cbnz	r1, 80150d4 <__lo0bits+0x32>
 80150d0:	3008      	adds	r0, #8
 80150d2:	0a1b      	lsrs	r3, r3, #8
 80150d4:	0719      	lsls	r1, r3, #28
 80150d6:	bf04      	itt	eq
 80150d8:	091b      	lsreq	r3, r3, #4
 80150da:	3004      	addeq	r0, #4
 80150dc:	0799      	lsls	r1, r3, #30
 80150de:	bf04      	itt	eq
 80150e0:	089b      	lsreq	r3, r3, #2
 80150e2:	3002      	addeq	r0, #2
 80150e4:	07d9      	lsls	r1, r3, #31
 80150e6:	d403      	bmi.n	80150f0 <__lo0bits+0x4e>
 80150e8:	085b      	lsrs	r3, r3, #1
 80150ea:	f100 0001 	add.w	r0, r0, #1
 80150ee:	d003      	beq.n	80150f8 <__lo0bits+0x56>
 80150f0:	6013      	str	r3, [r2, #0]
 80150f2:	4770      	bx	lr
 80150f4:	2000      	movs	r0, #0
 80150f6:	4770      	bx	lr
 80150f8:	2020      	movs	r0, #32
 80150fa:	4770      	bx	lr

080150fc <__i2b>:
 80150fc:	b510      	push	{r4, lr}
 80150fe:	460c      	mov	r4, r1
 8015100:	2101      	movs	r1, #1
 8015102:	f7ff ff07 	bl	8014f14 <_Balloc>
 8015106:	4602      	mov	r2, r0
 8015108:	b928      	cbnz	r0, 8015116 <__i2b+0x1a>
 801510a:	4b05      	ldr	r3, [pc, #20]	@ (8015120 <__i2b+0x24>)
 801510c:	4805      	ldr	r0, [pc, #20]	@ (8015124 <__i2b+0x28>)
 801510e:	f240 1145 	movw	r1, #325	@ 0x145
 8015112:	f000 fd03 	bl	8015b1c <__assert_func>
 8015116:	2301      	movs	r3, #1
 8015118:	6144      	str	r4, [r0, #20]
 801511a:	6103      	str	r3, [r0, #16]
 801511c:	bd10      	pop	{r4, pc}
 801511e:	bf00      	nop
 8015120:	08015f04 	.word	0x08015f04
 8015124:	08015f15 	.word	0x08015f15

08015128 <__multiply>:
 8015128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801512c:	4614      	mov	r4, r2
 801512e:	690a      	ldr	r2, [r1, #16]
 8015130:	6923      	ldr	r3, [r4, #16]
 8015132:	429a      	cmp	r2, r3
 8015134:	bfa8      	it	ge
 8015136:	4623      	movge	r3, r4
 8015138:	460f      	mov	r7, r1
 801513a:	bfa4      	itt	ge
 801513c:	460c      	movge	r4, r1
 801513e:	461f      	movge	r7, r3
 8015140:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015144:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015148:	68a3      	ldr	r3, [r4, #8]
 801514a:	6861      	ldr	r1, [r4, #4]
 801514c:	eb0a 0609 	add.w	r6, sl, r9
 8015150:	42b3      	cmp	r3, r6
 8015152:	b085      	sub	sp, #20
 8015154:	bfb8      	it	lt
 8015156:	3101      	addlt	r1, #1
 8015158:	f7ff fedc 	bl	8014f14 <_Balloc>
 801515c:	b930      	cbnz	r0, 801516c <__multiply+0x44>
 801515e:	4602      	mov	r2, r0
 8015160:	4b44      	ldr	r3, [pc, #272]	@ (8015274 <__multiply+0x14c>)
 8015162:	4845      	ldr	r0, [pc, #276]	@ (8015278 <__multiply+0x150>)
 8015164:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015168:	f000 fcd8 	bl	8015b1c <__assert_func>
 801516c:	f100 0514 	add.w	r5, r0, #20
 8015170:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015174:	462b      	mov	r3, r5
 8015176:	2200      	movs	r2, #0
 8015178:	4543      	cmp	r3, r8
 801517a:	d321      	bcc.n	80151c0 <__multiply+0x98>
 801517c:	f107 0114 	add.w	r1, r7, #20
 8015180:	f104 0214 	add.w	r2, r4, #20
 8015184:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015188:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801518c:	9302      	str	r3, [sp, #8]
 801518e:	1b13      	subs	r3, r2, r4
 8015190:	3b15      	subs	r3, #21
 8015192:	f023 0303 	bic.w	r3, r3, #3
 8015196:	3304      	adds	r3, #4
 8015198:	f104 0715 	add.w	r7, r4, #21
 801519c:	42ba      	cmp	r2, r7
 801519e:	bf38      	it	cc
 80151a0:	2304      	movcc	r3, #4
 80151a2:	9301      	str	r3, [sp, #4]
 80151a4:	9b02      	ldr	r3, [sp, #8]
 80151a6:	9103      	str	r1, [sp, #12]
 80151a8:	428b      	cmp	r3, r1
 80151aa:	d80c      	bhi.n	80151c6 <__multiply+0x9e>
 80151ac:	2e00      	cmp	r6, #0
 80151ae:	dd03      	ble.n	80151b8 <__multiply+0x90>
 80151b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d05b      	beq.n	8015270 <__multiply+0x148>
 80151b8:	6106      	str	r6, [r0, #16]
 80151ba:	b005      	add	sp, #20
 80151bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151c0:	f843 2b04 	str.w	r2, [r3], #4
 80151c4:	e7d8      	b.n	8015178 <__multiply+0x50>
 80151c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80151ca:	f1ba 0f00 	cmp.w	sl, #0
 80151ce:	d024      	beq.n	801521a <__multiply+0xf2>
 80151d0:	f104 0e14 	add.w	lr, r4, #20
 80151d4:	46a9      	mov	r9, r5
 80151d6:	f04f 0c00 	mov.w	ip, #0
 80151da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80151de:	f8d9 3000 	ldr.w	r3, [r9]
 80151e2:	fa1f fb87 	uxth.w	fp, r7
 80151e6:	b29b      	uxth	r3, r3
 80151e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80151ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80151f0:	f8d9 7000 	ldr.w	r7, [r9]
 80151f4:	4463      	add	r3, ip
 80151f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80151fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80151fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015202:	b29b      	uxth	r3, r3
 8015204:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015208:	4572      	cmp	r2, lr
 801520a:	f849 3b04 	str.w	r3, [r9], #4
 801520e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015212:	d8e2      	bhi.n	80151da <__multiply+0xb2>
 8015214:	9b01      	ldr	r3, [sp, #4]
 8015216:	f845 c003 	str.w	ip, [r5, r3]
 801521a:	9b03      	ldr	r3, [sp, #12]
 801521c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015220:	3104      	adds	r1, #4
 8015222:	f1b9 0f00 	cmp.w	r9, #0
 8015226:	d021      	beq.n	801526c <__multiply+0x144>
 8015228:	682b      	ldr	r3, [r5, #0]
 801522a:	f104 0c14 	add.w	ip, r4, #20
 801522e:	46ae      	mov	lr, r5
 8015230:	f04f 0a00 	mov.w	sl, #0
 8015234:	f8bc b000 	ldrh.w	fp, [ip]
 8015238:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801523c:	fb09 770b 	mla	r7, r9, fp, r7
 8015240:	4457      	add	r7, sl
 8015242:	b29b      	uxth	r3, r3
 8015244:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015248:	f84e 3b04 	str.w	r3, [lr], #4
 801524c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015250:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015254:	f8be 3000 	ldrh.w	r3, [lr]
 8015258:	fb09 330a 	mla	r3, r9, sl, r3
 801525c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015260:	4562      	cmp	r2, ip
 8015262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015266:	d8e5      	bhi.n	8015234 <__multiply+0x10c>
 8015268:	9f01      	ldr	r7, [sp, #4]
 801526a:	51eb      	str	r3, [r5, r7]
 801526c:	3504      	adds	r5, #4
 801526e:	e799      	b.n	80151a4 <__multiply+0x7c>
 8015270:	3e01      	subs	r6, #1
 8015272:	e79b      	b.n	80151ac <__multiply+0x84>
 8015274:	08015f04 	.word	0x08015f04
 8015278:	08015f15 	.word	0x08015f15

0801527c <__pow5mult>:
 801527c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015280:	4615      	mov	r5, r2
 8015282:	f012 0203 	ands.w	r2, r2, #3
 8015286:	4607      	mov	r7, r0
 8015288:	460e      	mov	r6, r1
 801528a:	d007      	beq.n	801529c <__pow5mult+0x20>
 801528c:	4c25      	ldr	r4, [pc, #148]	@ (8015324 <__pow5mult+0xa8>)
 801528e:	3a01      	subs	r2, #1
 8015290:	2300      	movs	r3, #0
 8015292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015296:	f7ff fe9f 	bl	8014fd8 <__multadd>
 801529a:	4606      	mov	r6, r0
 801529c:	10ad      	asrs	r5, r5, #2
 801529e:	d03d      	beq.n	801531c <__pow5mult+0xa0>
 80152a0:	69fc      	ldr	r4, [r7, #28]
 80152a2:	b97c      	cbnz	r4, 80152c4 <__pow5mult+0x48>
 80152a4:	2010      	movs	r0, #16
 80152a6:	f7ff fd7f 	bl	8014da8 <malloc>
 80152aa:	4602      	mov	r2, r0
 80152ac:	61f8      	str	r0, [r7, #28]
 80152ae:	b928      	cbnz	r0, 80152bc <__pow5mult+0x40>
 80152b0:	4b1d      	ldr	r3, [pc, #116]	@ (8015328 <__pow5mult+0xac>)
 80152b2:	481e      	ldr	r0, [pc, #120]	@ (801532c <__pow5mult+0xb0>)
 80152b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80152b8:	f000 fc30 	bl	8015b1c <__assert_func>
 80152bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80152c0:	6004      	str	r4, [r0, #0]
 80152c2:	60c4      	str	r4, [r0, #12]
 80152c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80152c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80152cc:	b94c      	cbnz	r4, 80152e2 <__pow5mult+0x66>
 80152ce:	f240 2171 	movw	r1, #625	@ 0x271
 80152d2:	4638      	mov	r0, r7
 80152d4:	f7ff ff12 	bl	80150fc <__i2b>
 80152d8:	2300      	movs	r3, #0
 80152da:	f8c8 0008 	str.w	r0, [r8, #8]
 80152de:	4604      	mov	r4, r0
 80152e0:	6003      	str	r3, [r0, #0]
 80152e2:	f04f 0900 	mov.w	r9, #0
 80152e6:	07eb      	lsls	r3, r5, #31
 80152e8:	d50a      	bpl.n	8015300 <__pow5mult+0x84>
 80152ea:	4631      	mov	r1, r6
 80152ec:	4622      	mov	r2, r4
 80152ee:	4638      	mov	r0, r7
 80152f0:	f7ff ff1a 	bl	8015128 <__multiply>
 80152f4:	4631      	mov	r1, r6
 80152f6:	4680      	mov	r8, r0
 80152f8:	4638      	mov	r0, r7
 80152fa:	f7ff fe4b 	bl	8014f94 <_Bfree>
 80152fe:	4646      	mov	r6, r8
 8015300:	106d      	asrs	r5, r5, #1
 8015302:	d00b      	beq.n	801531c <__pow5mult+0xa0>
 8015304:	6820      	ldr	r0, [r4, #0]
 8015306:	b938      	cbnz	r0, 8015318 <__pow5mult+0x9c>
 8015308:	4622      	mov	r2, r4
 801530a:	4621      	mov	r1, r4
 801530c:	4638      	mov	r0, r7
 801530e:	f7ff ff0b 	bl	8015128 <__multiply>
 8015312:	6020      	str	r0, [r4, #0]
 8015314:	f8c0 9000 	str.w	r9, [r0]
 8015318:	4604      	mov	r4, r0
 801531a:	e7e4      	b.n	80152e6 <__pow5mult+0x6a>
 801531c:	4630      	mov	r0, r6
 801531e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015322:	bf00      	nop
 8015324:	08015f70 	.word	0x08015f70
 8015328:	08015e95 	.word	0x08015e95
 801532c:	08015f15 	.word	0x08015f15

08015330 <__lshift>:
 8015330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015334:	460c      	mov	r4, r1
 8015336:	6849      	ldr	r1, [r1, #4]
 8015338:	6923      	ldr	r3, [r4, #16]
 801533a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801533e:	68a3      	ldr	r3, [r4, #8]
 8015340:	4607      	mov	r7, r0
 8015342:	4691      	mov	r9, r2
 8015344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015348:	f108 0601 	add.w	r6, r8, #1
 801534c:	42b3      	cmp	r3, r6
 801534e:	db0b      	blt.n	8015368 <__lshift+0x38>
 8015350:	4638      	mov	r0, r7
 8015352:	f7ff fddf 	bl	8014f14 <_Balloc>
 8015356:	4605      	mov	r5, r0
 8015358:	b948      	cbnz	r0, 801536e <__lshift+0x3e>
 801535a:	4602      	mov	r2, r0
 801535c:	4b28      	ldr	r3, [pc, #160]	@ (8015400 <__lshift+0xd0>)
 801535e:	4829      	ldr	r0, [pc, #164]	@ (8015404 <__lshift+0xd4>)
 8015360:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015364:	f000 fbda 	bl	8015b1c <__assert_func>
 8015368:	3101      	adds	r1, #1
 801536a:	005b      	lsls	r3, r3, #1
 801536c:	e7ee      	b.n	801534c <__lshift+0x1c>
 801536e:	2300      	movs	r3, #0
 8015370:	f100 0114 	add.w	r1, r0, #20
 8015374:	f100 0210 	add.w	r2, r0, #16
 8015378:	4618      	mov	r0, r3
 801537a:	4553      	cmp	r3, sl
 801537c:	db33      	blt.n	80153e6 <__lshift+0xb6>
 801537e:	6920      	ldr	r0, [r4, #16]
 8015380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015384:	f104 0314 	add.w	r3, r4, #20
 8015388:	f019 091f 	ands.w	r9, r9, #31
 801538c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015394:	d02b      	beq.n	80153ee <__lshift+0xbe>
 8015396:	f1c9 0e20 	rsb	lr, r9, #32
 801539a:	468a      	mov	sl, r1
 801539c:	2200      	movs	r2, #0
 801539e:	6818      	ldr	r0, [r3, #0]
 80153a0:	fa00 f009 	lsl.w	r0, r0, r9
 80153a4:	4310      	orrs	r0, r2
 80153a6:	f84a 0b04 	str.w	r0, [sl], #4
 80153aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80153ae:	459c      	cmp	ip, r3
 80153b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80153b4:	d8f3      	bhi.n	801539e <__lshift+0x6e>
 80153b6:	ebac 0304 	sub.w	r3, ip, r4
 80153ba:	3b15      	subs	r3, #21
 80153bc:	f023 0303 	bic.w	r3, r3, #3
 80153c0:	3304      	adds	r3, #4
 80153c2:	f104 0015 	add.w	r0, r4, #21
 80153c6:	4584      	cmp	ip, r0
 80153c8:	bf38      	it	cc
 80153ca:	2304      	movcc	r3, #4
 80153cc:	50ca      	str	r2, [r1, r3]
 80153ce:	b10a      	cbz	r2, 80153d4 <__lshift+0xa4>
 80153d0:	f108 0602 	add.w	r6, r8, #2
 80153d4:	3e01      	subs	r6, #1
 80153d6:	4638      	mov	r0, r7
 80153d8:	612e      	str	r6, [r5, #16]
 80153da:	4621      	mov	r1, r4
 80153dc:	f7ff fdda 	bl	8014f94 <_Bfree>
 80153e0:	4628      	mov	r0, r5
 80153e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80153ea:	3301      	adds	r3, #1
 80153ec:	e7c5      	b.n	801537a <__lshift+0x4a>
 80153ee:	3904      	subs	r1, #4
 80153f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80153f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80153f8:	459c      	cmp	ip, r3
 80153fa:	d8f9      	bhi.n	80153f0 <__lshift+0xc0>
 80153fc:	e7ea      	b.n	80153d4 <__lshift+0xa4>
 80153fe:	bf00      	nop
 8015400:	08015f04 	.word	0x08015f04
 8015404:	08015f15 	.word	0x08015f15

08015408 <__mcmp>:
 8015408:	690a      	ldr	r2, [r1, #16]
 801540a:	4603      	mov	r3, r0
 801540c:	6900      	ldr	r0, [r0, #16]
 801540e:	1a80      	subs	r0, r0, r2
 8015410:	b530      	push	{r4, r5, lr}
 8015412:	d10e      	bne.n	8015432 <__mcmp+0x2a>
 8015414:	3314      	adds	r3, #20
 8015416:	3114      	adds	r1, #20
 8015418:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801541c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015420:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015424:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015428:	4295      	cmp	r5, r2
 801542a:	d003      	beq.n	8015434 <__mcmp+0x2c>
 801542c:	d205      	bcs.n	801543a <__mcmp+0x32>
 801542e:	f04f 30ff 	mov.w	r0, #4294967295
 8015432:	bd30      	pop	{r4, r5, pc}
 8015434:	42a3      	cmp	r3, r4
 8015436:	d3f3      	bcc.n	8015420 <__mcmp+0x18>
 8015438:	e7fb      	b.n	8015432 <__mcmp+0x2a>
 801543a:	2001      	movs	r0, #1
 801543c:	e7f9      	b.n	8015432 <__mcmp+0x2a>
	...

08015440 <__mdiff>:
 8015440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015444:	4689      	mov	r9, r1
 8015446:	4606      	mov	r6, r0
 8015448:	4611      	mov	r1, r2
 801544a:	4648      	mov	r0, r9
 801544c:	4614      	mov	r4, r2
 801544e:	f7ff ffdb 	bl	8015408 <__mcmp>
 8015452:	1e05      	subs	r5, r0, #0
 8015454:	d112      	bne.n	801547c <__mdiff+0x3c>
 8015456:	4629      	mov	r1, r5
 8015458:	4630      	mov	r0, r6
 801545a:	f7ff fd5b 	bl	8014f14 <_Balloc>
 801545e:	4602      	mov	r2, r0
 8015460:	b928      	cbnz	r0, 801546e <__mdiff+0x2e>
 8015462:	4b3f      	ldr	r3, [pc, #252]	@ (8015560 <__mdiff+0x120>)
 8015464:	f240 2137 	movw	r1, #567	@ 0x237
 8015468:	483e      	ldr	r0, [pc, #248]	@ (8015564 <__mdiff+0x124>)
 801546a:	f000 fb57 	bl	8015b1c <__assert_func>
 801546e:	2301      	movs	r3, #1
 8015470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015474:	4610      	mov	r0, r2
 8015476:	b003      	add	sp, #12
 8015478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801547c:	bfbc      	itt	lt
 801547e:	464b      	movlt	r3, r9
 8015480:	46a1      	movlt	r9, r4
 8015482:	4630      	mov	r0, r6
 8015484:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015488:	bfba      	itte	lt
 801548a:	461c      	movlt	r4, r3
 801548c:	2501      	movlt	r5, #1
 801548e:	2500      	movge	r5, #0
 8015490:	f7ff fd40 	bl	8014f14 <_Balloc>
 8015494:	4602      	mov	r2, r0
 8015496:	b918      	cbnz	r0, 80154a0 <__mdiff+0x60>
 8015498:	4b31      	ldr	r3, [pc, #196]	@ (8015560 <__mdiff+0x120>)
 801549a:	f240 2145 	movw	r1, #581	@ 0x245
 801549e:	e7e3      	b.n	8015468 <__mdiff+0x28>
 80154a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80154a4:	6926      	ldr	r6, [r4, #16]
 80154a6:	60c5      	str	r5, [r0, #12]
 80154a8:	f109 0310 	add.w	r3, r9, #16
 80154ac:	f109 0514 	add.w	r5, r9, #20
 80154b0:	f104 0e14 	add.w	lr, r4, #20
 80154b4:	f100 0b14 	add.w	fp, r0, #20
 80154b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80154bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80154c0:	9301      	str	r3, [sp, #4]
 80154c2:	46d9      	mov	r9, fp
 80154c4:	f04f 0c00 	mov.w	ip, #0
 80154c8:	9b01      	ldr	r3, [sp, #4]
 80154ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80154ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80154d2:	9301      	str	r3, [sp, #4]
 80154d4:	fa1f f38a 	uxth.w	r3, sl
 80154d8:	4619      	mov	r1, r3
 80154da:	b283      	uxth	r3, r0
 80154dc:	1acb      	subs	r3, r1, r3
 80154de:	0c00      	lsrs	r0, r0, #16
 80154e0:	4463      	add	r3, ip
 80154e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80154e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80154f0:	4576      	cmp	r6, lr
 80154f2:	f849 3b04 	str.w	r3, [r9], #4
 80154f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80154fa:	d8e5      	bhi.n	80154c8 <__mdiff+0x88>
 80154fc:	1b33      	subs	r3, r6, r4
 80154fe:	3b15      	subs	r3, #21
 8015500:	f023 0303 	bic.w	r3, r3, #3
 8015504:	3415      	adds	r4, #21
 8015506:	3304      	adds	r3, #4
 8015508:	42a6      	cmp	r6, r4
 801550a:	bf38      	it	cc
 801550c:	2304      	movcc	r3, #4
 801550e:	441d      	add	r5, r3
 8015510:	445b      	add	r3, fp
 8015512:	461e      	mov	r6, r3
 8015514:	462c      	mov	r4, r5
 8015516:	4544      	cmp	r4, r8
 8015518:	d30e      	bcc.n	8015538 <__mdiff+0xf8>
 801551a:	f108 0103 	add.w	r1, r8, #3
 801551e:	1b49      	subs	r1, r1, r5
 8015520:	f021 0103 	bic.w	r1, r1, #3
 8015524:	3d03      	subs	r5, #3
 8015526:	45a8      	cmp	r8, r5
 8015528:	bf38      	it	cc
 801552a:	2100      	movcc	r1, #0
 801552c:	440b      	add	r3, r1
 801552e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015532:	b191      	cbz	r1, 801555a <__mdiff+0x11a>
 8015534:	6117      	str	r7, [r2, #16]
 8015536:	e79d      	b.n	8015474 <__mdiff+0x34>
 8015538:	f854 1b04 	ldr.w	r1, [r4], #4
 801553c:	46e6      	mov	lr, ip
 801553e:	0c08      	lsrs	r0, r1, #16
 8015540:	fa1c fc81 	uxtah	ip, ip, r1
 8015544:	4471      	add	r1, lr
 8015546:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801554a:	b289      	uxth	r1, r1
 801554c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015550:	f846 1b04 	str.w	r1, [r6], #4
 8015554:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015558:	e7dd      	b.n	8015516 <__mdiff+0xd6>
 801555a:	3f01      	subs	r7, #1
 801555c:	e7e7      	b.n	801552e <__mdiff+0xee>
 801555e:	bf00      	nop
 8015560:	08015f04 	.word	0x08015f04
 8015564:	08015f15 	.word	0x08015f15

08015568 <__d2b>:
 8015568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801556c:	460f      	mov	r7, r1
 801556e:	2101      	movs	r1, #1
 8015570:	ec59 8b10 	vmov	r8, r9, d0
 8015574:	4616      	mov	r6, r2
 8015576:	f7ff fccd 	bl	8014f14 <_Balloc>
 801557a:	4604      	mov	r4, r0
 801557c:	b930      	cbnz	r0, 801558c <__d2b+0x24>
 801557e:	4602      	mov	r2, r0
 8015580:	4b23      	ldr	r3, [pc, #140]	@ (8015610 <__d2b+0xa8>)
 8015582:	4824      	ldr	r0, [pc, #144]	@ (8015614 <__d2b+0xac>)
 8015584:	f240 310f 	movw	r1, #783	@ 0x30f
 8015588:	f000 fac8 	bl	8015b1c <__assert_func>
 801558c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015594:	b10d      	cbz	r5, 801559a <__d2b+0x32>
 8015596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801559a:	9301      	str	r3, [sp, #4]
 801559c:	f1b8 0300 	subs.w	r3, r8, #0
 80155a0:	d023      	beq.n	80155ea <__d2b+0x82>
 80155a2:	4668      	mov	r0, sp
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	f7ff fd7c 	bl	80150a2 <__lo0bits>
 80155aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80155ae:	b1d0      	cbz	r0, 80155e6 <__d2b+0x7e>
 80155b0:	f1c0 0320 	rsb	r3, r0, #32
 80155b4:	fa02 f303 	lsl.w	r3, r2, r3
 80155b8:	430b      	orrs	r3, r1
 80155ba:	40c2      	lsrs	r2, r0
 80155bc:	6163      	str	r3, [r4, #20]
 80155be:	9201      	str	r2, [sp, #4]
 80155c0:	9b01      	ldr	r3, [sp, #4]
 80155c2:	61a3      	str	r3, [r4, #24]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	bf0c      	ite	eq
 80155c8:	2201      	moveq	r2, #1
 80155ca:	2202      	movne	r2, #2
 80155cc:	6122      	str	r2, [r4, #16]
 80155ce:	b1a5      	cbz	r5, 80155fa <__d2b+0x92>
 80155d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80155d4:	4405      	add	r5, r0
 80155d6:	603d      	str	r5, [r7, #0]
 80155d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80155dc:	6030      	str	r0, [r6, #0]
 80155de:	4620      	mov	r0, r4
 80155e0:	b003      	add	sp, #12
 80155e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155e6:	6161      	str	r1, [r4, #20]
 80155e8:	e7ea      	b.n	80155c0 <__d2b+0x58>
 80155ea:	a801      	add	r0, sp, #4
 80155ec:	f7ff fd59 	bl	80150a2 <__lo0bits>
 80155f0:	9b01      	ldr	r3, [sp, #4]
 80155f2:	6163      	str	r3, [r4, #20]
 80155f4:	3020      	adds	r0, #32
 80155f6:	2201      	movs	r2, #1
 80155f8:	e7e8      	b.n	80155cc <__d2b+0x64>
 80155fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80155fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015602:	6038      	str	r0, [r7, #0]
 8015604:	6918      	ldr	r0, [r3, #16]
 8015606:	f7ff fd2d 	bl	8015064 <__hi0bits>
 801560a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801560e:	e7e5      	b.n	80155dc <__d2b+0x74>
 8015610:	08015f04 	.word	0x08015f04
 8015614:	08015f15 	.word	0x08015f15

08015618 <__sfputc_r>:
 8015618:	6893      	ldr	r3, [r2, #8]
 801561a:	3b01      	subs	r3, #1
 801561c:	2b00      	cmp	r3, #0
 801561e:	b410      	push	{r4}
 8015620:	6093      	str	r3, [r2, #8]
 8015622:	da08      	bge.n	8015636 <__sfputc_r+0x1e>
 8015624:	6994      	ldr	r4, [r2, #24]
 8015626:	42a3      	cmp	r3, r4
 8015628:	db01      	blt.n	801562e <__sfputc_r+0x16>
 801562a:	290a      	cmp	r1, #10
 801562c:	d103      	bne.n	8015636 <__sfputc_r+0x1e>
 801562e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015632:	f7fe bc6e 	b.w	8013f12 <__swbuf_r>
 8015636:	6813      	ldr	r3, [r2, #0]
 8015638:	1c58      	adds	r0, r3, #1
 801563a:	6010      	str	r0, [r2, #0]
 801563c:	7019      	strb	r1, [r3, #0]
 801563e:	4608      	mov	r0, r1
 8015640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015644:	4770      	bx	lr

08015646 <__sfputs_r>:
 8015646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015648:	4606      	mov	r6, r0
 801564a:	460f      	mov	r7, r1
 801564c:	4614      	mov	r4, r2
 801564e:	18d5      	adds	r5, r2, r3
 8015650:	42ac      	cmp	r4, r5
 8015652:	d101      	bne.n	8015658 <__sfputs_r+0x12>
 8015654:	2000      	movs	r0, #0
 8015656:	e007      	b.n	8015668 <__sfputs_r+0x22>
 8015658:	f814 1b01 	ldrb.w	r1, [r4], #1
 801565c:	463a      	mov	r2, r7
 801565e:	4630      	mov	r0, r6
 8015660:	f7ff ffda 	bl	8015618 <__sfputc_r>
 8015664:	1c43      	adds	r3, r0, #1
 8015666:	d1f3      	bne.n	8015650 <__sfputs_r+0xa>
 8015668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801566c <_vfiprintf_r>:
 801566c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015670:	460d      	mov	r5, r1
 8015672:	b09d      	sub	sp, #116	@ 0x74
 8015674:	4614      	mov	r4, r2
 8015676:	4698      	mov	r8, r3
 8015678:	4606      	mov	r6, r0
 801567a:	b118      	cbz	r0, 8015684 <_vfiprintf_r+0x18>
 801567c:	6a03      	ldr	r3, [r0, #32]
 801567e:	b90b      	cbnz	r3, 8015684 <_vfiprintf_r+0x18>
 8015680:	f7fe fb5e 	bl	8013d40 <__sinit>
 8015684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015686:	07d9      	lsls	r1, r3, #31
 8015688:	d405      	bmi.n	8015696 <_vfiprintf_r+0x2a>
 801568a:	89ab      	ldrh	r3, [r5, #12]
 801568c:	059a      	lsls	r2, r3, #22
 801568e:	d402      	bmi.n	8015696 <_vfiprintf_r+0x2a>
 8015690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015692:	f7fe fd50 	bl	8014136 <__retarget_lock_acquire_recursive>
 8015696:	89ab      	ldrh	r3, [r5, #12]
 8015698:	071b      	lsls	r3, r3, #28
 801569a:	d501      	bpl.n	80156a0 <_vfiprintf_r+0x34>
 801569c:	692b      	ldr	r3, [r5, #16]
 801569e:	b99b      	cbnz	r3, 80156c8 <_vfiprintf_r+0x5c>
 80156a0:	4629      	mov	r1, r5
 80156a2:	4630      	mov	r0, r6
 80156a4:	f7fe fc74 	bl	8013f90 <__swsetup_r>
 80156a8:	b170      	cbz	r0, 80156c8 <_vfiprintf_r+0x5c>
 80156aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156ac:	07dc      	lsls	r4, r3, #31
 80156ae:	d504      	bpl.n	80156ba <_vfiprintf_r+0x4e>
 80156b0:	f04f 30ff 	mov.w	r0, #4294967295
 80156b4:	b01d      	add	sp, #116	@ 0x74
 80156b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ba:	89ab      	ldrh	r3, [r5, #12]
 80156bc:	0598      	lsls	r0, r3, #22
 80156be:	d4f7      	bmi.n	80156b0 <_vfiprintf_r+0x44>
 80156c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156c2:	f7fe fd39 	bl	8014138 <__retarget_lock_release_recursive>
 80156c6:	e7f3      	b.n	80156b0 <_vfiprintf_r+0x44>
 80156c8:	2300      	movs	r3, #0
 80156ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80156cc:	2320      	movs	r3, #32
 80156ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80156d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80156d6:	2330      	movs	r3, #48	@ 0x30
 80156d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015888 <_vfiprintf_r+0x21c>
 80156dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80156e0:	f04f 0901 	mov.w	r9, #1
 80156e4:	4623      	mov	r3, r4
 80156e6:	469a      	mov	sl, r3
 80156e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156ec:	b10a      	cbz	r2, 80156f2 <_vfiprintf_r+0x86>
 80156ee:	2a25      	cmp	r2, #37	@ 0x25
 80156f0:	d1f9      	bne.n	80156e6 <_vfiprintf_r+0x7a>
 80156f2:	ebba 0b04 	subs.w	fp, sl, r4
 80156f6:	d00b      	beq.n	8015710 <_vfiprintf_r+0xa4>
 80156f8:	465b      	mov	r3, fp
 80156fa:	4622      	mov	r2, r4
 80156fc:	4629      	mov	r1, r5
 80156fe:	4630      	mov	r0, r6
 8015700:	f7ff ffa1 	bl	8015646 <__sfputs_r>
 8015704:	3001      	adds	r0, #1
 8015706:	f000 80a7 	beq.w	8015858 <_vfiprintf_r+0x1ec>
 801570a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801570c:	445a      	add	r2, fp
 801570e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015710:	f89a 3000 	ldrb.w	r3, [sl]
 8015714:	2b00      	cmp	r3, #0
 8015716:	f000 809f 	beq.w	8015858 <_vfiprintf_r+0x1ec>
 801571a:	2300      	movs	r3, #0
 801571c:	f04f 32ff 	mov.w	r2, #4294967295
 8015720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015724:	f10a 0a01 	add.w	sl, sl, #1
 8015728:	9304      	str	r3, [sp, #16]
 801572a:	9307      	str	r3, [sp, #28]
 801572c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015730:	931a      	str	r3, [sp, #104]	@ 0x68
 8015732:	4654      	mov	r4, sl
 8015734:	2205      	movs	r2, #5
 8015736:	f814 1b01 	ldrb.w	r1, [r4], #1
 801573a:	4853      	ldr	r0, [pc, #332]	@ (8015888 <_vfiprintf_r+0x21c>)
 801573c:	f7ea fdd0 	bl	80002e0 <memchr>
 8015740:	9a04      	ldr	r2, [sp, #16]
 8015742:	b9d8      	cbnz	r0, 801577c <_vfiprintf_r+0x110>
 8015744:	06d1      	lsls	r1, r2, #27
 8015746:	bf44      	itt	mi
 8015748:	2320      	movmi	r3, #32
 801574a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801574e:	0713      	lsls	r3, r2, #28
 8015750:	bf44      	itt	mi
 8015752:	232b      	movmi	r3, #43	@ 0x2b
 8015754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015758:	f89a 3000 	ldrb.w	r3, [sl]
 801575c:	2b2a      	cmp	r3, #42	@ 0x2a
 801575e:	d015      	beq.n	801578c <_vfiprintf_r+0x120>
 8015760:	9a07      	ldr	r2, [sp, #28]
 8015762:	4654      	mov	r4, sl
 8015764:	2000      	movs	r0, #0
 8015766:	f04f 0c0a 	mov.w	ip, #10
 801576a:	4621      	mov	r1, r4
 801576c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015770:	3b30      	subs	r3, #48	@ 0x30
 8015772:	2b09      	cmp	r3, #9
 8015774:	d94b      	bls.n	801580e <_vfiprintf_r+0x1a2>
 8015776:	b1b0      	cbz	r0, 80157a6 <_vfiprintf_r+0x13a>
 8015778:	9207      	str	r2, [sp, #28]
 801577a:	e014      	b.n	80157a6 <_vfiprintf_r+0x13a>
 801577c:	eba0 0308 	sub.w	r3, r0, r8
 8015780:	fa09 f303 	lsl.w	r3, r9, r3
 8015784:	4313      	orrs	r3, r2
 8015786:	9304      	str	r3, [sp, #16]
 8015788:	46a2      	mov	sl, r4
 801578a:	e7d2      	b.n	8015732 <_vfiprintf_r+0xc6>
 801578c:	9b03      	ldr	r3, [sp, #12]
 801578e:	1d19      	adds	r1, r3, #4
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	9103      	str	r1, [sp, #12]
 8015794:	2b00      	cmp	r3, #0
 8015796:	bfbb      	ittet	lt
 8015798:	425b      	neglt	r3, r3
 801579a:	f042 0202 	orrlt.w	r2, r2, #2
 801579e:	9307      	strge	r3, [sp, #28]
 80157a0:	9307      	strlt	r3, [sp, #28]
 80157a2:	bfb8      	it	lt
 80157a4:	9204      	strlt	r2, [sp, #16]
 80157a6:	7823      	ldrb	r3, [r4, #0]
 80157a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80157aa:	d10a      	bne.n	80157c2 <_vfiprintf_r+0x156>
 80157ac:	7863      	ldrb	r3, [r4, #1]
 80157ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80157b0:	d132      	bne.n	8015818 <_vfiprintf_r+0x1ac>
 80157b2:	9b03      	ldr	r3, [sp, #12]
 80157b4:	1d1a      	adds	r2, r3, #4
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	9203      	str	r2, [sp, #12]
 80157ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80157be:	3402      	adds	r4, #2
 80157c0:	9305      	str	r3, [sp, #20]
 80157c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015898 <_vfiprintf_r+0x22c>
 80157c6:	7821      	ldrb	r1, [r4, #0]
 80157c8:	2203      	movs	r2, #3
 80157ca:	4650      	mov	r0, sl
 80157cc:	f7ea fd88 	bl	80002e0 <memchr>
 80157d0:	b138      	cbz	r0, 80157e2 <_vfiprintf_r+0x176>
 80157d2:	9b04      	ldr	r3, [sp, #16]
 80157d4:	eba0 000a 	sub.w	r0, r0, sl
 80157d8:	2240      	movs	r2, #64	@ 0x40
 80157da:	4082      	lsls	r2, r0
 80157dc:	4313      	orrs	r3, r2
 80157de:	3401      	adds	r4, #1
 80157e0:	9304      	str	r3, [sp, #16]
 80157e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157e6:	4829      	ldr	r0, [pc, #164]	@ (801588c <_vfiprintf_r+0x220>)
 80157e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80157ec:	2206      	movs	r2, #6
 80157ee:	f7ea fd77 	bl	80002e0 <memchr>
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d03f      	beq.n	8015876 <_vfiprintf_r+0x20a>
 80157f6:	4b26      	ldr	r3, [pc, #152]	@ (8015890 <_vfiprintf_r+0x224>)
 80157f8:	bb1b      	cbnz	r3, 8015842 <_vfiprintf_r+0x1d6>
 80157fa:	9b03      	ldr	r3, [sp, #12]
 80157fc:	3307      	adds	r3, #7
 80157fe:	f023 0307 	bic.w	r3, r3, #7
 8015802:	3308      	adds	r3, #8
 8015804:	9303      	str	r3, [sp, #12]
 8015806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015808:	443b      	add	r3, r7
 801580a:	9309      	str	r3, [sp, #36]	@ 0x24
 801580c:	e76a      	b.n	80156e4 <_vfiprintf_r+0x78>
 801580e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015812:	460c      	mov	r4, r1
 8015814:	2001      	movs	r0, #1
 8015816:	e7a8      	b.n	801576a <_vfiprintf_r+0xfe>
 8015818:	2300      	movs	r3, #0
 801581a:	3401      	adds	r4, #1
 801581c:	9305      	str	r3, [sp, #20]
 801581e:	4619      	mov	r1, r3
 8015820:	f04f 0c0a 	mov.w	ip, #10
 8015824:	4620      	mov	r0, r4
 8015826:	f810 2b01 	ldrb.w	r2, [r0], #1
 801582a:	3a30      	subs	r2, #48	@ 0x30
 801582c:	2a09      	cmp	r2, #9
 801582e:	d903      	bls.n	8015838 <_vfiprintf_r+0x1cc>
 8015830:	2b00      	cmp	r3, #0
 8015832:	d0c6      	beq.n	80157c2 <_vfiprintf_r+0x156>
 8015834:	9105      	str	r1, [sp, #20]
 8015836:	e7c4      	b.n	80157c2 <_vfiprintf_r+0x156>
 8015838:	fb0c 2101 	mla	r1, ip, r1, r2
 801583c:	4604      	mov	r4, r0
 801583e:	2301      	movs	r3, #1
 8015840:	e7f0      	b.n	8015824 <_vfiprintf_r+0x1b8>
 8015842:	ab03      	add	r3, sp, #12
 8015844:	9300      	str	r3, [sp, #0]
 8015846:	462a      	mov	r2, r5
 8015848:	4b12      	ldr	r3, [pc, #72]	@ (8015894 <_vfiprintf_r+0x228>)
 801584a:	a904      	add	r1, sp, #16
 801584c:	4630      	mov	r0, r6
 801584e:	f7fd fe43 	bl	80134d8 <_printf_float>
 8015852:	4607      	mov	r7, r0
 8015854:	1c78      	adds	r0, r7, #1
 8015856:	d1d6      	bne.n	8015806 <_vfiprintf_r+0x19a>
 8015858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801585a:	07d9      	lsls	r1, r3, #31
 801585c:	d405      	bmi.n	801586a <_vfiprintf_r+0x1fe>
 801585e:	89ab      	ldrh	r3, [r5, #12]
 8015860:	059a      	lsls	r2, r3, #22
 8015862:	d402      	bmi.n	801586a <_vfiprintf_r+0x1fe>
 8015864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015866:	f7fe fc67 	bl	8014138 <__retarget_lock_release_recursive>
 801586a:	89ab      	ldrh	r3, [r5, #12]
 801586c:	065b      	lsls	r3, r3, #25
 801586e:	f53f af1f 	bmi.w	80156b0 <_vfiprintf_r+0x44>
 8015872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015874:	e71e      	b.n	80156b4 <_vfiprintf_r+0x48>
 8015876:	ab03      	add	r3, sp, #12
 8015878:	9300      	str	r3, [sp, #0]
 801587a:	462a      	mov	r2, r5
 801587c:	4b05      	ldr	r3, [pc, #20]	@ (8015894 <_vfiprintf_r+0x228>)
 801587e:	a904      	add	r1, sp, #16
 8015880:	4630      	mov	r0, r6
 8015882:	f7fe f8b1 	bl	80139e8 <_printf_i>
 8015886:	e7e4      	b.n	8015852 <_vfiprintf_r+0x1e6>
 8015888:	08016070 	.word	0x08016070
 801588c:	0801607a 	.word	0x0801607a
 8015890:	080134d9 	.word	0x080134d9
 8015894:	08015647 	.word	0x08015647
 8015898:	08016076 	.word	0x08016076

0801589c <__sflush_r>:
 801589c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80158a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158a4:	0716      	lsls	r6, r2, #28
 80158a6:	4605      	mov	r5, r0
 80158a8:	460c      	mov	r4, r1
 80158aa:	d454      	bmi.n	8015956 <__sflush_r+0xba>
 80158ac:	684b      	ldr	r3, [r1, #4]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	dc02      	bgt.n	80158b8 <__sflush_r+0x1c>
 80158b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	dd48      	ble.n	801594a <__sflush_r+0xae>
 80158b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80158ba:	2e00      	cmp	r6, #0
 80158bc:	d045      	beq.n	801594a <__sflush_r+0xae>
 80158be:	2300      	movs	r3, #0
 80158c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80158c4:	682f      	ldr	r7, [r5, #0]
 80158c6:	6a21      	ldr	r1, [r4, #32]
 80158c8:	602b      	str	r3, [r5, #0]
 80158ca:	d030      	beq.n	801592e <__sflush_r+0x92>
 80158cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80158ce:	89a3      	ldrh	r3, [r4, #12]
 80158d0:	0759      	lsls	r1, r3, #29
 80158d2:	d505      	bpl.n	80158e0 <__sflush_r+0x44>
 80158d4:	6863      	ldr	r3, [r4, #4]
 80158d6:	1ad2      	subs	r2, r2, r3
 80158d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80158da:	b10b      	cbz	r3, 80158e0 <__sflush_r+0x44>
 80158dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80158de:	1ad2      	subs	r2, r2, r3
 80158e0:	2300      	movs	r3, #0
 80158e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80158e4:	6a21      	ldr	r1, [r4, #32]
 80158e6:	4628      	mov	r0, r5
 80158e8:	47b0      	blx	r6
 80158ea:	1c43      	adds	r3, r0, #1
 80158ec:	89a3      	ldrh	r3, [r4, #12]
 80158ee:	d106      	bne.n	80158fe <__sflush_r+0x62>
 80158f0:	6829      	ldr	r1, [r5, #0]
 80158f2:	291d      	cmp	r1, #29
 80158f4:	d82b      	bhi.n	801594e <__sflush_r+0xb2>
 80158f6:	4a2a      	ldr	r2, [pc, #168]	@ (80159a0 <__sflush_r+0x104>)
 80158f8:	410a      	asrs	r2, r1
 80158fa:	07d6      	lsls	r6, r2, #31
 80158fc:	d427      	bmi.n	801594e <__sflush_r+0xb2>
 80158fe:	2200      	movs	r2, #0
 8015900:	6062      	str	r2, [r4, #4]
 8015902:	04d9      	lsls	r1, r3, #19
 8015904:	6922      	ldr	r2, [r4, #16]
 8015906:	6022      	str	r2, [r4, #0]
 8015908:	d504      	bpl.n	8015914 <__sflush_r+0x78>
 801590a:	1c42      	adds	r2, r0, #1
 801590c:	d101      	bne.n	8015912 <__sflush_r+0x76>
 801590e:	682b      	ldr	r3, [r5, #0]
 8015910:	b903      	cbnz	r3, 8015914 <__sflush_r+0x78>
 8015912:	6560      	str	r0, [r4, #84]	@ 0x54
 8015914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015916:	602f      	str	r7, [r5, #0]
 8015918:	b1b9      	cbz	r1, 801594a <__sflush_r+0xae>
 801591a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801591e:	4299      	cmp	r1, r3
 8015920:	d002      	beq.n	8015928 <__sflush_r+0x8c>
 8015922:	4628      	mov	r0, r5
 8015924:	f7ff f9f6 	bl	8014d14 <_free_r>
 8015928:	2300      	movs	r3, #0
 801592a:	6363      	str	r3, [r4, #52]	@ 0x34
 801592c:	e00d      	b.n	801594a <__sflush_r+0xae>
 801592e:	2301      	movs	r3, #1
 8015930:	4628      	mov	r0, r5
 8015932:	47b0      	blx	r6
 8015934:	4602      	mov	r2, r0
 8015936:	1c50      	adds	r0, r2, #1
 8015938:	d1c9      	bne.n	80158ce <__sflush_r+0x32>
 801593a:	682b      	ldr	r3, [r5, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d0c6      	beq.n	80158ce <__sflush_r+0x32>
 8015940:	2b1d      	cmp	r3, #29
 8015942:	d001      	beq.n	8015948 <__sflush_r+0xac>
 8015944:	2b16      	cmp	r3, #22
 8015946:	d11e      	bne.n	8015986 <__sflush_r+0xea>
 8015948:	602f      	str	r7, [r5, #0]
 801594a:	2000      	movs	r0, #0
 801594c:	e022      	b.n	8015994 <__sflush_r+0xf8>
 801594e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015952:	b21b      	sxth	r3, r3
 8015954:	e01b      	b.n	801598e <__sflush_r+0xf2>
 8015956:	690f      	ldr	r7, [r1, #16]
 8015958:	2f00      	cmp	r7, #0
 801595a:	d0f6      	beq.n	801594a <__sflush_r+0xae>
 801595c:	0793      	lsls	r3, r2, #30
 801595e:	680e      	ldr	r6, [r1, #0]
 8015960:	bf08      	it	eq
 8015962:	694b      	ldreq	r3, [r1, #20]
 8015964:	600f      	str	r7, [r1, #0]
 8015966:	bf18      	it	ne
 8015968:	2300      	movne	r3, #0
 801596a:	eba6 0807 	sub.w	r8, r6, r7
 801596e:	608b      	str	r3, [r1, #8]
 8015970:	f1b8 0f00 	cmp.w	r8, #0
 8015974:	dde9      	ble.n	801594a <__sflush_r+0xae>
 8015976:	6a21      	ldr	r1, [r4, #32]
 8015978:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801597a:	4643      	mov	r3, r8
 801597c:	463a      	mov	r2, r7
 801597e:	4628      	mov	r0, r5
 8015980:	47b0      	blx	r6
 8015982:	2800      	cmp	r0, #0
 8015984:	dc08      	bgt.n	8015998 <__sflush_r+0xfc>
 8015986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801598a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801598e:	81a3      	strh	r3, [r4, #12]
 8015990:	f04f 30ff 	mov.w	r0, #4294967295
 8015994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015998:	4407      	add	r7, r0
 801599a:	eba8 0800 	sub.w	r8, r8, r0
 801599e:	e7e7      	b.n	8015970 <__sflush_r+0xd4>
 80159a0:	dfbffffe 	.word	0xdfbffffe

080159a4 <_fflush_r>:
 80159a4:	b538      	push	{r3, r4, r5, lr}
 80159a6:	690b      	ldr	r3, [r1, #16]
 80159a8:	4605      	mov	r5, r0
 80159aa:	460c      	mov	r4, r1
 80159ac:	b913      	cbnz	r3, 80159b4 <_fflush_r+0x10>
 80159ae:	2500      	movs	r5, #0
 80159b0:	4628      	mov	r0, r5
 80159b2:	bd38      	pop	{r3, r4, r5, pc}
 80159b4:	b118      	cbz	r0, 80159be <_fflush_r+0x1a>
 80159b6:	6a03      	ldr	r3, [r0, #32]
 80159b8:	b90b      	cbnz	r3, 80159be <_fflush_r+0x1a>
 80159ba:	f7fe f9c1 	bl	8013d40 <__sinit>
 80159be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d0f3      	beq.n	80159ae <_fflush_r+0xa>
 80159c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80159c8:	07d0      	lsls	r0, r2, #31
 80159ca:	d404      	bmi.n	80159d6 <_fflush_r+0x32>
 80159cc:	0599      	lsls	r1, r3, #22
 80159ce:	d402      	bmi.n	80159d6 <_fflush_r+0x32>
 80159d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80159d2:	f7fe fbb0 	bl	8014136 <__retarget_lock_acquire_recursive>
 80159d6:	4628      	mov	r0, r5
 80159d8:	4621      	mov	r1, r4
 80159da:	f7ff ff5f 	bl	801589c <__sflush_r>
 80159de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80159e0:	07da      	lsls	r2, r3, #31
 80159e2:	4605      	mov	r5, r0
 80159e4:	d4e4      	bmi.n	80159b0 <_fflush_r+0xc>
 80159e6:	89a3      	ldrh	r3, [r4, #12]
 80159e8:	059b      	lsls	r3, r3, #22
 80159ea:	d4e1      	bmi.n	80159b0 <_fflush_r+0xc>
 80159ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80159ee:	f7fe fba3 	bl	8014138 <__retarget_lock_release_recursive>
 80159f2:	e7dd      	b.n	80159b0 <_fflush_r+0xc>

080159f4 <__swhatbuf_r>:
 80159f4:	b570      	push	{r4, r5, r6, lr}
 80159f6:	460c      	mov	r4, r1
 80159f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159fc:	2900      	cmp	r1, #0
 80159fe:	b096      	sub	sp, #88	@ 0x58
 8015a00:	4615      	mov	r5, r2
 8015a02:	461e      	mov	r6, r3
 8015a04:	da0d      	bge.n	8015a22 <__swhatbuf_r+0x2e>
 8015a06:	89a3      	ldrh	r3, [r4, #12]
 8015a08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015a0c:	f04f 0100 	mov.w	r1, #0
 8015a10:	bf14      	ite	ne
 8015a12:	2340      	movne	r3, #64	@ 0x40
 8015a14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015a18:	2000      	movs	r0, #0
 8015a1a:	6031      	str	r1, [r6, #0]
 8015a1c:	602b      	str	r3, [r5, #0]
 8015a1e:	b016      	add	sp, #88	@ 0x58
 8015a20:	bd70      	pop	{r4, r5, r6, pc}
 8015a22:	466a      	mov	r2, sp
 8015a24:	f000 f848 	bl	8015ab8 <_fstat_r>
 8015a28:	2800      	cmp	r0, #0
 8015a2a:	dbec      	blt.n	8015a06 <__swhatbuf_r+0x12>
 8015a2c:	9901      	ldr	r1, [sp, #4]
 8015a2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015a32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015a36:	4259      	negs	r1, r3
 8015a38:	4159      	adcs	r1, r3
 8015a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015a3e:	e7eb      	b.n	8015a18 <__swhatbuf_r+0x24>

08015a40 <__smakebuf_r>:
 8015a40:	898b      	ldrh	r3, [r1, #12]
 8015a42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a44:	079d      	lsls	r5, r3, #30
 8015a46:	4606      	mov	r6, r0
 8015a48:	460c      	mov	r4, r1
 8015a4a:	d507      	bpl.n	8015a5c <__smakebuf_r+0x1c>
 8015a4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015a50:	6023      	str	r3, [r4, #0]
 8015a52:	6123      	str	r3, [r4, #16]
 8015a54:	2301      	movs	r3, #1
 8015a56:	6163      	str	r3, [r4, #20]
 8015a58:	b003      	add	sp, #12
 8015a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a5c:	ab01      	add	r3, sp, #4
 8015a5e:	466a      	mov	r2, sp
 8015a60:	f7ff ffc8 	bl	80159f4 <__swhatbuf_r>
 8015a64:	9f00      	ldr	r7, [sp, #0]
 8015a66:	4605      	mov	r5, r0
 8015a68:	4639      	mov	r1, r7
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	f7ff f9c6 	bl	8014dfc <_malloc_r>
 8015a70:	b948      	cbnz	r0, 8015a86 <__smakebuf_r+0x46>
 8015a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a76:	059a      	lsls	r2, r3, #22
 8015a78:	d4ee      	bmi.n	8015a58 <__smakebuf_r+0x18>
 8015a7a:	f023 0303 	bic.w	r3, r3, #3
 8015a7e:	f043 0302 	orr.w	r3, r3, #2
 8015a82:	81a3      	strh	r3, [r4, #12]
 8015a84:	e7e2      	b.n	8015a4c <__smakebuf_r+0xc>
 8015a86:	89a3      	ldrh	r3, [r4, #12]
 8015a88:	6020      	str	r0, [r4, #0]
 8015a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015a8e:	81a3      	strh	r3, [r4, #12]
 8015a90:	9b01      	ldr	r3, [sp, #4]
 8015a92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015a96:	b15b      	cbz	r3, 8015ab0 <__smakebuf_r+0x70>
 8015a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a9c:	4630      	mov	r0, r6
 8015a9e:	f000 f81d 	bl	8015adc <_isatty_r>
 8015aa2:	b128      	cbz	r0, 8015ab0 <__smakebuf_r+0x70>
 8015aa4:	89a3      	ldrh	r3, [r4, #12]
 8015aa6:	f023 0303 	bic.w	r3, r3, #3
 8015aaa:	f043 0301 	orr.w	r3, r3, #1
 8015aae:	81a3      	strh	r3, [r4, #12]
 8015ab0:	89a3      	ldrh	r3, [r4, #12]
 8015ab2:	431d      	orrs	r5, r3
 8015ab4:	81a5      	strh	r5, [r4, #12]
 8015ab6:	e7cf      	b.n	8015a58 <__smakebuf_r+0x18>

08015ab8 <_fstat_r>:
 8015ab8:	b538      	push	{r3, r4, r5, lr}
 8015aba:	4d07      	ldr	r5, [pc, #28]	@ (8015ad8 <_fstat_r+0x20>)
 8015abc:	2300      	movs	r3, #0
 8015abe:	4604      	mov	r4, r0
 8015ac0:	4608      	mov	r0, r1
 8015ac2:	4611      	mov	r1, r2
 8015ac4:	602b      	str	r3, [r5, #0]
 8015ac6:	f7ec fb7f 	bl	80021c8 <_fstat>
 8015aca:	1c43      	adds	r3, r0, #1
 8015acc:	d102      	bne.n	8015ad4 <_fstat_r+0x1c>
 8015ace:	682b      	ldr	r3, [r5, #0]
 8015ad0:	b103      	cbz	r3, 8015ad4 <_fstat_r+0x1c>
 8015ad2:	6023      	str	r3, [r4, #0]
 8015ad4:	bd38      	pop	{r3, r4, r5, pc}
 8015ad6:	bf00      	nop
 8015ad8:	2400165c 	.word	0x2400165c

08015adc <_isatty_r>:
 8015adc:	b538      	push	{r3, r4, r5, lr}
 8015ade:	4d06      	ldr	r5, [pc, #24]	@ (8015af8 <_isatty_r+0x1c>)
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	4604      	mov	r4, r0
 8015ae4:	4608      	mov	r0, r1
 8015ae6:	602b      	str	r3, [r5, #0]
 8015ae8:	f7ec fb7e 	bl	80021e8 <_isatty>
 8015aec:	1c43      	adds	r3, r0, #1
 8015aee:	d102      	bne.n	8015af6 <_isatty_r+0x1a>
 8015af0:	682b      	ldr	r3, [r5, #0]
 8015af2:	b103      	cbz	r3, 8015af6 <_isatty_r+0x1a>
 8015af4:	6023      	str	r3, [r4, #0]
 8015af6:	bd38      	pop	{r3, r4, r5, pc}
 8015af8:	2400165c 	.word	0x2400165c

08015afc <_sbrk_r>:
 8015afc:	b538      	push	{r3, r4, r5, lr}
 8015afe:	4d06      	ldr	r5, [pc, #24]	@ (8015b18 <_sbrk_r+0x1c>)
 8015b00:	2300      	movs	r3, #0
 8015b02:	4604      	mov	r4, r0
 8015b04:	4608      	mov	r0, r1
 8015b06:	602b      	str	r3, [r5, #0]
 8015b08:	f7ec fb86 	bl	8002218 <_sbrk>
 8015b0c:	1c43      	adds	r3, r0, #1
 8015b0e:	d102      	bne.n	8015b16 <_sbrk_r+0x1a>
 8015b10:	682b      	ldr	r3, [r5, #0]
 8015b12:	b103      	cbz	r3, 8015b16 <_sbrk_r+0x1a>
 8015b14:	6023      	str	r3, [r4, #0]
 8015b16:	bd38      	pop	{r3, r4, r5, pc}
 8015b18:	2400165c 	.word	0x2400165c

08015b1c <__assert_func>:
 8015b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015b1e:	4614      	mov	r4, r2
 8015b20:	461a      	mov	r2, r3
 8015b22:	4b09      	ldr	r3, [pc, #36]	@ (8015b48 <__assert_func+0x2c>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	4605      	mov	r5, r0
 8015b28:	68d8      	ldr	r0, [r3, #12]
 8015b2a:	b954      	cbnz	r4, 8015b42 <__assert_func+0x26>
 8015b2c:	4b07      	ldr	r3, [pc, #28]	@ (8015b4c <__assert_func+0x30>)
 8015b2e:	461c      	mov	r4, r3
 8015b30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015b34:	9100      	str	r1, [sp, #0]
 8015b36:	462b      	mov	r3, r5
 8015b38:	4905      	ldr	r1, [pc, #20]	@ (8015b50 <__assert_func+0x34>)
 8015b3a:	f000 f841 	bl	8015bc0 <fiprintf>
 8015b3e:	f000 f851 	bl	8015be4 <abort>
 8015b42:	4b04      	ldr	r3, [pc, #16]	@ (8015b54 <__assert_func+0x38>)
 8015b44:	e7f4      	b.n	8015b30 <__assert_func+0x14>
 8015b46:	bf00      	nop
 8015b48:	2400012c 	.word	0x2400012c
 8015b4c:	080160c6 	.word	0x080160c6
 8015b50:	08016098 	.word	0x08016098
 8015b54:	0801608b 	.word	0x0801608b

08015b58 <_calloc_r>:
 8015b58:	b570      	push	{r4, r5, r6, lr}
 8015b5a:	fba1 5402 	umull	r5, r4, r1, r2
 8015b5e:	b93c      	cbnz	r4, 8015b70 <_calloc_r+0x18>
 8015b60:	4629      	mov	r1, r5
 8015b62:	f7ff f94b 	bl	8014dfc <_malloc_r>
 8015b66:	4606      	mov	r6, r0
 8015b68:	b928      	cbnz	r0, 8015b76 <_calloc_r+0x1e>
 8015b6a:	2600      	movs	r6, #0
 8015b6c:	4630      	mov	r0, r6
 8015b6e:	bd70      	pop	{r4, r5, r6, pc}
 8015b70:	220c      	movs	r2, #12
 8015b72:	6002      	str	r2, [r0, #0]
 8015b74:	e7f9      	b.n	8015b6a <_calloc_r+0x12>
 8015b76:	462a      	mov	r2, r5
 8015b78:	4621      	mov	r1, r4
 8015b7a:	f7fe fa5f 	bl	801403c <memset>
 8015b7e:	e7f5      	b.n	8015b6c <_calloc_r+0x14>

08015b80 <__ascii_mbtowc>:
 8015b80:	b082      	sub	sp, #8
 8015b82:	b901      	cbnz	r1, 8015b86 <__ascii_mbtowc+0x6>
 8015b84:	a901      	add	r1, sp, #4
 8015b86:	b142      	cbz	r2, 8015b9a <__ascii_mbtowc+0x1a>
 8015b88:	b14b      	cbz	r3, 8015b9e <__ascii_mbtowc+0x1e>
 8015b8a:	7813      	ldrb	r3, [r2, #0]
 8015b8c:	600b      	str	r3, [r1, #0]
 8015b8e:	7812      	ldrb	r2, [r2, #0]
 8015b90:	1e10      	subs	r0, r2, #0
 8015b92:	bf18      	it	ne
 8015b94:	2001      	movne	r0, #1
 8015b96:	b002      	add	sp, #8
 8015b98:	4770      	bx	lr
 8015b9a:	4610      	mov	r0, r2
 8015b9c:	e7fb      	b.n	8015b96 <__ascii_mbtowc+0x16>
 8015b9e:	f06f 0001 	mvn.w	r0, #1
 8015ba2:	e7f8      	b.n	8015b96 <__ascii_mbtowc+0x16>

08015ba4 <__ascii_wctomb>:
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	4608      	mov	r0, r1
 8015ba8:	b141      	cbz	r1, 8015bbc <__ascii_wctomb+0x18>
 8015baa:	2aff      	cmp	r2, #255	@ 0xff
 8015bac:	d904      	bls.n	8015bb8 <__ascii_wctomb+0x14>
 8015bae:	228a      	movs	r2, #138	@ 0x8a
 8015bb0:	601a      	str	r2, [r3, #0]
 8015bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8015bb6:	4770      	bx	lr
 8015bb8:	700a      	strb	r2, [r1, #0]
 8015bba:	2001      	movs	r0, #1
 8015bbc:	4770      	bx	lr
	...

08015bc0 <fiprintf>:
 8015bc0:	b40e      	push	{r1, r2, r3}
 8015bc2:	b503      	push	{r0, r1, lr}
 8015bc4:	4601      	mov	r1, r0
 8015bc6:	ab03      	add	r3, sp, #12
 8015bc8:	4805      	ldr	r0, [pc, #20]	@ (8015be0 <fiprintf+0x20>)
 8015bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8015bce:	6800      	ldr	r0, [r0, #0]
 8015bd0:	9301      	str	r3, [sp, #4]
 8015bd2:	f7ff fd4b 	bl	801566c <_vfiprintf_r>
 8015bd6:	b002      	add	sp, #8
 8015bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015bdc:	b003      	add	sp, #12
 8015bde:	4770      	bx	lr
 8015be0:	2400012c 	.word	0x2400012c

08015be4 <abort>:
 8015be4:	b508      	push	{r3, lr}
 8015be6:	2006      	movs	r0, #6
 8015be8:	f000 f82c 	bl	8015c44 <raise>
 8015bec:	2001      	movs	r0, #1
 8015bee:	f7ec fab7 	bl	8002160 <_exit>

08015bf2 <_raise_r>:
 8015bf2:	291f      	cmp	r1, #31
 8015bf4:	b538      	push	{r3, r4, r5, lr}
 8015bf6:	4605      	mov	r5, r0
 8015bf8:	460c      	mov	r4, r1
 8015bfa:	d904      	bls.n	8015c06 <_raise_r+0x14>
 8015bfc:	2316      	movs	r3, #22
 8015bfe:	6003      	str	r3, [r0, #0]
 8015c00:	f04f 30ff 	mov.w	r0, #4294967295
 8015c04:	bd38      	pop	{r3, r4, r5, pc}
 8015c06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015c08:	b112      	cbz	r2, 8015c10 <_raise_r+0x1e>
 8015c0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015c0e:	b94b      	cbnz	r3, 8015c24 <_raise_r+0x32>
 8015c10:	4628      	mov	r0, r5
 8015c12:	f000 f831 	bl	8015c78 <_getpid_r>
 8015c16:	4622      	mov	r2, r4
 8015c18:	4601      	mov	r1, r0
 8015c1a:	4628      	mov	r0, r5
 8015c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c20:	f000 b818 	b.w	8015c54 <_kill_r>
 8015c24:	2b01      	cmp	r3, #1
 8015c26:	d00a      	beq.n	8015c3e <_raise_r+0x4c>
 8015c28:	1c59      	adds	r1, r3, #1
 8015c2a:	d103      	bne.n	8015c34 <_raise_r+0x42>
 8015c2c:	2316      	movs	r3, #22
 8015c2e:	6003      	str	r3, [r0, #0]
 8015c30:	2001      	movs	r0, #1
 8015c32:	e7e7      	b.n	8015c04 <_raise_r+0x12>
 8015c34:	2100      	movs	r1, #0
 8015c36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	4798      	blx	r3
 8015c3e:	2000      	movs	r0, #0
 8015c40:	e7e0      	b.n	8015c04 <_raise_r+0x12>
	...

08015c44 <raise>:
 8015c44:	4b02      	ldr	r3, [pc, #8]	@ (8015c50 <raise+0xc>)
 8015c46:	4601      	mov	r1, r0
 8015c48:	6818      	ldr	r0, [r3, #0]
 8015c4a:	f7ff bfd2 	b.w	8015bf2 <_raise_r>
 8015c4e:	bf00      	nop
 8015c50:	2400012c 	.word	0x2400012c

08015c54 <_kill_r>:
 8015c54:	b538      	push	{r3, r4, r5, lr}
 8015c56:	4d07      	ldr	r5, [pc, #28]	@ (8015c74 <_kill_r+0x20>)
 8015c58:	2300      	movs	r3, #0
 8015c5a:	4604      	mov	r4, r0
 8015c5c:	4608      	mov	r0, r1
 8015c5e:	4611      	mov	r1, r2
 8015c60:	602b      	str	r3, [r5, #0]
 8015c62:	f7ec fa6d 	bl	8002140 <_kill>
 8015c66:	1c43      	adds	r3, r0, #1
 8015c68:	d102      	bne.n	8015c70 <_kill_r+0x1c>
 8015c6a:	682b      	ldr	r3, [r5, #0]
 8015c6c:	b103      	cbz	r3, 8015c70 <_kill_r+0x1c>
 8015c6e:	6023      	str	r3, [r4, #0]
 8015c70:	bd38      	pop	{r3, r4, r5, pc}
 8015c72:	bf00      	nop
 8015c74:	2400165c 	.word	0x2400165c

08015c78 <_getpid_r>:
 8015c78:	f7ec ba5a 	b.w	8002130 <_getpid>

08015c7c <_init>:
 8015c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c7e:	bf00      	nop
 8015c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c82:	bc08      	pop	{r3}
 8015c84:	469e      	mov	lr, r3
 8015c86:	4770      	bx	lr

08015c88 <_fini>:
 8015c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c8a:	bf00      	nop
 8015c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c8e:	bc08      	pop	{r3}
 8015c90:	469e      	mov	lr, r3
 8015c92:	4770      	bx	lr
