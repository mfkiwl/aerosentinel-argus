
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012044  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08012318  08012318  00013318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080127d0  080127d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080127d8  080127d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080127dc  080127dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  080127e0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b38  240001d8  080129b8  000141d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000d10  080129b8  00014d10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025466  00000000  00000000  00014206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ba5  00000000  00000000  0003966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fb0  00000000  00000000  0003d218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018e7  00000000  00000000  0003f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005a97  00000000  00000000  00040aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002980b  00000000  00000000  00046546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172fff  00000000  00000000  0006fd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e2d50  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009eec  00000000  00000000  001e2d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ecc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080122fc 	.word	0x080122fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	080122fc 	.word	0x080122fc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ab0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ab8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac0:	e000      	b.n	8000ac4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ac2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ace:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	int i=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffc7 	bl	8000a98 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x16>
	}
	return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b28:	f001 faa8 	bl	800207c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f002 fcd8 	bl	80034e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f84a 	bl	8000bc8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b34:	f000 f8b8 	bl	8000ca8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f001 f994 	bl	8001e64 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000b3c:	f000 fa84 	bl	8001048 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8000b40:	f000 f8e2 	bl	8000d08 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b44:	f000 f9c0 	bl	8000ec8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b48:	f000 f9fe 	bl	8000f48 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000b4c:	f000 fa3c 	bl	8000fc8 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000b50:	f000 fa9e 	bl	8001090 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b54:	f000 faf2 	bl	800113c <MX_SPI2_Init>
  MX_SPI4_Init();
 8000b58:	f000 fb46 	bl	80011e8 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000b5c:	f000 fb9a 	bl	8001294 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b60:	f000 fc5c 	bl	800141c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b64:	f000 fcb4 	bl	80014d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b68:	f000 fd0c 	bl	8001584 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b6c:	f000 fd64 	bl	8001638 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000b70:	f000 fdbc 	bl	80016ec <MX_TIM8_Init>
  MX_TIM12_Init();
 8000b74:	f000 fe4a 	bl	800180c <MX_TIM12_Init>
  MX_TIM15_Init();
 8000b78:	f000 fea2 	bl	80018c0 <MX_TIM15_Init>
  MX_UART4_Init();
 8000b7c:	f000 ff26 	bl	80019cc <MX_UART4_Init>
  MX_UART5_Init();
 8000b80:	f000 ff70 	bl	8001a64 <MX_UART5_Init>
  MX_UART7_Init();
 8000b84:	f000 ffba 	bl	8001afc <MX_UART7_Init>
  MX_UART8_Init();
 8000b88:	f001 f804 	bl	8001b94 <MX_UART8_Init>
  MX_USART1_Init();
 8000b8c:	f001 f850 	bl	8001c30 <MX_USART1_Init>
  MX_USART2_Init();
 8000b90:	f001 f8ac 	bl	8001cec <MX_USART2_Init>
  MX_USART3_Init();
 8000b94:	f001 f908 	bl	8001da8 <MX_USART3_Init>
  MX_ADC2_Init();
 8000b98:	f000 f930 	bl	8000dfc <MX_ADC2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count++; //Increment count variable
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <main+0x9c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <main+0x9c>)
 8000ba6:	701a      	strb	r2, [r3, #0]
	  printf("Hello World from Aerosentinel Argus Navigation Module! Count =%d \n", count); // Hello World Test
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <main+0x9c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <main+0xa0>)
 8000bb0:	f00e f818 	bl	800ebe4 <iprintf>
	  HAL_Delay(250);
 8000bb4:	20fa      	movs	r0, #250	@ 0xfa
 8000bb6:	f002 fd25 	bl	8003604 <HAL_Delay>
	  count++; //Increment count variable
 8000bba:	bf00      	nop
 8000bbc:	e7ee      	b.n	8000b9c <main+0x78>
 8000bbe:	bf00      	nop
 8000bc0:	24000bb4 	.word	0x24000bb4
 8000bc4:	08012318 	.word	0x08012318

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b09c      	sub	sp, #112	@ 0x70
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd2:	224c      	movs	r2, #76	@ 0x4c
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00e f879 	bl	800ecce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2220      	movs	r2, #32
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f00e f873 	bl	800ecce <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000be8:	2002      	movs	r0, #2
 8000bea:	f004 fcf5 	bl	80055d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca4 <SystemClock_Config+0xdc>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca4 <SystemClock_Config+0xdc>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <SystemClock_Config+0xdc>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c0e:	bf00      	nop
 8000c10:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <SystemClock_Config+0xdc>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c1c:	d1f8      	bne.n	8000c10 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c26:	2340      	movs	r3, #64	@ 0x40
 8000c28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c32:	2304      	movs	r3, #4
 8000c34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c36:	230c      	movs	r3, #12
 8000c38:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c46:	230c      	movs	r3, #12
 8000c48:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fcf8 	bl	800564c <HAL_RCC_OscConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c62:	f001 fa37 	bl	80020d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	233f      	movs	r3, #63	@ 0x3f
 8000c68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c7a:	2340      	movs	r3, #64	@ 0x40
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c84:	2340      	movs	r3, #64	@ 0x40
 8000c86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f005 f8b7 	bl	8005e00 <HAL_RCC_ClockConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c98:	f001 fa1c 	bl	80020d4 <Error_Handler>
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	3770      	adds	r7, #112	@ 0x70
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024800 	.word	0x58024800

08000ca8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0ae      	sub	sp, #184	@ 0xb8
 8000cac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	22b8      	movs	r2, #184	@ 0xb8
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00e f80a 	bl	800ecce <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cda:	23c0      	movs	r3, #192	@ 0xc0
 8000cdc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f005 fc12 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000cfa:	f001 f9eb 	bl	80020d4 <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	37b8      	adds	r7, #184	@ 0xb8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	@ 0x30
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2224      	movs	r2, #36	@ 0x24
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00d ffd4 	bl	800ecce <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d26:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <MX_ADC1_Init+0xe8>)
 8000d2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d2e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000d34:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d46:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4c:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d52:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d86:	4819      	ldr	r0, [pc, #100]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000d88:	f002 fea6 	bl	8003ad8 <HAL_ADC_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d92:	f001 f99f 	bl	80020d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4812      	ldr	r0, [pc, #72]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000da2:	f003 fee5 	bl	8004b70 <HAL_ADCEx_MultiModeConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000dac:	f001 f992 	bl	80020d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000db0:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <MX_ADC1_Init+0xec>)
 8000db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db4:	2306      	movs	r3, #6
 8000db6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <MX_ADC1_Init+0xf0>)
 8000dbe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <MX_ADC1_Init+0xe4>)
 8000dd4:	f003 f888 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000dde:	f001 f979 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3730      	adds	r7, #48	@ 0x30
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	240001f4 	.word	0x240001f4
 8000df0:	40022000 	.word	0x40022000
 8000df4:	10c00010 	.word	0x10c00010
 8000df8:	47ff0000 	.word	0x47ff0000

08000dfc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2224      	movs	r2, #36	@ 0x24
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00d ff60 	bl	800ecce <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e10:	4a2a      	ldr	r2, [pc, #168]	@ (8000ebc <MX_ADC2_Init+0xc0>)
 8000e12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e14:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e1a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e22:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e28:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e2e:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e6e:	4812      	ldr	r0, [pc, #72]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000e70:	f002 fe32 	bl	8003ad8 <HAL_ADC_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000e7a:	f001 f92b 	bl	80020d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <MX_ADC2_Init+0xc4>)
 8000e80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e82:	2306      	movs	r3, #6
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_ADC2_Init+0xc8>)
 8000e8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_ADC2_Init+0xbc>)
 8000ea2:	f003 f821 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000eac:	f001 f912 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	@ 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	24000264 	.word	0x24000264
 8000ebc:	40022100 	.word	0x40022100
 8000ec0:	14f00020 	.word	0x14f00020
 8000ec4:	47ff0000 	.word	0x47ff0000

08000ec8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <MX_I2C1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f44 <MX_I2C1_Init+0x7c>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ede:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f02:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000f04:	f004 fa34 	bl	8005370 <HAL_I2C_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f0e:	f001 f8e1 	bl	80020d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000f16:	f004 fac7 	bl	80054a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f20:	f001 f8d8 	bl	80020d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000f28:	f004 fb09 	bl	800553e <HAL_I2CEx_ConfigDigitalFilter>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f001 f8cf 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	240002d4 	.word	0x240002d4
 8000f40:	40005400 	.word	0x40005400
 8000f44:	00707cbb 	.word	0x00707cbb

08000f48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <MX_I2C2_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f54:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <MX_I2C2_Init+0x7c>)
 8000f56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f82:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f84:	f004 f9f4 	bl	8005370 <HAL_I2C_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f8e:	f001 f8a1 	bl	80020d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000f96:	f004 fa87 	bl	80054a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fa0:	f001 f898 	bl	80020d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_I2C2_Init+0x74>)
 8000fa8:	f004 fac9 	bl	800553e <HAL_I2CEx_ConfigDigitalFilter>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f001 f88f 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	24000328 	.word	0x24000328
 8000fc0:	40005800 	.word	0x40005800
 8000fc4:	00707cbb 	.word	0x00707cbb

08000fc8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <MX_I2C4_Init+0x74>)
 8000fce:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <MX_I2C4_Init+0x78>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <MX_I2C4_Init+0x74>)
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <MX_I2C4_Init+0x7c>)
 8000fd6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <MX_I2C4_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_I2C4_Init+0x74>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_I2C4_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_I2C4_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_I2C4_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_I2C4_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_I2C4_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001002:	480e      	ldr	r0, [pc, #56]	@ (800103c <MX_I2C4_Init+0x74>)
 8001004:	f004 f9b4 	bl	8005370 <HAL_I2C_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800100e:	f001 f861 	bl	80020d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001012:	2100      	movs	r1, #0
 8001014:	4809      	ldr	r0, [pc, #36]	@ (800103c <MX_I2C4_Init+0x74>)
 8001016:	f004 fa47 	bl	80054a8 <HAL_I2CEx_ConfigAnalogFilter>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001020:	f001 f858 	bl	80020d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001024:	2100      	movs	r1, #0
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_I2C4_Init+0x74>)
 8001028:	f004 fa89 	bl	800553e <HAL_I2CEx_ConfigDigitalFilter>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001032:	f001 f84f 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2400037c 	.word	0x2400037c
 8001040:	58001c00 	.word	0x58001c00
 8001044:	00707cbb 	.word	0x00707cbb

08001048 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_SDMMC1_SD_Init+0x40>)
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <MX_SDMMC1_SD_Init+0x44>)
 8001050:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <MX_SDMMC1_SD_Init+0x40>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_SDMMC1_SD_Init+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <MX_SDMMC1_SD_Init+0x40>)
 8001060:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001064:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_SDMMC1_SD_Init+0x40>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_SDMMC1_SD_Init+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_SDMMC1_SD_Init+0x40>)
 8001074:	f007 fe36 	bl	8008ce4 <HAL_SD_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800107e:	f001 f829 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	240003d0 	.word	0x240003d0
 800108c:	52007000 	.word	0x52007000

08001090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <MX_SPI1_Init+0xa4>)
 8001096:	4a28      	ldr	r2, [pc, #160]	@ (8001138 <MX_SPI1_Init+0xa8>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <MX_SPI1_Init+0xa4>)
 800109c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010aa:	2203      	movs	r2, #3
 80010ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ae:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ce:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d4:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_SPI1_Init+0xa4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_SPI1_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_SPI1_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_SPI1_Init+0xa4>)
 800110e:	2200      	movs	r2, #0
 8001110:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_SPI1_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_SPI1_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_SPI1_Init+0xa4>)
 8001120:	f008 fe4e 	bl	8009dc0 <HAL_SPI_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800112a:	f000 ffd3 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2400044c 	.word	0x2400044c
 8001138:	40013000 	.word	0x40013000

0800113c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001140:	4b27      	ldr	r3, [pc, #156]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001142:	4a28      	ldr	r2, [pc, #160]	@ (80011e4 <MX_SPI2_Init+0xa8>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001148:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800114c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001156:	2203      	movs	r2, #3
 8001158:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001168:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800116c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_SPI2_Init+0xa4>)
 80011cc:	f008 fdf8 	bl	8009dc0 <HAL_SPI_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80011d6:	f000 ff7d 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	240004d4 	.word	0x240004d4
 80011e4:	40003800 	.word	0x40003800

080011e8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011ec:	4b27      	ldr	r3, [pc, #156]	@ (800128c <MX_SPI4_Init+0xa4>)
 80011ee:	4a28      	ldr	r2, [pc, #160]	@ (8001290 <MX_SPI4_Init+0xa8>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <MX_SPI4_Init+0xa4>)
 80011f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011f8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b24      	ldr	r3, [pc, #144]	@ (800128c <MX_SPI4_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001200:	4b22      	ldr	r3, [pc, #136]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001202:	2203      	movs	r2, #3
 8001204:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120c:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <MX_SPI4_Init+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001212:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001214:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001218:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <MX_SPI4_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b17      	ldr	r3, [pc, #92]	@ (800128c <MX_SPI4_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <MX_SPI4_Init+0xa4>)
 800123a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800123e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_SPI4_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_SPI4_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_SPI4_Init+0xa4>)
 800126c:	2200      	movs	r2, #0
 800126e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001272:	2200      	movs	r2, #0
 8001274:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_SPI4_Init+0xa4>)
 8001278:	f008 fda2 	bl	8009dc0 <HAL_SPI_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001282:	f000 ff27 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2400055c 	.word	0x2400055c
 8001290:	40013400 	.word	0x40013400

08001294 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b09c      	sub	sp, #112	@ 0x70
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2234      	movs	r2, #52	@ 0x34
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00d fcfd 	bl	800ecce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001414 <MX_TIM1_Init+0x180>)
 80012d6:	4a50      	ldr	r2, [pc, #320]	@ (8001418 <MX_TIM1_Init+0x184>)
 80012d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012da:	4b4e      	ldr	r3, [pc, #312]	@ (8001414 <MX_TIM1_Init+0x180>)
 80012dc:	2200      	movs	r2, #0
 80012de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001414 <MX_TIM1_Init+0x180>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001414 <MX_TIM1_Init+0x180>)
 80012e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ee:	4b49      	ldr	r3, [pc, #292]	@ (8001414 <MX_TIM1_Init+0x180>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f4:	4b47      	ldr	r3, [pc, #284]	@ (8001414 <MX_TIM1_Init+0x180>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b46      	ldr	r3, [pc, #280]	@ (8001414 <MX_TIM1_Init+0x180>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001300:	4844      	ldr	r0, [pc, #272]	@ (8001414 <MX_TIM1_Init+0x180>)
 8001302:	f008 fe9c 	bl	800a03e <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800130c:	f000 fee2 	bl	80020d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001314:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001316:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800131a:	4619      	mov	r1, r3
 800131c:	483d      	ldr	r0, [pc, #244]	@ (8001414 <MX_TIM1_Init+0x180>)
 800131e:	f009 f851 	bl	800a3c4 <HAL_TIM_ConfigClockSource>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001328:	f000 fed4 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800132c:	4839      	ldr	r0, [pc, #228]	@ (8001414 <MX_TIM1_Init+0x180>)
 800132e:	f008 fedd 	bl	800a0ec <HAL_TIM_PWM_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001338:	f000 fecc 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001348:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800134c:	4619      	mov	r1, r3
 800134e:	4831      	ldr	r0, [pc, #196]	@ (8001414 <MX_TIM1_Init+0x180>)
 8001350:	f009 fd56 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800135a:	f000 febb 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135e:	2360      	movs	r3, #96	@ 0x60
 8001360:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001366:	2300      	movs	r3, #0
 8001368:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800136a:	2300      	movs	r3, #0
 800136c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	4824      	ldr	r0, [pc, #144]	@ (8001414 <MX_TIM1_Init+0x180>)
 8001384:	f008 ff0a 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800138e:	f000 fea1 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001392:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001396:	2204      	movs	r2, #4
 8001398:	4619      	mov	r1, r3
 800139a:	481e      	ldr	r0, [pc, #120]	@ (8001414 <MX_TIM1_Init+0x180>)
 800139c:	f008 fefe 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80013a6:	f000 fe95 	bl	80020d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013ae:	2208      	movs	r2, #8
 80013b0:	4619      	mov	r1, r3
 80013b2:	4818      	ldr	r0, [pc, #96]	@ (8001414 <MX_TIM1_Init+0x180>)
 80013b4:	f008 fef2 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80013be:	f000 fe89 	bl	80020d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	@ (8001414 <MX_TIM1_Init+0x180>)
 80013f8:	f009 fd9e 	bl	800af38 <HAL_TIMEx_ConfigBreakDeadTime>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001402:	f000 fe67 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001406:	4803      	ldr	r0, [pc, #12]	@ (8001414 <MX_TIM1_Init+0x180>)
 8001408:	f001 faf0 	bl	80029ec <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3770      	adds	r7, #112	@ 0x70
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	240005e4 	.word	0x240005e4
 8001418:	40010000 	.word	0x40010000

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001440:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <MX_TIM2_Init+0xb0>)
 8001442:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001448:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <MX_TIM2_Init+0xb0>)
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <MX_TIM2_Init+0xb0>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_TIM2_Init+0xb0>)
 8001456:	f04f 32ff 	mov.w	r2, #4294967295
 800145a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_TIM2_Init+0xb0>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_TIM2_Init+0xb0>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001468:	4818      	ldr	r0, [pc, #96]	@ (80014cc <MX_TIM2_Init+0xb0>)
 800146a:	f008 fe3f 	bl	800a0ec <HAL_TIM_PWM_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001474:	f000 fe2e 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4811      	ldr	r0, [pc, #68]	@ (80014cc <MX_TIM2_Init+0xb0>)
 8001488:	f009 fcba 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001492:	f000 fe1f 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	@ (80014cc <MX_TIM2_Init+0xb0>)
 80014ae:	f008 fe75 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014b8:	f000 fe0c 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <MX_TIM2_Init+0xb0>)
 80014be:	f001 fa95 	bl	80029ec <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	@ 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	24000630 	.word	0x24000630

080014d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f4:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_TIM3_Init+0xac>)
 80014f6:	4a22      	ldr	r2, [pc, #136]	@ (8001580 <MX_TIM3_Init+0xb0>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <MX_TIM3_Init+0xac>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_TIM3_Init+0xac>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001506:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_TIM3_Init+0xac>)
 8001508:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800150c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_TIM3_Init+0xac>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_TIM3_Init+0xac>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800151a:	4818      	ldr	r0, [pc, #96]	@ (800157c <MX_TIM3_Init+0xac>)
 800151c:	f008 fde6 	bl	800a0ec <HAL_TIM_PWM_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001526:	f000 fdd5 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4810      	ldr	r0, [pc, #64]	@ (800157c <MX_TIM3_Init+0xac>)
 800153a:	f009 fc61 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001544:	f000 fdc6 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001548:	2360      	movs	r3, #96	@ 0x60
 800154a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <MX_TIM3_Init+0xac>)
 8001560:	f008 fe1c 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800156a:	f000 fdb3 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <MX_TIM3_Init+0xac>)
 8001570:	f001 fa3c 	bl	80029ec <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2400067c 	.word	0x2400067c
 8001580:	40000400 	.word	0x40000400

08001584 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015a8:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <MX_TIM4_Init+0xac>)
 80015aa:	4a22      	ldr	r2, [pc, #136]	@ (8001634 <MX_TIM4_Init+0xb0>)
 80015ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015ae:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <MX_TIM4_Init+0xac>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <MX_TIM4_Init+0xac>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <MX_TIM4_Init+0xac>)
 80015bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <MX_TIM4_Init+0xac>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <MX_TIM4_Init+0xac>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015ce:	4818      	ldr	r0, [pc, #96]	@ (8001630 <MX_TIM4_Init+0xac>)
 80015d0:	f008 fd8c 	bl	800a0ec <HAL_TIM_PWM_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80015da:	f000 fd7b 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4810      	ldr	r0, [pc, #64]	@ (8001630 <MX_TIM4_Init+0xac>)
 80015ee:	f009 fc07 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80015f8:	f000 fd6c 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fc:	2360      	movs	r3, #96	@ 0x60
 80015fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	4807      	ldr	r0, [pc, #28]	@ (8001630 <MX_TIM4_Init+0xac>)
 8001614:	f008 fdc2 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800161e:	f000 fd59 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001622:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MX_TIM4_Init+0xac>)
 8001624:	f001 f9e2 	bl	80029ec <HAL_TIM_MspPostInit>

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	@ 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	240006c8 	.word	0x240006c8
 8001634:	40000800 	.word	0x40000800

08001638 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164a:	463b      	mov	r3, r7
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800165c:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <MX_TIM5_Init+0xac>)
 800165e:	4a22      	ldr	r2, [pc, #136]	@ (80016e8 <MX_TIM5_Init+0xb0>)
 8001660:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <MX_TIM5_Init+0xac>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <MX_TIM5_Init+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800166e:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <MX_TIM5_Init+0xac>)
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <MX_TIM5_Init+0xac>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <MX_TIM5_Init+0xac>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001682:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <MX_TIM5_Init+0xac>)
 8001684:	f008 fd32 	bl	800a0ec <HAL_TIM_PWM_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800168e:	f000 fd21 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4810      	ldr	r0, [pc, #64]	@ (80016e4 <MX_TIM5_Init+0xac>)
 80016a2:	f009 fbad 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80016ac:	f000 fd12 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b0:	2360      	movs	r3, #96	@ 0x60
 80016b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <MX_TIM5_Init+0xac>)
 80016c8:	f008 fd68 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80016d2:	f000 fcff 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM5_Init+0xac>)
 80016d8:	f001 f988 	bl	80029ec <HAL_TIM_MspPostInit>

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	@ 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	24000714 	.word	0x24000714
 80016e8:	40000c00 	.word	0x40000c00

080016ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b098      	sub	sp, #96	@ 0x60
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2234      	movs	r2, #52	@ 0x34
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f00d fad8 	bl	800ecce <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800171e:	4b39      	ldr	r3, [pc, #228]	@ (8001804 <MX_TIM8_Init+0x118>)
 8001720:	4a39      	ldr	r2, [pc, #228]	@ (8001808 <MX_TIM8_Init+0x11c>)
 8001722:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001724:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <MX_TIM8_Init+0x118>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b36      	ldr	r3, [pc, #216]	@ (8001804 <MX_TIM8_Init+0x118>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001730:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <MX_TIM8_Init+0x118>)
 8001732:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001736:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <MX_TIM8_Init+0x118>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <MX_TIM8_Init+0x118>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <MX_TIM8_Init+0x118>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800174a:	482e      	ldr	r0, [pc, #184]	@ (8001804 <MX_TIM8_Init+0x118>)
 800174c:	f008 fcce 	bl	800a0ec <HAL_TIM_PWM_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001756:	f000 fcbd 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001766:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800176a:	4619      	mov	r1, r3
 800176c:	4825      	ldr	r0, [pc, #148]	@ (8001804 <MX_TIM8_Init+0x118>)
 800176e:	f009 fb47 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001778:	f000 fcac 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177c:	2360      	movs	r3, #96	@ 0x60
 800177e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001784:	2300      	movs	r3, #0
 8001786:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001798:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800179c:	2200      	movs	r2, #0
 800179e:	4619      	mov	r1, r3
 80017a0:	4818      	ldr	r0, [pc, #96]	@ (8001804 <MX_TIM8_Init+0x118>)
 80017a2:	f008 fcfb 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80017ac:	f000 fc92 	bl	80020d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM8_Init+0x118>)
 80017e6:	f009 fba7 	bl	800af38 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80017f0:	f000 fc70 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017f4:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM8_Init+0x118>)
 80017f6:	f001 f8f9 	bl	80029ec <HAL_TIM_MspPostInit>

}
 80017fa:	bf00      	nop
 80017fc:	3760      	adds	r7, #96	@ 0x60
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	24000760 	.word	0x24000760
 8001808:	40010400 	.word	0x40010400

0800180c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181e:	463b      	mov	r3, r7
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	615a      	str	r2, [r3, #20]
 800182e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <MX_TIM12_Init+0xac>)
 8001832:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <MX_TIM12_Init+0xb0>)
 8001834:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <MX_TIM12_Init+0xac>)
 8001838:	2200      	movs	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <MX_TIM12_Init+0xac>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001842:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <MX_TIM12_Init+0xac>)
 8001844:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001848:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184a:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <MX_TIM12_Init+0xac>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <MX_TIM12_Init+0xac>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001856:	4818      	ldr	r0, [pc, #96]	@ (80018b8 <MX_TIM12_Init+0xac>)
 8001858:	f008 fc48 	bl	800a0ec <HAL_TIM_PWM_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8001862:	f000 fc37 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <MX_TIM12_Init+0xac>)
 8001876:	f009 fac3 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001880:	f000 fc28 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001884:	2360      	movs	r3, #96	@ 0x60
 8001886:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	2200      	movs	r2, #0
 8001898:	4619      	mov	r1, r3
 800189a:	4807      	ldr	r0, [pc, #28]	@ (80018b8 <MX_TIM12_Init+0xac>)
 800189c:	f008 fc7e 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 80018a6:	f000 fc15 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018aa:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <MX_TIM12_Init+0xac>)
 80018ac:	f001 f89e 	bl	80029ec <HAL_TIM_MspPostInit>

}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	@ 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	240007ac 	.word	0x240007ac
 80018bc:	40001800 	.word	0x40001800

080018c0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b098      	sub	sp, #96	@ 0x60
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2234      	movs	r2, #52	@ 0x34
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00d f9ee 	bl	800ecce <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018f2:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <MX_TIM15_Init+0x104>)
 80018f4:	4a34      	ldr	r2, [pc, #208]	@ (80019c8 <MX_TIM15_Init+0x108>)
 80018f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80018f8:	4b32      	ldr	r3, [pc, #200]	@ (80019c4 <MX_TIM15_Init+0x104>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <MX_TIM15_Init+0x104>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001904:	4b2f      	ldr	r3, [pc, #188]	@ (80019c4 <MX_TIM15_Init+0x104>)
 8001906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800190a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b2d      	ldr	r3, [pc, #180]	@ (80019c4 <MX_TIM15_Init+0x104>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001912:	4b2c      	ldr	r3, [pc, #176]	@ (80019c4 <MX_TIM15_Init+0x104>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <MX_TIM15_Init+0x104>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800191e:	4829      	ldr	r0, [pc, #164]	@ (80019c4 <MX_TIM15_Init+0x104>)
 8001920:	f008 fbe4 	bl	800a0ec <HAL_TIM_PWM_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800192a:	f000 fbd3 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001936:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800193a:	4619      	mov	r1, r3
 800193c:	4821      	ldr	r0, [pc, #132]	@ (80019c4 <MX_TIM15_Init+0x104>)
 800193e:	f009 fa5f 	bl	800ae00 <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001948:	f000 fbc4 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194c:	2360      	movs	r3, #96	@ 0x60
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001954:	2300      	movs	r3, #0
 8001956:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001958:	2300      	movs	r3, #0
 800195a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001968:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4814      	ldr	r0, [pc, #80]	@ (80019c4 <MX_TIM15_Init+0x104>)
 8001972:	f008 fc13 	bl	800a19c <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800197c:	f000 fbaa 	bl	80020d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001998:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4807      	ldr	r0, [pc, #28]	@ (80019c4 <MX_TIM15_Init+0x104>)
 80019a8:	f009 fac6 	bl	800af38 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80019b2:	f000 fb8f 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80019b6:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <MX_TIM15_Init+0x104>)
 80019b8:	f001 f818 	bl	80029ec <HAL_TIM_MspPostInit>

}
 80019bc:	bf00      	nop
 80019be:	3760      	adds	r7, #96	@ 0x60
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	240007f8 	.word	0x240007f8
 80019c8:	40014000 	.word	0x40014000

080019cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <MX_UART4_Init+0x90>)
 80019d2:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <MX_UART4_Init+0x94>)
 80019d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019d6:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <MX_UART4_Init+0x90>)
 80019d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <MX_UART4_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <MX_UART4_Init+0x90>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <MX_UART4_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <MX_UART4_Init+0x90>)
 80019f2:	220c      	movs	r2, #12
 80019f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <MX_UART4_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fc:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <MX_UART4_Init+0x90>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a02:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <MX_UART4_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a08:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <MX_UART4_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <MX_UART4_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a14:	4811      	ldr	r0, [pc, #68]	@ (8001a5c <MX_UART4_Init+0x90>)
 8001a16:	f009 fb1b 	bl	800b050 <HAL_UART_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001a20:	f000 fb58 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a24:	2100      	movs	r1, #0
 8001a26:	480d      	ldr	r0, [pc, #52]	@ (8001a5c <MX_UART4_Init+0x90>)
 8001a28:	f00a fc27 	bl	800c27a <HAL_UARTEx_SetTxFifoThreshold>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a32:	f000 fb4f 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a36:	2100      	movs	r1, #0
 8001a38:	4808      	ldr	r0, [pc, #32]	@ (8001a5c <MX_UART4_Init+0x90>)
 8001a3a:	f00a fc5c 	bl	800c2f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a44:	f000 fb46 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a48:	4804      	ldr	r0, [pc, #16]	@ (8001a5c <MX_UART4_Init+0x90>)
 8001a4a:	f00a fbdd 	bl	800c208 <HAL_UARTEx_DisableFifoMode>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a54:	f000 fb3e 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	24000844 	.word	0x24000844
 8001a60:	40004c00 	.word	0x40004c00

08001a64 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a68:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001a6a:	4a23      	ldr	r2, [pc, #140]	@ (8001af8 <MX_UART5_Init+0x94>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001aac:	4811      	ldr	r0, [pc, #68]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001aae:	f009 facf 	bl	800b050 <HAL_UART_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001ab8:	f000 fb0c 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001abc:	2100      	movs	r1, #0
 8001abe:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001ac0:	f00a fbdb 	bl	800c27a <HAL_UARTEx_SetTxFifoThreshold>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001aca:	f000 fb03 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001ad2:	f00a fc10 	bl	800c2f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001adc:	f000 fafa 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <MX_UART5_Init+0x90>)
 8001ae2:	f00a fb91 	bl	800c208 <HAL_UARTEx_DisableFifoMode>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001aec:	f000 faf2 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	240008d8 	.word	0x240008d8
 8001af8:	40005000 	.word	0x40005000

08001afc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b02:	4a23      	ldr	r2, [pc, #140]	@ (8001b90 <MX_UART7_Init+0x94>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b3e:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b44:	4811      	ldr	r0, [pc, #68]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b46:	f009 fa83 	bl	800b050 <HAL_UART_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001b50:	f000 fac0 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b54:	2100      	movs	r1, #0
 8001b56:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b58:	f00a fb8f 	bl	800c27a <HAL_UARTEx_SetTxFifoThreshold>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001b62:	f000 fab7 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4808      	ldr	r0, [pc, #32]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b6a:	f00a fbc4 	bl	800c2f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001b74:	f000 faae 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <MX_UART7_Init+0x90>)
 8001b7a:	f00a fb45 	bl	800c208 <HAL_UARTEx_DisableFifoMode>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001b84:	f000 faa6 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2400096c 	.word	0x2400096c
 8001b90:	40007800 	.word	0x40007800

08001b94 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001b9a:	4a24      	ldr	r2, [pc, #144]	@ (8001c2c <MX_UART8_Init+0x98>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001b9e:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001ba0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001bc0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001bc4:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001bde:	4812      	ldr	r0, [pc, #72]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001be0:	f009 fa36 	bl	800b050 <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8001bea:	f000 fa73 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001bf2:	f00a fb42 	bl	800c27a <HAL_UARTEx_SetTxFifoThreshold>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8001bfc:	f000 fa6a 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c00:	2100      	movs	r1, #0
 8001c02:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001c04:	f00a fb77 	bl	800c2f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8001c0e:	f000 fa61 	bl	80020d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <MX_UART8_Init+0x94>)
 8001c14:	f00a faf8 	bl	800c208 <HAL_UARTEx_DisableFifoMode>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8001c1e:	f000 fa59 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	24000a00 	.word	0x24000a00
 8001c2c:	40007c00 	.word	0x40007c00

08001c30 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c36:	4a2c      	ldr	r2, [pc, #176]	@ (8001ce8 <MX_USART1_Init+0xb8>)
 8001c38:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001c42:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001c48:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001c54:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001c5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001c60:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001c66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001c78:	481a      	ldr	r0, [pc, #104]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c7a:	f00a fbc9 	bl	800c410 <HAL_USART_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001c84:	f000 fa26 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4816      	ldr	r0, [pc, #88]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c8c:	f00b faf0 	bl	800d270 <HAL_USARTEx_SetTxFifoThreshold>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001c96:	f000 fa1d 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4811      	ldr	r0, [pc, #68]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001c9e:	f00b fb25 	bl	800d2ec <HAL_USARTEx_SetRxFifoThreshold>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001ca8:	f000 fa14 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8001cac:	2100      	movs	r1, #0
 8001cae:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001cb0:	f00b fa68 	bl	800d184 <HAL_USARTEx_ConfigNSS>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8001cba:	f000 fa0b 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8001cbe:	4809      	ldr	r0, [pc, #36]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001cc0:	f00b fa9d 	bl	800d1fe <HAL_USARTEx_DisableFifoMode>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8001cca:	f000 fa03 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <MX_USART1_Init+0xb4>)
 8001cd0:	f00b fa03 	bl	800d0da <HAL_USARTEx_EnableSlaveMode>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART1_Init+0xae>
  {
    Error_Handler();
 8001cda:	f000 f9fb 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	24000a94 	.word	0x24000a94
 8001ce8:	40011000 	.word	0x40011000

08001cec <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001cf2:	4a2c      	ldr	r2, [pc, #176]	@ (8001da4 <MX_USART2_Init+0xb8>)
 8001cf4:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cfc:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001cfe:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001d04:	4b26      	ldr	r3, [pc, #152]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001d0a:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001d10:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001d16:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001d1c:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001d34:	481a      	ldr	r0, [pc, #104]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d36:	f00a fb6b 	bl	800c410 <HAL_USART_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8001d40:	f000 f9c8 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d44:	2100      	movs	r1, #0
 8001d46:	4816      	ldr	r0, [pc, #88]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d48:	f00b fa92 	bl	800d270 <HAL_USARTEx_SetTxFifoThreshold>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 8001d52:	f000 f9bf 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d5a:	f00b fac7 	bl	800d2ec <HAL_USARTEx_SetRxFifoThreshold>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 8001d64:	f000 f9b6 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart2, USART_NSS_HARD) != HAL_OK)
 8001d68:	2100      	movs	r1, #0
 8001d6a:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d6c:	f00b fa0a 	bl	800d184 <HAL_USARTEx_ConfigNSS>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART2_Init+0x8e>
  {
    Error_Handler();
 8001d76:	f000 f9ad 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8001d7a:	4809      	ldr	r0, [pc, #36]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d7c:	f00b fa3f 	bl	800d1fe <HAL_USARTEx_DisableFifoMode>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART2_Init+0x9e>
  {
    Error_Handler();
 8001d86:	f000 f9a5 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart2) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <MX_USART2_Init+0xb4>)
 8001d8c:	f00b f9a5 	bl	800d0da <HAL_USARTEx_EnableSlaveMode>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_USART2_Init+0xae>
  {
    Error_Handler();
 8001d96:	f000 f99d 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	24000af4 	.word	0x24000af4
 8001da4:	40004400 	.word	0x40004400

08001da8 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001dac:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001dae:	4a2c      	ldr	r2, [pc, #176]	@ (8001e60 <MX_USART3_Init+0xb8>)
 8001db0:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001db2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001dc0:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001dc6:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001de4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.SlaveMode = USART_SLAVEMODE_ENABLE;
 8001dea:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001df0:	481a      	ldr	r0, [pc, #104]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001df2:	f00a fb0d 	bl	800c410 <HAL_USART_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_USART3_Init+0x58>
  {
    Error_Handler();
 8001dfc:	f000 f96a 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e00:	2100      	movs	r1, #0
 8001e02:	4816      	ldr	r0, [pc, #88]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001e04:	f00b fa34 	bl	800d270 <HAL_USARTEx_SetTxFifoThreshold>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8001e0e:	f000 f961 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e12:	2100      	movs	r1, #0
 8001e14:	4811      	ldr	r0, [pc, #68]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001e16:	f00b fa69 	bl	800d2ec <HAL_USARTEx_SetRxFifoThreshold>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_USART3_Init+0x7c>
  {
    Error_Handler();
 8001e20:	f000 f958 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart3, USART_NSS_HARD) != HAL_OK)
 8001e24:	2100      	movs	r1, #0
 8001e26:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001e28:	f00b f9ac 	bl	800d184 <HAL_USARTEx_ConfigNSS>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART3_Init+0x8e>
  {
    Error_Handler();
 8001e32:	f000 f94f 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001e36:	4809      	ldr	r0, [pc, #36]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001e38:	f00b f9e1 	bl	800d1fe <HAL_USARTEx_DisableFifoMode>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART3_Init+0x9e>
  {
    Error_Handler();
 8001e42:	f000 f947 	bl	80020d4 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart3) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <MX_USART3_Init+0xb4>)
 8001e48:	f00b f947 	bl	800d0da <HAL_USARTEx_EnableSlaveMode>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART3_Init+0xae>
  {
    Error_Handler();
 8001e52:	f000 f93f 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	24000b54 	.word	0x24000b54
 8001e60:	40004800 	.word	0x40004800

08001e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	@ 0x30
 8001e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	4a78      	ldr	r2, [pc, #480]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e8a:	4b76      	ldr	r3, [pc, #472]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e98:	4b72      	ldr	r3, [pc, #456]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	4a71      	ldr	r2, [pc, #452]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea8:	4b6e      	ldr	r3, [pc, #440]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	4b6b      	ldr	r3, [pc, #428]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebc:	4a69      	ldr	r2, [pc, #420]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec6:	4b67      	ldr	r3, [pc, #412]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b63      	ldr	r3, [pc, #396]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eda:	4a62      	ldr	r2, [pc, #392]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef2:	4b5c      	ldr	r3, [pc, #368]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f02:	4b58      	ldr	r3, [pc, #352]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f10:	4b54      	ldr	r3, [pc, #336]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f16:	4a53      	ldr	r2, [pc, #332]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f20:	4b50      	ldr	r3, [pc, #320]	@ (8002064 <MX_GPIO_Init+0x200>)
 8001f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2101      	movs	r1, #1
 8001f32:	484d      	ldr	r0, [pc, #308]	@ (8002068 <MX_GPIO_Init+0x204>)
 8001f34:	f003 fa02 	bl	800533c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f3e:	484b      	ldr	r0, [pc, #300]	@ (800206c <MX_GPIO_Init+0x208>)
 8001f40:	f003 f9fc 	bl	800533c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001f44:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4843      	ldr	r0, [pc, #268]	@ (8002068 <MX_GPIO_Init+0x204>)
 8001f5a:	f003 f847 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE10 PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_12;
 8001f5e:	f245 4308 	movw	r3, #21512	@ 0x5408
 8001f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	483f      	ldr	r0, [pc, #252]	@ (8002070 <MX_GPIO_Init+0x20c>)
 8001f74:	f003 f83a 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	483a      	ldr	r0, [pc, #232]	@ (8002074 <MX_GPIO_Init+0x210>)
 8001f8c:	f003 f82e 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	2303      	movs	r3, #3
 8001f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4834      	ldr	r0, [pc, #208]	@ (8002074 <MX_GPIO_Init+0x210>)
 8001fa4:	f003 f822 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	482a      	ldr	r0, [pc, #168]	@ (8002068 <MX_GPIO_Init+0x204>)
 8001fc0:	f003 f814 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4824      	ldr	r0, [pc, #144]	@ (8002068 <MX_GPIO_Init+0x204>)
 8001fd8:	f003 f808 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	481f      	ldr	r0, [pc, #124]	@ (800206c <MX_GPIO_Init+0x208>)
 8001ff0:	f002 fffc 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ff4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	4817      	ldr	r0, [pc, #92]	@ (800206c <MX_GPIO_Init+0x208>)
 800200e:	f002 ffed 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002012:	2302      	movs	r3, #2
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	4619      	mov	r1, r3
 8002024:	4814      	ldr	r0, [pc, #80]	@ (8002078 <MX_GPIO_Init+0x214>)
 8002026:	f002 ffe1 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800202a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800202e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002030:	2303      	movs	r3, #3
 8002032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	480c      	ldr	r0, [pc, #48]	@ (8002070 <MX_GPIO_Init+0x20c>)
 8002040:	f002 ffd4 	bl	8004fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002044:	2308      	movs	r3, #8
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002048:	2303      	movs	r3, #3
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4808      	ldr	r0, [pc, #32]	@ (8002078 <MX_GPIO_Init+0x214>)
 8002058:	f002 ffc8 	bl	8004fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	@ 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	58024400 	.word	0x58024400
 8002068:	58020800 	.word	0x58020800
 800206c:	58020400 	.word	0x58020400
 8002070:	58021000 	.word	0x58021000
 8002074:	58020c00 	.word	0x58020c00
 8002078:	58020000 	.word	0x58020000

0800207c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002082:	463b      	mov	r3, r7
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800208e:	f002 ff35 	bl	8004efc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002092:	2301      	movs	r3, #1
 8002094:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002096:	2300      	movs	r3, #0
 8002098:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800209e:	231f      	movs	r3, #31
 80020a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80020a2:	2387      	movs	r3, #135	@ 0x87
 80020a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80020aa:	2300      	movs	r3, #0
 80020ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80020ae:	2301      	movs	r3, #1
 80020b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80020b2:	2301      	movs	r3, #1
 80020b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80020be:	463b      	mov	r3, r7
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 ff53 	bl	8004f6c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80020c6:	2004      	movs	r0, #4
 80020c8:	f002 ff30 	bl	8004f2c <HAL_MPU_Enable>

}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d8:	b672      	cpsid	i
}
 80020da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <Error_Handler+0x8>

080020e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <HAL_MspInit+0x30>)
 80020e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020ec:	4a08      	ldr	r2, [pc, #32]	@ (8002110 <HAL_MspInit+0x30>)
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_MspInit+0x30>)
 80020f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	58024400 	.word	0x58024400

08002114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	@ 0x30
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a39      	ldr	r2, [pc, #228]	@ (8002218 <HAL_ADC_MspInit+0x104>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d133      	bne.n	800219e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002136:	4b39      	ldr	r3, [pc, #228]	@ (800221c <HAL_ADC_MspInit+0x108>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	4a37      	ldr	r2, [pc, #220]	@ (800221c <HAL_ADC_MspInit+0x108>)
 800213e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002140:	4b36      	ldr	r3, [pc, #216]	@ (800221c <HAL_ADC_MspInit+0x108>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10e      	bne.n	8002166 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002148:	4b35      	ldr	r3, [pc, #212]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 800214a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800214e:	4a34      	ldr	r2, [pc, #208]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 8002150:	f043 0320 	orr.w	r3, r3, #32
 8002154:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 800215a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216c:	4a2c      	ldr	r2, [pc, #176]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002176:	4b2a      	ldr	r3, [pc, #168]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 8002178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002184:	2330      	movs	r3, #48	@ 0x30
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002188:	2303      	movs	r3, #3
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	4619      	mov	r1, r3
 8002196:	4823      	ldr	r0, [pc, #140]	@ (8002224 <HAL_ADC_MspInit+0x110>)
 8002198:	f002 ff28 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800219c:	e037      	b.n	800220e <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a21      	ldr	r2, [pc, #132]	@ (8002228 <HAL_ADC_MspInit+0x114>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d132      	bne.n	800220e <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021a8:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <HAL_ADC_MspInit+0x108>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	4a1b      	ldr	r2, [pc, #108]	@ (800221c <HAL_ADC_MspInit+0x108>)
 80021b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021b2:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_ADC_MspInit+0x108>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10e      	bne.n	80021d8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021ba:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 80021bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021c0:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 80021c2:	f043 0320 	orr.w	r3, r3, #32
 80021c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 80021cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021de:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_ADC_MspInit+0x10c>)
 80021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021f6:	2303      	movs	r3, #3
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fa:	2303      	movs	r3, #3
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	4808      	ldr	r0, [pc, #32]	@ (800222c <HAL_ADC_MspInit+0x118>)
 800220a:	f002 feef 	bl	8004fec <HAL_GPIO_Init>
}
 800220e:	bf00      	nop
 8002210:	3730      	adds	r7, #48	@ 0x30
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	24000bb8 	.word	0x24000bb8
 8002220:	58024400 	.word	0x58024400
 8002224:	58020800 	.word	0x58020800
 8002228:	40022100 	.word	0x40022100
 800222c:	58020400 	.word	0x58020400

08002230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0bc      	sub	sp, #240	@ 0xf0
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002248:	f107 0320 	add.w	r3, r7, #32
 800224c:	22b8      	movs	r2, #184	@ 0xb8
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f00c fd3c 	bl	800ecce <memset>
  if(hi2c->Instance==I2C1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a74      	ldr	r2, [pc, #464]	@ (800242c <HAL_I2C_MspInit+0x1fc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d147      	bne.n	80022f0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002260:	f04f 0208 	mov.w	r2, #8
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	4618      	mov	r0, r3
 8002278:	f004 f94e 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002282:	f7ff ff27 	bl	80020d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002286:	4b6a      	ldr	r3, [pc, #424]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 8002288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800228c:	4a68      	ldr	r2, [pc, #416]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002296:	4b66      	ldr	r3, [pc, #408]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 8002298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80022a4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80022a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ac:	2312      	movs	r3, #18
 80022ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022be:	2304      	movs	r3, #4
 80022c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022c8:	4619      	mov	r1, r3
 80022ca:	485a      	ldr	r0, [pc, #360]	@ (8002434 <HAL_I2C_MspInit+0x204>)
 80022cc:	f002 fe8e 	bl	8004fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d0:	4b57      	ldr	r3, [pc, #348]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 80022d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d6:	4a56      	ldr	r2, [pc, #344]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 80022d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022e0:	4b53      	ldr	r3, [pc, #332]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 80022e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80022ee:	e098      	b.n	8002422 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a50      	ldr	r2, [pc, #320]	@ (8002438 <HAL_I2C_MspInit+0x208>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d147      	bne.n	800238a <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80022fa:	f04f 0208 	mov.w	r2, #8
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800230c:	f107 0320 	add.w	r3, r7, #32
 8002310:	4618      	mov	r0, r3
 8002312:	f004 f901 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 800231c:	f7ff feda 	bl	80020d4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002320:	4b43      	ldr	r3, [pc, #268]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 8002322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002326:	4a42      	ldr	r2, [pc, #264]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002330:	4b3f      	ldr	r3, [pc, #252]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 8002332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800233e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002342:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002346:	2312      	movs	r3, #18
 8002348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002358:	2304      	movs	r3, #4
 800235a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002362:	4619      	mov	r1, r3
 8002364:	4833      	ldr	r0, [pc, #204]	@ (8002434 <HAL_I2C_MspInit+0x204>)
 8002366:	f002 fe41 	bl	8004fec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800236a:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 800236c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002370:	4a2f      	ldr	r2, [pc, #188]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 8002372:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002376:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800237a:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 800237c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002380:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
}
 8002388:	e04b      	b.n	8002422 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2b      	ldr	r2, [pc, #172]	@ (800243c <HAL_I2C_MspInit+0x20c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d146      	bne.n	8002422 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002394:	f04f 0210 	mov.w	r2, #16
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a6:	f107 0320 	add.w	r3, r7, #32
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 f8b4 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80023b6:	f7ff fe8d 	bl	80020d4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ca:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80023d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80023dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e0:	2312      	movs	r3, #18
 80023e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80023f2:	2304      	movs	r3, #4
 80023f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023fc:	4619      	mov	r1, r3
 80023fe:	4810      	ldr	r0, [pc, #64]	@ (8002440 <HAL_I2C_MspInit+0x210>)
 8002400:	f002 fdf4 	bl	8004fec <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 8002406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800240a:	4a09      	ldr	r2, [pc, #36]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 800240c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002410:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_I2C_MspInit+0x200>)
 8002416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800241a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
}
 8002422:	bf00      	nop
 8002424:	37f0      	adds	r7, #240	@ 0xf0
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40005400 	.word	0x40005400
 8002430:	58024400 	.word	0x58024400
 8002434:	58020400 	.word	0x58020400
 8002438:	40005800 	.word	0x40005800
 800243c:	58001c00 	.word	0x58001c00
 8002440:	58020c00 	.word	0x58020c00

08002444 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0ba      	sub	sp, #232	@ 0xe8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800245c:	f107 0318 	add.w	r3, r7, #24
 8002460:	22b8      	movs	r2, #184	@ 0xb8
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f00c fc32 	bl	800ecce <memset>
  if(hsd->Instance==SDMMC1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a38      	ldr	r2, [pc, #224]	@ (8002550 <HAL_SD_MspInit+0x10c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d169      	bne.n	8002548 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002474:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002480:	2300      	movs	r3, #0
 8002482:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002484:	f107 0318 	add.w	r3, r7, #24
 8002488:	4618      	mov	r0, r3
 800248a:	f004 f845 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8002494:	f7ff fe1e 	bl	80020d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002498:	4b2e      	ldr	r3, [pc, #184]	@ (8002554 <HAL_SD_MspInit+0x110>)
 800249a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800249e:	4a2d      	ldr	r2, [pc, #180]	@ (8002554 <HAL_SD_MspInit+0x110>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <HAL_SD_MspInit+0x110>)
 80024aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b6:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <HAL_SD_MspInit+0x110>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024bc:	4a25      	ldr	r2, [pc, #148]	@ (8002554 <HAL_SD_MspInit+0x110>)
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024c6:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <HAL_SD_MspInit+0x110>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_SD_MspInit+0x110>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024da:	4a1e      	ldr	r2, [pc, #120]	@ (8002554 <HAL_SD_MspInit+0x110>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_SD_MspInit+0x110>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024f2:	2304      	movs	r3, #4
 80024f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800250a:	230c      	movs	r3, #12
 800250c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002510:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002514:	4619      	mov	r1, r3
 8002516:	4810      	ldr	r0, [pc, #64]	@ (8002558 <HAL_SD_MspInit+0x114>)
 8002518:	f002 fd68 	bl	8004fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 800251c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002520:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002536:	230c      	movs	r3, #12
 8002538:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002540:	4619      	mov	r1, r3
 8002542:	4806      	ldr	r0, [pc, #24]	@ (800255c <HAL_SD_MspInit+0x118>)
 8002544:	f002 fd52 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002548:	bf00      	nop
 800254a:	37e8      	adds	r7, #232	@ 0xe8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	52007000 	.word	0x52007000
 8002554:	58024400 	.word	0x58024400
 8002558:	58020c00 	.word	0x58020c00
 800255c:	58020800 	.word	0x58020800

08002560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0c0      	sub	sp, #256	@ 0x100
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002578:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800257c:	22b8      	movs	r2, #184	@ 0xb8
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f00c fba4 	bl	800ecce <memset>
  if(hspi->Instance==SPI1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4aaa      	ldr	r2, [pc, #680]	@ (8002834 <HAL_SPI_MspInit+0x2d4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d16a      	bne.n	8002666 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002590:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 ffb6 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80025b2:	f7ff fd8f 	bl	80020d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025b6:	4ba0      	ldr	r3, [pc, #640]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80025b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025bc:	4a9e      	ldr	r2, [pc, #632]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80025be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025c6:	4b9c      	ldr	r3, [pc, #624]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80025c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d4:	4b98      	ldr	r3, [pc, #608]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80025d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025da:	4a97      	ldr	r2, [pc, #604]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025e4:	4b94      	ldr	r3, [pc, #592]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80025e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b91      	ldr	r3, [pc, #580]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80025f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025f8:	4a8f      	ldr	r2, [pc, #572]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002602:	4b8d      	ldr	r3, [pc, #564]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 8002604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PB4(NJTRST)     ------> SPI1_MISO
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002610:	2310      	movs	r3, #16
 8002612:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002628:	2305      	movs	r3, #5
 800262a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002632:	4619      	mov	r1, r3
 8002634:	4881      	ldr	r0, [pc, #516]	@ (800283c <HAL_SPI_MspInit+0x2dc>)
 8002636:	f002 fcd9 	bl	8004fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800263a:	23b0      	movs	r3, #176	@ 0xb0
 800263c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002652:	2305      	movs	r3, #5
 8002654:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800265c:	4619      	mov	r1, r3
 800265e:	4878      	ldr	r0, [pc, #480]	@ (8002840 <HAL_SPI_MspInit+0x2e0>)
 8002660:	f002 fcc4 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002664:	e0e1      	b.n	800282a <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a76      	ldr	r2, [pc, #472]	@ (8002844 <HAL_SPI_MspInit+0x2e4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	f040 8091 	bne.w	8002794 <HAL_SPI_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002672:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002684:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002688:	4618      	mov	r0, r3
 800268a:	f003 ff45 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8002694:	f7ff fd1e 	bl	80020d4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002698:	4b67      	ldr	r3, [pc, #412]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 800269a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800269e:	4a66      	ldr	r2, [pc, #408]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026a8:	4b63      	ldr	r3, [pc, #396]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	4b60      	ldr	r3, [pc, #384]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d4:	4b58      	ldr	r3, [pc, #352]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026da:	4a57      	ldr	r2, [pc, #348]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026e4:	4b54      	ldr	r3, [pc, #336]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	4b51      	ldr	r3, [pc, #324]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80026fa:	f043 0302 	orr.w	r3, r3, #2
 80026fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002702:	4b4d      	ldr	r3, [pc, #308]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002714:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800272a:	2305      	movs	r3, #5
 800272c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002734:	4619      	mov	r1, r3
 8002736:	4842      	ldr	r0, [pc, #264]	@ (8002840 <HAL_SPI_MspInit+0x2e0>)
 8002738:	f002 fc58 	bl	8004fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 800273c:	2306      	movs	r3, #6
 800273e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002754:	2305      	movs	r3, #5
 8002756:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800275e:	4619      	mov	r1, r3
 8002760:	4839      	ldr	r0, [pc, #228]	@ (8002848 <HAL_SPI_MspInit+0x2e8>)
 8002762:	f002 fc43 	bl	8004fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800276a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002780:	2305      	movs	r3, #5
 8002782:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002786:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800278a:	4619      	mov	r1, r3
 800278c:	482b      	ldr	r0, [pc, #172]	@ (800283c <HAL_SPI_MspInit+0x2dc>)
 800278e:	f002 fc2d 	bl	8004fec <HAL_GPIO_Init>
}
 8002792:	e04a      	b.n	800282a <HAL_SPI_MspInit+0x2ca>
  else if(hspi->Instance==SPI4)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a2c      	ldr	r2, [pc, #176]	@ (800284c <HAL_SPI_MspInit+0x2ec>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d145      	bne.n	800282a <HAL_SPI_MspInit+0x2ca>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800279e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 feaf 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_SPI_MspInit+0x264>
      Error_Handler();
 80027c0:	f7ff fc88 	bl	80020d4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80027c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80027c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80027cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027d4:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80027d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80027e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e8:	4a13      	ldr	r2, [pc, #76]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80027ea:	f043 0310 	orr.w	r3, r3, #16
 80027ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_SPI_MspInit+0x2d8>)
 80027f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002800:	2374      	movs	r3, #116	@ 0x74
 8002802:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002818:	2305      	movs	r3, #5
 800281a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800281e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002822:	4619      	mov	r1, r3
 8002824:	480a      	ldr	r0, [pc, #40]	@ (8002850 <HAL_SPI_MspInit+0x2f0>)
 8002826:	f002 fbe1 	bl	8004fec <HAL_GPIO_Init>
}
 800282a:	bf00      	nop
 800282c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40013000 	.word	0x40013000
 8002838:	58024400 	.word	0x58024400
 800283c:	58020400 	.word	0x58020400
 8002840:	58020000 	.word	0x58020000
 8002844:	40003800 	.word	0x40003800
 8002848:	58020800 	.word	0x58020800
 800284c:	40013400 	.word	0x40013400
 8002850:	58021000 	.word	0x58021000

08002854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0b      	ldr	r2, [pc, #44]	@ (8002890 <HAL_TIM_Base_MspInit+0x3c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002866:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_TIM_Base_MspInit+0x40>)
 8002868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800286c:	4a09      	ldr	r2, [pc, #36]	@ (8002894 <HAL_TIM_Base_MspInit+0x40>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002876:	4b07      	ldr	r3, [pc, #28]	@ (8002894 <HAL_TIM_Base_MspInit+0x40>)
 8002878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40010000 	.word	0x40010000
 8002894:	58024400 	.word	0x58024400

08002898 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002898:	b480      	push	{r7}
 800289a:	b08b      	sub	sp, #44	@ 0x2c
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a8:	d10f      	bne.n	80028ca <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028aa:	4b49      	ldr	r3, [pc, #292]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 80028ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028b0:	4a47      	ldr	r2, [pc, #284]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028ba:	4b45      	ldr	r3, [pc, #276]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 80028bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80028c8:	e07c      	b.n	80029c4 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a41      	ldr	r2, [pc, #260]	@ (80029d4 <HAL_TIM_PWM_MspInit+0x13c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10f      	bne.n	80028f4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d4:	4b3e      	ldr	r3, [pc, #248]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028da:	4a3d      	ldr	r2, [pc, #244]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e4:	4b3a      	ldr	r3, [pc, #232]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	623b      	str	r3, [r7, #32]
 80028f0:	6a3b      	ldr	r3, [r7, #32]
}
 80028f2:	e067      	b.n	80029c4 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM4)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a37      	ldr	r2, [pc, #220]	@ (80029d8 <HAL_TIM_PWM_MspInit+0x140>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10f      	bne.n	800291e <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028fe:	4b34      	ldr	r3, [pc, #208]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 8002900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002904:	4a32      	ldr	r2, [pc, #200]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800290e:	4b30      	ldr	r3, [pc, #192]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 8002910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	69fb      	ldr	r3, [r7, #28]
}
 800291c:	e052      	b.n	80029c4 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM5)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2e      	ldr	r2, [pc, #184]	@ (80029dc <HAL_TIM_PWM_MspInit+0x144>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10f      	bne.n	8002948 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002928:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 800292a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800292e:	4a28      	ldr	r2, [pc, #160]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 8002930:	f043 0308 	orr.w	r3, r3, #8
 8002934:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002938:	4b25      	ldr	r3, [pc, #148]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	69bb      	ldr	r3, [r7, #24]
}
 8002946:	e03d      	b.n	80029c4 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM8)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a24      	ldr	r2, [pc, #144]	@ (80029e0 <HAL_TIM_PWM_MspInit+0x148>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10f      	bne.n	8002972 <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002952:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 8002954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 8002964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	697b      	ldr	r3, [r7, #20]
}
 8002970:	e028      	b.n	80029c4 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM12)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <HAL_TIM_PWM_MspInit+0x14c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d10f      	bne.n	800299c <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800297c:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 800297e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002982:	4a13      	ldr	r2, [pc, #76]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 8002984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002988:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800298c:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 800298e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
}
 800299a:	e013      	b.n	80029c4 <HAL_TIM_PWM_MspInit+0x12c>
  else if(htim_pwm->Instance==TIM15)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a11      	ldr	r2, [pc, #68]	@ (80029e8 <HAL_TIM_PWM_MspInit+0x150>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d10e      	bne.n	80029c4 <HAL_TIM_PWM_MspInit+0x12c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 80029a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ac:	4a08      	ldr	r2, [pc, #32]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x138>)
 80029b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	bf00      	nop
 80029c6:	372c      	adds	r7, #44	@ 0x2c
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	58024400 	.word	0x58024400
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800
 80029dc:	40000c00 	.word	0x40000c00
 80029e0:	40010400 	.word	0x40010400
 80029e4:	40001800 	.word	0x40001800
 80029e8:	40014000 	.word	0x40014000

080029ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b090      	sub	sp, #64	@ 0x40
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a95      	ldr	r2, [pc, #596]	@ (8002c60 <HAL_TIM_MspPostInit+0x274>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d120      	bne.n	8002a50 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a0e:	4b95      	ldr	r3, [pc, #596]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a14:	4a93      	ldr	r2, [pc, #588]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002a16:	f043 0310 	orr.w	r3, r3, #16
 8002a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a1e:	4b91      	ldr	r3, [pc, #580]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_13;
 8002a2c:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a46:	4619      	mov	r1, r3
 8002a48:	4887      	ldr	r0, [pc, #540]	@ (8002c68 <HAL_TIM_MspPostInit+0x27c>)
 8002a4a:	f002 facf 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002a4e:	e103      	b.n	8002c58 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a58:	d120      	bne.n	8002a9c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b82      	ldr	r3, [pc, #520]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a60:	4a80      	ldr	r2, [pc, #512]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a6a:	4b7e      	ldr	r3, [pc, #504]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a92:	4619      	mov	r1, r3
 8002a94:	4875      	ldr	r0, [pc, #468]	@ (8002c6c <HAL_TIM_MspPostInit+0x280>)
 8002a96:	f002 faa9 	bl	8004fec <HAL_GPIO_Init>
}
 8002a9a:	e0dd      	b.n	8002c58 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM3)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a73      	ldr	r2, [pc, #460]	@ (8002c70 <HAL_TIM_MspPostInit+0x284>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d11f      	bne.n	8002ae6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aac:	4a6d      	ldr	r2, [pc, #436]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ab6:	4b6b      	ldr	r3, [pc, #428]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ac4:	2340      	movs	r3, #64	@ 0x40
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002adc:	4619      	mov	r1, r3
 8002ade:	4863      	ldr	r0, [pc, #396]	@ (8002c6c <HAL_TIM_MspPostInit+0x280>)
 8002ae0:	f002 fa84 	bl	8004fec <HAL_GPIO_Init>
}
 8002ae4:	e0b8      	b.n	8002c58 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM4)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a62      	ldr	r2, [pc, #392]	@ (8002c74 <HAL_TIM_MspPostInit+0x288>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d11f      	bne.n	8002b30 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	4b5c      	ldr	r3, [pc, #368]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b00:	4b58      	ldr	r3, [pc, #352]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b0e:	2340      	movs	r3, #64	@ 0x40
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b26:	4619      	mov	r1, r3
 8002b28:	4853      	ldr	r0, [pc, #332]	@ (8002c78 <HAL_TIM_MspPostInit+0x28c>)
 8002b2a:	f002 fa5f 	bl	8004fec <HAL_GPIO_Init>
}
 8002b2e:	e093      	b.n	8002c58 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM5)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a51      	ldr	r2, [pc, #324]	@ (8002c7c <HAL_TIM_MspPostInit+0x290>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d11f      	bne.n	8002b7a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b40:	4a48      	ldr	r2, [pc, #288]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b4a:	4b46      	ldr	r3, [pc, #280]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b70:	4619      	mov	r1, r3
 8002b72:	483e      	ldr	r0, [pc, #248]	@ (8002c6c <HAL_TIM_MspPostInit+0x280>)
 8002b74:	f002 fa3a 	bl	8004fec <HAL_GPIO_Init>
}
 8002b78:	e06e      	b.n	8002c58 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM8)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a40      	ldr	r2, [pc, #256]	@ (8002c80 <HAL_TIM_MspPostInit+0x294>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d11f      	bne.n	8002bc4 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b84:	4b37      	ldr	r3, [pc, #220]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b8a:	4a36      	ldr	r2, [pc, #216]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b94:	4b33      	ldr	r3, [pc, #204]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ba2:	2340      	movs	r3, #64	@ 0x40
 8002ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4831      	ldr	r0, [pc, #196]	@ (8002c84 <HAL_TIM_MspPostInit+0x298>)
 8002bbe:	f002 fa15 	bl	8004fec <HAL_GPIO_Init>
}
 8002bc2:	e049      	b.n	8002c58 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM12)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2f      	ldr	r2, [pc, #188]	@ (8002c88 <HAL_TIM_MspPostInit+0x29c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d120      	bne.n	8002c10 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	4b25      	ldr	r3, [pc, #148]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bd4:	4a23      	ldr	r2, [pc, #140]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bde:	4b21      	ldr	r3, [pc, #132]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002bec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c06:	4619      	mov	r1, r3
 8002c08:	481b      	ldr	r0, [pc, #108]	@ (8002c78 <HAL_TIM_MspPostInit+0x28c>)
 8002c0a:	f002 f9ef 	bl	8004fec <HAL_GPIO_Init>
}
 8002c0e:	e023      	b.n	8002c58 <HAL_TIM_MspPostInit+0x26c>
  else if(htim->Instance==TIM15)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1d      	ldr	r2, [pc, #116]	@ (8002c8c <HAL_TIM_MspPostInit+0x2a0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d11e      	bne.n	8002c58 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c20:	4a10      	ldr	r2, [pc, #64]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <HAL_TIM_MspPostInit+0x278>)
 8002c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c38:	2304      	movs	r3, #4
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c50:	4619      	mov	r1, r3
 8002c52:	4806      	ldr	r0, [pc, #24]	@ (8002c6c <HAL_TIM_MspPostInit+0x280>)
 8002c54:	f002 f9ca 	bl	8004fec <HAL_GPIO_Init>
}
 8002c58:	bf00      	nop
 8002c5a:	3740      	adds	r7, #64	@ 0x40
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40010000 	.word	0x40010000
 8002c64:	58024400 	.word	0x58024400
 8002c68:	58021000 	.word	0x58021000
 8002c6c:	58020000 	.word	0x58020000
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	58020400 	.word	0x58020400
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40010400 	.word	0x40010400
 8002c84:	58020800 	.word	0x58020800
 8002c88:	40001800 	.word	0x40001800
 8002c8c:	40014000 	.word	0x40014000

08002c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b0c0      	sub	sp, #256	@ 0x100
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cac:	22b8      	movs	r2, #184	@ 0xb8
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f00c f80c 	bl	800ecce <memset>
  if(huart->Instance==UART4)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4abf      	ldr	r2, [pc, #764]	@ (8002fb8 <HAL_UART_MspInit+0x328>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d16b      	bne.n	8002d98 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002cc0:	f04f 0202 	mov.w	r2, #2
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fc1e 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002ce2:	f7ff f9f7 	bl	80020d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ce6:	4bb5      	ldr	r3, [pc, #724]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cec:	4ab3      	ldr	r2, [pc, #716]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002cee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cf6:	4bb1      	ldr	r3, [pc, #708]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d04:	4bad      	ldr	r3, [pc, #692]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d0a:	4aac      	ldr	r2, [pc, #688]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d14:	4ba9      	ldr	r3, [pc, #676]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d22:	4ba6      	ldr	r3, [pc, #664]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d28:	4aa4      	ldr	r2, [pc, #656]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d32:	4ba2      	ldr	r3, [pc, #648]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PB9     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d60:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d64:	4619      	mov	r1, r3
 8002d66:	4896      	ldr	r0, [pc, #600]	@ (8002fc0 <HAL_UART_MspInit+0x330>)
 8002d68:	f002 f940 	bl	8004fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d84:	2308      	movs	r3, #8
 8002d86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d8a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d8e:	4619      	mov	r1, r3
 8002d90:	488c      	ldr	r0, [pc, #560]	@ (8002fc4 <HAL_UART_MspInit+0x334>)
 8002d92:	f002 f92b 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8002d96:	e109      	b.n	8002fac <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART5)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a8a      	ldr	r2, [pc, #552]	@ (8002fc8 <HAL_UART_MspInit+0x338>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d147      	bne.n	8002e32 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002da2:	f04f 0202 	mov.w	r2, #2
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fbad 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8002dc4:	f7ff f986 	bl	80020d4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002dc8:	4b7c      	ldr	r3, [pc, #496]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dce:	4a7b      	ldr	r2, [pc, #492]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002dd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002dd8:	4b78      	ldr	r3, [pc, #480]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	4b75      	ldr	r3, [pc, #468]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dec:	4a73      	ldr	r2, [pc, #460]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002df6:	4b71      	ldr	r3, [pc, #452]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8002e04:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002e08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002e1e:	230e      	movs	r3, #14
 8002e20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e24:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4865      	ldr	r0, [pc, #404]	@ (8002fc0 <HAL_UART_MspInit+0x330>)
 8002e2c:	f002 f8de 	bl	8004fec <HAL_GPIO_Init>
}
 8002e30:	e0bc      	b.n	8002fac <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART7)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a65      	ldr	r2, [pc, #404]	@ (8002fcc <HAL_UART_MspInit+0x33c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d147      	bne.n	8002ecc <HAL_UART_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002e3c:	f04f 0202 	mov.w	r2, #2
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 fb60 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8002e5e:	f7ff f939 	bl	80020d4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002e62:	4b56      	ldr	r3, [pc, #344]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e68:	4a54      	ldr	r2, [pc, #336]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002e6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e72:	4b52      	ldr	r3, [pc, #328]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e80:	4b4e      	ldr	r3, [pc, #312]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e86:	4a4d      	ldr	r2, [pc, #308]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002e88:	f043 0310 	orr.w	r3, r3, #16
 8002e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e90:	4b4a      	ldr	r3, [pc, #296]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002e9e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002eb8:	2307      	movs	r3, #7
 8002eba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ebe:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4842      	ldr	r0, [pc, #264]	@ (8002fd0 <HAL_UART_MspInit+0x340>)
 8002ec6:	f002 f891 	bl	8004fec <HAL_GPIO_Init>
}
 8002eca:	e06f      	b.n	8002fac <HAL_UART_MspInit+0x31c>
  else if(huart->Instance==UART8)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a40      	ldr	r2, [pc, #256]	@ (8002fd4 <HAL_UART_MspInit+0x344>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d16a      	bne.n	8002fac <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002ed6:	f04f 0202 	mov.w	r2, #2
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ee8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 fb13 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8002ef8:	f7ff f8ec 	bl	80020d4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002efc:	4b2f      	ldr	r3, [pc, #188]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f02:	4a2e      	ldr	r2, [pc, #184]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1a:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f20:	4a26      	ldr	r2, [pc, #152]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002f22:	f043 0310 	orr.w	r3, r3, #16
 8002f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f2a:	4b24      	ldr	r3, [pc, #144]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f38:	4b20      	ldr	r3, [pc, #128]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002f40:	f043 0308 	orr.w	r3, r3, #8
 8002f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f48:	4b1c      	ldr	r3, [pc, #112]	@ (8002fbc <HAL_UART_MspInit+0x32c>)
 8002f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002f56:	2303      	movs	r3, #3
 8002f58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002f6e:	2308      	movs	r3, #8
 8002f70:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f74:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4815      	ldr	r0, [pc, #84]	@ (8002fd0 <HAL_UART_MspInit+0x340>)
 8002f7c:	f002 f836 	bl	8004fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8002f80:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002f84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fa0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4807      	ldr	r0, [pc, #28]	@ (8002fc4 <HAL_UART_MspInit+0x334>)
 8002fa8:	f002 f820 	bl	8004fec <HAL_GPIO_Init>
}
 8002fac:	bf00      	nop
 8002fae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40004c00 	.word	0x40004c00
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	58020400 	.word	0x58020400
 8002fc4:	58020c00 	.word	0x58020c00
 8002fc8:	40005000 	.word	0x40005000
 8002fcc:	40007800 	.word	0x40007800
 8002fd0:	58021000 	.word	0x58021000
 8002fd4:	40007c00 	.word	0x40007c00

08002fd8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b0bc      	sub	sp, #240	@ 0xf0
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff0:	f107 0320 	add.w	r3, r7, #32
 8002ff4:	22b8      	movs	r2, #184	@ 0xb8
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f00b fe68 	bl	800ecce <memset>
  if(husart->Instance==USART1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a73      	ldr	r2, [pc, #460]	@ (80031d0 <HAL_USART_MspInit+0x1f8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d147      	bne.n	8003098 <HAL_USART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003008:	f04f 0201 	mov.w	r2, #1
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800301a:	f107 0320 	add.w	r3, r7, #32
 800301e:	4618      	mov	r0, r3
 8003020:	f003 fa7a 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800302a:	f7ff f853 	bl	80020d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800302e:	4b69      	ldr	r3, [pc, #420]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003034:	4a67      	ldr	r2, [pc, #412]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003036:	f043 0310 	orr.w	r3, r3, #16
 800303a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800303e:	4b65      	ldr	r3, [pc, #404]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304c:	4b61      	ldr	r3, [pc, #388]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 800304e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003052:	4a60      	ldr	r2, [pc, #384]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800305c:	4b5d      	ldr	r3, [pc, #372]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 800305e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	69bb      	ldr	r3, [r7, #24]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 800306a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800306e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003072:	2302      	movs	r3, #2
 8003074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003084:	2307      	movs	r3, #7
 8003086:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800308e:	4619      	mov	r1, r3
 8003090:	4851      	ldr	r0, [pc, #324]	@ (80031d8 <HAL_USART_MspInit+0x200>)
 8003092:	f001 ffab 	bl	8004fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003096:	e097      	b.n	80031c8 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a4f      	ldr	r2, [pc, #316]	@ (80031dc <HAL_USART_MspInit+0x204>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d146      	bne.n	8003130 <HAL_USART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030a2:	f04f 0202 	mov.w	r2, #2
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b4:	f107 0320 	add.w	r3, r7, #32
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fa2d 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_USART_MspInit+0xf0>
      Error_Handler();
 80030c4:	f7ff f806 	bl	80020d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030c8:	4b42      	ldr	r3, [pc, #264]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 80030ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030ce:	4a41      	ldr	r2, [pc, #260]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030d8:	4b3e      	ldr	r3, [pc, #248]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 80030da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e6:	4b3b      	ldr	r3, [pc, #236]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 80030e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ec:	4a39      	ldr	r2, [pc, #228]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 80030ee:	f043 0308 	orr.w	r3, r3, #8
 80030f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030f6:	4b37      	ldr	r3, [pc, #220]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 80030f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_7;
 8003104:	23e8      	movs	r3, #232	@ 0xe8
 8003106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800311c:	2307      	movs	r3, #7
 800311e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003122:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003126:	4619      	mov	r1, r3
 8003128:	482d      	ldr	r0, [pc, #180]	@ (80031e0 <HAL_USART_MspInit+0x208>)
 800312a:	f001 ff5f 	bl	8004fec <HAL_GPIO_Init>
}
 800312e:	e04b      	b.n	80031c8 <HAL_USART_MspInit+0x1f0>
  else if(husart->Instance==USART3)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2b      	ldr	r2, [pc, #172]	@ (80031e4 <HAL_USART_MspInit+0x20c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d146      	bne.n	80031c8 <HAL_USART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800313a:	f04f 0202 	mov.w	r2, #2
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003146:	2300      	movs	r3, #0
 8003148:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800314c:	f107 0320 	add.w	r3, r7, #32
 8003150:	4618      	mov	r0, r3
 8003152:	f003 f9e1 	bl	8006518 <HAL_RCCEx_PeriphCLKConfig>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_USART_MspInit+0x188>
      Error_Handler();
 800315c:	f7fe ffba 	bl	80020d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003160:	4b1c      	ldr	r3, [pc, #112]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003166:	4a1b      	ldr	r2, [pc, #108]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800316c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003170:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003184:	4a13      	ldr	r2, [pc, #76]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003186:	f043 0308 	orr.w	r3, r3, #8
 800318a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800318e:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <HAL_USART_MspInit+0x1fc>)
 8003190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 800319c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80031a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031b6:	2307      	movs	r3, #7
 80031b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031c0:	4619      	mov	r1, r3
 80031c2:	4807      	ldr	r0, [pc, #28]	@ (80031e0 <HAL_USART_MspInit+0x208>)
 80031c4:	f001 ff12 	bl	8004fec <HAL_GPIO_Init>
}
 80031c8:	bf00      	nop
 80031ca:	37f0      	adds	r7, #240	@ 0xf0
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40011000 	.word	0x40011000
 80031d4:	58024400 	.word	0x58024400
 80031d8:	58020000 	.word	0x58020000
 80031dc:	40004400 	.word	0x40004400
 80031e0:	58020c00 	.word	0x58020c00
 80031e4:	40004800 	.word	0x40004800

080031e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <NMI_Handler+0x4>

080031f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f4:	bf00      	nop
 80031f6:	e7fd      	b.n	80031f4 <HardFault_Handler+0x4>

080031f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <MemManage_Handler+0x4>

08003200 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <BusFault_Handler+0x4>

08003208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800320c:	bf00      	nop
 800320e:	e7fd      	b.n	800320c <UsageFault_Handler+0x4>

08003210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800323e:	f000 f9c1 	bl	80035c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}

08003246 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0
  return 1;
 800324a:	2301      	movs	r3, #1
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <_kill>:

int _kill(int pid, int sig)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003260:	f00b fd88 	bl	800ed74 <__errno>
 8003264:	4603      	mov	r3, r0
 8003266:	2216      	movs	r2, #22
 8003268:	601a      	str	r2, [r3, #0]
  return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <_exit>:

void _exit (int status)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800327e:	f04f 31ff 	mov.w	r1, #4294967295
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffe7 	bl	8003256 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <_exit+0x12>

0800328c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e00a      	b.n	80032b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800329e:	f3af 8000 	nop.w
 80032a2:	4601      	mov	r1, r0
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	60ba      	str	r2, [r7, #8]
 80032aa:	b2ca      	uxtb	r2, r1
 80032ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3301      	adds	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dbf0      	blt.n	800329e <_read+0x12>
  }

  return len;
 80032bc:	687b      	ldr	r3, [r7, #4]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032ee:	605a      	str	r2, [r3, #4]
  return 0;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <_isatty>:

int _isatty(int file)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003338:	4a14      	ldr	r2, [pc, #80]	@ (800338c <_sbrk+0x5c>)
 800333a:	4b15      	ldr	r3, [pc, #84]	@ (8003390 <_sbrk+0x60>)
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003344:	4b13      	ldr	r3, [pc, #76]	@ (8003394 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800334c:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <_sbrk+0x64>)
 800334e:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <_sbrk+0x68>)
 8003350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003352:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <_sbrk+0x64>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	429a      	cmp	r2, r3
 800335e:	d207      	bcs.n	8003370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003360:	f00b fd08 	bl	800ed74 <__errno>
 8003364:	4603      	mov	r3, r0
 8003366:	220c      	movs	r2, #12
 8003368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
 800336e:	e009      	b.n	8003384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003370:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <_sbrk+0x64>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003376:	4b07      	ldr	r3, [pc, #28]	@ (8003394 <_sbrk+0x64>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	4a05      	ldr	r2, [pc, #20]	@ (8003394 <_sbrk+0x64>)
 8003380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003382:	68fb      	ldr	r3, [r7, #12]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	24050000 	.word	0x24050000
 8003390:	00000400 	.word	0x00000400
 8003394:	24000bbc 	.word	0x24000bbc
 8003398:	24000d10 	.word	0x24000d10

0800339c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033a0:	4b32      	ldr	r3, [pc, #200]	@ (800346c <SystemInit+0xd0>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a6:	4a31      	ldr	r2, [pc, #196]	@ (800346c <SystemInit+0xd0>)
 80033a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003470 <SystemInit+0xd4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	2b06      	cmp	r3, #6
 80033ba:	d807      	bhi.n	80033cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003470 <SystemInit+0xd4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 030f 	bic.w	r3, r3, #15
 80033c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003470 <SystemInit+0xd4>)
 80033c6:	f043 0307 	orr.w	r3, r3, #7
 80033ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80033cc:	4b29      	ldr	r3, [pc, #164]	@ (8003474 <SystemInit+0xd8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a28      	ldr	r2, [pc, #160]	@ (8003474 <SystemInit+0xd8>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033d8:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <SystemInit+0xd8>)
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80033de:	4b25      	ldr	r3, [pc, #148]	@ (8003474 <SystemInit+0xd8>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4924      	ldr	r1, [pc, #144]	@ (8003474 <SystemInit+0xd8>)
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <SystemInit+0xdc>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033ea:	4b21      	ldr	r3, [pc, #132]	@ (8003470 <SystemInit+0xd4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003470 <SystemInit+0xd4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 030f 	bic.w	r3, r3, #15
 80033fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003470 <SystemInit+0xd4>)
 8003400:	f043 0307 	orr.w	r3, r3, #7
 8003404:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003406:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <SystemInit+0xd8>)
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800340c:	4b19      	ldr	r3, [pc, #100]	@ (8003474 <SystemInit+0xd8>)
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003412:	4b18      	ldr	r3, [pc, #96]	@ (8003474 <SystemInit+0xd8>)
 8003414:	2200      	movs	r2, #0
 8003416:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003418:	4b16      	ldr	r3, [pc, #88]	@ (8003474 <SystemInit+0xd8>)
 800341a:	4a18      	ldr	r2, [pc, #96]	@ (800347c <SystemInit+0xe0>)
 800341c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <SystemInit+0xd8>)
 8003420:	4a17      	ldr	r2, [pc, #92]	@ (8003480 <SystemInit+0xe4>)
 8003422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003424:	4b13      	ldr	r3, [pc, #76]	@ (8003474 <SystemInit+0xd8>)
 8003426:	4a17      	ldr	r2, [pc, #92]	@ (8003484 <SystemInit+0xe8>)
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800342a:	4b12      	ldr	r3, [pc, #72]	@ (8003474 <SystemInit+0xd8>)
 800342c:	2200      	movs	r2, #0
 800342e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003430:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <SystemInit+0xd8>)
 8003432:	4a14      	ldr	r2, [pc, #80]	@ (8003484 <SystemInit+0xe8>)
 8003434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003436:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <SystemInit+0xd8>)
 8003438:	2200      	movs	r2, #0
 800343a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800343c:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <SystemInit+0xd8>)
 800343e:	4a11      	ldr	r2, [pc, #68]	@ (8003484 <SystemInit+0xe8>)
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003442:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <SystemInit+0xd8>)
 8003444:	2200      	movs	r2, #0
 8003446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <SystemInit+0xd8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a09      	ldr	r2, [pc, #36]	@ (8003474 <SystemInit+0xd8>)
 800344e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003454:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <SystemInit+0xd8>)
 8003456:	2200      	movs	r2, #0
 8003458:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800345a:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <SystemInit+0xec>)
 800345c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003460:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00
 8003470:	52002000 	.word	0x52002000
 8003474:	58024400 	.word	0x58024400
 8003478:	eaf6ed7f 	.word	0xeaf6ed7f
 800347c:	02020200 	.word	0x02020200
 8003480:	01ff0000 	.word	0x01ff0000
 8003484:	01010280 	.word	0x01010280
 8003488:	52004000 	.word	0x52004000

0800348c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800348c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003490:	f7ff ff84 	bl	800339c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003494:	480c      	ldr	r0, [pc, #48]	@ (80034c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003496:	490d      	ldr	r1, [pc, #52]	@ (80034cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003498:	4a0d      	ldr	r2, [pc, #52]	@ (80034d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800349c:	e002      	b.n	80034a4 <LoopCopyDataInit>

0800349e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034a2:	3304      	adds	r3, #4

080034a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a8:	d3f9      	bcc.n	800349e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034aa:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034ac:	4c0a      	ldr	r4, [pc, #40]	@ (80034d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034b0:	e001      	b.n	80034b6 <LoopFillZerobss>

080034b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b4:	3204      	adds	r2, #4

080034b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b8:	d3fb      	bcc.n	80034b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034ba:	f00b fc61 	bl	800ed80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034be:	f7fd fb31 	bl	8000b24 <main>
  bx  lr
 80034c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80034c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80034cc:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80034d0:	080127e0 	.word	0x080127e0
  ldr r2, =_sbss
 80034d4:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80034d8:	24000d10 	.word	0x24000d10

080034dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034dc:	e7fe      	b.n	80034dc <ADC3_IRQHandler>
	...

080034e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e6:	2003      	movs	r0, #3
 80034e8:	f001 fcd6 	bl	8004e98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034ec:	f002 fe3e 	bl	800616c <HAL_RCC_GetSysClockFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <HAL_Init+0x68>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	4913      	ldr	r1, [pc, #76]	@ (800354c <HAL_Init+0x6c>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
 8003508:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <HAL_Init+0x68>)
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	4a0e      	ldr	r2, [pc, #56]	@ (800354c <HAL_Init+0x6c>)
 8003514:	5cd3      	ldrb	r3, [r2, r3]
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	4a0b      	ldr	r2, [pc, #44]	@ (8003550 <HAL_Init+0x70>)
 8003522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003524:	4a0b      	ldr	r2, [pc, #44]	@ (8003554 <HAL_Init+0x74>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800352a:	200f      	movs	r0, #15
 800352c:	f000 f814 	bl	8003558 <HAL_InitTick>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e002      	b.n	8003540 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800353a:	f7fe fdd1 	bl	80020e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	58024400 	.word	0x58024400
 800354c:	0801235c 	.word	0x0801235c
 8003550:	24000004 	.word	0x24000004
 8003554:	24000000 	.word	0x24000000

08003558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003560:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <HAL_InitTick+0x60>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e021      	b.n	80035b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800356c:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <HAL_InitTick+0x64>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <HAL_InitTick+0x60>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	4619      	mov	r1, r3
 8003576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800357a:	fbb3 f3f1 	udiv	r3, r3, r1
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fcad 	bl	8004ee2 <HAL_SYSTICK_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e00e      	b.n	80035b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b0f      	cmp	r3, #15
 8003596:	d80a      	bhi.n	80035ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003598:	2200      	movs	r2, #0
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f001 fc85 	bl	8004eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035a4:	4a06      	ldr	r2, [pc, #24]	@ (80035c0 <HAL_InitTick+0x68>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	2400000c 	.word	0x2400000c
 80035bc:	24000000 	.word	0x24000000
 80035c0:	24000008 	.word	0x24000008

080035c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_IncTick+0x20>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <HAL_IncTick+0x24>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4413      	add	r3, r2
 80035d4:	4a04      	ldr	r2, [pc, #16]	@ (80035e8 <HAL_IncTick+0x24>)
 80035d6:	6013      	str	r3, [r2, #0]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	2400000c 	.word	0x2400000c
 80035e8:	24000bc0 	.word	0x24000bc0

080035ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return uwTick;
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <HAL_GetTick+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	24000bc0 	.word	0x24000bc0

08003604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7ff ffee 	bl	80035ec <HAL_GetTick>
 8003610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d005      	beq.n	800362a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800361e:	4b0a      	ldr	r3, [pc, #40]	@ (8003648 <HAL_Delay+0x44>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800362a:	bf00      	nop
 800362c:	f7ff ffde 	bl	80035ec <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	429a      	cmp	r2, r3
 800363a:	d8f7      	bhi.n	800362c <HAL_Delay+0x28>
  {
  }
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	2400000c 	.word	0x2400000c

0800364c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3360      	adds	r3, #96	@ 0x60
 80036c6:	461a      	mov	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a10      	ldr	r2, [pc, #64]	@ (8003714 <LL_ADC_SetOffset+0x60>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10b      	bne.n	80036f0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80036ee:	e00b      	b.n	8003708 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	430b      	orrs	r3, r1
 8003702:	431a      	orrs	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	601a      	str	r2, [r3, #0]
}
 8003708:	bf00      	nop
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	58026000 	.word	0x58026000

08003718 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3360      	adds	r3, #96	@ 0x60
 8003726:	461a      	mov	r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	611a      	str	r2, [r3, #16]
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a0c      	ldr	r2, [pc, #48]	@ (80037b8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3360      	adds	r3, #96	@ 0x60
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	601a      	str	r2, [r3, #0]
  }
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	58026000 	.word	0x58026000

080037bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a0c      	ldr	r2, [pc, #48]	@ (80037fc <LL_ADC_SetOffsetSaturation+0x40>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10e      	bne.n	80037ee <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3360      	adds	r3, #96	@ 0x60
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	58026000 	.word	0x58026000

08003800 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a0c      	ldr	r2, [pc, #48]	@ (8003840 <LL_ADC_SetOffsetSign+0x40>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10e      	bne.n	8003832 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3360      	adds	r3, #96	@ 0x60
 8003818:	461a      	mov	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	431a      	orrs	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	58026000 	.word	0x58026000

08003844 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3360      	adds	r3, #96	@ 0x60
 8003854:	461a      	mov	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a0c      	ldr	r2, [pc, #48]	@ (8003894 <LL_ADC_SetOffsetState+0x50>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	431a      	orrs	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003876:	e007      	b.n	8003888 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	431a      	orrs	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	601a      	str	r2, [r3, #0]
}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	58026000 	.word	0x58026000

08003898 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3330      	adds	r3, #48	@ 0x30
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	4413      	add	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	211f      	movs	r1, #31
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	401a      	ands	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	0e9b      	lsrs	r3, r3, #26
 80038d0:	f003 011f 	and.w	r1, r3, #31
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	431a      	orrs	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3314      	adds	r3, #20
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	0e5b      	lsrs	r3, r3, #25
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	4413      	add	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	0d1b      	lsrs	r3, r3, #20
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2107      	movs	r1, #7
 800391e:	fa01 f303 	lsl.w	r3, r1, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	401a      	ands	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	0d1b      	lsrs	r3, r3, #20
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	431a      	orrs	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
	...

08003948 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a1a      	ldr	r2, [pc, #104]	@ (80039c0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d115      	bne.n	8003988 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003968:	43db      	mvns	r3, r3
 800396a:	401a      	ands	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0318 	and.w	r3, r3, #24
 8003972:	4914      	ldr	r1, [pc, #80]	@ (80039c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003974:	40d9      	lsrs	r1, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	400b      	ands	r3, r1
 800397a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800397e:	431a      	orrs	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003986:	e014      	b.n	80039b2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003994:	43db      	mvns	r3, r3
 8003996:	401a      	ands	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0318 	and.w	r3, r3, #24
 800399e:	4909      	ldr	r1, [pc, #36]	@ (80039c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80039a0:	40d9      	lsrs	r1, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	400b      	ands	r3, r1
 80039a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039aa:	431a      	orrs	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	58026000 	.word	0x58026000
 80039c4:	000fffff 	.word	0x000fffff

080039c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4b04      	ldr	r3, [pc, #16]	@ (80039e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6093      	str	r3, [r2, #8]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	5fffffc0 	.word	0x5fffffc0

080039ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a00:	d101      	bne.n	8003a06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <LL_ADC_EnableInternalRegulator+0x24>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	6fffffc0 	.word	0x6fffffc0

08003a3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a50:	d101      	bne.n	8003a56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <LL_ADC_IsEnabled+0x18>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <LL_ADC_IsEnabled+0x1a>
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d101      	bne.n	8003aa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d101      	bne.n	8003ac8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b089      	sub	sp, #36	@ 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1ee      	b.n	8003ed0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7fe fb07 	bl	8002114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff67 	bl	80039ec <LL_ADC_IsDeepPowerDownEnabled>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff4d 	bl	80039c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff82 	bl	8003a3c <LL_ADC_IsInternalRegulatorEnabled>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d114      	bne.n	8003b68 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff66 	bl	8003a14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b48:	4b8e      	ldr	r3, [pc, #568]	@ (8003d84 <HAL_ADC_Init+0x2ac>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	4a8e      	ldr	r2, [pc, #568]	@ (8003d88 <HAL_ADC_Init+0x2b0>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	3301      	adds	r3, #1
 8003b58:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b5a:	e002      	b.n	8003b62 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f9      	bne.n	8003b5c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff65 	bl	8003a3c <LL_ADC_IsInternalRegulatorEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7c:	f043 0210 	orr.w	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff76 	bl	8003a8a <LL_ADC_REG_IsConversionOngoing>
 8003b9e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f040 8188 	bne.w	8003ebe <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 8184 	bne.w	8003ebe <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bba:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003bbe:	f043 0202 	orr.w	r2, r3, #2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff4a 	bl	8003a64 <LL_ADC_IsEnabled>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d136      	bne.n	8003c44 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a6c      	ldr	r2, [pc, #432]	@ (8003d8c <HAL_ADC_Init+0x2b4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_ADC_Init+0x112>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a6a      	ldr	r2, [pc, #424]	@ (8003d90 <HAL_ADC_Init+0x2b8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10e      	bne.n	8003c08 <HAL_ADC_Init+0x130>
 8003bea:	4868      	ldr	r0, [pc, #416]	@ (8003d8c <HAL_ADC_Init+0x2b4>)
 8003bec:	f7ff ff3a 	bl	8003a64 <LL_ADC_IsEnabled>
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	4867      	ldr	r0, [pc, #412]	@ (8003d90 <HAL_ADC_Init+0x2b8>)
 8003bf4:	f7ff ff36 	bl	8003a64 <LL_ADC_IsEnabled>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4323      	orrs	r3, r4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e008      	b.n	8003c1a <HAL_ADC_Init+0x142>
 8003c08:	4862      	ldr	r0, [pc, #392]	@ (8003d94 <HAL_ADC_Init+0x2bc>)
 8003c0a:	f7ff ff2b 	bl	8003a64 <LL_ADC_IsEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d012      	beq.n	8003c44 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a5a      	ldr	r2, [pc, #360]	@ (8003d8c <HAL_ADC_Init+0x2b4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_ADC_Init+0x15a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	@ (8003d90 <HAL_ADC_Init+0x2b8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_ADC_Init+0x15e>
 8003c32:	4a59      	ldr	r2, [pc, #356]	@ (8003d98 <HAL_ADC_Init+0x2c0>)
 8003c34:	e000      	b.n	8003c38 <HAL_ADC_Init+0x160>
 8003c36:	4a59      	ldr	r2, [pc, #356]	@ (8003d9c <HAL_ADC_Init+0x2c4>)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f7ff fd04 	bl	800364c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a52      	ldr	r2, [pc, #328]	@ (8003d94 <HAL_ADC_Init+0x2bc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d129      	bne.n	8003ca2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7e5b      	ldrb	r3, [r3, #25]
 8003c52:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003c58:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003c5e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d013      	beq.n	8003c90 <HAL_ADC_Init+0x1b8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b0c      	cmp	r3, #12
 8003c6e:	d00d      	beq.n	8003c8c <HAL_ADC_Init+0x1b4>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b1c      	cmp	r3, #28
 8003c76:	d007      	beq.n	8003c88 <HAL_ADC_Init+0x1b0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b18      	cmp	r3, #24
 8003c7e:	d101      	bne.n	8003c84 <HAL_ADC_Init+0x1ac>
 8003c80:	2318      	movs	r3, #24
 8003c82:	e006      	b.n	8003c92 <HAL_ADC_Init+0x1ba>
 8003c84:	2300      	movs	r3, #0
 8003c86:	e004      	b.n	8003c92 <HAL_ADC_Init+0x1ba>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	e002      	b.n	8003c92 <HAL_ADC_Init+0x1ba>
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	e000      	b.n	8003c92 <HAL_ADC_Init+0x1ba>
 8003c90:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003c92:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	e00e      	b.n	8003cc0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7e5b      	ldrb	r3, [r3, #25]
 8003ca6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003cb2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d106      	bne.n	8003cd8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	045b      	lsls	r3, r3, #17
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d009      	beq.n	8003cf4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a26      	ldr	r2, [pc, #152]	@ (8003d94 <HAL_ADC_Init+0x2bc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d115      	bne.n	8003d2a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	4b26      	ldr	r3, [pc, #152]	@ (8003da0 <HAL_ADC_Init+0x2c8>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	611a      	str	r2, [r3, #16]
 8003d28:	e009      	b.n	8003d3e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	4b1c      	ldr	r3, [pc, #112]	@ (8003da4 <HAL_ADC_Init+0x2cc>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	69b9      	ldr	r1, [r7, #24]
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fea1 	bl	8003a8a <LL_ADC_REG_IsConversionOngoing>
 8003d48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff feae 	bl	8003ab0 <LL_ADC_INJ_IsConversionOngoing>
 8003d54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 808e 	bne.w	8003e7a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 808a 	bne.w	8003e7a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d94 <HAL_ADC_Init+0x2bc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d11b      	bne.n	8003da8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7e1b      	ldrb	r3, [r3, #24]
 8003d74:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d7c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e018      	b.n	8003db6 <HAL_ADC_Init+0x2de>
 8003d84:	24000000 	.word	0x24000000
 8003d88:	053e2d63 	.word	0x053e2d63
 8003d8c:	40022000 	.word	0x40022000
 8003d90:	40022100 	.word	0x40022100
 8003d94:	58026000 	.word	0x58026000
 8003d98:	40022300 	.word	0x40022300
 8003d9c:	58026300 	.word	0x58026300
 8003da0:	fff04007 	.word	0xfff04007
 8003da4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7e1b      	ldrb	r3, [r3, #24]
 8003dac:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	4b46      	ldr	r3, [pc, #280]	@ (8003ed8 <HAL_ADC_Init+0x400>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d137      	bne.n	8003e44 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a3f      	ldr	r2, [pc, #252]	@ (8003edc <HAL_ADC_Init+0x404>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d116      	bne.n	8003e12 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee0 <HAL_ADC_Init+0x408>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003df6:	4311      	orrs	r1, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e02:	430a      	orrs	r2, r1
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	611a      	str	r2, [r3, #16]
 8003e10:	e020      	b.n	8003e54 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	4b32      	ldr	r3, [pc, #200]	@ (8003ee4 <HAL_ADC_Init+0x40c>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0411      	lsls	r1, r2, #16
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e28:	4311      	orrs	r1, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e2e:	4311      	orrs	r1, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e34:	430a      	orrs	r2, r1
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	611a      	str	r2, [r3, #16]
 8003e42:	e007      	b.n	8003e54 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003edc <HAL_ADC_Init+0x404>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d002      	beq.n	8003e7a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fd67 	bl	8004948 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d10c      	bne.n	8003e9c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	f023 010f 	bic.w	r1, r3, #15
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	1e5a      	subs	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e9a:	e007      	b.n	8003eac <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 020f 	bic.w	r2, r2, #15
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb0:	f023 0303 	bic.w	r3, r3, #3
 8003eb4:	f043 0201 	orr.w	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ebc:	e007      	b.n	8003ece <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec2:	f043 0210 	orr.w	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3724      	adds	r7, #36	@ 0x24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}
 8003ed8:	ffffbffc 	.word	0xffffbffc
 8003edc:	58026000 	.word	0x58026000
 8003ee0:	fc00f81f 	.word	0xfc00f81f
 8003ee4:	fc00f81e 	.word	0xfc00f81e

08003ee8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b0b9      	sub	sp, #228	@ 0xe4
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f02:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4aab      	ldr	r2, [pc, #684]	@ (80041b8 <HAL_ADC_ConfigChannel+0x2d0>)
 8003f0a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d102      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x34>
 8003f16:	2302      	movs	r3, #2
 8003f18:	f000 bcfe 	b.w	8004918 <HAL_ADC_ConfigChannel+0xa30>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fdae 	bl	8003a8a <LL_ADC_REG_IsConversionOngoing>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 84e2 	bne.w	80048fa <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	db38      	blt.n	8003fb0 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a9e      	ldr	r2, [pc, #632]	@ (80041bc <HAL_ADC_ConfigChannel+0x2d4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d033      	beq.n	8003fb0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d108      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x7e>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2201      	movs	r2, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	e01d      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0xba>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	e004      	b.n	8003f98 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	69d1      	ldr	r1, [r2, #28]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f7ff fc6b 	bl	8003898 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fd5f 	bl	8003a8a <LL_ADC_REG_IsConversionOngoing>
 8003fcc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fd6b 	bl	8003ab0 <LL_ADC_INJ_IsConversionOngoing>
 8003fda:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 8270 	bne.w	80044c8 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fe8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f040 826b 	bne.w	80044c8 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f7ff fc76 	bl	80038f0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6c      	ldr	r2, [pc, #432]	@ (80041bc <HAL_ADC_ConfigChannel+0x2d4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10d      	bne.n	800402a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	08db      	lsrs	r3, r3, #3
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004028:	e032      	b.n	8004090 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800402a:	4b65      	ldr	r3, [pc, #404]	@ (80041c0 <HAL_ADC_ConfigChannel+0x2d8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004032:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004036:	d10b      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x168>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	e01d      	b.n	800408c <HAL_ADC_ConfigChannel+0x1a4>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x18e>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	089b      	lsrs	r3, r3, #2
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	e00a      	b.n	800408c <HAL_ADC_ConfigChannel+0x1a4>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d048      	beq.n	800412a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6919      	ldr	r1, [r3, #16]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040a8:	f7ff fb04 	bl	80036b4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a42      	ldr	r2, [pc, #264]	@ (80041bc <HAL_ADC_ConfigChannel+0x2d4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d119      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6919      	ldr	r1, [r3, #16]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f7ff fb9c 	bl	8003800 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6919      	ldr	r1, [r3, #16]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x1f8>
 80040da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040de:	e000      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x1fa>
 80040e0:	2300      	movs	r3, #0
 80040e2:	461a      	mov	r2, r3
 80040e4:	f7ff fb6a 	bl	80037bc <LL_ADC_SetOffsetSaturation>
 80040e8:	e1ee      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6919      	ldr	r1, [r3, #16]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d102      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x21a>
 80040fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004100:	e000      	b.n	8004104 <HAL_ADC_ConfigChannel+0x21c>
 8004102:	2300      	movs	r3, #0
 8004104:	461a      	mov	r2, r3
 8004106:	f7ff fb37 	bl	8003778 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6919      	ldr	r1, [r3, #16]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	7e1b      	ldrb	r3, [r3, #24]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d102      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x238>
 800411a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800411e:	e000      	b.n	8004122 <HAL_ADC_ConfigChannel+0x23a>
 8004120:	2300      	movs	r3, #0
 8004122:	461a      	mov	r2, r3
 8004124:	f7ff fb0e 	bl	8003744 <LL_ADC_SetDataRightShift>
 8004128:	e1ce      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a23      	ldr	r2, [pc, #140]	@ (80041bc <HAL_ADC_ConfigChannel+0x2d4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	f040 8181 	bne.w	8004438 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff faeb 	bl	8003718 <LL_ADC_GetOffsetChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x27a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fae0 	bl	8003718 <LL_ADC_GetOffsetChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	0e9b      	lsrs	r3, r3, #26
 800415c:	f003 021f 	and.w	r2, r3, #31
 8004160:	e01e      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x2b8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fad5 	bl	8003718 <LL_ADC_GetOffsetChannel>
 800416e:	4603      	mov	r3, r0
 8004170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004184:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004188:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e004      	b.n	800419e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004194:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x2dc>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0e9b      	lsrs	r3, r3, #26
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	e01e      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x30e>
 80041b8:	47ff0000 	.word	0x47ff0000
 80041bc:	58026000 	.word	0x58026000
 80041c0:	5c001000 	.word	0x5c001000
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80041d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80041e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e004      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80041ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d106      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2200      	movs	r2, #0
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fb1e 	bl	8003844 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fa82 	bl	8003718 <LL_ADC_GetOffsetChannel>
 8004214:	4603      	mov	r3, r0
 8004216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x34c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fa77 	bl	8003718 <LL_ADC_GetOffsetChannel>
 800422a:	4603      	mov	r3, r0
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	e01e      	b.n	8004272 <HAL_ADC_ConfigChannel+0x38a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fa6c 	bl	8003718 <LL_ADC_GetOffsetChannel>
 8004240:	4603      	mov	r3, r0
 8004242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800424a:	fa93 f3a3 	rbit	r3, r3
 800424e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004252:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800425a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8004262:	2320      	movs	r3, #32
 8004264:	e004      	b.n	8004270 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8004266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <HAL_ADC_ConfigChannel+0x3a2>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0e9b      	lsrs	r3, r3, #26
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	e018      	b.n	80042bc <HAL_ADC_ConfigChannel+0x3d4>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800429e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80042a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80042ae:	2320      	movs	r3, #32
 80042b0:	e004      	b.n	80042bc <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80042b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	429a      	cmp	r2, r3
 80042be:	d106      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fabb 	bl	8003844 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff fa1f 	bl	8003718 <LL_ADC_GetOffsetChannel>
 80042da:	4603      	mov	r3, r0
 80042dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x412>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2102      	movs	r1, #2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fa14 	bl	8003718 <LL_ADC_GetOffsetChannel>
 80042f0:	4603      	mov	r3, r0
 80042f2:	0e9b      	lsrs	r3, r3, #26
 80042f4:	f003 021f 	and.w	r2, r3, #31
 80042f8:	e01e      	b.n	8004338 <HAL_ADC_ConfigChannel+0x450>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2102      	movs	r1, #2
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fa09 	bl	8003718 <LL_ADC_GetOffsetChannel>
 8004306:	4603      	mov	r3, r0
 8004308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004318:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800431c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004328:	2320      	movs	r3, #32
 800432a:	e004      	b.n	8004336 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800432c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004330:	fab3 f383 	clz	r3, r3
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x468>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0e9b      	lsrs	r3, r3, #26
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	e014      	b.n	800437a <HAL_ADC_ConfigChannel+0x492>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800435e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004360:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004364:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800436c:	2320      	movs	r3, #32
 800436e:	e004      	b.n	800437a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004370:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	429a      	cmp	r2, r3
 800437c:	d106      	bne.n	800438c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	2102      	movs	r1, #2
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fa5c 	bl	8003844 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2103      	movs	r1, #3
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff f9c0 	bl	8003718 <LL_ADC_GetOffsetChannel>
 8004398:	4603      	mov	r3, r0
 800439a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x4d0>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2103      	movs	r1, #3
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff f9b5 	bl	8003718 <LL_ADC_GetOffsetChannel>
 80043ae:	4603      	mov	r3, r0
 80043b0:	0e9b      	lsrs	r3, r3, #26
 80043b2:	f003 021f 	and.w	r2, r3, #31
 80043b6:	e017      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x500>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2103      	movs	r1, #3
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff f9aa 	bl	8003718 <LL_ADC_GetOffsetChannel>
 80043c4:	4603      	mov	r3, r0
 80043c6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80043d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80043d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80043da:	2320      	movs	r3, #32
 80043dc:	e003      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80043de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e0:	fab3 f383 	clz	r3, r3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d105      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x518>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0e9b      	lsrs	r3, r3, #26
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	e011      	b.n	8004424 <HAL_ADC_ConfigChannel+0x53c>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800440e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004410:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004412:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004418:	2320      	movs	r3, #32
 800441a:	e003      	b.n	8004424 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800441c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	429a      	cmp	r2, r3
 8004426:	d14f      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2200      	movs	r2, #0
 800442e:	2103      	movs	r1, #3
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fa07 	bl	8003844 <LL_ADC_SetOffsetState>
 8004436:	e047      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	069b      	lsls	r3, r3, #26
 8004448:	429a      	cmp	r2, r3
 800444a:	d107      	bne.n	800445c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800445a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004462:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	069b      	lsls	r3, r3, #26
 800446c:	429a      	cmp	r2, r3
 800446e:	d107      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800447e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004486:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	069b      	lsls	r3, r3, #26
 8004490:	429a      	cmp	r2, r3
 8004492:	d107      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044a2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	069b      	lsls	r3, r3, #26
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fac9 	bl	8003a64 <LL_ADC_IsEnabled>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f040 8219 	bne.w	800490c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6819      	ldr	r1, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	461a      	mov	r2, r3
 80044e8:	f7ff fa2e 	bl	8003948 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4aa1      	ldr	r2, [pc, #644]	@ (8004778 <HAL_ADC_ConfigChannel+0x890>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	f040 812e 	bne.w	8004754 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10b      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x638>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	0e9b      	lsrs	r3, r3, #26
 800450e:	3301      	adds	r3, #1
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2b09      	cmp	r3, #9
 8004516:	bf94      	ite	ls
 8004518:	2301      	movls	r3, #1
 800451a:	2300      	movhi	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e019      	b.n	8004554 <HAL_ADC_ConfigChannel+0x66c>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800452e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004530:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004538:	2320      	movs	r3, #32
 800453a:	e003      	b.n	8004544 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800453c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	3301      	adds	r3, #1
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2b09      	cmp	r3, #9
 800454c:	bf94      	ite	ls
 800454e:	2301      	movls	r3, #1
 8004550:	2300      	movhi	r3, #0
 8004552:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004554:	2b00      	cmp	r3, #0
 8004556:	d079      	beq.n	800464c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x68c>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0e9b      	lsrs	r3, r3, #26
 800456a:	3301      	adds	r3, #1
 800456c:	069b      	lsls	r3, r3, #26
 800456e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004572:	e015      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x6b8>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004584:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800458c:	2320      	movs	r3, #32
 800458e:	e003      	b.n	8004598 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	3301      	adds	r3, #1
 800459a:	069b      	lsls	r3, r3, #26
 800459c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x6d8>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0e9b      	lsrs	r3, r3, #26
 80045b2:	3301      	adds	r3, #1
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	e017      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x708>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80045ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80045d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80045d8:	2320      	movs	r3, #32
 80045da:	e003      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80045dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3301      	adds	r3, #1
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2101      	movs	r1, #1
 80045ec:	fa01 f303 	lsl.w	r3, r1, r3
 80045f0:	ea42 0103 	orr.w	r1, r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x72e>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0e9b      	lsrs	r3, r3, #26
 8004606:	3301      	adds	r3, #1
 8004608:	f003 021f 	and.w	r2, r3, #31
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	051b      	lsls	r3, r3, #20
 8004614:	e018      	b.n	8004648 <HAL_ADC_ConfigChannel+0x760>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004626:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800462e:	2320      	movs	r3, #32
 8004630:	e003      	b.n	800463a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	b2db      	uxtb	r3, r3
 800463a:	3301      	adds	r3, #1
 800463c:	f003 021f 	and.w	r2, r3, #31
 8004640:	4613      	mov	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	4413      	add	r3, r2
 8004646:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004648:	430b      	orrs	r3, r1
 800464a:	e07e      	b.n	800474a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004654:	2b00      	cmp	r3, #0
 8004656:	d107      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x780>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	0e9b      	lsrs	r3, r3, #26
 800465e:	3301      	adds	r3, #1
 8004660:	069b      	lsls	r3, r3, #26
 8004662:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004666:	e015      	b.n	8004694 <HAL_ADC_ConfigChannel+0x7ac>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800467a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	e003      	b.n	800468c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3301      	adds	r3, #1
 800468e:	069b      	lsls	r3, r3, #26
 8004690:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x7cc>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0e9b      	lsrs	r3, r3, #26
 80046a6:	3301      	adds	r3, #1
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	e017      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x7fc>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	61bb      	str	r3, [r7, #24]
  return result;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e003      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	ea42 0103 	orr.w	r1, r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10d      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x828>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0e9b      	lsrs	r3, r3, #26
 80046fa:	3301      	adds	r3, #1
 80046fc:	f003 021f 	and.w	r2, r3, #31
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	3b1e      	subs	r3, #30
 8004708:	051b      	lsls	r3, r3, #20
 800470a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800470e:	e01b      	b.n	8004748 <HAL_ADC_ConfigChannel+0x860>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	fa93 f3a3 	rbit	r3, r3
 800471c:	60fb      	str	r3, [r7, #12]
  return result;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004728:	2320      	movs	r3, #32
 800472a:	e003      	b.n	8004734 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	3301      	adds	r3, #1
 8004736:	f003 021f 	and.w	r2, r3, #31
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	3b1e      	subs	r3, #30
 8004742:	051b      	lsls	r3, r3, #20
 8004744:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004748:	430b      	orrs	r3, r1
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	6892      	ldr	r2, [r2, #8]
 800474e:	4619      	mov	r1, r3
 8004750:	f7ff f8ce 	bl	80038f0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f280 80d7 	bge.w	800490c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a06      	ldr	r2, [pc, #24]	@ (800477c <HAL_ADC_ConfigChannel+0x894>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_ADC_ConfigChannel+0x88a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <HAL_ADC_ConfigChannel+0x898>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10a      	bne.n	8004788 <HAL_ADC_ConfigChannel+0x8a0>
 8004772:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <HAL_ADC_ConfigChannel+0x89c>)
 8004774:	e009      	b.n	800478a <HAL_ADC_ConfigChannel+0x8a2>
 8004776:	bf00      	nop
 8004778:	47ff0000 	.word	0x47ff0000
 800477c:	40022000 	.word	0x40022000
 8004780:	40022100 	.word	0x40022100
 8004784:	40022300 	.word	0x40022300
 8004788:	4b65      	ldr	r3, [pc, #404]	@ (8004920 <HAL_ADC_ConfigChannel+0xa38>)
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe ff84 	bl	8003698 <LL_ADC_GetCommonPathInternalCh>
 8004790:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a62      	ldr	r2, [pc, #392]	@ (8004924 <HAL_ADC_ConfigChannel+0xa3c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_ADC_ConfigChannel+0x8c0>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a61      	ldr	r2, [pc, #388]	@ (8004928 <HAL_ADC_ConfigChannel+0xa40>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10e      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x8de>
 80047a8:	485e      	ldr	r0, [pc, #376]	@ (8004924 <HAL_ADC_ConfigChannel+0xa3c>)
 80047aa:	f7ff f95b 	bl	8003a64 <LL_ADC_IsEnabled>
 80047ae:	4604      	mov	r4, r0
 80047b0:	485d      	ldr	r0, [pc, #372]	@ (8004928 <HAL_ADC_ConfigChannel+0xa40>)
 80047b2:	f7ff f957 	bl	8003a64 <LL_ADC_IsEnabled>
 80047b6:	4603      	mov	r3, r0
 80047b8:	4323      	orrs	r3, r4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	e008      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x8f0>
 80047c6:	4859      	ldr	r0, [pc, #356]	@ (800492c <HAL_ADC_ConfigChannel+0xa44>)
 80047c8:	f7ff f94c 	bl	8003a64 <LL_ADC_IsEnabled>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8084 	beq.w	80048e6 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a53      	ldr	r2, [pc, #332]	@ (8004930 <HAL_ADC_ConfigChannel+0xa48>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d132      	bne.n	800484e <HAL_ADC_ConfigChannel+0x966>
 80047e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d12c      	bne.n	800484e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a4c      	ldr	r2, [pc, #304]	@ (800492c <HAL_ADC_ConfigChannel+0xa44>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	f040 8086 	bne.w	800490c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a47      	ldr	r2, [pc, #284]	@ (8004924 <HAL_ADC_ConfigChannel+0xa3c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_ADC_ConfigChannel+0x92c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a46      	ldr	r2, [pc, #280]	@ (8004928 <HAL_ADC_ConfigChannel+0xa40>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x930>
 8004814:	4a47      	ldr	r2, [pc, #284]	@ (8004934 <HAL_ADC_ConfigChannel+0xa4c>)
 8004816:	e000      	b.n	800481a <HAL_ADC_ConfigChannel+0x932>
 8004818:	4a41      	ldr	r2, [pc, #260]	@ (8004920 <HAL_ADC_ConfigChannel+0xa38>)
 800481a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800481e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f7fe ff24 	bl	8003672 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800482a:	4b43      	ldr	r3, [pc, #268]	@ (8004938 <HAL_ADC_ConfigChannel+0xa50>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	4a42      	ldr	r2, [pc, #264]	@ (800493c <HAL_ADC_ConfigChannel+0xa54>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	3301      	adds	r3, #1
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800483e:	e002      	b.n	8004846 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	3b01      	subs	r3, #1
 8004844:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f9      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800484c:	e05e      	b.n	800490c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a3b      	ldr	r2, [pc, #236]	@ (8004940 <HAL_ADC_ConfigChannel+0xa58>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d120      	bne.n	800489a <HAL_ADC_ConfigChannel+0x9b2>
 8004858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800485c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d11a      	bne.n	800489a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a30      	ldr	r2, [pc, #192]	@ (800492c <HAL_ADC_ConfigChannel+0xa44>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d14e      	bne.n	800490c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2c      	ldr	r2, [pc, #176]	@ (8004924 <HAL_ADC_ConfigChannel+0xa3c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_ADC_ConfigChannel+0x99a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2a      	ldr	r2, [pc, #168]	@ (8004928 <HAL_ADC_ConfigChannel+0xa40>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x99e>
 8004882:	4a2c      	ldr	r2, [pc, #176]	@ (8004934 <HAL_ADC_ConfigChannel+0xa4c>)
 8004884:	e000      	b.n	8004888 <HAL_ADC_ConfigChannel+0x9a0>
 8004886:	4a26      	ldr	r2, [pc, #152]	@ (8004920 <HAL_ADC_ConfigChannel+0xa38>)
 8004888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800488c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f7fe feed 	bl	8003672 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004898:	e038      	b.n	800490c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a29      	ldr	r2, [pc, #164]	@ (8004944 <HAL_ADC_ConfigChannel+0xa5c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d133      	bne.n	800490c <HAL_ADC_ConfigChannel+0xa24>
 80048a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d12d      	bne.n	800490c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1d      	ldr	r2, [pc, #116]	@ (800492c <HAL_ADC_ConfigChannel+0xa44>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d128      	bne.n	800490c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a19      	ldr	r2, [pc, #100]	@ (8004924 <HAL_ADC_ConfigChannel+0xa3c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_ADC_ConfigChannel+0x9e6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a17      	ldr	r2, [pc, #92]	@ (8004928 <HAL_ADC_ConfigChannel+0xa40>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x9ea>
 80048ce:	4a19      	ldr	r2, [pc, #100]	@ (8004934 <HAL_ADC_ConfigChannel+0xa4c>)
 80048d0:	e000      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x9ec>
 80048d2:	4a13      	ldr	r2, [pc, #76]	@ (8004920 <HAL_ADC_ConfigChannel+0xa38>)
 80048d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f7fe fec7 	bl	8003672 <LL_ADC_SetCommonPathInternalCh>
 80048e4:	e012      	b.n	800490c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ea:	f043 0220 	orr.w	r2, r3, #32
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80048f8:	e008      	b.n	800490c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004914:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004918:	4618      	mov	r0, r3
 800491a:	37e4      	adds	r7, #228	@ 0xe4
 800491c:	46bd      	mov	sp, r7
 800491e:	bd90      	pop	{r4, r7, pc}
 8004920:	58026300 	.word	0x58026300
 8004924:	40022000 	.word	0x40022000
 8004928:	40022100 	.word	0x40022100
 800492c:	58026000 	.word	0x58026000
 8004930:	c7520000 	.word	0xc7520000
 8004934:	40022300 	.word	0x40022300
 8004938:	24000000 	.word	0x24000000
 800493c:	053e2d63 	.word	0x053e2d63
 8004940:	c3210000 	.word	0xc3210000
 8004944:	cb840000 	.word	0xcb840000

08004948 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a6c      	ldr	r2, [pc, #432]	@ (8004b08 <ADC_ConfigureBoostMode+0x1c0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <ADC_ConfigureBoostMode+0x1c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6b      	ldr	r2, [pc, #428]	@ (8004b0c <ADC_ConfigureBoostMode+0x1c4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d109      	bne.n	8004978 <ADC_ConfigureBoostMode+0x30>
 8004964:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <ADC_ConfigureBoostMode+0x1c8>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e008      	b.n	800498a <ADC_ConfigureBoostMode+0x42>
 8004978:	4b66      	ldr	r3, [pc, #408]	@ (8004b14 <ADC_ConfigureBoostMode+0x1cc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01c      	beq.n	80049c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800498e:	f001 fd67 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 8004992:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800499c:	d010      	beq.n	80049c0 <ADC_ConfigureBoostMode+0x78>
 800499e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049a2:	d873      	bhi.n	8004a8c <ADC_ConfigureBoostMode+0x144>
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a8:	d002      	beq.n	80049b0 <ADC_ConfigureBoostMode+0x68>
 80049aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049ae:	d16d      	bne.n	8004a8c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	60fb      	str	r3, [r7, #12]
        break;
 80049be:	e068      	b.n	8004a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	089b      	lsrs	r3, r3, #2
 80049c4:	60fb      	str	r3, [r7, #12]
        break;
 80049c6:	e064      	b.n	8004a92 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80049c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80049cc:	f04f 0100 	mov.w	r1, #0
 80049d0:	f002 ff42 	bl	8007858 <HAL_RCCEx_GetPeriphCLKFreq>
 80049d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80049de:	d051      	beq.n	8004a84 <ADC_ConfigureBoostMode+0x13c>
 80049e0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80049e4:	d854      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x148>
 80049e6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80049ea:	d047      	beq.n	8004a7c <ADC_ConfigureBoostMode+0x134>
 80049ec:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80049f0:	d84e      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x148>
 80049f2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049f6:	d03d      	beq.n	8004a74 <ADC_ConfigureBoostMode+0x12c>
 80049f8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049fc:	d848      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x148>
 80049fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a02:	d033      	beq.n	8004a6c <ADC_ConfigureBoostMode+0x124>
 8004a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a08:	d842      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x148>
 8004a0a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a0e:	d029      	beq.n	8004a64 <ADC_ConfigureBoostMode+0x11c>
 8004a10:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a14:	d83c      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x148>
 8004a16:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a1a:	d01a      	beq.n	8004a52 <ADC_ConfigureBoostMode+0x10a>
 8004a1c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a20:	d836      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x148>
 8004a22:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a26:	d014      	beq.n	8004a52 <ADC_ConfigureBoostMode+0x10a>
 8004a28:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a2c:	d830      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x148>
 8004a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a32:	d00e      	beq.n	8004a52 <ADC_ConfigureBoostMode+0x10a>
 8004a34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a38:	d82a      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x148>
 8004a3a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a3e:	d008      	beq.n	8004a52 <ADC_ConfigureBoostMode+0x10a>
 8004a40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a44:	d824      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x148>
 8004a46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a4a:	d002      	beq.n	8004a52 <ADC_ConfigureBoostMode+0x10a>
 8004a4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a50:	d11e      	bne.n	8004a90 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	0c9b      	lsrs	r3, r3, #18
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	60fb      	str	r3, [r7, #12]
        break;
 8004a62:	e016      	b.n	8004a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	60fb      	str	r3, [r7, #12]
        break;
 8004a6a:	e012      	b.n	8004a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	60fb      	str	r3, [r7, #12]
        break;
 8004a72:	e00e      	b.n	8004a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	60fb      	str	r3, [r7, #12]
        break;
 8004a7a:	e00a      	b.n	8004a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	09db      	lsrs	r3, r3, #7
 8004a80:	60fb      	str	r3, [r7, #12]
        break;
 8004a82:	e006      	b.n	8004a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	60fb      	str	r3, [r7, #12]
        break;
 8004a8a:	e002      	b.n	8004a92 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a90:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004b18 <ADC_ConfigureBoostMode+0x1d0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d808      	bhi.n	8004ab2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004aae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ab0:	e025      	b.n	8004afe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a19      	ldr	r2, [pc, #100]	@ (8004b1c <ADC_ConfigureBoostMode+0x1d4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d80a      	bhi.n	8004ad0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004acc:	609a      	str	r2, [r3, #8]
}
 8004ace:	e016      	b.n	8004afe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a13      	ldr	r2, [pc, #76]	@ (8004b20 <ADC_ConfigureBoostMode+0x1d8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d80a      	bhi.n	8004aee <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aea:	609a      	str	r2, [r3, #8]
}
 8004aec:	e007      	b.n	8004afe <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004afc:	609a      	str	r2, [r3, #8]
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40022000 	.word	0x40022000
 8004b0c:	40022100 	.word	0x40022100
 8004b10:	40022300 	.word	0x40022300
 8004b14:	58026300 	.word	0x58026300
 8004b18:	005f5e10 	.word	0x005f5e10
 8004b1c:	00bebc20 	.word	0x00bebc20
 8004b20:	017d7840 	.word	0x017d7840

08004b24 <LL_ADC_IsEnabled>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <LL_ADC_IsEnabled+0x18>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <LL_ADC_IsEnabled+0x1a>
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d101      	bne.n	8004b62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b0a3      	sub	sp, #140	@ 0x8c
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0c1      	b.n	8004d12 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d102      	bne.n	8004bae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ba8:	4b5d      	ldr	r3, [pc, #372]	@ (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e001      	b.n	8004bb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0a0      	b.n	8004d12 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ffb9 	bl	8004b4a <LL_ADC_REG_IsConversionOngoing>
 8004bd8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ffb2 	bl	8004b4a <LL_ADC_REG_IsConversionOngoing>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 8081 	bne.w	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d17c      	bne.n	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a48      	ldr	r2, [pc, #288]	@ (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a46      	ldr	r2, [pc, #280]	@ (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c0a:	4b46      	ldr	r3, [pc, #280]	@ (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c0c:	e000      	b.n	8004c10 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c0e:	4b46      	ldr	r3, [pc, #280]	@ (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c10:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d039      	beq.n	8004c8e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a3a      	ldr	r2, [pc, #232]	@ (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a39      	ldr	r2, [pc, #228]	@ (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10e      	bne.n	8004c5e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c40:	4836      	ldr	r0, [pc, #216]	@ (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c42:	f7ff ff6f 	bl	8004b24 <LL_ADC_IsEnabled>
 8004c46:	4604      	mov	r4, r0
 8004c48:	4835      	ldr	r0, [pc, #212]	@ (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c4a:	f7ff ff6b 	bl	8004b24 <LL_ADC_IsEnabled>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4323      	orrs	r3, r4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bf0c      	ite	eq
 8004c56:	2301      	moveq	r3, #1
 8004c58:	2300      	movne	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	e008      	b.n	8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004c5e:	4833      	ldr	r0, [pc, #204]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004c60:	f7ff ff60 	bl	8004b24 <LL_ADC_IsEnabled>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf0c      	ite	eq
 8004c6a:	2301      	moveq	r3, #1
 8004c6c:	2300      	movne	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d047      	beq.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	4b2d      	ldr	r3, [pc, #180]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	6811      	ldr	r1, [r2, #0]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	6892      	ldr	r2, [r2, #8]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	431a      	orrs	r2, r3
 8004c88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c8a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c8c:	e03a      	b.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004c8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10e      	bne.n	8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004cae:	481b      	ldr	r0, [pc, #108]	@ (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cb0:	f7ff ff38 	bl	8004b24 <LL_ADC_IsEnabled>
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	481a      	ldr	r0, [pc, #104]	@ (8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cb8:	f7ff ff34 	bl	8004b24 <LL_ADC_IsEnabled>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4323      	orrs	r3, r4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e008      	b.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ccc:	4817      	ldr	r0, [pc, #92]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004cce:	f7ff ff29 	bl	8004b24 <LL_ADC_IsEnabled>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d010      	beq.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ce2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	4b12      	ldr	r3, [pc, #72]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004cec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cee:	e009      	b.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004d02:	e000      	b.n	8004d06 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	378c      	adds	r7, #140	@ 0x8c
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40022000 	.word	0x40022000
 8004d20:	40022100 	.word	0x40022100
 8004d24:	40022300 	.word	0x40022300
 8004d28:	58026300 	.word	0x58026300
 8004d2c:	58026000 	.word	0x58026000
 8004d30:	fffff0e0 	.word	0xfffff0e0

08004d34 <__NVIC_SetPriorityGrouping>:
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d44:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <__NVIC_SetPriorityGrouping+0x40>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d50:	4013      	ands	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <__NVIC_SetPriorityGrouping+0x44>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d62:	4a04      	ldr	r2, [pc, #16]	@ (8004d74 <__NVIC_SetPriorityGrouping+0x40>)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	60d3      	str	r3, [r2, #12]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000ed00 	.word	0xe000ed00
 8004d78:	05fa0000 	.word	0x05fa0000

08004d7c <__NVIC_GetPriorityGrouping>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d80:	4b04      	ldr	r3, [pc, #16]	@ (8004d94 <__NVIC_GetPriorityGrouping+0x18>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	f003 0307 	and.w	r3, r3, #7
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	e000ed00 	.word	0xe000ed00

08004d98 <__NVIC_SetPriority>:
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db0a      	blt.n	8004dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	490c      	ldr	r1, [pc, #48]	@ (8004de4 <__NVIC_SetPriority+0x4c>)
 8004db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004db6:	0112      	lsls	r2, r2, #4
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	440b      	add	r3, r1
 8004dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004dc0:	e00a      	b.n	8004dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4908      	ldr	r1, [pc, #32]	@ (8004de8 <__NVIC_SetPriority+0x50>)
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	3b04      	subs	r3, #4
 8004dd0:	0112      	lsls	r2, r2, #4
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	761a      	strb	r2, [r3, #24]
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	e000e100 	.word	0xe000e100
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <NVIC_EncodePriority>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	b089      	sub	sp, #36	@ 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f1c3 0307 	rsb	r3, r3, #7
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	bf28      	it	cs
 8004e0a:	2304      	movcs	r3, #4
 8004e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3304      	adds	r3, #4
 8004e12:	2b06      	cmp	r3, #6
 8004e14:	d902      	bls.n	8004e1c <NVIC_EncodePriority+0x30>
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3b03      	subs	r3, #3
 8004e1a:	e000      	b.n	8004e1e <NVIC_EncodePriority+0x32>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	401a      	ands	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e34:	f04f 31ff 	mov.w	r1, #4294967295
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	43d9      	mvns	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e44:	4313      	orrs	r3, r2
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3724      	adds	r7, #36	@ 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <SysTick_Config>:
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e64:	d301      	bcc.n	8004e6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004e66:	2301      	movs	r3, #1
 8004e68:	e00f      	b.n	8004e8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e94 <SysTick_Config+0x40>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e72:	210f      	movs	r1, #15
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	f7ff ff8e 	bl	8004d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <SysTick_Config+0x40>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e82:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <SysTick_Config+0x40>)
 8004e84:	2207      	movs	r2, #7
 8004e86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	e000e010 	.word	0xe000e010

08004e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff ff47 	bl	8004d34 <__NVIC_SetPriorityGrouping>
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ebc:	f7ff ff5e 	bl	8004d7c <__NVIC_GetPriorityGrouping>
 8004ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	6978      	ldr	r0, [r7, #20]
 8004ec8:	f7ff ff90 	bl	8004dec <NVIC_EncodePriority>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff ff5f 	bl	8004d98 <__NVIC_SetPriority>
}
 8004eda:	bf00      	nop
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ffb2 	bl	8004e54 <SysTick_Config>
 8004ef0:	4603      	mov	r3, r0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004f00:	f3bf 8f5f 	dmb	sy
}
 8004f04:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004f06:	4b07      	ldr	r3, [pc, #28]	@ (8004f24 <HAL_MPU_Disable+0x28>)
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	4a06      	ldr	r2, [pc, #24]	@ (8004f24 <HAL_MPU_Disable+0x28>)
 8004f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f10:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004f12:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <HAL_MPU_Disable+0x2c>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	605a      	str	r2, [r3, #4]
}
 8004f18:	bf00      	nop
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	e000ed00 	.word	0xe000ed00
 8004f28:	e000ed90 	.word	0xe000ed90

08004f2c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004f34:	4a0b      	ldr	r2, [pc, #44]	@ (8004f64 <HAL_MPU_Enable+0x38>)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <HAL_MPU_Enable+0x3c>)
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_MPU_Enable+0x3c>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004f4a:	f3bf 8f4f 	dsb	sy
}
 8004f4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f50:	f3bf 8f6f 	isb	sy
}
 8004f54:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	e000ed90 	.word	0xe000ed90
 8004f68:	e000ed00 	.word	0xe000ed00

08004f6c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	785a      	ldrb	r2, [r3, #1]
 8004f78:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8004f7a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	4a19      	ldr	r2, [pc, #100]	@ (8004fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004f88:	4a17      	ldr	r2, [pc, #92]	@ (8004fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	7b1b      	ldrb	r3, [r3, #12]
 8004f94:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7adb      	ldrb	r3, [r3, #11]
 8004f9a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	7a9b      	ldrb	r3, [r3, #10]
 8004fa2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004fa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	7b5b      	ldrb	r3, [r3, #13]
 8004faa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004fac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	7b9b      	ldrb	r3, [r3, #14]
 8004fb2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	7bdb      	ldrb	r3, [r3, #15]
 8004fba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004fbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	7a5b      	ldrb	r3, [r3, #9]
 8004fc2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	7a1b      	ldrb	r3, [r3, #8]
 8004fca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fcc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fd4:	4a04      	ldr	r2, [pc, #16]	@ (8004fe8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004fd6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fd8:	6113      	str	r3, [r2, #16]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	e000ed90 	.word	0xe000ed90

08004fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b089      	sub	sp, #36	@ 0x24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ffa:	4b86      	ldr	r3, [pc, #536]	@ (8005214 <HAL_GPIO_Init+0x228>)
 8004ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ffe:	e18c      	b.n	800531a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	2101      	movs	r1, #1
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	4013      	ands	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 817e 	beq.w	8005314 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	2b01      	cmp	r3, #1
 8005022:	d005      	beq.n	8005030 <HAL_GPIO_Init+0x44>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d130      	bne.n	8005092 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	2203      	movs	r2, #3
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005066:	2201      	movs	r2, #1
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 0201 	and.w	r2, r3, #1
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4313      	orrs	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b03      	cmp	r3, #3
 800509c:	d017      	beq.n	80050ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	2203      	movs	r2, #3
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43db      	mvns	r3, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4013      	ands	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d123      	bne.n	8005122 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	08da      	lsrs	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3208      	adds	r2, #8
 80050e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	220f      	movs	r2, #15
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4313      	orrs	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	08da      	lsrs	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3208      	adds	r2, #8
 800511c:	69b9      	ldr	r1, [r7, #24]
 800511e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	2203      	movs	r2, #3
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0203 	and.w	r2, r3, #3
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80d8 	beq.w	8005314 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005164:	4b2c      	ldr	r3, [pc, #176]	@ (8005218 <HAL_GPIO_Init+0x22c>)
 8005166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800516a:	4a2b      	ldr	r2, [pc, #172]	@ (8005218 <HAL_GPIO_Init+0x22c>)
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005174:	4b28      	ldr	r3, [pc, #160]	@ (8005218 <HAL_GPIO_Init+0x22c>)
 8005176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005182:	4a26      	ldr	r2, [pc, #152]	@ (800521c <HAL_GPIO_Init+0x230>)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	3302      	adds	r3, #2
 800518a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	220f      	movs	r2, #15
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <HAL_GPIO_Init+0x234>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d04a      	beq.n	8005244 <HAL_GPIO_Init+0x258>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <HAL_GPIO_Init+0x238>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d02b      	beq.n	800520e <HAL_GPIO_Init+0x222>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005228 <HAL_GPIO_Init+0x23c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d025      	beq.n	800520a <HAL_GPIO_Init+0x21e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1a      	ldr	r2, [pc, #104]	@ (800522c <HAL_GPIO_Init+0x240>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01f      	beq.n	8005206 <HAL_GPIO_Init+0x21a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a19      	ldr	r2, [pc, #100]	@ (8005230 <HAL_GPIO_Init+0x244>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d019      	beq.n	8005202 <HAL_GPIO_Init+0x216>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a18      	ldr	r2, [pc, #96]	@ (8005234 <HAL_GPIO_Init+0x248>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <HAL_GPIO_Init+0x212>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a17      	ldr	r2, [pc, #92]	@ (8005238 <HAL_GPIO_Init+0x24c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00d      	beq.n	80051fa <HAL_GPIO_Init+0x20e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a16      	ldr	r2, [pc, #88]	@ (800523c <HAL_GPIO_Init+0x250>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <HAL_GPIO_Init+0x20a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <HAL_GPIO_Init+0x254>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d101      	bne.n	80051f2 <HAL_GPIO_Init+0x206>
 80051ee:	2309      	movs	r3, #9
 80051f0:	e029      	b.n	8005246 <HAL_GPIO_Init+0x25a>
 80051f2:	230a      	movs	r3, #10
 80051f4:	e027      	b.n	8005246 <HAL_GPIO_Init+0x25a>
 80051f6:	2307      	movs	r3, #7
 80051f8:	e025      	b.n	8005246 <HAL_GPIO_Init+0x25a>
 80051fa:	2306      	movs	r3, #6
 80051fc:	e023      	b.n	8005246 <HAL_GPIO_Init+0x25a>
 80051fe:	2305      	movs	r3, #5
 8005200:	e021      	b.n	8005246 <HAL_GPIO_Init+0x25a>
 8005202:	2304      	movs	r3, #4
 8005204:	e01f      	b.n	8005246 <HAL_GPIO_Init+0x25a>
 8005206:	2303      	movs	r3, #3
 8005208:	e01d      	b.n	8005246 <HAL_GPIO_Init+0x25a>
 800520a:	2302      	movs	r3, #2
 800520c:	e01b      	b.n	8005246 <HAL_GPIO_Init+0x25a>
 800520e:	2301      	movs	r3, #1
 8005210:	e019      	b.n	8005246 <HAL_GPIO_Init+0x25a>
 8005212:	bf00      	nop
 8005214:	58000080 	.word	0x58000080
 8005218:	58024400 	.word	0x58024400
 800521c:	58000400 	.word	0x58000400
 8005220:	58020000 	.word	0x58020000
 8005224:	58020400 	.word	0x58020400
 8005228:	58020800 	.word	0x58020800
 800522c:	58020c00 	.word	0x58020c00
 8005230:	58021000 	.word	0x58021000
 8005234:	58021400 	.word	0x58021400
 8005238:	58021800 	.word	0x58021800
 800523c:	58021c00 	.word	0x58021c00
 8005240:	58022400 	.word	0x58022400
 8005244:	2300      	movs	r3, #0
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	f002 0203 	and.w	r2, r2, #3
 800524c:	0092      	lsls	r2, r2, #2
 800524e:	4093      	lsls	r3, r2
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4313      	orrs	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005256:	4938      	ldr	r1, [pc, #224]	@ (8005338 <HAL_GPIO_Init+0x34c>)
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	3302      	adds	r3, #2
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	43db      	mvns	r3, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4013      	ands	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800528a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	43db      	mvns	r3, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4013      	ands	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80052b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	43db      	mvns	r3, r3
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	4013      	ands	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4013      	ands	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3301      	adds	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	f47f ae6b 	bne.w	8005000 <HAL_GPIO_Init+0x14>
  }
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	3724      	adds	r7, #36	@ 0x24
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	58000400 	.word	0x58000400

0800533c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	807b      	strh	r3, [r7, #2]
 8005348:	4613      	mov	r3, r2
 800534a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800534c:	787b      	ldrb	r3, [r7, #1]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005352:	887a      	ldrh	r2, [r7, #2]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005358:	e003      	b.n	8005362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800535a:	887b      	ldrh	r3, [r7, #2]
 800535c:	041a      	lsls	r2, r3, #16
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	619a      	str	r2, [r3, #24]
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e08b      	b.n	800549a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc ff4a 	bl	8002230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2224      	movs	r2, #36	@ 0x24
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0201 	bic.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	e006      	b.n	80053f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80053f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d108      	bne.n	8005412 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	e007      	b.n	8005422 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005420:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b1d      	ldr	r3, [pc, #116]	@ (80054a4 <HAL_I2C_Init+0x134>)
 800542e:	430b      	orrs	r3, r1
 8005430:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005440:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69d9      	ldr	r1, [r3, #28]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	02008000 	.word	0x02008000

080054a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d138      	bne.n	8005530 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e032      	b.n	8005532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2224      	movs	r2, #36	@ 0x24
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6819      	ldr	r1, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	e000      	b.n	8005532 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005530:	2302      	movs	r3, #2
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b20      	cmp	r3, #32
 8005552:	d139      	bne.n	80055c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800555e:	2302      	movs	r3, #2
 8005560:	e033      	b.n	80055ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2224      	movs	r2, #36	@ 0x24
 800556e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005590:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e000      	b.n	80055ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80055e0:	4b19      	ldr	r3, [pc, #100]	@ (8005648 <HAL_PWREx_ConfigSupply+0x70>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d00a      	beq.n	8005602 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055ec:	4b16      	ldr	r3, [pc, #88]	@ (8005648 <HAL_PWREx_ConfigSupply+0x70>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d001      	beq.n	80055fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e01f      	b.n	800563e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	e01d      	b.n	800563e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005602:	4b11      	ldr	r3, [pc, #68]	@ (8005648 <HAL_PWREx_ConfigSupply+0x70>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f023 0207 	bic.w	r2, r3, #7
 800560a:	490f      	ldr	r1, [pc, #60]	@ (8005648 <HAL_PWREx_ConfigSupply+0x70>)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4313      	orrs	r3, r2
 8005610:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005612:	f7fd ffeb 	bl	80035ec <HAL_GetTick>
 8005616:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005618:	e009      	b.n	800562e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800561a:	f7fd ffe7 	bl	80035ec <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005628:	d901      	bls.n	800562e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e007      	b.n	800563e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800562e:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <HAL_PWREx_ConfigSupply+0x70>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800563a:	d1ee      	bne.n	800561a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	58024800 	.word	0x58024800

0800564c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08c      	sub	sp, #48	@ 0x30
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e3c8      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8087 	beq.w	800577a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800566c:	4b88      	ldr	r3, [pc, #544]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005676:	4b86      	ldr	r3, [pc, #536]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567e:	2b10      	cmp	r3, #16
 8005680:	d007      	beq.n	8005692 <HAL_RCC_OscConfig+0x46>
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	2b18      	cmp	r3, #24
 8005686:	d110      	bne.n	80056aa <HAL_RCC_OscConfig+0x5e>
 8005688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d10b      	bne.n	80056aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005692:	4b7f      	ldr	r3, [pc, #508]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d06c      	beq.n	8005778 <HAL_RCC_OscConfig+0x12c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d168      	bne.n	8005778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e3a2      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b2:	d106      	bne.n	80056c2 <HAL_RCC_OscConfig+0x76>
 80056b4:	4b76      	ldr	r3, [pc, #472]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a75      	ldr	r2, [pc, #468]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80056ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e02e      	b.n	8005720 <HAL_RCC_OscConfig+0xd4>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x98>
 80056ca:	4b71      	ldr	r3, [pc, #452]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a70      	ldr	r2, [pc, #448]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80056d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	4b6e      	ldr	r3, [pc, #440]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a6d      	ldr	r2, [pc, #436]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80056dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e01d      	b.n	8005720 <HAL_RCC_OscConfig+0xd4>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0xbc>
 80056ee:	4b68      	ldr	r3, [pc, #416]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a67      	ldr	r2, [pc, #412]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80056f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4b65      	ldr	r3, [pc, #404]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a64      	ldr	r2, [pc, #400]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e00b      	b.n	8005720 <HAL_RCC_OscConfig+0xd4>
 8005708:	4b61      	ldr	r3, [pc, #388]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a60      	ldr	r2, [pc, #384]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800570e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	4b5e      	ldr	r3, [pc, #376]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a5d      	ldr	r2, [pc, #372]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800571a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800571e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fd ff60 	bl	80035ec <HAL_GetTick>
 800572c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005730:	f7fd ff5c 	bl	80035ec <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	@ 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e356      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005742:	4b53      	ldr	r3, [pc, #332]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0xe4>
 800574e:	e014      	b.n	800577a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fd ff4c 	bl	80035ec <HAL_GetTick>
 8005754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005758:	f7fd ff48 	bl	80035ec <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b64      	cmp	r3, #100	@ 0x64
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e342      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800576a:	4b49      	ldr	r3, [pc, #292]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x10c>
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 808c 	beq.w	80058a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005788:	4b41      	ldr	r3, [pc, #260]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005790:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005792:	4b3f      	ldr	r3, [pc, #252]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_RCC_OscConfig+0x162>
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	2b18      	cmp	r3, #24
 80057a2:	d137      	bne.n	8005814 <HAL_RCC_OscConfig+0x1c8>
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d132      	bne.n	8005814 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ae:	4b38      	ldr	r3, [pc, #224]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_RCC_OscConfig+0x17a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e314      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057c6:	4b32      	ldr	r3, [pc, #200]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f023 0219 	bic.w	r2, r3, #25
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	492f      	ldr	r1, [pc, #188]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fd ff08 	bl	80035ec <HAL_GetTick>
 80057dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e0:	f7fd ff04 	bl	80035ec <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e2fe      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057f2:	4b27      	ldr	r3, [pc, #156]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f0      	beq.n	80057e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fe:	4b24      	ldr	r3, [pc, #144]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	061b      	lsls	r3, r3, #24
 800580c:	4920      	ldr	r1, [pc, #128]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800580e:	4313      	orrs	r3, r2
 8005810:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005812:	e045      	b.n	80058a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d026      	beq.n	800586a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800581c:	4b1c      	ldr	r3, [pc, #112]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f023 0219 	bic.w	r2, r3, #25
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	4919      	ldr	r1, [pc, #100]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800582a:	4313      	orrs	r3, r2
 800582c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fd fedd 	bl	80035ec <HAL_GetTick>
 8005832:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005836:	f7fd fed9 	bl	80035ec <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e2d3      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005848:	4b11      	ldr	r3, [pc, #68]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005854:	4b0e      	ldr	r3, [pc, #56]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	061b      	lsls	r3, r3, #24
 8005862:	490b      	ldr	r1, [pc, #44]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005864:	4313      	orrs	r3, r2
 8005866:	604b      	str	r3, [r1, #4]
 8005868:	e01a      	b.n	80058a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800586a:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a08      	ldr	r2, [pc, #32]	@ (8005890 <HAL_RCC_OscConfig+0x244>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005876:	f7fd feb9 	bl	80035ec <HAL_GetTick>
 800587a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800587c:	e00a      	b.n	8005894 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587e:	f7fd feb5 	bl	80035ec <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d903      	bls.n	8005894 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e2af      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
 8005890:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005894:	4b96      	ldr	r3, [pc, #600]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1ee      	bne.n	800587e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d06a      	beq.n	8005982 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ac:	4b90      	ldr	r3, [pc, #576]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058b6:	4b8e      	ldr	r3, [pc, #568]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 80058b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d007      	beq.n	80058d2 <HAL_RCC_OscConfig+0x286>
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b18      	cmp	r3, #24
 80058c6:	d11b      	bne.n	8005900 <HAL_RCC_OscConfig+0x2b4>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d116      	bne.n	8005900 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058d2:	4b87      	ldr	r3, [pc, #540]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <HAL_RCC_OscConfig+0x29e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	2b80      	cmp	r3, #128	@ 0x80
 80058e4:	d001      	beq.n	80058ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e282      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058ea:	4b81      	ldr	r3, [pc, #516]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	061b      	lsls	r3, r3, #24
 80058f8:	497d      	ldr	r1, [pc, #500]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058fe:	e040      	b.n	8005982 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d023      	beq.n	8005950 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005908:	4b79      	ldr	r3, [pc, #484]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a78      	ldr	r2, [pc, #480]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 800590e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fd fe6a 	bl	80035ec <HAL_GetTick>
 8005918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800591c:	f7fd fe66 	bl	80035ec <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e260      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800592e:	4b70      	ldr	r3, [pc, #448]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800593a:	4b6d      	ldr	r3, [pc, #436]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	061b      	lsls	r3, r3, #24
 8005948:	4969      	ldr	r1, [pc, #420]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	60cb      	str	r3, [r1, #12]
 800594e:	e018      	b.n	8005982 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005950:	4b67      	ldr	r3, [pc, #412]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a66      	ldr	r2, [pc, #408]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800595a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fd fe46 	bl	80035ec <HAL_GetTick>
 8005960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005964:	f7fd fe42 	bl	80035ec <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e23c      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005976:	4b5e      	ldr	r3, [pc, #376]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d036      	beq.n	80059fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d019      	beq.n	80059ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005996:	4b56      	ldr	r3, [pc, #344]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599a:	4a55      	ldr	r2, [pc, #340]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a2:	f7fd fe23 	bl	80035ec <HAL_GetTick>
 80059a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059aa:	f7fd fe1f 	bl	80035ec <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e219      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059bc:	4b4c      	ldr	r3, [pc, #304]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 80059be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_RCC_OscConfig+0x35e>
 80059c8:	e018      	b.n	80059fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ca:	4b49      	ldr	r3, [pc, #292]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 80059cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ce:	4a48      	ldr	r2, [pc, #288]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d6:	f7fd fe09 	bl	80035ec <HAL_GetTick>
 80059da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059de:	f7fd fe05 	bl	80035ec <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e1ff      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059f0:	4b3f      	ldr	r3, [pc, #252]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 80059f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f0      	bne.n	80059de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d036      	beq.n	8005a76 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d019      	beq.n	8005a44 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a10:	4b37      	ldr	r3, [pc, #220]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a36      	ldr	r2, [pc, #216]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005a16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a1c:	f7fd fde6 	bl	80035ec <HAL_GetTick>
 8005a20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a24:	f7fd fde2 	bl	80035ec <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e1dc      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a36:	4b2e      	ldr	r3, [pc, #184]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCC_OscConfig+0x3d8>
 8005a42:	e018      	b.n	8005a76 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a44:	4b2a      	ldr	r3, [pc, #168]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a29      	ldr	r2, [pc, #164]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005a4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a50:	f7fd fdcc 	bl	80035ec <HAL_GetTick>
 8005a54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a58:	f7fd fdc8 	bl	80035ec <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e1c2      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a6a:	4b21      	ldr	r3, [pc, #132]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f0      	bne.n	8005a58 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8086 	beq.w	8005b90 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a84:	4b1b      	ldr	r3, [pc, #108]	@ (8005af4 <HAL_RCC_OscConfig+0x4a8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1a      	ldr	r2, [pc, #104]	@ (8005af4 <HAL_RCC_OscConfig+0x4a8>)
 8005a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a90:	f7fd fdac 	bl	80035ec <HAL_GetTick>
 8005a94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a98:	f7fd fda8 	bl	80035ec <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b64      	cmp	r3, #100	@ 0x64
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e1a2      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aaa:	4b12      	ldr	r3, [pc, #72]	@ (8005af4 <HAL_RCC_OscConfig+0x4a8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0f0      	beq.n	8005a98 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d106      	bne.n	8005acc <HAL_RCC_OscConfig+0x480>
 8005abe:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aca:	e032      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d111      	bne.n	8005af8 <HAL_RCC_OscConfig+0x4ac>
 8005ad4:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad8:	4a05      	ldr	r2, [pc, #20]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae0:	4b03      	ldr	r3, [pc, #12]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae4:	4a02      	ldr	r2, [pc, #8]	@ (8005af0 <HAL_RCC_OscConfig+0x4a4>)
 8005ae6:	f023 0304 	bic.w	r3, r3, #4
 8005aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aec:	e021      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e6>
 8005aee:	bf00      	nop
 8005af0:	58024400 	.word	0x58024400
 8005af4:	58024800 	.word	0x58024800
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b05      	cmp	r3, #5
 8005afe:	d10c      	bne.n	8005b1a <HAL_RCC_OscConfig+0x4ce>
 8005b00:	4b83      	ldr	r3, [pc, #524]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b04:	4a82      	ldr	r2, [pc, #520]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b06:	f043 0304 	orr.w	r3, r3, #4
 8005b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b0c:	4b80      	ldr	r3, [pc, #512]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b10:	4a7f      	ldr	r2, [pc, #508]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b18:	e00b      	b.n	8005b32 <HAL_RCC_OscConfig+0x4e6>
 8005b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b26:	4b7a      	ldr	r3, [pc, #488]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	4a79      	ldr	r2, [pc, #484]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d015      	beq.n	8005b66 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3a:	f7fd fd57 	bl	80035ec <HAL_GetTick>
 8005b3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b40:	e00a      	b.n	8005b58 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fd fd53 	bl	80035ec <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e14b      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b58:	4b6d      	ldr	r3, [pc, #436]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0ee      	beq.n	8005b42 <HAL_RCC_OscConfig+0x4f6>
 8005b64:	e014      	b.n	8005b90 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b66:	f7fd fd41 	bl	80035ec <HAL_GetTick>
 8005b6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fd fd3d 	bl	80035ec <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e135      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b84:	4b62      	ldr	r3, [pc, #392]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1ee      	bne.n	8005b6e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 812a 	beq.w	8005dee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ba2:	2b18      	cmp	r3, #24
 8005ba4:	f000 80ba 	beq.w	8005d1c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	f040 8095 	bne.w	8005cdc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb2:	4b57      	ldr	r3, [pc, #348]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a56      	ldr	r2, [pc, #344]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005bb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fd fd15 	bl	80035ec <HAL_GetTick>
 8005bc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fd fd11 	bl	80035ec <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e10b      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1f0      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005be4:	4b4a      	ldr	r3, [pc, #296]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005be6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005be8:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <HAL_RCC_OscConfig+0x6c8>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005bf4:	0112      	lsls	r2, r2, #4
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	4945      	ldr	r1, [pc, #276]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	628b      	str	r3, [r1, #40]	@ 0x28
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c02:	3b01      	subs	r3, #1
 8005c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	025b      	lsls	r3, r3, #9
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	041b      	lsls	r3, r3, #16
 8005c1c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c26:	3b01      	subs	r3, #1
 8005c28:	061b      	lsls	r3, r3, #24
 8005c2a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c2e:	4938      	ldr	r1, [pc, #224]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c34:	4b36      	ldr	r3, [pc, #216]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	4a35      	ldr	r2, [pc, #212]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c40:	4b33      	ldr	r3, [pc, #204]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c44:	4b34      	ldr	r3, [pc, #208]	@ (8005d18 <HAL_RCC_OscConfig+0x6cc>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005c4c:	00d2      	lsls	r2, r2, #3
 8005c4e:	4930      	ldr	r1, [pc, #192]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c54:	4b2e      	ldr	r3, [pc, #184]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	f023 020c 	bic.w	r2, r3, #12
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	492b      	ldr	r1, [pc, #172]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c66:	4b2a      	ldr	r3, [pc, #168]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	f023 0202 	bic.w	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c72:	4927      	ldr	r1, [pc, #156]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c78:	4b25      	ldr	r3, [pc, #148]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7c:	4a24      	ldr	r2, [pc, #144]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c84:	4b22      	ldr	r3, [pc, #136]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c88:	4a21      	ldr	r2, [pc, #132]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c90:	4b1f      	ldr	r3, [pc, #124]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	4a1e      	ldr	r2, [pc, #120]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ca8:	4b19      	ldr	r3, [pc, #100]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fd fc9a 	bl	80035ec <HAL_GetTick>
 8005cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fd fc96 	bl	80035ec <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e090      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cce:	4b10      	ldr	r3, [pc, #64]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f0      	beq.n	8005cbc <HAL_RCC_OscConfig+0x670>
 8005cda:	e088      	b.n	8005dee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fc80 	bl	80035ec <HAL_GetTick>
 8005cec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf0:	f7fd fc7c 	bl	80035ec <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e076      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d02:	4b03      	ldr	r3, [pc, #12]	@ (8005d10 <HAL_RCC_OscConfig+0x6c4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x6a4>
 8005d0e:	e06e      	b.n	8005dee <HAL_RCC_OscConfig+0x7a2>
 8005d10:	58024400 	.word	0x58024400
 8005d14:	fffffc0c 	.word	0xfffffc0c
 8005d18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d1c:	4b36      	ldr	r3, [pc, #216]	@ (8005df8 <HAL_RCC_OscConfig+0x7ac>)
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d22:	4b35      	ldr	r3, [pc, #212]	@ (8005df8 <HAL_RCC_OscConfig+0x7ac>)
 8005d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d031      	beq.n	8005d94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f003 0203 	and.w	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d12a      	bne.n	8005d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d122      	bne.n	8005d94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d11a      	bne.n	8005d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	0a5b      	lsrs	r3, r3, #9
 8005d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d111      	bne.n	8005d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d108      	bne.n	8005d94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	0e1b      	lsrs	r3, r3, #24
 8005d86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e02b      	b.n	8005df0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005d98:	4b17      	ldr	r3, [pc, #92]	@ (8005df8 <HAL_RCC_OscConfig+0x7ac>)
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9c:	08db      	lsrs	r3, r3, #3
 8005d9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005da2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d01f      	beq.n	8005dee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005dae:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <HAL_RCC_OscConfig+0x7ac>)
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	4a11      	ldr	r2, [pc, #68]	@ (8005df8 <HAL_RCC_OscConfig+0x7ac>)
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005dba:	f7fd fc17 	bl	80035ec <HAL_GetTick>
 8005dbe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005dc0:	bf00      	nop
 8005dc2:	f7fd fc13 	bl	80035ec <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d0f9      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005dce:	4b0a      	ldr	r3, [pc, #40]	@ (8005df8 <HAL_RCC_OscConfig+0x7ac>)
 8005dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <HAL_RCC_OscConfig+0x7b0>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005dda:	00d2      	lsls	r2, r2, #3
 8005ddc:	4906      	ldr	r1, [pc, #24]	@ (8005df8 <HAL_RCC_OscConfig+0x7ac>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005de2:	4b05      	ldr	r3, [pc, #20]	@ (8005df8 <HAL_RCC_OscConfig+0x7ac>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	4a04      	ldr	r2, [pc, #16]	@ (8005df8 <HAL_RCC_OscConfig+0x7ac>)
 8005de8:	f043 0301 	orr.w	r3, r3, #1
 8005dec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3730      	adds	r7, #48	@ 0x30
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	ffff0007 	.word	0xffff0007

08005e00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e19c      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e14:	4b8a      	ldr	r3, [pc, #552]	@ (8006040 <HAL_RCC_ClockConfig+0x240>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d910      	bls.n	8005e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e22:	4b87      	ldr	r3, [pc, #540]	@ (8006040 <HAL_RCC_ClockConfig+0x240>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f023 020f 	bic.w	r2, r3, #15
 8005e2a:	4985      	ldr	r1, [pc, #532]	@ (8006040 <HAL_RCC_ClockConfig+0x240>)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e32:	4b83      	ldr	r3, [pc, #524]	@ (8006040 <HAL_RCC_ClockConfig+0x240>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e184      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d010      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	4b7b      	ldr	r3, [pc, #492]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d908      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e60:	4b78      	ldr	r3, [pc, #480]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	4975      	ldr	r1, [pc, #468]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d010      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	4b70      	ldr	r3, [pc, #448]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d908      	bls.n	8005ea0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	496a      	ldr	r1, [pc, #424]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d010      	beq.n	8005ece <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	4b64      	ldr	r3, [pc, #400]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d908      	bls.n	8005ece <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ebc:	4b61      	ldr	r3, [pc, #388]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	495e      	ldr	r1, [pc, #376]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d010      	beq.n	8005efc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69da      	ldr	r2, [r3, #28]
 8005ede:	4b59      	ldr	r3, [pc, #356]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d908      	bls.n	8005efc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005eea:	4b56      	ldr	r3, [pc, #344]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4953      	ldr	r1, [pc, #332]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d908      	bls.n	8005f2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f18:	4b4a      	ldr	r3, [pc, #296]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f023 020f 	bic.w	r2, r3, #15
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4947      	ldr	r1, [pc, #284]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d055      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f36:	4b43      	ldr	r3, [pc, #268]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	4940      	ldr	r1, [pc, #256]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d107      	bne.n	8005f60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f50:	4b3c      	ldr	r3, [pc, #240]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d121      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0f6      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d107      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f68:	4b36      	ldr	r3, [pc, #216]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d115      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0ea      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f80:	4b30      	ldr	r3, [pc, #192]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0de      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f90:	4b2c      	ldr	r3, [pc, #176]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0d6      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fa0:	4b28      	ldr	r3, [pc, #160]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f023 0207 	bic.w	r2, r3, #7
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4925      	ldr	r1, [pc, #148]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fb2:	f7fd fb1b 	bl	80035ec <HAL_GetTick>
 8005fb6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb8:	e00a      	b.n	8005fd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fba:	f7fd fb17 	bl	80035ec <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e0be      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d1eb      	bne.n	8005fba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d208      	bcs.n	8006010 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ffe:	4b11      	ldr	r3, [pc, #68]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f023 020f 	bic.w	r2, r3, #15
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	490e      	ldr	r1, [pc, #56]	@ (8006044 <HAL_RCC_ClockConfig+0x244>)
 800600c:	4313      	orrs	r3, r2
 800600e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006010:	4b0b      	ldr	r3, [pc, #44]	@ (8006040 <HAL_RCC_ClockConfig+0x240>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d214      	bcs.n	8006048 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b08      	ldr	r3, [pc, #32]	@ (8006040 <HAL_RCC_ClockConfig+0x240>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 020f 	bic.w	r2, r3, #15
 8006026:	4906      	ldr	r1, [pc, #24]	@ (8006040 <HAL_RCC_ClockConfig+0x240>)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b04      	ldr	r3, [pc, #16]	@ (8006040 <HAL_RCC_ClockConfig+0x240>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d005      	beq.n	8006048 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e086      	b.n	800614e <HAL_RCC_ClockConfig+0x34e>
 8006040:	52002000 	.word	0x52002000
 8006044:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d010      	beq.n	8006076 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	4b3f      	ldr	r3, [pc, #252]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006060:	429a      	cmp	r2, r3
 8006062:	d208      	bcs.n	8006076 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006064:	4b3c      	ldr	r3, [pc, #240]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	4939      	ldr	r1, [pc, #228]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006072:	4313      	orrs	r3, r2
 8006074:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d010      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	4b34      	ldr	r3, [pc, #208]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800608e:	429a      	cmp	r2, r3
 8006090:	d208      	bcs.n	80060a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006092:	4b31      	ldr	r3, [pc, #196]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	492e      	ldr	r1, [pc, #184]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d010      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	4b28      	ldr	r3, [pc, #160]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060bc:	429a      	cmp	r2, r3
 80060be:	d208      	bcs.n	80060d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060c0:	4b25      	ldr	r3, [pc, #148]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4922      	ldr	r1, [pc, #136]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d010      	beq.n	8006100 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d208      	bcs.n	8006100 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	4917      	ldr	r1, [pc, #92]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006100:	f000 f834 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8006104:	4602      	mov	r2, r0
 8006106:	4b14      	ldr	r3, [pc, #80]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	4912      	ldr	r1, [pc, #72]	@ (800615c <HAL_RCC_ClockConfig+0x35c>)
 8006112:	5ccb      	ldrb	r3, [r1, r3]
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	fa22 f303 	lsr.w	r3, r2, r3
 800611c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800611e:	4b0e      	ldr	r3, [pc, #56]	@ (8006158 <HAL_RCC_ClockConfig+0x358>)
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	4a0d      	ldr	r2, [pc, #52]	@ (800615c <HAL_RCC_ClockConfig+0x35c>)
 8006128:	5cd3      	ldrb	r3, [r2, r3]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
 8006134:	4a0a      	ldr	r2, [pc, #40]	@ (8006160 <HAL_RCC_ClockConfig+0x360>)
 8006136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006138:	4a0a      	ldr	r2, [pc, #40]	@ (8006164 <HAL_RCC_ClockConfig+0x364>)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800613e:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <HAL_RCC_ClockConfig+0x368>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fd fa08 	bl	8003558 <HAL_InitTick>
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800614c:	7bfb      	ldrb	r3, [r7, #15]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	58024400 	.word	0x58024400
 800615c:	0801235c 	.word	0x0801235c
 8006160:	24000004 	.word	0x24000004
 8006164:	24000000 	.word	0x24000000
 8006168:	24000008 	.word	0x24000008

0800616c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800616c:	b480      	push	{r7}
 800616e:	b089      	sub	sp, #36	@ 0x24
 8006170:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006172:	4bb3      	ldr	r3, [pc, #716]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800617a:	2b18      	cmp	r3, #24
 800617c:	f200 8155 	bhi.w	800642a <HAL_RCC_GetSysClockFreq+0x2be>
 8006180:	a201      	add	r2, pc, #4	@ (adr r2, 8006188 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061ed 	.word	0x080061ed
 800618c:	0800642b 	.word	0x0800642b
 8006190:	0800642b 	.word	0x0800642b
 8006194:	0800642b 	.word	0x0800642b
 8006198:	0800642b 	.word	0x0800642b
 800619c:	0800642b 	.word	0x0800642b
 80061a0:	0800642b 	.word	0x0800642b
 80061a4:	0800642b 	.word	0x0800642b
 80061a8:	08006213 	.word	0x08006213
 80061ac:	0800642b 	.word	0x0800642b
 80061b0:	0800642b 	.word	0x0800642b
 80061b4:	0800642b 	.word	0x0800642b
 80061b8:	0800642b 	.word	0x0800642b
 80061bc:	0800642b 	.word	0x0800642b
 80061c0:	0800642b 	.word	0x0800642b
 80061c4:	0800642b 	.word	0x0800642b
 80061c8:	08006219 	.word	0x08006219
 80061cc:	0800642b 	.word	0x0800642b
 80061d0:	0800642b 	.word	0x0800642b
 80061d4:	0800642b 	.word	0x0800642b
 80061d8:	0800642b 	.word	0x0800642b
 80061dc:	0800642b 	.word	0x0800642b
 80061e0:	0800642b 	.word	0x0800642b
 80061e4:	0800642b 	.word	0x0800642b
 80061e8:	0800621f 	.word	0x0800621f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ec:	4b94      	ldr	r3, [pc, #592]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061f8:	4b91      	ldr	r3, [pc, #580]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	08db      	lsrs	r3, r3, #3
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	4a90      	ldr	r2, [pc, #576]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
 8006208:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800620a:	e111      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800620c:	4b8d      	ldr	r3, [pc, #564]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800620e:	61bb      	str	r3, [r7, #24]
      break;
 8006210:	e10e      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006212:	4b8d      	ldr	r3, [pc, #564]	@ (8006448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006214:	61bb      	str	r3, [r7, #24]
      break;
 8006216:	e10b      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006218:	4b8c      	ldr	r3, [pc, #560]	@ (800644c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800621a:	61bb      	str	r3, [r7, #24]
      break;
 800621c:	e108      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800621e:	4b88      	ldr	r3, [pc, #544]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006228:	4b85      	ldr	r3, [pc, #532]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006232:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006234:	4b82      	ldr	r3, [pc, #520]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800623e:	4b80      	ldr	r3, [pc, #512]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006242:	08db      	lsrs	r3, r3, #3
 8006244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006256:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80e1 	beq.w	8006424 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b02      	cmp	r3, #2
 8006266:	f000 8083 	beq.w	8006370 <HAL_RCC_GetSysClockFreq+0x204>
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b02      	cmp	r3, #2
 800626e:	f200 80a1 	bhi.w	80063b4 <HAL_RCC_GetSysClockFreq+0x248>
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_RCC_GetSysClockFreq+0x114>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d056      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0x1c0>
 800627e:	e099      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006280:	4b6f      	ldr	r3, [pc, #444]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d02d      	beq.n	80062e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800628c:	4b6c      	ldr	r3, [pc, #432]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	08db      	lsrs	r3, r3, #3
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	4a6b      	ldr	r2, [pc, #428]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006298:	fa22 f303 	lsr.w	r3, r2, r3
 800629c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b6:	4b62      	ldr	r3, [pc, #392]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80062e6:	e087      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006454 <HAL_RCC_GetSysClockFreq+0x2e8>
 80062f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fa:	4b51      	ldr	r3, [pc, #324]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630a:	ed97 6a02 	vldr	s12, [r7, #8]
 800630e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800631e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800632a:	e065      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006336:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006458 <HAL_RCC_GetSysClockFreq+0x2ec>
 800633a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633e:	4b40      	ldr	r3, [pc, #256]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006352:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800636e:	e043      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800645c <HAL_RCC_GetSysClockFreq+0x2f0>
 800637e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006382:	4b2f      	ldr	r3, [pc, #188]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006392:	ed97 6a02 	vldr	s12, [r7, #8]
 8006396:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006450 <HAL_RCC_GetSysClockFreq+0x2e4>
 800639a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063b2:	e021      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006458 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80063f8:	4b11      	ldr	r3, [pc, #68]	@ (8006440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fc:	0a5b      	lsrs	r3, r3, #9
 80063fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006402:	3301      	adds	r3, #1
 8006404:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	ee07 3a90 	vmov	s15, r3
 800640c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006410:	edd7 6a07 	vldr	s13, [r7, #28]
 8006414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641c:	ee17 3a90 	vmov	r3, s15
 8006420:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006422:	e005      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
      break;
 8006428:	e002      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800642a:	4b07      	ldr	r3, [pc, #28]	@ (8006448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800642c:	61bb      	str	r3, [r7, #24]
      break;
 800642e:	bf00      	nop
  }

  return sysclockfreq;
 8006430:	69bb      	ldr	r3, [r7, #24]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3724      	adds	r7, #36	@ 0x24
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	58024400 	.word	0x58024400
 8006444:	03d09000 	.word	0x03d09000
 8006448:	003d0900 	.word	0x003d0900
 800644c:	02dc6c00 	.word	0x02dc6c00
 8006450:	46000000 	.word	0x46000000
 8006454:	4c742400 	.word	0x4c742400
 8006458:	4a742400 	.word	0x4a742400
 800645c:	4c371b00 	.word	0x4c371b00

08006460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006466:	f7ff fe81 	bl	800616c <HAL_RCC_GetSysClockFreq>
 800646a:	4602      	mov	r2, r0
 800646c:	4b10      	ldr	r3, [pc, #64]	@ (80064b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	0a1b      	lsrs	r3, r3, #8
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	490f      	ldr	r1, [pc, #60]	@ (80064b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006478:	5ccb      	ldrb	r3, [r1, r3]
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	fa22 f303 	lsr.w	r3, r2, r3
 8006482:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006484:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	4a09      	ldr	r2, [pc, #36]	@ (80064b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800648e:	5cd3      	ldrb	r3, [r2, r3]
 8006490:	f003 031f 	and.w	r3, r3, #31
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	4a07      	ldr	r2, [pc, #28]	@ (80064b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800649c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800649e:	4a07      	ldr	r2, [pc, #28]	@ (80064bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80064a4:	4b04      	ldr	r3, [pc, #16]	@ (80064b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80064a6:	681b      	ldr	r3, [r3, #0]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	58024400 	.word	0x58024400
 80064b4:	0801235c 	.word	0x0801235c
 80064b8:	24000004 	.word	0x24000004
 80064bc:	24000000 	.word	0x24000000

080064c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064c4:	f7ff ffcc 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 80064c8:	4602      	mov	r2, r0
 80064ca:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	4904      	ldr	r1, [pc, #16]	@ (80064e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064d6:	5ccb      	ldrb	r3, [r1, r3]
 80064d8:	f003 031f 	and.w	r3, r3, #31
 80064dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	58024400 	.word	0x58024400
 80064e8:	0801235c 	.word	0x0801235c

080064ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80064f0:	f7ff ffb6 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	0a1b      	lsrs	r3, r3, #8
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4904      	ldr	r1, [pc, #16]	@ (8006514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800650c:	4618      	mov	r0, r3
 800650e:	bd80      	pop	{r7, pc}
 8006510:	58024400 	.word	0x58024400
 8006514:	0801235c 	.word	0x0801235c

08006518 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800651c:	b0c6      	sub	sp, #280	@ 0x118
 800651e:	af00      	add	r7, sp, #0
 8006520:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006524:	2300      	movs	r3, #0
 8006526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800652a:	2300      	movs	r3, #0
 800652c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800653c:	2500      	movs	r5, #0
 800653e:	ea54 0305 	orrs.w	r3, r4, r5
 8006542:	d049      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800654a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800654e:	d02f      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006550:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006554:	d828      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006556:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800655a:	d01a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800655c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006560:	d822      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800656a:	d007      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800656c:	e01c      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656e:	4bab      	ldr	r3, [pc, #684]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	4aaa      	ldr	r2, [pc, #680]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800657a:	e01a      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006580:	3308      	adds	r3, #8
 8006582:	2102      	movs	r1, #2
 8006584:	4618      	mov	r0, r3
 8006586:	f002 fa49 	bl	8008a1c <RCCEx_PLL2_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006590:	e00f      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006596:	3328      	adds	r3, #40	@ 0x28
 8006598:	2102      	movs	r1, #2
 800659a:	4618      	mov	r0, r3
 800659c:	f002 faf0 	bl	8008b80 <RCCEx_PLL3_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065a6:	e004      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065ae:	e000      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80065b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065ba:	4b98      	ldr	r3, [pc, #608]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c8:	4a94      	ldr	r2, [pc, #592]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065ca:	430b      	orrs	r3, r1
 80065cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80065ce:	e003      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80065e4:	f04f 0900 	mov.w	r9, #0
 80065e8:	ea58 0309 	orrs.w	r3, r8, r9
 80065ec:	d047      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d82a      	bhi.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80065f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006615 	.word	0x08006615
 8006604:	08006623 	.word	0x08006623
 8006608:	08006639 	.word	0x08006639
 800660c:	08006657 	.word	0x08006657
 8006610:	08006657 	.word	0x08006657
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006614:	4b81      	ldr	r3, [pc, #516]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006618:	4a80      	ldr	r2, [pc, #512]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800661a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800661e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006620:	e01a      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006626:	3308      	adds	r3, #8
 8006628:	2100      	movs	r1, #0
 800662a:	4618      	mov	r0, r3
 800662c:	f002 f9f6 	bl	8008a1c <RCCEx_PLL2_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006636:	e00f      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663c:	3328      	adds	r3, #40	@ 0x28
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f002 fa9d 	bl	8008b80 <RCCEx_PLL3_Config>
 8006646:	4603      	mov	r3, r0
 8006648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800664c:	e004      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006654:	e000      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006660:	4b6e      	ldr	r3, [pc, #440]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006664:	f023 0107 	bic.w	r1, r3, #7
 8006668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666e:	4a6b      	ldr	r2, [pc, #428]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006670:	430b      	orrs	r3, r1
 8006672:	6513      	str	r3, [r2, #80]	@ 0x50
 8006674:	e003      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800667a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800668a:	f04f 0b00 	mov.w	fp, #0
 800668e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006692:	d05b      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800669c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80066a0:	d03b      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80066a2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80066a6:	d834      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066ac:	d037      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80066ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066b2:	d82e      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066b8:	d033      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80066ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066be:	d828      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066c4:	d01a      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80066c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066ca:	d822      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80066d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066d4:	d007      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80066d6:	e01c      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d8:	4b50      	ldr	r3, [pc, #320]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	4a4f      	ldr	r2, [pc, #316]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066e4:	e01e      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ea:	3308      	adds	r3, #8
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f002 f994 	bl	8008a1c <RCCEx_PLL2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80066fa:	e013      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006700:	3328      	adds	r3, #40	@ 0x28
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f002 fa3b 	bl	8008b80 <RCCEx_PLL3_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006710:	e008      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006718:	e004      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800671a:	bf00      	nop
 800671c:	e002      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800671e:	bf00      	nop
 8006720:	e000      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10b      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800672c:	4b3b      	ldr	r3, [pc, #236]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800672e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006730:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800673c:	4a37      	ldr	r2, [pc, #220]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800673e:	430b      	orrs	r3, r1
 8006740:	6593      	str	r3, [r2, #88]	@ 0x58
 8006742:	e003      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006748:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006758:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800675c:	2300      	movs	r3, #0
 800675e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006762:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006766:	460b      	mov	r3, r1
 8006768:	4313      	orrs	r3, r2
 800676a:	d05d      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800676c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006770:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006774:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006778:	d03b      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800677a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800677e:	d834      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006780:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006784:	d037      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006786:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800678a:	d82e      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800678c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006790:	d033      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006792:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006796:	d828      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006798:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800679c:	d01a      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800679e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067a2:	d822      	bhi.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067ac:	d007      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80067ae:	e01c      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b0:	4b1a      	ldr	r3, [pc, #104]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b4:	4a19      	ldr	r2, [pc, #100]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067bc:	e01e      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c2:	3308      	adds	r3, #8
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f002 f928 	bl	8008a1c <RCCEx_PLL2_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067d2:	e013      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d8:	3328      	adds	r3, #40	@ 0x28
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f002 f9cf 	bl	8008b80 <RCCEx_PLL3_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067e8:	e008      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067f0:	e004      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80067f2:	bf00      	nop
 80067f4:	e002      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80067fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10d      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006804:	4b05      	ldr	r3, [pc, #20]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006808:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006814:	4a01      	ldr	r2, [pc, #4]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006816:	430b      	orrs	r3, r1
 8006818:	6593      	str	r3, [r2, #88]	@ 0x58
 800681a:	e005      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800681c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006824:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006834:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006838:	2300      	movs	r3, #0
 800683a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800683e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006842:	460b      	mov	r3, r1
 8006844:	4313      	orrs	r3, r2
 8006846:	d03a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800684e:	2b30      	cmp	r3, #48	@ 0x30
 8006850:	d01f      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006852:	2b30      	cmp	r3, #48	@ 0x30
 8006854:	d819      	bhi.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006856:	2b20      	cmp	r3, #32
 8006858:	d00c      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800685a:	2b20      	cmp	r3, #32
 800685c:	d815      	bhi.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d019      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006862:	2b10      	cmp	r3, #16
 8006864:	d111      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006866:	4baa      	ldr	r3, [pc, #680]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686a:	4aa9      	ldr	r2, [pc, #676]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800686c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006872:	e011      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	3308      	adds	r3, #8
 800687a:	2102      	movs	r1, #2
 800687c:	4618      	mov	r0, r3
 800687e:	f002 f8cd 	bl	8008a1c <RCCEx_PLL2_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006888:	e006      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006890:	e002      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10a      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068a0:	4b9b      	ldr	r3, [pc, #620]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ae:	4a98      	ldr	r2, [pc, #608]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068b0:	430b      	orrs	r3, r1
 80068b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068b4:	e003      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80068ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068ce:	2300      	movs	r3, #0
 80068d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80068d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80068d8:	460b      	mov	r3, r1
 80068da:	4313      	orrs	r3, r2
 80068dc:	d051      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068e8:	d035      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80068ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068ee:	d82e      	bhi.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80068f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068f4:	d031      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80068f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068fa:	d828      	bhi.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80068fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006900:	d01a      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006906:	d822      	bhi.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800690c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006910:	d007      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006912:	e01c      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006914:	4b7e      	ldr	r3, [pc, #504]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	4a7d      	ldr	r2, [pc, #500]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800691a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800691e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006920:	e01c      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	3308      	adds	r3, #8
 8006928:	2100      	movs	r1, #0
 800692a:	4618      	mov	r0, r3
 800692c:	f002 f876 	bl	8008a1c <RCCEx_PLL2_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006936:	e011      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693c:	3328      	adds	r3, #40	@ 0x28
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f002 f91d 	bl	8008b80 <RCCEx_PLL3_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800694c:	e006      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006954:	e002      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800695a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800695c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006964:	4b6a      	ldr	r3, [pc, #424]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006968:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006972:	4a67      	ldr	r2, [pc, #412]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006974:	430b      	orrs	r3, r1
 8006976:	6513      	str	r3, [r2, #80]	@ 0x50
 8006978:	e003      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800697e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800698e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006992:	2300      	movs	r3, #0
 8006994:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006998:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800699c:	460b      	mov	r3, r1
 800699e:	4313      	orrs	r3, r2
 80069a0:	d053      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069ac:	d033      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80069ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069b2:	d82c      	bhi.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069b8:	d02f      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80069ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069be:	d826      	bhi.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069c4:	d02b      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80069c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069ca:	d820      	bhi.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069d0:	d012      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80069d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069d6:	d81a      	bhi.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d022      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e0:	d115      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e6:	3308      	adds	r3, #8
 80069e8:	2101      	movs	r1, #1
 80069ea:	4618      	mov	r0, r3
 80069ec:	f002 f816 	bl	8008a1c <RCCEx_PLL2_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80069f6:	e015      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fc:	3328      	adds	r3, #40	@ 0x28
 80069fe:	2101      	movs	r1, #1
 8006a00:	4618      	mov	r0, r3
 8006a02:	f002 f8bd 	bl	8008b80 <RCCEx_PLL3_Config>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a0c:	e00a      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a14:	e006      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a16:	bf00      	nop
 8006a18:	e004      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a1a:	bf00      	nop
 8006a1c:	e002      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a2c:	4b38      	ldr	r3, [pc, #224]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a3a:	4a35      	ldr	r2, [pc, #212]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006a56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a60:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a64:	460b      	mov	r3, r1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	d058      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a76:	d033      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a7c:	d82c      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a82:	d02f      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a88:	d826      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a8e:	d02b      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006a90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a94:	d820      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a9a:	d012      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aa0:	d81a      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d022      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aaa:	d115      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 ffb1 	bl	8008a1c <RCCEx_PLL2_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ac0:	e015      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac6:	3328      	adds	r3, #40	@ 0x28
 8006ac8:	2101      	movs	r1, #1
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 f858 	bl	8008b80 <RCCEx_PLL3_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ad6:	e00a      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ade:	e006      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ae0:	bf00      	nop
 8006ae2:	e004      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ae4:	bf00      	nop
 8006ae6:	e002      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ae8:	bf00      	nop
 8006aea:	e000      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10e      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006af6:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b06:	4a02      	ldr	r2, [pc, #8]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b0c:	e006      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006b0e:	bf00      	nop
 8006b10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d037      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b46:	d00e      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b4c:	d816      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d018      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b56:	d111      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b58:	4bc4      	ldr	r3, [pc, #784]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5c:	4ac3      	ldr	r2, [pc, #780]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b64:	e00f      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 ff54 	bl	8008a1c <RCCEx_PLL2_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b7a:	e004      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b82:	e000      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b8e:	4bb7      	ldr	r3, [pc, #732]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b9c:	4ab3      	ldr	r2, [pc, #716]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ba2:	e003      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d039      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d81c      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c19 	.word	0x08006c19
 8006be0:	08006bed 	.word	0x08006bed
 8006be4:	08006bfb 	.word	0x08006bfb
 8006be8:	08006c19 	.word	0x08006c19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bec:	4b9f      	ldr	r3, [pc, #636]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf0:	4a9e      	ldr	r2, [pc, #632]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006bf8:	e00f      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	3308      	adds	r3, #8
 8006c00:	2102      	movs	r1, #2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 ff0a 	bl	8008a1c <RCCEx_PLL2_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c0e:	e004      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c22:	4b92      	ldr	r3, [pc, #584]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c26:	f023 0103 	bic.w	r1, r3, #3
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c30:	4a8e      	ldr	r2, [pc, #568]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c32:	430b      	orrs	r3, r1
 8006c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c36:	e003      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c50:	2300      	movs	r3, #0
 8006c52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f000 8099 	beq.w	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c62:	4b83      	ldr	r3, [pc, #524]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a82      	ldr	r2, [pc, #520]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c6e:	f7fc fcbd 	bl	80035ec <HAL_GetTick>
 8006c72:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c76:	e00b      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c78:	f7fc fcb8 	bl	80035ec <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b64      	cmp	r3, #100	@ 0x64
 8006c86:	d903      	bls.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c8e:	e005      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c90:	4b77      	ldr	r3, [pc, #476]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0ed      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d173      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ca4:	4b71      	ldr	r3, [pc, #452]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ca6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cb0:	4053      	eors	r3, r2
 8006cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d015      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cba:	4b6c      	ldr	r3, [pc, #432]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cc6:	4b69      	ldr	r3, [pc, #420]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cca:	4a68      	ldr	r2, [pc, #416]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cd2:	4b66      	ldr	r3, [pc, #408]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd6:	4a65      	ldr	r2, [pc, #404]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cdc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006cde:	4a63      	ldr	r2, [pc, #396]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf2:	d118      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fc fc7a 	bl	80035ec <HAL_GetTick>
 8006cf8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cfc:	e00d      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cfe:	f7fc fc75 	bl	80035ec <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006d08:	1ad2      	subs	r2, r2, r3
 8006d0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d903      	bls.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006d18:	e005      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d1a:	4b54      	ldr	r3, [pc, #336]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0eb      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006d26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d129      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d3e:	d10e      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006d40:	4b4a      	ldr	r3, [pc, #296]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d50:	091a      	lsrs	r2, r3, #4
 8006d52:	4b48      	ldr	r3, [pc, #288]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	4a45      	ldr	r2, [pc, #276]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6113      	str	r3, [r2, #16]
 8006d5c:	e005      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006d5e:	4b43      	ldr	r3, [pc, #268]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	4a42      	ldr	r2, [pc, #264]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d68:	6113      	str	r3, [r2, #16]
 8006d6a:	4b40      	ldr	r3, [pc, #256]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d80:	e008      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006d8a:	e003      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f002 0301 	and.w	r3, r2, #1
 8006da0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006da4:	2300      	movs	r3, #0
 8006da6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006daa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006dae:	460b      	mov	r3, r1
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f000 808f 	beq.w	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006dbc:	2b28      	cmp	r3, #40	@ 0x28
 8006dbe:	d871      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006ead 	.word	0x08006ead
 8006dcc:	08006ea5 	.word	0x08006ea5
 8006dd0:	08006ea5 	.word	0x08006ea5
 8006dd4:	08006ea5 	.word	0x08006ea5
 8006dd8:	08006ea5 	.word	0x08006ea5
 8006ddc:	08006ea5 	.word	0x08006ea5
 8006de0:	08006ea5 	.word	0x08006ea5
 8006de4:	08006ea5 	.word	0x08006ea5
 8006de8:	08006e79 	.word	0x08006e79
 8006dec:	08006ea5 	.word	0x08006ea5
 8006df0:	08006ea5 	.word	0x08006ea5
 8006df4:	08006ea5 	.word	0x08006ea5
 8006df8:	08006ea5 	.word	0x08006ea5
 8006dfc:	08006ea5 	.word	0x08006ea5
 8006e00:	08006ea5 	.word	0x08006ea5
 8006e04:	08006ea5 	.word	0x08006ea5
 8006e08:	08006e8f 	.word	0x08006e8f
 8006e0c:	08006ea5 	.word	0x08006ea5
 8006e10:	08006ea5 	.word	0x08006ea5
 8006e14:	08006ea5 	.word	0x08006ea5
 8006e18:	08006ea5 	.word	0x08006ea5
 8006e1c:	08006ea5 	.word	0x08006ea5
 8006e20:	08006ea5 	.word	0x08006ea5
 8006e24:	08006ea5 	.word	0x08006ea5
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006ea5 	.word	0x08006ea5
 8006e30:	08006ea5 	.word	0x08006ea5
 8006e34:	08006ea5 	.word	0x08006ea5
 8006e38:	08006ea5 	.word	0x08006ea5
 8006e3c:	08006ea5 	.word	0x08006ea5
 8006e40:	08006ea5 	.word	0x08006ea5
 8006e44:	08006ea5 	.word	0x08006ea5
 8006e48:	08006ead 	.word	0x08006ead
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006ea5 	.word	0x08006ea5
 8006e58:	08006ea5 	.word	0x08006ea5
 8006e5c:	08006ea5 	.word	0x08006ea5
 8006e60:	08006ea5 	.word	0x08006ea5
 8006e64:	08006ea5 	.word	0x08006ea5
 8006e68:	08006ead 	.word	0x08006ead
 8006e6c:	58024400 	.word	0x58024400
 8006e70:	58024800 	.word	0x58024800
 8006e74:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 fdcb 	bl	8008a1c <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e8c:	e00f      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e92:	3328      	adds	r3, #40	@ 0x28
 8006e94:	2101      	movs	r1, #1
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 fe72 	bl	8008b80 <RCCEx_PLL3_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ea2:	e004      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006eaa:	e000      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006eb6:	4bbf      	ldr	r3, [pc, #764]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ec4:	4abb      	ldr	r2, [pc, #748]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f002 0302 	and.w	r3, r2, #2
 8006ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006eea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	d041      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006efa:	2b05      	cmp	r3, #5
 8006efc:	d824      	bhi.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006efe:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f51 	.word	0x08006f51
 8006f08:	08006f1d 	.word	0x08006f1d
 8006f0c:	08006f33 	.word	0x08006f33
 8006f10:	08006f51 	.word	0x08006f51
 8006f14:	08006f51 	.word	0x08006f51
 8006f18:	08006f51 	.word	0x08006f51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f20:	3308      	adds	r3, #8
 8006f22:	2101      	movs	r1, #1
 8006f24:	4618      	mov	r0, r3
 8006f26:	f001 fd79 	bl	8008a1c <RCCEx_PLL2_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f30:	e00f      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	3328      	adds	r3, #40	@ 0x28
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 fe20 	bl	8008b80 <RCCEx_PLL3_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f5a:	4b96      	ldr	r3, [pc, #600]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f5e:	f023 0107 	bic.w	r1, r3, #7
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f68:	4a92      	ldr	r2, [pc, #584]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f6e:	e003      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f002 0304 	and.w	r3, r2, #4
 8006f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f8e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d044      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa0:	2b05      	cmp	r3, #5
 8006fa2:	d825      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006ff9 	.word	0x08006ff9
 8006fb0:	08006fc5 	.word	0x08006fc5
 8006fb4:	08006fdb 	.word	0x08006fdb
 8006fb8:	08006ff9 	.word	0x08006ff9
 8006fbc:	08006ff9 	.word	0x08006ff9
 8006fc0:	08006ff9 	.word	0x08006ff9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	3308      	adds	r3, #8
 8006fca:	2101      	movs	r1, #1
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 fd25 	bl	8008a1c <RCCEx_PLL2_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006fd8:	e00f      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fde:	3328      	adds	r3, #40	@ 0x28
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 fdcc 	bl	8008b80 <RCCEx_PLL3_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006fee:	e004      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10b      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007002:	4b6c      	ldr	r3, [pc, #432]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007006:	f023 0107 	bic.w	r1, r3, #7
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007012:	4a68      	ldr	r2, [pc, #416]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007014:	430b      	orrs	r3, r1
 8007016:	6593      	str	r3, [r2, #88]	@ 0x58
 8007018:	e003      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800701e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	f002 0320 	and.w	r3, r2, #32
 800702e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007032:	2300      	movs	r3, #0
 8007034:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007038:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800703c:	460b      	mov	r3, r1
 800703e:	4313      	orrs	r3, r2
 8007040:	d055      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800704a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800704e:	d033      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007050:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007054:	d82c      	bhi.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705a:	d02f      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800705c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007060:	d826      	bhi.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007062:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007066:	d02b      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007068:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800706c:	d820      	bhi.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800706e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007072:	d012      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007078:	d81a      	bhi.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d022      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800707e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007082:	d115      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	3308      	adds	r3, #8
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f001 fcc5 	bl	8008a1c <RCCEx_PLL2_Config>
 8007092:	4603      	mov	r3, r0
 8007094:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007098:	e015      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709e:	3328      	adds	r3, #40	@ 0x28
 80070a0:	2102      	movs	r1, #2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 fd6c 	bl	8008b80 <RCCEx_PLL3_Config>
 80070a8:	4603      	mov	r3, r0
 80070aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070ae:	e00a      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070b6:	e006      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070b8:	bf00      	nop
 80070ba:	e004      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070bc:	bf00      	nop
 80070be:	e002      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070c0:	bf00      	nop
 80070c2:	e000      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070ce:	4b39      	ldr	r3, [pc, #228]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070de:	4a35      	ldr	r2, [pc, #212]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80070e4:	e003      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80070fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070fe:	2300      	movs	r3, #0
 8007100:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007104:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007108:	460b      	mov	r3, r1
 800710a:	4313      	orrs	r3, r2
 800710c:	d058      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007116:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800711a:	d033      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800711c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007120:	d82c      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007126:	d02f      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800712c:	d826      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800712e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007132:	d02b      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007134:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007138:	d820      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800713a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800713e:	d012      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007144:	d81a      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d022      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800714a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800714e:	d115      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007154:	3308      	adds	r3, #8
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f001 fc5f 	bl	8008a1c <RCCEx_PLL2_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007164:	e015      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716a:	3328      	adds	r3, #40	@ 0x28
 800716c:	2102      	movs	r1, #2
 800716e:	4618      	mov	r0, r3
 8007170:	f001 fd06 	bl	8008b80 <RCCEx_PLL3_Config>
 8007174:	4603      	mov	r3, r0
 8007176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800717a:	e00a      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007182:	e006      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007184:	bf00      	nop
 8007186:	e004      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007188:	bf00      	nop
 800718a:	e002      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800718c:	bf00      	nop
 800718e:	e000      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007192:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10e      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800719a:	4b06      	ldr	r3, [pc, #24]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800719c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800719e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80071a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071aa:	4a02      	ldr	r2, [pc, #8]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80071b0:	e006      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80071b2:	bf00      	nop
 80071b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80071cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071d0:	2300      	movs	r3, #0
 80071d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80071da:	460b      	mov	r3, r1
 80071dc:	4313      	orrs	r3, r2
 80071de:	d055      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80071ec:	d033      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80071ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80071f2:	d82c      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80071f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f8:	d02f      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80071fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071fe:	d826      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007200:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007204:	d02b      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007206:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800720a:	d820      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800720c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007210:	d012      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007216:	d81a      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d022      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800721c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007220:	d115      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007226:	3308      	adds	r3, #8
 8007228:	2100      	movs	r1, #0
 800722a:	4618      	mov	r0, r3
 800722c:	f001 fbf6 	bl	8008a1c <RCCEx_PLL2_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007236:	e015      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723c:	3328      	adds	r3, #40	@ 0x28
 800723e:	2102      	movs	r1, #2
 8007240:	4618      	mov	r0, r3
 8007242:	f001 fc9d 	bl	8008b80 <RCCEx_PLL3_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800724c:	e00a      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007254:	e006      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007256:	bf00      	nop
 8007258:	e004      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800725a:	bf00      	nop
 800725c:	e002      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800725e:	bf00      	nop
 8007260:	e000      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10b      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800726c:	4ba0      	ldr	r3, [pc, #640]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800726e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007270:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800727c:	4a9c      	ldr	r2, [pc, #624]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800727e:	430b      	orrs	r3, r1
 8007280:	6593      	str	r3, [r2, #88]	@ 0x58
 8007282:	e003      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007288:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800728c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f002 0308 	and.w	r3, r2, #8
 8007298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800729c:	2300      	movs	r3, #0
 800729e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80072a6:	460b      	mov	r3, r1
 80072a8:	4313      	orrs	r3, r2
 80072aa:	d01e      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072b8:	d10c      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072be:	3328      	adds	r3, #40	@ 0x28
 80072c0:	2102      	movs	r1, #2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fc5c 	bl	8008b80 <RCCEx_PLL3_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80072d4:	4b86      	ldr	r3, [pc, #536]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072e4:	4a82      	ldr	r2, [pc, #520]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072e6:	430b      	orrs	r3, r1
 80072e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f002 0310 	and.w	r3, r2, #16
 80072f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072fa:	2300      	movs	r3, #0
 80072fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007300:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007304:	460b      	mov	r3, r1
 8007306:	4313      	orrs	r3, r2
 8007308:	d01e      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800730a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007316:	d10c      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731c:	3328      	adds	r3, #40	@ 0x28
 800731e:	2102      	movs	r1, #2
 8007320:	4618      	mov	r0, r3
 8007322:	f001 fc2d 	bl	8008b80 <RCCEx_PLL3_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007332:	4b6f      	ldr	r3, [pc, #444]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007336:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800733a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800733e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007342:	4a6b      	ldr	r2, [pc, #428]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007344:	430b      	orrs	r3, r1
 8007346:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007354:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007356:	2300      	movs	r3, #0
 8007358:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800735a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d03e      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007368:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800736c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007370:	d022      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007372:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007376:	d81b      	bhi.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800737c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007380:	d00b      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007382:	e015      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007388:	3308      	adds	r3, #8
 800738a:	2100      	movs	r1, #0
 800738c:	4618      	mov	r0, r3
 800738e:	f001 fb45 	bl	8008a1c <RCCEx_PLL2_Config>
 8007392:	4603      	mov	r3, r0
 8007394:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007398:	e00f      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739e:	3328      	adds	r3, #40	@ 0x28
 80073a0:	2102      	movs	r1, #2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 fbec 	bl	8008b80 <RCCEx_PLL3_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073ae:	e004      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073b6:	e000      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80073b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073c2:	4b4b      	ldr	r3, [pc, #300]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073d2:	4a47      	ldr	r2, [pc, #284]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073d4:	430b      	orrs	r3, r1
 80073d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80073d8:	e003      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80073ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80073f0:	2300      	movs	r3, #0
 80073f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80073f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80073f8:	460b      	mov	r3, r1
 80073fa:	4313      	orrs	r3, r2
 80073fc:	d03b      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80073fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007406:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800740a:	d01f      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800740c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007410:	d818      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007416:	d003      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007418:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800741c:	d007      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800741e:	e011      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007420:	4b33      	ldr	r3, [pc, #204]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	4a32      	ldr	r2, [pc, #200]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800742a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800742c:	e00f      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800742e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007432:	3328      	adds	r3, #40	@ 0x28
 8007434:	2101      	movs	r1, #1
 8007436:	4618      	mov	r0, r3
 8007438:	f001 fba2 	bl	8008b80 <RCCEx_PLL3_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007442:	e004      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800744a:	e000      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800744c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10b      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007456:	4b26      	ldr	r3, [pc, #152]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800745a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007466:	4a22      	ldr	r2, [pc, #136]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007468:	430b      	orrs	r3, r1
 800746a:	6553      	str	r3, [r2, #84]	@ 0x54
 800746c:	e003      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007472:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007482:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007484:	2300      	movs	r3, #0
 8007486:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007488:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800748c:	460b      	mov	r3, r1
 800748e:	4313      	orrs	r3, r2
 8007490:	d034      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800749c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a0:	d007      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80074a2:	e011      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a4:	4b12      	ldr	r3, [pc, #72]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	4a11      	ldr	r2, [pc, #68]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074b0:	e00e      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b6:	3308      	adds	r3, #8
 80074b8:	2102      	movs	r1, #2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 faae 	bl	8008a1c <RCCEx_PLL2_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074c6:	e003      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10d      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074d8:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e6:	4a02      	ldr	r2, [pc, #8]	@ (80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074e8:	430b      	orrs	r3, r1
 80074ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074ec:	e006      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80074ee:	bf00      	nop
 80074f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007508:	663b      	str	r3, [r7, #96]	@ 0x60
 800750a:	2300      	movs	r3, #0
 800750c:	667b      	str	r3, [r7, #100]	@ 0x64
 800750e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007512:	460b      	mov	r3, r1
 8007514:	4313      	orrs	r3, r2
 8007516:	d00c      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751c:	3328      	adds	r3, #40	@ 0x28
 800751e:	2102      	movs	r1, #2
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fb2d 	bl	8008b80 <RCCEx_PLL3_Config>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800753e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007540:	2300      	movs	r3, #0
 8007542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007544:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007548:	460b      	mov	r3, r1
 800754a:	4313      	orrs	r3, r2
 800754c:	d036      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007552:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007558:	d018      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800755a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800755e:	d811      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007564:	d014      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800756a:	d80b      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d011      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007574:	d106      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007576:	4bb7      	ldr	r3, [pc, #732]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757a:	4ab6      	ldr	r2, [pc, #728]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800757c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007582:	e008      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800758a:	e004      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800758c:	bf00      	nop
 800758e:	e002      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007590:	bf00      	nop
 8007592:	e000      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800759e:	4bad      	ldr	r3, [pc, #692]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075ac:	4aa9      	ldr	r2, [pc, #676]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80075c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80075ca:	2300      	movs	r3, #0
 80075cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80075ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80075d2:	460b      	mov	r3, r1
 80075d4:	4313      	orrs	r3, r2
 80075d6:	d009      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075d8:	4b9e      	ldr	r3, [pc, #632]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80075e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e6:	4a9b      	ldr	r2, [pc, #620]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075e8:	430b      	orrs	r3, r1
 80075ea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80075f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075fa:	2300      	movs	r3, #0
 80075fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007602:	460b      	mov	r3, r1
 8007604:	4313      	orrs	r3, r2
 8007606:	d009      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007608:	4b92      	ldr	r3, [pc, #584]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800760a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800760c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007614:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007616:	4a8f      	ldr	r2, [pc, #572]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007618:	430b      	orrs	r3, r1
 800761a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800761c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007628:	643b      	str	r3, [r7, #64]	@ 0x40
 800762a:	2300      	movs	r3, #0
 800762c:	647b      	str	r3, [r7, #68]	@ 0x44
 800762e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007632:	460b      	mov	r3, r1
 8007634:	4313      	orrs	r3, r2
 8007636:	d00e      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007638:	4b86      	ldr	r3, [pc, #536]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	4a85      	ldr	r2, [pc, #532]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800763e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007642:	6113      	str	r3, [r2, #16]
 8007644:	4b83      	ldr	r3, [pc, #524]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007646:	6919      	ldr	r1, [r3, #16]
 8007648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007650:	4a80      	ldr	r2, [pc, #512]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007652:	430b      	orrs	r3, r1
 8007654:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007662:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007664:	2300      	movs	r3, #0
 8007666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007668:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800766c:	460b      	mov	r3, r1
 800766e:	4313      	orrs	r3, r2
 8007670:	d009      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007672:	4b78      	ldr	r3, [pc, #480]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007676:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007680:	4a74      	ldr	r2, [pc, #464]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007682:	430b      	orrs	r3, r1
 8007684:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007692:	633b      	str	r3, [r7, #48]	@ 0x30
 8007694:	2300      	movs	r3, #0
 8007696:	637b      	str	r3, [r7, #52]	@ 0x34
 8007698:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800769c:	460b      	mov	r3, r1
 800769e:	4313      	orrs	r3, r2
 80076a0:	d00a      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076a2:	4b6c      	ldr	r3, [pc, #432]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b2:	4a68      	ldr	r2, [pc, #416]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80076b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	2100      	movs	r1, #0
 80076c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80076ce:	460b      	mov	r3, r1
 80076d0:	4313      	orrs	r3, r2
 80076d2:	d011      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d8:	3308      	adds	r3, #8
 80076da:	2100      	movs	r1, #0
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 f99d 	bl	8008a1c <RCCEx_PLL2_Config>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80076e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	2100      	movs	r1, #0
 8007702:	6239      	str	r1, [r7, #32]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24
 800770a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800770e:	460b      	mov	r3, r1
 8007710:	4313      	orrs	r3, r2
 8007712:	d011      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007718:	3308      	adds	r3, #8
 800771a:	2101      	movs	r1, #1
 800771c:	4618      	mov	r0, r3
 800771e:	f001 f97d 	bl	8008a1c <RCCEx_PLL2_Config>
 8007722:	4603      	mov	r3, r0
 8007724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007734:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	2100      	movs	r1, #0
 8007742:	61b9      	str	r1, [r7, #24]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800774e:	460b      	mov	r3, r1
 8007750:	4313      	orrs	r3, r2
 8007752:	d011      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007758:	3308      	adds	r3, #8
 800775a:	2102      	movs	r1, #2
 800775c:	4618      	mov	r0, r3
 800775e:	f001 f95d 	bl	8008a1c <RCCEx_PLL2_Config>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007774:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	2100      	movs	r1, #0
 8007782:	6139      	str	r1, [r7, #16]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800778e:	460b      	mov	r3, r1
 8007790:	4313      	orrs	r3, r2
 8007792:	d011      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	3328      	adds	r3, #40	@ 0x28
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f001 f9ef 	bl	8008b80 <RCCEx_PLL3_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80077a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	2100      	movs	r1, #0
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80077ce:	460b      	mov	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d011      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d8:	3328      	adds	r3, #40	@ 0x28
 80077da:	2101      	movs	r1, #1
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 f9cf 	bl	8008b80 <RCCEx_PLL3_Config>
 80077e2:	4603      	mov	r3, r0
 80077e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80077e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80077f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	2100      	movs	r1, #0
 8007802:	6039      	str	r1, [r7, #0]
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	607b      	str	r3, [r7, #4]
 800780a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800780e:	460b      	mov	r3, r1
 8007810:	4313      	orrs	r3, r2
 8007812:	d011      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007818:	3328      	adds	r3, #40	@ 0x28
 800781a:	2102      	movs	r1, #2
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f9af 	bl	8008b80 <RCCEx_PLL3_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007838:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	e000      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
}
 8007846:	4618      	mov	r0, r3
 8007848:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800784c:	46bd      	mov	sp, r7
 800784e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007852:	bf00      	nop
 8007854:	58024400 	.word	0x58024400

08007858 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b090      	sub	sp, #64	@ 0x40
 800785c:	af00      	add	r7, sp, #0
 800785e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007866:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800786a:	430b      	orrs	r3, r1
 800786c:	f040 8094 	bne.w	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007870:	4b9b      	ldr	r3, [pc, #620]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007874:	f003 0307 	and.w	r3, r3, #7
 8007878:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	2b04      	cmp	r3, #4
 800787e:	f200 8087 	bhi.w	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	0800789d 	.word	0x0800789d
 800788c:	080078c5 	.word	0x080078c5
 8007890:	080078ed 	.word	0x080078ed
 8007894:	08007989 	.word	0x08007989
 8007898:	08007915 	.word	0x08007915
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800789c:	4b90      	ldr	r3, [pc, #576]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078a8:	d108      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 ff62 	bl	8008778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078b8:	f000 bc93 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c0:	f000 bc8f 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078c4:	4b86      	ldr	r3, [pc, #536]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d0:	d108      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d2:	f107 0318 	add.w	r3, r7, #24
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fca6 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e0:	f000 bc7f 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e8:	f000 bc7b 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078ec:	4b7c      	ldr	r3, [pc, #496]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078f8:	d108      	bne.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078fa:	f107 030c 	add.w	r3, r7, #12
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fde6 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007908:	f000 bc6b 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800790c:	2300      	movs	r3, #0
 800790e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007910:	f000 bc67 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007914:	4b72      	ldr	r3, [pc, #456]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007918:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800791c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800791e:	4b70      	ldr	r3, [pc, #448]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	2b04      	cmp	r3, #4
 8007928:	d10c      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800792a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800792c:	2b00      	cmp	r3, #0
 800792e:	d109      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007930:	4b6b      	ldr	r3, [pc, #428]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	08db      	lsrs	r3, r3, #3
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	4a6a      	ldr	r2, [pc, #424]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800793c:	fa22 f303 	lsr.w	r3, r2, r3
 8007940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007942:	e01f      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007944:	4b66      	ldr	r3, [pc, #408]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800794c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007950:	d106      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007958:	d102      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800795a:	4b63      	ldr	r3, [pc, #396]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800795c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800795e:	e011      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007960:	4b5f      	ldr	r3, [pc, #380]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800796c:	d106      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800796e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007974:	d102      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007976:	4b5d      	ldr	r3, [pc, #372]	@ (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007978:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800797a:	e003      	b.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007980:	f000 bc2f 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007984:	f000 bc2d 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007988:	4b59      	ldr	r3, [pc, #356]	@ (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800798c:	f000 bc29 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007994:	f000 bc25 	b.w	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80079a0:	430b      	orrs	r3, r1
 80079a2:	f040 80a7 	bne.w	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80079a6:	4b4e      	ldr	r3, [pc, #312]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079aa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80079ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079b6:	d054      	beq.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079be:	f200 808b 	bhi.w	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80079c8:	f000 8083 	beq.w	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80079d2:	f200 8081 	bhi.w	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079dc:	d02f      	beq.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079e4:	d878      	bhi.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80079ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079f2:	d012      	beq.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80079f4:	e070      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079f6:	4b3a      	ldr	r3, [pc, #232]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a02:	d107      	bne.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 feb5 	bl	8008778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a12:	e3e6      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a18:	e3e3      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a1a:	4b31      	ldr	r3, [pc, #196]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a26:	d107      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a28:	f107 0318 	add.w	r3, r7, #24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fbfb 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a36:	e3d4      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a3c:	e3d1      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a3e:	4b28      	ldr	r3, [pc, #160]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a4a:	d107      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a4c:	f107 030c 	add.w	r3, r7, #12
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fd3d 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a5a:	e3c2      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a60:	e3bf      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a62:	4b1f      	ldr	r3, [pc, #124]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d10c      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a7e:	4b18      	ldr	r3, [pc, #96]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	08db      	lsrs	r3, r3, #3
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	4a16      	ldr	r2, [pc, #88]	@ (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a90:	e01e      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a92:	4b13      	ldr	r3, [pc, #76]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a9e:	d106      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007aa6:	d102      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aac:	e010      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007aae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aba:	d106      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ac2:	d102      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ac4:	4b09      	ldr	r3, [pc, #36]	@ (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac8:	e002      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ace:	e388      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ad0:	e387      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ad2:	4b07      	ldr	r3, [pc, #28]	@ (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ad6:	e384      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007adc:	e381      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ade:	bf00      	nop
 8007ae0:	58024400 	.word	0x58024400
 8007ae4:	03d09000 	.word	0x03d09000
 8007ae8:	003d0900 	.word	0x003d0900
 8007aec:	02dc6c00 	.word	0x02dc6c00
 8007af0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007afc:	430b      	orrs	r3, r1
 8007afe:	f040 809c 	bne.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007b02:	4b9e      	ldr	r3, [pc, #632]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b06:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007b0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b12:	d054      	beq.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b1a:	f200 808b 	bhi.w	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b24:	f000 8083 	beq.w	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b2e:	f200 8081 	bhi.w	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b38:	d02f      	beq.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b40:	d878      	bhi.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b4e:	d012      	beq.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007b50:	e070      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b52:	4b8a      	ldr	r3, [pc, #552]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b5e:	d107      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fe07 	bl	8008778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b6e:	e338      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b74:	e335      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b76:	4b81      	ldr	r3, [pc, #516]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b82:	d107      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b84:	f107 0318 	add.w	r3, r7, #24
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 fb4d 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b92:	e326      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b98:	e323      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b9a:	4b78      	ldr	r3, [pc, #480]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ba6:	d107      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ba8:	f107 030c 	add.w	r3, r7, #12
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fc8f 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bb6:	e314      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bbc:	e311      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007bc6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d10c      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bda:	4b68      	ldr	r3, [pc, #416]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	08db      	lsrs	r3, r3, #3
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	4a66      	ldr	r2, [pc, #408]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007be6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bec:	e01e      	b.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bee:	4b63      	ldr	r3, [pc, #396]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bfa:	d106      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c02:	d102      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c04:	4b5f      	ldr	r3, [pc, #380]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c08:	e010      	b.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c16:	d106      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c1e:	d102      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c20:	4b59      	ldr	r3, [pc, #356]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c24:	e002      	b.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c2a:	e2da      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007c2c:	e2d9      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c2e:	4b57      	ldr	r3, [pc, #348]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c32:	e2d6      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c38:	e2d3      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c3e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007c42:	430b      	orrs	r3, r1
 8007c44:	f040 80a7 	bne.w	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007c48:	4b4c      	ldr	r3, [pc, #304]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007c50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c58:	d055      	beq.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c60:	f200 8096 	bhi.w	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c6a:	f000 8084 	beq.w	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c74:	f200 808c 	bhi.w	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c7e:	d030      	beq.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c86:	f200 8083 	bhi.w	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d004      	beq.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c96:	d012      	beq.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007c98:	e07a      	b.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c9a:	4b38      	ldr	r3, [pc, #224]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ca2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ca6:	d107      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fd63 	bl	8008778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cb6:	e294      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cbc:	e291      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cca:	d107      	bne.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ccc:	f107 0318 	add.w	r3, r7, #24
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 faa9 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cda:	e282      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce0:	e27f      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ce2:	4b26      	ldr	r3, [pc, #152]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cee:	d107      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cf0:	f107 030c 	add.w	r3, r7, #12
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fbeb 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cfe:	e270      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d04:	e26d      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d06:	4b1d      	ldr	r3, [pc, #116]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d10:	4b1a      	ldr	r3, [pc, #104]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d10c      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d22:	4b16      	ldr	r3, [pc, #88]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	08db      	lsrs	r3, r3, #3
 8007d28:	f003 0303 	and.w	r3, r3, #3
 8007d2c:	4a14      	ldr	r2, [pc, #80]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d34:	e01e      	b.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d36:	4b11      	ldr	r3, [pc, #68]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d42:	d106      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d4a:	d102      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d50:	e010      	b.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d52:	4b0a      	ldr	r3, [pc, #40]	@ (8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d5e:	d106      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d66:	d102      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d68:	4b07      	ldr	r3, [pc, #28]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d6c:	e002      	b.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d72:	e236      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d74:	e235      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d76:	4b05      	ldr	r3, [pc, #20]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d7a:	e232      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d7c:	58024400 	.word	0x58024400
 8007d80:	03d09000 	.word	0x03d09000
 8007d84:	003d0900 	.word	0x003d0900
 8007d88:	02dc6c00 	.word	0x02dc6c00
 8007d8c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d94:	e225      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d9a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	f040 8085 	bne.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007da4:	4b9c      	ldr	r3, [pc, #624]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007dac:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007db4:	d06b      	beq.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dbc:	d874      	bhi.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dc4:	d056      	beq.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dcc:	d86c      	bhi.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dd4:	d03b      	beq.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ddc:	d864      	bhi.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de4:	d021      	beq.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dec:	d85c      	bhi.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dfa:	d004      	beq.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007dfc:	e054      	b.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007dfe:	f7fe fb5f 	bl	80064c0 <HAL_RCC_GetPCLK1Freq>
 8007e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e04:	e1ed      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e06:	4b84      	ldr	r3, [pc, #528]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e12:	d107      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e14:	f107 0318 	add.w	r3, r7, #24
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fa05 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e22:	e1de      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e28:	e1db      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e36:	d107      	bne.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e38:	f107 030c 	add.w	r3, r7, #12
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fb47 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e46:	e1cc      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e4c:	e1c9      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e4e:	4b72      	ldr	r3, [pc, #456]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d109      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	08db      	lsrs	r3, r3, #3
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	4a6d      	ldr	r2, [pc, #436]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007e66:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e6c:	e1b9      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e72:	e1b6      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e74:	4b68      	ldr	r3, [pc, #416]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e80:	d102      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007e82:	4b67      	ldr	r3, [pc, #412]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e86:	e1ac      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e8c:	e1a9      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e8e:	4b62      	ldr	r3, [pc, #392]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e9a:	d102      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007e9c:	4b61      	ldr	r3, [pc, #388]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea0:	e19f      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea6:	e19c      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eac:	e199      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007eb6:	430b      	orrs	r3, r1
 8007eb8:	d173      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007eba:	4b57      	ldr	r3, [pc, #348]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ebe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ec2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eca:	d02f      	beq.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ed2:	d863      	bhi.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ee0:	d012      	beq.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007ee2:	e05b      	b.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ef0:	d107      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ef2:	f107 0318 	add.w	r3, r7, #24
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f996 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f00:	e16f      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f06:	e16c      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f08:	4b43      	ldr	r3, [pc, #268]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f14:	d107      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fad8 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f24:	e15d      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2a:	e15a      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f36:	4b38      	ldr	r3, [pc, #224]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d10c      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d109      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f48:	4b33      	ldr	r3, [pc, #204]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	08db      	lsrs	r3, r3, #3
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	4a32      	ldr	r2, [pc, #200]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007f54:	fa22 f303 	lsr.w	r3, r2, r3
 8007f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f5a:	e01e      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f68:	d106      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f70:	d102      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f72:	4b2b      	ldr	r3, [pc, #172]	@ (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f76:	e010      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f78:	4b27      	ldr	r3, [pc, #156]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f84:	d106      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f8c:	d102      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f8e:	4b25      	ldr	r3, [pc, #148]	@ (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f92:	e002      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f98:	e123      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f9a:	e122      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fa0:	e11f      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007faa:	430b      	orrs	r3, r1
 8007fac:	d13c      	bne.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007fae:	4b1a      	ldr	r3, [pc, #104]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d004      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fc4:	d012      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007fc6:	e023      	b.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fc8:	4b13      	ldr	r3, [pc, #76]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fd4:	d107      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fbcc 	bl	8008778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe4:	e0fd      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fea:	e0fa      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fec:	4b0a      	ldr	r3, [pc, #40]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ff8:	d107      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffa:	f107 0318 	add.w	r3, r7, #24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 f912 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008008:	e0eb      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800800e:	e0e8      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008014:	e0e5      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008016:	bf00      	nop
 8008018:	58024400 	.word	0x58024400
 800801c:	03d09000 	.word	0x03d09000
 8008020:	003d0900 	.word	0x003d0900
 8008024:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008030:	430b      	orrs	r3, r1
 8008032:	f040 8085 	bne.w	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008036:	4b6d      	ldr	r3, [pc, #436]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800803a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800803e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008046:	d06b      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800804e:	d874      	bhi.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008056:	d056      	beq.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800805e:	d86c      	bhi.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008062:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008066:	d03b      	beq.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800806e:	d864      	bhi.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008076:	d021      	beq.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800807e:	d85c      	bhi.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800808c:	d004      	beq.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800808e:	e054      	b.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008090:	f000 f8b4 	bl	80081fc <HAL_RCCEx_GetD3PCLK1Freq>
 8008094:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008096:	e0a4      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008098:	4b54      	ldr	r3, [pc, #336]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a4:	d107      	bne.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080a6:	f107 0318 	add.w	r3, r7, #24
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f8bc 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080b4:	e095      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ba:	e092      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080bc:	4b4b      	ldr	r3, [pc, #300]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080c8:	d107      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ca:	f107 030c 	add.w	r3, r7, #12
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f9fe 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d8:	e083      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080de:	e080      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080e0:	4b42      	ldr	r3, [pc, #264]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d109      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080ec:	4b3f      	ldr	r3, [pc, #252]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	08db      	lsrs	r3, r3, #3
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	4a3e      	ldr	r2, [pc, #248]	@ (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
 80080fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fe:	e070      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008104:	e06d      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008106:	4b39      	ldr	r3, [pc, #228]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800810e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008112:	d102      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008114:	4b37      	ldr	r3, [pc, #220]	@ (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008118:	e063      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800811e:	e060      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008120:	4b32      	ldr	r3, [pc, #200]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800812c:	d102      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800812e:	4b32      	ldr	r3, [pc, #200]	@ (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008132:	e056      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008138:	e053      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800813e:	e050      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008144:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008148:	430b      	orrs	r3, r1
 800814a:	d148      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800814c:	4b27      	ldr	r3, [pc, #156]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800814e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008150:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008154:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800815c:	d02a      	beq.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800815e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008164:	d838      	bhi.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008172:	d00d      	beq.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008174:	e030      	b.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008176:	4b1d      	ldr	r3, [pc, #116]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800817e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008182:	d102      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008184:	4b1c      	ldr	r3, [pc, #112]	@ (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008188:	e02b      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800818e:	e028      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008190:	4b16      	ldr	r3, [pc, #88]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008198:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800819c:	d107      	bne.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800819e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fae8 	bl	8008778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ac:	e019      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081b2:	e016      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081b4:	4b0d      	ldr	r3, [pc, #52]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081c0:	d107      	bne.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081c2:	f107 0318 	add.w	r3, r7, #24
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 f82e 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d0:	e007      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d6:	e004      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081dc:	e001      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80081e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3740      	adds	r7, #64	@ 0x40
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	58024400 	.word	0x58024400
 80081f0:	03d09000 	.word	0x03d09000
 80081f4:	003d0900 	.word	0x003d0900
 80081f8:	02dc6c00 	.word	0x02dc6c00

080081fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008200:	f7fe f92e 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 8008204:	4602      	mov	r2, r0
 8008206:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	091b      	lsrs	r3, r3, #4
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	4904      	ldr	r1, [pc, #16]	@ (8008224 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008212:	5ccb      	ldrb	r3, [r1, r3]
 8008214:	f003 031f 	and.w	r3, r3, #31
 8008218:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800821c:	4618      	mov	r0, r3
 800821e:	bd80      	pop	{r7, pc}
 8008220:	58024400 	.word	0x58024400
 8008224:	0801235c 	.word	0x0801235c

08008228 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008228:	b480      	push	{r7}
 800822a:	b089      	sub	sp, #36	@ 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008230:	4ba1      	ldr	r3, [pc, #644]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800823a:	4b9f      	ldr	r3, [pc, #636]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823e:	0b1b      	lsrs	r3, r3, #12
 8008240:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008244:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008246:	4b9c      	ldr	r3, [pc, #624]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824a:	091b      	lsrs	r3, r3, #4
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008252:	4b99      	ldr	r3, [pc, #612]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8111 	beq.w	8008498 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b02      	cmp	r3, #2
 800827a:	f000 8083 	beq.w	8008384 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b02      	cmp	r3, #2
 8008282:	f200 80a1 	bhi.w	80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d056      	beq.n	8008340 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008292:	e099      	b.n	80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008294:	4b88      	ldr	r3, [pc, #544]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0320 	and.w	r3, r3, #32
 800829c:	2b00      	cmp	r3, #0
 800829e:	d02d      	beq.n	80082fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082a0:	4b85      	ldr	r3, [pc, #532]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	08db      	lsrs	r3, r3, #3
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	4a84      	ldr	r2, [pc, #528]	@ (80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082ac:	fa22 f303 	lsr.w	r3, r2, r3
 80082b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	ee07 3a90 	vmov	s15, r3
 80082b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ca:	4b7b      	ldr	r3, [pc, #492]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082da:	ed97 6a03 	vldr	s12, [r7, #12]
 80082de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082fa:	e087      	b.n	800840c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008306:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800830a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830e:	4b6a      	ldr	r3, [pc, #424]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008322:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800833e:	e065      	b.n	800840c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800834e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008352:	4b59      	ldr	r3, [pc, #356]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008362:	ed97 6a03 	vldr	s12, [r7, #12]
 8008366:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800836a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008382:	e043      	b.n	800840c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008396:	4b48      	ldr	r3, [pc, #288]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083c6:	e021      	b.n	800840c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083da:	4b37      	ldr	r3, [pc, #220]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800840a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800840c:	4b2a      	ldr	r3, [pc, #168]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	0a5b      	lsrs	r3, r3, #9
 8008412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008426:	edd7 6a07 	vldr	s13, [r7, #28]
 800842a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800842e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008432:	ee17 2a90 	vmov	r2, s15
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800843a:	4b1f      	ldr	r3, [pc, #124]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800843c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843e:	0c1b      	lsrs	r3, r3, #16
 8008440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008454:	edd7 6a07 	vldr	s13, [r7, #28]
 8008458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800845c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008460:	ee17 2a90 	vmov	r2, s15
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008468:	4b13      	ldr	r3, [pc, #76]	@ (80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800846a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846c:	0e1b      	lsrs	r3, r3, #24
 800846e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800847e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008482:	edd7 6a07 	vldr	s13, [r7, #28]
 8008486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800848a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800848e:	ee17 2a90 	vmov	r2, s15
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008496:	e008      	b.n	80084aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	609a      	str	r2, [r3, #8]
}
 80084aa:	bf00      	nop
 80084ac:	3724      	adds	r7, #36	@ 0x24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	58024400 	.word	0x58024400
 80084bc:	03d09000 	.word	0x03d09000
 80084c0:	46000000 	.word	0x46000000
 80084c4:	4c742400 	.word	0x4c742400
 80084c8:	4a742400 	.word	0x4a742400
 80084cc:	4c371b00 	.word	0x4c371b00

080084d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b089      	sub	sp, #36	@ 0x24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084d8:	4ba1      	ldr	r3, [pc, #644]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80084e2:	4b9f      	ldr	r3, [pc, #636]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e6:	0d1b      	lsrs	r3, r3, #20
 80084e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80084ee:	4b9c      	ldr	r3, [pc, #624]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f2:	0a1b      	lsrs	r3, r3, #8
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80084fa:	4b99      	ldr	r3, [pc, #612]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084fe:	08db      	lsrs	r3, r3, #3
 8008500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	fb02 f303 	mul.w	r3, r2, r3
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8111 	beq.w	8008740 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b02      	cmp	r3, #2
 8008522:	f000 8083 	beq.w	800862c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	2b02      	cmp	r3, #2
 800852a:	f200 80a1 	bhi.w	8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d056      	beq.n	80085e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800853a:	e099      	b.n	8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800853c:	4b88      	ldr	r3, [pc, #544]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02d      	beq.n	80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008548:	4b85      	ldr	r3, [pc, #532]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	08db      	lsrs	r3, r3, #3
 800854e:	f003 0303 	and.w	r3, r3, #3
 8008552:	4a84      	ldr	r2, [pc, #528]	@ (8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
 8008558:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	ee07 3a90 	vmov	s15, r3
 8008560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008572:	4b7b      	ldr	r3, [pc, #492]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008582:	ed97 6a03 	vldr	s12, [r7, #12]
 8008586:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800858a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800858e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085a2:	e087      	b.n	80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800876c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085be:	ee07 3a90 	vmov	s15, r3
 80085c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085e6:	e065      	b.n	80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085fa:	4b59      	ldr	r3, [pc, #356]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008602:	ee07 3a90 	vmov	s15, r3
 8008606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860a:	ed97 6a03 	vldr	s12, [r7, #12]
 800860e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800861a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800861e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800862a:	e043      	b.n	80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008636:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800863a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863e:	4b48      	ldr	r3, [pc, #288]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008652:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800866e:	e021      	b.n	80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800867e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008682:	4b37      	ldr	r3, [pc, #220]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008692:	ed97 6a03 	vldr	s12, [r7, #12]
 8008696:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800869a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086b4:	4b2a      	ldr	r3, [pc, #168]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b8:	0a5b      	lsrs	r3, r3, #9
 80086ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086da:	ee17 2a90 	vmov	r2, s15
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80086e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008708:	ee17 2a90 	vmov	r2, s15
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008710:	4b13      	ldr	r3, [pc, #76]	@ (8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008714:	0e1b      	lsrs	r3, r3, #24
 8008716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800872a:	edd7 6a07 	vldr	s13, [r7, #28]
 800872e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008736:	ee17 2a90 	vmov	r2, s15
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800873e:	e008      	b.n	8008752 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	609a      	str	r2, [r3, #8]
}
 8008752:	bf00      	nop
 8008754:	3724      	adds	r7, #36	@ 0x24
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	58024400 	.word	0x58024400
 8008764:	03d09000 	.word	0x03d09000
 8008768:	46000000 	.word	0x46000000
 800876c:	4c742400 	.word	0x4c742400
 8008770:	4a742400 	.word	0x4a742400
 8008774:	4c371b00 	.word	0x4c371b00

08008778 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008778:	b480      	push	{r7}
 800877a:	b089      	sub	sp, #36	@ 0x24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008780:	4ba0      	ldr	r3, [pc, #640]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008784:	f003 0303 	and.w	r3, r3, #3
 8008788:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800878a:	4b9e      	ldr	r3, [pc, #632]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800878c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878e:	091b      	lsrs	r3, r3, #4
 8008790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008794:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008796:	4b9b      	ldr	r3, [pc, #620]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087a0:	4b98      	ldr	r3, [pc, #608]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a4:	08db      	lsrs	r3, r3, #3
 80087a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	fb02 f303 	mul.w	r3, r2, r3
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8111 	beq.w	80089e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	f000 8083 	beq.w	80088d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	f200 80a1 	bhi.w	8008916 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d056      	beq.n	800888e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80087e0:	e099      	b.n	8008916 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e2:	4b88      	ldr	r3, [pc, #544]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d02d      	beq.n	800884a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087ee:	4b85      	ldr	r3, [pc, #532]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	4a83      	ldr	r2, [pc, #524]	@ (8008a08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80087fa:	fa22 f303 	lsr.w	r3, r2, r3
 80087fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008818:	4b7a      	ldr	r3, [pc, #488]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800881a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008828:	ed97 6a03 	vldr	s12, [r7, #12]
 800882c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008838:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800883c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008844:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008848:	e087      	b.n	800895a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	ee07 3a90 	vmov	s15, r3
 8008850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008854:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008a10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885c:	4b69      	ldr	r3, [pc, #420]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800885e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008864:	ee07 3a90 	vmov	s15, r3
 8008868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008870:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008888:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800888c:	e065      	b.n	800895a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	ee07 3a90 	vmov	s15, r3
 8008894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008898:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008a14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800889c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a0:	4b58      	ldr	r3, [pc, #352]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a8:	ee07 3a90 	vmov	s15, r3
 80088ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088d0:	e043      	b.n	800895a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	ee07 3a90 	vmov	s15, r3
 80088d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80088e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e4:	4b47      	ldr	r3, [pc, #284]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ec:	ee07 3a90 	vmov	s15, r3
 80088f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088f8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008904:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008910:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008914:	e021      	b.n	800895a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008920:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008a10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008928:	4b36      	ldr	r3, [pc, #216]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800892a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008930:	ee07 3a90 	vmov	s15, r3
 8008934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008938:	ed97 6a03 	vldr	s12, [r7, #12]
 800893c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008948:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800894c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008954:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008958:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800895a:	4b2a      	ldr	r3, [pc, #168]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800895c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895e:	0a5b      	lsrs	r3, r3, #9
 8008960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008964:	ee07 3a90 	vmov	s15, r3
 8008968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008974:	edd7 6a07 	vldr	s13, [r7, #28]
 8008978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008980:	ee17 2a90 	vmov	r2, s15
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008988:	4b1e      	ldr	r3, [pc, #120]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800898a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898c:	0c1b      	lsrs	r3, r3, #16
 800898e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008992:	ee07 3a90 	vmov	s15, r3
 8008996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800899e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ae:	ee17 2a90 	vmov	r2, s15
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80089b6:	4b13      	ldr	r3, [pc, #76]	@ (8008a04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ba:	0e1b      	lsrs	r3, r3, #24
 80089bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089c0:	ee07 3a90 	vmov	s15, r3
 80089c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089dc:	ee17 2a90 	vmov	r2, s15
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80089e4:	e008      	b.n	80089f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	609a      	str	r2, [r3, #8]
}
 80089f8:	bf00      	nop
 80089fa:	3724      	adds	r7, #36	@ 0x24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	58024400 	.word	0x58024400
 8008a08:	03d09000 	.word	0x03d09000
 8008a0c:	46000000 	.word	0x46000000
 8008a10:	4c742400 	.word	0x4c742400
 8008a14:	4a742400 	.word	0x4a742400
 8008a18:	4c371b00 	.word	0x4c371b00

08008a1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a2a:	4b53      	ldr	r3, [pc, #332]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d101      	bne.n	8008a3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e099      	b.n	8008b6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a4e      	ldr	r2, [pc, #312]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008a40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a46:	f7fa fdd1 	bl	80035ec <HAL_GetTick>
 8008a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a4c:	e008      	b.n	8008a60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a4e:	f7fa fdcd 	bl	80035ec <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d901      	bls.n	8008a60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e086      	b.n	8008b6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a60:	4b45      	ldr	r3, [pc, #276]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1f0      	bne.n	8008a4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a6c:	4b42      	ldr	r3, [pc, #264]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	031b      	lsls	r3, r3, #12
 8008a7a:	493f      	ldr	r1, [pc, #252]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	025b      	lsls	r3, r3, #9
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	431a      	orrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	041b      	lsls	r3, r3, #16
 8008a9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	061b      	lsls	r3, r3, #24
 8008aac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ab0:	4931      	ldr	r1, [pc, #196]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ab6:	4b30      	ldr	r3, [pc, #192]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	492d      	ldr	r1, [pc, #180]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008acc:	f023 0220 	bic.w	r2, r3, #32
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	4928      	ldr	r1, [pc, #160]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ada:	4b27      	ldr	r3, [pc, #156]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ade:	4a26      	ldr	r2, [pc, #152]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008ae0:	f023 0310 	bic.w	r3, r3, #16
 8008ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ae6:	4b24      	ldr	r3, [pc, #144]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008aea:	4b24      	ldr	r3, [pc, #144]	@ (8008b7c <RCCEx_PLL2_Config+0x160>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	69d2      	ldr	r2, [r2, #28]
 8008af2:	00d2      	lsls	r2, r2, #3
 8008af4:	4920      	ldr	r1, [pc, #128]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008afa:	4b1f      	ldr	r3, [pc, #124]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afe:	4a1e      	ldr	r2, [pc, #120]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b00:	f043 0310 	orr.w	r3, r3, #16
 8008b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d106      	bne.n	8008b1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b10:	4a19      	ldr	r2, [pc, #100]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b18:	e00f      	b.n	8008b3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d106      	bne.n	8008b2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b20:	4b15      	ldr	r3, [pc, #84]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	4a14      	ldr	r2, [pc, #80]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008b2c:	e005      	b.n	8008b3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b2e:	4b12      	ldr	r3, [pc, #72]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b32:	4a11      	ldr	r2, [pc, #68]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b46:	f7fa fd51 	bl	80035ec <HAL_GetTick>
 8008b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b4c:	e008      	b.n	8008b60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b4e:	f7fa fd4d 	bl	80035ec <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d901      	bls.n	8008b60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e006      	b.n	8008b6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b60:	4b05      	ldr	r3, [pc, #20]	@ (8008b78 <RCCEx_PLL2_Config+0x15c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0f0      	beq.n	8008b4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	58024400 	.word	0x58024400
 8008b7c:	ffff0007 	.word	0xffff0007

08008b80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b8e:	4b53      	ldr	r3, [pc, #332]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d101      	bne.n	8008b9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e099      	b.n	8008cd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008ba4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008baa:	f7fa fd1f 	bl	80035ec <HAL_GetTick>
 8008bae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bb0:	e008      	b.n	8008bc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bb2:	f7fa fd1b 	bl	80035ec <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d901      	bls.n	8008bc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e086      	b.n	8008cd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bc4:	4b45      	ldr	r3, [pc, #276]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1f0      	bne.n	8008bb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008bd0:	4b42      	ldr	r3, [pc, #264]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	051b      	lsls	r3, r3, #20
 8008bde:	493f      	ldr	r1, [pc, #252]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	628b      	str	r3, [r1, #40]	@ 0x28
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	025b      	lsls	r3, r3, #9
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	041b      	lsls	r3, r3, #16
 8008c02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	061b      	lsls	r3, r3, #24
 8008c10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008c14:	4931      	ldr	r1, [pc, #196]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c16:	4313      	orrs	r3, r2
 8008c18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c1a:	4b30      	ldr	r3, [pc, #192]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	492d      	ldr	r1, [pc, #180]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	4928      	ldr	r1, [pc, #160]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c3e:	4b27      	ldr	r3, [pc, #156]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c42:	4a26      	ldr	r2, [pc, #152]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c4a:	4b24      	ldr	r3, [pc, #144]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c4e:	4b24      	ldr	r3, [pc, #144]	@ (8008ce0 <RCCEx_PLL3_Config+0x160>)
 8008c50:	4013      	ands	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	69d2      	ldr	r2, [r2, #28]
 8008c56:	00d2      	lsls	r2, r2, #3
 8008c58:	4920      	ldr	r1, [pc, #128]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c62:	4a1e      	ldr	r2, [pc, #120]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c70:	4b1a      	ldr	r3, [pc, #104]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c74:	4a19      	ldr	r2, [pc, #100]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c7c:	e00f      	b.n	8008c9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d106      	bne.n	8008c92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c84:	4b15      	ldr	r3, [pc, #84]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c88:	4a14      	ldr	r2, [pc, #80]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008c90:	e005      	b.n	8008c9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c92:	4b12      	ldr	r3, [pc, #72]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c96:	4a11      	ldr	r2, [pc, #68]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008c98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008caa:	f7fa fc9f 	bl	80035ec <HAL_GetTick>
 8008cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cb0:	e008      	b.n	8008cc4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cb2:	f7fa fc9b 	bl	80035ec <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d901      	bls.n	8008cc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e006      	b.n	8008cd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cc4:	4b05      	ldr	r3, [pc, #20]	@ (8008cdc <RCCEx_PLL3_Config+0x15c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0f0      	beq.n	8008cb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	58024400 	.word	0x58024400
 8008ce0:	ffff0007 	.word	0xffff0007

08008ce4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08a      	sub	sp, #40	@ 0x28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e075      	b.n	8008de2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d105      	bne.n	8008d0e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7f9 fb9b 	bl	8002444 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2204      	movs	r2, #4
 8008d12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f868 	bl	8008dec <HAL_SD_InitCard>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e05d      	b.n	8008de2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008d26:	f107 0308 	add.w	r3, r7, #8
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fa9d 	bl	800926c <HAL_SD_GetCardStatus>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e052      	b.n	8008de2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008d3c:	7e3b      	ldrb	r3, [r7, #24]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008d42:	7e7b      	ldrb	r3, [r7, #25]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d10a      	bne.n	8008d66 <HAL_SD_Init+0x82>
 8008d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d102      	bne.n	8008d5c <HAL_SD_Init+0x78>
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d62:	659a      	str	r2, [r3, #88]	@ 0x58
 8008d64:	e00b      	b.n	8008d7e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d104      	bne.n	8008d78 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d74:	659a      	str	r2, [r3, #88]	@ 0x58
 8008d76:	e002      	b.n	8008d7e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fb2f 	bl	80093e8 <HAL_SD_ConfigWideBusOperation>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e026      	b.n	8008de2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008d94:	f7fa fc2a 	bl	80035ec <HAL_GetTick>
 8008d98:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008d9a:	e011      	b.n	8008dc0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d9c:	f7fa fc26 	bl	80035ec <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008daa:	d109      	bne.n	8008dc0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008db2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e010      	b.n	8008de2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fc23 	bl	800960c <HAL_SD_GetCardState>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d1e7      	bne.n	8008d9c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3728      	adds	r7, #40	@ 0x28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b08d      	sub	sp, #52	@ 0x34
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008e04:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008e08:	f04f 0100 	mov.w	r1, #0
 8008e0c:	f7fe fd24 	bl	8007858 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e10:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d109      	bne.n	8008e2c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008e26:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e070      	b.n	8008f0e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	4a39      	ldr	r2, [pc, #228]	@ (8008f18 <HAL_SD_InitCard+0x12c>)
 8008e32:	fba2 2303 	umull	r2, r3, r2, r3
 8008e36:	091b      	lsrs	r3, r3, #4
 8008e38:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681c      	ldr	r4, [r3, #0]
 8008e3e:	466a      	mov	r2, sp
 8008e40:	f107 0318 	add.w	r3, r7, #24
 8008e44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e48:	e882 0003 	stmia.w	r2, {r0, r1}
 8008e4c:	f107 030c 	add.w	r3, r7, #12
 8008e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e52:	4620      	mov	r0, r4
 8008e54:	f004 fad2 	bl	800d3fc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f004 fb04 	bl	800d46a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d007      	beq.n	8008e8a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008e7a:	4a28      	ldr	r2, [pc, #160]	@ (8008f1c <HAL_SD_InitCard+0x130>)
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e82:	3301      	adds	r3, #1
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fa fbbd 	bl	8003604 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fcac 	bl	80097e8 <SD_PowerON>
 8008e90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e02e      	b.n	8008f0e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fbcb 	bl	800964c <SD_InitCard>
 8008eb6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e01b      	b.n	8008f0e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f004 fb58 	bl	800d594 <SDMMC_CmdBlockLength>
 8008ee4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00f      	beq.n	8008f0c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8008f20 <HAL_SD_InitCard+0x134>)
 8008ef2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	372c      	adds	r7, #44	@ 0x2c
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd90      	pop	{r4, r7, pc}
 8008f16:	bf00      	nop
 8008f18:	014f8b59 	.word	0x014f8b59
 8008f1c:	00012110 	.word	0x00012110
 8008f20:	1fe00fff 	.word	0x1fe00fff

08008f24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f32:	0f9b      	lsrs	r3, r3, #30
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f3e:	0e9b      	lsrs	r3, r3, #26
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	f003 030f 	and.w	r3, r3, #15
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f50:	0e1b      	lsrs	r3, r3, #24
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 0303 	and.w	r3, r3, #3
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f62:	0c1b      	lsrs	r3, r3, #16
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f6e:	0a1b      	lsrs	r3, r3, #8
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f84:	0d1b      	lsrs	r3, r3, #20
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f90:	0c1b      	lsrs	r3, r3, #16
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f003 030f 	and.w	r3, r3, #15
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fa2:	0bdb      	lsrs	r3, r3, #15
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fb4:	0b9b      	lsrs	r3, r3, #14
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fc6:	0b5b      	lsrs	r3, r3, #13
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fd8:	0b1b      	lsrs	r3, r3, #12
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d163      	bne.n	80090bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ff8:	009a      	lsls	r2, r3, #2
 8008ffa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008ffe:	4013      	ands	r3, r2
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009004:	0f92      	lsrs	r2, r2, #30
 8009006:	431a      	orrs	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009010:	0edb      	lsrs	r3, r3, #27
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	b2da      	uxtb	r2, r3
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009022:	0e1b      	lsrs	r3, r3, #24
 8009024:	b2db      	uxtb	r3, r3
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	b2da      	uxtb	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009034:	0d5b      	lsrs	r3, r3, #21
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	b2da      	uxtb	r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009046:	0c9b      	lsrs	r3, r3, #18
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f003 0307 	and.w	r3, r3, #7
 800904e:	b2da      	uxtb	r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009058:	0bdb      	lsrs	r3, r3, #15
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 0307 	and.w	r3, r3, #7
 8009060:	b2da      	uxtb	r2, r3
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	7e1b      	ldrb	r3, [r3, #24]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	3302      	adds	r3, #2
 800907c:	2201      	movs	r2, #1
 800907e:	fa02 f303 	lsl.w	r3, r2, r3
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009086:	fb03 f202 	mul.w	r2, r3, r2
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	7a1b      	ldrb	r3, [r3, #8]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	f003 030f 	and.w	r3, r3, #15
 8009098:	2201      	movs	r2, #1
 800909a:	409a      	lsls	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80090a8:	0a52      	lsrs	r2, r2, #9
 80090aa:	fb03 f202 	mul.w	r2, r3, r2
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80090ba:	e031      	b.n	8009120 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d11d      	bne.n	8009100 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090c8:	041b      	lsls	r3, r3, #16
 80090ca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	431a      	orrs	r2, r3
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	3301      	adds	r3, #1
 80090e0:	029a      	lsls	r2, r3, #10
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	655a      	str	r2, [r3, #84]	@ 0x54
 80090fe:	e00f      	b.n	8009120 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a58      	ldr	r2, [pc, #352]	@ (8009268 <HAL_SD_GetCardCSD+0x344>)
 8009106:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800910c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e09d      	b.n	800925c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009124:	0b9b      	lsrs	r3, r3, #14
 8009126:	b2db      	uxtb	r3, r3
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	b2da      	uxtb	r2, r3
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009136:	09db      	lsrs	r3, r3, #7
 8009138:	b2db      	uxtb	r3, r3
 800913a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800913e:	b2da      	uxtb	r2, r3
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009158:	0fdb      	lsrs	r3, r3, #31
 800915a:	b2da      	uxtb	r2, r3
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009164:	0f5b      	lsrs	r3, r3, #29
 8009166:	b2db      	uxtb	r3, r3
 8009168:	f003 0303 	and.w	r3, r3, #3
 800916c:	b2da      	uxtb	r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009176:	0e9b      	lsrs	r3, r3, #26
 8009178:	b2db      	uxtb	r3, r3
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	b2da      	uxtb	r2, r3
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009188:	0d9b      	lsrs	r3, r3, #22
 800918a:	b2db      	uxtb	r3, r3
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	b2da      	uxtb	r2, r3
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800919a:	0d5b      	lsrs	r3, r3, #21
 800919c:	b2db      	uxtb	r3, r3
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091b6:	0c1b      	lsrs	r3, r3, #16
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091ca:	0bdb      	lsrs	r3, r3, #15
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091de:	0b9b      	lsrs	r3, r3, #14
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091f2:	0b5b      	lsrs	r3, r3, #13
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	b2da      	uxtb	r2, r3
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009206:	0b1b      	lsrs	r3, r3, #12
 8009208:	b2db      	uxtb	r3, r3
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	b2da      	uxtb	r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800921a:	0a9b      	lsrs	r3, r3, #10
 800921c:	b2db      	uxtb	r3, r3
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	b2da      	uxtb	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800922e:	0a1b      	lsrs	r3, r3, #8
 8009230:	b2db      	uxtb	r3, r3
 8009232:	f003 0303 	and.w	r3, r3, #3
 8009236:	b2da      	uxtb	r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009242:	085b      	lsrs	r3, r3, #1
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800924a:	b2da      	uxtb	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	1fe00fff 	.word	0x1fe00fff

0800926c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b094      	sub	sp, #80	@ 0x50
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b03      	cmp	r3, #3
 8009286:	d101      	bne.n	800928c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e0a7      	b.n	80093dc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800928c:	f107 0308 	add.w	r3, r7, #8
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fb36 	bl	8009904 <SD_SendSDStatus>
 8009298:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800929a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800929c:	2b00      	cmp	r3, #0
 800929e:	d011      	beq.n	80092c4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a4f      	ldr	r2, [pc, #316]	@ (80093e4 <HAL_SD_GetCardStatus+0x178>)
 80092a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092ae:	431a      	orrs	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80092c2:	e070      	b.n	80093a6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	099b      	lsrs	r3, r3, #6
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	095b      	lsrs	r3, r3, #5
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	0a1b      	lsrs	r3, r3, #8
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	0e1b      	lsrs	r3, r3, #24
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4313      	orrs	r3, r2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	061a      	lsls	r2, r3, #24
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800930a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	0a1b      	lsrs	r3, r3, #8
 8009310:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009314:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	0e1b      	lsrs	r3, r3, #24
 800931a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	b2da      	uxtb	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	0a1b      	lsrs	r3, r3, #8
 800932c:	b2da      	uxtb	r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	0d1b      	lsrs	r3, r3, #20
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f003 030f 	and.w	r3, r3, #15
 800933c:	b2da      	uxtb	r2, r3
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	b29b      	uxth	r3, r3
 8009348:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800934c:	b29a      	uxth	r2, r3
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	b29b      	uxth	r3, r3
 8009352:	b2db      	uxtb	r3, r3
 8009354:	b29b      	uxth	r3, r3
 8009356:	4313      	orrs	r3, r2
 8009358:	b29a      	uxth	r2, r3
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	0a9b      	lsrs	r3, r3, #10
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	0a1b      	lsrs	r3, r3, #8
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	b2da      	uxtb	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	091b      	lsrs	r3, r3, #4
 8009382:	b2db      	uxtb	r3, r3
 8009384:	f003 030f 	and.w	r3, r3, #15
 8009388:	b2da      	uxtb	r2, r3
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 030f 	and.w	r3, r3, #15
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	0e1b      	lsrs	r3, r3, #24
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80093ae:	4618      	mov	r0, r3
 80093b0:	f004 f8f0 	bl	800d594 <SDMMC_CmdBlockLength>
 80093b4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80093b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00d      	beq.n	80093d8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a08      	ldr	r2, [pc, #32]	@ (80093e4 <HAL_SD_GetCardStatus+0x178>)
 80093c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093c8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80093d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3750      	adds	r7, #80	@ 0x50
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	1fe00fff 	.word	0x1fe00fff

080093e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b08d      	sub	sp, #52	@ 0x34
 80093ec:	af02      	add	r7, sp, #8
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2203      	movs	r2, #3
 80093fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009404:	2b03      	cmp	r3, #3
 8009406:	d02e      	beq.n	8009466 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800940e:	d106      	bne.n	800941e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009414:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	635a      	str	r2, [r3, #52]	@ 0x34
 800941c:	e029      	b.n	8009472 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009424:	d10a      	bne.n	800943c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fb64 	bl	8009af4 <SD_WideBus_Enable>
 800942c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	431a      	orrs	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	635a      	str	r2, [r3, #52]	@ 0x34
 800943a:	e01a      	b.n	8009472 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10a      	bne.n	8009458 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fba1 	bl	8009b8a <SD_WideBus_Disable>
 8009448:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	431a      	orrs	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	635a      	str	r2, [r3, #52]	@ 0x34
 8009456:	e00c      	b.n	8009472 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800945c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	635a      	str	r2, [r3, #52]	@ 0x34
 8009464:	e005      	b.n	8009472 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800946a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009476:	2b00      	cmp	r3, #0
 8009478:	d007      	beq.n	800948a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a5f      	ldr	r2, [pc, #380]	@ (80095fc <HAL_SD_ConfigWideBusOperation+0x214>)
 8009480:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009488:	e096      	b.n	80095b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800948a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800948e:	f04f 0100 	mov.w	r1, #0
 8009492:	f7fe f9e1 	bl	8007858 <HAL_RCCEx_GetPeriphCLKFreq>
 8009496:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 8083 	beq.w	80095a6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	695a      	ldr	r2, [r3, #20]
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4950      	ldr	r1, [pc, #320]	@ (8009600 <HAL_SD_ConfigWideBusOperation+0x218>)
 80094be:	fba1 1303 	umull	r1, r3, r1, r3
 80094c2:	0e1b      	lsrs	r3, r3, #24
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d303      	bcc.n	80094d0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	61bb      	str	r3, [r7, #24]
 80094ce:	e05a      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094d8:	d103      	bne.n	80094e2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	61bb      	str	r3, [r7, #24]
 80094e0:	e051      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ea:	d126      	bne.n	800953a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10e      	bne.n	8009512 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	4a43      	ldr	r2, [pc, #268]	@ (8009604 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d906      	bls.n	800950a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	4a40      	ldr	r2, [pc, #256]	@ (8009600 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009500:	fba2 2303 	umull	r2, r3, r2, r3
 8009504:	0e5b      	lsrs	r3, r3, #25
 8009506:	61bb      	str	r3, [r7, #24]
 8009508:	e03d      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	61bb      	str	r3, [r7, #24]
 8009510:	e039      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	69fa      	ldr	r2, [r7, #28]
 800951a:	fbb2 f3f3 	udiv	r3, r2, r3
 800951e:	4a39      	ldr	r2, [pc, #228]	@ (8009604 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d906      	bls.n	8009532 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	4a36      	ldr	r2, [pc, #216]	@ (8009600 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009528:	fba2 2303 	umull	r2, r3, r2, r3
 800952c:	0e5b      	lsrs	r3, r3, #25
 800952e:	61bb      	str	r3, [r7, #24]
 8009530:	e029      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	61bb      	str	r3, [r7, #24]
 8009538:	e025      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10e      	bne.n	8009560 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	4a30      	ldr	r2, [pc, #192]	@ (8009608 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d906      	bls.n	8009558 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	4a2c      	ldr	r2, [pc, #176]	@ (8009600 <HAL_SD_ConfigWideBusOperation+0x218>)
 800954e:	fba2 2303 	umull	r2, r3, r2, r3
 8009552:	0e1b      	lsrs	r3, r3, #24
 8009554:	61bb      	str	r3, [r7, #24]
 8009556:	e016      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	e012      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	69fa      	ldr	r2, [r7, #28]
 8009568:	fbb2 f3f3 	udiv	r3, r2, r3
 800956c:	4a26      	ldr	r2, [pc, #152]	@ (8009608 <HAL_SD_ConfigWideBusOperation+0x220>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d906      	bls.n	8009580 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4a22      	ldr	r2, [pc, #136]	@ (8009600 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009576:	fba2 2303 	umull	r2, r3, r2, r3
 800957a:	0e1b      	lsrs	r3, r3, #24
 800957c:	61bb      	str	r3, [r7, #24]
 800957e:	e002      	b.n	8009586 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681c      	ldr	r4, [r3, #0]
 800958a:	466a      	mov	r2, sp
 800958c:	f107 0314 	add.w	r3, r7, #20
 8009590:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009594:	e882 0003 	stmia.w	r2, {r0, r1}
 8009598:	f107 0308 	add.w	r3, r7, #8
 800959c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800959e:	4620      	mov	r0, r4
 80095a0:	f003 ff2c 	bl	800d3fc <SDMMC_Init>
 80095a4:	e008      	b.n	80095b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80095c0:	4618      	mov	r0, r3
 80095c2:	f003 ffe7 	bl	800d594 <SDMMC_CmdBlockLength>
 80095c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00c      	beq.n	80095e8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a0a      	ldr	r2, [pc, #40]	@ (80095fc <HAL_SD_ConfigWideBusOperation+0x214>)
 80095d4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	431a      	orrs	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80095f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	372c      	adds	r7, #44	@ 0x2c
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd90      	pop	{r4, r7, pc}
 80095fc:	1fe00fff 	.word	0x1fe00fff
 8009600:	55e63b89 	.word	0x55e63b89
 8009604:	02faf080 	.word	0x02faf080
 8009608:	017d7840 	.word	0x017d7840

0800960c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009618:	f107 030c 	add.w	r3, r7, #12
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fa40 	bl	8009aa4 <SD_SendStatus>
 8009624:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	0a5b      	lsrs	r3, r3, #9
 800963c:	f003 030f 	and.w	r3, r3, #15
 8009640:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009642:	693b      	ldr	r3, [r7, #16]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b090      	sub	sp, #64	@ 0x40
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009658:	f7f9 ffc8 	bl	80035ec <HAL_GetTick>
 800965c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f003 ff12 	bl	800d48c <SDMMC_GetPowerState>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800966e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009672:	e0b5      	b.n	80097e0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009678:	2b03      	cmp	r3, #3
 800967a:	d02e      	beq.n	80096da <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f004 f893 	bl	800d7ac <SDMMC_CmdSendCID>
 8009686:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <SD_InitCard+0x46>
    {
      return errorstate;
 800968e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009690:	e0a6      	b.n	80097e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2100      	movs	r1, #0
 8009698:	4618      	mov	r0, r3
 800969a:	f003 ff3c 	bl	800d516 <SDMMC_GetResponse>
 800969e:	4602      	mov	r2, r0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2104      	movs	r1, #4
 80096aa:	4618      	mov	r0, r3
 80096ac:	f003 ff33 	bl	800d516 <SDMMC_GetResponse>
 80096b0:	4602      	mov	r2, r0
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2108      	movs	r1, #8
 80096bc:	4618      	mov	r0, r3
 80096be:	f003 ff2a 	bl	800d516 <SDMMC_GetResponse>
 80096c2:	4602      	mov	r2, r0
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	210c      	movs	r1, #12
 80096ce:	4618      	mov	r0, r3
 80096d0:	f003 ff21 	bl	800d516 <SDMMC_GetResponse>
 80096d4:	4602      	mov	r2, r0
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d01d      	beq.n	800971e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80096e2:	e019      	b.n	8009718 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f107 020a 	add.w	r2, r7, #10
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f004 f89b 	bl	800d82a <SDMMC_CmdSetRelAdd>
 80096f4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80096f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <SD_InitCard+0xb4>
      {
        return errorstate;
 80096fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fe:	e06f      	b.n	80097e0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009700:	f7f9 ff74 	bl	80035ec <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800970e:	4293      	cmp	r3, r2
 8009710:	d902      	bls.n	8009718 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009712:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009716:	e063      	b.n	80097e0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009718:	897b      	ldrh	r3, [r7, #10]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0e2      	beq.n	80096e4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009722:	2b03      	cmp	r3, #3
 8009724:	d036      	beq.n	8009794 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009726:	897b      	ldrh	r3, [r7, #10]
 8009728:	461a      	mov	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009736:	041b      	lsls	r3, r3, #16
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f004 f855 	bl	800d7ea <SDMMC_CmdSendCSD>
 8009740:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <SD_InitCard+0x100>
    {
      return errorstate;
 8009748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974a:	e049      	b.n	80097e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f003 fedf 	bl	800d516 <SDMMC_GetResponse>
 8009758:	4602      	mov	r2, r0
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2104      	movs	r1, #4
 8009764:	4618      	mov	r0, r3
 8009766:	f003 fed6 	bl	800d516 <SDMMC_GetResponse>
 800976a:	4602      	mov	r2, r0
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2108      	movs	r1, #8
 8009776:	4618      	mov	r0, r3
 8009778:	f003 fecd 	bl	800d516 <SDMMC_GetResponse>
 800977c:	4602      	mov	r2, r0
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	210c      	movs	r1, #12
 8009788:	4618      	mov	r0, r3
 800978a:	f003 fec4 	bl	800d516 <SDMMC_GetResponse>
 800978e:	4602      	mov	r2, r0
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2104      	movs	r1, #4
 800979a:	4618      	mov	r0, r3
 800979c:	f003 febb 	bl	800d516 <SDMMC_GetResponse>
 80097a0:	4603      	mov	r3, r0
 80097a2:	0d1a      	lsrs	r2, r3, #20
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80097a8:	f107 030c 	add.w	r3, r7, #12
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff fbb8 	bl	8008f24 <HAL_SD_GetCardCSD>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80097be:	e00f      	b.n	80097e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097c8:	041b      	lsls	r3, r3, #16
 80097ca:	4619      	mov	r1, r3
 80097cc:	4610      	mov	r0, r2
 80097ce:	f003 ff04 	bl	800d5da <SDMMC_CmdSelDesel>
 80097d2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80097d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <SD_InitCard+0x192>
  {
    return errorstate;
 80097da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097dc:	e000      	b.n	80097e0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3740      	adds	r7, #64	@ 0x40
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4618      	mov	r0, r3
 8009802:	f003 ff0d 	bl	800d620 <SDMMC_CmdGoIdleState>
 8009806:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <SD_PowerON+0x2a>
  {
    return errorstate;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	e072      	b.n	80098f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4618      	mov	r0, r3
 8009818:	f003 ff20 	bl	800d65c <SDMMC_CmdOperCond>
 800981c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009824:	d10d      	bne.n	8009842 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4618      	mov	r0, r3
 8009832:	f003 fef5 	bl	800d620 <SDMMC_CmdGoIdleState>
 8009836:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d004      	beq.n	8009848 <SD_PowerON+0x60>
    {
      return errorstate;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	e05a      	b.n	80098f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800984c:	2b01      	cmp	r3, #1
 800984e:	d137      	bne.n	80098c0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f003 ff20 	bl	800d69c <SDMMC_CmdAppCommand>
 800985c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d02d      	beq.n	80098c0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009864:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009868:	e046      	b.n	80098f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2100      	movs	r1, #0
 8009870:	4618      	mov	r0, r3
 8009872:	f003 ff13 	bl	800d69c <SDMMC_CmdAppCommand>
 8009876:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <SD_PowerON+0x9a>
    {
      return errorstate;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	e03a      	b.n	80098f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	491e      	ldr	r1, [pc, #120]	@ (8009900 <SD_PowerON+0x118>)
 8009888:	4618      	mov	r0, r3
 800988a:	f003 ff2a 	bl	800d6e2 <SDMMC_CmdAppOperCommand>
 800988e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009896:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800989a:	e02d      	b.n	80098f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2100      	movs	r1, #0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f003 fe37 	bl	800d516 <SDMMC_GetResponse>
 80098a8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	0fdb      	lsrs	r3, r3, #31
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d101      	bne.n	80098b6 <SD_PowerON+0xce>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <SD_PowerON+0xd0>
 80098b6:	2300      	movs	r3, #0
 80098b8:	613b      	str	r3, [r7, #16]

    count++;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	3301      	adds	r3, #1
 80098be:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d802      	bhi.n	80098d0 <SD_PowerON+0xe8>
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0cc      	beq.n	800986a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d902      	bls.n	80098e0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80098da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80098de:	e00b      	b.n	80098f8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	c1100000 	.word	0xc1100000

08009904 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08c      	sub	sp, #48	@ 0x30
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800990e:	f7f9 fe6d 	bl	80035ec <HAL_GetTick>
 8009912:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2100      	movs	r1, #0
 800991e:	4618      	mov	r0, r3
 8009920:	f003 fdf9 	bl	800d516 <SDMMC_GetResponse>
 8009924:	4603      	mov	r3, r0
 8009926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800992a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800992e:	d102      	bne.n	8009936 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009930:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009934:	e0b0      	b.n	8009a98 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2140      	movs	r1, #64	@ 0x40
 800993c:	4618      	mov	r0, r3
 800993e:	f003 fe29 	bl	800d594 <SDMMC_CmdBlockLength>
 8009942:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d005      	beq.n	8009956 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	e0a0      	b.n	8009a98 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800995e:	041b      	lsls	r3, r3, #16
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f003 fe9a 	bl	800d69c <SDMMC_CmdAppCommand>
 8009968:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d005      	beq.n	800997c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	e08d      	b.n	8009a98 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800997c:	f04f 33ff 	mov.w	r3, #4294967295
 8009980:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009982:	2340      	movs	r3, #64	@ 0x40
 8009984:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009986:	2360      	movs	r3, #96	@ 0x60
 8009988:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800998a:	2302      	movs	r3, #2
 800998c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800998e:	2300      	movs	r3, #0
 8009990:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009992:	2301      	movs	r3, #1
 8009994:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f107 0208 	add.w	r2, r7, #8
 800999e:	4611      	mov	r1, r2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f003 fdcb 	bl	800d53c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f003 ff82 	bl	800d8b4 <SDMMC_CmdStatusRegister>
 80099b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d02b      	beq.n	8009a10 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	e069      	b.n	8009a98 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d013      	beq.n	80099fa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80099d2:	2300      	movs	r3, #0
 80099d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099d6:	e00d      	b.n	80099f4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4618      	mov	r0, r3
 80099de:	f003 fd37 	bl	800d450 <SDMMC_ReadFIFO>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e6:	601a      	str	r2, [r3, #0]
        pData++;
 80099e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ea:	3304      	adds	r3, #4
 80099ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80099ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f0:	3301      	adds	r3, #1
 80099f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f6:	2b07      	cmp	r3, #7
 80099f8:	d9ee      	bls.n	80099d8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80099fa:	f7f9 fdf7 	bl	80035ec <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a08:	d102      	bne.n	8009a10 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009a0a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a0e:	e043      	b.n	8009a98 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a16:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d0d2      	beq.n	80099c4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a24:	f003 0308 	and.w	r3, r3, #8
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	e033      	b.n	8009a98 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a3e:	2302      	movs	r3, #2
 8009a40:	e02a      	b.n	8009a98 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a48:	f003 0320 	and.w	r3, r3, #32
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d017      	beq.n	8009a80 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009a50:	2320      	movs	r3, #32
 8009a52:	e021      	b.n	8009a98 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f003 fcf9 	bl	800d450 <SDMMC_ReadFIFO>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a62:	601a      	str	r2, [r3, #0]
    pData++;
 8009a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a66:	3304      	adds	r3, #4
 8009a68:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a6a:	f7f9 fdbf 	bl	80035ec <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a78:	d102      	bne.n	8009a80 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009a7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a7e:	e00b      	b.n	8009a98 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1e2      	bne.n	8009a54 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a03      	ldr	r2, [pc, #12]	@ (8009aa0 <SD_SendSDStatus+0x19c>)
 8009a94:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3730      	adds	r7, #48	@ 0x30
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	18000f3a 	.word	0x18000f3a

08009aa4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d102      	bne.n	8009aba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009ab4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ab8:	e018      	b.n	8009aec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac2:	041b      	lsls	r3, r3, #16
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f003 fed1 	bl	800d86e <SDMMC_CmdSendStatus>
 8009acc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	e009      	b.n	8009aec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2100      	movs	r1, #0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f003 fd19 	bl	800d516 <SDMMC_GetResponse>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009afc:	2300      	movs	r3, #0
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	2300      	movs	r3, #0
 8009b02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2100      	movs	r1, #0
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f003 fd03 	bl	800d516 <SDMMC_GetResponse>
 8009b10:	4603      	mov	r3, r0
 8009b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b1a:	d102      	bne.n	8009b22 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009b20:	e02f      	b.n	8009b82 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b22:	f107 030c 	add.w	r3, r7, #12
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f879 	bl	8009c20 <SD_FindSCR>
 8009b2e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	e023      	b.n	8009b82 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d01c      	beq.n	8009b7e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b4c:	041b      	lsls	r3, r3, #16
 8009b4e:	4619      	mov	r1, r3
 8009b50:	4610      	mov	r0, r2
 8009b52:	f003 fda3 	bl	800d69c <SDMMC_CmdAppCommand>
 8009b56:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	e00f      	b.n	8009b82 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2102      	movs	r1, #2
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f003 fdda 	bl	800d722 <SDMMC_CmdBusWidth>
 8009b6e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	e003      	b.n	8009b82 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e001      	b.n	8009b82 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b7e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b086      	sub	sp, #24
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	2300      	movs	r3, #0
 8009b98:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f003 fcb8 	bl	800d516 <SDMMC_GetResponse>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bb0:	d102      	bne.n	8009bb8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009bb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009bb6:	e02f      	b.n	8009c18 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009bb8:	f107 030c 	add.w	r3, r7, #12
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f82e 	bl	8009c20 <SD_FindSCR>
 8009bc4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	e023      	b.n	8009c18 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d01c      	beq.n	8009c14 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009be2:	041b      	lsls	r3, r3, #16
 8009be4:	4619      	mov	r1, r3
 8009be6:	4610      	mov	r0, r2
 8009be8:	f003 fd58 	bl	800d69c <SDMMC_CmdAppCommand>
 8009bec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	e00f      	b.n	8009c18 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f003 fd8f 	bl	800d722 <SDMMC_CmdBusWidth>
 8009c04:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	e003      	b.n	8009c18 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c10:	2300      	movs	r3, #0
 8009c12:	e001      	b.n	8009c18 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c14:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08e      	sub	sp, #56	@ 0x38
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c2a:	f7f9 fcdf 	bl	80035ec <HAL_GetTick>
 8009c2e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009c34:	2300      	movs	r3, #0
 8009c36:	60bb      	str	r3, [r7, #8]
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2108      	movs	r1, #8
 8009c46:	4618      	mov	r0, r3
 8009c48:	f003 fca4 	bl	800d594 <SDMMC_CmdBlockLength>
 8009c4c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c56:	e0ad      	b.n	8009db4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c60:	041b      	lsls	r3, r3, #16
 8009c62:	4619      	mov	r1, r3
 8009c64:	4610      	mov	r0, r2
 8009c66:	f003 fd19 	bl	800d69c <SDMMC_CmdAppCommand>
 8009c6a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	e09e      	b.n	8009db4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c76:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009c80:	2330      	movs	r3, #48	@ 0x30
 8009c82:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c84:	2302      	movs	r3, #2
 8009c86:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f107 0210 	add.w	r2, r7, #16
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f003 fc4e 	bl	800d53c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f003 fd5f 	bl	800d768 <SDMMC_CmdSendSCR>
 8009caa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d027      	beq.n	8009d02 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb4:	e07e      	b.n	8009db4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d113      	bne.n	8009cec <SD_FindSCR+0xcc>
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d110      	bne.n	8009cec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f003 fbbe 	bl	800d450 <SDMMC_ReadFIFO>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f003 fbb7 	bl	800d450 <SDMMC_ReadFIFO>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	60fb      	str	r3, [r7, #12]
      index++;
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce8:	3301      	adds	r3, #1
 8009cea:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009cec:	f7f9 fc7e 	bl	80035ec <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d102      	bne.n	8009d02 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009cfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d00:	e058      	b.n	8009db4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d08:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0d1      	beq.n	8009cb6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d18:	f003 0308 	and.w	r3, r3, #8
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d005      	beq.n	8009d2c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2208      	movs	r2, #8
 8009d26:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d28:	2308      	movs	r3, #8
 8009d2a:	e043      	b.n	8009db4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d005      	beq.n	8009d46 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d42:	2302      	movs	r3, #2
 8009d44:	e036      	b.n	8009db4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d4c:	f003 0320 	and.w	r3, r3, #32
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d005      	beq.n	8009d60 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009d5c:	2320      	movs	r3, #32
 8009d5e:	e029      	b.n	8009db4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a15      	ldr	r2, [pc, #84]	@ (8009dbc <SD_FindSCR+0x19c>)
 8009d66:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	061a      	lsls	r2, r3, #24
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	021b      	lsls	r3, r3, #8
 8009d70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	0a1b      	lsrs	r3, r3, #8
 8009d7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009d7e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	0e1b      	lsrs	r3, r3, #24
 8009d84:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d88:	601a      	str	r2, [r3, #0]
    scr++;
 8009d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	061a      	lsls	r2, r3, #24
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	021b      	lsls	r3, r3, #8
 8009d98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	0a1b      	lsrs	r3, r3, #8
 8009da2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009da6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	0e1b      	lsrs	r3, r3, #24
 8009dac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3738      	adds	r7, #56	@ 0x38
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	18000f3a 	.word	0x18000f3a

08009dc0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e10f      	b.n	8009ff2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a87      	ldr	r2, [pc, #540]	@ (8009ffc <HAL_SPI_Init+0x23c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00f      	beq.n	8009e02 <HAL_SPI_Init+0x42>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a86      	ldr	r2, [pc, #536]	@ (800a000 <HAL_SPI_Init+0x240>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d00a      	beq.n	8009e02 <HAL_SPI_Init+0x42>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a84      	ldr	r2, [pc, #528]	@ (800a004 <HAL_SPI_Init+0x244>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d005      	beq.n	8009e02 <HAL_SPI_Init+0x42>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	2b0f      	cmp	r3, #15
 8009dfc:	d901      	bls.n	8009e02 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e0f7      	b.n	8009ff2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f900 	bl	800a008 <SPI_GetPacketSize>
 8009e08:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a7b      	ldr	r2, [pc, #492]	@ (8009ffc <HAL_SPI_Init+0x23c>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d00c      	beq.n	8009e2e <HAL_SPI_Init+0x6e>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a79      	ldr	r2, [pc, #484]	@ (800a000 <HAL_SPI_Init+0x240>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d007      	beq.n	8009e2e <HAL_SPI_Init+0x6e>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a78      	ldr	r2, [pc, #480]	@ (800a004 <HAL_SPI_Init+0x244>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d002      	beq.n	8009e2e <HAL_SPI_Init+0x6e>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b08      	cmp	r3, #8
 8009e2c:	d811      	bhi.n	8009e52 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e32:	4a72      	ldr	r2, [pc, #456]	@ (8009ffc <HAL_SPI_Init+0x23c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d009      	beq.n	8009e4c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a70      	ldr	r2, [pc, #448]	@ (800a000 <HAL_SPI_Init+0x240>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d004      	beq.n	8009e4c <HAL_SPI_Init+0x8c>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a6f      	ldr	r2, [pc, #444]	@ (800a004 <HAL_SPI_Init+0x244>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d104      	bne.n	8009e56 <HAL_SPI_Init+0x96>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b10      	cmp	r3, #16
 8009e50:	d901      	bls.n	8009e56 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e0cd      	b.n	8009ff2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d106      	bne.n	8009e70 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7f8 fb78 	bl	8002560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2202      	movs	r2, #2
 8009e74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0201 	bic.w	r2, r2, #1
 8009e86:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009e92:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e9c:	d119      	bne.n	8009ed2 <HAL_SPI_Init+0x112>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ea6:	d103      	bne.n	8009eb0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d008      	beq.n	8009ec2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10c      	bne.n	8009ed2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ec0:	d107      	bne.n	8009ed2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009ed0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00f      	beq.n	8009efe <HAL_SPI_Init+0x13e>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	2b06      	cmp	r3, #6
 8009ee4:	d90b      	bls.n	8009efe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	430a      	orrs	r2, r1
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	e007      	b.n	8009f0e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	69da      	ldr	r2, [r3, #28]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f16:	431a      	orrs	r2, r3
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f20:	ea42 0103 	orr.w	r1, r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	431a      	orrs	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	431a      	orrs	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	431a      	orrs	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f6e:	ea42 0103 	orr.w	r1, r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d113      	bne.n	8009fae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009fac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0201 	bic.w	r2, r2, #1
 8009fbc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	40013000 	.word	0x40013000
 800a000:	40003800 	.word	0x40003800
 800a004:	40003c00 	.word	0x40003c00

0800a008 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a014:	095b      	lsrs	r3, r3, #5
 800a016:	3301      	adds	r3, #1
 800a018:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	3307      	adds	r3, #7
 800a026:	08db      	lsrs	r3, r3, #3
 800a028:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a032:	4618      	mov	r0, r3
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b082      	sub	sp, #8
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e049      	b.n	800a0e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d106      	bne.n	800a06a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7f8 fbf5 	bl	8002854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2202      	movs	r2, #2
 800a06e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	3304      	adds	r3, #4
 800a07a:	4619      	mov	r1, r3
 800a07c:	4610      	mov	r0, r2
 800a07e:	f000 fa99 	bl	800a5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e049      	b.n	800a192 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7f8 fbc0 	bl	8002898 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3304      	adds	r3, #4
 800a128:	4619      	mov	r1, r3
 800a12a:	4610      	mov	r0, r2
 800a12c:	f000 fa42 	bl	800a5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
	...

0800a19c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d101      	bne.n	800a1ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e0ff      	b.n	800a3ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b14      	cmp	r3, #20
 800a1c6:	f200 80f0 	bhi.w	800a3aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d0:	0800a225 	.word	0x0800a225
 800a1d4:	0800a3ab 	.word	0x0800a3ab
 800a1d8:	0800a3ab 	.word	0x0800a3ab
 800a1dc:	0800a3ab 	.word	0x0800a3ab
 800a1e0:	0800a265 	.word	0x0800a265
 800a1e4:	0800a3ab 	.word	0x0800a3ab
 800a1e8:	0800a3ab 	.word	0x0800a3ab
 800a1ec:	0800a3ab 	.word	0x0800a3ab
 800a1f0:	0800a2a7 	.word	0x0800a2a7
 800a1f4:	0800a3ab 	.word	0x0800a3ab
 800a1f8:	0800a3ab 	.word	0x0800a3ab
 800a1fc:	0800a3ab 	.word	0x0800a3ab
 800a200:	0800a2e7 	.word	0x0800a2e7
 800a204:	0800a3ab 	.word	0x0800a3ab
 800a208:	0800a3ab 	.word	0x0800a3ab
 800a20c:	0800a3ab 	.word	0x0800a3ab
 800a210:	0800a329 	.word	0x0800a329
 800a214:	0800a3ab 	.word	0x0800a3ab
 800a218:	0800a3ab 	.word	0x0800a3ab
 800a21c:	0800a3ab 	.word	0x0800a3ab
 800a220:	0800a369 	.word	0x0800a369
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fa74 	bl	800a718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f042 0208 	orr.w	r2, r2, #8
 800a23e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	699a      	ldr	r2, [r3, #24]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 0204 	bic.w	r2, r2, #4
 800a24e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6999      	ldr	r1, [r3, #24]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	691a      	ldr	r2, [r3, #16]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	619a      	str	r2, [r3, #24]
      break;
 800a262:	e0a5      	b.n	800a3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68b9      	ldr	r1, [r7, #8]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fae4 	bl	800a838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	699a      	ldr	r2, [r3, #24]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a27e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	699a      	ldr	r2, [r3, #24]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a28e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6999      	ldr	r1, [r3, #24]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	021a      	lsls	r2, r3, #8
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	619a      	str	r2, [r3, #24]
      break;
 800a2a4:	e084      	b.n	800a3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 fb4d 	bl	800a94c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	69da      	ldr	r2, [r3, #28]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f042 0208 	orr.w	r2, r2, #8
 800a2c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69da      	ldr	r2, [r3, #28]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0204 	bic.w	r2, r2, #4
 800a2d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69d9      	ldr	r1, [r3, #28]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	691a      	ldr	r2, [r3, #16]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	61da      	str	r2, [r3, #28]
      break;
 800a2e4:	e064      	b.n	800a3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68b9      	ldr	r1, [r7, #8]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f000 fbb5 	bl	800aa5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69da      	ldr	r2, [r3, #28]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69da      	ldr	r2, [r3, #28]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	69d9      	ldr	r1, [r3, #28]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	021a      	lsls	r2, r3, #8
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	61da      	str	r2, [r3, #28]
      break;
 800a326:	e043      	b.n	800a3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68b9      	ldr	r1, [r7, #8]
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fbfe 	bl	800ab30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f042 0208 	orr.w	r2, r2, #8
 800a342:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f022 0204 	bic.w	r2, r2, #4
 800a352:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	691a      	ldr	r2, [r3, #16]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	430a      	orrs	r2, r1
 800a364:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a366:	e023      	b.n	800a3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68b9      	ldr	r1, [r7, #8]
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 fc42 	bl	800abf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a382:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a392:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	021a      	lsls	r2, r3, #8
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	430a      	orrs	r2, r1
 800a3a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a3a8:	e002      	b.n	800a3b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop

0800a3c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d101      	bne.n	800a3e0 <HAL_TIM_ConfigClockSource+0x1c>
 800a3dc:	2302      	movs	r3, #2
 800a3de:	e0dc      	b.n	800a59a <HAL_TIM_ConfigClockSource+0x1d6>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	4b6a      	ldr	r3, [pc, #424]	@ (800a5a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a64      	ldr	r2, [pc, #400]	@ (800a5a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a416:	4293      	cmp	r3, r2
 800a418:	f000 80a9 	beq.w	800a56e <HAL_TIM_ConfigClockSource+0x1aa>
 800a41c:	4a62      	ldr	r2, [pc, #392]	@ (800a5a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	f200 80ae 	bhi.w	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a424:	4a61      	ldr	r2, [pc, #388]	@ (800a5ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800a426:	4293      	cmp	r3, r2
 800a428:	f000 80a1 	beq.w	800a56e <HAL_TIM_ConfigClockSource+0x1aa>
 800a42c:	4a5f      	ldr	r2, [pc, #380]	@ (800a5ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	f200 80a6 	bhi.w	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a434:	4a5e      	ldr	r2, [pc, #376]	@ (800a5b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a436:	4293      	cmp	r3, r2
 800a438:	f000 8099 	beq.w	800a56e <HAL_TIM_ConfigClockSource+0x1aa>
 800a43c:	4a5c      	ldr	r2, [pc, #368]	@ (800a5b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	f200 809e 	bhi.w	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a444:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a448:	f000 8091 	beq.w	800a56e <HAL_TIM_ConfigClockSource+0x1aa>
 800a44c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a450:	f200 8096 	bhi.w	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a454:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a458:	f000 8089 	beq.w	800a56e <HAL_TIM_ConfigClockSource+0x1aa>
 800a45c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a460:	f200 808e 	bhi.w	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a468:	d03e      	beq.n	800a4e8 <HAL_TIM_ConfigClockSource+0x124>
 800a46a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a46e:	f200 8087 	bhi.w	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a476:	f000 8086 	beq.w	800a586 <HAL_TIM_ConfigClockSource+0x1c2>
 800a47a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a47e:	d87f      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a480:	2b70      	cmp	r3, #112	@ 0x70
 800a482:	d01a      	beq.n	800a4ba <HAL_TIM_ConfigClockSource+0xf6>
 800a484:	2b70      	cmp	r3, #112	@ 0x70
 800a486:	d87b      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a488:	2b60      	cmp	r3, #96	@ 0x60
 800a48a:	d050      	beq.n	800a52e <HAL_TIM_ConfigClockSource+0x16a>
 800a48c:	2b60      	cmp	r3, #96	@ 0x60
 800a48e:	d877      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a490:	2b50      	cmp	r3, #80	@ 0x50
 800a492:	d03c      	beq.n	800a50e <HAL_TIM_ConfigClockSource+0x14a>
 800a494:	2b50      	cmp	r3, #80	@ 0x50
 800a496:	d873      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a498:	2b40      	cmp	r3, #64	@ 0x40
 800a49a:	d058      	beq.n	800a54e <HAL_TIM_ConfigClockSource+0x18a>
 800a49c:	2b40      	cmp	r3, #64	@ 0x40
 800a49e:	d86f      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4a0:	2b30      	cmp	r3, #48	@ 0x30
 800a4a2:	d064      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x1aa>
 800a4a4:	2b30      	cmp	r3, #48	@ 0x30
 800a4a6:	d86b      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4a8:	2b20      	cmp	r3, #32
 800a4aa:	d060      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x1aa>
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	d867      	bhi.n	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d05c      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x1aa>
 800a4b4:	2b10      	cmp	r3, #16
 800a4b6:	d05a      	beq.n	800a56e <HAL_TIM_ConfigClockSource+0x1aa>
 800a4b8:	e062      	b.n	800a580 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4ca:	f000 fc79 	bl	800adc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a4dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	609a      	str	r2, [r3, #8]
      break;
 800a4e6:	e04f      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4f8:	f000 fc62 	bl	800adc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689a      	ldr	r2, [r3, #8]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a50a:	609a      	str	r2, [r3, #8]
      break;
 800a50c:	e03c      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a51a:	461a      	mov	r2, r3
 800a51c:	f000 fbd2 	bl	800acc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2150      	movs	r1, #80	@ 0x50
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fc2c 	bl	800ad84 <TIM_ITRx_SetConfig>
      break;
 800a52c:	e02c      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a53a:	461a      	mov	r2, r3
 800a53c:	f000 fbf1 	bl	800ad22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2160      	movs	r1, #96	@ 0x60
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fc1c 	bl	800ad84 <TIM_ITRx_SetConfig>
      break;
 800a54c:	e01c      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a55a:	461a      	mov	r2, r3
 800a55c:	f000 fbb2 	bl	800acc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2140      	movs	r1, #64	@ 0x40
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fc0c 	bl	800ad84 <TIM_ITRx_SetConfig>
      break;
 800a56c:	e00c      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4619      	mov	r1, r3
 800a578:	4610      	mov	r0, r2
 800a57a:	f000 fc03 	bl	800ad84 <TIM_ITRx_SetConfig>
      break;
 800a57e:	e003      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	73fb      	strb	r3, [r7, #15]
      break;
 800a584:	e000      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	ffceff88 	.word	0xffceff88
 800a5a8:	00100040 	.word	0x00100040
 800a5ac:	00100030 	.word	0x00100030
 800a5b0:	00100020 	.word	0x00100020

0800a5b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a4a      	ldr	r2, [pc, #296]	@ (800a6f0 <TIM_Base_SetConfig+0x13c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d013      	beq.n	800a5f4 <TIM_Base_SetConfig+0x40>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5d2:	d00f      	beq.n	800a5f4 <TIM_Base_SetConfig+0x40>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a47      	ldr	r2, [pc, #284]	@ (800a6f4 <TIM_Base_SetConfig+0x140>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d00b      	beq.n	800a5f4 <TIM_Base_SetConfig+0x40>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a46      	ldr	r2, [pc, #280]	@ (800a6f8 <TIM_Base_SetConfig+0x144>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d007      	beq.n	800a5f4 <TIM_Base_SetConfig+0x40>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a45      	ldr	r2, [pc, #276]	@ (800a6fc <TIM_Base_SetConfig+0x148>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d003      	beq.n	800a5f4 <TIM_Base_SetConfig+0x40>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a44      	ldr	r2, [pc, #272]	@ (800a700 <TIM_Base_SetConfig+0x14c>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d108      	bne.n	800a606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a39      	ldr	r2, [pc, #228]	@ (800a6f0 <TIM_Base_SetConfig+0x13c>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d027      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a614:	d023      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a36      	ldr	r2, [pc, #216]	@ (800a6f4 <TIM_Base_SetConfig+0x140>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d01f      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a35      	ldr	r2, [pc, #212]	@ (800a6f8 <TIM_Base_SetConfig+0x144>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d01b      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a34      	ldr	r2, [pc, #208]	@ (800a6fc <TIM_Base_SetConfig+0x148>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d017      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a33      	ldr	r2, [pc, #204]	@ (800a700 <TIM_Base_SetConfig+0x14c>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d013      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a32      	ldr	r2, [pc, #200]	@ (800a704 <TIM_Base_SetConfig+0x150>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d00f      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a31      	ldr	r2, [pc, #196]	@ (800a708 <TIM_Base_SetConfig+0x154>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d00b      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a30      	ldr	r2, [pc, #192]	@ (800a70c <TIM_Base_SetConfig+0x158>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d007      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a2f      	ldr	r2, [pc, #188]	@ (800a710 <TIM_Base_SetConfig+0x15c>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d003      	beq.n	800a65e <TIM_Base_SetConfig+0xaa>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a2e      	ldr	r2, [pc, #184]	@ (800a714 <TIM_Base_SetConfig+0x160>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d108      	bne.n	800a670 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	689a      	ldr	r2, [r3, #8]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a16      	ldr	r2, [pc, #88]	@ (800a6f0 <TIM_Base_SetConfig+0x13c>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d00f      	beq.n	800a6bc <TIM_Base_SetConfig+0x108>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a18      	ldr	r2, [pc, #96]	@ (800a700 <TIM_Base_SetConfig+0x14c>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d00b      	beq.n	800a6bc <TIM_Base_SetConfig+0x108>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a17      	ldr	r2, [pc, #92]	@ (800a704 <TIM_Base_SetConfig+0x150>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d007      	beq.n	800a6bc <TIM_Base_SetConfig+0x108>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a16      	ldr	r2, [pc, #88]	@ (800a708 <TIM_Base_SetConfig+0x154>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d003      	beq.n	800a6bc <TIM_Base_SetConfig+0x108>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a15      	ldr	r2, [pc, #84]	@ (800a70c <TIM_Base_SetConfig+0x158>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d103      	bne.n	800a6c4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	691a      	ldr	r2, [r3, #16]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d105      	bne.n	800a6e2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	f023 0201 	bic.w	r2, r3, #1
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	611a      	str	r2, [r3, #16]
  }
}
 800a6e2:	bf00      	nop
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	40010000 	.word	0x40010000
 800a6f4:	40000400 	.word	0x40000400
 800a6f8:	40000800 	.word	0x40000800
 800a6fc:	40000c00 	.word	0x40000c00
 800a700:	40010400 	.word	0x40010400
 800a704:	40014000 	.word	0x40014000
 800a708:	40014400 	.word	0x40014400
 800a70c:	40014800 	.word	0x40014800
 800a710:	4000e000 	.word	0x4000e000
 800a714:	4000e400 	.word	0x4000e400

0800a718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	f023 0201 	bic.w	r2, r3, #1
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4b37      	ldr	r3, [pc, #220]	@ (800a820 <TIM_OC1_SetConfig+0x108>)
 800a744:	4013      	ands	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f023 0303 	bic.w	r3, r3, #3
 800a74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f023 0302 	bic.w	r3, r3, #2
 800a760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	4313      	orrs	r3, r2
 800a76a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a2d      	ldr	r2, [pc, #180]	@ (800a824 <TIM_OC1_SetConfig+0x10c>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d00f      	beq.n	800a794 <TIM_OC1_SetConfig+0x7c>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a2c      	ldr	r2, [pc, #176]	@ (800a828 <TIM_OC1_SetConfig+0x110>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d00b      	beq.n	800a794 <TIM_OC1_SetConfig+0x7c>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a2b      	ldr	r2, [pc, #172]	@ (800a82c <TIM_OC1_SetConfig+0x114>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d007      	beq.n	800a794 <TIM_OC1_SetConfig+0x7c>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a2a      	ldr	r2, [pc, #168]	@ (800a830 <TIM_OC1_SetConfig+0x118>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d003      	beq.n	800a794 <TIM_OC1_SetConfig+0x7c>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a29      	ldr	r2, [pc, #164]	@ (800a834 <TIM_OC1_SetConfig+0x11c>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d10c      	bne.n	800a7ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f023 0308 	bic.w	r3, r3, #8
 800a79a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f023 0304 	bic.w	r3, r3, #4
 800a7ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a1c      	ldr	r2, [pc, #112]	@ (800a824 <TIM_OC1_SetConfig+0x10c>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d00f      	beq.n	800a7d6 <TIM_OC1_SetConfig+0xbe>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a1b      	ldr	r2, [pc, #108]	@ (800a828 <TIM_OC1_SetConfig+0x110>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d00b      	beq.n	800a7d6 <TIM_OC1_SetConfig+0xbe>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a82c <TIM_OC1_SetConfig+0x114>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d007      	beq.n	800a7d6 <TIM_OC1_SetConfig+0xbe>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a19      	ldr	r2, [pc, #100]	@ (800a830 <TIM_OC1_SetConfig+0x118>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d003      	beq.n	800a7d6 <TIM_OC1_SetConfig+0xbe>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a18      	ldr	r2, [pc, #96]	@ (800a834 <TIM_OC1_SetConfig+0x11c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d111      	bne.n	800a7fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a7e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	685a      	ldr	r2, [r3, #4]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	697a      	ldr	r2, [r7, #20]
 800a812:	621a      	str	r2, [r3, #32]
}
 800a814:	bf00      	nop
 800a816:	371c      	adds	r7, #28
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	fffeff8f 	.word	0xfffeff8f
 800a824:	40010000 	.word	0x40010000
 800a828:	40010400 	.word	0x40010400
 800a82c:	40014000 	.word	0x40014000
 800a830:	40014400 	.word	0x40014400
 800a834:	40014800 	.word	0x40014800

0800a838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	f023 0210 	bic.w	r2, r3, #16
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	4b34      	ldr	r3, [pc, #208]	@ (800a934 <TIM_OC2_SetConfig+0xfc>)
 800a864:	4013      	ands	r3, r2
 800a866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	021b      	lsls	r3, r3, #8
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	4313      	orrs	r3, r2
 800a87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f023 0320 	bic.w	r3, r3, #32
 800a882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	011b      	lsls	r3, r3, #4
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a29      	ldr	r2, [pc, #164]	@ (800a938 <TIM_OC2_SetConfig+0x100>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d003      	beq.n	800a8a0 <TIM_OC2_SetConfig+0x68>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a28      	ldr	r2, [pc, #160]	@ (800a93c <TIM_OC2_SetConfig+0x104>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d10d      	bne.n	800a8bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	011b      	lsls	r3, r3, #4
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a1e      	ldr	r2, [pc, #120]	@ (800a938 <TIM_OC2_SetConfig+0x100>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d00f      	beq.n	800a8e4 <TIM_OC2_SetConfig+0xac>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a1d      	ldr	r2, [pc, #116]	@ (800a93c <TIM_OC2_SetConfig+0x104>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d00b      	beq.n	800a8e4 <TIM_OC2_SetConfig+0xac>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a1c      	ldr	r2, [pc, #112]	@ (800a940 <TIM_OC2_SetConfig+0x108>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d007      	beq.n	800a8e4 <TIM_OC2_SetConfig+0xac>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a1b      	ldr	r2, [pc, #108]	@ (800a944 <TIM_OC2_SetConfig+0x10c>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d003      	beq.n	800a8e4 <TIM_OC2_SetConfig+0xac>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a1a      	ldr	r2, [pc, #104]	@ (800a948 <TIM_OC2_SetConfig+0x110>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d113      	bne.n	800a90c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	4313      	orrs	r3, r2
 800a90a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	693a      	ldr	r2, [r7, #16]
 800a910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	621a      	str	r2, [r3, #32]
}
 800a926:	bf00      	nop
 800a928:	371c      	adds	r7, #28
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	feff8fff 	.word	0xfeff8fff
 800a938:	40010000 	.word	0x40010000
 800a93c:	40010400 	.word	0x40010400
 800a940:	40014000 	.word	0x40014000
 800a944:	40014400 	.word	0x40014400
 800a948:	40014800 	.word	0x40014800

0800a94c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	4b33      	ldr	r3, [pc, #204]	@ (800aa44 <TIM_OC3_SetConfig+0xf8>)
 800a978:	4013      	ands	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0303 	bic.w	r3, r3, #3
 800a982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	021b      	lsls	r3, r3, #8
 800a99c:	697a      	ldr	r2, [r7, #20]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a28      	ldr	r2, [pc, #160]	@ (800aa48 <TIM_OC3_SetConfig+0xfc>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d003      	beq.n	800a9b2 <TIM_OC3_SetConfig+0x66>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a27      	ldr	r2, [pc, #156]	@ (800aa4c <TIM_OC3_SetConfig+0x100>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d10d      	bne.n	800a9ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a9b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	021b      	lsls	r3, r3, #8
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a9cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa48 <TIM_OC3_SetConfig+0xfc>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00f      	beq.n	800a9f6 <TIM_OC3_SetConfig+0xaa>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a1c      	ldr	r2, [pc, #112]	@ (800aa4c <TIM_OC3_SetConfig+0x100>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d00b      	beq.n	800a9f6 <TIM_OC3_SetConfig+0xaa>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a1b      	ldr	r2, [pc, #108]	@ (800aa50 <TIM_OC3_SetConfig+0x104>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d007      	beq.n	800a9f6 <TIM_OC3_SetConfig+0xaa>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a1a      	ldr	r2, [pc, #104]	@ (800aa54 <TIM_OC3_SetConfig+0x108>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d003      	beq.n	800a9f6 <TIM_OC3_SetConfig+0xaa>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a19      	ldr	r2, [pc, #100]	@ (800aa58 <TIM_OC3_SetConfig+0x10c>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d113      	bne.n	800aa1e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	011b      	lsls	r3, r3, #4
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	621a      	str	r2, [r3, #32]
}
 800aa38:	bf00      	nop
 800aa3a:	371c      	adds	r7, #28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	fffeff8f 	.word	0xfffeff8f
 800aa48:	40010000 	.word	0x40010000
 800aa4c:	40010400 	.word	0x40010400
 800aa50:	40014000 	.word	0x40014000
 800aa54:	40014400 	.word	0x40014400
 800aa58:	40014800 	.word	0x40014800

0800aa5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a1b      	ldr	r3, [r3, #32]
 800aa70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	4b24      	ldr	r3, [pc, #144]	@ (800ab18 <TIM_OC4_SetConfig+0xbc>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	021b      	lsls	r3, r3, #8
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aaa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	031b      	lsls	r3, r3, #12
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a19      	ldr	r2, [pc, #100]	@ (800ab1c <TIM_OC4_SetConfig+0xc0>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d00f      	beq.n	800aadc <TIM_OC4_SetConfig+0x80>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a18      	ldr	r2, [pc, #96]	@ (800ab20 <TIM_OC4_SetConfig+0xc4>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d00b      	beq.n	800aadc <TIM_OC4_SetConfig+0x80>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a17      	ldr	r2, [pc, #92]	@ (800ab24 <TIM_OC4_SetConfig+0xc8>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d007      	beq.n	800aadc <TIM_OC4_SetConfig+0x80>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a16      	ldr	r2, [pc, #88]	@ (800ab28 <TIM_OC4_SetConfig+0xcc>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_OC4_SetConfig+0x80>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a15      	ldr	r2, [pc, #84]	@ (800ab2c <TIM_OC4_SetConfig+0xd0>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d109      	bne.n	800aaf0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	019b      	lsls	r3, r3, #6
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	621a      	str	r2, [r3, #32]
}
 800ab0a:	bf00      	nop
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	feff8fff 	.word	0xfeff8fff
 800ab1c:	40010000 	.word	0x40010000
 800ab20:	40010400 	.word	0x40010400
 800ab24:	40014000 	.word	0x40014000
 800ab28:	40014400 	.word	0x40014400
 800ab2c:	40014800 	.word	0x40014800

0800ab30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4b21      	ldr	r3, [pc, #132]	@ (800abe0 <TIM_OC5_SetConfig+0xb0>)
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ab70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	041b      	lsls	r3, r3, #16
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a18      	ldr	r2, [pc, #96]	@ (800abe4 <TIM_OC5_SetConfig+0xb4>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d00f      	beq.n	800aba6 <TIM_OC5_SetConfig+0x76>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a17      	ldr	r2, [pc, #92]	@ (800abe8 <TIM_OC5_SetConfig+0xb8>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d00b      	beq.n	800aba6 <TIM_OC5_SetConfig+0x76>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a16      	ldr	r2, [pc, #88]	@ (800abec <TIM_OC5_SetConfig+0xbc>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d007      	beq.n	800aba6 <TIM_OC5_SetConfig+0x76>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a15      	ldr	r2, [pc, #84]	@ (800abf0 <TIM_OC5_SetConfig+0xc0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d003      	beq.n	800aba6 <TIM_OC5_SetConfig+0x76>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a14      	ldr	r2, [pc, #80]	@ (800abf4 <TIM_OC5_SetConfig+0xc4>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d109      	bne.n	800abba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800abac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	021b      	lsls	r3, r3, #8
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	621a      	str	r2, [r3, #32]
}
 800abd4:	bf00      	nop
 800abd6:	371c      	adds	r7, #28
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	fffeff8f 	.word	0xfffeff8f
 800abe4:	40010000 	.word	0x40010000
 800abe8:	40010400 	.word	0x40010400
 800abec:	40014000 	.word	0x40014000
 800abf0:	40014400 	.word	0x40014400
 800abf4:	40014800 	.word	0x40014800

0800abf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	4b22      	ldr	r3, [pc, #136]	@ (800acac <TIM_OC6_SetConfig+0xb4>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	051b      	lsls	r3, r3, #20
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a19      	ldr	r2, [pc, #100]	@ (800acb0 <TIM_OC6_SetConfig+0xb8>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00f      	beq.n	800ac70 <TIM_OC6_SetConfig+0x78>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a18      	ldr	r2, [pc, #96]	@ (800acb4 <TIM_OC6_SetConfig+0xbc>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00b      	beq.n	800ac70 <TIM_OC6_SetConfig+0x78>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a17      	ldr	r2, [pc, #92]	@ (800acb8 <TIM_OC6_SetConfig+0xc0>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d007      	beq.n	800ac70 <TIM_OC6_SetConfig+0x78>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a16      	ldr	r2, [pc, #88]	@ (800acbc <TIM_OC6_SetConfig+0xc4>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d003      	beq.n	800ac70 <TIM_OC6_SetConfig+0x78>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a15      	ldr	r2, [pc, #84]	@ (800acc0 <TIM_OC6_SetConfig+0xc8>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d109      	bne.n	800ac84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	695b      	ldr	r3, [r3, #20]
 800ac7c:	029b      	lsls	r3, r3, #10
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	621a      	str	r2, [r3, #32]
}
 800ac9e:	bf00      	nop
 800aca0:	371c      	adds	r7, #28
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	feff8fff 	.word	0xfeff8fff
 800acb0:	40010000 	.word	0x40010000
 800acb4:	40010400 	.word	0x40010400
 800acb8:	40014000 	.word	0x40014000
 800acbc:	40014400 	.word	0x40014400
 800acc0:	40014800 	.word	0x40014800

0800acc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b087      	sub	sp, #28
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	f023 0201 	bic.w	r2, r3, #1
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	011b      	lsls	r3, r3, #4
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f023 030a 	bic.w	r3, r3, #10
 800ad00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	621a      	str	r2, [r3, #32]
}
 800ad16:	bf00      	nop
 800ad18:	371c      	adds	r7, #28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad22:	b480      	push	{r7}
 800ad24:	b087      	sub	sp, #28
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	f023 0210 	bic.w	r2, r3, #16
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	031b      	lsls	r3, r3, #12
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	621a      	str	r2, [r3, #32]
}
 800ad76:	bf00      	nop
 800ad78:	371c      	adds	r7, #28
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
	...

0800ad84 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	4b09      	ldr	r3, [pc, #36]	@ (800adbc <TIM_ITRx_SetConfig+0x38>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	f043 0307 	orr.w	r3, r3, #7
 800ada6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	609a      	str	r2, [r3, #8]
}
 800adae:	bf00      	nop
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	ffcfff8f 	.word	0xffcfff8f

0800adc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b087      	sub	sp, #28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	021a      	lsls	r2, r3, #8
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	431a      	orrs	r2, r3
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	4313      	orrs	r3, r2
 800adec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	609a      	str	r2, [r3, #8]
}
 800adf4:	bf00      	nop
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d101      	bne.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae14:	2302      	movs	r3, #2
 800ae16:	e077      	b.n	800af08 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a35      	ldr	r2, [pc, #212]	@ (800af14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d004      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a34      	ldr	r2, [pc, #208]	@ (800af18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d108      	bne.n	800ae5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a25      	ldr	r2, [pc, #148]	@ (800af14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d02c      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae8a:	d027      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a22      	ldr	r2, [pc, #136]	@ (800af1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d022      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a21      	ldr	r2, [pc, #132]	@ (800af20 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d01d      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a1f      	ldr	r2, [pc, #124]	@ (800af24 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d018      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a1a      	ldr	r2, [pc, #104]	@ (800af18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d013      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a1b      	ldr	r2, [pc, #108]	@ (800af28 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d00e      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a1a      	ldr	r2, [pc, #104]	@ (800af2c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d009      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a18      	ldr	r2, [pc, #96]	@ (800af30 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d004      	beq.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a17      	ldr	r2, [pc, #92]	@ (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d10c      	bne.n	800aef6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aee2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	40010000 	.word	0x40010000
 800af18:	40010400 	.word	0x40010400
 800af1c:	40000400 	.word	0x40000400
 800af20:	40000800 	.word	0x40000800
 800af24:	40000c00 	.word	0x40000c00
 800af28:	40001800 	.word	0x40001800
 800af2c:	40014000 	.word	0x40014000
 800af30:	4000e000 	.word	0x4000e000
 800af34:	4000e400 	.word	0x4000e400

0800af38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d101      	bne.n	800af54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af50:	2302      	movs	r3, #2
 800af52:	e073      	b.n	800b03c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	4313      	orrs	r3, r2
 800af68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	4313      	orrs	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4313      	orrs	r3, r2
 800af92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	041b      	lsls	r3, r3, #16
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a19      	ldr	r2, [pc, #100]	@ (800b048 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d004      	beq.n	800aff0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a18      	ldr	r2, [pc, #96]	@ (800b04c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d11c      	bne.n	800b02a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800affa:	051b      	lsls	r3, r3, #20
 800affc:	4313      	orrs	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b018:	4313      	orrs	r3, r2
 800b01a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b026:	4313      	orrs	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr
 800b048:	40010000 	.word	0x40010000
 800b04c:	40010400 	.word	0x40010400

0800b050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e042      	b.n	800b0e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7f7 fe0b 	bl	8002c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2224      	movs	r2, #36	@ 0x24
 800b07e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f022 0201 	bic.w	r2, r2, #1
 800b090:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b096:	2b00      	cmp	r3, #0
 800b098:	d002      	beq.n	800b0a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fe94 	bl	800bdc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f825 	bl	800b0f0 <UART_SetConfig>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d101      	bne.n	800b0b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e01b      	b.n	800b0e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b0be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689a      	ldr	r2, [r3, #8]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b0ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f042 0201 	orr.w	r2, r2, #1
 800b0de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 ff13 	bl	800bf0c <UART_CheckIdleState>
 800b0e6:	4603      	mov	r3, r0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0f4:	b092      	sub	sp, #72	@ 0x48
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	689a      	ldr	r2, [r3, #8]
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	431a      	orrs	r2, r3
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	431a      	orrs	r2, r3
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	69db      	ldr	r3, [r3, #28]
 800b114:	4313      	orrs	r3, r2
 800b116:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	4bbe      	ldr	r3, [pc, #760]	@ (800b418 <UART_SetConfig+0x328>)
 800b120:	4013      	ands	r3, r2
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	6812      	ldr	r2, [r2, #0]
 800b126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b128:	430b      	orrs	r3, r1
 800b12a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	68da      	ldr	r2, [r3, #12]
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	430a      	orrs	r2, r1
 800b140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4ab3      	ldr	r2, [pc, #716]	@ (800b41c <UART_SetConfig+0x32c>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d004      	beq.n	800b15c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b158:	4313      	orrs	r3, r2
 800b15a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689a      	ldr	r2, [r3, #8]
 800b162:	4baf      	ldr	r3, [pc, #700]	@ (800b420 <UART_SetConfig+0x330>)
 800b164:	4013      	ands	r3, r2
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	6812      	ldr	r2, [r2, #0]
 800b16a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b16c:	430b      	orrs	r3, r1
 800b16e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b176:	f023 010f 	bic.w	r1, r3, #15
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	430a      	orrs	r2, r1
 800b184:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4aa6      	ldr	r2, [pc, #664]	@ (800b424 <UART_SetConfig+0x334>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d177      	bne.n	800b280 <UART_SetConfig+0x190>
 800b190:	4ba5      	ldr	r3, [pc, #660]	@ (800b428 <UART_SetConfig+0x338>)
 800b192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b198:	2b28      	cmp	r3, #40	@ 0x28
 800b19a:	d86d      	bhi.n	800b278 <UART_SetConfig+0x188>
 800b19c:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a4 <UART_SetConfig+0xb4>)
 800b19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a2:	bf00      	nop
 800b1a4:	0800b249 	.word	0x0800b249
 800b1a8:	0800b279 	.word	0x0800b279
 800b1ac:	0800b279 	.word	0x0800b279
 800b1b0:	0800b279 	.word	0x0800b279
 800b1b4:	0800b279 	.word	0x0800b279
 800b1b8:	0800b279 	.word	0x0800b279
 800b1bc:	0800b279 	.word	0x0800b279
 800b1c0:	0800b279 	.word	0x0800b279
 800b1c4:	0800b251 	.word	0x0800b251
 800b1c8:	0800b279 	.word	0x0800b279
 800b1cc:	0800b279 	.word	0x0800b279
 800b1d0:	0800b279 	.word	0x0800b279
 800b1d4:	0800b279 	.word	0x0800b279
 800b1d8:	0800b279 	.word	0x0800b279
 800b1dc:	0800b279 	.word	0x0800b279
 800b1e0:	0800b279 	.word	0x0800b279
 800b1e4:	0800b259 	.word	0x0800b259
 800b1e8:	0800b279 	.word	0x0800b279
 800b1ec:	0800b279 	.word	0x0800b279
 800b1f0:	0800b279 	.word	0x0800b279
 800b1f4:	0800b279 	.word	0x0800b279
 800b1f8:	0800b279 	.word	0x0800b279
 800b1fc:	0800b279 	.word	0x0800b279
 800b200:	0800b279 	.word	0x0800b279
 800b204:	0800b261 	.word	0x0800b261
 800b208:	0800b279 	.word	0x0800b279
 800b20c:	0800b279 	.word	0x0800b279
 800b210:	0800b279 	.word	0x0800b279
 800b214:	0800b279 	.word	0x0800b279
 800b218:	0800b279 	.word	0x0800b279
 800b21c:	0800b279 	.word	0x0800b279
 800b220:	0800b279 	.word	0x0800b279
 800b224:	0800b269 	.word	0x0800b269
 800b228:	0800b279 	.word	0x0800b279
 800b22c:	0800b279 	.word	0x0800b279
 800b230:	0800b279 	.word	0x0800b279
 800b234:	0800b279 	.word	0x0800b279
 800b238:	0800b279 	.word	0x0800b279
 800b23c:	0800b279 	.word	0x0800b279
 800b240:	0800b279 	.word	0x0800b279
 800b244:	0800b271 	.word	0x0800b271
 800b248:	2301      	movs	r3, #1
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b24e:	e326      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b250:	2304      	movs	r3, #4
 800b252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b256:	e322      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b258:	2308      	movs	r3, #8
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25e:	e31e      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b260:	2310      	movs	r3, #16
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b266:	e31a      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b268:	2320      	movs	r3, #32
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b26e:	e316      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b270:	2340      	movs	r3, #64	@ 0x40
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b276:	e312      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b278:	2380      	movs	r3, #128	@ 0x80
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b27e:	e30e      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a69      	ldr	r2, [pc, #420]	@ (800b42c <UART_SetConfig+0x33c>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d130      	bne.n	800b2ec <UART_SetConfig+0x1fc>
 800b28a:	4b67      	ldr	r3, [pc, #412]	@ (800b428 <UART_SetConfig+0x338>)
 800b28c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	2b05      	cmp	r3, #5
 800b294:	d826      	bhi.n	800b2e4 <UART_SetConfig+0x1f4>
 800b296:	a201      	add	r2, pc, #4	@ (adr r2, 800b29c <UART_SetConfig+0x1ac>)
 800b298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29c:	0800b2b5 	.word	0x0800b2b5
 800b2a0:	0800b2bd 	.word	0x0800b2bd
 800b2a4:	0800b2c5 	.word	0x0800b2c5
 800b2a8:	0800b2cd 	.word	0x0800b2cd
 800b2ac:	0800b2d5 	.word	0x0800b2d5
 800b2b0:	0800b2dd 	.word	0x0800b2dd
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ba:	e2f0      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b2bc:	2304      	movs	r3, #4
 800b2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2c2:	e2ec      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b2c4:	2308      	movs	r3, #8
 800b2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ca:	e2e8      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b2cc:	2310      	movs	r3, #16
 800b2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2d2:	e2e4      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b2d4:	2320      	movs	r3, #32
 800b2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2da:	e2e0      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b2dc:	2340      	movs	r3, #64	@ 0x40
 800b2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2e2:	e2dc      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b2e4:	2380      	movs	r3, #128	@ 0x80
 800b2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ea:	e2d8      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a4f      	ldr	r2, [pc, #316]	@ (800b430 <UART_SetConfig+0x340>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d130      	bne.n	800b358 <UART_SetConfig+0x268>
 800b2f6:	4b4c      	ldr	r3, [pc, #304]	@ (800b428 <UART_SetConfig+0x338>)
 800b2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2fa:	f003 0307 	and.w	r3, r3, #7
 800b2fe:	2b05      	cmp	r3, #5
 800b300:	d826      	bhi.n	800b350 <UART_SetConfig+0x260>
 800b302:	a201      	add	r2, pc, #4	@ (adr r2, 800b308 <UART_SetConfig+0x218>)
 800b304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b308:	0800b321 	.word	0x0800b321
 800b30c:	0800b329 	.word	0x0800b329
 800b310:	0800b331 	.word	0x0800b331
 800b314:	0800b339 	.word	0x0800b339
 800b318:	0800b341 	.word	0x0800b341
 800b31c:	0800b349 	.word	0x0800b349
 800b320:	2300      	movs	r3, #0
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b326:	e2ba      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b328:	2304      	movs	r3, #4
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32e:	e2b6      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b330:	2308      	movs	r3, #8
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b336:	e2b2      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b338:	2310      	movs	r3, #16
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b33e:	e2ae      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b340:	2320      	movs	r3, #32
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b346:	e2aa      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b348:	2340      	movs	r3, #64	@ 0x40
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b34e:	e2a6      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b350:	2380      	movs	r3, #128	@ 0x80
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b356:	e2a2      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a35      	ldr	r2, [pc, #212]	@ (800b434 <UART_SetConfig+0x344>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d130      	bne.n	800b3c4 <UART_SetConfig+0x2d4>
 800b362:	4b31      	ldr	r3, [pc, #196]	@ (800b428 <UART_SetConfig+0x338>)
 800b364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	2b05      	cmp	r3, #5
 800b36c:	d826      	bhi.n	800b3bc <UART_SetConfig+0x2cc>
 800b36e:	a201      	add	r2, pc, #4	@ (adr r2, 800b374 <UART_SetConfig+0x284>)
 800b370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b374:	0800b38d 	.word	0x0800b38d
 800b378:	0800b395 	.word	0x0800b395
 800b37c:	0800b39d 	.word	0x0800b39d
 800b380:	0800b3a5 	.word	0x0800b3a5
 800b384:	0800b3ad 	.word	0x0800b3ad
 800b388:	0800b3b5 	.word	0x0800b3b5
 800b38c:	2300      	movs	r3, #0
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b392:	e284      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b394:	2304      	movs	r3, #4
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39a:	e280      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b39c:	2308      	movs	r3, #8
 800b39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3a2:	e27c      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b3a4:	2310      	movs	r3, #16
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3aa:	e278      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b3ac:	2320      	movs	r3, #32
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3b2:	e274      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b3b4:	2340      	movs	r3, #64	@ 0x40
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ba:	e270      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b3bc:	2380      	movs	r3, #128	@ 0x80
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3c2:	e26c      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a1b      	ldr	r2, [pc, #108]	@ (800b438 <UART_SetConfig+0x348>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d142      	bne.n	800b454 <UART_SetConfig+0x364>
 800b3ce:	4b16      	ldr	r3, [pc, #88]	@ (800b428 <UART_SetConfig+0x338>)
 800b3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3d2:	f003 0307 	and.w	r3, r3, #7
 800b3d6:	2b05      	cmp	r3, #5
 800b3d8:	d838      	bhi.n	800b44c <UART_SetConfig+0x35c>
 800b3da:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e0 <UART_SetConfig+0x2f0>)
 800b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e0:	0800b3f9 	.word	0x0800b3f9
 800b3e4:	0800b401 	.word	0x0800b401
 800b3e8:	0800b409 	.word	0x0800b409
 800b3ec:	0800b411 	.word	0x0800b411
 800b3f0:	0800b43d 	.word	0x0800b43d
 800b3f4:	0800b445 	.word	0x0800b445
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3fe:	e24e      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b400:	2304      	movs	r3, #4
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b406:	e24a      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b408:	2308      	movs	r3, #8
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40e:	e246      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b410:	2310      	movs	r3, #16
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b416:	e242      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b418:	cfff69f3 	.word	0xcfff69f3
 800b41c:	58000c00 	.word	0x58000c00
 800b420:	11fff4ff 	.word	0x11fff4ff
 800b424:	40011000 	.word	0x40011000
 800b428:	58024400 	.word	0x58024400
 800b42c:	40004400 	.word	0x40004400
 800b430:	40004800 	.word	0x40004800
 800b434:	40004c00 	.word	0x40004c00
 800b438:	40005000 	.word	0x40005000
 800b43c:	2320      	movs	r3, #32
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b442:	e22c      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b444:	2340      	movs	r3, #64	@ 0x40
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b44a:	e228      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b44c:	2380      	movs	r3, #128	@ 0x80
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b452:	e224      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4ab1      	ldr	r2, [pc, #708]	@ (800b720 <UART_SetConfig+0x630>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d176      	bne.n	800b54c <UART_SetConfig+0x45c>
 800b45e:	4bb1      	ldr	r3, [pc, #708]	@ (800b724 <UART_SetConfig+0x634>)
 800b460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b466:	2b28      	cmp	r3, #40	@ 0x28
 800b468:	d86c      	bhi.n	800b544 <UART_SetConfig+0x454>
 800b46a:	a201      	add	r2, pc, #4	@ (adr r2, 800b470 <UART_SetConfig+0x380>)
 800b46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b470:	0800b515 	.word	0x0800b515
 800b474:	0800b545 	.word	0x0800b545
 800b478:	0800b545 	.word	0x0800b545
 800b47c:	0800b545 	.word	0x0800b545
 800b480:	0800b545 	.word	0x0800b545
 800b484:	0800b545 	.word	0x0800b545
 800b488:	0800b545 	.word	0x0800b545
 800b48c:	0800b545 	.word	0x0800b545
 800b490:	0800b51d 	.word	0x0800b51d
 800b494:	0800b545 	.word	0x0800b545
 800b498:	0800b545 	.word	0x0800b545
 800b49c:	0800b545 	.word	0x0800b545
 800b4a0:	0800b545 	.word	0x0800b545
 800b4a4:	0800b545 	.word	0x0800b545
 800b4a8:	0800b545 	.word	0x0800b545
 800b4ac:	0800b545 	.word	0x0800b545
 800b4b0:	0800b525 	.word	0x0800b525
 800b4b4:	0800b545 	.word	0x0800b545
 800b4b8:	0800b545 	.word	0x0800b545
 800b4bc:	0800b545 	.word	0x0800b545
 800b4c0:	0800b545 	.word	0x0800b545
 800b4c4:	0800b545 	.word	0x0800b545
 800b4c8:	0800b545 	.word	0x0800b545
 800b4cc:	0800b545 	.word	0x0800b545
 800b4d0:	0800b52d 	.word	0x0800b52d
 800b4d4:	0800b545 	.word	0x0800b545
 800b4d8:	0800b545 	.word	0x0800b545
 800b4dc:	0800b545 	.word	0x0800b545
 800b4e0:	0800b545 	.word	0x0800b545
 800b4e4:	0800b545 	.word	0x0800b545
 800b4e8:	0800b545 	.word	0x0800b545
 800b4ec:	0800b545 	.word	0x0800b545
 800b4f0:	0800b535 	.word	0x0800b535
 800b4f4:	0800b545 	.word	0x0800b545
 800b4f8:	0800b545 	.word	0x0800b545
 800b4fc:	0800b545 	.word	0x0800b545
 800b500:	0800b545 	.word	0x0800b545
 800b504:	0800b545 	.word	0x0800b545
 800b508:	0800b545 	.word	0x0800b545
 800b50c:	0800b545 	.word	0x0800b545
 800b510:	0800b53d 	.word	0x0800b53d
 800b514:	2301      	movs	r3, #1
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b51a:	e1c0      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b51c:	2304      	movs	r3, #4
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b522:	e1bc      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b524:	2308      	movs	r3, #8
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52a:	e1b8      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b52c:	2310      	movs	r3, #16
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b532:	e1b4      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b534:	2320      	movs	r3, #32
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53a:	e1b0      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b53c:	2340      	movs	r3, #64	@ 0x40
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b542:	e1ac      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b544:	2380      	movs	r3, #128	@ 0x80
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54a:	e1a8      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a75      	ldr	r2, [pc, #468]	@ (800b728 <UART_SetConfig+0x638>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d130      	bne.n	800b5b8 <UART_SetConfig+0x4c8>
 800b556:	4b73      	ldr	r3, [pc, #460]	@ (800b724 <UART_SetConfig+0x634>)
 800b558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b55a:	f003 0307 	and.w	r3, r3, #7
 800b55e:	2b05      	cmp	r3, #5
 800b560:	d826      	bhi.n	800b5b0 <UART_SetConfig+0x4c0>
 800b562:	a201      	add	r2, pc, #4	@ (adr r2, 800b568 <UART_SetConfig+0x478>)
 800b564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b568:	0800b581 	.word	0x0800b581
 800b56c:	0800b589 	.word	0x0800b589
 800b570:	0800b591 	.word	0x0800b591
 800b574:	0800b599 	.word	0x0800b599
 800b578:	0800b5a1 	.word	0x0800b5a1
 800b57c:	0800b5a9 	.word	0x0800b5a9
 800b580:	2300      	movs	r3, #0
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b586:	e18a      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b588:	2304      	movs	r3, #4
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b58e:	e186      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b590:	2308      	movs	r3, #8
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b596:	e182      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b598:	2310      	movs	r3, #16
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59e:	e17e      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b5a0:	2320      	movs	r3, #32
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a6:	e17a      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b5a8:	2340      	movs	r3, #64	@ 0x40
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ae:	e176      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b5b0:	2380      	movs	r3, #128	@ 0x80
 800b5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5b6:	e172      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a5b      	ldr	r2, [pc, #364]	@ (800b72c <UART_SetConfig+0x63c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d130      	bne.n	800b624 <UART_SetConfig+0x534>
 800b5c2:	4b58      	ldr	r3, [pc, #352]	@ (800b724 <UART_SetConfig+0x634>)
 800b5c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5c6:	f003 0307 	and.w	r3, r3, #7
 800b5ca:	2b05      	cmp	r3, #5
 800b5cc:	d826      	bhi.n	800b61c <UART_SetConfig+0x52c>
 800b5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b5d4 <UART_SetConfig+0x4e4>)
 800b5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d4:	0800b5ed 	.word	0x0800b5ed
 800b5d8:	0800b5f5 	.word	0x0800b5f5
 800b5dc:	0800b5fd 	.word	0x0800b5fd
 800b5e0:	0800b605 	.word	0x0800b605
 800b5e4:	0800b60d 	.word	0x0800b60d
 800b5e8:	0800b615 	.word	0x0800b615
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f2:	e154      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b5f4:	2304      	movs	r3, #4
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e150      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b5fc:	2308      	movs	r3, #8
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b602:	e14c      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b604:	2310      	movs	r3, #16
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e148      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b60c:	2320      	movs	r3, #32
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e144      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b614:	2340      	movs	r3, #64	@ 0x40
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e140      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b61c:	2380      	movs	r3, #128	@ 0x80
 800b61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b622:	e13c      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a41      	ldr	r2, [pc, #260]	@ (800b730 <UART_SetConfig+0x640>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	f040 8082 	bne.w	800b734 <UART_SetConfig+0x644>
 800b630:	4b3c      	ldr	r3, [pc, #240]	@ (800b724 <UART_SetConfig+0x634>)
 800b632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b634:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b638:	2b28      	cmp	r3, #40	@ 0x28
 800b63a:	d86d      	bhi.n	800b718 <UART_SetConfig+0x628>
 800b63c:	a201      	add	r2, pc, #4	@ (adr r2, 800b644 <UART_SetConfig+0x554>)
 800b63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b642:	bf00      	nop
 800b644:	0800b6e9 	.word	0x0800b6e9
 800b648:	0800b719 	.word	0x0800b719
 800b64c:	0800b719 	.word	0x0800b719
 800b650:	0800b719 	.word	0x0800b719
 800b654:	0800b719 	.word	0x0800b719
 800b658:	0800b719 	.word	0x0800b719
 800b65c:	0800b719 	.word	0x0800b719
 800b660:	0800b719 	.word	0x0800b719
 800b664:	0800b6f1 	.word	0x0800b6f1
 800b668:	0800b719 	.word	0x0800b719
 800b66c:	0800b719 	.word	0x0800b719
 800b670:	0800b719 	.word	0x0800b719
 800b674:	0800b719 	.word	0x0800b719
 800b678:	0800b719 	.word	0x0800b719
 800b67c:	0800b719 	.word	0x0800b719
 800b680:	0800b719 	.word	0x0800b719
 800b684:	0800b6f9 	.word	0x0800b6f9
 800b688:	0800b719 	.word	0x0800b719
 800b68c:	0800b719 	.word	0x0800b719
 800b690:	0800b719 	.word	0x0800b719
 800b694:	0800b719 	.word	0x0800b719
 800b698:	0800b719 	.word	0x0800b719
 800b69c:	0800b719 	.word	0x0800b719
 800b6a0:	0800b719 	.word	0x0800b719
 800b6a4:	0800b701 	.word	0x0800b701
 800b6a8:	0800b719 	.word	0x0800b719
 800b6ac:	0800b719 	.word	0x0800b719
 800b6b0:	0800b719 	.word	0x0800b719
 800b6b4:	0800b719 	.word	0x0800b719
 800b6b8:	0800b719 	.word	0x0800b719
 800b6bc:	0800b719 	.word	0x0800b719
 800b6c0:	0800b719 	.word	0x0800b719
 800b6c4:	0800b709 	.word	0x0800b709
 800b6c8:	0800b719 	.word	0x0800b719
 800b6cc:	0800b719 	.word	0x0800b719
 800b6d0:	0800b719 	.word	0x0800b719
 800b6d4:	0800b719 	.word	0x0800b719
 800b6d8:	0800b719 	.word	0x0800b719
 800b6dc:	0800b719 	.word	0x0800b719
 800b6e0:	0800b719 	.word	0x0800b719
 800b6e4:	0800b711 	.word	0x0800b711
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ee:	e0d6      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b6f0:	2304      	movs	r3, #4
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f6:	e0d2      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b6f8:	2308      	movs	r3, #8
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fe:	e0ce      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b700:	2310      	movs	r3, #16
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b706:	e0ca      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b708:	2320      	movs	r3, #32
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b70e:	e0c6      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b710:	2340      	movs	r3, #64	@ 0x40
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b716:	e0c2      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b718:	2380      	movs	r3, #128	@ 0x80
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71e:	e0be      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b720:	40011400 	.word	0x40011400
 800b724:	58024400 	.word	0x58024400
 800b728:	40007800 	.word	0x40007800
 800b72c:	40007c00 	.word	0x40007c00
 800b730:	40011800 	.word	0x40011800
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4aad      	ldr	r2, [pc, #692]	@ (800b9f0 <UART_SetConfig+0x900>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d176      	bne.n	800b82c <UART_SetConfig+0x73c>
 800b73e:	4bad      	ldr	r3, [pc, #692]	@ (800b9f4 <UART_SetConfig+0x904>)
 800b740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b746:	2b28      	cmp	r3, #40	@ 0x28
 800b748:	d86c      	bhi.n	800b824 <UART_SetConfig+0x734>
 800b74a:	a201      	add	r2, pc, #4	@ (adr r2, 800b750 <UART_SetConfig+0x660>)
 800b74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b750:	0800b7f5 	.word	0x0800b7f5
 800b754:	0800b825 	.word	0x0800b825
 800b758:	0800b825 	.word	0x0800b825
 800b75c:	0800b825 	.word	0x0800b825
 800b760:	0800b825 	.word	0x0800b825
 800b764:	0800b825 	.word	0x0800b825
 800b768:	0800b825 	.word	0x0800b825
 800b76c:	0800b825 	.word	0x0800b825
 800b770:	0800b7fd 	.word	0x0800b7fd
 800b774:	0800b825 	.word	0x0800b825
 800b778:	0800b825 	.word	0x0800b825
 800b77c:	0800b825 	.word	0x0800b825
 800b780:	0800b825 	.word	0x0800b825
 800b784:	0800b825 	.word	0x0800b825
 800b788:	0800b825 	.word	0x0800b825
 800b78c:	0800b825 	.word	0x0800b825
 800b790:	0800b805 	.word	0x0800b805
 800b794:	0800b825 	.word	0x0800b825
 800b798:	0800b825 	.word	0x0800b825
 800b79c:	0800b825 	.word	0x0800b825
 800b7a0:	0800b825 	.word	0x0800b825
 800b7a4:	0800b825 	.word	0x0800b825
 800b7a8:	0800b825 	.word	0x0800b825
 800b7ac:	0800b825 	.word	0x0800b825
 800b7b0:	0800b80d 	.word	0x0800b80d
 800b7b4:	0800b825 	.word	0x0800b825
 800b7b8:	0800b825 	.word	0x0800b825
 800b7bc:	0800b825 	.word	0x0800b825
 800b7c0:	0800b825 	.word	0x0800b825
 800b7c4:	0800b825 	.word	0x0800b825
 800b7c8:	0800b825 	.word	0x0800b825
 800b7cc:	0800b825 	.word	0x0800b825
 800b7d0:	0800b815 	.word	0x0800b815
 800b7d4:	0800b825 	.word	0x0800b825
 800b7d8:	0800b825 	.word	0x0800b825
 800b7dc:	0800b825 	.word	0x0800b825
 800b7e0:	0800b825 	.word	0x0800b825
 800b7e4:	0800b825 	.word	0x0800b825
 800b7e8:	0800b825 	.word	0x0800b825
 800b7ec:	0800b825 	.word	0x0800b825
 800b7f0:	0800b81d 	.word	0x0800b81d
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fa:	e050      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b7fc:	2304      	movs	r3, #4
 800b7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b802:	e04c      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b804:	2308      	movs	r3, #8
 800b806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80a:	e048      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b80c:	2310      	movs	r3, #16
 800b80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b812:	e044      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b814:	2320      	movs	r3, #32
 800b816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81a:	e040      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b81c:	2340      	movs	r3, #64	@ 0x40
 800b81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b822:	e03c      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b824:	2380      	movs	r3, #128	@ 0x80
 800b826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82a:	e038      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a71      	ldr	r2, [pc, #452]	@ (800b9f8 <UART_SetConfig+0x908>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d130      	bne.n	800b898 <UART_SetConfig+0x7a8>
 800b836:	4b6f      	ldr	r3, [pc, #444]	@ (800b9f4 <UART_SetConfig+0x904>)
 800b838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b83a:	f003 0307 	and.w	r3, r3, #7
 800b83e:	2b05      	cmp	r3, #5
 800b840:	d826      	bhi.n	800b890 <UART_SetConfig+0x7a0>
 800b842:	a201      	add	r2, pc, #4	@ (adr r2, 800b848 <UART_SetConfig+0x758>)
 800b844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b848:	0800b861 	.word	0x0800b861
 800b84c:	0800b869 	.word	0x0800b869
 800b850:	0800b871 	.word	0x0800b871
 800b854:	0800b879 	.word	0x0800b879
 800b858:	0800b881 	.word	0x0800b881
 800b85c:	0800b889 	.word	0x0800b889
 800b860:	2302      	movs	r3, #2
 800b862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b866:	e01a      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b868:	2304      	movs	r3, #4
 800b86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86e:	e016      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b870:	2308      	movs	r3, #8
 800b872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b876:	e012      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b878:	2310      	movs	r3, #16
 800b87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87e:	e00e      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b880:	2320      	movs	r3, #32
 800b882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b886:	e00a      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b888:	2340      	movs	r3, #64	@ 0x40
 800b88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88e:	e006      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b890:	2380      	movs	r3, #128	@ 0x80
 800b892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b896:	e002      	b.n	800b89e <UART_SetConfig+0x7ae>
 800b898:	2380      	movs	r3, #128	@ 0x80
 800b89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a55      	ldr	r2, [pc, #340]	@ (800b9f8 <UART_SetConfig+0x908>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	f040 80f8 	bne.w	800ba9a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b8aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b8ae:	2b20      	cmp	r3, #32
 800b8b0:	dc46      	bgt.n	800b940 <UART_SetConfig+0x850>
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	db75      	blt.n	800b9a2 <UART_SetConfig+0x8b2>
 800b8b6:	3b02      	subs	r3, #2
 800b8b8:	2b1e      	cmp	r3, #30
 800b8ba:	d872      	bhi.n	800b9a2 <UART_SetConfig+0x8b2>
 800b8bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c4 <UART_SetConfig+0x7d4>)
 800b8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c2:	bf00      	nop
 800b8c4:	0800b947 	.word	0x0800b947
 800b8c8:	0800b9a3 	.word	0x0800b9a3
 800b8cc:	0800b94f 	.word	0x0800b94f
 800b8d0:	0800b9a3 	.word	0x0800b9a3
 800b8d4:	0800b9a3 	.word	0x0800b9a3
 800b8d8:	0800b9a3 	.word	0x0800b9a3
 800b8dc:	0800b95f 	.word	0x0800b95f
 800b8e0:	0800b9a3 	.word	0x0800b9a3
 800b8e4:	0800b9a3 	.word	0x0800b9a3
 800b8e8:	0800b9a3 	.word	0x0800b9a3
 800b8ec:	0800b9a3 	.word	0x0800b9a3
 800b8f0:	0800b9a3 	.word	0x0800b9a3
 800b8f4:	0800b9a3 	.word	0x0800b9a3
 800b8f8:	0800b9a3 	.word	0x0800b9a3
 800b8fc:	0800b96f 	.word	0x0800b96f
 800b900:	0800b9a3 	.word	0x0800b9a3
 800b904:	0800b9a3 	.word	0x0800b9a3
 800b908:	0800b9a3 	.word	0x0800b9a3
 800b90c:	0800b9a3 	.word	0x0800b9a3
 800b910:	0800b9a3 	.word	0x0800b9a3
 800b914:	0800b9a3 	.word	0x0800b9a3
 800b918:	0800b9a3 	.word	0x0800b9a3
 800b91c:	0800b9a3 	.word	0x0800b9a3
 800b920:	0800b9a3 	.word	0x0800b9a3
 800b924:	0800b9a3 	.word	0x0800b9a3
 800b928:	0800b9a3 	.word	0x0800b9a3
 800b92c:	0800b9a3 	.word	0x0800b9a3
 800b930:	0800b9a3 	.word	0x0800b9a3
 800b934:	0800b9a3 	.word	0x0800b9a3
 800b938:	0800b9a3 	.word	0x0800b9a3
 800b93c:	0800b995 	.word	0x0800b995
 800b940:	2b40      	cmp	r3, #64	@ 0x40
 800b942:	d02a      	beq.n	800b99a <UART_SetConfig+0x8aa>
 800b944:	e02d      	b.n	800b9a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b946:	f7fc fc59 	bl	80081fc <HAL_RCCEx_GetD3PCLK1Freq>
 800b94a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b94c:	e02f      	b.n	800b9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b94e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b952:	4618      	mov	r0, r3
 800b954:	f7fc fc68 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b95c:	e027      	b.n	800b9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b95e:	f107 0318 	add.w	r3, r7, #24
 800b962:	4618      	mov	r0, r3
 800b964:	f7fc fdb4 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b96c:	e01f      	b.n	800b9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b96e:	4b21      	ldr	r3, [pc, #132]	@ (800b9f4 <UART_SetConfig+0x904>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 0320 	and.w	r3, r3, #32
 800b976:	2b00      	cmp	r3, #0
 800b978:	d009      	beq.n	800b98e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b97a:	4b1e      	ldr	r3, [pc, #120]	@ (800b9f4 <UART_SetConfig+0x904>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	08db      	lsrs	r3, r3, #3
 800b980:	f003 0303 	and.w	r3, r3, #3
 800b984:	4a1d      	ldr	r2, [pc, #116]	@ (800b9fc <UART_SetConfig+0x90c>)
 800b986:	fa22 f303 	lsr.w	r3, r2, r3
 800b98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b98c:	e00f      	b.n	800b9ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b98e:	4b1b      	ldr	r3, [pc, #108]	@ (800b9fc <UART_SetConfig+0x90c>)
 800b990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b992:	e00c      	b.n	800b9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b994:	4b1a      	ldr	r3, [pc, #104]	@ (800ba00 <UART_SetConfig+0x910>)
 800b996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b998:	e009      	b.n	800b9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b99a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9a0:	e005      	b.n	800b9ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b9ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 81ee 	beq.w	800bd92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ba:	4a12      	ldr	r2, [pc, #72]	@ (800ba04 <UART_SetConfig+0x914>)
 800b9bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9c8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	4413      	add	r3, r2
 800b9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d305      	bcc.n	800b9e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d910      	bls.n	800ba08 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b9ec:	e1d1      	b.n	800bd92 <UART_SetConfig+0xca2>
 800b9ee:	bf00      	nop
 800b9f0:	40011c00 	.word	0x40011c00
 800b9f4:	58024400 	.word	0x58024400
 800b9f8:	58000c00 	.word	0x58000c00
 800b9fc:	03d09000 	.word	0x03d09000
 800ba00:	003d0900 	.word	0x003d0900
 800ba04:	0801236c 	.word	0x0801236c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	60bb      	str	r3, [r7, #8]
 800ba0e:	60fa      	str	r2, [r7, #12]
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba14:	4ac0      	ldr	r2, [pc, #768]	@ (800bd18 <UART_SetConfig+0xc28>)
 800ba16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	607a      	str	r2, [r7, #4]
 800ba22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba2a:	f7f4 fe85 	bl	8000738 <__aeabi_uldivmod>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	4610      	mov	r0, r2
 800ba34:	4619      	mov	r1, r3
 800ba36:	f04f 0200 	mov.w	r2, #0
 800ba3a:	f04f 0300 	mov.w	r3, #0
 800ba3e:	020b      	lsls	r3, r1, #8
 800ba40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba44:	0202      	lsls	r2, r0, #8
 800ba46:	6979      	ldr	r1, [r7, #20]
 800ba48:	6849      	ldr	r1, [r1, #4]
 800ba4a:	0849      	lsrs	r1, r1, #1
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	460c      	mov	r4, r1
 800ba50:	4605      	mov	r5, r0
 800ba52:	eb12 0804 	adds.w	r8, r2, r4
 800ba56:	eb43 0905 	adc.w	r9, r3, r5
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	469a      	mov	sl, r3
 800ba62:	4693      	mov	fp, r2
 800ba64:	4652      	mov	r2, sl
 800ba66:	465b      	mov	r3, fp
 800ba68:	4640      	mov	r0, r8
 800ba6a:	4649      	mov	r1, r9
 800ba6c:	f7f4 fe64 	bl	8000738 <__aeabi_uldivmod>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	4613      	mov	r3, r2
 800ba76:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba7e:	d308      	bcc.n	800ba92 <UART_SetConfig+0x9a2>
 800ba80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba86:	d204      	bcs.n	800ba92 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba8e:	60da      	str	r2, [r3, #12]
 800ba90:	e17f      	b.n	800bd92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba98:	e17b      	b.n	800bd92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	69db      	ldr	r3, [r3, #28]
 800ba9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800baa2:	f040 80bd 	bne.w	800bc20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800baa6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800baaa:	2b20      	cmp	r3, #32
 800baac:	dc48      	bgt.n	800bb40 <UART_SetConfig+0xa50>
 800baae:	2b00      	cmp	r3, #0
 800bab0:	db7b      	blt.n	800bbaa <UART_SetConfig+0xaba>
 800bab2:	2b20      	cmp	r3, #32
 800bab4:	d879      	bhi.n	800bbaa <UART_SetConfig+0xaba>
 800bab6:	a201      	add	r2, pc, #4	@ (adr r2, 800babc <UART_SetConfig+0x9cc>)
 800bab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800babc:	0800bb47 	.word	0x0800bb47
 800bac0:	0800bb4f 	.word	0x0800bb4f
 800bac4:	0800bbab 	.word	0x0800bbab
 800bac8:	0800bbab 	.word	0x0800bbab
 800bacc:	0800bb57 	.word	0x0800bb57
 800bad0:	0800bbab 	.word	0x0800bbab
 800bad4:	0800bbab 	.word	0x0800bbab
 800bad8:	0800bbab 	.word	0x0800bbab
 800badc:	0800bb67 	.word	0x0800bb67
 800bae0:	0800bbab 	.word	0x0800bbab
 800bae4:	0800bbab 	.word	0x0800bbab
 800bae8:	0800bbab 	.word	0x0800bbab
 800baec:	0800bbab 	.word	0x0800bbab
 800baf0:	0800bbab 	.word	0x0800bbab
 800baf4:	0800bbab 	.word	0x0800bbab
 800baf8:	0800bbab 	.word	0x0800bbab
 800bafc:	0800bb77 	.word	0x0800bb77
 800bb00:	0800bbab 	.word	0x0800bbab
 800bb04:	0800bbab 	.word	0x0800bbab
 800bb08:	0800bbab 	.word	0x0800bbab
 800bb0c:	0800bbab 	.word	0x0800bbab
 800bb10:	0800bbab 	.word	0x0800bbab
 800bb14:	0800bbab 	.word	0x0800bbab
 800bb18:	0800bbab 	.word	0x0800bbab
 800bb1c:	0800bbab 	.word	0x0800bbab
 800bb20:	0800bbab 	.word	0x0800bbab
 800bb24:	0800bbab 	.word	0x0800bbab
 800bb28:	0800bbab 	.word	0x0800bbab
 800bb2c:	0800bbab 	.word	0x0800bbab
 800bb30:	0800bbab 	.word	0x0800bbab
 800bb34:	0800bbab 	.word	0x0800bbab
 800bb38:	0800bbab 	.word	0x0800bbab
 800bb3c:	0800bb9d 	.word	0x0800bb9d
 800bb40:	2b40      	cmp	r3, #64	@ 0x40
 800bb42:	d02e      	beq.n	800bba2 <UART_SetConfig+0xab2>
 800bb44:	e031      	b.n	800bbaa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb46:	f7fa fcbb 	bl	80064c0 <HAL_RCC_GetPCLK1Freq>
 800bb4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb4c:	e033      	b.n	800bbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb4e:	f7fa fccd 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 800bb52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb54:	e02f      	b.n	800bbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fc fb64 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb64:	e027      	b.n	800bbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb66:	f107 0318 	add.w	r3, r7, #24
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fc fcb0 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb74:	e01f      	b.n	800bbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb76:	4b69      	ldr	r3, [pc, #420]	@ (800bd1c <UART_SetConfig+0xc2c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 0320 	and.w	r3, r3, #32
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d009      	beq.n	800bb96 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb82:	4b66      	ldr	r3, [pc, #408]	@ (800bd1c <UART_SetConfig+0xc2c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	08db      	lsrs	r3, r3, #3
 800bb88:	f003 0303 	and.w	r3, r3, #3
 800bb8c:	4a64      	ldr	r2, [pc, #400]	@ (800bd20 <UART_SetConfig+0xc30>)
 800bb8e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb94:	e00f      	b.n	800bbb6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bb96:	4b62      	ldr	r3, [pc, #392]	@ (800bd20 <UART_SetConfig+0xc30>)
 800bb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb9a:	e00c      	b.n	800bbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb9c:	4b61      	ldr	r3, [pc, #388]	@ (800bd24 <UART_SetConfig+0xc34>)
 800bb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bba0:	e009      	b.n	800bbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bba8:	e005      	b.n	800bbb6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bbb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 80ea 	beq.w	800bd92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbc2:	4a55      	ldr	r2, [pc, #340]	@ (800bd18 <UART_SetConfig+0xc28>)
 800bbc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbd0:	005a      	lsls	r2, r3, #1
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	085b      	lsrs	r3, r3, #1
 800bbd8:	441a      	add	r2, r3
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbe2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe6:	2b0f      	cmp	r3, #15
 800bbe8:	d916      	bls.n	800bc18 <UART_SetConfig+0xb28>
 800bbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbf0:	d212      	bcs.n	800bc18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	f023 030f 	bic.w	r3, r3, #15
 800bbfa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfe:	085b      	lsrs	r3, r3, #1
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	f003 0307 	and.w	r3, r3, #7
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bc14:	60da      	str	r2, [r3, #12]
 800bc16:	e0bc      	b.n	800bd92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bc1e:	e0b8      	b.n	800bd92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc24:	2b20      	cmp	r3, #32
 800bc26:	dc4b      	bgt.n	800bcc0 <UART_SetConfig+0xbd0>
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f2c0 8087 	blt.w	800bd3c <UART_SetConfig+0xc4c>
 800bc2e:	2b20      	cmp	r3, #32
 800bc30:	f200 8084 	bhi.w	800bd3c <UART_SetConfig+0xc4c>
 800bc34:	a201      	add	r2, pc, #4	@ (adr r2, 800bc3c <UART_SetConfig+0xb4c>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bcc7 	.word	0x0800bcc7
 800bc40:	0800bccf 	.word	0x0800bccf
 800bc44:	0800bd3d 	.word	0x0800bd3d
 800bc48:	0800bd3d 	.word	0x0800bd3d
 800bc4c:	0800bcd7 	.word	0x0800bcd7
 800bc50:	0800bd3d 	.word	0x0800bd3d
 800bc54:	0800bd3d 	.word	0x0800bd3d
 800bc58:	0800bd3d 	.word	0x0800bd3d
 800bc5c:	0800bce7 	.word	0x0800bce7
 800bc60:	0800bd3d 	.word	0x0800bd3d
 800bc64:	0800bd3d 	.word	0x0800bd3d
 800bc68:	0800bd3d 	.word	0x0800bd3d
 800bc6c:	0800bd3d 	.word	0x0800bd3d
 800bc70:	0800bd3d 	.word	0x0800bd3d
 800bc74:	0800bd3d 	.word	0x0800bd3d
 800bc78:	0800bd3d 	.word	0x0800bd3d
 800bc7c:	0800bcf7 	.word	0x0800bcf7
 800bc80:	0800bd3d 	.word	0x0800bd3d
 800bc84:	0800bd3d 	.word	0x0800bd3d
 800bc88:	0800bd3d 	.word	0x0800bd3d
 800bc8c:	0800bd3d 	.word	0x0800bd3d
 800bc90:	0800bd3d 	.word	0x0800bd3d
 800bc94:	0800bd3d 	.word	0x0800bd3d
 800bc98:	0800bd3d 	.word	0x0800bd3d
 800bc9c:	0800bd3d 	.word	0x0800bd3d
 800bca0:	0800bd3d 	.word	0x0800bd3d
 800bca4:	0800bd3d 	.word	0x0800bd3d
 800bca8:	0800bd3d 	.word	0x0800bd3d
 800bcac:	0800bd3d 	.word	0x0800bd3d
 800bcb0:	0800bd3d 	.word	0x0800bd3d
 800bcb4:	0800bd3d 	.word	0x0800bd3d
 800bcb8:	0800bd3d 	.word	0x0800bd3d
 800bcbc:	0800bd2f 	.word	0x0800bd2f
 800bcc0:	2b40      	cmp	r3, #64	@ 0x40
 800bcc2:	d037      	beq.n	800bd34 <UART_SetConfig+0xc44>
 800bcc4:	e03a      	b.n	800bd3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcc6:	f7fa fbfb 	bl	80064c0 <HAL_RCC_GetPCLK1Freq>
 800bcca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bccc:	e03c      	b.n	800bd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcce:	f7fa fc0d 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 800bcd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bcd4:	e038      	b.n	800bd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fc faa4 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bce4:	e030      	b.n	800bd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bce6:	f107 0318 	add.w	r3, r7, #24
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fc fbf0 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcf4:	e028      	b.n	800bd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcf6:	4b09      	ldr	r3, [pc, #36]	@ (800bd1c <UART_SetConfig+0xc2c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0320 	and.w	r3, r3, #32
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d012      	beq.n	800bd28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd02:	4b06      	ldr	r3, [pc, #24]	@ (800bd1c <UART_SetConfig+0xc2c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	08db      	lsrs	r3, r3, #3
 800bd08:	f003 0303 	and.w	r3, r3, #3
 800bd0c:	4a04      	ldr	r2, [pc, #16]	@ (800bd20 <UART_SetConfig+0xc30>)
 800bd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd14:	e018      	b.n	800bd48 <UART_SetConfig+0xc58>
 800bd16:	bf00      	nop
 800bd18:	0801236c 	.word	0x0801236c
 800bd1c:	58024400 	.word	0x58024400
 800bd20:	03d09000 	.word	0x03d09000
 800bd24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bd28:	4b24      	ldr	r3, [pc, #144]	@ (800bdbc <UART_SetConfig+0xccc>)
 800bd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd2c:	e00c      	b.n	800bd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd2e:	4b24      	ldr	r3, [pc, #144]	@ (800bdc0 <UART_SetConfig+0xcd0>)
 800bd30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd32:	e009      	b.n	800bd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd3a:	e005      	b.n	800bd48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bd46:	bf00      	nop
    }

    if (pclk != 0U)
 800bd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d021      	beq.n	800bd92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd52:	4a1c      	ldr	r2, [pc, #112]	@ (800bdc4 <UART_SetConfig+0xcd4>)
 800bd54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd5c:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	085b      	lsrs	r3, r3, #1
 800bd66:	441a      	add	r2, r3
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd70:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd74:	2b0f      	cmp	r3, #15
 800bd76:	d909      	bls.n	800bd8c <UART_SetConfig+0xc9c>
 800bd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd7e:	d205      	bcs.n	800bd8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	60da      	str	r2, [r3, #12]
 800bd8a:	e002      	b.n	800bd92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	2200      	movs	r2, #0
 800bda6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bdae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3748      	adds	r7, #72	@ 0x48
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdbc:	03d09000 	.word	0x03d09000
 800bdc0:	003d0900 	.word	0x003d0900
 800bdc4:	0801236c 	.word	0x0801236c

0800bdc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd4:	f003 0308 	and.w	r3, r3, #8
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00a      	beq.n	800bdf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	430a      	orrs	r2, r1
 800bdf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf6:	f003 0301 	and.w	r3, r3, #1
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00a      	beq.n	800be14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	430a      	orrs	r2, r1
 800be12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be18:	f003 0302 	and.w	r3, r3, #2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00a      	beq.n	800be36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	430a      	orrs	r2, r1
 800be34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be3a:	f003 0304 	and.w	r3, r3, #4
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00a      	beq.n	800be58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	430a      	orrs	r2, r1
 800be56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be5c:	f003 0310 	and.w	r3, r3, #16
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00a      	beq.n	800be7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	430a      	orrs	r2, r1
 800be78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7e:	f003 0320 	and.w	r3, r3, #32
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00a      	beq.n	800be9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	430a      	orrs	r2, r1
 800be9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d01a      	beq.n	800bede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	430a      	orrs	r2, r1
 800bebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bec6:	d10a      	bne.n	800bede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	430a      	orrs	r2, r1
 800bedc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00a      	beq.n	800bf00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	430a      	orrs	r2, r1
 800befe:	605a      	str	r2, [r3, #4]
  }
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b098      	sub	sp, #96	@ 0x60
 800bf10:	af02      	add	r7, sp, #8
 800bf12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf1c:	f7f7 fb66 	bl	80035ec <HAL_GetTick>
 800bf20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 0308 	and.w	r3, r3, #8
 800bf2c:	2b08      	cmp	r3, #8
 800bf2e:	d12f      	bne.n	800bf90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f88e 	bl	800c060 <UART_WaitOnFlagUntilTimeout>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d022      	beq.n	800bf90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf52:	e853 3f00 	ldrex	r3, [r3]
 800bf56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	461a      	mov	r2, r3
 800bf66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf68:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf70:	e841 2300 	strex	r3, r2, [r1]
 800bf74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e6      	bne.n	800bf4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e063      	b.n	800c058 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0304 	and.w	r3, r3, #4
 800bf9a:	2b04      	cmp	r3, #4
 800bf9c:	d149      	bne.n	800c032 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f857 	bl	800c060 <UART_WaitOnFlagUntilTimeout>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d03c      	beq.n	800c032 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc0:	e853 3f00 	ldrex	r3, [r3]
 800bfc4:	623b      	str	r3, [r7, #32]
   return(result);
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfde:	e841 2300 	strex	r3, r2, [r1]
 800bfe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1e6      	bne.n	800bfb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	3308      	adds	r3, #8
 800bff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	e853 3f00 	ldrex	r3, [r3]
 800bff8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f023 0301 	bic.w	r3, r3, #1
 800c000:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3308      	adds	r3, #8
 800c008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c00a:	61fa      	str	r2, [r7, #28]
 800c00c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00e:	69b9      	ldr	r1, [r7, #24]
 800c010:	69fa      	ldr	r2, [r7, #28]
 800c012:	e841 2300 	strex	r3, r2, [r1]
 800c016:	617b      	str	r3, [r7, #20]
   return(result);
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1e5      	bne.n	800bfea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2220      	movs	r2, #32
 800c022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c02e:	2303      	movs	r3, #3
 800c030:	e012      	b.n	800c058 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2220      	movs	r2, #32
 800c036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3758      	adds	r7, #88	@ 0x58
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	4613      	mov	r3, r2
 800c06e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c070:	e04f      	b.n	800c112 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c078:	d04b      	beq.n	800c112 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c07a:	f7f7 fab7 	bl	80035ec <HAL_GetTick>
 800c07e:	4602      	mov	r2, r0
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	69ba      	ldr	r2, [r7, #24]
 800c086:	429a      	cmp	r2, r3
 800c088:	d302      	bcc.n	800c090 <UART_WaitOnFlagUntilTimeout+0x30>
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d101      	bne.n	800c094 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c090:	2303      	movs	r3, #3
 800c092:	e04e      	b.n	800c132 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 0304 	and.w	r3, r3, #4
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d037      	beq.n	800c112 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	2b80      	cmp	r3, #128	@ 0x80
 800c0a6:	d034      	beq.n	800c112 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b40      	cmp	r3, #64	@ 0x40
 800c0ac:	d031      	beq.n	800c112 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	69db      	ldr	r3, [r3, #28]
 800c0b4:	f003 0308 	and.w	r3, r3, #8
 800c0b8:	2b08      	cmp	r3, #8
 800c0ba:	d110      	bne.n	800c0de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2208      	movs	r2, #8
 800c0c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f000 f839 	bl	800c13c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2208      	movs	r2, #8
 800c0ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e029      	b.n	800c132 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	69db      	ldr	r3, [r3, #28]
 800c0e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0ec:	d111      	bne.n	800c112 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f000 f81f 	bl	800c13c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2220      	movs	r2, #32
 800c102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c10e:	2303      	movs	r3, #3
 800c110:	e00f      	b.n	800c132 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	69da      	ldr	r2, [r3, #28]
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	4013      	ands	r3, r2
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	429a      	cmp	r2, r3
 800c120:	bf0c      	ite	eq
 800c122:	2301      	moveq	r3, #1
 800c124:	2300      	movne	r3, #0
 800c126:	b2db      	uxtb	r3, r3
 800c128:	461a      	mov	r2, r3
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d0a0      	beq.n	800c072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b095      	sub	sp, #84	@ 0x54
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c14c:	e853 3f00 	ldrex	r3, [r3]
 800c150:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	461a      	mov	r2, r3
 800c160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c162:	643b      	str	r3, [r7, #64]	@ 0x40
 800c164:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c166:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c168:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c16a:	e841 2300 	strex	r3, r2, [r1]
 800c16e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1e6      	bne.n	800c144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3308      	adds	r3, #8
 800c17c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	e853 3f00 	ldrex	r3, [r3]
 800c184:	61fb      	str	r3, [r7, #28]
   return(result);
 800c186:	69fa      	ldr	r2, [r7, #28]
 800c188:	4b1e      	ldr	r3, [pc, #120]	@ (800c204 <UART_EndRxTransfer+0xc8>)
 800c18a:	4013      	ands	r3, r2
 800c18c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	3308      	adds	r3, #8
 800c194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c198:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c19c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c19e:	e841 2300 	strex	r3, r2, [r1]
 800c1a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1e5      	bne.n	800c176 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d118      	bne.n	800c1e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	e853 3f00 	ldrex	r3, [r3]
 800c1be:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	f023 0310 	bic.w	r3, r3, #16
 800c1c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1d0:	61bb      	str	r3, [r7, #24]
 800c1d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d4:	6979      	ldr	r1, [r7, #20]
 800c1d6:	69ba      	ldr	r2, [r7, #24]
 800c1d8:	e841 2300 	strex	r3, r2, [r1]
 800c1dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e6      	bne.n	800c1b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2220      	movs	r2, #32
 800c1e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c1f8:	bf00      	nop
 800c1fa:	3754      	adds	r7, #84	@ 0x54
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr
 800c204:	effffffe 	.word	0xeffffffe

0800c208 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c216:	2b01      	cmp	r3, #1
 800c218:	d101      	bne.n	800c21e <HAL_UARTEx_DisableFifoMode+0x16>
 800c21a:	2302      	movs	r3, #2
 800c21c:	e027      	b.n	800c26e <HAL_UARTEx_DisableFifoMode+0x66>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2224      	movs	r2, #36	@ 0x24
 800c22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f022 0201 	bic.w	r2, r2, #1
 800c244:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c24c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2220      	movs	r2, #32
 800c260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c28e:	2302      	movs	r3, #2
 800c290:	e02d      	b.n	800c2ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2224      	movs	r2, #36	@ 0x24
 800c29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0201 	bic.w	r2, r2, #1
 800c2b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f850 	bl	800c374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b084      	sub	sp, #16
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c306:	2b01      	cmp	r3, #1
 800c308:	d101      	bne.n	800c30e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c30a:	2302      	movs	r3, #2
 800c30c:	e02d      	b.n	800c36a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2224      	movs	r2, #36	@ 0x24
 800c31a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f022 0201 	bic.w	r2, r2, #1
 800c334:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	430a      	orrs	r2, r1
 800c348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f812 	bl	800c374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2220      	movs	r2, #32
 800c35c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
	...

0800c374 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c380:	2b00      	cmp	r3, #0
 800c382:	d108      	bne.n	800c396 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c394:	e031      	b.n	800c3fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c396:	2310      	movs	r3, #16
 800c398:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c39a:	2310      	movs	r3, #16
 800c39c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	0e5b      	lsrs	r3, r3, #25
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	f003 0307 	and.w	r3, r3, #7
 800c3ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	0f5b      	lsrs	r3, r3, #29
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	f003 0307 	and.w	r3, r3, #7
 800c3bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
 800c3c0:	7b3a      	ldrb	r2, [r7, #12]
 800c3c2:	4911      	ldr	r1, [pc, #68]	@ (800c408 <UARTEx_SetNbDataToProcess+0x94>)
 800c3c4:	5c8a      	ldrb	r2, [r1, r2]
 800c3c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c3ca:	7b3a      	ldrb	r2, [r7, #12]
 800c3cc:	490f      	ldr	r1, [pc, #60]	@ (800c40c <UARTEx_SetNbDataToProcess+0x98>)
 800c3ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
 800c3de:	7b7a      	ldrb	r2, [r7, #13]
 800c3e0:	4909      	ldr	r1, [pc, #36]	@ (800c408 <UARTEx_SetNbDataToProcess+0x94>)
 800c3e2:	5c8a      	ldrb	r2, [r1, r2]
 800c3e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c3e8:	7b7a      	ldrb	r2, [r7, #13]
 800c3ea:	4908      	ldr	r1, [pc, #32]	@ (800c40c <UARTEx_SetNbDataToProcess+0x98>)
 800c3ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	08012384 	.word	0x08012384
 800c40c:	0801238c 	.word	0x0801238c

0800c410 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e03c      	b.n	800c49c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d106      	bne.n	800c43c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7f6 fdce 	bl	8002fd8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2202      	movs	r2, #2
 800c440:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f022 0201 	bic.w	r2, r2, #1
 800c452:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 f85b 	bl	800c510 <USART_SetConfig>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d101      	bne.n	800c464 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	e01b      	b.n	800c49c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c472:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	689a      	ldr	r2, [r3, #8]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c482:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f042 0201 	orr.w	r2, r2, #1
 800c492:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fddd 	bl	800d054 <USART_CheckIdleState>
 800c49a:	4603      	mov	r3, r0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	603b      	str	r3, [r7, #0]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c4b4:	e018      	b.n	800c4e8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4bc:	d014      	beq.n	800c4e8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4be:	f7f7 f895 	bl	80035ec <HAL_GetTick>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	69ba      	ldr	r2, [r7, #24]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d302      	bcc.n	800c4d4 <USART_WaitOnFlagUntilTimeout+0x30>
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d109      	bne.n	800c4e8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e00f      	b.n	800c508 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	69da      	ldr	r2, [r3, #28]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	bf0c      	ite	eq
 800c4f8:	2301      	moveq	r3, #1
 800c4fa:	2300      	movne	r3, #0
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	461a      	mov	r2, r3
 800c500:	79fb      	ldrb	r3, [r7, #7]
 800c502:	429a      	cmp	r2, r3
 800c504:	d0d7      	beq.n	800c4b6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b08e      	sub	sp, #56	@ 0x38
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800c518:	2300      	movs	r3, #0
 800c51a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800c51e:	2300      	movs	r3, #0
 800c520:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	689a      	ldr	r2, [r3, #8]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	431a      	orrs	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	695b      	ldr	r3, [r3, #20]
 800c530:	4313      	orrs	r3, r2
 800c532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4bc9      	ldr	r3, [pc, #804]	@ (800c864 <USART_SetConfig+0x354>)
 800c540:	4013      	ands	r3, r2
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	6812      	ldr	r2, [r2, #0]
 800c546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c548:	430b      	orrs	r3, r1
 800c54a:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800c54c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c558:	4313      	orrs	r3, r2
 800c55a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	699a      	ldr	r2, [r3, #24]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	69db      	ldr	r3, [r3, #28]
 800c564:	4313      	orrs	r3, r2
 800c566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c568:	4313      	orrs	r3, r2
 800c56a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c572:	4313      	orrs	r3, r2
 800c574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	4bba      	ldr	r3, [pc, #744]	@ (800c868 <USART_SetConfig+0x358>)
 800c57e:	4013      	ands	r3, r2
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	6812      	ldr	r2, [r2, #0]
 800c584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c586:	430b      	orrs	r3, r1
 800c588:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c590:	f023 010f 	bic.w	r1, r3, #15
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	430a      	orrs	r2, r1
 800c59e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4ab1      	ldr	r2, [pc, #708]	@ (800c86c <USART_SetConfig+0x35c>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d176      	bne.n	800c698 <USART_SetConfig+0x188>
 800c5aa:	4bb1      	ldr	r3, [pc, #708]	@ (800c870 <USART_SetConfig+0x360>)
 800c5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c5b2:	2b28      	cmp	r3, #40	@ 0x28
 800c5b4:	d86c      	bhi.n	800c690 <USART_SetConfig+0x180>
 800c5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5bc <USART_SetConfig+0xac>)
 800c5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5bc:	0800c661 	.word	0x0800c661
 800c5c0:	0800c691 	.word	0x0800c691
 800c5c4:	0800c691 	.word	0x0800c691
 800c5c8:	0800c691 	.word	0x0800c691
 800c5cc:	0800c691 	.word	0x0800c691
 800c5d0:	0800c691 	.word	0x0800c691
 800c5d4:	0800c691 	.word	0x0800c691
 800c5d8:	0800c691 	.word	0x0800c691
 800c5dc:	0800c669 	.word	0x0800c669
 800c5e0:	0800c691 	.word	0x0800c691
 800c5e4:	0800c691 	.word	0x0800c691
 800c5e8:	0800c691 	.word	0x0800c691
 800c5ec:	0800c691 	.word	0x0800c691
 800c5f0:	0800c691 	.word	0x0800c691
 800c5f4:	0800c691 	.word	0x0800c691
 800c5f8:	0800c691 	.word	0x0800c691
 800c5fc:	0800c671 	.word	0x0800c671
 800c600:	0800c691 	.word	0x0800c691
 800c604:	0800c691 	.word	0x0800c691
 800c608:	0800c691 	.word	0x0800c691
 800c60c:	0800c691 	.word	0x0800c691
 800c610:	0800c691 	.word	0x0800c691
 800c614:	0800c691 	.word	0x0800c691
 800c618:	0800c691 	.word	0x0800c691
 800c61c:	0800c679 	.word	0x0800c679
 800c620:	0800c691 	.word	0x0800c691
 800c624:	0800c691 	.word	0x0800c691
 800c628:	0800c691 	.word	0x0800c691
 800c62c:	0800c691 	.word	0x0800c691
 800c630:	0800c691 	.word	0x0800c691
 800c634:	0800c691 	.word	0x0800c691
 800c638:	0800c691 	.word	0x0800c691
 800c63c:	0800c681 	.word	0x0800c681
 800c640:	0800c691 	.word	0x0800c691
 800c644:	0800c691 	.word	0x0800c691
 800c648:	0800c691 	.word	0x0800c691
 800c64c:	0800c691 	.word	0x0800c691
 800c650:	0800c691 	.word	0x0800c691
 800c654:	0800c691 	.word	0x0800c691
 800c658:	0800c691 	.word	0x0800c691
 800c65c:	0800c689 	.word	0x0800c689
 800c660:	2301      	movs	r3, #1
 800c662:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c666:	e18e      	b.n	800c986 <USART_SetConfig+0x476>
 800c668:	2302      	movs	r3, #2
 800c66a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c66e:	e18a      	b.n	800c986 <USART_SetConfig+0x476>
 800c670:	2304      	movs	r3, #4
 800c672:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c676:	e186      	b.n	800c986 <USART_SetConfig+0x476>
 800c678:	2308      	movs	r3, #8
 800c67a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c67e:	e182      	b.n	800c986 <USART_SetConfig+0x476>
 800c680:	2310      	movs	r3, #16
 800c682:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c686:	e17e      	b.n	800c986 <USART_SetConfig+0x476>
 800c688:	2320      	movs	r3, #32
 800c68a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c68e:	e17a      	b.n	800c986 <USART_SetConfig+0x476>
 800c690:	2340      	movs	r3, #64	@ 0x40
 800c692:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c696:	e176      	b.n	800c986 <USART_SetConfig+0x476>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a75      	ldr	r2, [pc, #468]	@ (800c874 <USART_SetConfig+0x364>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d130      	bne.n	800c704 <USART_SetConfig+0x1f4>
 800c6a2:	4b73      	ldr	r3, [pc, #460]	@ (800c870 <USART_SetConfig+0x360>)
 800c6a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6a6:	f003 0307 	and.w	r3, r3, #7
 800c6aa:	2b05      	cmp	r3, #5
 800c6ac:	d826      	bhi.n	800c6fc <USART_SetConfig+0x1ec>
 800c6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b4 <USART_SetConfig+0x1a4>)
 800c6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b4:	0800c6cd 	.word	0x0800c6cd
 800c6b8:	0800c6d5 	.word	0x0800c6d5
 800c6bc:	0800c6dd 	.word	0x0800c6dd
 800c6c0:	0800c6e5 	.word	0x0800c6e5
 800c6c4:	0800c6ed 	.word	0x0800c6ed
 800c6c8:	0800c6f5 	.word	0x0800c6f5
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6d2:	e158      	b.n	800c986 <USART_SetConfig+0x476>
 800c6d4:	2302      	movs	r3, #2
 800c6d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6da:	e154      	b.n	800c986 <USART_SetConfig+0x476>
 800c6dc:	2304      	movs	r3, #4
 800c6de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6e2:	e150      	b.n	800c986 <USART_SetConfig+0x476>
 800c6e4:	2308      	movs	r3, #8
 800c6e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6ea:	e14c      	b.n	800c986 <USART_SetConfig+0x476>
 800c6ec:	2310      	movs	r3, #16
 800c6ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6f2:	e148      	b.n	800c986 <USART_SetConfig+0x476>
 800c6f4:	2320      	movs	r3, #32
 800c6f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c6fa:	e144      	b.n	800c986 <USART_SetConfig+0x476>
 800c6fc:	2340      	movs	r3, #64	@ 0x40
 800c6fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c702:	e140      	b.n	800c986 <USART_SetConfig+0x476>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a5b      	ldr	r2, [pc, #364]	@ (800c878 <USART_SetConfig+0x368>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d130      	bne.n	800c770 <USART_SetConfig+0x260>
 800c70e:	4b58      	ldr	r3, [pc, #352]	@ (800c870 <USART_SetConfig+0x360>)
 800c710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	2b05      	cmp	r3, #5
 800c718:	d826      	bhi.n	800c768 <USART_SetConfig+0x258>
 800c71a:	a201      	add	r2, pc, #4	@ (adr r2, 800c720 <USART_SetConfig+0x210>)
 800c71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c720:	0800c739 	.word	0x0800c739
 800c724:	0800c741 	.word	0x0800c741
 800c728:	0800c749 	.word	0x0800c749
 800c72c:	0800c751 	.word	0x0800c751
 800c730:	0800c759 	.word	0x0800c759
 800c734:	0800c761 	.word	0x0800c761
 800c738:	2300      	movs	r3, #0
 800c73a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c73e:	e122      	b.n	800c986 <USART_SetConfig+0x476>
 800c740:	2302      	movs	r3, #2
 800c742:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c746:	e11e      	b.n	800c986 <USART_SetConfig+0x476>
 800c748:	2304      	movs	r3, #4
 800c74a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c74e:	e11a      	b.n	800c986 <USART_SetConfig+0x476>
 800c750:	2308      	movs	r3, #8
 800c752:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c756:	e116      	b.n	800c986 <USART_SetConfig+0x476>
 800c758:	2310      	movs	r3, #16
 800c75a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c75e:	e112      	b.n	800c986 <USART_SetConfig+0x476>
 800c760:	2320      	movs	r3, #32
 800c762:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c766:	e10e      	b.n	800c986 <USART_SetConfig+0x476>
 800c768:	2340      	movs	r3, #64	@ 0x40
 800c76a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c76e:	e10a      	b.n	800c986 <USART_SetConfig+0x476>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a41      	ldr	r2, [pc, #260]	@ (800c87c <USART_SetConfig+0x36c>)
 800c776:	4293      	cmp	r3, r2
 800c778:	f040 8086 	bne.w	800c888 <USART_SetConfig+0x378>
 800c77c:	4b3c      	ldr	r3, [pc, #240]	@ (800c870 <USART_SetConfig+0x360>)
 800c77e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c784:	2b28      	cmp	r3, #40	@ 0x28
 800c786:	d87b      	bhi.n	800c880 <USART_SetConfig+0x370>
 800c788:	a201      	add	r2, pc, #4	@ (adr r2, 800c790 <USART_SetConfig+0x280>)
 800c78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78e:	bf00      	nop
 800c790:	0800c835 	.word	0x0800c835
 800c794:	0800c881 	.word	0x0800c881
 800c798:	0800c881 	.word	0x0800c881
 800c79c:	0800c881 	.word	0x0800c881
 800c7a0:	0800c881 	.word	0x0800c881
 800c7a4:	0800c881 	.word	0x0800c881
 800c7a8:	0800c881 	.word	0x0800c881
 800c7ac:	0800c881 	.word	0x0800c881
 800c7b0:	0800c83d 	.word	0x0800c83d
 800c7b4:	0800c881 	.word	0x0800c881
 800c7b8:	0800c881 	.word	0x0800c881
 800c7bc:	0800c881 	.word	0x0800c881
 800c7c0:	0800c881 	.word	0x0800c881
 800c7c4:	0800c881 	.word	0x0800c881
 800c7c8:	0800c881 	.word	0x0800c881
 800c7cc:	0800c881 	.word	0x0800c881
 800c7d0:	0800c845 	.word	0x0800c845
 800c7d4:	0800c881 	.word	0x0800c881
 800c7d8:	0800c881 	.word	0x0800c881
 800c7dc:	0800c881 	.word	0x0800c881
 800c7e0:	0800c881 	.word	0x0800c881
 800c7e4:	0800c881 	.word	0x0800c881
 800c7e8:	0800c881 	.word	0x0800c881
 800c7ec:	0800c881 	.word	0x0800c881
 800c7f0:	0800c84d 	.word	0x0800c84d
 800c7f4:	0800c881 	.word	0x0800c881
 800c7f8:	0800c881 	.word	0x0800c881
 800c7fc:	0800c881 	.word	0x0800c881
 800c800:	0800c881 	.word	0x0800c881
 800c804:	0800c881 	.word	0x0800c881
 800c808:	0800c881 	.word	0x0800c881
 800c80c:	0800c881 	.word	0x0800c881
 800c810:	0800c855 	.word	0x0800c855
 800c814:	0800c881 	.word	0x0800c881
 800c818:	0800c881 	.word	0x0800c881
 800c81c:	0800c881 	.word	0x0800c881
 800c820:	0800c881 	.word	0x0800c881
 800c824:	0800c881 	.word	0x0800c881
 800c828:	0800c881 	.word	0x0800c881
 800c82c:	0800c881 	.word	0x0800c881
 800c830:	0800c85d 	.word	0x0800c85d
 800c834:	2301      	movs	r3, #1
 800c836:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c83a:	e0a4      	b.n	800c986 <USART_SetConfig+0x476>
 800c83c:	2302      	movs	r3, #2
 800c83e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c842:	e0a0      	b.n	800c986 <USART_SetConfig+0x476>
 800c844:	2304      	movs	r3, #4
 800c846:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c84a:	e09c      	b.n	800c986 <USART_SetConfig+0x476>
 800c84c:	2308      	movs	r3, #8
 800c84e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c852:	e098      	b.n	800c986 <USART_SetConfig+0x476>
 800c854:	2310      	movs	r3, #16
 800c856:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c85a:	e094      	b.n	800c986 <USART_SetConfig+0x476>
 800c85c:	2320      	movs	r3, #32
 800c85e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c862:	e090      	b.n	800c986 <USART_SetConfig+0x476>
 800c864:	cfff69f3 	.word	0xcfff69f3
 800c868:	ffffc0f6 	.word	0xffffc0f6
 800c86c:	40011000 	.word	0x40011000
 800c870:	58024400 	.word	0x58024400
 800c874:	40004400 	.word	0x40004400
 800c878:	40004800 	.word	0x40004800
 800c87c:	40011400 	.word	0x40011400
 800c880:	2340      	movs	r3, #64	@ 0x40
 800c882:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c886:	e07e      	b.n	800c986 <USART_SetConfig+0x476>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4ab5      	ldr	r2, [pc, #724]	@ (800cb64 <USART_SetConfig+0x654>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d176      	bne.n	800c980 <USART_SetConfig+0x470>
 800c892:	4bb5      	ldr	r3, [pc, #724]	@ (800cb68 <USART_SetConfig+0x658>)
 800c894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c896:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c89a:	2b28      	cmp	r3, #40	@ 0x28
 800c89c:	d86c      	bhi.n	800c978 <USART_SetConfig+0x468>
 800c89e:	a201      	add	r2, pc, #4	@ (adr r2, 800c8a4 <USART_SetConfig+0x394>)
 800c8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a4:	0800c949 	.word	0x0800c949
 800c8a8:	0800c979 	.word	0x0800c979
 800c8ac:	0800c979 	.word	0x0800c979
 800c8b0:	0800c979 	.word	0x0800c979
 800c8b4:	0800c979 	.word	0x0800c979
 800c8b8:	0800c979 	.word	0x0800c979
 800c8bc:	0800c979 	.word	0x0800c979
 800c8c0:	0800c979 	.word	0x0800c979
 800c8c4:	0800c951 	.word	0x0800c951
 800c8c8:	0800c979 	.word	0x0800c979
 800c8cc:	0800c979 	.word	0x0800c979
 800c8d0:	0800c979 	.word	0x0800c979
 800c8d4:	0800c979 	.word	0x0800c979
 800c8d8:	0800c979 	.word	0x0800c979
 800c8dc:	0800c979 	.word	0x0800c979
 800c8e0:	0800c979 	.word	0x0800c979
 800c8e4:	0800c959 	.word	0x0800c959
 800c8e8:	0800c979 	.word	0x0800c979
 800c8ec:	0800c979 	.word	0x0800c979
 800c8f0:	0800c979 	.word	0x0800c979
 800c8f4:	0800c979 	.word	0x0800c979
 800c8f8:	0800c979 	.word	0x0800c979
 800c8fc:	0800c979 	.word	0x0800c979
 800c900:	0800c979 	.word	0x0800c979
 800c904:	0800c961 	.word	0x0800c961
 800c908:	0800c979 	.word	0x0800c979
 800c90c:	0800c979 	.word	0x0800c979
 800c910:	0800c979 	.word	0x0800c979
 800c914:	0800c979 	.word	0x0800c979
 800c918:	0800c979 	.word	0x0800c979
 800c91c:	0800c979 	.word	0x0800c979
 800c920:	0800c979 	.word	0x0800c979
 800c924:	0800c969 	.word	0x0800c969
 800c928:	0800c979 	.word	0x0800c979
 800c92c:	0800c979 	.word	0x0800c979
 800c930:	0800c979 	.word	0x0800c979
 800c934:	0800c979 	.word	0x0800c979
 800c938:	0800c979 	.word	0x0800c979
 800c93c:	0800c979 	.word	0x0800c979
 800c940:	0800c979 	.word	0x0800c979
 800c944:	0800c971 	.word	0x0800c971
 800c948:	2301      	movs	r3, #1
 800c94a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c94e:	e01a      	b.n	800c986 <USART_SetConfig+0x476>
 800c950:	2302      	movs	r3, #2
 800c952:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c956:	e016      	b.n	800c986 <USART_SetConfig+0x476>
 800c958:	2304      	movs	r3, #4
 800c95a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c95e:	e012      	b.n	800c986 <USART_SetConfig+0x476>
 800c960:	2308      	movs	r3, #8
 800c962:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c966:	e00e      	b.n	800c986 <USART_SetConfig+0x476>
 800c968:	2310      	movs	r3, #16
 800c96a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c96e:	e00a      	b.n	800c986 <USART_SetConfig+0x476>
 800c970:	2320      	movs	r3, #32
 800c972:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c976:	e006      	b.n	800c986 <USART_SetConfig+0x476>
 800c978:	2340      	movs	r3, #64	@ 0x40
 800c97a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c97e:	e002      	b.n	800c986 <USART_SetConfig+0x476>
 800c980:	2340      	movs	r3, #64	@ 0x40
 800c982:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 800c986:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c98a:	2b20      	cmp	r3, #32
 800c98c:	f200 832f 	bhi.w	800cfee <USART_SetConfig+0xade>
 800c990:	a201      	add	r2, pc, #4	@ (adr r2, 800c998 <USART_SetConfig+0x488>)
 800c992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c996:	bf00      	nop
 800c998:	0800ca1d 	.word	0x0800ca1d
 800c99c:	0800cad3 	.word	0x0800cad3
 800c9a0:	0800cb93 	.word	0x0800cb93
 800c9a4:	0800cfef 	.word	0x0800cfef
 800c9a8:	0800cc4d 	.word	0x0800cc4d
 800c9ac:	0800cfef 	.word	0x0800cfef
 800c9b0:	0800cfef 	.word	0x0800cfef
 800c9b4:	0800cfef 	.word	0x0800cfef
 800c9b8:	0800cd07 	.word	0x0800cd07
 800c9bc:	0800cfef 	.word	0x0800cfef
 800c9c0:	0800cfef 	.word	0x0800cfef
 800c9c4:	0800cfef 	.word	0x0800cfef
 800c9c8:	0800cfef 	.word	0x0800cfef
 800c9cc:	0800cfef 	.word	0x0800cfef
 800c9d0:	0800cfef 	.word	0x0800cfef
 800c9d4:	0800cfef 	.word	0x0800cfef
 800c9d8:	0800ce7f 	.word	0x0800ce7f
 800c9dc:	0800cfef 	.word	0x0800cfef
 800c9e0:	0800cfef 	.word	0x0800cfef
 800c9e4:	0800cfef 	.word	0x0800cfef
 800c9e8:	0800cfef 	.word	0x0800cfef
 800c9ec:	0800cfef 	.word	0x0800cfef
 800c9f0:	0800cfef 	.word	0x0800cfef
 800c9f4:	0800cfef 	.word	0x0800cfef
 800c9f8:	0800cfef 	.word	0x0800cfef
 800c9fc:	0800cfef 	.word	0x0800cfef
 800ca00:	0800cfef 	.word	0x0800cfef
 800ca04:	0800cfef 	.word	0x0800cfef
 800ca08:	0800cfef 	.word	0x0800cfef
 800ca0c:	0800cfef 	.word	0x0800cfef
 800ca10:	0800cfef 	.word	0x0800cfef
 800ca14:	0800cfef 	.word	0x0800cfef
 800ca18:	0800cf3d 	.word	0x0800cf3d
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca1c:	f7f9 fd50 	bl	80064c0 <HAL_RCC_GetPCLK1Freq>
 800ca20:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d044      	beq.n	800cab4 <USART_SetConfig+0x5a4>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d03e      	beq.n	800cab0 <USART_SetConfig+0x5a0>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d038      	beq.n	800caac <USART_SetConfig+0x59c>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca3e:	2b03      	cmp	r3, #3
 800ca40:	d032      	beq.n	800caa8 <USART_SetConfig+0x598>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca46:	2b04      	cmp	r3, #4
 800ca48:	d02c      	beq.n	800caa4 <USART_SetConfig+0x594>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca4e:	2b05      	cmp	r3, #5
 800ca50:	d026      	beq.n	800caa0 <USART_SetConfig+0x590>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca56:	2b06      	cmp	r3, #6
 800ca58:	d020      	beq.n	800ca9c <USART_SetConfig+0x58c>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca5e:	2b07      	cmp	r3, #7
 800ca60:	d01a      	beq.n	800ca98 <USART_SetConfig+0x588>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca66:	2b08      	cmp	r3, #8
 800ca68:	d014      	beq.n	800ca94 <USART_SetConfig+0x584>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca6e:	2b09      	cmp	r3, #9
 800ca70:	d00e      	beq.n	800ca90 <USART_SetConfig+0x580>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca76:	2b0a      	cmp	r3, #10
 800ca78:	d008      	beq.n	800ca8c <USART_SetConfig+0x57c>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca7e:	2b0b      	cmp	r3, #11
 800ca80:	d102      	bne.n	800ca88 <USART_SetConfig+0x578>
 800ca82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca86:	e016      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e014      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800ca8c:	2380      	movs	r3, #128	@ 0x80
 800ca8e:	e012      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800ca90:	2340      	movs	r3, #64	@ 0x40
 800ca92:	e010      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800ca94:	2320      	movs	r3, #32
 800ca96:	e00e      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800ca98:	2310      	movs	r3, #16
 800ca9a:	e00c      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800ca9c:	230c      	movs	r3, #12
 800ca9e:	e00a      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800caa0:	230a      	movs	r3, #10
 800caa2:	e008      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800caa4:	2308      	movs	r3, #8
 800caa6:	e006      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800caa8:	2306      	movs	r3, #6
 800caaa:	e004      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800caac:	2304      	movs	r3, #4
 800caae:	e002      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800cab0:	2302      	movs	r3, #2
 800cab2:	e000      	b.n	800cab6 <USART_SetConfig+0x5a6>
 800cab4:	2301      	movs	r3, #1
 800cab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cab8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cabc:	005a      	lsls	r2, r3, #1
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	085b      	lsrs	r3, r3, #1
 800cac4:	441a      	add	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	fbb2 f3f3 	udiv	r3, r2, r3
 800cace:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cad0:	e291      	b.n	800cff6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800cad2:	f7f9 fd0b 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 800cad6:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d049      	beq.n	800cb74 <USART_SetConfig+0x664>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d043      	beq.n	800cb70 <USART_SetConfig+0x660>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caec:	2b02      	cmp	r3, #2
 800caee:	d03d      	beq.n	800cb6c <USART_SetConfig+0x65c>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf4:	2b03      	cmp	r3, #3
 800caf6:	d032      	beq.n	800cb5e <USART_SetConfig+0x64e>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cafc:	2b04      	cmp	r3, #4
 800cafe:	d02c      	beq.n	800cb5a <USART_SetConfig+0x64a>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb04:	2b05      	cmp	r3, #5
 800cb06:	d026      	beq.n	800cb56 <USART_SetConfig+0x646>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb0c:	2b06      	cmp	r3, #6
 800cb0e:	d020      	beq.n	800cb52 <USART_SetConfig+0x642>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb14:	2b07      	cmp	r3, #7
 800cb16:	d01a      	beq.n	800cb4e <USART_SetConfig+0x63e>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb1c:	2b08      	cmp	r3, #8
 800cb1e:	d014      	beq.n	800cb4a <USART_SetConfig+0x63a>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb24:	2b09      	cmp	r3, #9
 800cb26:	d00e      	beq.n	800cb46 <USART_SetConfig+0x636>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb2c:	2b0a      	cmp	r3, #10
 800cb2e:	d008      	beq.n	800cb42 <USART_SetConfig+0x632>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb34:	2b0b      	cmp	r3, #11
 800cb36:	d102      	bne.n	800cb3e <USART_SetConfig+0x62e>
 800cb38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb3c:	e01b      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e019      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb42:	2380      	movs	r3, #128	@ 0x80
 800cb44:	e017      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb46:	2340      	movs	r3, #64	@ 0x40
 800cb48:	e015      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb4a:	2320      	movs	r3, #32
 800cb4c:	e013      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb4e:	2310      	movs	r3, #16
 800cb50:	e011      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb52:	230c      	movs	r3, #12
 800cb54:	e00f      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb56:	230a      	movs	r3, #10
 800cb58:	e00d      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb5a:	2308      	movs	r3, #8
 800cb5c:	e00b      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb5e:	2306      	movs	r3, #6
 800cb60:	e009      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb62:	bf00      	nop
 800cb64:	40011c00 	.word	0x40011c00
 800cb68:	58024400 	.word	0x58024400
 800cb6c:	2304      	movs	r3, #4
 800cb6e:	e002      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb70:	2302      	movs	r3, #2
 800cb72:	e000      	b.n	800cb76 <USART_SetConfig+0x666>
 800cb74:	2301      	movs	r3, #1
 800cb76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb78:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb7c:	005a      	lsls	r2, r3, #1
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	085b      	lsrs	r3, r3, #1
 800cb84:	441a      	add	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb8e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cb90:	e231      	b.n	800cff6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb92:	f107 0318 	add.w	r3, r7, #24
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fb fb46 	bl	8008228 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800cb9c:	69fa      	ldr	r2, [r7, #28]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d044      	beq.n	800cc30 <USART_SetConfig+0x720>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d03e      	beq.n	800cc2c <USART_SetConfig+0x71c>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d038      	beq.n	800cc28 <USART_SetConfig+0x718>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d032      	beq.n	800cc24 <USART_SetConfig+0x714>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc2:	2b04      	cmp	r3, #4
 800cbc4:	d02c      	beq.n	800cc20 <USART_SetConfig+0x710>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbca:	2b05      	cmp	r3, #5
 800cbcc:	d026      	beq.n	800cc1c <USART_SetConfig+0x70c>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbd2:	2b06      	cmp	r3, #6
 800cbd4:	d020      	beq.n	800cc18 <USART_SetConfig+0x708>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbda:	2b07      	cmp	r3, #7
 800cbdc:	d01a      	beq.n	800cc14 <USART_SetConfig+0x704>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe2:	2b08      	cmp	r3, #8
 800cbe4:	d014      	beq.n	800cc10 <USART_SetConfig+0x700>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbea:	2b09      	cmp	r3, #9
 800cbec:	d00e      	beq.n	800cc0c <USART_SetConfig+0x6fc>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbf2:	2b0a      	cmp	r3, #10
 800cbf4:	d008      	beq.n	800cc08 <USART_SetConfig+0x6f8>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbfa:	2b0b      	cmp	r3, #11
 800cbfc:	d102      	bne.n	800cc04 <USART_SetConfig+0x6f4>
 800cbfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc02:	e016      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc04:	2301      	movs	r3, #1
 800cc06:	e014      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc08:	2380      	movs	r3, #128	@ 0x80
 800cc0a:	e012      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc0c:	2340      	movs	r3, #64	@ 0x40
 800cc0e:	e010      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc10:	2320      	movs	r3, #32
 800cc12:	e00e      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc14:	2310      	movs	r3, #16
 800cc16:	e00c      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc18:	230c      	movs	r3, #12
 800cc1a:	e00a      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc1c:	230a      	movs	r3, #10
 800cc1e:	e008      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc20:	2308      	movs	r3, #8
 800cc22:	e006      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc24:	2306      	movs	r3, #6
 800cc26:	e004      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc28:	2304      	movs	r3, #4
 800cc2a:	e002      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	e000      	b.n	800cc32 <USART_SetConfig+0x722>
 800cc30:	2301      	movs	r3, #1
 800cc32:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc36:	005a      	lsls	r2, r3, #1
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	085b      	lsrs	r3, r3, #1
 800cc3e:	441a      	add	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc48:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800cc4a:	e1d4      	b.n	800cff6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc4c:	f107 030c 	add.w	r3, r7, #12
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7fb fc3d 	bl	80084d0 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800cc56:	693a      	ldr	r2, [r7, #16]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d044      	beq.n	800ccea <USART_SetConfig+0x7da>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d03e      	beq.n	800cce6 <USART_SetConfig+0x7d6>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d038      	beq.n	800cce2 <USART_SetConfig+0x7d2>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc74:	2b03      	cmp	r3, #3
 800cc76:	d032      	beq.n	800ccde <USART_SetConfig+0x7ce>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc7c:	2b04      	cmp	r3, #4
 800cc7e:	d02c      	beq.n	800ccda <USART_SetConfig+0x7ca>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc84:	2b05      	cmp	r3, #5
 800cc86:	d026      	beq.n	800ccd6 <USART_SetConfig+0x7c6>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc8c:	2b06      	cmp	r3, #6
 800cc8e:	d020      	beq.n	800ccd2 <USART_SetConfig+0x7c2>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc94:	2b07      	cmp	r3, #7
 800cc96:	d01a      	beq.n	800ccce <USART_SetConfig+0x7be>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc9c:	2b08      	cmp	r3, #8
 800cc9e:	d014      	beq.n	800ccca <USART_SetConfig+0x7ba>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cca4:	2b09      	cmp	r3, #9
 800cca6:	d00e      	beq.n	800ccc6 <USART_SetConfig+0x7b6>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccac:	2b0a      	cmp	r3, #10
 800ccae:	d008      	beq.n	800ccc2 <USART_SetConfig+0x7b2>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb4:	2b0b      	cmp	r3, #11
 800ccb6:	d102      	bne.n	800ccbe <USART_SetConfig+0x7ae>
 800ccb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ccbc:	e016      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e014      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccc2:	2380      	movs	r3, #128	@ 0x80
 800ccc4:	e012      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccc6:	2340      	movs	r3, #64	@ 0x40
 800ccc8:	e010      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccca:	2320      	movs	r3, #32
 800cccc:	e00e      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccce:	2310      	movs	r3, #16
 800ccd0:	e00c      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccd2:	230c      	movs	r3, #12
 800ccd4:	e00a      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccd6:	230a      	movs	r3, #10
 800ccd8:	e008      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccda:	2308      	movs	r3, #8
 800ccdc:	e006      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccde:	2306      	movs	r3, #6
 800cce0:	e004      	b.n	800ccec <USART_SetConfig+0x7dc>
 800cce2:	2304      	movs	r3, #4
 800cce4:	e002      	b.n	800ccec <USART_SetConfig+0x7dc>
 800cce6:	2302      	movs	r3, #2
 800cce8:	e000      	b.n	800ccec <USART_SetConfig+0x7dc>
 800ccea:	2301      	movs	r3, #1
 800ccec:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccf0:	005a      	lsls	r2, r3, #1
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	085b      	lsrs	r3, r3, #1
 800ccf8:	441a      	add	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd02:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800cd04:	e177      	b.n	800cff6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd06:	4b8a      	ldr	r3, [pc, #552]	@ (800cf30 <USART_SetConfig+0xa20>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f003 0320 	and.w	r3, r3, #32
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d05d      	beq.n	800cdce <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800cd12:	4b87      	ldr	r3, [pc, #540]	@ (800cf30 <USART_SetConfig+0xa20>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	08db      	lsrs	r3, r3, #3
 800cd18:	f003 0303 	and.w	r3, r3, #3
 800cd1c:	4a85      	ldr	r2, [pc, #532]	@ (800cf34 <USART_SetConfig+0xa24>)
 800cd1e:	40da      	lsrs	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d044      	beq.n	800cdb2 <USART_SetConfig+0x8a2>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d03e      	beq.n	800cdae <USART_SetConfig+0x89e>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	d038      	beq.n	800cdaa <USART_SetConfig+0x89a>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd3c:	2b03      	cmp	r3, #3
 800cd3e:	d032      	beq.n	800cda6 <USART_SetConfig+0x896>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	d02c      	beq.n	800cda2 <USART_SetConfig+0x892>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd4c:	2b05      	cmp	r3, #5
 800cd4e:	d026      	beq.n	800cd9e <USART_SetConfig+0x88e>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd54:	2b06      	cmp	r3, #6
 800cd56:	d020      	beq.n	800cd9a <USART_SetConfig+0x88a>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd5c:	2b07      	cmp	r3, #7
 800cd5e:	d01a      	beq.n	800cd96 <USART_SetConfig+0x886>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd64:	2b08      	cmp	r3, #8
 800cd66:	d014      	beq.n	800cd92 <USART_SetConfig+0x882>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd6c:	2b09      	cmp	r3, #9
 800cd6e:	d00e      	beq.n	800cd8e <USART_SetConfig+0x87e>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd74:	2b0a      	cmp	r3, #10
 800cd76:	d008      	beq.n	800cd8a <USART_SetConfig+0x87a>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd7c:	2b0b      	cmp	r3, #11
 800cd7e:	d102      	bne.n	800cd86 <USART_SetConfig+0x876>
 800cd80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd84:	e016      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e014      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cd8a:	2380      	movs	r3, #128	@ 0x80
 800cd8c:	e012      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cd8e:	2340      	movs	r3, #64	@ 0x40
 800cd90:	e010      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cd92:	2320      	movs	r3, #32
 800cd94:	e00e      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cd96:	2310      	movs	r3, #16
 800cd98:	e00c      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cd9a:	230c      	movs	r3, #12
 800cd9c:	e00a      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cd9e:	230a      	movs	r3, #10
 800cda0:	e008      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cda2:	2308      	movs	r3, #8
 800cda4:	e006      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cda6:	2306      	movs	r3, #6
 800cda8:	e004      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cdaa:	2304      	movs	r3, #4
 800cdac:	e002      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cdae:	2302      	movs	r3, #2
 800cdb0:	e000      	b.n	800cdb4 <USART_SetConfig+0x8a4>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdb8:	005a      	lsls	r2, r3, #1
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	085b      	lsrs	r3, r3, #1
 800cdc0:	441a      	add	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdca:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800cdcc:	e113      	b.n	800cff6 <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d044      	beq.n	800ce60 <USART_SetConfig+0x950>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d03e      	beq.n	800ce5c <USART_SetConfig+0x94c>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d038      	beq.n	800ce58 <USART_SetConfig+0x948>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d032      	beq.n	800ce54 <USART_SetConfig+0x944>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf2:	2b04      	cmp	r3, #4
 800cdf4:	d02c      	beq.n	800ce50 <USART_SetConfig+0x940>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdfa:	2b05      	cmp	r3, #5
 800cdfc:	d026      	beq.n	800ce4c <USART_SetConfig+0x93c>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce02:	2b06      	cmp	r3, #6
 800ce04:	d020      	beq.n	800ce48 <USART_SetConfig+0x938>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce0a:	2b07      	cmp	r3, #7
 800ce0c:	d01a      	beq.n	800ce44 <USART_SetConfig+0x934>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce12:	2b08      	cmp	r3, #8
 800ce14:	d014      	beq.n	800ce40 <USART_SetConfig+0x930>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce1a:	2b09      	cmp	r3, #9
 800ce1c:	d00e      	beq.n	800ce3c <USART_SetConfig+0x92c>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce22:	2b0a      	cmp	r3, #10
 800ce24:	d008      	beq.n	800ce38 <USART_SetConfig+0x928>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2a:	2b0b      	cmp	r3, #11
 800ce2c:	d102      	bne.n	800ce34 <USART_SetConfig+0x924>
 800ce2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce32:	e016      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce34:	2301      	movs	r3, #1
 800ce36:	e014      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce38:	2380      	movs	r3, #128	@ 0x80
 800ce3a:	e012      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce3c:	2340      	movs	r3, #64	@ 0x40
 800ce3e:	e010      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce40:	2320      	movs	r3, #32
 800ce42:	e00e      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce44:	2310      	movs	r3, #16
 800ce46:	e00c      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce48:	230c      	movs	r3, #12
 800ce4a:	e00a      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce4c:	230a      	movs	r3, #10
 800ce4e:	e008      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce50:	2308      	movs	r3, #8
 800ce52:	e006      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce54:	2306      	movs	r3, #6
 800ce56:	e004      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce58:	2304      	movs	r3, #4
 800ce5a:	e002      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	e000      	b.n	800ce62 <USART_SetConfig+0x952>
 800ce60:	2301      	movs	r3, #1
 800ce62:	4a34      	ldr	r2, [pc, #208]	@ (800cf34 <USART_SetConfig+0xa24>)
 800ce64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce68:	005a      	lsls	r2, r3, #1
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	085b      	lsrs	r3, r3, #1
 800ce70:	441a      	add	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce7a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ce7c:	e0bb      	b.n	800cff6 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d044      	beq.n	800cf10 <USART_SetConfig+0xa00>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d03e      	beq.n	800cf0c <USART_SetConfig+0x9fc>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d038      	beq.n	800cf08 <USART_SetConfig+0x9f8>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d032      	beq.n	800cf04 <USART_SetConfig+0x9f4>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea2:	2b04      	cmp	r3, #4
 800cea4:	d02c      	beq.n	800cf00 <USART_SetConfig+0x9f0>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceaa:	2b05      	cmp	r3, #5
 800ceac:	d026      	beq.n	800cefc <USART_SetConfig+0x9ec>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb2:	2b06      	cmp	r3, #6
 800ceb4:	d020      	beq.n	800cef8 <USART_SetConfig+0x9e8>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceba:	2b07      	cmp	r3, #7
 800cebc:	d01a      	beq.n	800cef4 <USART_SetConfig+0x9e4>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec2:	2b08      	cmp	r3, #8
 800cec4:	d014      	beq.n	800cef0 <USART_SetConfig+0x9e0>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceca:	2b09      	cmp	r3, #9
 800cecc:	d00e      	beq.n	800ceec <USART_SetConfig+0x9dc>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced2:	2b0a      	cmp	r3, #10
 800ced4:	d008      	beq.n	800cee8 <USART_SetConfig+0x9d8>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceda:	2b0b      	cmp	r3, #11
 800cedc:	d102      	bne.n	800cee4 <USART_SetConfig+0x9d4>
 800cede:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cee2:	e016      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cee4:	2301      	movs	r3, #1
 800cee6:	e014      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cee8:	2380      	movs	r3, #128	@ 0x80
 800ceea:	e012      	b.n	800cf12 <USART_SetConfig+0xa02>
 800ceec:	2340      	movs	r3, #64	@ 0x40
 800ceee:	e010      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cef0:	2320      	movs	r3, #32
 800cef2:	e00e      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cef4:	2310      	movs	r3, #16
 800cef6:	e00c      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cef8:	230c      	movs	r3, #12
 800cefa:	e00a      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cefc:	230a      	movs	r3, #10
 800cefe:	e008      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cf00:	2308      	movs	r3, #8
 800cf02:	e006      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cf04:	2306      	movs	r3, #6
 800cf06:	e004      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cf08:	2304      	movs	r3, #4
 800cf0a:	e002      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	e000      	b.n	800cf12 <USART_SetConfig+0xa02>
 800cf10:	2301      	movs	r3, #1
 800cf12:	4a09      	ldr	r2, [pc, #36]	@ (800cf38 <USART_SetConfig+0xa28>)
 800cf14:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf18:	005a      	lsls	r2, r3, #1
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	085b      	lsrs	r3, r3, #1
 800cf20:	441a      	add	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf2a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cf2c:	e063      	b.n	800cff6 <USART_SetConfig+0xae6>
 800cf2e:	bf00      	nop
 800cf30:	58024400 	.word	0x58024400
 800cf34:	03d09000 	.word	0x03d09000
 800cf38:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d044      	beq.n	800cfce <USART_SetConfig+0xabe>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d03e      	beq.n	800cfca <USART_SetConfig+0xaba>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d038      	beq.n	800cfc6 <USART_SetConfig+0xab6>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf58:	2b03      	cmp	r3, #3
 800cf5a:	d032      	beq.n	800cfc2 <USART_SetConfig+0xab2>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf60:	2b04      	cmp	r3, #4
 800cf62:	d02c      	beq.n	800cfbe <USART_SetConfig+0xaae>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf68:	2b05      	cmp	r3, #5
 800cf6a:	d026      	beq.n	800cfba <USART_SetConfig+0xaaa>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf70:	2b06      	cmp	r3, #6
 800cf72:	d020      	beq.n	800cfb6 <USART_SetConfig+0xaa6>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf78:	2b07      	cmp	r3, #7
 800cf7a:	d01a      	beq.n	800cfb2 <USART_SetConfig+0xaa2>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf80:	2b08      	cmp	r3, #8
 800cf82:	d014      	beq.n	800cfae <USART_SetConfig+0xa9e>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf88:	2b09      	cmp	r3, #9
 800cf8a:	d00e      	beq.n	800cfaa <USART_SetConfig+0xa9a>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf90:	2b0a      	cmp	r3, #10
 800cf92:	d008      	beq.n	800cfa6 <USART_SetConfig+0xa96>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf98:	2b0b      	cmp	r3, #11
 800cf9a:	d102      	bne.n	800cfa2 <USART_SetConfig+0xa92>
 800cf9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cfa0:	e016      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e014      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfa6:	2380      	movs	r3, #128	@ 0x80
 800cfa8:	e012      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfaa:	2340      	movs	r3, #64	@ 0x40
 800cfac:	e010      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfae:	2320      	movs	r3, #32
 800cfb0:	e00e      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfb2:	2310      	movs	r3, #16
 800cfb4:	e00c      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfb6:	230c      	movs	r3, #12
 800cfb8:	e00a      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfba:	230a      	movs	r3, #10
 800cfbc:	e008      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfbe:	2308      	movs	r3, #8
 800cfc0:	e006      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfc2:	2306      	movs	r3, #6
 800cfc4:	e004      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfc6:	2304      	movs	r3, #4
 800cfc8:	e002      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfca:	2302      	movs	r3, #2
 800cfcc:	e000      	b.n	800cfd0 <USART_SetConfig+0xac0>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800cfd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfd8:	005a      	lsls	r2, r3, #1
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	085b      	lsrs	r3, r3, #1
 800cfe0:	441a      	add	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfea:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cfec:	e003      	b.n	800cff6 <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 800cff4:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800cff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff8:	2b0f      	cmp	r3, #15
 800cffa:	d916      	bls.n	800d02a <USART_SetConfig+0xb1a>
 800cffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d002:	d212      	bcs.n	800d02a <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d006:	b29b      	uxth	r3, r3
 800d008:	f023 030f 	bic.w	r3, r3, #15
 800d00c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d010:	085b      	lsrs	r3, r3, #1
 800d012:	b29b      	uxth	r3, r3
 800d014:	f003 0307 	and.w	r3, r3, #7
 800d018:	b29a      	uxth	r2, r3
 800d01a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d01c:	4313      	orrs	r3, r2
 800d01e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d026:	60da      	str	r2, [r3, #12]
 800d028:	e002      	b.n	800d030 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 800d048:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3738      	adds	r7, #56	@ 0x38
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b086      	sub	sp, #24
 800d058:	af02      	add	r7, sp, #8
 800d05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d062:	f7f6 fac3 	bl	80035ec <HAL_GetTick>
 800d066:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f003 0308 	and.w	r3, r3, #8
 800d072:	2b08      	cmp	r3, #8
 800d074:	d10e      	bne.n	800d094 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800d076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff fa0d 	bl	800c4a4 <USART_WaitOnFlagUntilTimeout>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d001      	beq.n	800d094 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d090:	2303      	movs	r3, #3
 800d092:	e01e      	b.n	800d0d2 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 0304 	and.w	r3, r3, #4
 800d09e:	2b04      	cmp	r3, #4
 800d0a0:	d10e      	bne.n	800d0c0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800d0a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7ff f9f7 	bl	800c4a4 <USART_WaitOnFlagUntilTimeout>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	e008      	b.n	800d0d2 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b085      	sub	sp, #20
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d101      	bne.n	800d0f0 <HAL_USARTEx_EnableSlaveMode+0x16>
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	e043      	b.n	800d178 <HAL_USARTEx_EnableSlaveMode+0x9e>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f022 0201 	bic.w	r2, r2, #1
 800d116:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	685a      	ldr	r2, [r3, #4]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	689a      	ldr	r2, [r3, #8]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d136:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	685a      	ldr	r2, [r3, #4]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f042 0201 	orr.w	r2, r2, #1
 800d146:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f042 0201 	orr.w	r2, r2, #1
 800d16c:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d194:	2b01      	cmp	r3, #1
 800d196:	d101      	bne.n	800d19c <HAL_USARTEx_ConfigNSS+0x18>
 800d198:	2302      	movs	r3, #2
 800d19a:	e02a      	b.n	800d1f2 <HAL_USARTEx_ConfigNSS+0x6e>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f022 0201 	bic.w	r2, r2, #1
 800d1c2:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	f023 0108 	bic.w	r1, r3, #8
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	683a      	ldr	r2, [r7, #0]
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800d1fe:	b480      	push	{r7}
 800d200:	b085      	sub	sp, #20
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d101      	bne.n	800d214 <HAL_USARTEx_DisableFifoMode+0x16>
 800d210:	2302      	movs	r3, #2
 800d212:	e027      	b.n	800d264 <HAL_USARTEx_DisableFifoMode+0x66>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2202      	movs	r2, #2
 800d220:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f022 0201 	bic.w	r2, r2, #1
 800d23a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d242:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d280:	2b01      	cmp	r3, #1
 800d282:	d101      	bne.n	800d288 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800d284:	2302      	movs	r3, #2
 800d286:	e02d      	b.n	800d2e4 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2202      	movs	r2, #2
 800d294:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f022 0201 	bic.w	r2, r2, #1
 800d2ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	430a      	orrs	r2, r1
 800d2c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 f84f 	bl	800d368 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d101      	bne.n	800d304 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800d300:	2302      	movs	r3, #2
 800d302:	e02d      	b.n	800d360 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2202      	movs	r2, #2
 800d310:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f022 0201 	bic.w	r2, r2, #1
 800d32a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	683a      	ldr	r2, [r7, #0]
 800d33c:	430a      	orrs	r2, r1
 800d33e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f811 	bl	800d368 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d374:	2b00      	cmp	r3, #0
 800d376:	d106      	bne.n	800d386 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2201      	movs	r2, #1
 800d382:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d384:	e02f      	b.n	800d3e6 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d386:	2310      	movs	r3, #16
 800d388:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d38a:	2310      	movs	r3, #16
 800d38c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800d394:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d396:	b2db      	uxtb	r3, r3
 800d398:	f003 0307 	and.w	r3, r3, #7
 800d39c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800d3a4:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	f003 0307 	and.w	r3, r3, #7
 800d3ac:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3ae:	7bbb      	ldrb	r3, [r7, #14]
 800d3b0:	7b3a      	ldrb	r2, [r7, #12]
 800d3b2:	4910      	ldr	r1, [pc, #64]	@ (800d3f4 <USARTEx_SetNbDataToProcess+0x8c>)
 800d3b4:	5c8a      	ldrb	r2, [r1, r2]
 800d3b6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800d3ba:	7b3a      	ldrb	r2, [r7, #12]
 800d3bc:	490e      	ldr	r1, [pc, #56]	@ (800d3f8 <USARTEx_SetNbDataToProcess+0x90>)
 800d3be:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	7b7a      	ldrb	r2, [r7, #13]
 800d3ce:	4909      	ldr	r1, [pc, #36]	@ (800d3f4 <USARTEx_SetNbDataToProcess+0x8c>)
 800d3d0:	5c8a      	ldrb	r2, [r1, r2]
 800d3d2:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800d3d6:	7b7a      	ldrb	r2, [r7, #13]
 800d3d8:	4907      	ldr	r1, [pc, #28]	@ (800d3f8 <USARTEx_SetNbDataToProcess+0x90>)
 800d3da:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800d3e6:	bf00      	nop
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	08012394 	.word	0x08012394
 800d3f8:	0801239c 	.word	0x0801239c

0800d3fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d3fc:	b084      	sub	sp, #16
 800d3fe:	b480      	push	{r7}
 800d400:	b085      	sub	sp, #20
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	f107 001c 	add.w	r0, r7, #28
 800d40a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d412:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d414:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d416:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d41a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d41e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d422:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	685a      	ldr	r2, [r3, #4]
 800d42e:	4b07      	ldr	r3, [pc, #28]	@ (800d44c <SDMMC_Init+0x50>)
 800d430:	4013      	ands	r3, r2
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	431a      	orrs	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3714      	adds	r7, #20
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	b004      	add	sp, #16
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	ffc02c00 	.word	0xffc02c00

0800d450 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d45e:	4618      	mov	r0, r3
 800d460:	370c      	adds	r7, #12
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr

0800d46a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d46a:	b480      	push	{r7}
 800d46c:	b083      	sub	sp, #12
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f043 0203 	orr.w	r2, r3, #3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 0303 	and.w	r3, r3, #3
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d4c6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d4cc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d4d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	68da      	ldr	r2, [r3, #12]
 800d4de:	4b06      	ldr	r3, [pc, #24]	@ (800d4f8 <SDMMC_SendCommand+0x50>)
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	431a      	orrs	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	fffee0c0 	.word	0xfffee0c0

0800d4fc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	691b      	ldr	r3, [r3, #16]
 800d508:	b2db      	uxtb	r3, r3
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d516:	b480      	push	{r7}
 800d518:	b085      	sub	sp, #20
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3314      	adds	r3, #20
 800d524:	461a      	mov	r2, r3
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	4413      	add	r3, r2
 800d52a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3714      	adds	r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d546:	2300      	movs	r3, #0
 800d548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	685a      	ldr	r2, [r3, #4]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d562:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d568:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d56e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	4313      	orrs	r3, r2
 800d574:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d57a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	431a      	orrs	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d586:	2300      	movs	r3, #0

}
 800d588:	4618      	mov	r0, r3
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d5a2:	2310      	movs	r3, #16
 800d5a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5b6:	f107 0308 	add.w	r3, r7, #8
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7ff ff73 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d5c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5c6:	2110      	movs	r1, #16
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f995 	bl	800d8f8 <SDMMC_GetCmdResp1>
 800d5ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5d0:	69fb      	ldr	r3, [r7, #28]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3720      	adds	r7, #32
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b088      	sub	sp, #32
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d5e8:	2307      	movs	r3, #7
 800d5ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5fc:	f107 0308 	add.w	r3, r7, #8
 800d600:	4619      	mov	r1, r3
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7ff ff50 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d60c:	2107      	movs	r1, #7
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 f972 	bl	800d8f8 <SDMMC_GetCmdResp1>
 800d614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d616:	69fb      	ldr	r3, [r7, #28]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3720      	adds	r7, #32
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d628:	2300      	movs	r3, #0
 800d62a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d62c:	2300      	movs	r3, #0
 800d62e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d630:	2300      	movs	r3, #0
 800d632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d634:	2300      	movs	r3, #0
 800d636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d63c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d63e:	f107 0308 	add.w	r3, r7, #8
 800d642:	4619      	mov	r1, r3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7ff ff2f 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fb96 	bl	800dd7c <SDMMC_GetCmdError>
 800d650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d652:	69fb      	ldr	r3, [r7, #28]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3720      	adds	r7, #32
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d664:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d66a:	2308      	movs	r3, #8
 800d66c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d66e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d674:	2300      	movs	r3, #0
 800d676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d67c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d67e:	f107 0308 	add.w	r3, r7, #8
 800d682:	4619      	mov	r1, r3
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff ff0f 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fb28 	bl	800dce0 <SDMMC_GetCmdResp7>
 800d690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d692:	69fb      	ldr	r3, [r7, #28]
}
 800d694:	4618      	mov	r0, r3
 800d696:	3720      	adds	r7, #32
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b088      	sub	sp, #32
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d6aa:	2337      	movs	r3, #55	@ 0x37
 800d6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d6b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6be:	f107 0308 	add.w	r3, r7, #8
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff feef 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d6ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6ce:	2137      	movs	r1, #55	@ 0x37
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f911 	bl	800d8f8 <SDMMC_GetCmdResp1>
 800d6d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6d8:	69fb      	ldr	r3, [r7, #28]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3720      	adds	r7, #32
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b088      	sub	sp, #32
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
 800d6ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d6f0:	2329      	movs	r3, #41	@ 0x29
 800d6f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d6f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d702:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d704:	f107 0308 	add.w	r3, r7, #8
 800d708:	4619      	mov	r1, r3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7ff fecc 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fa2d 	bl	800db70 <SDMMC_GetCmdResp3>
 800d716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d718:	69fb      	ldr	r3, [r7, #28]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3720      	adds	r7, #32
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b088      	sub	sp, #32
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d730:	2306      	movs	r3, #6
 800d732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d73a:	2300      	movs	r3, #0
 800d73c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d73e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d742:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d744:	f107 0308 	add.w	r3, r7, #8
 800d748:	4619      	mov	r1, r3
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7ff feac 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d750:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d754:	2106      	movs	r1, #6
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f8ce 	bl	800d8f8 <SDMMC_GetCmdResp1>
 800d75c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d75e:	69fb      	ldr	r3, [r7, #28]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3720      	adds	r7, #32
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b088      	sub	sp, #32
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d770:	2300      	movs	r3, #0
 800d772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d774:	2333      	movs	r3, #51	@ 0x33
 800d776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d788:	f107 0308 	add.w	r3, r7, #8
 800d78c:	4619      	mov	r1, r3
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff fe8a 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d794:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d798:	2133      	movs	r1, #51	@ 0x33
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 f8ac 	bl	800d8f8 <SDMMC_GetCmdResp1>
 800d7a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7a2:	69fb      	ldr	r3, [r7, #28]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3720      	adds	r7, #32
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d7b8:	2302      	movs	r3, #2
 800d7ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d7bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d7ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7cc:	f107 0308 	add.w	r3, r7, #8
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff fe68 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f97f 	bl	800dadc <SDMMC_GetCmdResp2>
 800d7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3720      	adds	r7, #32
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b088      	sub	sp, #32
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d7f8:	2309      	movs	r3, #9
 800d7fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d7fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d802:	2300      	movs	r3, #0
 800d804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d80a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d80c:	f107 0308 	add.w	r3, r7, #8
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff fe48 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f95f 	bl	800dadc <SDMMC_GetCmdResp2>
 800d81e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d820:	69fb      	ldr	r3, [r7, #28]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3720      	adds	r7, #32
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b088      	sub	sp, #32
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d834:	2300      	movs	r3, #0
 800d836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d838:	2303      	movs	r3, #3
 800d83a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d83c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d842:	2300      	movs	r3, #0
 800d844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d84a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d84c:	f107 0308 	add.w	r3, r7, #8
 800d850:	4619      	mov	r1, r3
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7ff fe28 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d858:	683a      	ldr	r2, [r7, #0]
 800d85a:	2103      	movs	r1, #3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f9c7 	bl	800dbf0 <SDMMC_GetCmdResp6>
 800d862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d864:	69fb      	ldr	r3, [r7, #28]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3720      	adds	r7, #32
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b088      	sub	sp, #32
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d87c:	230d      	movs	r3, #13
 800d87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d886:	2300      	movs	r3, #0
 800d888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d88a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d88e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d890:	f107 0308 	add.w	r3, r7, #8
 800d894:	4619      	mov	r1, r3
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7ff fe06 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d89c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8a0:	210d      	movs	r1, #13
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 f828 	bl	800d8f8 <SDMMC_GetCmdResp1>
 800d8a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8aa:	69fb      	ldr	r3, [r7, #28]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3720      	adds	r7, #32
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d8c0:	230d      	movs	r3, #13
 800d8c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d8c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d8d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8d4:	f107 0308 	add.w	r3, r7, #8
 800d8d8:	4619      	mov	r1, r3
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff fde4 	bl	800d4a8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d8e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8e4:	210d      	movs	r1, #13
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f806 	bl	800d8f8 <SDMMC_GetCmdResp1>
 800d8ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8ee:	69fb      	ldr	r3, [r7, #28]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3720      	adds	r7, #32
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b088      	sub	sp, #32
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	460b      	mov	r3, r1
 800d902:	607a      	str	r2, [r7, #4]
 800d904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d906:	4b70      	ldr	r3, [pc, #448]	@ (800dac8 <SDMMC_GetCmdResp1+0x1d0>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a70      	ldr	r2, [pc, #448]	@ (800dacc <SDMMC_GetCmdResp1+0x1d4>)
 800d90c:	fba2 2303 	umull	r2, r3, r2, r3
 800d910:	0a5a      	lsrs	r2, r3, #9
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	fb02 f303 	mul.w	r3, r2, r3
 800d918:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	1e5a      	subs	r2, r3, #1
 800d91e:	61fa      	str	r2, [r7, #28]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d102      	bne.n	800d92a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d924:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d928:	e0c9      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d92e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d930:	69ba      	ldr	r2, [r7, #24]
 800d932:	4b67      	ldr	r3, [pc, #412]	@ (800dad0 <SDMMC_GetCmdResp1+0x1d8>)
 800d934:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0ef      	beq.n	800d91a <SDMMC_GetCmdResp1+0x22>
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d940:	2b00      	cmp	r3, #0
 800d942:	d1ea      	bne.n	800d91a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d948:	f003 0304 	and.w	r3, r3, #4
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d004      	beq.n	800d95a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2204      	movs	r2, #4
 800d954:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d956:	2304      	movs	r3, #4
 800d958:	e0b1      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d95e:	f003 0301 	and.w	r3, r3, #1
 800d962:	2b00      	cmp	r3, #0
 800d964:	d004      	beq.n	800d970 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2201      	movs	r2, #1
 800d96a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d96c:	2301      	movs	r3, #1
 800d96e:	e0a6      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	4a58      	ldr	r2, [pc, #352]	@ (800dad4 <SDMMC_GetCmdResp1+0x1dc>)
 800d974:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f7ff fdc0 	bl	800d4fc <SDMMC_GetCommandResponse>
 800d97c:	4603      	mov	r3, r0
 800d97e:	461a      	mov	r2, r3
 800d980:	7afb      	ldrb	r3, [r7, #11]
 800d982:	4293      	cmp	r3, r2
 800d984:	d001      	beq.n	800d98a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d986:	2301      	movs	r3, #1
 800d988:	e099      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d98a:	2100      	movs	r1, #0
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f7ff fdc2 	bl	800d516 <SDMMC_GetResponse>
 800d992:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d994:	697a      	ldr	r2, [r7, #20]
 800d996:	4b50      	ldr	r3, [pc, #320]	@ (800dad8 <SDMMC_GetCmdResp1+0x1e0>)
 800d998:	4013      	ands	r3, r2
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d101      	bne.n	800d9a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e08d      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	da02      	bge.n	800d9ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d9a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d9ac:	e087      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d9b8:	2340      	movs	r3, #64	@ 0x40
 800d9ba:	e080      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d001      	beq.n	800d9ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d9c6:	2380      	movs	r3, #128	@ 0x80
 800d9c8:	e079      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d9d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d9d8:	e071      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d9e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d9e8:	e069      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d002      	beq.n	800d9fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d9f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9f8:	e061      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da00:	2b00      	cmp	r3, #0
 800da02:	d002      	beq.n	800da0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da08:	e059      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da10:	2b00      	cmp	r3, #0
 800da12:	d002      	beq.n	800da1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da18:	e051      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800da20:	2b00      	cmp	r3, #0
 800da22:	d002      	beq.n	800da2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800da28:	e049      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800da34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800da38:	e041      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800da44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da48:	e039      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da50:	2b00      	cmp	r3, #0
 800da52:	d002      	beq.n	800da5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800da54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800da58:	e031      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800da64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800da68:	e029      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800da74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800da78:	e021      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800da88:	e019      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800da98:	e011      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800daa4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800daa8:	e009      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f003 0308 	and.w	r3, r3, #8
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dab4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800dab8:	e001      	b.n	800dabe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800daba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3720      	adds	r7, #32
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	24000000 	.word	0x24000000
 800dacc:	10624dd3 	.word	0x10624dd3
 800dad0:	00200045 	.word	0x00200045
 800dad4:	002000c5 	.word	0x002000c5
 800dad8:	fdffe008 	.word	0xfdffe008

0800dadc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dae4:	4b1f      	ldr	r3, [pc, #124]	@ (800db64 <SDMMC_GetCmdResp2+0x88>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a1f      	ldr	r2, [pc, #124]	@ (800db68 <SDMMC_GetCmdResp2+0x8c>)
 800daea:	fba2 2303 	umull	r2, r3, r2, r3
 800daee:	0a5b      	lsrs	r3, r3, #9
 800daf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daf4:	fb02 f303 	mul.w	r3, r2, r3
 800daf8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	1e5a      	subs	r2, r3, #1
 800dafe:	60fa      	str	r2, [r7, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d102      	bne.n	800db0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db08:	e026      	b.n	800db58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db16:	2b00      	cmp	r3, #0
 800db18:	d0ef      	beq.n	800dafa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1ea      	bne.n	800dafa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db28:	f003 0304 	and.w	r3, r3, #4
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d004      	beq.n	800db3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2204      	movs	r2, #4
 800db34:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db36:	2304      	movs	r3, #4
 800db38:	e00e      	b.n	800db58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db3e:	f003 0301 	and.w	r3, r3, #1
 800db42:	2b00      	cmp	r3, #0
 800db44:	d004      	beq.n	800db50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2201      	movs	r2, #1
 800db4a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db4c:	2301      	movs	r3, #1
 800db4e:	e003      	b.n	800db58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4a06      	ldr	r2, [pc, #24]	@ (800db6c <SDMMC_GetCmdResp2+0x90>)
 800db54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	24000000 	.word	0x24000000
 800db68:	10624dd3 	.word	0x10624dd3
 800db6c:	002000c5 	.word	0x002000c5

0800db70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800db78:	4b1a      	ldr	r3, [pc, #104]	@ (800dbe4 <SDMMC_GetCmdResp3+0x74>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a1a      	ldr	r2, [pc, #104]	@ (800dbe8 <SDMMC_GetCmdResp3+0x78>)
 800db7e:	fba2 2303 	umull	r2, r3, r2, r3
 800db82:	0a5b      	lsrs	r3, r3, #9
 800db84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db88:	fb02 f303 	mul.w	r3, r2, r3
 800db8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	1e5a      	subs	r2, r3, #1
 800db92:	60fa      	str	r2, [r7, #12]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d102      	bne.n	800db9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db9c:	e01b      	b.n	800dbd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dba2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d0ef      	beq.n	800db8e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1ea      	bne.n	800db8e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbbc:	f003 0304 	and.w	r3, r3, #4
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d004      	beq.n	800dbce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2204      	movs	r2, #4
 800dbc8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbca:	2304      	movs	r3, #4
 800dbcc:	e003      	b.n	800dbd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a06      	ldr	r2, [pc, #24]	@ (800dbec <SDMMC_GetCmdResp3+0x7c>)
 800dbd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	24000000 	.word	0x24000000
 800dbe8:	10624dd3 	.word	0x10624dd3
 800dbec:	002000c5 	.word	0x002000c5

0800dbf0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b088      	sub	sp, #32
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	607a      	str	r2, [r7, #4]
 800dbfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dbfe:	4b35      	ldr	r3, [pc, #212]	@ (800dcd4 <SDMMC_GetCmdResp6+0xe4>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a35      	ldr	r2, [pc, #212]	@ (800dcd8 <SDMMC_GetCmdResp6+0xe8>)
 800dc04:	fba2 2303 	umull	r2, r3, r2, r3
 800dc08:	0a5b      	lsrs	r3, r3, #9
 800dc0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc0e:	fb02 f303 	mul.w	r3, r2, r3
 800dc12:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	1e5a      	subs	r2, r3, #1
 800dc18:	61fa      	str	r2, [r7, #28]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d102      	bne.n	800dc24 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc1e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc22:	e052      	b.n	800dcca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc28:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d0ef      	beq.n	800dc14 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1ea      	bne.n	800dc14 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc42:	f003 0304 	and.w	r3, r3, #4
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d004      	beq.n	800dc54 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2204      	movs	r2, #4
 800dc4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc50:	2304      	movs	r3, #4
 800dc52:	e03a      	b.n	800dcca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc58:	f003 0301 	and.w	r3, r3, #1
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d004      	beq.n	800dc6a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2201      	movs	r2, #1
 800dc64:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc66:	2301      	movs	r3, #1
 800dc68:	e02f      	b.n	800dcca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f7ff fc46 	bl	800d4fc <SDMMC_GetCommandResponse>
 800dc70:	4603      	mov	r3, r0
 800dc72:	461a      	mov	r2, r3
 800dc74:	7afb      	ldrb	r3, [r7, #11]
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d001      	beq.n	800dc7e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e025      	b.n	800dcca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	4a16      	ldr	r2, [pc, #88]	@ (800dcdc <SDMMC_GetCmdResp6+0xec>)
 800dc82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dc84:	2100      	movs	r1, #0
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f7ff fc45 	bl	800d516 <SDMMC_GetResponse>
 800dc8c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d106      	bne.n	800dca6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	0c1b      	lsrs	r3, r3, #16
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800dca2:	2300      	movs	r3, #0
 800dca4:	e011      	b.n	800dcca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d002      	beq.n	800dcb6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dcb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dcb4:	e009      	b.n	800dcca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dcc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dcc4:	e001      	b.n	800dcca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dcc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3720      	adds	r7, #32
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	24000000 	.word	0x24000000
 800dcd8:	10624dd3 	.word	0x10624dd3
 800dcdc:	002000c5 	.word	0x002000c5

0800dce0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dce8:	4b22      	ldr	r3, [pc, #136]	@ (800dd74 <SDMMC_GetCmdResp7+0x94>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a22      	ldr	r2, [pc, #136]	@ (800dd78 <SDMMC_GetCmdResp7+0x98>)
 800dcee:	fba2 2303 	umull	r2, r3, r2, r3
 800dcf2:	0a5b      	lsrs	r3, r3, #9
 800dcf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcf8:	fb02 f303 	mul.w	r3, r2, r3
 800dcfc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	1e5a      	subs	r2, r3, #1
 800dd02:	60fa      	str	r2, [r7, #12]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d102      	bne.n	800dd0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd0c:	e02c      	b.n	800dd68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0ef      	beq.n	800dcfe <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d1ea      	bne.n	800dcfe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd2c:	f003 0304 	and.w	r3, r3, #4
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d004      	beq.n	800dd3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2204      	movs	r2, #4
 800dd38:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd3a:	2304      	movs	r3, #4
 800dd3c:	e014      	b.n	800dd68 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd42:	f003 0301 	and.w	r3, r3, #1
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d004      	beq.n	800dd54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd50:	2301      	movs	r3, #1
 800dd52:	e009      	b.n	800dd68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2240      	movs	r2, #64	@ 0x40
 800dd64:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dd66:	2300      	movs	r3, #0

}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3714      	adds	r7, #20
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr
 800dd74:	24000000 	.word	0x24000000
 800dd78:	10624dd3 	.word	0x10624dd3

0800dd7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b085      	sub	sp, #20
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dd84:	4b11      	ldr	r3, [pc, #68]	@ (800ddcc <SDMMC_GetCmdError+0x50>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a11      	ldr	r2, [pc, #68]	@ (800ddd0 <SDMMC_GetCmdError+0x54>)
 800dd8a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd8e:	0a5b      	lsrs	r3, r3, #9
 800dd90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd94:	fb02 f303 	mul.w	r3, r2, r3
 800dd98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	1e5a      	subs	r2, r3, #1
 800dd9e:	60fa      	str	r2, [r7, #12]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d102      	bne.n	800ddaa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dda4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dda8:	e009      	b.n	800ddbe <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d0f1      	beq.n	800dd9a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4a06      	ldr	r2, [pc, #24]	@ (800ddd4 <SDMMC_GetCmdError+0x58>)
 800ddba:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3714      	adds	r7, #20
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	24000000 	.word	0x24000000
 800ddd0:	10624dd3 	.word	0x10624dd3
 800ddd4:	002000c5 	.word	0x002000c5

0800ddd8 <__cvt>:
 800ddd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddda:	ed2d 8b02 	vpush	{d8}
 800ddde:	eeb0 8b40 	vmov.f64	d8, d0
 800dde2:	b085      	sub	sp, #20
 800dde4:	4617      	mov	r7, r2
 800dde6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800dde8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ddea:	ee18 2a90 	vmov	r2, s17
 800ddee:	f025 0520 	bic.w	r5, r5, #32
 800ddf2:	2a00      	cmp	r2, #0
 800ddf4:	bfb6      	itet	lt
 800ddf6:	222d      	movlt	r2, #45	@ 0x2d
 800ddf8:	2200      	movge	r2, #0
 800ddfa:	eeb1 8b40 	vneglt.f64	d8, d0
 800ddfe:	2d46      	cmp	r5, #70	@ 0x46
 800de00:	460c      	mov	r4, r1
 800de02:	701a      	strb	r2, [r3, #0]
 800de04:	d004      	beq.n	800de10 <__cvt+0x38>
 800de06:	2d45      	cmp	r5, #69	@ 0x45
 800de08:	d100      	bne.n	800de0c <__cvt+0x34>
 800de0a:	3401      	adds	r4, #1
 800de0c:	2102      	movs	r1, #2
 800de0e:	e000      	b.n	800de12 <__cvt+0x3a>
 800de10:	2103      	movs	r1, #3
 800de12:	ab03      	add	r3, sp, #12
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	ab02      	add	r3, sp, #8
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	4622      	mov	r2, r4
 800de1c:	4633      	mov	r3, r6
 800de1e:	eeb0 0b48 	vmov.f64	d0, d8
 800de22:	f001 f865 	bl	800eef0 <_dtoa_r>
 800de26:	2d47      	cmp	r5, #71	@ 0x47
 800de28:	d114      	bne.n	800de54 <__cvt+0x7c>
 800de2a:	07fb      	lsls	r3, r7, #31
 800de2c:	d50a      	bpl.n	800de44 <__cvt+0x6c>
 800de2e:	1902      	adds	r2, r0, r4
 800de30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800de34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de38:	bf08      	it	eq
 800de3a:	9203      	streq	r2, [sp, #12]
 800de3c:	2130      	movs	r1, #48	@ 0x30
 800de3e:	9b03      	ldr	r3, [sp, #12]
 800de40:	4293      	cmp	r3, r2
 800de42:	d319      	bcc.n	800de78 <__cvt+0xa0>
 800de44:	9b03      	ldr	r3, [sp, #12]
 800de46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de48:	1a1b      	subs	r3, r3, r0
 800de4a:	6013      	str	r3, [r2, #0]
 800de4c:	b005      	add	sp, #20
 800de4e:	ecbd 8b02 	vpop	{d8}
 800de52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de54:	2d46      	cmp	r5, #70	@ 0x46
 800de56:	eb00 0204 	add.w	r2, r0, r4
 800de5a:	d1e9      	bne.n	800de30 <__cvt+0x58>
 800de5c:	7803      	ldrb	r3, [r0, #0]
 800de5e:	2b30      	cmp	r3, #48	@ 0x30
 800de60:	d107      	bne.n	800de72 <__cvt+0x9a>
 800de62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800de66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6a:	bf1c      	itt	ne
 800de6c:	f1c4 0401 	rsbne	r4, r4, #1
 800de70:	6034      	strne	r4, [r6, #0]
 800de72:	6833      	ldr	r3, [r6, #0]
 800de74:	441a      	add	r2, r3
 800de76:	e7db      	b.n	800de30 <__cvt+0x58>
 800de78:	1c5c      	adds	r4, r3, #1
 800de7a:	9403      	str	r4, [sp, #12]
 800de7c:	7019      	strb	r1, [r3, #0]
 800de7e:	e7de      	b.n	800de3e <__cvt+0x66>

0800de80 <__exponent>:
 800de80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de82:	2900      	cmp	r1, #0
 800de84:	bfba      	itte	lt
 800de86:	4249      	neglt	r1, r1
 800de88:	232d      	movlt	r3, #45	@ 0x2d
 800de8a:	232b      	movge	r3, #43	@ 0x2b
 800de8c:	2909      	cmp	r1, #9
 800de8e:	7002      	strb	r2, [r0, #0]
 800de90:	7043      	strb	r3, [r0, #1]
 800de92:	dd29      	ble.n	800dee8 <__exponent+0x68>
 800de94:	f10d 0307 	add.w	r3, sp, #7
 800de98:	461d      	mov	r5, r3
 800de9a:	270a      	movs	r7, #10
 800de9c:	461a      	mov	r2, r3
 800de9e:	fbb1 f6f7 	udiv	r6, r1, r7
 800dea2:	fb07 1416 	mls	r4, r7, r6, r1
 800dea6:	3430      	adds	r4, #48	@ 0x30
 800dea8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800deac:	460c      	mov	r4, r1
 800deae:	2c63      	cmp	r4, #99	@ 0x63
 800deb0:	f103 33ff 	add.w	r3, r3, #4294967295
 800deb4:	4631      	mov	r1, r6
 800deb6:	dcf1      	bgt.n	800de9c <__exponent+0x1c>
 800deb8:	3130      	adds	r1, #48	@ 0x30
 800deba:	1e94      	subs	r4, r2, #2
 800debc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dec0:	1c41      	adds	r1, r0, #1
 800dec2:	4623      	mov	r3, r4
 800dec4:	42ab      	cmp	r3, r5
 800dec6:	d30a      	bcc.n	800dede <__exponent+0x5e>
 800dec8:	f10d 0309 	add.w	r3, sp, #9
 800decc:	1a9b      	subs	r3, r3, r2
 800dece:	42ac      	cmp	r4, r5
 800ded0:	bf88      	it	hi
 800ded2:	2300      	movhi	r3, #0
 800ded4:	3302      	adds	r3, #2
 800ded6:	4403      	add	r3, r0
 800ded8:	1a18      	subs	r0, r3, r0
 800deda:	b003      	add	sp, #12
 800dedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dede:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dee2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dee6:	e7ed      	b.n	800dec4 <__exponent+0x44>
 800dee8:	2330      	movs	r3, #48	@ 0x30
 800deea:	3130      	adds	r1, #48	@ 0x30
 800deec:	7083      	strb	r3, [r0, #2]
 800deee:	70c1      	strb	r1, [r0, #3]
 800def0:	1d03      	adds	r3, r0, #4
 800def2:	e7f1      	b.n	800ded8 <__exponent+0x58>
 800def4:	0000      	movs	r0, r0
	...

0800def8 <_printf_float>:
 800def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defc:	b08d      	sub	sp, #52	@ 0x34
 800defe:	460c      	mov	r4, r1
 800df00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800df04:	4616      	mov	r6, r2
 800df06:	461f      	mov	r7, r3
 800df08:	4605      	mov	r5, r0
 800df0a:	f000 fee9 	bl	800ece0 <_localeconv_r>
 800df0e:	f8d0 b000 	ldr.w	fp, [r0]
 800df12:	4658      	mov	r0, fp
 800df14:	f7f2 fa4c 	bl	80003b0 <strlen>
 800df18:	2300      	movs	r3, #0
 800df1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800df1c:	f8d8 3000 	ldr.w	r3, [r8]
 800df20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800df24:	6822      	ldr	r2, [r4, #0]
 800df26:	9005      	str	r0, [sp, #20]
 800df28:	3307      	adds	r3, #7
 800df2a:	f023 0307 	bic.w	r3, r3, #7
 800df2e:	f103 0108 	add.w	r1, r3, #8
 800df32:	f8c8 1000 	str.w	r1, [r8]
 800df36:	ed93 0b00 	vldr	d0, [r3]
 800df3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e198 <_printf_float+0x2a0>
 800df3e:	eeb0 7bc0 	vabs.f64	d7, d0
 800df42:	eeb4 7b46 	vcmp.f64	d7, d6
 800df46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df4a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800df4e:	dd24      	ble.n	800df9a <_printf_float+0xa2>
 800df50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800df54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df58:	d502      	bpl.n	800df60 <_printf_float+0x68>
 800df5a:	232d      	movs	r3, #45	@ 0x2d
 800df5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df60:	498f      	ldr	r1, [pc, #572]	@ (800e1a0 <_printf_float+0x2a8>)
 800df62:	4b90      	ldr	r3, [pc, #576]	@ (800e1a4 <_printf_float+0x2ac>)
 800df64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800df68:	bf94      	ite	ls
 800df6a:	4688      	movls	r8, r1
 800df6c:	4698      	movhi	r8, r3
 800df6e:	f022 0204 	bic.w	r2, r2, #4
 800df72:	2303      	movs	r3, #3
 800df74:	6123      	str	r3, [r4, #16]
 800df76:	6022      	str	r2, [r4, #0]
 800df78:	f04f 0a00 	mov.w	sl, #0
 800df7c:	9700      	str	r7, [sp, #0]
 800df7e:	4633      	mov	r3, r6
 800df80:	aa0b      	add	r2, sp, #44	@ 0x2c
 800df82:	4621      	mov	r1, r4
 800df84:	4628      	mov	r0, r5
 800df86:	f000 f9d1 	bl	800e32c <_printf_common>
 800df8a:	3001      	adds	r0, #1
 800df8c:	f040 8089 	bne.w	800e0a2 <_printf_float+0x1aa>
 800df90:	f04f 30ff 	mov.w	r0, #4294967295
 800df94:	b00d      	add	sp, #52	@ 0x34
 800df96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9a:	eeb4 0b40 	vcmp.f64	d0, d0
 800df9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa2:	d709      	bvc.n	800dfb8 <_printf_float+0xc0>
 800dfa4:	ee10 3a90 	vmov	r3, s1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	bfbc      	itt	lt
 800dfac:	232d      	movlt	r3, #45	@ 0x2d
 800dfae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dfb2:	497d      	ldr	r1, [pc, #500]	@ (800e1a8 <_printf_float+0x2b0>)
 800dfb4:	4b7d      	ldr	r3, [pc, #500]	@ (800e1ac <_printf_float+0x2b4>)
 800dfb6:	e7d5      	b.n	800df64 <_printf_float+0x6c>
 800dfb8:	6863      	ldr	r3, [r4, #4]
 800dfba:	1c59      	adds	r1, r3, #1
 800dfbc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800dfc0:	d139      	bne.n	800e036 <_printf_float+0x13e>
 800dfc2:	2306      	movs	r3, #6
 800dfc4:	6063      	str	r3, [r4, #4]
 800dfc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dfca:	2300      	movs	r3, #0
 800dfcc:	6022      	str	r2, [r4, #0]
 800dfce:	9303      	str	r3, [sp, #12]
 800dfd0:	ab0a      	add	r3, sp, #40	@ 0x28
 800dfd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800dfd6:	ab09      	add	r3, sp, #36	@ 0x24
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	6861      	ldr	r1, [r4, #4]
 800dfdc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	f7ff fef9 	bl	800ddd8 <__cvt>
 800dfe6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dfea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfec:	4680      	mov	r8, r0
 800dfee:	d129      	bne.n	800e044 <_printf_float+0x14c>
 800dff0:	1cc8      	adds	r0, r1, #3
 800dff2:	db02      	blt.n	800dffa <_printf_float+0x102>
 800dff4:	6863      	ldr	r3, [r4, #4]
 800dff6:	4299      	cmp	r1, r3
 800dff8:	dd41      	ble.n	800e07e <_printf_float+0x186>
 800dffa:	f1a9 0902 	sub.w	r9, r9, #2
 800dffe:	fa5f f989 	uxtb.w	r9, r9
 800e002:	3901      	subs	r1, #1
 800e004:	464a      	mov	r2, r9
 800e006:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e00a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e00c:	f7ff ff38 	bl	800de80 <__exponent>
 800e010:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e012:	1813      	adds	r3, r2, r0
 800e014:	2a01      	cmp	r2, #1
 800e016:	4682      	mov	sl, r0
 800e018:	6123      	str	r3, [r4, #16]
 800e01a:	dc02      	bgt.n	800e022 <_printf_float+0x12a>
 800e01c:	6822      	ldr	r2, [r4, #0]
 800e01e:	07d2      	lsls	r2, r2, #31
 800e020:	d501      	bpl.n	800e026 <_printf_float+0x12e>
 800e022:	3301      	adds	r3, #1
 800e024:	6123      	str	r3, [r4, #16]
 800e026:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d0a6      	beq.n	800df7c <_printf_float+0x84>
 800e02e:	232d      	movs	r3, #45	@ 0x2d
 800e030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e034:	e7a2      	b.n	800df7c <_printf_float+0x84>
 800e036:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e03a:	d1c4      	bne.n	800dfc6 <_printf_float+0xce>
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d1c2      	bne.n	800dfc6 <_printf_float+0xce>
 800e040:	2301      	movs	r3, #1
 800e042:	e7bf      	b.n	800dfc4 <_printf_float+0xcc>
 800e044:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e048:	d9db      	bls.n	800e002 <_printf_float+0x10a>
 800e04a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e04e:	d118      	bne.n	800e082 <_printf_float+0x18a>
 800e050:	2900      	cmp	r1, #0
 800e052:	6863      	ldr	r3, [r4, #4]
 800e054:	dd0b      	ble.n	800e06e <_printf_float+0x176>
 800e056:	6121      	str	r1, [r4, #16]
 800e058:	b913      	cbnz	r3, 800e060 <_printf_float+0x168>
 800e05a:	6822      	ldr	r2, [r4, #0]
 800e05c:	07d0      	lsls	r0, r2, #31
 800e05e:	d502      	bpl.n	800e066 <_printf_float+0x16e>
 800e060:	3301      	adds	r3, #1
 800e062:	440b      	add	r3, r1
 800e064:	6123      	str	r3, [r4, #16]
 800e066:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e068:	f04f 0a00 	mov.w	sl, #0
 800e06c:	e7db      	b.n	800e026 <_printf_float+0x12e>
 800e06e:	b913      	cbnz	r3, 800e076 <_printf_float+0x17e>
 800e070:	6822      	ldr	r2, [r4, #0]
 800e072:	07d2      	lsls	r2, r2, #31
 800e074:	d501      	bpl.n	800e07a <_printf_float+0x182>
 800e076:	3302      	adds	r3, #2
 800e078:	e7f4      	b.n	800e064 <_printf_float+0x16c>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e7f2      	b.n	800e064 <_printf_float+0x16c>
 800e07e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e084:	4299      	cmp	r1, r3
 800e086:	db05      	blt.n	800e094 <_printf_float+0x19c>
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	6121      	str	r1, [r4, #16]
 800e08c:	07d8      	lsls	r0, r3, #31
 800e08e:	d5ea      	bpl.n	800e066 <_printf_float+0x16e>
 800e090:	1c4b      	adds	r3, r1, #1
 800e092:	e7e7      	b.n	800e064 <_printf_float+0x16c>
 800e094:	2900      	cmp	r1, #0
 800e096:	bfd4      	ite	le
 800e098:	f1c1 0202 	rsble	r2, r1, #2
 800e09c:	2201      	movgt	r2, #1
 800e09e:	4413      	add	r3, r2
 800e0a0:	e7e0      	b.n	800e064 <_printf_float+0x16c>
 800e0a2:	6823      	ldr	r3, [r4, #0]
 800e0a4:	055a      	lsls	r2, r3, #21
 800e0a6:	d407      	bmi.n	800e0b8 <_printf_float+0x1c0>
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	4642      	mov	r2, r8
 800e0ac:	4631      	mov	r1, r6
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	47b8      	blx	r7
 800e0b2:	3001      	adds	r0, #1
 800e0b4:	d12a      	bne.n	800e10c <_printf_float+0x214>
 800e0b6:	e76b      	b.n	800df90 <_printf_float+0x98>
 800e0b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e0bc:	f240 80e0 	bls.w	800e280 <_printf_float+0x388>
 800e0c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e0c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0cc:	d133      	bne.n	800e136 <_printf_float+0x23e>
 800e0ce:	4a38      	ldr	r2, [pc, #224]	@ (800e1b0 <_printf_float+0x2b8>)
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	4631      	mov	r1, r6
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	47b8      	blx	r7
 800e0d8:	3001      	adds	r0, #1
 800e0da:	f43f af59 	beq.w	800df90 <_printf_float+0x98>
 800e0de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e0e2:	4543      	cmp	r3, r8
 800e0e4:	db02      	blt.n	800e0ec <_printf_float+0x1f4>
 800e0e6:	6823      	ldr	r3, [r4, #0]
 800e0e8:	07d8      	lsls	r0, r3, #31
 800e0ea:	d50f      	bpl.n	800e10c <_printf_float+0x214>
 800e0ec:	9b05      	ldr	r3, [sp, #20]
 800e0ee:	465a      	mov	r2, fp
 800e0f0:	4631      	mov	r1, r6
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	47b8      	blx	r7
 800e0f6:	3001      	adds	r0, #1
 800e0f8:	f43f af4a 	beq.w	800df90 <_printf_float+0x98>
 800e0fc:	f04f 0900 	mov.w	r9, #0
 800e100:	f108 38ff 	add.w	r8, r8, #4294967295
 800e104:	f104 0a1a 	add.w	sl, r4, #26
 800e108:	45c8      	cmp	r8, r9
 800e10a:	dc09      	bgt.n	800e120 <_printf_float+0x228>
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	079b      	lsls	r3, r3, #30
 800e110:	f100 8107 	bmi.w	800e322 <_printf_float+0x42a>
 800e114:	68e0      	ldr	r0, [r4, #12]
 800e116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e118:	4298      	cmp	r0, r3
 800e11a:	bfb8      	it	lt
 800e11c:	4618      	movlt	r0, r3
 800e11e:	e739      	b.n	800df94 <_printf_float+0x9c>
 800e120:	2301      	movs	r3, #1
 800e122:	4652      	mov	r2, sl
 800e124:	4631      	mov	r1, r6
 800e126:	4628      	mov	r0, r5
 800e128:	47b8      	blx	r7
 800e12a:	3001      	adds	r0, #1
 800e12c:	f43f af30 	beq.w	800df90 <_printf_float+0x98>
 800e130:	f109 0901 	add.w	r9, r9, #1
 800e134:	e7e8      	b.n	800e108 <_printf_float+0x210>
 800e136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e138:	2b00      	cmp	r3, #0
 800e13a:	dc3b      	bgt.n	800e1b4 <_printf_float+0x2bc>
 800e13c:	4a1c      	ldr	r2, [pc, #112]	@ (800e1b0 <_printf_float+0x2b8>)
 800e13e:	2301      	movs	r3, #1
 800e140:	4631      	mov	r1, r6
 800e142:	4628      	mov	r0, r5
 800e144:	47b8      	blx	r7
 800e146:	3001      	adds	r0, #1
 800e148:	f43f af22 	beq.w	800df90 <_printf_float+0x98>
 800e14c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e150:	ea59 0303 	orrs.w	r3, r9, r3
 800e154:	d102      	bne.n	800e15c <_printf_float+0x264>
 800e156:	6823      	ldr	r3, [r4, #0]
 800e158:	07d9      	lsls	r1, r3, #31
 800e15a:	d5d7      	bpl.n	800e10c <_printf_float+0x214>
 800e15c:	9b05      	ldr	r3, [sp, #20]
 800e15e:	465a      	mov	r2, fp
 800e160:	4631      	mov	r1, r6
 800e162:	4628      	mov	r0, r5
 800e164:	47b8      	blx	r7
 800e166:	3001      	adds	r0, #1
 800e168:	f43f af12 	beq.w	800df90 <_printf_float+0x98>
 800e16c:	f04f 0a00 	mov.w	sl, #0
 800e170:	f104 0b1a 	add.w	fp, r4, #26
 800e174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e176:	425b      	negs	r3, r3
 800e178:	4553      	cmp	r3, sl
 800e17a:	dc01      	bgt.n	800e180 <_printf_float+0x288>
 800e17c:	464b      	mov	r3, r9
 800e17e:	e794      	b.n	800e0aa <_printf_float+0x1b2>
 800e180:	2301      	movs	r3, #1
 800e182:	465a      	mov	r2, fp
 800e184:	4631      	mov	r1, r6
 800e186:	4628      	mov	r0, r5
 800e188:	47b8      	blx	r7
 800e18a:	3001      	adds	r0, #1
 800e18c:	f43f af00 	beq.w	800df90 <_printf_float+0x98>
 800e190:	f10a 0a01 	add.w	sl, sl, #1
 800e194:	e7ee      	b.n	800e174 <_printf_float+0x27c>
 800e196:	bf00      	nop
 800e198:	ffffffff 	.word	0xffffffff
 800e19c:	7fefffff 	.word	0x7fefffff
 800e1a0:	080123a4 	.word	0x080123a4
 800e1a4:	080123a8 	.word	0x080123a8
 800e1a8:	080123ac 	.word	0x080123ac
 800e1ac:	080123b0 	.word	0x080123b0
 800e1b0:	080123b4 	.word	0x080123b4
 800e1b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e1b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e1ba:	4553      	cmp	r3, sl
 800e1bc:	bfa8      	it	ge
 800e1be:	4653      	movge	r3, sl
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	4699      	mov	r9, r3
 800e1c4:	dc37      	bgt.n	800e236 <_printf_float+0x33e>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	9307      	str	r3, [sp, #28]
 800e1ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e1ce:	f104 021a 	add.w	r2, r4, #26
 800e1d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e1d4:	9907      	ldr	r1, [sp, #28]
 800e1d6:	9306      	str	r3, [sp, #24]
 800e1d8:	eba3 0309 	sub.w	r3, r3, r9
 800e1dc:	428b      	cmp	r3, r1
 800e1de:	dc31      	bgt.n	800e244 <_printf_float+0x34c>
 800e1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1e2:	459a      	cmp	sl, r3
 800e1e4:	dc3b      	bgt.n	800e25e <_printf_float+0x366>
 800e1e6:	6823      	ldr	r3, [r4, #0]
 800e1e8:	07da      	lsls	r2, r3, #31
 800e1ea:	d438      	bmi.n	800e25e <_printf_float+0x366>
 800e1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1ee:	ebaa 0903 	sub.w	r9, sl, r3
 800e1f2:	9b06      	ldr	r3, [sp, #24]
 800e1f4:	ebaa 0303 	sub.w	r3, sl, r3
 800e1f8:	4599      	cmp	r9, r3
 800e1fa:	bfa8      	it	ge
 800e1fc:	4699      	movge	r9, r3
 800e1fe:	f1b9 0f00 	cmp.w	r9, #0
 800e202:	dc34      	bgt.n	800e26e <_printf_float+0x376>
 800e204:	f04f 0800 	mov.w	r8, #0
 800e208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e20c:	f104 0b1a 	add.w	fp, r4, #26
 800e210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e212:	ebaa 0303 	sub.w	r3, sl, r3
 800e216:	eba3 0309 	sub.w	r3, r3, r9
 800e21a:	4543      	cmp	r3, r8
 800e21c:	f77f af76 	ble.w	800e10c <_printf_float+0x214>
 800e220:	2301      	movs	r3, #1
 800e222:	465a      	mov	r2, fp
 800e224:	4631      	mov	r1, r6
 800e226:	4628      	mov	r0, r5
 800e228:	47b8      	blx	r7
 800e22a:	3001      	adds	r0, #1
 800e22c:	f43f aeb0 	beq.w	800df90 <_printf_float+0x98>
 800e230:	f108 0801 	add.w	r8, r8, #1
 800e234:	e7ec      	b.n	800e210 <_printf_float+0x318>
 800e236:	4642      	mov	r2, r8
 800e238:	4631      	mov	r1, r6
 800e23a:	4628      	mov	r0, r5
 800e23c:	47b8      	blx	r7
 800e23e:	3001      	adds	r0, #1
 800e240:	d1c1      	bne.n	800e1c6 <_printf_float+0x2ce>
 800e242:	e6a5      	b.n	800df90 <_printf_float+0x98>
 800e244:	2301      	movs	r3, #1
 800e246:	4631      	mov	r1, r6
 800e248:	4628      	mov	r0, r5
 800e24a:	9206      	str	r2, [sp, #24]
 800e24c:	47b8      	blx	r7
 800e24e:	3001      	adds	r0, #1
 800e250:	f43f ae9e 	beq.w	800df90 <_printf_float+0x98>
 800e254:	9b07      	ldr	r3, [sp, #28]
 800e256:	9a06      	ldr	r2, [sp, #24]
 800e258:	3301      	adds	r3, #1
 800e25a:	9307      	str	r3, [sp, #28]
 800e25c:	e7b9      	b.n	800e1d2 <_printf_float+0x2da>
 800e25e:	9b05      	ldr	r3, [sp, #20]
 800e260:	465a      	mov	r2, fp
 800e262:	4631      	mov	r1, r6
 800e264:	4628      	mov	r0, r5
 800e266:	47b8      	blx	r7
 800e268:	3001      	adds	r0, #1
 800e26a:	d1bf      	bne.n	800e1ec <_printf_float+0x2f4>
 800e26c:	e690      	b.n	800df90 <_printf_float+0x98>
 800e26e:	9a06      	ldr	r2, [sp, #24]
 800e270:	464b      	mov	r3, r9
 800e272:	4442      	add	r2, r8
 800e274:	4631      	mov	r1, r6
 800e276:	4628      	mov	r0, r5
 800e278:	47b8      	blx	r7
 800e27a:	3001      	adds	r0, #1
 800e27c:	d1c2      	bne.n	800e204 <_printf_float+0x30c>
 800e27e:	e687      	b.n	800df90 <_printf_float+0x98>
 800e280:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e284:	f1b9 0f01 	cmp.w	r9, #1
 800e288:	dc01      	bgt.n	800e28e <_printf_float+0x396>
 800e28a:	07db      	lsls	r3, r3, #31
 800e28c:	d536      	bpl.n	800e2fc <_printf_float+0x404>
 800e28e:	2301      	movs	r3, #1
 800e290:	4642      	mov	r2, r8
 800e292:	4631      	mov	r1, r6
 800e294:	4628      	mov	r0, r5
 800e296:	47b8      	blx	r7
 800e298:	3001      	adds	r0, #1
 800e29a:	f43f ae79 	beq.w	800df90 <_printf_float+0x98>
 800e29e:	9b05      	ldr	r3, [sp, #20]
 800e2a0:	465a      	mov	r2, fp
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	47b8      	blx	r7
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	f43f ae71 	beq.w	800df90 <_printf_float+0x98>
 800e2ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e2b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ba:	f109 39ff 	add.w	r9, r9, #4294967295
 800e2be:	d018      	beq.n	800e2f2 <_printf_float+0x3fa>
 800e2c0:	464b      	mov	r3, r9
 800e2c2:	f108 0201 	add.w	r2, r8, #1
 800e2c6:	4631      	mov	r1, r6
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	47b8      	blx	r7
 800e2cc:	3001      	adds	r0, #1
 800e2ce:	d10c      	bne.n	800e2ea <_printf_float+0x3f2>
 800e2d0:	e65e      	b.n	800df90 <_printf_float+0x98>
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	465a      	mov	r2, fp
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	4628      	mov	r0, r5
 800e2da:	47b8      	blx	r7
 800e2dc:	3001      	adds	r0, #1
 800e2de:	f43f ae57 	beq.w	800df90 <_printf_float+0x98>
 800e2e2:	f108 0801 	add.w	r8, r8, #1
 800e2e6:	45c8      	cmp	r8, r9
 800e2e8:	dbf3      	blt.n	800e2d2 <_printf_float+0x3da>
 800e2ea:	4653      	mov	r3, sl
 800e2ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e2f0:	e6dc      	b.n	800e0ac <_printf_float+0x1b4>
 800e2f2:	f04f 0800 	mov.w	r8, #0
 800e2f6:	f104 0b1a 	add.w	fp, r4, #26
 800e2fa:	e7f4      	b.n	800e2e6 <_printf_float+0x3ee>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	4642      	mov	r2, r8
 800e300:	e7e1      	b.n	800e2c6 <_printf_float+0x3ce>
 800e302:	2301      	movs	r3, #1
 800e304:	464a      	mov	r2, r9
 800e306:	4631      	mov	r1, r6
 800e308:	4628      	mov	r0, r5
 800e30a:	47b8      	blx	r7
 800e30c:	3001      	adds	r0, #1
 800e30e:	f43f ae3f 	beq.w	800df90 <_printf_float+0x98>
 800e312:	f108 0801 	add.w	r8, r8, #1
 800e316:	68e3      	ldr	r3, [r4, #12]
 800e318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e31a:	1a5b      	subs	r3, r3, r1
 800e31c:	4543      	cmp	r3, r8
 800e31e:	dcf0      	bgt.n	800e302 <_printf_float+0x40a>
 800e320:	e6f8      	b.n	800e114 <_printf_float+0x21c>
 800e322:	f04f 0800 	mov.w	r8, #0
 800e326:	f104 0919 	add.w	r9, r4, #25
 800e32a:	e7f4      	b.n	800e316 <_printf_float+0x41e>

0800e32c <_printf_common>:
 800e32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e330:	4616      	mov	r6, r2
 800e332:	4698      	mov	r8, r3
 800e334:	688a      	ldr	r2, [r1, #8]
 800e336:	690b      	ldr	r3, [r1, #16]
 800e338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e33c:	4293      	cmp	r3, r2
 800e33e:	bfb8      	it	lt
 800e340:	4613      	movlt	r3, r2
 800e342:	6033      	str	r3, [r6, #0]
 800e344:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e348:	4607      	mov	r7, r0
 800e34a:	460c      	mov	r4, r1
 800e34c:	b10a      	cbz	r2, 800e352 <_printf_common+0x26>
 800e34e:	3301      	adds	r3, #1
 800e350:	6033      	str	r3, [r6, #0]
 800e352:	6823      	ldr	r3, [r4, #0]
 800e354:	0699      	lsls	r1, r3, #26
 800e356:	bf42      	ittt	mi
 800e358:	6833      	ldrmi	r3, [r6, #0]
 800e35a:	3302      	addmi	r3, #2
 800e35c:	6033      	strmi	r3, [r6, #0]
 800e35e:	6825      	ldr	r5, [r4, #0]
 800e360:	f015 0506 	ands.w	r5, r5, #6
 800e364:	d106      	bne.n	800e374 <_printf_common+0x48>
 800e366:	f104 0a19 	add.w	sl, r4, #25
 800e36a:	68e3      	ldr	r3, [r4, #12]
 800e36c:	6832      	ldr	r2, [r6, #0]
 800e36e:	1a9b      	subs	r3, r3, r2
 800e370:	42ab      	cmp	r3, r5
 800e372:	dc26      	bgt.n	800e3c2 <_printf_common+0x96>
 800e374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e378:	6822      	ldr	r2, [r4, #0]
 800e37a:	3b00      	subs	r3, #0
 800e37c:	bf18      	it	ne
 800e37e:	2301      	movne	r3, #1
 800e380:	0692      	lsls	r2, r2, #26
 800e382:	d42b      	bmi.n	800e3dc <_printf_common+0xb0>
 800e384:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e388:	4641      	mov	r1, r8
 800e38a:	4638      	mov	r0, r7
 800e38c:	47c8      	blx	r9
 800e38e:	3001      	adds	r0, #1
 800e390:	d01e      	beq.n	800e3d0 <_printf_common+0xa4>
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	6922      	ldr	r2, [r4, #16]
 800e396:	f003 0306 	and.w	r3, r3, #6
 800e39a:	2b04      	cmp	r3, #4
 800e39c:	bf02      	ittt	eq
 800e39e:	68e5      	ldreq	r5, [r4, #12]
 800e3a0:	6833      	ldreq	r3, [r6, #0]
 800e3a2:	1aed      	subeq	r5, r5, r3
 800e3a4:	68a3      	ldr	r3, [r4, #8]
 800e3a6:	bf0c      	ite	eq
 800e3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3ac:	2500      	movne	r5, #0
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	bfc4      	itt	gt
 800e3b2:	1a9b      	subgt	r3, r3, r2
 800e3b4:	18ed      	addgt	r5, r5, r3
 800e3b6:	2600      	movs	r6, #0
 800e3b8:	341a      	adds	r4, #26
 800e3ba:	42b5      	cmp	r5, r6
 800e3bc:	d11a      	bne.n	800e3f4 <_printf_common+0xc8>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	e008      	b.n	800e3d4 <_printf_common+0xa8>
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	4652      	mov	r2, sl
 800e3c6:	4641      	mov	r1, r8
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	47c8      	blx	r9
 800e3cc:	3001      	adds	r0, #1
 800e3ce:	d103      	bne.n	800e3d8 <_printf_common+0xac>
 800e3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d8:	3501      	adds	r5, #1
 800e3da:	e7c6      	b.n	800e36a <_printf_common+0x3e>
 800e3dc:	18e1      	adds	r1, r4, r3
 800e3de:	1c5a      	adds	r2, r3, #1
 800e3e0:	2030      	movs	r0, #48	@ 0x30
 800e3e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e3e6:	4422      	add	r2, r4
 800e3e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e3ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e3f0:	3302      	adds	r3, #2
 800e3f2:	e7c7      	b.n	800e384 <_printf_common+0x58>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	4622      	mov	r2, r4
 800e3f8:	4641      	mov	r1, r8
 800e3fa:	4638      	mov	r0, r7
 800e3fc:	47c8      	blx	r9
 800e3fe:	3001      	adds	r0, #1
 800e400:	d0e6      	beq.n	800e3d0 <_printf_common+0xa4>
 800e402:	3601      	adds	r6, #1
 800e404:	e7d9      	b.n	800e3ba <_printf_common+0x8e>
	...

0800e408 <_printf_i>:
 800e408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e40c:	7e0f      	ldrb	r7, [r1, #24]
 800e40e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e410:	2f78      	cmp	r7, #120	@ 0x78
 800e412:	4691      	mov	r9, r2
 800e414:	4680      	mov	r8, r0
 800e416:	460c      	mov	r4, r1
 800e418:	469a      	mov	sl, r3
 800e41a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e41e:	d807      	bhi.n	800e430 <_printf_i+0x28>
 800e420:	2f62      	cmp	r7, #98	@ 0x62
 800e422:	d80a      	bhi.n	800e43a <_printf_i+0x32>
 800e424:	2f00      	cmp	r7, #0
 800e426:	f000 80d2 	beq.w	800e5ce <_printf_i+0x1c6>
 800e42a:	2f58      	cmp	r7, #88	@ 0x58
 800e42c:	f000 80b9 	beq.w	800e5a2 <_printf_i+0x19a>
 800e430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e434:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e438:	e03a      	b.n	800e4b0 <_printf_i+0xa8>
 800e43a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e43e:	2b15      	cmp	r3, #21
 800e440:	d8f6      	bhi.n	800e430 <_printf_i+0x28>
 800e442:	a101      	add	r1, pc, #4	@ (adr r1, 800e448 <_printf_i+0x40>)
 800e444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e448:	0800e4a1 	.word	0x0800e4a1
 800e44c:	0800e4b5 	.word	0x0800e4b5
 800e450:	0800e431 	.word	0x0800e431
 800e454:	0800e431 	.word	0x0800e431
 800e458:	0800e431 	.word	0x0800e431
 800e45c:	0800e431 	.word	0x0800e431
 800e460:	0800e4b5 	.word	0x0800e4b5
 800e464:	0800e431 	.word	0x0800e431
 800e468:	0800e431 	.word	0x0800e431
 800e46c:	0800e431 	.word	0x0800e431
 800e470:	0800e431 	.word	0x0800e431
 800e474:	0800e5b5 	.word	0x0800e5b5
 800e478:	0800e4df 	.word	0x0800e4df
 800e47c:	0800e56f 	.word	0x0800e56f
 800e480:	0800e431 	.word	0x0800e431
 800e484:	0800e431 	.word	0x0800e431
 800e488:	0800e5d7 	.word	0x0800e5d7
 800e48c:	0800e431 	.word	0x0800e431
 800e490:	0800e4df 	.word	0x0800e4df
 800e494:	0800e431 	.word	0x0800e431
 800e498:	0800e431 	.word	0x0800e431
 800e49c:	0800e577 	.word	0x0800e577
 800e4a0:	6833      	ldr	r3, [r6, #0]
 800e4a2:	1d1a      	adds	r2, r3, #4
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6032      	str	r2, [r6, #0]
 800e4a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e4ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	e09d      	b.n	800e5f0 <_printf_i+0x1e8>
 800e4b4:	6833      	ldr	r3, [r6, #0]
 800e4b6:	6820      	ldr	r0, [r4, #0]
 800e4b8:	1d19      	adds	r1, r3, #4
 800e4ba:	6031      	str	r1, [r6, #0]
 800e4bc:	0606      	lsls	r6, r0, #24
 800e4be:	d501      	bpl.n	800e4c4 <_printf_i+0xbc>
 800e4c0:	681d      	ldr	r5, [r3, #0]
 800e4c2:	e003      	b.n	800e4cc <_printf_i+0xc4>
 800e4c4:	0645      	lsls	r5, r0, #25
 800e4c6:	d5fb      	bpl.n	800e4c0 <_printf_i+0xb8>
 800e4c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e4cc:	2d00      	cmp	r5, #0
 800e4ce:	da03      	bge.n	800e4d8 <_printf_i+0xd0>
 800e4d0:	232d      	movs	r3, #45	@ 0x2d
 800e4d2:	426d      	negs	r5, r5
 800e4d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4d8:	4859      	ldr	r0, [pc, #356]	@ (800e640 <_printf_i+0x238>)
 800e4da:	230a      	movs	r3, #10
 800e4dc:	e011      	b.n	800e502 <_printf_i+0xfa>
 800e4de:	6821      	ldr	r1, [r4, #0]
 800e4e0:	6833      	ldr	r3, [r6, #0]
 800e4e2:	0608      	lsls	r0, r1, #24
 800e4e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e4e8:	d402      	bmi.n	800e4f0 <_printf_i+0xe8>
 800e4ea:	0649      	lsls	r1, r1, #25
 800e4ec:	bf48      	it	mi
 800e4ee:	b2ad      	uxthmi	r5, r5
 800e4f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e4f2:	4853      	ldr	r0, [pc, #332]	@ (800e640 <_printf_i+0x238>)
 800e4f4:	6033      	str	r3, [r6, #0]
 800e4f6:	bf14      	ite	ne
 800e4f8:	230a      	movne	r3, #10
 800e4fa:	2308      	moveq	r3, #8
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e502:	6866      	ldr	r6, [r4, #4]
 800e504:	60a6      	str	r6, [r4, #8]
 800e506:	2e00      	cmp	r6, #0
 800e508:	bfa2      	ittt	ge
 800e50a:	6821      	ldrge	r1, [r4, #0]
 800e50c:	f021 0104 	bicge.w	r1, r1, #4
 800e510:	6021      	strge	r1, [r4, #0]
 800e512:	b90d      	cbnz	r5, 800e518 <_printf_i+0x110>
 800e514:	2e00      	cmp	r6, #0
 800e516:	d04b      	beq.n	800e5b0 <_printf_i+0x1a8>
 800e518:	4616      	mov	r6, r2
 800e51a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e51e:	fb03 5711 	mls	r7, r3, r1, r5
 800e522:	5dc7      	ldrb	r7, [r0, r7]
 800e524:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e528:	462f      	mov	r7, r5
 800e52a:	42bb      	cmp	r3, r7
 800e52c:	460d      	mov	r5, r1
 800e52e:	d9f4      	bls.n	800e51a <_printf_i+0x112>
 800e530:	2b08      	cmp	r3, #8
 800e532:	d10b      	bne.n	800e54c <_printf_i+0x144>
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	07df      	lsls	r7, r3, #31
 800e538:	d508      	bpl.n	800e54c <_printf_i+0x144>
 800e53a:	6923      	ldr	r3, [r4, #16]
 800e53c:	6861      	ldr	r1, [r4, #4]
 800e53e:	4299      	cmp	r1, r3
 800e540:	bfde      	ittt	le
 800e542:	2330      	movle	r3, #48	@ 0x30
 800e544:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e548:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e54c:	1b92      	subs	r2, r2, r6
 800e54e:	6122      	str	r2, [r4, #16]
 800e550:	f8cd a000 	str.w	sl, [sp]
 800e554:	464b      	mov	r3, r9
 800e556:	aa03      	add	r2, sp, #12
 800e558:	4621      	mov	r1, r4
 800e55a:	4640      	mov	r0, r8
 800e55c:	f7ff fee6 	bl	800e32c <_printf_common>
 800e560:	3001      	adds	r0, #1
 800e562:	d14a      	bne.n	800e5fa <_printf_i+0x1f2>
 800e564:	f04f 30ff 	mov.w	r0, #4294967295
 800e568:	b004      	add	sp, #16
 800e56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	f043 0320 	orr.w	r3, r3, #32
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	4833      	ldr	r0, [pc, #204]	@ (800e644 <_printf_i+0x23c>)
 800e578:	2778      	movs	r7, #120	@ 0x78
 800e57a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	6831      	ldr	r1, [r6, #0]
 800e582:	061f      	lsls	r7, r3, #24
 800e584:	f851 5b04 	ldr.w	r5, [r1], #4
 800e588:	d402      	bmi.n	800e590 <_printf_i+0x188>
 800e58a:	065f      	lsls	r7, r3, #25
 800e58c:	bf48      	it	mi
 800e58e:	b2ad      	uxthmi	r5, r5
 800e590:	6031      	str	r1, [r6, #0]
 800e592:	07d9      	lsls	r1, r3, #31
 800e594:	bf44      	itt	mi
 800e596:	f043 0320 	orrmi.w	r3, r3, #32
 800e59a:	6023      	strmi	r3, [r4, #0]
 800e59c:	b11d      	cbz	r5, 800e5a6 <_printf_i+0x19e>
 800e59e:	2310      	movs	r3, #16
 800e5a0:	e7ac      	b.n	800e4fc <_printf_i+0xf4>
 800e5a2:	4827      	ldr	r0, [pc, #156]	@ (800e640 <_printf_i+0x238>)
 800e5a4:	e7e9      	b.n	800e57a <_printf_i+0x172>
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	f023 0320 	bic.w	r3, r3, #32
 800e5ac:	6023      	str	r3, [r4, #0]
 800e5ae:	e7f6      	b.n	800e59e <_printf_i+0x196>
 800e5b0:	4616      	mov	r6, r2
 800e5b2:	e7bd      	b.n	800e530 <_printf_i+0x128>
 800e5b4:	6833      	ldr	r3, [r6, #0]
 800e5b6:	6825      	ldr	r5, [r4, #0]
 800e5b8:	6961      	ldr	r1, [r4, #20]
 800e5ba:	1d18      	adds	r0, r3, #4
 800e5bc:	6030      	str	r0, [r6, #0]
 800e5be:	062e      	lsls	r6, r5, #24
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	d501      	bpl.n	800e5c8 <_printf_i+0x1c0>
 800e5c4:	6019      	str	r1, [r3, #0]
 800e5c6:	e002      	b.n	800e5ce <_printf_i+0x1c6>
 800e5c8:	0668      	lsls	r0, r5, #25
 800e5ca:	d5fb      	bpl.n	800e5c4 <_printf_i+0x1bc>
 800e5cc:	8019      	strh	r1, [r3, #0]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	6123      	str	r3, [r4, #16]
 800e5d2:	4616      	mov	r6, r2
 800e5d4:	e7bc      	b.n	800e550 <_printf_i+0x148>
 800e5d6:	6833      	ldr	r3, [r6, #0]
 800e5d8:	1d1a      	adds	r2, r3, #4
 800e5da:	6032      	str	r2, [r6, #0]
 800e5dc:	681e      	ldr	r6, [r3, #0]
 800e5de:	6862      	ldr	r2, [r4, #4]
 800e5e0:	2100      	movs	r1, #0
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	f7f1 fe94 	bl	8000310 <memchr>
 800e5e8:	b108      	cbz	r0, 800e5ee <_printf_i+0x1e6>
 800e5ea:	1b80      	subs	r0, r0, r6
 800e5ec:	6060      	str	r0, [r4, #4]
 800e5ee:	6863      	ldr	r3, [r4, #4]
 800e5f0:	6123      	str	r3, [r4, #16]
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5f8:	e7aa      	b.n	800e550 <_printf_i+0x148>
 800e5fa:	6923      	ldr	r3, [r4, #16]
 800e5fc:	4632      	mov	r2, r6
 800e5fe:	4649      	mov	r1, r9
 800e600:	4640      	mov	r0, r8
 800e602:	47d0      	blx	sl
 800e604:	3001      	adds	r0, #1
 800e606:	d0ad      	beq.n	800e564 <_printf_i+0x15c>
 800e608:	6823      	ldr	r3, [r4, #0]
 800e60a:	079b      	lsls	r3, r3, #30
 800e60c:	d413      	bmi.n	800e636 <_printf_i+0x22e>
 800e60e:	68e0      	ldr	r0, [r4, #12]
 800e610:	9b03      	ldr	r3, [sp, #12]
 800e612:	4298      	cmp	r0, r3
 800e614:	bfb8      	it	lt
 800e616:	4618      	movlt	r0, r3
 800e618:	e7a6      	b.n	800e568 <_printf_i+0x160>
 800e61a:	2301      	movs	r3, #1
 800e61c:	4632      	mov	r2, r6
 800e61e:	4649      	mov	r1, r9
 800e620:	4640      	mov	r0, r8
 800e622:	47d0      	blx	sl
 800e624:	3001      	adds	r0, #1
 800e626:	d09d      	beq.n	800e564 <_printf_i+0x15c>
 800e628:	3501      	adds	r5, #1
 800e62a:	68e3      	ldr	r3, [r4, #12]
 800e62c:	9903      	ldr	r1, [sp, #12]
 800e62e:	1a5b      	subs	r3, r3, r1
 800e630:	42ab      	cmp	r3, r5
 800e632:	dcf2      	bgt.n	800e61a <_printf_i+0x212>
 800e634:	e7eb      	b.n	800e60e <_printf_i+0x206>
 800e636:	2500      	movs	r5, #0
 800e638:	f104 0619 	add.w	r6, r4, #25
 800e63c:	e7f5      	b.n	800e62a <_printf_i+0x222>
 800e63e:	bf00      	nop
 800e640:	080123b6 	.word	0x080123b6
 800e644:	080123c7 	.word	0x080123c7

0800e648 <_scanf_float>:
 800e648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64c:	b087      	sub	sp, #28
 800e64e:	4617      	mov	r7, r2
 800e650:	9303      	str	r3, [sp, #12]
 800e652:	688b      	ldr	r3, [r1, #8]
 800e654:	1e5a      	subs	r2, r3, #1
 800e656:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e65a:	bf81      	itttt	hi
 800e65c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e660:	eb03 0b05 	addhi.w	fp, r3, r5
 800e664:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e668:	608b      	strhi	r3, [r1, #8]
 800e66a:	680b      	ldr	r3, [r1, #0]
 800e66c:	460a      	mov	r2, r1
 800e66e:	f04f 0500 	mov.w	r5, #0
 800e672:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e676:	f842 3b1c 	str.w	r3, [r2], #28
 800e67a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e67e:	4680      	mov	r8, r0
 800e680:	460c      	mov	r4, r1
 800e682:	bf98      	it	ls
 800e684:	f04f 0b00 	movls.w	fp, #0
 800e688:	9201      	str	r2, [sp, #4]
 800e68a:	4616      	mov	r6, r2
 800e68c:	46aa      	mov	sl, r5
 800e68e:	46a9      	mov	r9, r5
 800e690:	9502      	str	r5, [sp, #8]
 800e692:	68a2      	ldr	r2, [r4, #8]
 800e694:	b152      	cbz	r2, 800e6ac <_scanf_float+0x64>
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b4e      	cmp	r3, #78	@ 0x4e
 800e69c:	d864      	bhi.n	800e768 <_scanf_float+0x120>
 800e69e:	2b40      	cmp	r3, #64	@ 0x40
 800e6a0:	d83c      	bhi.n	800e71c <_scanf_float+0xd4>
 800e6a2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e6a6:	b2c8      	uxtb	r0, r1
 800e6a8:	280e      	cmp	r0, #14
 800e6aa:	d93a      	bls.n	800e722 <_scanf_float+0xda>
 800e6ac:	f1b9 0f00 	cmp.w	r9, #0
 800e6b0:	d003      	beq.n	800e6ba <_scanf_float+0x72>
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e6b8:	6023      	str	r3, [r4, #0]
 800e6ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6be:	f1ba 0f01 	cmp.w	sl, #1
 800e6c2:	f200 8117 	bhi.w	800e8f4 <_scanf_float+0x2ac>
 800e6c6:	9b01      	ldr	r3, [sp, #4]
 800e6c8:	429e      	cmp	r6, r3
 800e6ca:	f200 8108 	bhi.w	800e8de <_scanf_float+0x296>
 800e6ce:	2001      	movs	r0, #1
 800e6d0:	b007      	add	sp, #28
 800e6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e6da:	2a0d      	cmp	r2, #13
 800e6dc:	d8e6      	bhi.n	800e6ac <_scanf_float+0x64>
 800e6de:	a101      	add	r1, pc, #4	@ (adr r1, 800e6e4 <_scanf_float+0x9c>)
 800e6e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e6e4:	0800e82b 	.word	0x0800e82b
 800e6e8:	0800e6ad 	.word	0x0800e6ad
 800e6ec:	0800e6ad 	.word	0x0800e6ad
 800e6f0:	0800e6ad 	.word	0x0800e6ad
 800e6f4:	0800e88b 	.word	0x0800e88b
 800e6f8:	0800e863 	.word	0x0800e863
 800e6fc:	0800e6ad 	.word	0x0800e6ad
 800e700:	0800e6ad 	.word	0x0800e6ad
 800e704:	0800e839 	.word	0x0800e839
 800e708:	0800e6ad 	.word	0x0800e6ad
 800e70c:	0800e6ad 	.word	0x0800e6ad
 800e710:	0800e6ad 	.word	0x0800e6ad
 800e714:	0800e6ad 	.word	0x0800e6ad
 800e718:	0800e7f1 	.word	0x0800e7f1
 800e71c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e720:	e7db      	b.n	800e6da <_scanf_float+0x92>
 800e722:	290e      	cmp	r1, #14
 800e724:	d8c2      	bhi.n	800e6ac <_scanf_float+0x64>
 800e726:	a001      	add	r0, pc, #4	@ (adr r0, 800e72c <_scanf_float+0xe4>)
 800e728:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e72c:	0800e7e1 	.word	0x0800e7e1
 800e730:	0800e6ad 	.word	0x0800e6ad
 800e734:	0800e7e1 	.word	0x0800e7e1
 800e738:	0800e877 	.word	0x0800e877
 800e73c:	0800e6ad 	.word	0x0800e6ad
 800e740:	0800e789 	.word	0x0800e789
 800e744:	0800e7c7 	.word	0x0800e7c7
 800e748:	0800e7c7 	.word	0x0800e7c7
 800e74c:	0800e7c7 	.word	0x0800e7c7
 800e750:	0800e7c7 	.word	0x0800e7c7
 800e754:	0800e7c7 	.word	0x0800e7c7
 800e758:	0800e7c7 	.word	0x0800e7c7
 800e75c:	0800e7c7 	.word	0x0800e7c7
 800e760:	0800e7c7 	.word	0x0800e7c7
 800e764:	0800e7c7 	.word	0x0800e7c7
 800e768:	2b6e      	cmp	r3, #110	@ 0x6e
 800e76a:	d809      	bhi.n	800e780 <_scanf_float+0x138>
 800e76c:	2b60      	cmp	r3, #96	@ 0x60
 800e76e:	d8b2      	bhi.n	800e6d6 <_scanf_float+0x8e>
 800e770:	2b54      	cmp	r3, #84	@ 0x54
 800e772:	d07b      	beq.n	800e86c <_scanf_float+0x224>
 800e774:	2b59      	cmp	r3, #89	@ 0x59
 800e776:	d199      	bne.n	800e6ac <_scanf_float+0x64>
 800e778:	2d07      	cmp	r5, #7
 800e77a:	d197      	bne.n	800e6ac <_scanf_float+0x64>
 800e77c:	2508      	movs	r5, #8
 800e77e:	e02c      	b.n	800e7da <_scanf_float+0x192>
 800e780:	2b74      	cmp	r3, #116	@ 0x74
 800e782:	d073      	beq.n	800e86c <_scanf_float+0x224>
 800e784:	2b79      	cmp	r3, #121	@ 0x79
 800e786:	e7f6      	b.n	800e776 <_scanf_float+0x12e>
 800e788:	6821      	ldr	r1, [r4, #0]
 800e78a:	05c8      	lsls	r0, r1, #23
 800e78c:	d51b      	bpl.n	800e7c6 <_scanf_float+0x17e>
 800e78e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e792:	6021      	str	r1, [r4, #0]
 800e794:	f109 0901 	add.w	r9, r9, #1
 800e798:	f1bb 0f00 	cmp.w	fp, #0
 800e79c:	d003      	beq.n	800e7a6 <_scanf_float+0x15e>
 800e79e:	3201      	adds	r2, #1
 800e7a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e7a4:	60a2      	str	r2, [r4, #8]
 800e7a6:	68a3      	ldr	r3, [r4, #8]
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	60a3      	str	r3, [r4, #8]
 800e7ac:	6923      	ldr	r3, [r4, #16]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	6123      	str	r3, [r4, #16]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	607b      	str	r3, [r7, #4]
 800e7ba:	f340 8087 	ble.w	800e8cc <_scanf_float+0x284>
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	603b      	str	r3, [r7, #0]
 800e7c4:	e765      	b.n	800e692 <_scanf_float+0x4a>
 800e7c6:	eb1a 0105 	adds.w	r1, sl, r5
 800e7ca:	f47f af6f 	bne.w	800e6ac <_scanf_float+0x64>
 800e7ce:	6822      	ldr	r2, [r4, #0]
 800e7d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e7d4:	6022      	str	r2, [r4, #0]
 800e7d6:	460d      	mov	r5, r1
 800e7d8:	468a      	mov	sl, r1
 800e7da:	f806 3b01 	strb.w	r3, [r6], #1
 800e7de:	e7e2      	b.n	800e7a6 <_scanf_float+0x15e>
 800e7e0:	6822      	ldr	r2, [r4, #0]
 800e7e2:	0610      	lsls	r0, r2, #24
 800e7e4:	f57f af62 	bpl.w	800e6ac <_scanf_float+0x64>
 800e7e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e7ec:	6022      	str	r2, [r4, #0]
 800e7ee:	e7f4      	b.n	800e7da <_scanf_float+0x192>
 800e7f0:	f1ba 0f00 	cmp.w	sl, #0
 800e7f4:	d10e      	bne.n	800e814 <_scanf_float+0x1cc>
 800e7f6:	f1b9 0f00 	cmp.w	r9, #0
 800e7fa:	d10e      	bne.n	800e81a <_scanf_float+0x1d2>
 800e7fc:	6822      	ldr	r2, [r4, #0]
 800e7fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e802:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e806:	d108      	bne.n	800e81a <_scanf_float+0x1d2>
 800e808:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e80c:	6022      	str	r2, [r4, #0]
 800e80e:	f04f 0a01 	mov.w	sl, #1
 800e812:	e7e2      	b.n	800e7da <_scanf_float+0x192>
 800e814:	f1ba 0f02 	cmp.w	sl, #2
 800e818:	d055      	beq.n	800e8c6 <_scanf_float+0x27e>
 800e81a:	2d01      	cmp	r5, #1
 800e81c:	d002      	beq.n	800e824 <_scanf_float+0x1dc>
 800e81e:	2d04      	cmp	r5, #4
 800e820:	f47f af44 	bne.w	800e6ac <_scanf_float+0x64>
 800e824:	3501      	adds	r5, #1
 800e826:	b2ed      	uxtb	r5, r5
 800e828:	e7d7      	b.n	800e7da <_scanf_float+0x192>
 800e82a:	f1ba 0f01 	cmp.w	sl, #1
 800e82e:	f47f af3d 	bne.w	800e6ac <_scanf_float+0x64>
 800e832:	f04f 0a02 	mov.w	sl, #2
 800e836:	e7d0      	b.n	800e7da <_scanf_float+0x192>
 800e838:	b97d      	cbnz	r5, 800e85a <_scanf_float+0x212>
 800e83a:	f1b9 0f00 	cmp.w	r9, #0
 800e83e:	f47f af38 	bne.w	800e6b2 <_scanf_float+0x6a>
 800e842:	6822      	ldr	r2, [r4, #0]
 800e844:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e848:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e84c:	f040 8101 	bne.w	800ea52 <_scanf_float+0x40a>
 800e850:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e854:	6022      	str	r2, [r4, #0]
 800e856:	2501      	movs	r5, #1
 800e858:	e7bf      	b.n	800e7da <_scanf_float+0x192>
 800e85a:	2d03      	cmp	r5, #3
 800e85c:	d0e2      	beq.n	800e824 <_scanf_float+0x1dc>
 800e85e:	2d05      	cmp	r5, #5
 800e860:	e7de      	b.n	800e820 <_scanf_float+0x1d8>
 800e862:	2d02      	cmp	r5, #2
 800e864:	f47f af22 	bne.w	800e6ac <_scanf_float+0x64>
 800e868:	2503      	movs	r5, #3
 800e86a:	e7b6      	b.n	800e7da <_scanf_float+0x192>
 800e86c:	2d06      	cmp	r5, #6
 800e86e:	f47f af1d 	bne.w	800e6ac <_scanf_float+0x64>
 800e872:	2507      	movs	r5, #7
 800e874:	e7b1      	b.n	800e7da <_scanf_float+0x192>
 800e876:	6822      	ldr	r2, [r4, #0]
 800e878:	0591      	lsls	r1, r2, #22
 800e87a:	f57f af17 	bpl.w	800e6ac <_scanf_float+0x64>
 800e87e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e882:	6022      	str	r2, [r4, #0]
 800e884:	f8cd 9008 	str.w	r9, [sp, #8]
 800e888:	e7a7      	b.n	800e7da <_scanf_float+0x192>
 800e88a:	6822      	ldr	r2, [r4, #0]
 800e88c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e890:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e894:	d006      	beq.n	800e8a4 <_scanf_float+0x25c>
 800e896:	0550      	lsls	r0, r2, #21
 800e898:	f57f af08 	bpl.w	800e6ac <_scanf_float+0x64>
 800e89c:	f1b9 0f00 	cmp.w	r9, #0
 800e8a0:	f000 80d7 	beq.w	800ea52 <_scanf_float+0x40a>
 800e8a4:	0591      	lsls	r1, r2, #22
 800e8a6:	bf58      	it	pl
 800e8a8:	9902      	ldrpl	r1, [sp, #8]
 800e8aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e8ae:	bf58      	it	pl
 800e8b0:	eba9 0101 	subpl.w	r1, r9, r1
 800e8b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e8b8:	bf58      	it	pl
 800e8ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e8be:	6022      	str	r2, [r4, #0]
 800e8c0:	f04f 0900 	mov.w	r9, #0
 800e8c4:	e789      	b.n	800e7da <_scanf_float+0x192>
 800e8c6:	f04f 0a03 	mov.w	sl, #3
 800e8ca:	e786      	b.n	800e7da <_scanf_float+0x192>
 800e8cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e8d0:	4639      	mov	r1, r7
 800e8d2:	4640      	mov	r0, r8
 800e8d4:	4798      	blx	r3
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	f43f aedb 	beq.w	800e692 <_scanf_float+0x4a>
 800e8dc:	e6e6      	b.n	800e6ac <_scanf_float+0x64>
 800e8de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e8e6:	463a      	mov	r2, r7
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4798      	blx	r3
 800e8ec:	6923      	ldr	r3, [r4, #16]
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	6123      	str	r3, [r4, #16]
 800e8f2:	e6e8      	b.n	800e6c6 <_scanf_float+0x7e>
 800e8f4:	1e6b      	subs	r3, r5, #1
 800e8f6:	2b06      	cmp	r3, #6
 800e8f8:	d824      	bhi.n	800e944 <_scanf_float+0x2fc>
 800e8fa:	2d02      	cmp	r5, #2
 800e8fc:	d836      	bhi.n	800e96c <_scanf_float+0x324>
 800e8fe:	9b01      	ldr	r3, [sp, #4]
 800e900:	429e      	cmp	r6, r3
 800e902:	f67f aee4 	bls.w	800e6ce <_scanf_float+0x86>
 800e906:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e90a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e90e:	463a      	mov	r2, r7
 800e910:	4640      	mov	r0, r8
 800e912:	4798      	blx	r3
 800e914:	6923      	ldr	r3, [r4, #16]
 800e916:	3b01      	subs	r3, #1
 800e918:	6123      	str	r3, [r4, #16]
 800e91a:	e7f0      	b.n	800e8fe <_scanf_float+0x2b6>
 800e91c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e920:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e924:	463a      	mov	r2, r7
 800e926:	4640      	mov	r0, r8
 800e928:	4798      	blx	r3
 800e92a:	6923      	ldr	r3, [r4, #16]
 800e92c:	3b01      	subs	r3, #1
 800e92e:	6123      	str	r3, [r4, #16]
 800e930:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e934:	fa5f fa8a 	uxtb.w	sl, sl
 800e938:	f1ba 0f02 	cmp.w	sl, #2
 800e93c:	d1ee      	bne.n	800e91c <_scanf_float+0x2d4>
 800e93e:	3d03      	subs	r5, #3
 800e940:	b2ed      	uxtb	r5, r5
 800e942:	1b76      	subs	r6, r6, r5
 800e944:	6823      	ldr	r3, [r4, #0]
 800e946:	05da      	lsls	r2, r3, #23
 800e948:	d530      	bpl.n	800e9ac <_scanf_float+0x364>
 800e94a:	055b      	lsls	r3, r3, #21
 800e94c:	d511      	bpl.n	800e972 <_scanf_float+0x32a>
 800e94e:	9b01      	ldr	r3, [sp, #4]
 800e950:	429e      	cmp	r6, r3
 800e952:	f67f aebc 	bls.w	800e6ce <_scanf_float+0x86>
 800e956:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e95a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e95e:	463a      	mov	r2, r7
 800e960:	4640      	mov	r0, r8
 800e962:	4798      	blx	r3
 800e964:	6923      	ldr	r3, [r4, #16]
 800e966:	3b01      	subs	r3, #1
 800e968:	6123      	str	r3, [r4, #16]
 800e96a:	e7f0      	b.n	800e94e <_scanf_float+0x306>
 800e96c:	46aa      	mov	sl, r5
 800e96e:	46b3      	mov	fp, r6
 800e970:	e7de      	b.n	800e930 <_scanf_float+0x2e8>
 800e972:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e976:	6923      	ldr	r3, [r4, #16]
 800e978:	2965      	cmp	r1, #101	@ 0x65
 800e97a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e97e:	f106 35ff 	add.w	r5, r6, #4294967295
 800e982:	6123      	str	r3, [r4, #16]
 800e984:	d00c      	beq.n	800e9a0 <_scanf_float+0x358>
 800e986:	2945      	cmp	r1, #69	@ 0x45
 800e988:	d00a      	beq.n	800e9a0 <_scanf_float+0x358>
 800e98a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e98e:	463a      	mov	r2, r7
 800e990:	4640      	mov	r0, r8
 800e992:	4798      	blx	r3
 800e994:	6923      	ldr	r3, [r4, #16]
 800e996:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e99a:	3b01      	subs	r3, #1
 800e99c:	1eb5      	subs	r5, r6, #2
 800e99e:	6123      	str	r3, [r4, #16]
 800e9a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e9a4:	463a      	mov	r2, r7
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	4798      	blx	r3
 800e9aa:	462e      	mov	r6, r5
 800e9ac:	6822      	ldr	r2, [r4, #0]
 800e9ae:	f012 0210 	ands.w	r2, r2, #16
 800e9b2:	d001      	beq.n	800e9b8 <_scanf_float+0x370>
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	e68b      	b.n	800e6d0 <_scanf_float+0x88>
 800e9b8:	7032      	strb	r2, [r6, #0]
 800e9ba:	6823      	ldr	r3, [r4, #0]
 800e9bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e9c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e9c4:	d11a      	bne.n	800e9fc <_scanf_float+0x3b4>
 800e9c6:	9b02      	ldr	r3, [sp, #8]
 800e9c8:	454b      	cmp	r3, r9
 800e9ca:	eba3 0209 	sub.w	r2, r3, r9
 800e9ce:	d121      	bne.n	800ea14 <_scanf_float+0x3cc>
 800e9d0:	9901      	ldr	r1, [sp, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	4640      	mov	r0, r8
 800e9d6:	f002 fb41 	bl	801105c <_strtod_r>
 800e9da:	9b03      	ldr	r3, [sp, #12]
 800e9dc:	6821      	ldr	r1, [r4, #0]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f011 0f02 	tst.w	r1, #2
 800e9e4:	f103 0204 	add.w	r2, r3, #4
 800e9e8:	d01f      	beq.n	800ea2a <_scanf_float+0x3e2>
 800e9ea:	9903      	ldr	r1, [sp, #12]
 800e9ec:	600a      	str	r2, [r1, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	ed83 0b00 	vstr	d0, [r3]
 800e9f4:	68e3      	ldr	r3, [r4, #12]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	60e3      	str	r3, [r4, #12]
 800e9fa:	e7db      	b.n	800e9b4 <_scanf_float+0x36c>
 800e9fc:	9b04      	ldr	r3, [sp, #16]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d0e6      	beq.n	800e9d0 <_scanf_float+0x388>
 800ea02:	9905      	ldr	r1, [sp, #20]
 800ea04:	230a      	movs	r3, #10
 800ea06:	3101      	adds	r1, #1
 800ea08:	4640      	mov	r0, r8
 800ea0a:	f002 fba7 	bl	801115c <_strtol_r>
 800ea0e:	9b04      	ldr	r3, [sp, #16]
 800ea10:	9e05      	ldr	r6, [sp, #20]
 800ea12:	1ac2      	subs	r2, r0, r3
 800ea14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ea18:	429e      	cmp	r6, r3
 800ea1a:	bf28      	it	cs
 800ea1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ea20:	490d      	ldr	r1, [pc, #52]	@ (800ea58 <_scanf_float+0x410>)
 800ea22:	4630      	mov	r0, r6
 800ea24:	f000 f8f0 	bl	800ec08 <siprintf>
 800ea28:	e7d2      	b.n	800e9d0 <_scanf_float+0x388>
 800ea2a:	f011 0f04 	tst.w	r1, #4
 800ea2e:	9903      	ldr	r1, [sp, #12]
 800ea30:	600a      	str	r2, [r1, #0]
 800ea32:	d1dc      	bne.n	800e9ee <_scanf_float+0x3a6>
 800ea34:	eeb4 0b40 	vcmp.f64	d0, d0
 800ea38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea3c:	681d      	ldr	r5, [r3, #0]
 800ea3e:	d705      	bvc.n	800ea4c <_scanf_float+0x404>
 800ea40:	4806      	ldr	r0, [pc, #24]	@ (800ea5c <_scanf_float+0x414>)
 800ea42:	f000 f9c5 	bl	800edd0 <nanf>
 800ea46:	ed85 0a00 	vstr	s0, [r5]
 800ea4a:	e7d3      	b.n	800e9f4 <_scanf_float+0x3ac>
 800ea4c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ea50:	e7f9      	b.n	800ea46 <_scanf_float+0x3fe>
 800ea52:	f04f 0900 	mov.w	r9, #0
 800ea56:	e630      	b.n	800e6ba <_scanf_float+0x72>
 800ea58:	080123d8 	.word	0x080123d8
 800ea5c:	0801276d 	.word	0x0801276d

0800ea60 <std>:
 800ea60:	2300      	movs	r3, #0
 800ea62:	b510      	push	{r4, lr}
 800ea64:	4604      	mov	r4, r0
 800ea66:	e9c0 3300 	strd	r3, r3, [r0]
 800ea6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea6e:	6083      	str	r3, [r0, #8]
 800ea70:	8181      	strh	r1, [r0, #12]
 800ea72:	6643      	str	r3, [r0, #100]	@ 0x64
 800ea74:	81c2      	strh	r2, [r0, #14]
 800ea76:	6183      	str	r3, [r0, #24]
 800ea78:	4619      	mov	r1, r3
 800ea7a:	2208      	movs	r2, #8
 800ea7c:	305c      	adds	r0, #92	@ 0x5c
 800ea7e:	f000 f926 	bl	800ecce <memset>
 800ea82:	4b0d      	ldr	r3, [pc, #52]	@ (800eab8 <std+0x58>)
 800ea84:	6263      	str	r3, [r4, #36]	@ 0x24
 800ea86:	4b0d      	ldr	r3, [pc, #52]	@ (800eabc <std+0x5c>)
 800ea88:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ea8a:	4b0d      	ldr	r3, [pc, #52]	@ (800eac0 <std+0x60>)
 800ea8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ea8e:	4b0d      	ldr	r3, [pc, #52]	@ (800eac4 <std+0x64>)
 800ea90:	6323      	str	r3, [r4, #48]	@ 0x30
 800ea92:	4b0d      	ldr	r3, [pc, #52]	@ (800eac8 <std+0x68>)
 800ea94:	6224      	str	r4, [r4, #32]
 800ea96:	429c      	cmp	r4, r3
 800ea98:	d006      	beq.n	800eaa8 <std+0x48>
 800ea9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ea9e:	4294      	cmp	r4, r2
 800eaa0:	d002      	beq.n	800eaa8 <std+0x48>
 800eaa2:	33d0      	adds	r3, #208	@ 0xd0
 800eaa4:	429c      	cmp	r4, r3
 800eaa6:	d105      	bne.n	800eab4 <std+0x54>
 800eaa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eaac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eab0:	f000 b98a 	b.w	800edc8 <__retarget_lock_init_recursive>
 800eab4:	bd10      	pop	{r4, pc}
 800eab6:	bf00      	nop
 800eab8:	0800ec49 	.word	0x0800ec49
 800eabc:	0800ec6b 	.word	0x0800ec6b
 800eac0:	0800eca3 	.word	0x0800eca3
 800eac4:	0800ecc7 	.word	0x0800ecc7
 800eac8:	24000bc4 	.word	0x24000bc4

0800eacc <stdio_exit_handler>:
 800eacc:	4a02      	ldr	r2, [pc, #8]	@ (800ead8 <stdio_exit_handler+0xc>)
 800eace:	4903      	ldr	r1, [pc, #12]	@ (800eadc <stdio_exit_handler+0x10>)
 800ead0:	4803      	ldr	r0, [pc, #12]	@ (800eae0 <stdio_exit_handler+0x14>)
 800ead2:	f000 b869 	b.w	800eba8 <_fwalk_sglue>
 800ead6:	bf00      	nop
 800ead8:	24000010 	.word	0x24000010
 800eadc:	0801179d 	.word	0x0801179d
 800eae0:	24000020 	.word	0x24000020

0800eae4 <cleanup_stdio>:
 800eae4:	6841      	ldr	r1, [r0, #4]
 800eae6:	4b0c      	ldr	r3, [pc, #48]	@ (800eb18 <cleanup_stdio+0x34>)
 800eae8:	4299      	cmp	r1, r3
 800eaea:	b510      	push	{r4, lr}
 800eaec:	4604      	mov	r4, r0
 800eaee:	d001      	beq.n	800eaf4 <cleanup_stdio+0x10>
 800eaf0:	f002 fe54 	bl	801179c <_fflush_r>
 800eaf4:	68a1      	ldr	r1, [r4, #8]
 800eaf6:	4b09      	ldr	r3, [pc, #36]	@ (800eb1c <cleanup_stdio+0x38>)
 800eaf8:	4299      	cmp	r1, r3
 800eafa:	d002      	beq.n	800eb02 <cleanup_stdio+0x1e>
 800eafc:	4620      	mov	r0, r4
 800eafe:	f002 fe4d 	bl	801179c <_fflush_r>
 800eb02:	68e1      	ldr	r1, [r4, #12]
 800eb04:	4b06      	ldr	r3, [pc, #24]	@ (800eb20 <cleanup_stdio+0x3c>)
 800eb06:	4299      	cmp	r1, r3
 800eb08:	d004      	beq.n	800eb14 <cleanup_stdio+0x30>
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb10:	f002 be44 	b.w	801179c <_fflush_r>
 800eb14:	bd10      	pop	{r4, pc}
 800eb16:	bf00      	nop
 800eb18:	24000bc4 	.word	0x24000bc4
 800eb1c:	24000c2c 	.word	0x24000c2c
 800eb20:	24000c94 	.word	0x24000c94

0800eb24 <global_stdio_init.part.0>:
 800eb24:	b510      	push	{r4, lr}
 800eb26:	4b0b      	ldr	r3, [pc, #44]	@ (800eb54 <global_stdio_init.part.0+0x30>)
 800eb28:	4c0b      	ldr	r4, [pc, #44]	@ (800eb58 <global_stdio_init.part.0+0x34>)
 800eb2a:	4a0c      	ldr	r2, [pc, #48]	@ (800eb5c <global_stdio_init.part.0+0x38>)
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	4620      	mov	r0, r4
 800eb30:	2200      	movs	r2, #0
 800eb32:	2104      	movs	r1, #4
 800eb34:	f7ff ff94 	bl	800ea60 <std>
 800eb38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	2109      	movs	r1, #9
 800eb40:	f7ff ff8e 	bl	800ea60 <std>
 800eb44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eb48:	2202      	movs	r2, #2
 800eb4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb4e:	2112      	movs	r1, #18
 800eb50:	f7ff bf86 	b.w	800ea60 <std>
 800eb54:	24000cfc 	.word	0x24000cfc
 800eb58:	24000bc4 	.word	0x24000bc4
 800eb5c:	0800eacd 	.word	0x0800eacd

0800eb60 <__sfp_lock_acquire>:
 800eb60:	4801      	ldr	r0, [pc, #4]	@ (800eb68 <__sfp_lock_acquire+0x8>)
 800eb62:	f000 b932 	b.w	800edca <__retarget_lock_acquire_recursive>
 800eb66:	bf00      	nop
 800eb68:	24000d05 	.word	0x24000d05

0800eb6c <__sfp_lock_release>:
 800eb6c:	4801      	ldr	r0, [pc, #4]	@ (800eb74 <__sfp_lock_release+0x8>)
 800eb6e:	f000 b92d 	b.w	800edcc <__retarget_lock_release_recursive>
 800eb72:	bf00      	nop
 800eb74:	24000d05 	.word	0x24000d05

0800eb78 <__sinit>:
 800eb78:	b510      	push	{r4, lr}
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	f7ff fff0 	bl	800eb60 <__sfp_lock_acquire>
 800eb80:	6a23      	ldr	r3, [r4, #32]
 800eb82:	b11b      	cbz	r3, 800eb8c <__sinit+0x14>
 800eb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb88:	f7ff bff0 	b.w	800eb6c <__sfp_lock_release>
 800eb8c:	4b04      	ldr	r3, [pc, #16]	@ (800eba0 <__sinit+0x28>)
 800eb8e:	6223      	str	r3, [r4, #32]
 800eb90:	4b04      	ldr	r3, [pc, #16]	@ (800eba4 <__sinit+0x2c>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1f5      	bne.n	800eb84 <__sinit+0xc>
 800eb98:	f7ff ffc4 	bl	800eb24 <global_stdio_init.part.0>
 800eb9c:	e7f2      	b.n	800eb84 <__sinit+0xc>
 800eb9e:	bf00      	nop
 800eba0:	0800eae5 	.word	0x0800eae5
 800eba4:	24000cfc 	.word	0x24000cfc

0800eba8 <_fwalk_sglue>:
 800eba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebac:	4607      	mov	r7, r0
 800ebae:	4688      	mov	r8, r1
 800ebb0:	4614      	mov	r4, r2
 800ebb2:	2600      	movs	r6, #0
 800ebb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ebb8:	f1b9 0901 	subs.w	r9, r9, #1
 800ebbc:	d505      	bpl.n	800ebca <_fwalk_sglue+0x22>
 800ebbe:	6824      	ldr	r4, [r4, #0]
 800ebc0:	2c00      	cmp	r4, #0
 800ebc2:	d1f7      	bne.n	800ebb4 <_fwalk_sglue+0xc>
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebca:	89ab      	ldrh	r3, [r5, #12]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d907      	bls.n	800ebe0 <_fwalk_sglue+0x38>
 800ebd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	d003      	beq.n	800ebe0 <_fwalk_sglue+0x38>
 800ebd8:	4629      	mov	r1, r5
 800ebda:	4638      	mov	r0, r7
 800ebdc:	47c0      	blx	r8
 800ebde:	4306      	orrs	r6, r0
 800ebe0:	3568      	adds	r5, #104	@ 0x68
 800ebe2:	e7e9      	b.n	800ebb8 <_fwalk_sglue+0x10>

0800ebe4 <iprintf>:
 800ebe4:	b40f      	push	{r0, r1, r2, r3}
 800ebe6:	b507      	push	{r0, r1, r2, lr}
 800ebe8:	4906      	ldr	r1, [pc, #24]	@ (800ec04 <iprintf+0x20>)
 800ebea:	ab04      	add	r3, sp, #16
 800ebec:	6808      	ldr	r0, [r1, #0]
 800ebee:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebf2:	6881      	ldr	r1, [r0, #8]
 800ebf4:	9301      	str	r3, [sp, #4]
 800ebf6:	f002 fc35 	bl	8011464 <_vfiprintf_r>
 800ebfa:	b003      	add	sp, #12
 800ebfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec00:	b004      	add	sp, #16
 800ec02:	4770      	bx	lr
 800ec04:	2400001c 	.word	0x2400001c

0800ec08 <siprintf>:
 800ec08:	b40e      	push	{r1, r2, r3}
 800ec0a:	b500      	push	{lr}
 800ec0c:	b09c      	sub	sp, #112	@ 0x70
 800ec0e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ec10:	9002      	str	r0, [sp, #8]
 800ec12:	9006      	str	r0, [sp, #24]
 800ec14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ec18:	4809      	ldr	r0, [pc, #36]	@ (800ec40 <siprintf+0x38>)
 800ec1a:	9107      	str	r1, [sp, #28]
 800ec1c:	9104      	str	r1, [sp, #16]
 800ec1e:	4909      	ldr	r1, [pc, #36]	@ (800ec44 <siprintf+0x3c>)
 800ec20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec24:	9105      	str	r1, [sp, #20]
 800ec26:	6800      	ldr	r0, [r0, #0]
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	a902      	add	r1, sp, #8
 800ec2c:	f002 faf4 	bl	8011218 <_svfiprintf_r>
 800ec30:	9b02      	ldr	r3, [sp, #8]
 800ec32:	2200      	movs	r2, #0
 800ec34:	701a      	strb	r2, [r3, #0]
 800ec36:	b01c      	add	sp, #112	@ 0x70
 800ec38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec3c:	b003      	add	sp, #12
 800ec3e:	4770      	bx	lr
 800ec40:	2400001c 	.word	0x2400001c
 800ec44:	ffff0208 	.word	0xffff0208

0800ec48 <__sread>:
 800ec48:	b510      	push	{r4, lr}
 800ec4a:	460c      	mov	r4, r1
 800ec4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec50:	f000 f86c 	bl	800ed2c <_read_r>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	bfab      	itete	ge
 800ec58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ec5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ec5c:	181b      	addge	r3, r3, r0
 800ec5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ec62:	bfac      	ite	ge
 800ec64:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ec66:	81a3      	strhlt	r3, [r4, #12]
 800ec68:	bd10      	pop	{r4, pc}

0800ec6a <__swrite>:
 800ec6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec6e:	461f      	mov	r7, r3
 800ec70:	898b      	ldrh	r3, [r1, #12]
 800ec72:	05db      	lsls	r3, r3, #23
 800ec74:	4605      	mov	r5, r0
 800ec76:	460c      	mov	r4, r1
 800ec78:	4616      	mov	r6, r2
 800ec7a:	d505      	bpl.n	800ec88 <__swrite+0x1e>
 800ec7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec80:	2302      	movs	r3, #2
 800ec82:	2200      	movs	r2, #0
 800ec84:	f000 f840 	bl	800ed08 <_lseek_r>
 800ec88:	89a3      	ldrh	r3, [r4, #12]
 800ec8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec92:	81a3      	strh	r3, [r4, #12]
 800ec94:	4632      	mov	r2, r6
 800ec96:	463b      	mov	r3, r7
 800ec98:	4628      	mov	r0, r5
 800ec9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec9e:	f000 b857 	b.w	800ed50 <_write_r>

0800eca2 <__sseek>:
 800eca2:	b510      	push	{r4, lr}
 800eca4:	460c      	mov	r4, r1
 800eca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecaa:	f000 f82d 	bl	800ed08 <_lseek_r>
 800ecae:	1c43      	adds	r3, r0, #1
 800ecb0:	89a3      	ldrh	r3, [r4, #12]
 800ecb2:	bf15      	itete	ne
 800ecb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ecb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ecba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ecbe:	81a3      	strheq	r3, [r4, #12]
 800ecc0:	bf18      	it	ne
 800ecc2:	81a3      	strhne	r3, [r4, #12]
 800ecc4:	bd10      	pop	{r4, pc}

0800ecc6 <__sclose>:
 800ecc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecca:	f000 b80d 	b.w	800ece8 <_close_r>

0800ecce <memset>:
 800ecce:	4402      	add	r2, r0
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d100      	bne.n	800ecd8 <memset+0xa>
 800ecd6:	4770      	bx	lr
 800ecd8:	f803 1b01 	strb.w	r1, [r3], #1
 800ecdc:	e7f9      	b.n	800ecd2 <memset+0x4>
	...

0800ece0 <_localeconv_r>:
 800ece0:	4800      	ldr	r0, [pc, #0]	@ (800ece4 <_localeconv_r+0x4>)
 800ece2:	4770      	bx	lr
 800ece4:	2400015c 	.word	0x2400015c

0800ece8 <_close_r>:
 800ece8:	b538      	push	{r3, r4, r5, lr}
 800ecea:	4d06      	ldr	r5, [pc, #24]	@ (800ed04 <_close_r+0x1c>)
 800ecec:	2300      	movs	r3, #0
 800ecee:	4604      	mov	r4, r0
 800ecf0:	4608      	mov	r0, r1
 800ecf2:	602b      	str	r3, [r5, #0]
 800ecf4:	f7f4 fae7 	bl	80032c6 <_close>
 800ecf8:	1c43      	adds	r3, r0, #1
 800ecfa:	d102      	bne.n	800ed02 <_close_r+0x1a>
 800ecfc:	682b      	ldr	r3, [r5, #0]
 800ecfe:	b103      	cbz	r3, 800ed02 <_close_r+0x1a>
 800ed00:	6023      	str	r3, [r4, #0]
 800ed02:	bd38      	pop	{r3, r4, r5, pc}
 800ed04:	24000d00 	.word	0x24000d00

0800ed08 <_lseek_r>:
 800ed08:	b538      	push	{r3, r4, r5, lr}
 800ed0a:	4d07      	ldr	r5, [pc, #28]	@ (800ed28 <_lseek_r+0x20>)
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	4608      	mov	r0, r1
 800ed10:	4611      	mov	r1, r2
 800ed12:	2200      	movs	r2, #0
 800ed14:	602a      	str	r2, [r5, #0]
 800ed16:	461a      	mov	r2, r3
 800ed18:	f7f4 fafc 	bl	8003314 <_lseek>
 800ed1c:	1c43      	adds	r3, r0, #1
 800ed1e:	d102      	bne.n	800ed26 <_lseek_r+0x1e>
 800ed20:	682b      	ldr	r3, [r5, #0]
 800ed22:	b103      	cbz	r3, 800ed26 <_lseek_r+0x1e>
 800ed24:	6023      	str	r3, [r4, #0]
 800ed26:	bd38      	pop	{r3, r4, r5, pc}
 800ed28:	24000d00 	.word	0x24000d00

0800ed2c <_read_r>:
 800ed2c:	b538      	push	{r3, r4, r5, lr}
 800ed2e:	4d07      	ldr	r5, [pc, #28]	@ (800ed4c <_read_r+0x20>)
 800ed30:	4604      	mov	r4, r0
 800ed32:	4608      	mov	r0, r1
 800ed34:	4611      	mov	r1, r2
 800ed36:	2200      	movs	r2, #0
 800ed38:	602a      	str	r2, [r5, #0]
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	f7f4 faa6 	bl	800328c <_read>
 800ed40:	1c43      	adds	r3, r0, #1
 800ed42:	d102      	bne.n	800ed4a <_read_r+0x1e>
 800ed44:	682b      	ldr	r3, [r5, #0]
 800ed46:	b103      	cbz	r3, 800ed4a <_read_r+0x1e>
 800ed48:	6023      	str	r3, [r4, #0]
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
 800ed4c:	24000d00 	.word	0x24000d00

0800ed50 <_write_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4d07      	ldr	r5, [pc, #28]	@ (800ed70 <_write_r+0x20>)
 800ed54:	4604      	mov	r4, r0
 800ed56:	4608      	mov	r0, r1
 800ed58:	4611      	mov	r1, r2
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	602a      	str	r2, [r5, #0]
 800ed5e:	461a      	mov	r2, r3
 800ed60:	f7f1 fec1 	bl	8000ae6 <_write>
 800ed64:	1c43      	adds	r3, r0, #1
 800ed66:	d102      	bne.n	800ed6e <_write_r+0x1e>
 800ed68:	682b      	ldr	r3, [r5, #0]
 800ed6a:	b103      	cbz	r3, 800ed6e <_write_r+0x1e>
 800ed6c:	6023      	str	r3, [r4, #0]
 800ed6e:	bd38      	pop	{r3, r4, r5, pc}
 800ed70:	24000d00 	.word	0x24000d00

0800ed74 <__errno>:
 800ed74:	4b01      	ldr	r3, [pc, #4]	@ (800ed7c <__errno+0x8>)
 800ed76:	6818      	ldr	r0, [r3, #0]
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop
 800ed7c:	2400001c 	.word	0x2400001c

0800ed80 <__libc_init_array>:
 800ed80:	b570      	push	{r4, r5, r6, lr}
 800ed82:	4d0d      	ldr	r5, [pc, #52]	@ (800edb8 <__libc_init_array+0x38>)
 800ed84:	4c0d      	ldr	r4, [pc, #52]	@ (800edbc <__libc_init_array+0x3c>)
 800ed86:	1b64      	subs	r4, r4, r5
 800ed88:	10a4      	asrs	r4, r4, #2
 800ed8a:	2600      	movs	r6, #0
 800ed8c:	42a6      	cmp	r6, r4
 800ed8e:	d109      	bne.n	800eda4 <__libc_init_array+0x24>
 800ed90:	4d0b      	ldr	r5, [pc, #44]	@ (800edc0 <__libc_init_array+0x40>)
 800ed92:	4c0c      	ldr	r4, [pc, #48]	@ (800edc4 <__libc_init_array+0x44>)
 800ed94:	f003 fab2 	bl	80122fc <_init>
 800ed98:	1b64      	subs	r4, r4, r5
 800ed9a:	10a4      	asrs	r4, r4, #2
 800ed9c:	2600      	movs	r6, #0
 800ed9e:	42a6      	cmp	r6, r4
 800eda0:	d105      	bne.n	800edae <__libc_init_array+0x2e>
 800eda2:	bd70      	pop	{r4, r5, r6, pc}
 800eda4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eda8:	4798      	blx	r3
 800edaa:	3601      	adds	r6, #1
 800edac:	e7ee      	b.n	800ed8c <__libc_init_array+0xc>
 800edae:	f855 3b04 	ldr.w	r3, [r5], #4
 800edb2:	4798      	blx	r3
 800edb4:	3601      	adds	r6, #1
 800edb6:	e7f2      	b.n	800ed9e <__libc_init_array+0x1e>
 800edb8:	080127d8 	.word	0x080127d8
 800edbc:	080127d8 	.word	0x080127d8
 800edc0:	080127d8 	.word	0x080127d8
 800edc4:	080127dc 	.word	0x080127dc

0800edc8 <__retarget_lock_init_recursive>:
 800edc8:	4770      	bx	lr

0800edca <__retarget_lock_acquire_recursive>:
 800edca:	4770      	bx	lr

0800edcc <__retarget_lock_release_recursive>:
 800edcc:	4770      	bx	lr
	...

0800edd0 <nanf>:
 800edd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800edd8 <nanf+0x8>
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop
 800edd8:	7fc00000 	.word	0x7fc00000

0800eddc <quorem>:
 800eddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	6903      	ldr	r3, [r0, #16]
 800ede2:	690c      	ldr	r4, [r1, #16]
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	4607      	mov	r7, r0
 800ede8:	db7e      	blt.n	800eee8 <quorem+0x10c>
 800edea:	3c01      	subs	r4, #1
 800edec:	f101 0814 	add.w	r8, r1, #20
 800edf0:	00a3      	lsls	r3, r4, #2
 800edf2:	f100 0514 	add.w	r5, r0, #20
 800edf6:	9300      	str	r3, [sp, #0]
 800edf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edfc:	9301      	str	r3, [sp, #4]
 800edfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee06:	3301      	adds	r3, #1
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee0e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee12:	d32e      	bcc.n	800ee72 <quorem+0x96>
 800ee14:	f04f 0a00 	mov.w	sl, #0
 800ee18:	46c4      	mov	ip, r8
 800ee1a:	46ae      	mov	lr, r5
 800ee1c:	46d3      	mov	fp, sl
 800ee1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee22:	b298      	uxth	r0, r3
 800ee24:	fb06 a000 	mla	r0, r6, r0, sl
 800ee28:	0c02      	lsrs	r2, r0, #16
 800ee2a:	0c1b      	lsrs	r3, r3, #16
 800ee2c:	fb06 2303 	mla	r3, r6, r3, r2
 800ee30:	f8de 2000 	ldr.w	r2, [lr]
 800ee34:	b280      	uxth	r0, r0
 800ee36:	b292      	uxth	r2, r2
 800ee38:	1a12      	subs	r2, r2, r0
 800ee3a:	445a      	add	r2, fp
 800ee3c:	f8de 0000 	ldr.w	r0, [lr]
 800ee40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ee4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ee4e:	b292      	uxth	r2, r2
 800ee50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ee54:	45e1      	cmp	r9, ip
 800ee56:	f84e 2b04 	str.w	r2, [lr], #4
 800ee5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ee5e:	d2de      	bcs.n	800ee1e <quorem+0x42>
 800ee60:	9b00      	ldr	r3, [sp, #0]
 800ee62:	58eb      	ldr	r3, [r5, r3]
 800ee64:	b92b      	cbnz	r3, 800ee72 <quorem+0x96>
 800ee66:	9b01      	ldr	r3, [sp, #4]
 800ee68:	3b04      	subs	r3, #4
 800ee6a:	429d      	cmp	r5, r3
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	d32f      	bcc.n	800eed0 <quorem+0xf4>
 800ee70:	613c      	str	r4, [r7, #16]
 800ee72:	4638      	mov	r0, r7
 800ee74:	f001 f956 	bl	8010124 <__mcmp>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	db25      	blt.n	800eec8 <quorem+0xec>
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	2000      	movs	r0, #0
 800ee80:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee84:	f8d1 c000 	ldr.w	ip, [r1]
 800ee88:	fa1f fe82 	uxth.w	lr, r2
 800ee8c:	fa1f f38c 	uxth.w	r3, ip
 800ee90:	eba3 030e 	sub.w	r3, r3, lr
 800ee94:	4403      	add	r3, r0
 800ee96:	0c12      	lsrs	r2, r2, #16
 800ee98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ee9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eea6:	45c1      	cmp	r9, r8
 800eea8:	f841 3b04 	str.w	r3, [r1], #4
 800eeac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eeb0:	d2e6      	bcs.n	800ee80 <quorem+0xa4>
 800eeb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eeb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eeba:	b922      	cbnz	r2, 800eec6 <quorem+0xea>
 800eebc:	3b04      	subs	r3, #4
 800eebe:	429d      	cmp	r5, r3
 800eec0:	461a      	mov	r2, r3
 800eec2:	d30b      	bcc.n	800eedc <quorem+0x100>
 800eec4:	613c      	str	r4, [r7, #16]
 800eec6:	3601      	adds	r6, #1
 800eec8:	4630      	mov	r0, r6
 800eeca:	b003      	add	sp, #12
 800eecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed0:	6812      	ldr	r2, [r2, #0]
 800eed2:	3b04      	subs	r3, #4
 800eed4:	2a00      	cmp	r2, #0
 800eed6:	d1cb      	bne.n	800ee70 <quorem+0x94>
 800eed8:	3c01      	subs	r4, #1
 800eeda:	e7c6      	b.n	800ee6a <quorem+0x8e>
 800eedc:	6812      	ldr	r2, [r2, #0]
 800eede:	3b04      	subs	r3, #4
 800eee0:	2a00      	cmp	r2, #0
 800eee2:	d1ef      	bne.n	800eec4 <quorem+0xe8>
 800eee4:	3c01      	subs	r4, #1
 800eee6:	e7ea      	b.n	800eebe <quorem+0xe2>
 800eee8:	2000      	movs	r0, #0
 800eeea:	e7ee      	b.n	800eeca <quorem+0xee>
 800eeec:	0000      	movs	r0, r0
	...

0800eef0 <_dtoa_r>:
 800eef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef4:	ed2d 8b02 	vpush	{d8}
 800eef8:	69c7      	ldr	r7, [r0, #28]
 800eefa:	b091      	sub	sp, #68	@ 0x44
 800eefc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ef00:	ec55 4b10 	vmov	r4, r5, d0
 800ef04:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ef06:	9107      	str	r1, [sp, #28]
 800ef08:	4681      	mov	r9, r0
 800ef0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef0c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef0e:	b97f      	cbnz	r7, 800ef30 <_dtoa_r+0x40>
 800ef10:	2010      	movs	r0, #16
 800ef12:	f000 fd8d 	bl	800fa30 <malloc>
 800ef16:	4602      	mov	r2, r0
 800ef18:	f8c9 001c 	str.w	r0, [r9, #28]
 800ef1c:	b920      	cbnz	r0, 800ef28 <_dtoa_r+0x38>
 800ef1e:	4ba0      	ldr	r3, [pc, #640]	@ (800f1a0 <_dtoa_r+0x2b0>)
 800ef20:	21ef      	movs	r1, #239	@ 0xef
 800ef22:	48a0      	ldr	r0, [pc, #640]	@ (800f1a4 <_dtoa_r+0x2b4>)
 800ef24:	f002 fd48 	bl	80119b8 <__assert_func>
 800ef28:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ef2c:	6007      	str	r7, [r0, #0]
 800ef2e:	60c7      	str	r7, [r0, #12]
 800ef30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ef34:	6819      	ldr	r1, [r3, #0]
 800ef36:	b159      	cbz	r1, 800ef50 <_dtoa_r+0x60>
 800ef38:	685a      	ldr	r2, [r3, #4]
 800ef3a:	604a      	str	r2, [r1, #4]
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	4093      	lsls	r3, r2
 800ef40:	608b      	str	r3, [r1, #8]
 800ef42:	4648      	mov	r0, r9
 800ef44:	f000 fe6a 	bl	800fc1c <_Bfree>
 800ef48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	601a      	str	r2, [r3, #0]
 800ef50:	1e2b      	subs	r3, r5, #0
 800ef52:	bfbb      	ittet	lt
 800ef54:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ef58:	9303      	strlt	r3, [sp, #12]
 800ef5a:	2300      	movge	r3, #0
 800ef5c:	2201      	movlt	r2, #1
 800ef5e:	bfac      	ite	ge
 800ef60:	6033      	strge	r3, [r6, #0]
 800ef62:	6032      	strlt	r2, [r6, #0]
 800ef64:	4b90      	ldr	r3, [pc, #576]	@ (800f1a8 <_dtoa_r+0x2b8>)
 800ef66:	9e03      	ldr	r6, [sp, #12]
 800ef68:	43b3      	bics	r3, r6
 800ef6a:	d110      	bne.n	800ef8e <_dtoa_r+0x9e>
 800ef6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef6e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ef78:	4323      	orrs	r3, r4
 800ef7a:	f000 84de 	beq.w	800f93a <_dtoa_r+0xa4a>
 800ef7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef80:	4f8a      	ldr	r7, [pc, #552]	@ (800f1ac <_dtoa_r+0x2bc>)
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f000 84e0 	beq.w	800f948 <_dtoa_r+0xa58>
 800ef88:	1cfb      	adds	r3, r7, #3
 800ef8a:	f000 bcdb 	b.w	800f944 <_dtoa_r+0xa54>
 800ef8e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ef92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ef96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9a:	d10a      	bne.n	800efb2 <_dtoa_r+0xc2>
 800ef9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef9e:	2301      	movs	r3, #1
 800efa0:	6013      	str	r3, [r2, #0]
 800efa2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800efa4:	b113      	cbz	r3, 800efac <_dtoa_r+0xbc>
 800efa6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800efa8:	4b81      	ldr	r3, [pc, #516]	@ (800f1b0 <_dtoa_r+0x2c0>)
 800efaa:	6013      	str	r3, [r2, #0]
 800efac:	4f81      	ldr	r7, [pc, #516]	@ (800f1b4 <_dtoa_r+0x2c4>)
 800efae:	f000 bccb 	b.w	800f948 <_dtoa_r+0xa58>
 800efb2:	aa0e      	add	r2, sp, #56	@ 0x38
 800efb4:	a90f      	add	r1, sp, #60	@ 0x3c
 800efb6:	4648      	mov	r0, r9
 800efb8:	eeb0 0b48 	vmov.f64	d0, d8
 800efbc:	f001 f9d2 	bl	8010364 <__d2b>
 800efc0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800efc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efc6:	9001      	str	r0, [sp, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d045      	beq.n	800f058 <_dtoa_r+0x168>
 800efcc:	eeb0 7b48 	vmov.f64	d7, d8
 800efd0:	ee18 1a90 	vmov	r1, s17
 800efd4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800efd8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800efdc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800efe0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800efe4:	2500      	movs	r5, #0
 800efe6:	ee07 1a90 	vmov	s15, r1
 800efea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800efee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f188 <_dtoa_r+0x298>
 800eff2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eff6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f190 <_dtoa_r+0x2a0>
 800effa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800effe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f198 <_dtoa_r+0x2a8>
 800f002:	ee07 3a90 	vmov	s15, r3
 800f006:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f00a:	eeb0 7b46 	vmov.f64	d7, d6
 800f00e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f012:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f016:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f01e:	ee16 8a90 	vmov	r8, s13
 800f022:	d508      	bpl.n	800f036 <_dtoa_r+0x146>
 800f024:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f028:	eeb4 6b47 	vcmp.f64	d6, d7
 800f02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f030:	bf18      	it	ne
 800f032:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f036:	f1b8 0f16 	cmp.w	r8, #22
 800f03a:	d82b      	bhi.n	800f094 <_dtoa_r+0x1a4>
 800f03c:	495e      	ldr	r1, [pc, #376]	@ (800f1b8 <_dtoa_r+0x2c8>)
 800f03e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f042:	ed91 7b00 	vldr	d7, [r1]
 800f046:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04e:	d501      	bpl.n	800f054 <_dtoa_r+0x164>
 800f050:	f108 38ff 	add.w	r8, r8, #4294967295
 800f054:	2100      	movs	r1, #0
 800f056:	e01e      	b.n	800f096 <_dtoa_r+0x1a6>
 800f058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f05a:	4413      	add	r3, r2
 800f05c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f060:	2920      	cmp	r1, #32
 800f062:	bfc1      	itttt	gt
 800f064:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f068:	408e      	lslgt	r6, r1
 800f06a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f06e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f072:	bfd6      	itet	le
 800f074:	f1c1 0120 	rsble	r1, r1, #32
 800f078:	4331      	orrgt	r1, r6
 800f07a:	fa04 f101 	lslle.w	r1, r4, r1
 800f07e:	ee07 1a90 	vmov	s15, r1
 800f082:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f086:	3b01      	subs	r3, #1
 800f088:	ee17 1a90 	vmov	r1, s15
 800f08c:	2501      	movs	r5, #1
 800f08e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f092:	e7a8      	b.n	800efe6 <_dtoa_r+0xf6>
 800f094:	2101      	movs	r1, #1
 800f096:	1ad2      	subs	r2, r2, r3
 800f098:	1e53      	subs	r3, r2, #1
 800f09a:	9306      	str	r3, [sp, #24]
 800f09c:	bf45      	ittet	mi
 800f09e:	f1c2 0301 	rsbmi	r3, r2, #1
 800f0a2:	9305      	strmi	r3, [sp, #20]
 800f0a4:	2300      	movpl	r3, #0
 800f0a6:	2300      	movmi	r3, #0
 800f0a8:	bf4c      	ite	mi
 800f0aa:	9306      	strmi	r3, [sp, #24]
 800f0ac:	9305      	strpl	r3, [sp, #20]
 800f0ae:	f1b8 0f00 	cmp.w	r8, #0
 800f0b2:	910c      	str	r1, [sp, #48]	@ 0x30
 800f0b4:	db18      	blt.n	800f0e8 <_dtoa_r+0x1f8>
 800f0b6:	9b06      	ldr	r3, [sp, #24]
 800f0b8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f0bc:	4443      	add	r3, r8
 800f0be:	9306      	str	r3, [sp, #24]
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	9a07      	ldr	r2, [sp, #28]
 800f0c4:	2a09      	cmp	r2, #9
 800f0c6:	d849      	bhi.n	800f15c <_dtoa_r+0x26c>
 800f0c8:	2a05      	cmp	r2, #5
 800f0ca:	bfc4      	itt	gt
 800f0cc:	3a04      	subgt	r2, #4
 800f0ce:	9207      	strgt	r2, [sp, #28]
 800f0d0:	9a07      	ldr	r2, [sp, #28]
 800f0d2:	f1a2 0202 	sub.w	r2, r2, #2
 800f0d6:	bfcc      	ite	gt
 800f0d8:	2400      	movgt	r4, #0
 800f0da:	2401      	movle	r4, #1
 800f0dc:	2a03      	cmp	r2, #3
 800f0de:	d848      	bhi.n	800f172 <_dtoa_r+0x282>
 800f0e0:	e8df f002 	tbb	[pc, r2]
 800f0e4:	3a2c2e0b 	.word	0x3a2c2e0b
 800f0e8:	9b05      	ldr	r3, [sp, #20]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	eba3 0308 	sub.w	r3, r3, r8
 800f0f0:	9305      	str	r3, [sp, #20]
 800f0f2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f0f4:	f1c8 0300 	rsb	r3, r8, #0
 800f0f8:	e7e3      	b.n	800f0c2 <_dtoa_r+0x1d2>
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	9208      	str	r2, [sp, #32]
 800f0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f100:	2a00      	cmp	r2, #0
 800f102:	dc39      	bgt.n	800f178 <_dtoa_r+0x288>
 800f104:	f04f 0b01 	mov.w	fp, #1
 800f108:	46da      	mov	sl, fp
 800f10a:	465a      	mov	r2, fp
 800f10c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f110:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f114:	2100      	movs	r1, #0
 800f116:	2004      	movs	r0, #4
 800f118:	f100 0614 	add.w	r6, r0, #20
 800f11c:	4296      	cmp	r6, r2
 800f11e:	d930      	bls.n	800f182 <_dtoa_r+0x292>
 800f120:	6079      	str	r1, [r7, #4]
 800f122:	4648      	mov	r0, r9
 800f124:	9304      	str	r3, [sp, #16]
 800f126:	f000 fd39 	bl	800fb9c <_Balloc>
 800f12a:	9b04      	ldr	r3, [sp, #16]
 800f12c:	4607      	mov	r7, r0
 800f12e:	2800      	cmp	r0, #0
 800f130:	d146      	bne.n	800f1c0 <_dtoa_r+0x2d0>
 800f132:	4b22      	ldr	r3, [pc, #136]	@ (800f1bc <_dtoa_r+0x2cc>)
 800f134:	4602      	mov	r2, r0
 800f136:	f240 11af 	movw	r1, #431	@ 0x1af
 800f13a:	e6f2      	b.n	800ef22 <_dtoa_r+0x32>
 800f13c:	2201      	movs	r2, #1
 800f13e:	e7dd      	b.n	800f0fc <_dtoa_r+0x20c>
 800f140:	2200      	movs	r2, #0
 800f142:	9208      	str	r2, [sp, #32]
 800f144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f146:	eb08 0b02 	add.w	fp, r8, r2
 800f14a:	f10b 0a01 	add.w	sl, fp, #1
 800f14e:	4652      	mov	r2, sl
 800f150:	2a01      	cmp	r2, #1
 800f152:	bfb8      	it	lt
 800f154:	2201      	movlt	r2, #1
 800f156:	e7db      	b.n	800f110 <_dtoa_r+0x220>
 800f158:	2201      	movs	r2, #1
 800f15a:	e7f2      	b.n	800f142 <_dtoa_r+0x252>
 800f15c:	2401      	movs	r4, #1
 800f15e:	2200      	movs	r2, #0
 800f160:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f164:	f04f 3bff 	mov.w	fp, #4294967295
 800f168:	2100      	movs	r1, #0
 800f16a:	46da      	mov	sl, fp
 800f16c:	2212      	movs	r2, #18
 800f16e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f170:	e7ce      	b.n	800f110 <_dtoa_r+0x220>
 800f172:	2201      	movs	r2, #1
 800f174:	9208      	str	r2, [sp, #32]
 800f176:	e7f5      	b.n	800f164 <_dtoa_r+0x274>
 800f178:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f17c:	46da      	mov	sl, fp
 800f17e:	465a      	mov	r2, fp
 800f180:	e7c6      	b.n	800f110 <_dtoa_r+0x220>
 800f182:	3101      	adds	r1, #1
 800f184:	0040      	lsls	r0, r0, #1
 800f186:	e7c7      	b.n	800f118 <_dtoa_r+0x228>
 800f188:	636f4361 	.word	0x636f4361
 800f18c:	3fd287a7 	.word	0x3fd287a7
 800f190:	8b60c8b3 	.word	0x8b60c8b3
 800f194:	3fc68a28 	.word	0x3fc68a28
 800f198:	509f79fb 	.word	0x509f79fb
 800f19c:	3fd34413 	.word	0x3fd34413
 800f1a0:	080123ea 	.word	0x080123ea
 800f1a4:	08012401 	.word	0x08012401
 800f1a8:	7ff00000 	.word	0x7ff00000
 800f1ac:	080123e6 	.word	0x080123e6
 800f1b0:	080123b5 	.word	0x080123b5
 800f1b4:	080123b4 	.word	0x080123b4
 800f1b8:	080124f8 	.word	0x080124f8
 800f1bc:	08012459 	.word	0x08012459
 800f1c0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f1c4:	f1ba 0f0e 	cmp.w	sl, #14
 800f1c8:	6010      	str	r0, [r2, #0]
 800f1ca:	d86f      	bhi.n	800f2ac <_dtoa_r+0x3bc>
 800f1cc:	2c00      	cmp	r4, #0
 800f1ce:	d06d      	beq.n	800f2ac <_dtoa_r+0x3bc>
 800f1d0:	f1b8 0f00 	cmp.w	r8, #0
 800f1d4:	f340 80c2 	ble.w	800f35c <_dtoa_r+0x46c>
 800f1d8:	4aca      	ldr	r2, [pc, #808]	@ (800f504 <_dtoa_r+0x614>)
 800f1da:	f008 010f 	and.w	r1, r8, #15
 800f1de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f1e2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f1e6:	ed92 7b00 	vldr	d7, [r2]
 800f1ea:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f1ee:	f000 80a9 	beq.w	800f344 <_dtoa_r+0x454>
 800f1f2:	4ac5      	ldr	r2, [pc, #788]	@ (800f508 <_dtoa_r+0x618>)
 800f1f4:	ed92 6b08 	vldr	d6, [r2, #32]
 800f1f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f1fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f200:	f001 010f 	and.w	r1, r1, #15
 800f204:	2203      	movs	r2, #3
 800f206:	48c0      	ldr	r0, [pc, #768]	@ (800f508 <_dtoa_r+0x618>)
 800f208:	2900      	cmp	r1, #0
 800f20a:	f040 809d 	bne.w	800f348 <_dtoa_r+0x458>
 800f20e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f212:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f216:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f21a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f21c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f220:	2900      	cmp	r1, #0
 800f222:	f000 80c1 	beq.w	800f3a8 <_dtoa_r+0x4b8>
 800f226:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f22a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f232:	f140 80b9 	bpl.w	800f3a8 <_dtoa_r+0x4b8>
 800f236:	f1ba 0f00 	cmp.w	sl, #0
 800f23a:	f000 80b5 	beq.w	800f3a8 <_dtoa_r+0x4b8>
 800f23e:	f1bb 0f00 	cmp.w	fp, #0
 800f242:	dd31      	ble.n	800f2a8 <_dtoa_r+0x3b8>
 800f244:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f248:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f24c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f250:	f108 31ff 	add.w	r1, r8, #4294967295
 800f254:	9104      	str	r1, [sp, #16]
 800f256:	3201      	adds	r2, #1
 800f258:	465c      	mov	r4, fp
 800f25a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f25e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f262:	ee07 2a90 	vmov	s15, r2
 800f266:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f26a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f26e:	ee15 2a90 	vmov	r2, s11
 800f272:	ec51 0b15 	vmov	r0, r1, d5
 800f276:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f27a:	2c00      	cmp	r4, #0
 800f27c:	f040 8098 	bne.w	800f3b0 <_dtoa_r+0x4c0>
 800f280:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f284:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f288:	ec41 0b17 	vmov	d7, r0, r1
 800f28c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f294:	f300 8261 	bgt.w	800f75a <_dtoa_r+0x86a>
 800f298:	eeb1 7b47 	vneg.f64	d7, d7
 800f29c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2a4:	f100 80f5 	bmi.w	800f492 <_dtoa_r+0x5a2>
 800f2a8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f2ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f2ae:	2a00      	cmp	r2, #0
 800f2b0:	f2c0 812c 	blt.w	800f50c <_dtoa_r+0x61c>
 800f2b4:	f1b8 0f0e 	cmp.w	r8, #14
 800f2b8:	f300 8128 	bgt.w	800f50c <_dtoa_r+0x61c>
 800f2bc:	4b91      	ldr	r3, [pc, #580]	@ (800f504 <_dtoa_r+0x614>)
 800f2be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f2c2:	ed93 6b00 	vldr	d6, [r3]
 800f2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	da03      	bge.n	800f2d4 <_dtoa_r+0x3e4>
 800f2cc:	f1ba 0f00 	cmp.w	sl, #0
 800f2d0:	f340 80d2 	ble.w	800f478 <_dtoa_r+0x588>
 800f2d4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f2d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2dc:	463e      	mov	r6, r7
 800f2de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f2e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f2e6:	ee15 3a10 	vmov	r3, s10
 800f2ea:	3330      	adds	r3, #48	@ 0x30
 800f2ec:	f806 3b01 	strb.w	r3, [r6], #1
 800f2f0:	1bf3      	subs	r3, r6, r7
 800f2f2:	459a      	cmp	sl, r3
 800f2f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f2f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f2fc:	f040 80f8 	bne.w	800f4f0 <_dtoa_r+0x600>
 800f300:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f304:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30c:	f300 80dd 	bgt.w	800f4ca <_dtoa_r+0x5da>
 800f310:	eeb4 7b46 	vcmp.f64	d7, d6
 800f314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f318:	d104      	bne.n	800f324 <_dtoa_r+0x434>
 800f31a:	ee15 3a10 	vmov	r3, s10
 800f31e:	07db      	lsls	r3, r3, #31
 800f320:	f100 80d3 	bmi.w	800f4ca <_dtoa_r+0x5da>
 800f324:	9901      	ldr	r1, [sp, #4]
 800f326:	4648      	mov	r0, r9
 800f328:	f000 fc78 	bl	800fc1c <_Bfree>
 800f32c:	2300      	movs	r3, #0
 800f32e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f330:	7033      	strb	r3, [r6, #0]
 800f332:	f108 0301 	add.w	r3, r8, #1
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	f000 8304 	beq.w	800f948 <_dtoa_r+0xa58>
 800f340:	601e      	str	r6, [r3, #0]
 800f342:	e301      	b.n	800f948 <_dtoa_r+0xa58>
 800f344:	2202      	movs	r2, #2
 800f346:	e75e      	b.n	800f206 <_dtoa_r+0x316>
 800f348:	07cc      	lsls	r4, r1, #31
 800f34a:	d504      	bpl.n	800f356 <_dtoa_r+0x466>
 800f34c:	ed90 6b00 	vldr	d6, [r0]
 800f350:	3201      	adds	r2, #1
 800f352:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f356:	1049      	asrs	r1, r1, #1
 800f358:	3008      	adds	r0, #8
 800f35a:	e755      	b.n	800f208 <_dtoa_r+0x318>
 800f35c:	d022      	beq.n	800f3a4 <_dtoa_r+0x4b4>
 800f35e:	f1c8 0100 	rsb	r1, r8, #0
 800f362:	4a68      	ldr	r2, [pc, #416]	@ (800f504 <_dtoa_r+0x614>)
 800f364:	f001 000f 	and.w	r0, r1, #15
 800f368:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f36c:	ed92 7b00 	vldr	d7, [r2]
 800f370:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f374:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f378:	4863      	ldr	r0, [pc, #396]	@ (800f508 <_dtoa_r+0x618>)
 800f37a:	1109      	asrs	r1, r1, #4
 800f37c:	2400      	movs	r4, #0
 800f37e:	2202      	movs	r2, #2
 800f380:	b929      	cbnz	r1, 800f38e <_dtoa_r+0x49e>
 800f382:	2c00      	cmp	r4, #0
 800f384:	f43f af49 	beq.w	800f21a <_dtoa_r+0x32a>
 800f388:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f38c:	e745      	b.n	800f21a <_dtoa_r+0x32a>
 800f38e:	07ce      	lsls	r6, r1, #31
 800f390:	d505      	bpl.n	800f39e <_dtoa_r+0x4ae>
 800f392:	ed90 6b00 	vldr	d6, [r0]
 800f396:	3201      	adds	r2, #1
 800f398:	2401      	movs	r4, #1
 800f39a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f39e:	1049      	asrs	r1, r1, #1
 800f3a0:	3008      	adds	r0, #8
 800f3a2:	e7ed      	b.n	800f380 <_dtoa_r+0x490>
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	e738      	b.n	800f21a <_dtoa_r+0x32a>
 800f3a8:	f8cd 8010 	str.w	r8, [sp, #16]
 800f3ac:	4654      	mov	r4, sl
 800f3ae:	e754      	b.n	800f25a <_dtoa_r+0x36a>
 800f3b0:	4a54      	ldr	r2, [pc, #336]	@ (800f504 <_dtoa_r+0x614>)
 800f3b2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f3b6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f3ba:	9a08      	ldr	r2, [sp, #32]
 800f3bc:	ec41 0b17 	vmov	d7, r0, r1
 800f3c0:	443c      	add	r4, r7
 800f3c2:	b34a      	cbz	r2, 800f418 <_dtoa_r+0x528>
 800f3c4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f3c8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f3cc:	463e      	mov	r6, r7
 800f3ce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f3d2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f3d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f3da:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f3de:	ee14 2a90 	vmov	r2, s9
 800f3e2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f3e6:	3230      	adds	r2, #48	@ 0x30
 800f3e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f3ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f4:	f806 2b01 	strb.w	r2, [r6], #1
 800f3f8:	d438      	bmi.n	800f46c <_dtoa_r+0x57c>
 800f3fa:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f3fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f406:	d462      	bmi.n	800f4ce <_dtoa_r+0x5de>
 800f408:	42a6      	cmp	r6, r4
 800f40a:	f43f af4d 	beq.w	800f2a8 <_dtoa_r+0x3b8>
 800f40e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f412:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f416:	e7e0      	b.n	800f3da <_dtoa_r+0x4ea>
 800f418:	4621      	mov	r1, r4
 800f41a:	463e      	mov	r6, r7
 800f41c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f420:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f424:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f428:	ee14 2a90 	vmov	r2, s9
 800f42c:	3230      	adds	r2, #48	@ 0x30
 800f42e:	f806 2b01 	strb.w	r2, [r6], #1
 800f432:	42a6      	cmp	r6, r4
 800f434:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f438:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f43c:	d119      	bne.n	800f472 <_dtoa_r+0x582>
 800f43e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f442:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f446:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f44e:	dc3e      	bgt.n	800f4ce <_dtoa_r+0x5de>
 800f450:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f454:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45c:	f57f af24 	bpl.w	800f2a8 <_dtoa_r+0x3b8>
 800f460:	460e      	mov	r6, r1
 800f462:	3901      	subs	r1, #1
 800f464:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f468:	2b30      	cmp	r3, #48	@ 0x30
 800f46a:	d0f9      	beq.n	800f460 <_dtoa_r+0x570>
 800f46c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f470:	e758      	b.n	800f324 <_dtoa_r+0x434>
 800f472:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f476:	e7d5      	b.n	800f424 <_dtoa_r+0x534>
 800f478:	d10b      	bne.n	800f492 <_dtoa_r+0x5a2>
 800f47a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f47e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f482:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f486:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48e:	f2c0 8161 	blt.w	800f754 <_dtoa_r+0x864>
 800f492:	2400      	movs	r4, #0
 800f494:	4625      	mov	r5, r4
 800f496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f498:	43db      	mvns	r3, r3
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	463e      	mov	r6, r7
 800f49e:	f04f 0800 	mov.w	r8, #0
 800f4a2:	4621      	mov	r1, r4
 800f4a4:	4648      	mov	r0, r9
 800f4a6:	f000 fbb9 	bl	800fc1c <_Bfree>
 800f4aa:	2d00      	cmp	r5, #0
 800f4ac:	d0de      	beq.n	800f46c <_dtoa_r+0x57c>
 800f4ae:	f1b8 0f00 	cmp.w	r8, #0
 800f4b2:	d005      	beq.n	800f4c0 <_dtoa_r+0x5d0>
 800f4b4:	45a8      	cmp	r8, r5
 800f4b6:	d003      	beq.n	800f4c0 <_dtoa_r+0x5d0>
 800f4b8:	4641      	mov	r1, r8
 800f4ba:	4648      	mov	r0, r9
 800f4bc:	f000 fbae 	bl	800fc1c <_Bfree>
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	4648      	mov	r0, r9
 800f4c4:	f000 fbaa 	bl	800fc1c <_Bfree>
 800f4c8:	e7d0      	b.n	800f46c <_dtoa_r+0x57c>
 800f4ca:	f8cd 8010 	str.w	r8, [sp, #16]
 800f4ce:	4633      	mov	r3, r6
 800f4d0:	461e      	mov	r6, r3
 800f4d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4d6:	2a39      	cmp	r2, #57	@ 0x39
 800f4d8:	d106      	bne.n	800f4e8 <_dtoa_r+0x5f8>
 800f4da:	429f      	cmp	r7, r3
 800f4dc:	d1f8      	bne.n	800f4d0 <_dtoa_r+0x5e0>
 800f4de:	9a04      	ldr	r2, [sp, #16]
 800f4e0:	3201      	adds	r2, #1
 800f4e2:	9204      	str	r2, [sp, #16]
 800f4e4:	2230      	movs	r2, #48	@ 0x30
 800f4e6:	703a      	strb	r2, [r7, #0]
 800f4e8:	781a      	ldrb	r2, [r3, #0]
 800f4ea:	3201      	adds	r2, #1
 800f4ec:	701a      	strb	r2, [r3, #0]
 800f4ee:	e7bd      	b.n	800f46c <_dtoa_r+0x57c>
 800f4f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f4f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fc:	f47f aeef 	bne.w	800f2de <_dtoa_r+0x3ee>
 800f500:	e710      	b.n	800f324 <_dtoa_r+0x434>
 800f502:	bf00      	nop
 800f504:	080124f8 	.word	0x080124f8
 800f508:	080124d0 	.word	0x080124d0
 800f50c:	9908      	ldr	r1, [sp, #32]
 800f50e:	2900      	cmp	r1, #0
 800f510:	f000 80e3 	beq.w	800f6da <_dtoa_r+0x7ea>
 800f514:	9907      	ldr	r1, [sp, #28]
 800f516:	2901      	cmp	r1, #1
 800f518:	f300 80c8 	bgt.w	800f6ac <_dtoa_r+0x7bc>
 800f51c:	2d00      	cmp	r5, #0
 800f51e:	f000 80c1 	beq.w	800f6a4 <_dtoa_r+0x7b4>
 800f522:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f526:	9e05      	ldr	r6, [sp, #20]
 800f528:	461c      	mov	r4, r3
 800f52a:	9304      	str	r3, [sp, #16]
 800f52c:	9b05      	ldr	r3, [sp, #20]
 800f52e:	4413      	add	r3, r2
 800f530:	9305      	str	r3, [sp, #20]
 800f532:	9b06      	ldr	r3, [sp, #24]
 800f534:	2101      	movs	r1, #1
 800f536:	4413      	add	r3, r2
 800f538:	4648      	mov	r0, r9
 800f53a:	9306      	str	r3, [sp, #24]
 800f53c:	f000 fc6c 	bl	800fe18 <__i2b>
 800f540:	9b04      	ldr	r3, [sp, #16]
 800f542:	4605      	mov	r5, r0
 800f544:	b166      	cbz	r6, 800f560 <_dtoa_r+0x670>
 800f546:	9a06      	ldr	r2, [sp, #24]
 800f548:	2a00      	cmp	r2, #0
 800f54a:	dd09      	ble.n	800f560 <_dtoa_r+0x670>
 800f54c:	42b2      	cmp	r2, r6
 800f54e:	9905      	ldr	r1, [sp, #20]
 800f550:	bfa8      	it	ge
 800f552:	4632      	movge	r2, r6
 800f554:	1a89      	subs	r1, r1, r2
 800f556:	9105      	str	r1, [sp, #20]
 800f558:	9906      	ldr	r1, [sp, #24]
 800f55a:	1ab6      	subs	r6, r6, r2
 800f55c:	1a8a      	subs	r2, r1, r2
 800f55e:	9206      	str	r2, [sp, #24]
 800f560:	b1fb      	cbz	r3, 800f5a2 <_dtoa_r+0x6b2>
 800f562:	9a08      	ldr	r2, [sp, #32]
 800f564:	2a00      	cmp	r2, #0
 800f566:	f000 80bc 	beq.w	800f6e2 <_dtoa_r+0x7f2>
 800f56a:	b19c      	cbz	r4, 800f594 <_dtoa_r+0x6a4>
 800f56c:	4629      	mov	r1, r5
 800f56e:	4622      	mov	r2, r4
 800f570:	4648      	mov	r0, r9
 800f572:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f574:	f000 fd10 	bl	800ff98 <__pow5mult>
 800f578:	9a01      	ldr	r2, [sp, #4]
 800f57a:	4601      	mov	r1, r0
 800f57c:	4605      	mov	r5, r0
 800f57e:	4648      	mov	r0, r9
 800f580:	f000 fc60 	bl	800fe44 <__multiply>
 800f584:	9901      	ldr	r1, [sp, #4]
 800f586:	9004      	str	r0, [sp, #16]
 800f588:	4648      	mov	r0, r9
 800f58a:	f000 fb47 	bl	800fc1c <_Bfree>
 800f58e:	9a04      	ldr	r2, [sp, #16]
 800f590:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f592:	9201      	str	r2, [sp, #4]
 800f594:	1b1a      	subs	r2, r3, r4
 800f596:	d004      	beq.n	800f5a2 <_dtoa_r+0x6b2>
 800f598:	9901      	ldr	r1, [sp, #4]
 800f59a:	4648      	mov	r0, r9
 800f59c:	f000 fcfc 	bl	800ff98 <__pow5mult>
 800f5a0:	9001      	str	r0, [sp, #4]
 800f5a2:	2101      	movs	r1, #1
 800f5a4:	4648      	mov	r0, r9
 800f5a6:	f000 fc37 	bl	800fe18 <__i2b>
 800f5aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f000 81d0 	beq.w	800f954 <_dtoa_r+0xa64>
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	4601      	mov	r1, r0
 800f5b8:	4648      	mov	r0, r9
 800f5ba:	f000 fced 	bl	800ff98 <__pow5mult>
 800f5be:	9b07      	ldr	r3, [sp, #28]
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	f300 8095 	bgt.w	800f6f2 <_dtoa_r+0x802>
 800f5c8:	9b02      	ldr	r3, [sp, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	f040 808b 	bne.w	800f6e6 <_dtoa_r+0x7f6>
 800f5d0:	9b03      	ldr	r3, [sp, #12]
 800f5d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f5d6:	2a00      	cmp	r2, #0
 800f5d8:	f040 8087 	bne.w	800f6ea <_dtoa_r+0x7fa>
 800f5dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f5e0:	0d12      	lsrs	r2, r2, #20
 800f5e2:	0512      	lsls	r2, r2, #20
 800f5e4:	2a00      	cmp	r2, #0
 800f5e6:	f000 8082 	beq.w	800f6ee <_dtoa_r+0x7fe>
 800f5ea:	9b05      	ldr	r3, [sp, #20]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	9305      	str	r3, [sp, #20]
 800f5f0:	9b06      	ldr	r3, [sp, #24]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	9306      	str	r3, [sp, #24]
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	f000 81af 	beq.w	800f960 <_dtoa_r+0xa70>
 800f602:	6922      	ldr	r2, [r4, #16]
 800f604:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f608:	6910      	ldr	r0, [r2, #16]
 800f60a:	f000 fbb9 	bl	800fd80 <__hi0bits>
 800f60e:	f1c0 0020 	rsb	r0, r0, #32
 800f612:	9b06      	ldr	r3, [sp, #24]
 800f614:	4418      	add	r0, r3
 800f616:	f010 001f 	ands.w	r0, r0, #31
 800f61a:	d076      	beq.n	800f70a <_dtoa_r+0x81a>
 800f61c:	f1c0 0220 	rsb	r2, r0, #32
 800f620:	2a04      	cmp	r2, #4
 800f622:	dd69      	ble.n	800f6f8 <_dtoa_r+0x808>
 800f624:	9b05      	ldr	r3, [sp, #20]
 800f626:	f1c0 001c 	rsb	r0, r0, #28
 800f62a:	4403      	add	r3, r0
 800f62c:	9305      	str	r3, [sp, #20]
 800f62e:	9b06      	ldr	r3, [sp, #24]
 800f630:	4406      	add	r6, r0
 800f632:	4403      	add	r3, r0
 800f634:	9306      	str	r3, [sp, #24]
 800f636:	9b05      	ldr	r3, [sp, #20]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	dd05      	ble.n	800f648 <_dtoa_r+0x758>
 800f63c:	9901      	ldr	r1, [sp, #4]
 800f63e:	461a      	mov	r2, r3
 800f640:	4648      	mov	r0, r9
 800f642:	f000 fd03 	bl	801004c <__lshift>
 800f646:	9001      	str	r0, [sp, #4]
 800f648:	9b06      	ldr	r3, [sp, #24]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	dd05      	ble.n	800f65a <_dtoa_r+0x76a>
 800f64e:	4621      	mov	r1, r4
 800f650:	461a      	mov	r2, r3
 800f652:	4648      	mov	r0, r9
 800f654:	f000 fcfa 	bl	801004c <__lshift>
 800f658:	4604      	mov	r4, r0
 800f65a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d056      	beq.n	800f70e <_dtoa_r+0x81e>
 800f660:	9801      	ldr	r0, [sp, #4]
 800f662:	4621      	mov	r1, r4
 800f664:	f000 fd5e 	bl	8010124 <__mcmp>
 800f668:	2800      	cmp	r0, #0
 800f66a:	da50      	bge.n	800f70e <_dtoa_r+0x81e>
 800f66c:	f108 33ff 	add.w	r3, r8, #4294967295
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	9901      	ldr	r1, [sp, #4]
 800f674:	2300      	movs	r3, #0
 800f676:	220a      	movs	r2, #10
 800f678:	4648      	mov	r0, r9
 800f67a:	f000 faf1 	bl	800fc60 <__multadd>
 800f67e:	9b08      	ldr	r3, [sp, #32]
 800f680:	9001      	str	r0, [sp, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	f000 816e 	beq.w	800f964 <_dtoa_r+0xa74>
 800f688:	4629      	mov	r1, r5
 800f68a:	2300      	movs	r3, #0
 800f68c:	220a      	movs	r2, #10
 800f68e:	4648      	mov	r0, r9
 800f690:	f000 fae6 	bl	800fc60 <__multadd>
 800f694:	f1bb 0f00 	cmp.w	fp, #0
 800f698:	4605      	mov	r5, r0
 800f69a:	dc64      	bgt.n	800f766 <_dtoa_r+0x876>
 800f69c:	9b07      	ldr	r3, [sp, #28]
 800f69e:	2b02      	cmp	r3, #2
 800f6a0:	dc3e      	bgt.n	800f720 <_dtoa_r+0x830>
 800f6a2:	e060      	b.n	800f766 <_dtoa_r+0x876>
 800f6a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f6aa:	e73c      	b.n	800f526 <_dtoa_r+0x636>
 800f6ac:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f6b0:	42a3      	cmp	r3, r4
 800f6b2:	bfbf      	itttt	lt
 800f6b4:	1ae2      	sublt	r2, r4, r3
 800f6b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f6b8:	189b      	addlt	r3, r3, r2
 800f6ba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f6bc:	bfae      	itee	ge
 800f6be:	1b1c      	subge	r4, r3, r4
 800f6c0:	4623      	movlt	r3, r4
 800f6c2:	2400      	movlt	r4, #0
 800f6c4:	f1ba 0f00 	cmp.w	sl, #0
 800f6c8:	bfb5      	itete	lt
 800f6ca:	9a05      	ldrlt	r2, [sp, #20]
 800f6cc:	9e05      	ldrge	r6, [sp, #20]
 800f6ce:	eba2 060a 	sublt.w	r6, r2, sl
 800f6d2:	4652      	movge	r2, sl
 800f6d4:	bfb8      	it	lt
 800f6d6:	2200      	movlt	r2, #0
 800f6d8:	e727      	b.n	800f52a <_dtoa_r+0x63a>
 800f6da:	9e05      	ldr	r6, [sp, #20]
 800f6dc:	9d08      	ldr	r5, [sp, #32]
 800f6de:	461c      	mov	r4, r3
 800f6e0:	e730      	b.n	800f544 <_dtoa_r+0x654>
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	e758      	b.n	800f598 <_dtoa_r+0x6a8>
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	e786      	b.n	800f5f8 <_dtoa_r+0x708>
 800f6ea:	9b02      	ldr	r3, [sp, #8]
 800f6ec:	e784      	b.n	800f5f8 <_dtoa_r+0x708>
 800f6ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f6f0:	e783      	b.n	800f5fa <_dtoa_r+0x70a>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6f6:	e784      	b.n	800f602 <_dtoa_r+0x712>
 800f6f8:	d09d      	beq.n	800f636 <_dtoa_r+0x746>
 800f6fa:	9b05      	ldr	r3, [sp, #20]
 800f6fc:	321c      	adds	r2, #28
 800f6fe:	4413      	add	r3, r2
 800f700:	9305      	str	r3, [sp, #20]
 800f702:	9b06      	ldr	r3, [sp, #24]
 800f704:	4416      	add	r6, r2
 800f706:	4413      	add	r3, r2
 800f708:	e794      	b.n	800f634 <_dtoa_r+0x744>
 800f70a:	4602      	mov	r2, r0
 800f70c:	e7f5      	b.n	800f6fa <_dtoa_r+0x80a>
 800f70e:	f1ba 0f00 	cmp.w	sl, #0
 800f712:	f8cd 8010 	str.w	r8, [sp, #16]
 800f716:	46d3      	mov	fp, sl
 800f718:	dc21      	bgt.n	800f75e <_dtoa_r+0x86e>
 800f71a:	9b07      	ldr	r3, [sp, #28]
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	dd1e      	ble.n	800f75e <_dtoa_r+0x86e>
 800f720:	f1bb 0f00 	cmp.w	fp, #0
 800f724:	f47f aeb7 	bne.w	800f496 <_dtoa_r+0x5a6>
 800f728:	4621      	mov	r1, r4
 800f72a:	465b      	mov	r3, fp
 800f72c:	2205      	movs	r2, #5
 800f72e:	4648      	mov	r0, r9
 800f730:	f000 fa96 	bl	800fc60 <__multadd>
 800f734:	4601      	mov	r1, r0
 800f736:	4604      	mov	r4, r0
 800f738:	9801      	ldr	r0, [sp, #4]
 800f73a:	f000 fcf3 	bl	8010124 <__mcmp>
 800f73e:	2800      	cmp	r0, #0
 800f740:	f77f aea9 	ble.w	800f496 <_dtoa_r+0x5a6>
 800f744:	463e      	mov	r6, r7
 800f746:	2331      	movs	r3, #49	@ 0x31
 800f748:	f806 3b01 	strb.w	r3, [r6], #1
 800f74c:	9b04      	ldr	r3, [sp, #16]
 800f74e:	3301      	adds	r3, #1
 800f750:	9304      	str	r3, [sp, #16]
 800f752:	e6a4      	b.n	800f49e <_dtoa_r+0x5ae>
 800f754:	f8cd 8010 	str.w	r8, [sp, #16]
 800f758:	4654      	mov	r4, sl
 800f75a:	4625      	mov	r5, r4
 800f75c:	e7f2      	b.n	800f744 <_dtoa_r+0x854>
 800f75e:	9b08      	ldr	r3, [sp, #32]
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 8103 	beq.w	800f96c <_dtoa_r+0xa7c>
 800f766:	2e00      	cmp	r6, #0
 800f768:	dd05      	ble.n	800f776 <_dtoa_r+0x886>
 800f76a:	4629      	mov	r1, r5
 800f76c:	4632      	mov	r2, r6
 800f76e:	4648      	mov	r0, r9
 800f770:	f000 fc6c 	bl	801004c <__lshift>
 800f774:	4605      	mov	r5, r0
 800f776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d058      	beq.n	800f82e <_dtoa_r+0x93e>
 800f77c:	6869      	ldr	r1, [r5, #4]
 800f77e:	4648      	mov	r0, r9
 800f780:	f000 fa0c 	bl	800fb9c <_Balloc>
 800f784:	4606      	mov	r6, r0
 800f786:	b928      	cbnz	r0, 800f794 <_dtoa_r+0x8a4>
 800f788:	4b82      	ldr	r3, [pc, #520]	@ (800f994 <_dtoa_r+0xaa4>)
 800f78a:	4602      	mov	r2, r0
 800f78c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f790:	f7ff bbc7 	b.w	800ef22 <_dtoa_r+0x32>
 800f794:	692a      	ldr	r2, [r5, #16]
 800f796:	3202      	adds	r2, #2
 800f798:	0092      	lsls	r2, r2, #2
 800f79a:	f105 010c 	add.w	r1, r5, #12
 800f79e:	300c      	adds	r0, #12
 800f7a0:	f002 f8f4 	bl	801198c <memcpy>
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	4631      	mov	r1, r6
 800f7a8:	4648      	mov	r0, r9
 800f7aa:	f000 fc4f 	bl	801004c <__lshift>
 800f7ae:	1c7b      	adds	r3, r7, #1
 800f7b0:	9305      	str	r3, [sp, #20]
 800f7b2:	eb07 030b 	add.w	r3, r7, fp
 800f7b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7b8:	9b02      	ldr	r3, [sp, #8]
 800f7ba:	f003 0301 	and.w	r3, r3, #1
 800f7be:	46a8      	mov	r8, r5
 800f7c0:	9308      	str	r3, [sp, #32]
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	9b05      	ldr	r3, [sp, #20]
 800f7c6:	9801      	ldr	r0, [sp, #4]
 800f7c8:	4621      	mov	r1, r4
 800f7ca:	f103 3bff 	add.w	fp, r3, #4294967295
 800f7ce:	f7ff fb05 	bl	800eddc <quorem>
 800f7d2:	4641      	mov	r1, r8
 800f7d4:	9002      	str	r0, [sp, #8]
 800f7d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f7da:	9801      	ldr	r0, [sp, #4]
 800f7dc:	f000 fca2 	bl	8010124 <__mcmp>
 800f7e0:	462a      	mov	r2, r5
 800f7e2:	9006      	str	r0, [sp, #24]
 800f7e4:	4621      	mov	r1, r4
 800f7e6:	4648      	mov	r0, r9
 800f7e8:	f000 fcb8 	bl	801015c <__mdiff>
 800f7ec:	68c2      	ldr	r2, [r0, #12]
 800f7ee:	4606      	mov	r6, r0
 800f7f0:	b9fa      	cbnz	r2, 800f832 <_dtoa_r+0x942>
 800f7f2:	4601      	mov	r1, r0
 800f7f4:	9801      	ldr	r0, [sp, #4]
 800f7f6:	f000 fc95 	bl	8010124 <__mcmp>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	4631      	mov	r1, r6
 800f7fe:	4648      	mov	r0, r9
 800f800:	920a      	str	r2, [sp, #40]	@ 0x28
 800f802:	f000 fa0b 	bl	800fc1c <_Bfree>
 800f806:	9b07      	ldr	r3, [sp, #28]
 800f808:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f80a:	9e05      	ldr	r6, [sp, #20]
 800f80c:	ea43 0102 	orr.w	r1, r3, r2
 800f810:	9b08      	ldr	r3, [sp, #32]
 800f812:	4319      	orrs	r1, r3
 800f814:	d10f      	bne.n	800f836 <_dtoa_r+0x946>
 800f816:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f81a:	d028      	beq.n	800f86e <_dtoa_r+0x97e>
 800f81c:	9b06      	ldr	r3, [sp, #24]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	dd02      	ble.n	800f828 <_dtoa_r+0x938>
 800f822:	9b02      	ldr	r3, [sp, #8]
 800f824:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800f828:	f88b a000 	strb.w	sl, [fp]
 800f82c:	e639      	b.n	800f4a2 <_dtoa_r+0x5b2>
 800f82e:	4628      	mov	r0, r5
 800f830:	e7bd      	b.n	800f7ae <_dtoa_r+0x8be>
 800f832:	2201      	movs	r2, #1
 800f834:	e7e2      	b.n	800f7fc <_dtoa_r+0x90c>
 800f836:	9b06      	ldr	r3, [sp, #24]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	db04      	blt.n	800f846 <_dtoa_r+0x956>
 800f83c:	9907      	ldr	r1, [sp, #28]
 800f83e:	430b      	orrs	r3, r1
 800f840:	9908      	ldr	r1, [sp, #32]
 800f842:	430b      	orrs	r3, r1
 800f844:	d120      	bne.n	800f888 <_dtoa_r+0x998>
 800f846:	2a00      	cmp	r2, #0
 800f848:	ddee      	ble.n	800f828 <_dtoa_r+0x938>
 800f84a:	9901      	ldr	r1, [sp, #4]
 800f84c:	2201      	movs	r2, #1
 800f84e:	4648      	mov	r0, r9
 800f850:	f000 fbfc 	bl	801004c <__lshift>
 800f854:	4621      	mov	r1, r4
 800f856:	9001      	str	r0, [sp, #4]
 800f858:	f000 fc64 	bl	8010124 <__mcmp>
 800f85c:	2800      	cmp	r0, #0
 800f85e:	dc03      	bgt.n	800f868 <_dtoa_r+0x978>
 800f860:	d1e2      	bne.n	800f828 <_dtoa_r+0x938>
 800f862:	f01a 0f01 	tst.w	sl, #1
 800f866:	d0df      	beq.n	800f828 <_dtoa_r+0x938>
 800f868:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f86c:	d1d9      	bne.n	800f822 <_dtoa_r+0x932>
 800f86e:	2339      	movs	r3, #57	@ 0x39
 800f870:	f88b 3000 	strb.w	r3, [fp]
 800f874:	4633      	mov	r3, r6
 800f876:	461e      	mov	r6, r3
 800f878:	3b01      	subs	r3, #1
 800f87a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f87e:	2a39      	cmp	r2, #57	@ 0x39
 800f880:	d053      	beq.n	800f92a <_dtoa_r+0xa3a>
 800f882:	3201      	adds	r2, #1
 800f884:	701a      	strb	r2, [r3, #0]
 800f886:	e60c      	b.n	800f4a2 <_dtoa_r+0x5b2>
 800f888:	2a00      	cmp	r2, #0
 800f88a:	dd07      	ble.n	800f89c <_dtoa_r+0x9ac>
 800f88c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800f890:	d0ed      	beq.n	800f86e <_dtoa_r+0x97e>
 800f892:	f10a 0301 	add.w	r3, sl, #1
 800f896:	f88b 3000 	strb.w	r3, [fp]
 800f89a:	e602      	b.n	800f4a2 <_dtoa_r+0x5b2>
 800f89c:	9b05      	ldr	r3, [sp, #20]
 800f89e:	9a05      	ldr	r2, [sp, #20]
 800f8a0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800f8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d029      	beq.n	800f8fe <_dtoa_r+0xa0e>
 800f8aa:	9901      	ldr	r1, [sp, #4]
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	220a      	movs	r2, #10
 800f8b0:	4648      	mov	r0, r9
 800f8b2:	f000 f9d5 	bl	800fc60 <__multadd>
 800f8b6:	45a8      	cmp	r8, r5
 800f8b8:	9001      	str	r0, [sp, #4]
 800f8ba:	f04f 0300 	mov.w	r3, #0
 800f8be:	f04f 020a 	mov.w	r2, #10
 800f8c2:	4641      	mov	r1, r8
 800f8c4:	4648      	mov	r0, r9
 800f8c6:	d107      	bne.n	800f8d8 <_dtoa_r+0x9e8>
 800f8c8:	f000 f9ca 	bl	800fc60 <__multadd>
 800f8cc:	4680      	mov	r8, r0
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	9b05      	ldr	r3, [sp, #20]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	9305      	str	r3, [sp, #20]
 800f8d6:	e775      	b.n	800f7c4 <_dtoa_r+0x8d4>
 800f8d8:	f000 f9c2 	bl	800fc60 <__multadd>
 800f8dc:	4629      	mov	r1, r5
 800f8de:	4680      	mov	r8, r0
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	220a      	movs	r2, #10
 800f8e4:	4648      	mov	r0, r9
 800f8e6:	f000 f9bb 	bl	800fc60 <__multadd>
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	e7f0      	b.n	800f8d0 <_dtoa_r+0x9e0>
 800f8ee:	f1bb 0f00 	cmp.w	fp, #0
 800f8f2:	bfcc      	ite	gt
 800f8f4:	465e      	movgt	r6, fp
 800f8f6:	2601      	movle	r6, #1
 800f8f8:	443e      	add	r6, r7
 800f8fa:	f04f 0800 	mov.w	r8, #0
 800f8fe:	9901      	ldr	r1, [sp, #4]
 800f900:	2201      	movs	r2, #1
 800f902:	4648      	mov	r0, r9
 800f904:	f000 fba2 	bl	801004c <__lshift>
 800f908:	4621      	mov	r1, r4
 800f90a:	9001      	str	r0, [sp, #4]
 800f90c:	f000 fc0a 	bl	8010124 <__mcmp>
 800f910:	2800      	cmp	r0, #0
 800f912:	dcaf      	bgt.n	800f874 <_dtoa_r+0x984>
 800f914:	d102      	bne.n	800f91c <_dtoa_r+0xa2c>
 800f916:	f01a 0f01 	tst.w	sl, #1
 800f91a:	d1ab      	bne.n	800f874 <_dtoa_r+0x984>
 800f91c:	4633      	mov	r3, r6
 800f91e:	461e      	mov	r6, r3
 800f920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f924:	2a30      	cmp	r2, #48	@ 0x30
 800f926:	d0fa      	beq.n	800f91e <_dtoa_r+0xa2e>
 800f928:	e5bb      	b.n	800f4a2 <_dtoa_r+0x5b2>
 800f92a:	429f      	cmp	r7, r3
 800f92c:	d1a3      	bne.n	800f876 <_dtoa_r+0x986>
 800f92e:	9b04      	ldr	r3, [sp, #16]
 800f930:	3301      	adds	r3, #1
 800f932:	9304      	str	r3, [sp, #16]
 800f934:	2331      	movs	r3, #49	@ 0x31
 800f936:	703b      	strb	r3, [r7, #0]
 800f938:	e5b3      	b.n	800f4a2 <_dtoa_r+0x5b2>
 800f93a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f93c:	4f16      	ldr	r7, [pc, #88]	@ (800f998 <_dtoa_r+0xaa8>)
 800f93e:	b11b      	cbz	r3, 800f948 <_dtoa_r+0xa58>
 800f940:	f107 0308 	add.w	r3, r7, #8
 800f944:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f946:	6013      	str	r3, [r2, #0]
 800f948:	4638      	mov	r0, r7
 800f94a:	b011      	add	sp, #68	@ 0x44
 800f94c:	ecbd 8b02 	vpop	{d8}
 800f950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f954:	9b07      	ldr	r3, [sp, #28]
 800f956:	2b01      	cmp	r3, #1
 800f958:	f77f ae36 	ble.w	800f5c8 <_dtoa_r+0x6d8>
 800f95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f95e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f960:	2001      	movs	r0, #1
 800f962:	e656      	b.n	800f612 <_dtoa_r+0x722>
 800f964:	f1bb 0f00 	cmp.w	fp, #0
 800f968:	f77f aed7 	ble.w	800f71a <_dtoa_r+0x82a>
 800f96c:	463e      	mov	r6, r7
 800f96e:	9801      	ldr	r0, [sp, #4]
 800f970:	4621      	mov	r1, r4
 800f972:	f7ff fa33 	bl	800eddc <quorem>
 800f976:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800f97a:	f806 ab01 	strb.w	sl, [r6], #1
 800f97e:	1bf2      	subs	r2, r6, r7
 800f980:	4593      	cmp	fp, r2
 800f982:	ddb4      	ble.n	800f8ee <_dtoa_r+0x9fe>
 800f984:	9901      	ldr	r1, [sp, #4]
 800f986:	2300      	movs	r3, #0
 800f988:	220a      	movs	r2, #10
 800f98a:	4648      	mov	r0, r9
 800f98c:	f000 f968 	bl	800fc60 <__multadd>
 800f990:	9001      	str	r0, [sp, #4]
 800f992:	e7ec      	b.n	800f96e <_dtoa_r+0xa7e>
 800f994:	08012459 	.word	0x08012459
 800f998:	080123dd 	.word	0x080123dd

0800f99c <_free_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4605      	mov	r5, r0
 800f9a0:	2900      	cmp	r1, #0
 800f9a2:	d041      	beq.n	800fa28 <_free_r+0x8c>
 800f9a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9a8:	1f0c      	subs	r4, r1, #4
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	bfb8      	it	lt
 800f9ae:	18e4      	addlt	r4, r4, r3
 800f9b0:	f000 f8e8 	bl	800fb84 <__malloc_lock>
 800f9b4:	4a1d      	ldr	r2, [pc, #116]	@ (800fa2c <_free_r+0x90>)
 800f9b6:	6813      	ldr	r3, [r2, #0]
 800f9b8:	b933      	cbnz	r3, 800f9c8 <_free_r+0x2c>
 800f9ba:	6063      	str	r3, [r4, #4]
 800f9bc:	6014      	str	r4, [r2, #0]
 800f9be:	4628      	mov	r0, r5
 800f9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9c4:	f000 b8e4 	b.w	800fb90 <__malloc_unlock>
 800f9c8:	42a3      	cmp	r3, r4
 800f9ca:	d908      	bls.n	800f9de <_free_r+0x42>
 800f9cc:	6820      	ldr	r0, [r4, #0]
 800f9ce:	1821      	adds	r1, r4, r0
 800f9d0:	428b      	cmp	r3, r1
 800f9d2:	bf01      	itttt	eq
 800f9d4:	6819      	ldreq	r1, [r3, #0]
 800f9d6:	685b      	ldreq	r3, [r3, #4]
 800f9d8:	1809      	addeq	r1, r1, r0
 800f9da:	6021      	streq	r1, [r4, #0]
 800f9dc:	e7ed      	b.n	800f9ba <_free_r+0x1e>
 800f9de:	461a      	mov	r2, r3
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	b10b      	cbz	r3, 800f9e8 <_free_r+0x4c>
 800f9e4:	42a3      	cmp	r3, r4
 800f9e6:	d9fa      	bls.n	800f9de <_free_r+0x42>
 800f9e8:	6811      	ldr	r1, [r2, #0]
 800f9ea:	1850      	adds	r0, r2, r1
 800f9ec:	42a0      	cmp	r0, r4
 800f9ee:	d10b      	bne.n	800fa08 <_free_r+0x6c>
 800f9f0:	6820      	ldr	r0, [r4, #0]
 800f9f2:	4401      	add	r1, r0
 800f9f4:	1850      	adds	r0, r2, r1
 800f9f6:	4283      	cmp	r3, r0
 800f9f8:	6011      	str	r1, [r2, #0]
 800f9fa:	d1e0      	bne.n	800f9be <_free_r+0x22>
 800f9fc:	6818      	ldr	r0, [r3, #0]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	6053      	str	r3, [r2, #4]
 800fa02:	4408      	add	r0, r1
 800fa04:	6010      	str	r0, [r2, #0]
 800fa06:	e7da      	b.n	800f9be <_free_r+0x22>
 800fa08:	d902      	bls.n	800fa10 <_free_r+0x74>
 800fa0a:	230c      	movs	r3, #12
 800fa0c:	602b      	str	r3, [r5, #0]
 800fa0e:	e7d6      	b.n	800f9be <_free_r+0x22>
 800fa10:	6820      	ldr	r0, [r4, #0]
 800fa12:	1821      	adds	r1, r4, r0
 800fa14:	428b      	cmp	r3, r1
 800fa16:	bf04      	itt	eq
 800fa18:	6819      	ldreq	r1, [r3, #0]
 800fa1a:	685b      	ldreq	r3, [r3, #4]
 800fa1c:	6063      	str	r3, [r4, #4]
 800fa1e:	bf04      	itt	eq
 800fa20:	1809      	addeq	r1, r1, r0
 800fa22:	6021      	streq	r1, [r4, #0]
 800fa24:	6054      	str	r4, [r2, #4]
 800fa26:	e7ca      	b.n	800f9be <_free_r+0x22>
 800fa28:	bd38      	pop	{r3, r4, r5, pc}
 800fa2a:	bf00      	nop
 800fa2c:	24000d0c 	.word	0x24000d0c

0800fa30 <malloc>:
 800fa30:	4b02      	ldr	r3, [pc, #8]	@ (800fa3c <malloc+0xc>)
 800fa32:	4601      	mov	r1, r0
 800fa34:	6818      	ldr	r0, [r3, #0]
 800fa36:	f000 b825 	b.w	800fa84 <_malloc_r>
 800fa3a:	bf00      	nop
 800fa3c:	2400001c 	.word	0x2400001c

0800fa40 <sbrk_aligned>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	4e0f      	ldr	r6, [pc, #60]	@ (800fa80 <sbrk_aligned+0x40>)
 800fa44:	460c      	mov	r4, r1
 800fa46:	6831      	ldr	r1, [r6, #0]
 800fa48:	4605      	mov	r5, r0
 800fa4a:	b911      	cbnz	r1, 800fa52 <sbrk_aligned+0x12>
 800fa4c:	f001 ff8e 	bl	801196c <_sbrk_r>
 800fa50:	6030      	str	r0, [r6, #0]
 800fa52:	4621      	mov	r1, r4
 800fa54:	4628      	mov	r0, r5
 800fa56:	f001 ff89 	bl	801196c <_sbrk_r>
 800fa5a:	1c43      	adds	r3, r0, #1
 800fa5c:	d103      	bne.n	800fa66 <sbrk_aligned+0x26>
 800fa5e:	f04f 34ff 	mov.w	r4, #4294967295
 800fa62:	4620      	mov	r0, r4
 800fa64:	bd70      	pop	{r4, r5, r6, pc}
 800fa66:	1cc4      	adds	r4, r0, #3
 800fa68:	f024 0403 	bic.w	r4, r4, #3
 800fa6c:	42a0      	cmp	r0, r4
 800fa6e:	d0f8      	beq.n	800fa62 <sbrk_aligned+0x22>
 800fa70:	1a21      	subs	r1, r4, r0
 800fa72:	4628      	mov	r0, r5
 800fa74:	f001 ff7a 	bl	801196c <_sbrk_r>
 800fa78:	3001      	adds	r0, #1
 800fa7a:	d1f2      	bne.n	800fa62 <sbrk_aligned+0x22>
 800fa7c:	e7ef      	b.n	800fa5e <sbrk_aligned+0x1e>
 800fa7e:	bf00      	nop
 800fa80:	24000d08 	.word	0x24000d08

0800fa84 <_malloc_r>:
 800fa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa88:	1ccd      	adds	r5, r1, #3
 800fa8a:	f025 0503 	bic.w	r5, r5, #3
 800fa8e:	3508      	adds	r5, #8
 800fa90:	2d0c      	cmp	r5, #12
 800fa92:	bf38      	it	cc
 800fa94:	250c      	movcc	r5, #12
 800fa96:	2d00      	cmp	r5, #0
 800fa98:	4606      	mov	r6, r0
 800fa9a:	db01      	blt.n	800faa0 <_malloc_r+0x1c>
 800fa9c:	42a9      	cmp	r1, r5
 800fa9e:	d904      	bls.n	800faaa <_malloc_r+0x26>
 800faa0:	230c      	movs	r3, #12
 800faa2:	6033      	str	r3, [r6, #0]
 800faa4:	2000      	movs	r0, #0
 800faa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fb80 <_malloc_r+0xfc>
 800faae:	f000 f869 	bl	800fb84 <__malloc_lock>
 800fab2:	f8d8 3000 	ldr.w	r3, [r8]
 800fab6:	461c      	mov	r4, r3
 800fab8:	bb44      	cbnz	r4, 800fb0c <_malloc_r+0x88>
 800faba:	4629      	mov	r1, r5
 800fabc:	4630      	mov	r0, r6
 800fabe:	f7ff ffbf 	bl	800fa40 <sbrk_aligned>
 800fac2:	1c43      	adds	r3, r0, #1
 800fac4:	4604      	mov	r4, r0
 800fac6:	d158      	bne.n	800fb7a <_malloc_r+0xf6>
 800fac8:	f8d8 4000 	ldr.w	r4, [r8]
 800facc:	4627      	mov	r7, r4
 800face:	2f00      	cmp	r7, #0
 800fad0:	d143      	bne.n	800fb5a <_malloc_r+0xd6>
 800fad2:	2c00      	cmp	r4, #0
 800fad4:	d04b      	beq.n	800fb6e <_malloc_r+0xea>
 800fad6:	6823      	ldr	r3, [r4, #0]
 800fad8:	4639      	mov	r1, r7
 800fada:	4630      	mov	r0, r6
 800fadc:	eb04 0903 	add.w	r9, r4, r3
 800fae0:	f001 ff44 	bl	801196c <_sbrk_r>
 800fae4:	4581      	cmp	r9, r0
 800fae6:	d142      	bne.n	800fb6e <_malloc_r+0xea>
 800fae8:	6821      	ldr	r1, [r4, #0]
 800faea:	1a6d      	subs	r5, r5, r1
 800faec:	4629      	mov	r1, r5
 800faee:	4630      	mov	r0, r6
 800faf0:	f7ff ffa6 	bl	800fa40 <sbrk_aligned>
 800faf4:	3001      	adds	r0, #1
 800faf6:	d03a      	beq.n	800fb6e <_malloc_r+0xea>
 800faf8:	6823      	ldr	r3, [r4, #0]
 800fafa:	442b      	add	r3, r5
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	f8d8 3000 	ldr.w	r3, [r8]
 800fb02:	685a      	ldr	r2, [r3, #4]
 800fb04:	bb62      	cbnz	r2, 800fb60 <_malloc_r+0xdc>
 800fb06:	f8c8 7000 	str.w	r7, [r8]
 800fb0a:	e00f      	b.n	800fb2c <_malloc_r+0xa8>
 800fb0c:	6822      	ldr	r2, [r4, #0]
 800fb0e:	1b52      	subs	r2, r2, r5
 800fb10:	d420      	bmi.n	800fb54 <_malloc_r+0xd0>
 800fb12:	2a0b      	cmp	r2, #11
 800fb14:	d917      	bls.n	800fb46 <_malloc_r+0xc2>
 800fb16:	1961      	adds	r1, r4, r5
 800fb18:	42a3      	cmp	r3, r4
 800fb1a:	6025      	str	r5, [r4, #0]
 800fb1c:	bf18      	it	ne
 800fb1e:	6059      	strne	r1, [r3, #4]
 800fb20:	6863      	ldr	r3, [r4, #4]
 800fb22:	bf08      	it	eq
 800fb24:	f8c8 1000 	streq.w	r1, [r8]
 800fb28:	5162      	str	r2, [r4, r5]
 800fb2a:	604b      	str	r3, [r1, #4]
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	f000 f82f 	bl	800fb90 <__malloc_unlock>
 800fb32:	f104 000b 	add.w	r0, r4, #11
 800fb36:	1d23      	adds	r3, r4, #4
 800fb38:	f020 0007 	bic.w	r0, r0, #7
 800fb3c:	1ac2      	subs	r2, r0, r3
 800fb3e:	bf1c      	itt	ne
 800fb40:	1a1b      	subne	r3, r3, r0
 800fb42:	50a3      	strne	r3, [r4, r2]
 800fb44:	e7af      	b.n	800faa6 <_malloc_r+0x22>
 800fb46:	6862      	ldr	r2, [r4, #4]
 800fb48:	42a3      	cmp	r3, r4
 800fb4a:	bf0c      	ite	eq
 800fb4c:	f8c8 2000 	streq.w	r2, [r8]
 800fb50:	605a      	strne	r2, [r3, #4]
 800fb52:	e7eb      	b.n	800fb2c <_malloc_r+0xa8>
 800fb54:	4623      	mov	r3, r4
 800fb56:	6864      	ldr	r4, [r4, #4]
 800fb58:	e7ae      	b.n	800fab8 <_malloc_r+0x34>
 800fb5a:	463c      	mov	r4, r7
 800fb5c:	687f      	ldr	r7, [r7, #4]
 800fb5e:	e7b6      	b.n	800face <_malloc_r+0x4a>
 800fb60:	461a      	mov	r2, r3
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	42a3      	cmp	r3, r4
 800fb66:	d1fb      	bne.n	800fb60 <_malloc_r+0xdc>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	6053      	str	r3, [r2, #4]
 800fb6c:	e7de      	b.n	800fb2c <_malloc_r+0xa8>
 800fb6e:	230c      	movs	r3, #12
 800fb70:	6033      	str	r3, [r6, #0]
 800fb72:	4630      	mov	r0, r6
 800fb74:	f000 f80c 	bl	800fb90 <__malloc_unlock>
 800fb78:	e794      	b.n	800faa4 <_malloc_r+0x20>
 800fb7a:	6005      	str	r5, [r0, #0]
 800fb7c:	e7d6      	b.n	800fb2c <_malloc_r+0xa8>
 800fb7e:	bf00      	nop
 800fb80:	24000d0c 	.word	0x24000d0c

0800fb84 <__malloc_lock>:
 800fb84:	4801      	ldr	r0, [pc, #4]	@ (800fb8c <__malloc_lock+0x8>)
 800fb86:	f7ff b920 	b.w	800edca <__retarget_lock_acquire_recursive>
 800fb8a:	bf00      	nop
 800fb8c:	24000d04 	.word	0x24000d04

0800fb90 <__malloc_unlock>:
 800fb90:	4801      	ldr	r0, [pc, #4]	@ (800fb98 <__malloc_unlock+0x8>)
 800fb92:	f7ff b91b 	b.w	800edcc <__retarget_lock_release_recursive>
 800fb96:	bf00      	nop
 800fb98:	24000d04 	.word	0x24000d04

0800fb9c <_Balloc>:
 800fb9c:	b570      	push	{r4, r5, r6, lr}
 800fb9e:	69c6      	ldr	r6, [r0, #28]
 800fba0:	4604      	mov	r4, r0
 800fba2:	460d      	mov	r5, r1
 800fba4:	b976      	cbnz	r6, 800fbc4 <_Balloc+0x28>
 800fba6:	2010      	movs	r0, #16
 800fba8:	f7ff ff42 	bl	800fa30 <malloc>
 800fbac:	4602      	mov	r2, r0
 800fbae:	61e0      	str	r0, [r4, #28]
 800fbb0:	b920      	cbnz	r0, 800fbbc <_Balloc+0x20>
 800fbb2:	4b18      	ldr	r3, [pc, #96]	@ (800fc14 <_Balloc+0x78>)
 800fbb4:	4818      	ldr	r0, [pc, #96]	@ (800fc18 <_Balloc+0x7c>)
 800fbb6:	216b      	movs	r1, #107	@ 0x6b
 800fbb8:	f001 fefe 	bl	80119b8 <__assert_func>
 800fbbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbc0:	6006      	str	r6, [r0, #0]
 800fbc2:	60c6      	str	r6, [r0, #12]
 800fbc4:	69e6      	ldr	r6, [r4, #28]
 800fbc6:	68f3      	ldr	r3, [r6, #12]
 800fbc8:	b183      	cbz	r3, 800fbec <_Balloc+0x50>
 800fbca:	69e3      	ldr	r3, [r4, #28]
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbd2:	b9b8      	cbnz	r0, 800fc04 <_Balloc+0x68>
 800fbd4:	2101      	movs	r1, #1
 800fbd6:	fa01 f605 	lsl.w	r6, r1, r5
 800fbda:	1d72      	adds	r2, r6, #5
 800fbdc:	0092      	lsls	r2, r2, #2
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f001 ff08 	bl	80119f4 <_calloc_r>
 800fbe4:	b160      	cbz	r0, 800fc00 <_Balloc+0x64>
 800fbe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fbea:	e00e      	b.n	800fc0a <_Balloc+0x6e>
 800fbec:	2221      	movs	r2, #33	@ 0x21
 800fbee:	2104      	movs	r1, #4
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f001 feff 	bl	80119f4 <_calloc_r>
 800fbf6:	69e3      	ldr	r3, [r4, #28]
 800fbf8:	60f0      	str	r0, [r6, #12]
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1e4      	bne.n	800fbca <_Balloc+0x2e>
 800fc00:	2000      	movs	r0, #0
 800fc02:	bd70      	pop	{r4, r5, r6, pc}
 800fc04:	6802      	ldr	r2, [r0, #0]
 800fc06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc10:	e7f7      	b.n	800fc02 <_Balloc+0x66>
 800fc12:	bf00      	nop
 800fc14:	080123ea 	.word	0x080123ea
 800fc18:	0801246a 	.word	0x0801246a

0800fc1c <_Bfree>:
 800fc1c:	b570      	push	{r4, r5, r6, lr}
 800fc1e:	69c6      	ldr	r6, [r0, #28]
 800fc20:	4605      	mov	r5, r0
 800fc22:	460c      	mov	r4, r1
 800fc24:	b976      	cbnz	r6, 800fc44 <_Bfree+0x28>
 800fc26:	2010      	movs	r0, #16
 800fc28:	f7ff ff02 	bl	800fa30 <malloc>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	61e8      	str	r0, [r5, #28]
 800fc30:	b920      	cbnz	r0, 800fc3c <_Bfree+0x20>
 800fc32:	4b09      	ldr	r3, [pc, #36]	@ (800fc58 <_Bfree+0x3c>)
 800fc34:	4809      	ldr	r0, [pc, #36]	@ (800fc5c <_Bfree+0x40>)
 800fc36:	218f      	movs	r1, #143	@ 0x8f
 800fc38:	f001 febe 	bl	80119b8 <__assert_func>
 800fc3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc40:	6006      	str	r6, [r0, #0]
 800fc42:	60c6      	str	r6, [r0, #12]
 800fc44:	b13c      	cbz	r4, 800fc56 <_Bfree+0x3a>
 800fc46:	69eb      	ldr	r3, [r5, #28]
 800fc48:	6862      	ldr	r2, [r4, #4]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc50:	6021      	str	r1, [r4, #0]
 800fc52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
 800fc58:	080123ea 	.word	0x080123ea
 800fc5c:	0801246a 	.word	0x0801246a

0800fc60 <__multadd>:
 800fc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc64:	690d      	ldr	r5, [r1, #16]
 800fc66:	4607      	mov	r7, r0
 800fc68:	460c      	mov	r4, r1
 800fc6a:	461e      	mov	r6, r3
 800fc6c:	f101 0c14 	add.w	ip, r1, #20
 800fc70:	2000      	movs	r0, #0
 800fc72:	f8dc 3000 	ldr.w	r3, [ip]
 800fc76:	b299      	uxth	r1, r3
 800fc78:	fb02 6101 	mla	r1, r2, r1, r6
 800fc7c:	0c1e      	lsrs	r6, r3, #16
 800fc7e:	0c0b      	lsrs	r3, r1, #16
 800fc80:	fb02 3306 	mla	r3, r2, r6, r3
 800fc84:	b289      	uxth	r1, r1
 800fc86:	3001      	adds	r0, #1
 800fc88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc8c:	4285      	cmp	r5, r0
 800fc8e:	f84c 1b04 	str.w	r1, [ip], #4
 800fc92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc96:	dcec      	bgt.n	800fc72 <__multadd+0x12>
 800fc98:	b30e      	cbz	r6, 800fcde <__multadd+0x7e>
 800fc9a:	68a3      	ldr	r3, [r4, #8]
 800fc9c:	42ab      	cmp	r3, r5
 800fc9e:	dc19      	bgt.n	800fcd4 <__multadd+0x74>
 800fca0:	6861      	ldr	r1, [r4, #4]
 800fca2:	4638      	mov	r0, r7
 800fca4:	3101      	adds	r1, #1
 800fca6:	f7ff ff79 	bl	800fb9c <_Balloc>
 800fcaa:	4680      	mov	r8, r0
 800fcac:	b928      	cbnz	r0, 800fcba <__multadd+0x5a>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	4b0c      	ldr	r3, [pc, #48]	@ (800fce4 <__multadd+0x84>)
 800fcb2:	480d      	ldr	r0, [pc, #52]	@ (800fce8 <__multadd+0x88>)
 800fcb4:	21ba      	movs	r1, #186	@ 0xba
 800fcb6:	f001 fe7f 	bl	80119b8 <__assert_func>
 800fcba:	6922      	ldr	r2, [r4, #16]
 800fcbc:	3202      	adds	r2, #2
 800fcbe:	f104 010c 	add.w	r1, r4, #12
 800fcc2:	0092      	lsls	r2, r2, #2
 800fcc4:	300c      	adds	r0, #12
 800fcc6:	f001 fe61 	bl	801198c <memcpy>
 800fcca:	4621      	mov	r1, r4
 800fccc:	4638      	mov	r0, r7
 800fcce:	f7ff ffa5 	bl	800fc1c <_Bfree>
 800fcd2:	4644      	mov	r4, r8
 800fcd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fcd8:	3501      	adds	r5, #1
 800fcda:	615e      	str	r6, [r3, #20]
 800fcdc:	6125      	str	r5, [r4, #16]
 800fcde:	4620      	mov	r0, r4
 800fce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fce4:	08012459 	.word	0x08012459
 800fce8:	0801246a 	.word	0x0801246a

0800fcec <__s2b>:
 800fcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcf0:	460c      	mov	r4, r1
 800fcf2:	4615      	mov	r5, r2
 800fcf4:	461f      	mov	r7, r3
 800fcf6:	2209      	movs	r2, #9
 800fcf8:	3308      	adds	r3, #8
 800fcfa:	4606      	mov	r6, r0
 800fcfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd00:	2100      	movs	r1, #0
 800fd02:	2201      	movs	r2, #1
 800fd04:	429a      	cmp	r2, r3
 800fd06:	db09      	blt.n	800fd1c <__s2b+0x30>
 800fd08:	4630      	mov	r0, r6
 800fd0a:	f7ff ff47 	bl	800fb9c <_Balloc>
 800fd0e:	b940      	cbnz	r0, 800fd22 <__s2b+0x36>
 800fd10:	4602      	mov	r2, r0
 800fd12:	4b19      	ldr	r3, [pc, #100]	@ (800fd78 <__s2b+0x8c>)
 800fd14:	4819      	ldr	r0, [pc, #100]	@ (800fd7c <__s2b+0x90>)
 800fd16:	21d3      	movs	r1, #211	@ 0xd3
 800fd18:	f001 fe4e 	bl	80119b8 <__assert_func>
 800fd1c:	0052      	lsls	r2, r2, #1
 800fd1e:	3101      	adds	r1, #1
 800fd20:	e7f0      	b.n	800fd04 <__s2b+0x18>
 800fd22:	9b08      	ldr	r3, [sp, #32]
 800fd24:	6143      	str	r3, [r0, #20]
 800fd26:	2d09      	cmp	r5, #9
 800fd28:	f04f 0301 	mov.w	r3, #1
 800fd2c:	6103      	str	r3, [r0, #16]
 800fd2e:	dd16      	ble.n	800fd5e <__s2b+0x72>
 800fd30:	f104 0909 	add.w	r9, r4, #9
 800fd34:	46c8      	mov	r8, r9
 800fd36:	442c      	add	r4, r5
 800fd38:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fd3c:	4601      	mov	r1, r0
 800fd3e:	3b30      	subs	r3, #48	@ 0x30
 800fd40:	220a      	movs	r2, #10
 800fd42:	4630      	mov	r0, r6
 800fd44:	f7ff ff8c 	bl	800fc60 <__multadd>
 800fd48:	45a0      	cmp	r8, r4
 800fd4a:	d1f5      	bne.n	800fd38 <__s2b+0x4c>
 800fd4c:	f1a5 0408 	sub.w	r4, r5, #8
 800fd50:	444c      	add	r4, r9
 800fd52:	1b2d      	subs	r5, r5, r4
 800fd54:	1963      	adds	r3, r4, r5
 800fd56:	42bb      	cmp	r3, r7
 800fd58:	db04      	blt.n	800fd64 <__s2b+0x78>
 800fd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd5e:	340a      	adds	r4, #10
 800fd60:	2509      	movs	r5, #9
 800fd62:	e7f6      	b.n	800fd52 <__s2b+0x66>
 800fd64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fd68:	4601      	mov	r1, r0
 800fd6a:	3b30      	subs	r3, #48	@ 0x30
 800fd6c:	220a      	movs	r2, #10
 800fd6e:	4630      	mov	r0, r6
 800fd70:	f7ff ff76 	bl	800fc60 <__multadd>
 800fd74:	e7ee      	b.n	800fd54 <__s2b+0x68>
 800fd76:	bf00      	nop
 800fd78:	08012459 	.word	0x08012459
 800fd7c:	0801246a 	.word	0x0801246a

0800fd80 <__hi0bits>:
 800fd80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fd84:	4603      	mov	r3, r0
 800fd86:	bf36      	itet	cc
 800fd88:	0403      	lslcc	r3, r0, #16
 800fd8a:	2000      	movcs	r0, #0
 800fd8c:	2010      	movcc	r0, #16
 800fd8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd92:	bf3c      	itt	cc
 800fd94:	021b      	lslcc	r3, r3, #8
 800fd96:	3008      	addcc	r0, #8
 800fd98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd9c:	bf3c      	itt	cc
 800fd9e:	011b      	lslcc	r3, r3, #4
 800fda0:	3004      	addcc	r0, #4
 800fda2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fda6:	bf3c      	itt	cc
 800fda8:	009b      	lslcc	r3, r3, #2
 800fdaa:	3002      	addcc	r0, #2
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	db05      	blt.n	800fdbc <__hi0bits+0x3c>
 800fdb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fdb4:	f100 0001 	add.w	r0, r0, #1
 800fdb8:	bf08      	it	eq
 800fdba:	2020      	moveq	r0, #32
 800fdbc:	4770      	bx	lr

0800fdbe <__lo0bits>:
 800fdbe:	6803      	ldr	r3, [r0, #0]
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	f013 0007 	ands.w	r0, r3, #7
 800fdc6:	d00b      	beq.n	800fde0 <__lo0bits+0x22>
 800fdc8:	07d9      	lsls	r1, r3, #31
 800fdca:	d421      	bmi.n	800fe10 <__lo0bits+0x52>
 800fdcc:	0798      	lsls	r0, r3, #30
 800fdce:	bf49      	itett	mi
 800fdd0:	085b      	lsrmi	r3, r3, #1
 800fdd2:	089b      	lsrpl	r3, r3, #2
 800fdd4:	2001      	movmi	r0, #1
 800fdd6:	6013      	strmi	r3, [r2, #0]
 800fdd8:	bf5c      	itt	pl
 800fdda:	6013      	strpl	r3, [r2, #0]
 800fddc:	2002      	movpl	r0, #2
 800fdde:	4770      	bx	lr
 800fde0:	b299      	uxth	r1, r3
 800fde2:	b909      	cbnz	r1, 800fde8 <__lo0bits+0x2a>
 800fde4:	0c1b      	lsrs	r3, r3, #16
 800fde6:	2010      	movs	r0, #16
 800fde8:	b2d9      	uxtb	r1, r3
 800fdea:	b909      	cbnz	r1, 800fdf0 <__lo0bits+0x32>
 800fdec:	3008      	adds	r0, #8
 800fdee:	0a1b      	lsrs	r3, r3, #8
 800fdf0:	0719      	lsls	r1, r3, #28
 800fdf2:	bf04      	itt	eq
 800fdf4:	091b      	lsreq	r3, r3, #4
 800fdf6:	3004      	addeq	r0, #4
 800fdf8:	0799      	lsls	r1, r3, #30
 800fdfa:	bf04      	itt	eq
 800fdfc:	089b      	lsreq	r3, r3, #2
 800fdfe:	3002      	addeq	r0, #2
 800fe00:	07d9      	lsls	r1, r3, #31
 800fe02:	d403      	bmi.n	800fe0c <__lo0bits+0x4e>
 800fe04:	085b      	lsrs	r3, r3, #1
 800fe06:	f100 0001 	add.w	r0, r0, #1
 800fe0a:	d003      	beq.n	800fe14 <__lo0bits+0x56>
 800fe0c:	6013      	str	r3, [r2, #0]
 800fe0e:	4770      	bx	lr
 800fe10:	2000      	movs	r0, #0
 800fe12:	4770      	bx	lr
 800fe14:	2020      	movs	r0, #32
 800fe16:	4770      	bx	lr

0800fe18 <__i2b>:
 800fe18:	b510      	push	{r4, lr}
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	2101      	movs	r1, #1
 800fe1e:	f7ff febd 	bl	800fb9c <_Balloc>
 800fe22:	4602      	mov	r2, r0
 800fe24:	b928      	cbnz	r0, 800fe32 <__i2b+0x1a>
 800fe26:	4b05      	ldr	r3, [pc, #20]	@ (800fe3c <__i2b+0x24>)
 800fe28:	4805      	ldr	r0, [pc, #20]	@ (800fe40 <__i2b+0x28>)
 800fe2a:	f240 1145 	movw	r1, #325	@ 0x145
 800fe2e:	f001 fdc3 	bl	80119b8 <__assert_func>
 800fe32:	2301      	movs	r3, #1
 800fe34:	6144      	str	r4, [r0, #20]
 800fe36:	6103      	str	r3, [r0, #16]
 800fe38:	bd10      	pop	{r4, pc}
 800fe3a:	bf00      	nop
 800fe3c:	08012459 	.word	0x08012459
 800fe40:	0801246a 	.word	0x0801246a

0800fe44 <__multiply>:
 800fe44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe48:	4614      	mov	r4, r2
 800fe4a:	690a      	ldr	r2, [r1, #16]
 800fe4c:	6923      	ldr	r3, [r4, #16]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	bfa8      	it	ge
 800fe52:	4623      	movge	r3, r4
 800fe54:	460f      	mov	r7, r1
 800fe56:	bfa4      	itt	ge
 800fe58:	460c      	movge	r4, r1
 800fe5a:	461f      	movge	r7, r3
 800fe5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fe60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fe64:	68a3      	ldr	r3, [r4, #8]
 800fe66:	6861      	ldr	r1, [r4, #4]
 800fe68:	eb0a 0609 	add.w	r6, sl, r9
 800fe6c:	42b3      	cmp	r3, r6
 800fe6e:	b085      	sub	sp, #20
 800fe70:	bfb8      	it	lt
 800fe72:	3101      	addlt	r1, #1
 800fe74:	f7ff fe92 	bl	800fb9c <_Balloc>
 800fe78:	b930      	cbnz	r0, 800fe88 <__multiply+0x44>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	4b44      	ldr	r3, [pc, #272]	@ (800ff90 <__multiply+0x14c>)
 800fe7e:	4845      	ldr	r0, [pc, #276]	@ (800ff94 <__multiply+0x150>)
 800fe80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fe84:	f001 fd98 	bl	80119b8 <__assert_func>
 800fe88:	f100 0514 	add.w	r5, r0, #20
 800fe8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe90:	462b      	mov	r3, r5
 800fe92:	2200      	movs	r2, #0
 800fe94:	4543      	cmp	r3, r8
 800fe96:	d321      	bcc.n	800fedc <__multiply+0x98>
 800fe98:	f107 0114 	add.w	r1, r7, #20
 800fe9c:	f104 0214 	add.w	r2, r4, #20
 800fea0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fea4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fea8:	9302      	str	r3, [sp, #8]
 800feaa:	1b13      	subs	r3, r2, r4
 800feac:	3b15      	subs	r3, #21
 800feae:	f023 0303 	bic.w	r3, r3, #3
 800feb2:	3304      	adds	r3, #4
 800feb4:	f104 0715 	add.w	r7, r4, #21
 800feb8:	42ba      	cmp	r2, r7
 800feba:	bf38      	it	cc
 800febc:	2304      	movcc	r3, #4
 800febe:	9301      	str	r3, [sp, #4]
 800fec0:	9b02      	ldr	r3, [sp, #8]
 800fec2:	9103      	str	r1, [sp, #12]
 800fec4:	428b      	cmp	r3, r1
 800fec6:	d80c      	bhi.n	800fee2 <__multiply+0x9e>
 800fec8:	2e00      	cmp	r6, #0
 800feca:	dd03      	ble.n	800fed4 <__multiply+0x90>
 800fecc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d05b      	beq.n	800ff8c <__multiply+0x148>
 800fed4:	6106      	str	r6, [r0, #16]
 800fed6:	b005      	add	sp, #20
 800fed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fedc:	f843 2b04 	str.w	r2, [r3], #4
 800fee0:	e7d8      	b.n	800fe94 <__multiply+0x50>
 800fee2:	f8b1 a000 	ldrh.w	sl, [r1]
 800fee6:	f1ba 0f00 	cmp.w	sl, #0
 800feea:	d024      	beq.n	800ff36 <__multiply+0xf2>
 800feec:	f104 0e14 	add.w	lr, r4, #20
 800fef0:	46a9      	mov	r9, r5
 800fef2:	f04f 0c00 	mov.w	ip, #0
 800fef6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fefa:	f8d9 3000 	ldr.w	r3, [r9]
 800fefe:	fa1f fb87 	uxth.w	fp, r7
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	fb0a 330b 	mla	r3, sl, fp, r3
 800ff08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ff0c:	f8d9 7000 	ldr.w	r7, [r9]
 800ff10:	4463      	add	r3, ip
 800ff12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ff16:	fb0a c70b 	mla	r7, sl, fp, ip
 800ff1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ff24:	4572      	cmp	r2, lr
 800ff26:	f849 3b04 	str.w	r3, [r9], #4
 800ff2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ff2e:	d8e2      	bhi.n	800fef6 <__multiply+0xb2>
 800ff30:	9b01      	ldr	r3, [sp, #4]
 800ff32:	f845 c003 	str.w	ip, [r5, r3]
 800ff36:	9b03      	ldr	r3, [sp, #12]
 800ff38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff3c:	3104      	adds	r1, #4
 800ff3e:	f1b9 0f00 	cmp.w	r9, #0
 800ff42:	d021      	beq.n	800ff88 <__multiply+0x144>
 800ff44:	682b      	ldr	r3, [r5, #0]
 800ff46:	f104 0c14 	add.w	ip, r4, #20
 800ff4a:	46ae      	mov	lr, r5
 800ff4c:	f04f 0a00 	mov.w	sl, #0
 800ff50:	f8bc b000 	ldrh.w	fp, [ip]
 800ff54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ff58:	fb09 770b 	mla	r7, r9, fp, r7
 800ff5c:	4457      	add	r7, sl
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ff64:	f84e 3b04 	str.w	r3, [lr], #4
 800ff68:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ff6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff70:	f8be 3000 	ldrh.w	r3, [lr]
 800ff74:	fb09 330a 	mla	r3, r9, sl, r3
 800ff78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ff7c:	4562      	cmp	r2, ip
 800ff7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff82:	d8e5      	bhi.n	800ff50 <__multiply+0x10c>
 800ff84:	9f01      	ldr	r7, [sp, #4]
 800ff86:	51eb      	str	r3, [r5, r7]
 800ff88:	3504      	adds	r5, #4
 800ff8a:	e799      	b.n	800fec0 <__multiply+0x7c>
 800ff8c:	3e01      	subs	r6, #1
 800ff8e:	e79b      	b.n	800fec8 <__multiply+0x84>
 800ff90:	08012459 	.word	0x08012459
 800ff94:	0801246a 	.word	0x0801246a

0800ff98 <__pow5mult>:
 800ff98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff9c:	4615      	mov	r5, r2
 800ff9e:	f012 0203 	ands.w	r2, r2, #3
 800ffa2:	4607      	mov	r7, r0
 800ffa4:	460e      	mov	r6, r1
 800ffa6:	d007      	beq.n	800ffb8 <__pow5mult+0x20>
 800ffa8:	4c25      	ldr	r4, [pc, #148]	@ (8010040 <__pow5mult+0xa8>)
 800ffaa:	3a01      	subs	r2, #1
 800ffac:	2300      	movs	r3, #0
 800ffae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ffb2:	f7ff fe55 	bl	800fc60 <__multadd>
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	10ad      	asrs	r5, r5, #2
 800ffba:	d03d      	beq.n	8010038 <__pow5mult+0xa0>
 800ffbc:	69fc      	ldr	r4, [r7, #28]
 800ffbe:	b97c      	cbnz	r4, 800ffe0 <__pow5mult+0x48>
 800ffc0:	2010      	movs	r0, #16
 800ffc2:	f7ff fd35 	bl	800fa30 <malloc>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	61f8      	str	r0, [r7, #28]
 800ffca:	b928      	cbnz	r0, 800ffd8 <__pow5mult+0x40>
 800ffcc:	4b1d      	ldr	r3, [pc, #116]	@ (8010044 <__pow5mult+0xac>)
 800ffce:	481e      	ldr	r0, [pc, #120]	@ (8010048 <__pow5mult+0xb0>)
 800ffd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ffd4:	f001 fcf0 	bl	80119b8 <__assert_func>
 800ffd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffdc:	6004      	str	r4, [r0, #0]
 800ffde:	60c4      	str	r4, [r0, #12]
 800ffe0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ffe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffe8:	b94c      	cbnz	r4, 800fffe <__pow5mult+0x66>
 800ffea:	f240 2171 	movw	r1, #625	@ 0x271
 800ffee:	4638      	mov	r0, r7
 800fff0:	f7ff ff12 	bl	800fe18 <__i2b>
 800fff4:	2300      	movs	r3, #0
 800fff6:	f8c8 0008 	str.w	r0, [r8, #8]
 800fffa:	4604      	mov	r4, r0
 800fffc:	6003      	str	r3, [r0, #0]
 800fffe:	f04f 0900 	mov.w	r9, #0
 8010002:	07eb      	lsls	r3, r5, #31
 8010004:	d50a      	bpl.n	801001c <__pow5mult+0x84>
 8010006:	4631      	mov	r1, r6
 8010008:	4622      	mov	r2, r4
 801000a:	4638      	mov	r0, r7
 801000c:	f7ff ff1a 	bl	800fe44 <__multiply>
 8010010:	4631      	mov	r1, r6
 8010012:	4680      	mov	r8, r0
 8010014:	4638      	mov	r0, r7
 8010016:	f7ff fe01 	bl	800fc1c <_Bfree>
 801001a:	4646      	mov	r6, r8
 801001c:	106d      	asrs	r5, r5, #1
 801001e:	d00b      	beq.n	8010038 <__pow5mult+0xa0>
 8010020:	6820      	ldr	r0, [r4, #0]
 8010022:	b938      	cbnz	r0, 8010034 <__pow5mult+0x9c>
 8010024:	4622      	mov	r2, r4
 8010026:	4621      	mov	r1, r4
 8010028:	4638      	mov	r0, r7
 801002a:	f7ff ff0b 	bl	800fe44 <__multiply>
 801002e:	6020      	str	r0, [r4, #0]
 8010030:	f8c0 9000 	str.w	r9, [r0]
 8010034:	4604      	mov	r4, r0
 8010036:	e7e4      	b.n	8010002 <__pow5mult+0x6a>
 8010038:	4630      	mov	r0, r6
 801003a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801003e:	bf00      	nop
 8010040:	080124c4 	.word	0x080124c4
 8010044:	080123ea 	.word	0x080123ea
 8010048:	0801246a 	.word	0x0801246a

0801004c <__lshift>:
 801004c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010050:	460c      	mov	r4, r1
 8010052:	6849      	ldr	r1, [r1, #4]
 8010054:	6923      	ldr	r3, [r4, #16]
 8010056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801005a:	68a3      	ldr	r3, [r4, #8]
 801005c:	4607      	mov	r7, r0
 801005e:	4691      	mov	r9, r2
 8010060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010064:	f108 0601 	add.w	r6, r8, #1
 8010068:	42b3      	cmp	r3, r6
 801006a:	db0b      	blt.n	8010084 <__lshift+0x38>
 801006c:	4638      	mov	r0, r7
 801006e:	f7ff fd95 	bl	800fb9c <_Balloc>
 8010072:	4605      	mov	r5, r0
 8010074:	b948      	cbnz	r0, 801008a <__lshift+0x3e>
 8010076:	4602      	mov	r2, r0
 8010078:	4b28      	ldr	r3, [pc, #160]	@ (801011c <__lshift+0xd0>)
 801007a:	4829      	ldr	r0, [pc, #164]	@ (8010120 <__lshift+0xd4>)
 801007c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010080:	f001 fc9a 	bl	80119b8 <__assert_func>
 8010084:	3101      	adds	r1, #1
 8010086:	005b      	lsls	r3, r3, #1
 8010088:	e7ee      	b.n	8010068 <__lshift+0x1c>
 801008a:	2300      	movs	r3, #0
 801008c:	f100 0114 	add.w	r1, r0, #20
 8010090:	f100 0210 	add.w	r2, r0, #16
 8010094:	4618      	mov	r0, r3
 8010096:	4553      	cmp	r3, sl
 8010098:	db33      	blt.n	8010102 <__lshift+0xb6>
 801009a:	6920      	ldr	r0, [r4, #16]
 801009c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80100a0:	f104 0314 	add.w	r3, r4, #20
 80100a4:	f019 091f 	ands.w	r9, r9, #31
 80100a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80100ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80100b0:	d02b      	beq.n	801010a <__lshift+0xbe>
 80100b2:	f1c9 0e20 	rsb	lr, r9, #32
 80100b6:	468a      	mov	sl, r1
 80100b8:	2200      	movs	r2, #0
 80100ba:	6818      	ldr	r0, [r3, #0]
 80100bc:	fa00 f009 	lsl.w	r0, r0, r9
 80100c0:	4310      	orrs	r0, r2
 80100c2:	f84a 0b04 	str.w	r0, [sl], #4
 80100c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80100ca:	459c      	cmp	ip, r3
 80100cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80100d0:	d8f3      	bhi.n	80100ba <__lshift+0x6e>
 80100d2:	ebac 0304 	sub.w	r3, ip, r4
 80100d6:	3b15      	subs	r3, #21
 80100d8:	f023 0303 	bic.w	r3, r3, #3
 80100dc:	3304      	adds	r3, #4
 80100de:	f104 0015 	add.w	r0, r4, #21
 80100e2:	4584      	cmp	ip, r0
 80100e4:	bf38      	it	cc
 80100e6:	2304      	movcc	r3, #4
 80100e8:	50ca      	str	r2, [r1, r3]
 80100ea:	b10a      	cbz	r2, 80100f0 <__lshift+0xa4>
 80100ec:	f108 0602 	add.w	r6, r8, #2
 80100f0:	3e01      	subs	r6, #1
 80100f2:	4638      	mov	r0, r7
 80100f4:	612e      	str	r6, [r5, #16]
 80100f6:	4621      	mov	r1, r4
 80100f8:	f7ff fd90 	bl	800fc1c <_Bfree>
 80100fc:	4628      	mov	r0, r5
 80100fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010102:	f842 0f04 	str.w	r0, [r2, #4]!
 8010106:	3301      	adds	r3, #1
 8010108:	e7c5      	b.n	8010096 <__lshift+0x4a>
 801010a:	3904      	subs	r1, #4
 801010c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010110:	f841 2f04 	str.w	r2, [r1, #4]!
 8010114:	459c      	cmp	ip, r3
 8010116:	d8f9      	bhi.n	801010c <__lshift+0xc0>
 8010118:	e7ea      	b.n	80100f0 <__lshift+0xa4>
 801011a:	bf00      	nop
 801011c:	08012459 	.word	0x08012459
 8010120:	0801246a 	.word	0x0801246a

08010124 <__mcmp>:
 8010124:	690a      	ldr	r2, [r1, #16]
 8010126:	4603      	mov	r3, r0
 8010128:	6900      	ldr	r0, [r0, #16]
 801012a:	1a80      	subs	r0, r0, r2
 801012c:	b530      	push	{r4, r5, lr}
 801012e:	d10e      	bne.n	801014e <__mcmp+0x2a>
 8010130:	3314      	adds	r3, #20
 8010132:	3114      	adds	r1, #20
 8010134:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801013c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010144:	4295      	cmp	r5, r2
 8010146:	d003      	beq.n	8010150 <__mcmp+0x2c>
 8010148:	d205      	bcs.n	8010156 <__mcmp+0x32>
 801014a:	f04f 30ff 	mov.w	r0, #4294967295
 801014e:	bd30      	pop	{r4, r5, pc}
 8010150:	42a3      	cmp	r3, r4
 8010152:	d3f3      	bcc.n	801013c <__mcmp+0x18>
 8010154:	e7fb      	b.n	801014e <__mcmp+0x2a>
 8010156:	2001      	movs	r0, #1
 8010158:	e7f9      	b.n	801014e <__mcmp+0x2a>
	...

0801015c <__mdiff>:
 801015c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010160:	4689      	mov	r9, r1
 8010162:	4606      	mov	r6, r0
 8010164:	4611      	mov	r1, r2
 8010166:	4648      	mov	r0, r9
 8010168:	4614      	mov	r4, r2
 801016a:	f7ff ffdb 	bl	8010124 <__mcmp>
 801016e:	1e05      	subs	r5, r0, #0
 8010170:	d112      	bne.n	8010198 <__mdiff+0x3c>
 8010172:	4629      	mov	r1, r5
 8010174:	4630      	mov	r0, r6
 8010176:	f7ff fd11 	bl	800fb9c <_Balloc>
 801017a:	4602      	mov	r2, r0
 801017c:	b928      	cbnz	r0, 801018a <__mdiff+0x2e>
 801017e:	4b3f      	ldr	r3, [pc, #252]	@ (801027c <__mdiff+0x120>)
 8010180:	f240 2137 	movw	r1, #567	@ 0x237
 8010184:	483e      	ldr	r0, [pc, #248]	@ (8010280 <__mdiff+0x124>)
 8010186:	f001 fc17 	bl	80119b8 <__assert_func>
 801018a:	2301      	movs	r3, #1
 801018c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010190:	4610      	mov	r0, r2
 8010192:	b003      	add	sp, #12
 8010194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010198:	bfbc      	itt	lt
 801019a:	464b      	movlt	r3, r9
 801019c:	46a1      	movlt	r9, r4
 801019e:	4630      	mov	r0, r6
 80101a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80101a4:	bfba      	itte	lt
 80101a6:	461c      	movlt	r4, r3
 80101a8:	2501      	movlt	r5, #1
 80101aa:	2500      	movge	r5, #0
 80101ac:	f7ff fcf6 	bl	800fb9c <_Balloc>
 80101b0:	4602      	mov	r2, r0
 80101b2:	b918      	cbnz	r0, 80101bc <__mdiff+0x60>
 80101b4:	4b31      	ldr	r3, [pc, #196]	@ (801027c <__mdiff+0x120>)
 80101b6:	f240 2145 	movw	r1, #581	@ 0x245
 80101ba:	e7e3      	b.n	8010184 <__mdiff+0x28>
 80101bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80101c0:	6926      	ldr	r6, [r4, #16]
 80101c2:	60c5      	str	r5, [r0, #12]
 80101c4:	f109 0310 	add.w	r3, r9, #16
 80101c8:	f109 0514 	add.w	r5, r9, #20
 80101cc:	f104 0e14 	add.w	lr, r4, #20
 80101d0:	f100 0b14 	add.w	fp, r0, #20
 80101d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80101d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80101dc:	9301      	str	r3, [sp, #4]
 80101de:	46d9      	mov	r9, fp
 80101e0:	f04f 0c00 	mov.w	ip, #0
 80101e4:	9b01      	ldr	r3, [sp, #4]
 80101e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80101ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80101ee:	9301      	str	r3, [sp, #4]
 80101f0:	fa1f f38a 	uxth.w	r3, sl
 80101f4:	4619      	mov	r1, r3
 80101f6:	b283      	uxth	r3, r0
 80101f8:	1acb      	subs	r3, r1, r3
 80101fa:	0c00      	lsrs	r0, r0, #16
 80101fc:	4463      	add	r3, ip
 80101fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010202:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010206:	b29b      	uxth	r3, r3
 8010208:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801020c:	4576      	cmp	r6, lr
 801020e:	f849 3b04 	str.w	r3, [r9], #4
 8010212:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010216:	d8e5      	bhi.n	80101e4 <__mdiff+0x88>
 8010218:	1b33      	subs	r3, r6, r4
 801021a:	3b15      	subs	r3, #21
 801021c:	f023 0303 	bic.w	r3, r3, #3
 8010220:	3415      	adds	r4, #21
 8010222:	3304      	adds	r3, #4
 8010224:	42a6      	cmp	r6, r4
 8010226:	bf38      	it	cc
 8010228:	2304      	movcc	r3, #4
 801022a:	441d      	add	r5, r3
 801022c:	445b      	add	r3, fp
 801022e:	461e      	mov	r6, r3
 8010230:	462c      	mov	r4, r5
 8010232:	4544      	cmp	r4, r8
 8010234:	d30e      	bcc.n	8010254 <__mdiff+0xf8>
 8010236:	f108 0103 	add.w	r1, r8, #3
 801023a:	1b49      	subs	r1, r1, r5
 801023c:	f021 0103 	bic.w	r1, r1, #3
 8010240:	3d03      	subs	r5, #3
 8010242:	45a8      	cmp	r8, r5
 8010244:	bf38      	it	cc
 8010246:	2100      	movcc	r1, #0
 8010248:	440b      	add	r3, r1
 801024a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801024e:	b191      	cbz	r1, 8010276 <__mdiff+0x11a>
 8010250:	6117      	str	r7, [r2, #16]
 8010252:	e79d      	b.n	8010190 <__mdiff+0x34>
 8010254:	f854 1b04 	ldr.w	r1, [r4], #4
 8010258:	46e6      	mov	lr, ip
 801025a:	0c08      	lsrs	r0, r1, #16
 801025c:	fa1c fc81 	uxtah	ip, ip, r1
 8010260:	4471      	add	r1, lr
 8010262:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010266:	b289      	uxth	r1, r1
 8010268:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801026c:	f846 1b04 	str.w	r1, [r6], #4
 8010270:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010274:	e7dd      	b.n	8010232 <__mdiff+0xd6>
 8010276:	3f01      	subs	r7, #1
 8010278:	e7e7      	b.n	801024a <__mdiff+0xee>
 801027a:	bf00      	nop
 801027c:	08012459 	.word	0x08012459
 8010280:	0801246a 	.word	0x0801246a

08010284 <__ulp>:
 8010284:	b082      	sub	sp, #8
 8010286:	ed8d 0b00 	vstr	d0, [sp]
 801028a:	9a01      	ldr	r2, [sp, #4]
 801028c:	4b0f      	ldr	r3, [pc, #60]	@ (80102cc <__ulp+0x48>)
 801028e:	4013      	ands	r3, r2
 8010290:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010294:	2b00      	cmp	r3, #0
 8010296:	dc08      	bgt.n	80102aa <__ulp+0x26>
 8010298:	425b      	negs	r3, r3
 801029a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801029e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80102a2:	da04      	bge.n	80102ae <__ulp+0x2a>
 80102a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80102a8:	4113      	asrs	r3, r2
 80102aa:	2200      	movs	r2, #0
 80102ac:	e008      	b.n	80102c0 <__ulp+0x3c>
 80102ae:	f1a2 0314 	sub.w	r3, r2, #20
 80102b2:	2b1e      	cmp	r3, #30
 80102b4:	bfda      	itte	le
 80102b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80102ba:	40da      	lsrle	r2, r3
 80102bc:	2201      	movgt	r2, #1
 80102be:	2300      	movs	r3, #0
 80102c0:	4619      	mov	r1, r3
 80102c2:	4610      	mov	r0, r2
 80102c4:	ec41 0b10 	vmov	d0, r0, r1
 80102c8:	b002      	add	sp, #8
 80102ca:	4770      	bx	lr
 80102cc:	7ff00000 	.word	0x7ff00000

080102d0 <__b2d>:
 80102d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	6906      	ldr	r6, [r0, #16]
 80102d6:	f100 0814 	add.w	r8, r0, #20
 80102da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80102de:	1f37      	subs	r7, r6, #4
 80102e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80102e4:	4610      	mov	r0, r2
 80102e6:	f7ff fd4b 	bl	800fd80 <__hi0bits>
 80102ea:	f1c0 0320 	rsb	r3, r0, #32
 80102ee:	280a      	cmp	r0, #10
 80102f0:	600b      	str	r3, [r1, #0]
 80102f2:	491b      	ldr	r1, [pc, #108]	@ (8010360 <__b2d+0x90>)
 80102f4:	dc15      	bgt.n	8010322 <__b2d+0x52>
 80102f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80102fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80102fe:	45b8      	cmp	r8, r7
 8010300:	ea43 0501 	orr.w	r5, r3, r1
 8010304:	bf34      	ite	cc
 8010306:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801030a:	2300      	movcs	r3, #0
 801030c:	3015      	adds	r0, #21
 801030e:	fa02 f000 	lsl.w	r0, r2, r0
 8010312:	fa23 f30c 	lsr.w	r3, r3, ip
 8010316:	4303      	orrs	r3, r0
 8010318:	461c      	mov	r4, r3
 801031a:	ec45 4b10 	vmov	d0, r4, r5
 801031e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010322:	45b8      	cmp	r8, r7
 8010324:	bf3a      	itte	cc
 8010326:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801032a:	f1a6 0708 	subcc.w	r7, r6, #8
 801032e:	2300      	movcs	r3, #0
 8010330:	380b      	subs	r0, #11
 8010332:	d012      	beq.n	801035a <__b2d+0x8a>
 8010334:	f1c0 0120 	rsb	r1, r0, #32
 8010338:	fa23 f401 	lsr.w	r4, r3, r1
 801033c:	4082      	lsls	r2, r0
 801033e:	4322      	orrs	r2, r4
 8010340:	4547      	cmp	r7, r8
 8010342:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010346:	bf8c      	ite	hi
 8010348:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801034c:	2200      	movls	r2, #0
 801034e:	4083      	lsls	r3, r0
 8010350:	40ca      	lsrs	r2, r1
 8010352:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010356:	4313      	orrs	r3, r2
 8010358:	e7de      	b.n	8010318 <__b2d+0x48>
 801035a:	ea42 0501 	orr.w	r5, r2, r1
 801035e:	e7db      	b.n	8010318 <__b2d+0x48>
 8010360:	3ff00000 	.word	0x3ff00000

08010364 <__d2b>:
 8010364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010368:	460f      	mov	r7, r1
 801036a:	2101      	movs	r1, #1
 801036c:	ec59 8b10 	vmov	r8, r9, d0
 8010370:	4616      	mov	r6, r2
 8010372:	f7ff fc13 	bl	800fb9c <_Balloc>
 8010376:	4604      	mov	r4, r0
 8010378:	b930      	cbnz	r0, 8010388 <__d2b+0x24>
 801037a:	4602      	mov	r2, r0
 801037c:	4b23      	ldr	r3, [pc, #140]	@ (801040c <__d2b+0xa8>)
 801037e:	4824      	ldr	r0, [pc, #144]	@ (8010410 <__d2b+0xac>)
 8010380:	f240 310f 	movw	r1, #783	@ 0x30f
 8010384:	f001 fb18 	bl	80119b8 <__assert_func>
 8010388:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801038c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010390:	b10d      	cbz	r5, 8010396 <__d2b+0x32>
 8010392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010396:	9301      	str	r3, [sp, #4]
 8010398:	f1b8 0300 	subs.w	r3, r8, #0
 801039c:	d023      	beq.n	80103e6 <__d2b+0x82>
 801039e:	4668      	mov	r0, sp
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	f7ff fd0c 	bl	800fdbe <__lo0bits>
 80103a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80103aa:	b1d0      	cbz	r0, 80103e2 <__d2b+0x7e>
 80103ac:	f1c0 0320 	rsb	r3, r0, #32
 80103b0:	fa02 f303 	lsl.w	r3, r2, r3
 80103b4:	430b      	orrs	r3, r1
 80103b6:	40c2      	lsrs	r2, r0
 80103b8:	6163      	str	r3, [r4, #20]
 80103ba:	9201      	str	r2, [sp, #4]
 80103bc:	9b01      	ldr	r3, [sp, #4]
 80103be:	61a3      	str	r3, [r4, #24]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	bf0c      	ite	eq
 80103c4:	2201      	moveq	r2, #1
 80103c6:	2202      	movne	r2, #2
 80103c8:	6122      	str	r2, [r4, #16]
 80103ca:	b1a5      	cbz	r5, 80103f6 <__d2b+0x92>
 80103cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80103d0:	4405      	add	r5, r0
 80103d2:	603d      	str	r5, [r7, #0]
 80103d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80103d8:	6030      	str	r0, [r6, #0]
 80103da:	4620      	mov	r0, r4
 80103dc:	b003      	add	sp, #12
 80103de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103e2:	6161      	str	r1, [r4, #20]
 80103e4:	e7ea      	b.n	80103bc <__d2b+0x58>
 80103e6:	a801      	add	r0, sp, #4
 80103e8:	f7ff fce9 	bl	800fdbe <__lo0bits>
 80103ec:	9b01      	ldr	r3, [sp, #4]
 80103ee:	6163      	str	r3, [r4, #20]
 80103f0:	3020      	adds	r0, #32
 80103f2:	2201      	movs	r2, #1
 80103f4:	e7e8      	b.n	80103c8 <__d2b+0x64>
 80103f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80103fe:	6038      	str	r0, [r7, #0]
 8010400:	6918      	ldr	r0, [r3, #16]
 8010402:	f7ff fcbd 	bl	800fd80 <__hi0bits>
 8010406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801040a:	e7e5      	b.n	80103d8 <__d2b+0x74>
 801040c:	08012459 	.word	0x08012459
 8010410:	0801246a 	.word	0x0801246a

08010414 <__ratio>:
 8010414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010418:	4688      	mov	r8, r1
 801041a:	4669      	mov	r1, sp
 801041c:	4681      	mov	r9, r0
 801041e:	f7ff ff57 	bl	80102d0 <__b2d>
 8010422:	a901      	add	r1, sp, #4
 8010424:	4640      	mov	r0, r8
 8010426:	ec55 4b10 	vmov	r4, r5, d0
 801042a:	f7ff ff51 	bl	80102d0 <__b2d>
 801042e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010432:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010436:	1ad2      	subs	r2, r2, r3
 8010438:	e9dd 3100 	ldrd	r3, r1, [sp]
 801043c:	1a5b      	subs	r3, r3, r1
 801043e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8010442:	ec57 6b10 	vmov	r6, r7, d0
 8010446:	2b00      	cmp	r3, #0
 8010448:	bfd6      	itet	le
 801044a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801044e:	462a      	movgt	r2, r5
 8010450:	463a      	movle	r2, r7
 8010452:	46ab      	mov	fp, r5
 8010454:	46a2      	mov	sl, r4
 8010456:	bfce      	itee	gt
 8010458:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801045c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010460:	ee00 3a90 	vmovle	s1, r3
 8010464:	ec4b ab17 	vmov	d7, sl, fp
 8010468:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801046c:	b003      	add	sp, #12
 801046e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010472 <__copybits>:
 8010472:	3901      	subs	r1, #1
 8010474:	b570      	push	{r4, r5, r6, lr}
 8010476:	1149      	asrs	r1, r1, #5
 8010478:	6914      	ldr	r4, [r2, #16]
 801047a:	3101      	adds	r1, #1
 801047c:	f102 0314 	add.w	r3, r2, #20
 8010480:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010484:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010488:	1f05      	subs	r5, r0, #4
 801048a:	42a3      	cmp	r3, r4
 801048c:	d30c      	bcc.n	80104a8 <__copybits+0x36>
 801048e:	1aa3      	subs	r3, r4, r2
 8010490:	3b11      	subs	r3, #17
 8010492:	f023 0303 	bic.w	r3, r3, #3
 8010496:	3211      	adds	r2, #17
 8010498:	42a2      	cmp	r2, r4
 801049a:	bf88      	it	hi
 801049c:	2300      	movhi	r3, #0
 801049e:	4418      	add	r0, r3
 80104a0:	2300      	movs	r3, #0
 80104a2:	4288      	cmp	r0, r1
 80104a4:	d305      	bcc.n	80104b2 <__copybits+0x40>
 80104a6:	bd70      	pop	{r4, r5, r6, pc}
 80104a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80104ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80104b0:	e7eb      	b.n	801048a <__copybits+0x18>
 80104b2:	f840 3b04 	str.w	r3, [r0], #4
 80104b6:	e7f4      	b.n	80104a2 <__copybits+0x30>

080104b8 <__any_on>:
 80104b8:	f100 0214 	add.w	r2, r0, #20
 80104bc:	6900      	ldr	r0, [r0, #16]
 80104be:	114b      	asrs	r3, r1, #5
 80104c0:	4298      	cmp	r0, r3
 80104c2:	b510      	push	{r4, lr}
 80104c4:	db11      	blt.n	80104ea <__any_on+0x32>
 80104c6:	dd0a      	ble.n	80104de <__any_on+0x26>
 80104c8:	f011 011f 	ands.w	r1, r1, #31
 80104cc:	d007      	beq.n	80104de <__any_on+0x26>
 80104ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80104d2:	fa24 f001 	lsr.w	r0, r4, r1
 80104d6:	fa00 f101 	lsl.w	r1, r0, r1
 80104da:	428c      	cmp	r4, r1
 80104dc:	d10b      	bne.n	80104f6 <__any_on+0x3e>
 80104de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d803      	bhi.n	80104ee <__any_on+0x36>
 80104e6:	2000      	movs	r0, #0
 80104e8:	bd10      	pop	{r4, pc}
 80104ea:	4603      	mov	r3, r0
 80104ec:	e7f7      	b.n	80104de <__any_on+0x26>
 80104ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104f2:	2900      	cmp	r1, #0
 80104f4:	d0f5      	beq.n	80104e2 <__any_on+0x2a>
 80104f6:	2001      	movs	r0, #1
 80104f8:	e7f6      	b.n	80104e8 <__any_on+0x30>

080104fa <sulp>:
 80104fa:	b570      	push	{r4, r5, r6, lr}
 80104fc:	4604      	mov	r4, r0
 80104fe:	460d      	mov	r5, r1
 8010500:	4616      	mov	r6, r2
 8010502:	ec45 4b10 	vmov	d0, r4, r5
 8010506:	f7ff febd 	bl	8010284 <__ulp>
 801050a:	b17e      	cbz	r6, 801052c <sulp+0x32>
 801050c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010510:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010514:	2b00      	cmp	r3, #0
 8010516:	dd09      	ble.n	801052c <sulp+0x32>
 8010518:	051b      	lsls	r3, r3, #20
 801051a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801051e:	2000      	movs	r0, #0
 8010520:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8010524:	ec41 0b17 	vmov	d7, r0, r1
 8010528:	ee20 0b07 	vmul.f64	d0, d0, d7
 801052c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010530 <_strtod_l>:
 8010530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010534:	ed2d 8b0a 	vpush	{d8-d12}
 8010538:	b097      	sub	sp, #92	@ 0x5c
 801053a:	4688      	mov	r8, r1
 801053c:	920e      	str	r2, [sp, #56]	@ 0x38
 801053e:	2200      	movs	r2, #0
 8010540:	9212      	str	r2, [sp, #72]	@ 0x48
 8010542:	9005      	str	r0, [sp, #20]
 8010544:	f04f 0a00 	mov.w	sl, #0
 8010548:	f04f 0b00 	mov.w	fp, #0
 801054c:	460a      	mov	r2, r1
 801054e:	9211      	str	r2, [sp, #68]	@ 0x44
 8010550:	7811      	ldrb	r1, [r2, #0]
 8010552:	292b      	cmp	r1, #43	@ 0x2b
 8010554:	d04c      	beq.n	80105f0 <_strtod_l+0xc0>
 8010556:	d839      	bhi.n	80105cc <_strtod_l+0x9c>
 8010558:	290d      	cmp	r1, #13
 801055a:	d833      	bhi.n	80105c4 <_strtod_l+0x94>
 801055c:	2908      	cmp	r1, #8
 801055e:	d833      	bhi.n	80105c8 <_strtod_l+0x98>
 8010560:	2900      	cmp	r1, #0
 8010562:	d03c      	beq.n	80105de <_strtod_l+0xae>
 8010564:	2200      	movs	r2, #0
 8010566:	9208      	str	r2, [sp, #32]
 8010568:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801056a:	782a      	ldrb	r2, [r5, #0]
 801056c:	2a30      	cmp	r2, #48	@ 0x30
 801056e:	f040 80b5 	bne.w	80106dc <_strtod_l+0x1ac>
 8010572:	786a      	ldrb	r2, [r5, #1]
 8010574:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010578:	2a58      	cmp	r2, #88	@ 0x58
 801057a:	d170      	bne.n	801065e <_strtod_l+0x12e>
 801057c:	9302      	str	r3, [sp, #8]
 801057e:	9b08      	ldr	r3, [sp, #32]
 8010580:	9301      	str	r3, [sp, #4]
 8010582:	ab12      	add	r3, sp, #72	@ 0x48
 8010584:	9300      	str	r3, [sp, #0]
 8010586:	4a8b      	ldr	r2, [pc, #556]	@ (80107b4 <_strtod_l+0x284>)
 8010588:	9805      	ldr	r0, [sp, #20]
 801058a:	ab13      	add	r3, sp, #76	@ 0x4c
 801058c:	a911      	add	r1, sp, #68	@ 0x44
 801058e:	f001 faad 	bl	8011aec <__gethex>
 8010592:	f010 060f 	ands.w	r6, r0, #15
 8010596:	4604      	mov	r4, r0
 8010598:	d005      	beq.n	80105a6 <_strtod_l+0x76>
 801059a:	2e06      	cmp	r6, #6
 801059c:	d12a      	bne.n	80105f4 <_strtod_l+0xc4>
 801059e:	3501      	adds	r5, #1
 80105a0:	2300      	movs	r3, #0
 80105a2:	9511      	str	r5, [sp, #68]	@ 0x44
 80105a4:	9308      	str	r3, [sp, #32]
 80105a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f040 852f 	bne.w	801100c <_strtod_l+0xadc>
 80105ae:	9b08      	ldr	r3, [sp, #32]
 80105b0:	ec4b ab10 	vmov	d0, sl, fp
 80105b4:	b1cb      	cbz	r3, 80105ea <_strtod_l+0xba>
 80105b6:	eeb1 0b40 	vneg.f64	d0, d0
 80105ba:	b017      	add	sp, #92	@ 0x5c
 80105bc:	ecbd 8b0a 	vpop	{d8-d12}
 80105c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105c4:	2920      	cmp	r1, #32
 80105c6:	d1cd      	bne.n	8010564 <_strtod_l+0x34>
 80105c8:	3201      	adds	r2, #1
 80105ca:	e7c0      	b.n	801054e <_strtod_l+0x1e>
 80105cc:	292d      	cmp	r1, #45	@ 0x2d
 80105ce:	d1c9      	bne.n	8010564 <_strtod_l+0x34>
 80105d0:	2101      	movs	r1, #1
 80105d2:	9108      	str	r1, [sp, #32]
 80105d4:	1c51      	adds	r1, r2, #1
 80105d6:	9111      	str	r1, [sp, #68]	@ 0x44
 80105d8:	7852      	ldrb	r2, [r2, #1]
 80105da:	2a00      	cmp	r2, #0
 80105dc:	d1c4      	bne.n	8010568 <_strtod_l+0x38>
 80105de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105e0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f040 850f 	bne.w	8011008 <_strtod_l+0xad8>
 80105ea:	ec4b ab10 	vmov	d0, sl, fp
 80105ee:	e7e4      	b.n	80105ba <_strtod_l+0x8a>
 80105f0:	2100      	movs	r1, #0
 80105f2:	e7ee      	b.n	80105d2 <_strtod_l+0xa2>
 80105f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80105f6:	b13a      	cbz	r2, 8010608 <_strtod_l+0xd8>
 80105f8:	2135      	movs	r1, #53	@ 0x35
 80105fa:	a814      	add	r0, sp, #80	@ 0x50
 80105fc:	f7ff ff39 	bl	8010472 <__copybits>
 8010600:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010602:	9805      	ldr	r0, [sp, #20]
 8010604:	f7ff fb0a 	bl	800fc1c <_Bfree>
 8010608:	1e73      	subs	r3, r6, #1
 801060a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801060c:	2b04      	cmp	r3, #4
 801060e:	d806      	bhi.n	801061e <_strtod_l+0xee>
 8010610:	e8df f003 	tbb	[pc, r3]
 8010614:	201d0314 	.word	0x201d0314
 8010618:	14          	.byte	0x14
 8010619:	00          	.byte	0x00
 801061a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801061e:	05e3      	lsls	r3, r4, #23
 8010620:	bf48      	it	mi
 8010622:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010626:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801062a:	0d1b      	lsrs	r3, r3, #20
 801062c:	051b      	lsls	r3, r3, #20
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1b9      	bne.n	80105a6 <_strtod_l+0x76>
 8010632:	f7fe fb9f 	bl	800ed74 <__errno>
 8010636:	2322      	movs	r3, #34	@ 0x22
 8010638:	6003      	str	r3, [r0, #0]
 801063a:	e7b4      	b.n	80105a6 <_strtod_l+0x76>
 801063c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8010640:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010644:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010648:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801064c:	e7e7      	b.n	801061e <_strtod_l+0xee>
 801064e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80107bc <_strtod_l+0x28c>
 8010652:	e7e4      	b.n	801061e <_strtod_l+0xee>
 8010654:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010658:	f04f 3aff 	mov.w	sl, #4294967295
 801065c:	e7df      	b.n	801061e <_strtod_l+0xee>
 801065e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010660:	1c5a      	adds	r2, r3, #1
 8010662:	9211      	str	r2, [sp, #68]	@ 0x44
 8010664:	785b      	ldrb	r3, [r3, #1]
 8010666:	2b30      	cmp	r3, #48	@ 0x30
 8010668:	d0f9      	beq.n	801065e <_strtod_l+0x12e>
 801066a:	2b00      	cmp	r3, #0
 801066c:	d09b      	beq.n	80105a6 <_strtod_l+0x76>
 801066e:	2301      	movs	r3, #1
 8010670:	2600      	movs	r6, #0
 8010672:	9307      	str	r3, [sp, #28]
 8010674:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010676:	930a      	str	r3, [sp, #40]	@ 0x28
 8010678:	46b1      	mov	r9, r6
 801067a:	4635      	mov	r5, r6
 801067c:	220a      	movs	r2, #10
 801067e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010680:	7804      	ldrb	r4, [r0, #0]
 8010682:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8010686:	b2d9      	uxtb	r1, r3
 8010688:	2909      	cmp	r1, #9
 801068a:	d929      	bls.n	80106e0 <_strtod_l+0x1b0>
 801068c:	494a      	ldr	r1, [pc, #296]	@ (80107b8 <_strtod_l+0x288>)
 801068e:	2201      	movs	r2, #1
 8010690:	f001 f95a 	bl	8011948 <strncmp>
 8010694:	b378      	cbz	r0, 80106f6 <_strtod_l+0x1c6>
 8010696:	2000      	movs	r0, #0
 8010698:	4622      	mov	r2, r4
 801069a:	462b      	mov	r3, r5
 801069c:	4607      	mov	r7, r0
 801069e:	9006      	str	r0, [sp, #24]
 80106a0:	2a65      	cmp	r2, #101	@ 0x65
 80106a2:	d001      	beq.n	80106a8 <_strtod_l+0x178>
 80106a4:	2a45      	cmp	r2, #69	@ 0x45
 80106a6:	d117      	bne.n	80106d8 <_strtod_l+0x1a8>
 80106a8:	b91b      	cbnz	r3, 80106b2 <_strtod_l+0x182>
 80106aa:	9b07      	ldr	r3, [sp, #28]
 80106ac:	4303      	orrs	r3, r0
 80106ae:	d096      	beq.n	80105de <_strtod_l+0xae>
 80106b0:	2300      	movs	r3, #0
 80106b2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80106b6:	f108 0201 	add.w	r2, r8, #1
 80106ba:	9211      	str	r2, [sp, #68]	@ 0x44
 80106bc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80106c0:	2a2b      	cmp	r2, #43	@ 0x2b
 80106c2:	d06b      	beq.n	801079c <_strtod_l+0x26c>
 80106c4:	2a2d      	cmp	r2, #45	@ 0x2d
 80106c6:	d071      	beq.n	80107ac <_strtod_l+0x27c>
 80106c8:	f04f 0e00 	mov.w	lr, #0
 80106cc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80106d0:	2c09      	cmp	r4, #9
 80106d2:	d979      	bls.n	80107c8 <_strtod_l+0x298>
 80106d4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80106d8:	2400      	movs	r4, #0
 80106da:	e094      	b.n	8010806 <_strtod_l+0x2d6>
 80106dc:	2300      	movs	r3, #0
 80106de:	e7c7      	b.n	8010670 <_strtod_l+0x140>
 80106e0:	2d08      	cmp	r5, #8
 80106e2:	f100 0001 	add.w	r0, r0, #1
 80106e6:	bfd4      	ite	le
 80106e8:	fb02 3909 	mlale	r9, r2, r9, r3
 80106ec:	fb02 3606 	mlagt	r6, r2, r6, r3
 80106f0:	3501      	adds	r5, #1
 80106f2:	9011      	str	r0, [sp, #68]	@ 0x44
 80106f4:	e7c3      	b.n	801067e <_strtod_l+0x14e>
 80106f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80106f8:	1c5a      	adds	r2, r3, #1
 80106fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80106fc:	785a      	ldrb	r2, [r3, #1]
 80106fe:	b375      	cbz	r5, 801075e <_strtod_l+0x22e>
 8010700:	4607      	mov	r7, r0
 8010702:	462b      	mov	r3, r5
 8010704:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010708:	2909      	cmp	r1, #9
 801070a:	d913      	bls.n	8010734 <_strtod_l+0x204>
 801070c:	2101      	movs	r1, #1
 801070e:	9106      	str	r1, [sp, #24]
 8010710:	e7c6      	b.n	80106a0 <_strtod_l+0x170>
 8010712:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010714:	1c5a      	adds	r2, r3, #1
 8010716:	9211      	str	r2, [sp, #68]	@ 0x44
 8010718:	785a      	ldrb	r2, [r3, #1]
 801071a:	3001      	adds	r0, #1
 801071c:	2a30      	cmp	r2, #48	@ 0x30
 801071e:	d0f8      	beq.n	8010712 <_strtod_l+0x1e2>
 8010720:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010724:	2b08      	cmp	r3, #8
 8010726:	f200 8476 	bhi.w	8011016 <_strtod_l+0xae6>
 801072a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801072c:	930a      	str	r3, [sp, #40]	@ 0x28
 801072e:	4607      	mov	r7, r0
 8010730:	2000      	movs	r0, #0
 8010732:	4603      	mov	r3, r0
 8010734:	3a30      	subs	r2, #48	@ 0x30
 8010736:	f100 0101 	add.w	r1, r0, #1
 801073a:	d023      	beq.n	8010784 <_strtod_l+0x254>
 801073c:	440f      	add	r7, r1
 801073e:	eb00 0c03 	add.w	ip, r0, r3
 8010742:	4619      	mov	r1, r3
 8010744:	240a      	movs	r4, #10
 8010746:	4561      	cmp	r1, ip
 8010748:	d10b      	bne.n	8010762 <_strtod_l+0x232>
 801074a:	1c5c      	adds	r4, r3, #1
 801074c:	4403      	add	r3, r0
 801074e:	2b08      	cmp	r3, #8
 8010750:	4404      	add	r4, r0
 8010752:	dc11      	bgt.n	8010778 <_strtod_l+0x248>
 8010754:	230a      	movs	r3, #10
 8010756:	fb03 2909 	mla	r9, r3, r9, r2
 801075a:	2100      	movs	r1, #0
 801075c:	e013      	b.n	8010786 <_strtod_l+0x256>
 801075e:	4628      	mov	r0, r5
 8010760:	e7dc      	b.n	801071c <_strtod_l+0x1ec>
 8010762:	2908      	cmp	r1, #8
 8010764:	f101 0101 	add.w	r1, r1, #1
 8010768:	dc02      	bgt.n	8010770 <_strtod_l+0x240>
 801076a:	fb04 f909 	mul.w	r9, r4, r9
 801076e:	e7ea      	b.n	8010746 <_strtod_l+0x216>
 8010770:	2910      	cmp	r1, #16
 8010772:	bfd8      	it	le
 8010774:	4366      	mulle	r6, r4
 8010776:	e7e6      	b.n	8010746 <_strtod_l+0x216>
 8010778:	2b0f      	cmp	r3, #15
 801077a:	dcee      	bgt.n	801075a <_strtod_l+0x22a>
 801077c:	230a      	movs	r3, #10
 801077e:	fb03 2606 	mla	r6, r3, r6, r2
 8010782:	e7ea      	b.n	801075a <_strtod_l+0x22a>
 8010784:	461c      	mov	r4, r3
 8010786:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010788:	1c5a      	adds	r2, r3, #1
 801078a:	9211      	str	r2, [sp, #68]	@ 0x44
 801078c:	785a      	ldrb	r2, [r3, #1]
 801078e:	4608      	mov	r0, r1
 8010790:	4623      	mov	r3, r4
 8010792:	e7b7      	b.n	8010704 <_strtod_l+0x1d4>
 8010794:	2301      	movs	r3, #1
 8010796:	2700      	movs	r7, #0
 8010798:	9306      	str	r3, [sp, #24]
 801079a:	e786      	b.n	80106aa <_strtod_l+0x17a>
 801079c:	f04f 0e00 	mov.w	lr, #0
 80107a0:	f108 0202 	add.w	r2, r8, #2
 80107a4:	9211      	str	r2, [sp, #68]	@ 0x44
 80107a6:	f898 2002 	ldrb.w	r2, [r8, #2]
 80107aa:	e78f      	b.n	80106cc <_strtod_l+0x19c>
 80107ac:	f04f 0e01 	mov.w	lr, #1
 80107b0:	e7f6      	b.n	80107a0 <_strtod_l+0x270>
 80107b2:	bf00      	nop
 80107b4:	080125d8 	.word	0x080125d8
 80107b8:	080125c0 	.word	0x080125c0
 80107bc:	7ff00000 	.word	0x7ff00000
 80107c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107c2:	1c54      	adds	r4, r2, #1
 80107c4:	9411      	str	r4, [sp, #68]	@ 0x44
 80107c6:	7852      	ldrb	r2, [r2, #1]
 80107c8:	2a30      	cmp	r2, #48	@ 0x30
 80107ca:	d0f9      	beq.n	80107c0 <_strtod_l+0x290>
 80107cc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80107d0:	2c08      	cmp	r4, #8
 80107d2:	d881      	bhi.n	80106d8 <_strtod_l+0x1a8>
 80107d4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80107d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107da:	9209      	str	r2, [sp, #36]	@ 0x24
 80107dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107de:	1c51      	adds	r1, r2, #1
 80107e0:	9111      	str	r1, [sp, #68]	@ 0x44
 80107e2:	7852      	ldrb	r2, [r2, #1]
 80107e4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80107e8:	2c09      	cmp	r4, #9
 80107ea:	d938      	bls.n	801085e <_strtod_l+0x32e>
 80107ec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80107ee:	1b0c      	subs	r4, r1, r4
 80107f0:	2c08      	cmp	r4, #8
 80107f2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80107f6:	dc02      	bgt.n	80107fe <_strtod_l+0x2ce>
 80107f8:	4564      	cmp	r4, ip
 80107fa:	bfa8      	it	ge
 80107fc:	4664      	movge	r4, ip
 80107fe:	f1be 0f00 	cmp.w	lr, #0
 8010802:	d000      	beq.n	8010806 <_strtod_l+0x2d6>
 8010804:	4264      	negs	r4, r4
 8010806:	2b00      	cmp	r3, #0
 8010808:	d14e      	bne.n	80108a8 <_strtod_l+0x378>
 801080a:	9b07      	ldr	r3, [sp, #28]
 801080c:	4318      	orrs	r0, r3
 801080e:	f47f aeca 	bne.w	80105a6 <_strtod_l+0x76>
 8010812:	9b06      	ldr	r3, [sp, #24]
 8010814:	2b00      	cmp	r3, #0
 8010816:	f47f aee2 	bne.w	80105de <_strtod_l+0xae>
 801081a:	2a69      	cmp	r2, #105	@ 0x69
 801081c:	d027      	beq.n	801086e <_strtod_l+0x33e>
 801081e:	dc24      	bgt.n	801086a <_strtod_l+0x33a>
 8010820:	2a49      	cmp	r2, #73	@ 0x49
 8010822:	d024      	beq.n	801086e <_strtod_l+0x33e>
 8010824:	2a4e      	cmp	r2, #78	@ 0x4e
 8010826:	f47f aeda 	bne.w	80105de <_strtod_l+0xae>
 801082a:	4997      	ldr	r1, [pc, #604]	@ (8010a88 <_strtod_l+0x558>)
 801082c:	a811      	add	r0, sp, #68	@ 0x44
 801082e:	f001 fb7f 	bl	8011f30 <__match>
 8010832:	2800      	cmp	r0, #0
 8010834:	f43f aed3 	beq.w	80105de <_strtod_l+0xae>
 8010838:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	2b28      	cmp	r3, #40	@ 0x28
 801083e:	d12d      	bne.n	801089c <_strtod_l+0x36c>
 8010840:	4992      	ldr	r1, [pc, #584]	@ (8010a8c <_strtod_l+0x55c>)
 8010842:	aa14      	add	r2, sp, #80	@ 0x50
 8010844:	a811      	add	r0, sp, #68	@ 0x44
 8010846:	f001 fb87 	bl	8011f58 <__hexnan>
 801084a:	2805      	cmp	r0, #5
 801084c:	d126      	bne.n	801089c <_strtod_l+0x36c>
 801084e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010850:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8010854:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010858:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801085c:	e6a3      	b.n	80105a6 <_strtod_l+0x76>
 801085e:	240a      	movs	r4, #10
 8010860:	fb04 2c0c 	mla	ip, r4, ip, r2
 8010864:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8010868:	e7b8      	b.n	80107dc <_strtod_l+0x2ac>
 801086a:	2a6e      	cmp	r2, #110	@ 0x6e
 801086c:	e7db      	b.n	8010826 <_strtod_l+0x2f6>
 801086e:	4988      	ldr	r1, [pc, #544]	@ (8010a90 <_strtod_l+0x560>)
 8010870:	a811      	add	r0, sp, #68	@ 0x44
 8010872:	f001 fb5d 	bl	8011f30 <__match>
 8010876:	2800      	cmp	r0, #0
 8010878:	f43f aeb1 	beq.w	80105de <_strtod_l+0xae>
 801087c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801087e:	4985      	ldr	r1, [pc, #532]	@ (8010a94 <_strtod_l+0x564>)
 8010880:	3b01      	subs	r3, #1
 8010882:	a811      	add	r0, sp, #68	@ 0x44
 8010884:	9311      	str	r3, [sp, #68]	@ 0x44
 8010886:	f001 fb53 	bl	8011f30 <__match>
 801088a:	b910      	cbnz	r0, 8010892 <_strtod_l+0x362>
 801088c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801088e:	3301      	adds	r3, #1
 8010890:	9311      	str	r3, [sp, #68]	@ 0x44
 8010892:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010aa8 <_strtod_l+0x578>
 8010896:	f04f 0a00 	mov.w	sl, #0
 801089a:	e684      	b.n	80105a6 <_strtod_l+0x76>
 801089c:	487e      	ldr	r0, [pc, #504]	@ (8010a98 <_strtod_l+0x568>)
 801089e:	f001 f883 	bl	80119a8 <nan>
 80108a2:	ec5b ab10 	vmov	sl, fp, d0
 80108a6:	e67e      	b.n	80105a6 <_strtod_l+0x76>
 80108a8:	ee07 9a90 	vmov	s15, r9
 80108ac:	1be2      	subs	r2, r4, r7
 80108ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80108b2:	2d00      	cmp	r5, #0
 80108b4:	bf08      	it	eq
 80108b6:	461d      	moveq	r5, r3
 80108b8:	2b10      	cmp	r3, #16
 80108ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80108bc:	461a      	mov	r2, r3
 80108be:	bfa8      	it	ge
 80108c0:	2210      	movge	r2, #16
 80108c2:	2b09      	cmp	r3, #9
 80108c4:	ec5b ab17 	vmov	sl, fp, d7
 80108c8:	dc15      	bgt.n	80108f6 <_strtod_l+0x3c6>
 80108ca:	1be1      	subs	r1, r4, r7
 80108cc:	2900      	cmp	r1, #0
 80108ce:	f43f ae6a 	beq.w	80105a6 <_strtod_l+0x76>
 80108d2:	eba4 0107 	sub.w	r1, r4, r7
 80108d6:	dd72      	ble.n	80109be <_strtod_l+0x48e>
 80108d8:	2916      	cmp	r1, #22
 80108da:	dc59      	bgt.n	8010990 <_strtod_l+0x460>
 80108dc:	4b6f      	ldr	r3, [pc, #444]	@ (8010a9c <_strtod_l+0x56c>)
 80108de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108e4:	ed93 7b00 	vldr	d7, [r3]
 80108e8:	ec4b ab16 	vmov	d6, sl, fp
 80108ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80108f0:	ec5b ab17 	vmov	sl, fp, d7
 80108f4:	e657      	b.n	80105a6 <_strtod_l+0x76>
 80108f6:	4969      	ldr	r1, [pc, #420]	@ (8010a9c <_strtod_l+0x56c>)
 80108f8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80108fc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010900:	ee06 6a90 	vmov	s13, r6
 8010904:	2b0f      	cmp	r3, #15
 8010906:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801090a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801090e:	ec5b ab16 	vmov	sl, fp, d6
 8010912:	ddda      	ble.n	80108ca <_strtod_l+0x39a>
 8010914:	1a9a      	subs	r2, r3, r2
 8010916:	1be1      	subs	r1, r4, r7
 8010918:	440a      	add	r2, r1
 801091a:	2a00      	cmp	r2, #0
 801091c:	f340 8094 	ble.w	8010a48 <_strtod_l+0x518>
 8010920:	f012 000f 	ands.w	r0, r2, #15
 8010924:	d00a      	beq.n	801093c <_strtod_l+0x40c>
 8010926:	495d      	ldr	r1, [pc, #372]	@ (8010a9c <_strtod_l+0x56c>)
 8010928:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801092c:	ed91 7b00 	vldr	d7, [r1]
 8010930:	ec4b ab16 	vmov	d6, sl, fp
 8010934:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010938:	ec5b ab17 	vmov	sl, fp, d7
 801093c:	f032 020f 	bics.w	r2, r2, #15
 8010940:	d073      	beq.n	8010a2a <_strtod_l+0x4fa>
 8010942:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8010946:	dd47      	ble.n	80109d8 <_strtod_l+0x4a8>
 8010948:	2400      	movs	r4, #0
 801094a:	4625      	mov	r5, r4
 801094c:	9407      	str	r4, [sp, #28]
 801094e:	4626      	mov	r6, r4
 8010950:	9a05      	ldr	r2, [sp, #20]
 8010952:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010aa8 <_strtod_l+0x578>
 8010956:	2322      	movs	r3, #34	@ 0x22
 8010958:	6013      	str	r3, [r2, #0]
 801095a:	f04f 0a00 	mov.w	sl, #0
 801095e:	9b07      	ldr	r3, [sp, #28]
 8010960:	2b00      	cmp	r3, #0
 8010962:	f43f ae20 	beq.w	80105a6 <_strtod_l+0x76>
 8010966:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010968:	9805      	ldr	r0, [sp, #20]
 801096a:	f7ff f957 	bl	800fc1c <_Bfree>
 801096e:	9805      	ldr	r0, [sp, #20]
 8010970:	4631      	mov	r1, r6
 8010972:	f7ff f953 	bl	800fc1c <_Bfree>
 8010976:	9805      	ldr	r0, [sp, #20]
 8010978:	4629      	mov	r1, r5
 801097a:	f7ff f94f 	bl	800fc1c <_Bfree>
 801097e:	9907      	ldr	r1, [sp, #28]
 8010980:	9805      	ldr	r0, [sp, #20]
 8010982:	f7ff f94b 	bl	800fc1c <_Bfree>
 8010986:	9805      	ldr	r0, [sp, #20]
 8010988:	4621      	mov	r1, r4
 801098a:	f7ff f947 	bl	800fc1c <_Bfree>
 801098e:	e60a      	b.n	80105a6 <_strtod_l+0x76>
 8010990:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8010994:	1be0      	subs	r0, r4, r7
 8010996:	4281      	cmp	r1, r0
 8010998:	dbbc      	blt.n	8010914 <_strtod_l+0x3e4>
 801099a:	4a40      	ldr	r2, [pc, #256]	@ (8010a9c <_strtod_l+0x56c>)
 801099c:	f1c3 030f 	rsb	r3, r3, #15
 80109a0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80109a4:	ed91 7b00 	vldr	d7, [r1]
 80109a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80109aa:	ec4b ab16 	vmov	d6, sl, fp
 80109ae:	1acb      	subs	r3, r1, r3
 80109b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80109b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80109b8:	ed92 6b00 	vldr	d6, [r2]
 80109bc:	e796      	b.n	80108ec <_strtod_l+0x3bc>
 80109be:	3116      	adds	r1, #22
 80109c0:	dba8      	blt.n	8010914 <_strtod_l+0x3e4>
 80109c2:	4b36      	ldr	r3, [pc, #216]	@ (8010a9c <_strtod_l+0x56c>)
 80109c4:	1b3c      	subs	r4, r7, r4
 80109c6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80109ca:	ed94 7b00 	vldr	d7, [r4]
 80109ce:	ec4b ab16 	vmov	d6, sl, fp
 80109d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80109d6:	e78b      	b.n	80108f0 <_strtod_l+0x3c0>
 80109d8:	2000      	movs	r0, #0
 80109da:	ec4b ab17 	vmov	d7, sl, fp
 80109de:	4e30      	ldr	r6, [pc, #192]	@ (8010aa0 <_strtod_l+0x570>)
 80109e0:	1112      	asrs	r2, r2, #4
 80109e2:	4601      	mov	r1, r0
 80109e4:	2a01      	cmp	r2, #1
 80109e6:	dc23      	bgt.n	8010a30 <_strtod_l+0x500>
 80109e8:	b108      	cbz	r0, 80109ee <_strtod_l+0x4be>
 80109ea:	ec5b ab17 	vmov	sl, fp, d7
 80109ee:	4a2c      	ldr	r2, [pc, #176]	@ (8010aa0 <_strtod_l+0x570>)
 80109f0:	482c      	ldr	r0, [pc, #176]	@ (8010aa4 <_strtod_l+0x574>)
 80109f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80109f6:	ed92 7b00 	vldr	d7, [r2]
 80109fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80109fe:	ec4b ab16 	vmov	d6, sl, fp
 8010a02:	4a29      	ldr	r2, [pc, #164]	@ (8010aa8 <_strtod_l+0x578>)
 8010a04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a08:	ee17 1a90 	vmov	r1, s15
 8010a0c:	400a      	ands	r2, r1
 8010a0e:	4282      	cmp	r2, r0
 8010a10:	ec5b ab17 	vmov	sl, fp, d7
 8010a14:	d898      	bhi.n	8010948 <_strtod_l+0x418>
 8010a16:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8010a1a:	4282      	cmp	r2, r0
 8010a1c:	bf86      	itte	hi
 8010a1e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8010aac <_strtod_l+0x57c>
 8010a22:	f04f 3aff 	movhi.w	sl, #4294967295
 8010a26:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	9206      	str	r2, [sp, #24]
 8010a2e:	e076      	b.n	8010b1e <_strtod_l+0x5ee>
 8010a30:	f012 0f01 	tst.w	r2, #1
 8010a34:	d004      	beq.n	8010a40 <_strtod_l+0x510>
 8010a36:	ed96 6b00 	vldr	d6, [r6]
 8010a3a:	2001      	movs	r0, #1
 8010a3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a40:	3101      	adds	r1, #1
 8010a42:	1052      	asrs	r2, r2, #1
 8010a44:	3608      	adds	r6, #8
 8010a46:	e7cd      	b.n	80109e4 <_strtod_l+0x4b4>
 8010a48:	d0ef      	beq.n	8010a2a <_strtod_l+0x4fa>
 8010a4a:	4252      	negs	r2, r2
 8010a4c:	f012 000f 	ands.w	r0, r2, #15
 8010a50:	d00a      	beq.n	8010a68 <_strtod_l+0x538>
 8010a52:	4912      	ldr	r1, [pc, #72]	@ (8010a9c <_strtod_l+0x56c>)
 8010a54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010a58:	ed91 7b00 	vldr	d7, [r1]
 8010a5c:	ec4b ab16 	vmov	d6, sl, fp
 8010a60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010a64:	ec5b ab17 	vmov	sl, fp, d7
 8010a68:	1112      	asrs	r2, r2, #4
 8010a6a:	d0de      	beq.n	8010a2a <_strtod_l+0x4fa>
 8010a6c:	2a1f      	cmp	r2, #31
 8010a6e:	dd1f      	ble.n	8010ab0 <_strtod_l+0x580>
 8010a70:	2400      	movs	r4, #0
 8010a72:	4625      	mov	r5, r4
 8010a74:	9407      	str	r4, [sp, #28]
 8010a76:	4626      	mov	r6, r4
 8010a78:	9a05      	ldr	r2, [sp, #20]
 8010a7a:	2322      	movs	r3, #34	@ 0x22
 8010a7c:	f04f 0a00 	mov.w	sl, #0
 8010a80:	f04f 0b00 	mov.w	fp, #0
 8010a84:	6013      	str	r3, [r2, #0]
 8010a86:	e76a      	b.n	801095e <_strtod_l+0x42e>
 8010a88:	080123b1 	.word	0x080123b1
 8010a8c:	080125c4 	.word	0x080125c4
 8010a90:	080123a9 	.word	0x080123a9
 8010a94:	080123e0 	.word	0x080123e0
 8010a98:	0801276d 	.word	0x0801276d
 8010a9c:	080124f8 	.word	0x080124f8
 8010aa0:	080124d0 	.word	0x080124d0
 8010aa4:	7ca00000 	.word	0x7ca00000
 8010aa8:	7ff00000 	.word	0x7ff00000
 8010aac:	7fefffff 	.word	0x7fefffff
 8010ab0:	f012 0110 	ands.w	r1, r2, #16
 8010ab4:	bf18      	it	ne
 8010ab6:	216a      	movne	r1, #106	@ 0x6a
 8010ab8:	9106      	str	r1, [sp, #24]
 8010aba:	ec4b ab17 	vmov	d7, sl, fp
 8010abe:	49b0      	ldr	r1, [pc, #704]	@ (8010d80 <_strtod_l+0x850>)
 8010ac0:	2000      	movs	r0, #0
 8010ac2:	07d6      	lsls	r6, r2, #31
 8010ac4:	d504      	bpl.n	8010ad0 <_strtod_l+0x5a0>
 8010ac6:	ed91 6b00 	vldr	d6, [r1]
 8010aca:	2001      	movs	r0, #1
 8010acc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ad0:	1052      	asrs	r2, r2, #1
 8010ad2:	f101 0108 	add.w	r1, r1, #8
 8010ad6:	d1f4      	bne.n	8010ac2 <_strtod_l+0x592>
 8010ad8:	b108      	cbz	r0, 8010ade <_strtod_l+0x5ae>
 8010ada:	ec5b ab17 	vmov	sl, fp, d7
 8010ade:	9a06      	ldr	r2, [sp, #24]
 8010ae0:	b1b2      	cbz	r2, 8010b10 <_strtod_l+0x5e0>
 8010ae2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8010ae6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8010aea:	2a00      	cmp	r2, #0
 8010aec:	4658      	mov	r0, fp
 8010aee:	dd0f      	ble.n	8010b10 <_strtod_l+0x5e0>
 8010af0:	2a1f      	cmp	r2, #31
 8010af2:	dd55      	ble.n	8010ba0 <_strtod_l+0x670>
 8010af4:	2a34      	cmp	r2, #52	@ 0x34
 8010af6:	bfde      	ittt	le
 8010af8:	f04f 32ff 	movle.w	r2, #4294967295
 8010afc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010b00:	408a      	lslle	r2, r1
 8010b02:	f04f 0a00 	mov.w	sl, #0
 8010b06:	bfcc      	ite	gt
 8010b08:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010b0c:	ea02 0b00 	andle.w	fp, r2, r0
 8010b10:	ec4b ab17 	vmov	d7, sl, fp
 8010b14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b1c:	d0a8      	beq.n	8010a70 <_strtod_l+0x540>
 8010b1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010b20:	9805      	ldr	r0, [sp, #20]
 8010b22:	f8cd 9000 	str.w	r9, [sp]
 8010b26:	462a      	mov	r2, r5
 8010b28:	f7ff f8e0 	bl	800fcec <__s2b>
 8010b2c:	9007      	str	r0, [sp, #28]
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	f43f af0a 	beq.w	8010948 <_strtod_l+0x418>
 8010b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b36:	1b3f      	subs	r7, r7, r4
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	bfb4      	ite	lt
 8010b3c:	463b      	movlt	r3, r7
 8010b3e:	2300      	movge	r3, #0
 8010b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b44:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8010d70 <_strtod_l+0x840>
 8010b48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b4c:	2400      	movs	r4, #0
 8010b4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010b50:	4625      	mov	r5, r4
 8010b52:	9b07      	ldr	r3, [sp, #28]
 8010b54:	9805      	ldr	r0, [sp, #20]
 8010b56:	6859      	ldr	r1, [r3, #4]
 8010b58:	f7ff f820 	bl	800fb9c <_Balloc>
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f43f aef6 	beq.w	8010950 <_strtod_l+0x420>
 8010b64:	9b07      	ldr	r3, [sp, #28]
 8010b66:	691a      	ldr	r2, [r3, #16]
 8010b68:	ec4b ab19 	vmov	d9, sl, fp
 8010b6c:	3202      	adds	r2, #2
 8010b6e:	f103 010c 	add.w	r1, r3, #12
 8010b72:	0092      	lsls	r2, r2, #2
 8010b74:	300c      	adds	r0, #12
 8010b76:	f000 ff09 	bl	801198c <memcpy>
 8010b7a:	eeb0 0b49 	vmov.f64	d0, d9
 8010b7e:	9805      	ldr	r0, [sp, #20]
 8010b80:	aa14      	add	r2, sp, #80	@ 0x50
 8010b82:	a913      	add	r1, sp, #76	@ 0x4c
 8010b84:	f7ff fbee 	bl	8010364 <__d2b>
 8010b88:	9012      	str	r0, [sp, #72]	@ 0x48
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	f43f aee0 	beq.w	8010950 <_strtod_l+0x420>
 8010b90:	9805      	ldr	r0, [sp, #20]
 8010b92:	2101      	movs	r1, #1
 8010b94:	f7ff f940 	bl	800fe18 <__i2b>
 8010b98:	4605      	mov	r5, r0
 8010b9a:	b940      	cbnz	r0, 8010bae <_strtod_l+0x67e>
 8010b9c:	2500      	movs	r5, #0
 8010b9e:	e6d7      	b.n	8010950 <_strtod_l+0x420>
 8010ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8010ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8010ba8:	ea02 0a0a 	and.w	sl, r2, sl
 8010bac:	e7b0      	b.n	8010b10 <_strtod_l+0x5e0>
 8010bae:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010bb0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010bb2:	2f00      	cmp	r7, #0
 8010bb4:	bfab      	itete	ge
 8010bb6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8010bb8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8010bba:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8010bbe:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8010bc2:	bfac      	ite	ge
 8010bc4:	eb07 0903 	addge.w	r9, r7, r3
 8010bc8:	eba3 0807 	sublt.w	r8, r3, r7
 8010bcc:	9b06      	ldr	r3, [sp, #24]
 8010bce:	1aff      	subs	r7, r7, r3
 8010bd0:	4417      	add	r7, r2
 8010bd2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8010bd6:	4a6b      	ldr	r2, [pc, #428]	@ (8010d84 <_strtod_l+0x854>)
 8010bd8:	3f01      	subs	r7, #1
 8010bda:	4297      	cmp	r7, r2
 8010bdc:	da51      	bge.n	8010c82 <_strtod_l+0x752>
 8010bde:	1bd1      	subs	r1, r2, r7
 8010be0:	291f      	cmp	r1, #31
 8010be2:	eba3 0301 	sub.w	r3, r3, r1
 8010be6:	f04f 0201 	mov.w	r2, #1
 8010bea:	dc3e      	bgt.n	8010c6a <_strtod_l+0x73a>
 8010bec:	408a      	lsls	r2, r1
 8010bee:	920c      	str	r2, [sp, #48]	@ 0x30
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010bf4:	eb09 0703 	add.w	r7, r9, r3
 8010bf8:	4498      	add	r8, r3
 8010bfa:	9b06      	ldr	r3, [sp, #24]
 8010bfc:	45b9      	cmp	r9, r7
 8010bfe:	4498      	add	r8, r3
 8010c00:	464b      	mov	r3, r9
 8010c02:	bfa8      	it	ge
 8010c04:	463b      	movge	r3, r7
 8010c06:	4543      	cmp	r3, r8
 8010c08:	bfa8      	it	ge
 8010c0a:	4643      	movge	r3, r8
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	bfc2      	ittt	gt
 8010c10:	1aff      	subgt	r7, r7, r3
 8010c12:	eba8 0803 	subgt.w	r8, r8, r3
 8010c16:	eba9 0903 	subgt.w	r9, r9, r3
 8010c1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	dd16      	ble.n	8010c4e <_strtod_l+0x71e>
 8010c20:	4629      	mov	r1, r5
 8010c22:	9805      	ldr	r0, [sp, #20]
 8010c24:	461a      	mov	r2, r3
 8010c26:	f7ff f9b7 	bl	800ff98 <__pow5mult>
 8010c2a:	4605      	mov	r5, r0
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	d0b5      	beq.n	8010b9c <_strtod_l+0x66c>
 8010c30:	4601      	mov	r1, r0
 8010c32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010c34:	9805      	ldr	r0, [sp, #20]
 8010c36:	f7ff f905 	bl	800fe44 <__multiply>
 8010c3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	f43f ae87 	beq.w	8010950 <_strtod_l+0x420>
 8010c42:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010c44:	9805      	ldr	r0, [sp, #20]
 8010c46:	f7fe ffe9 	bl	800fc1c <_Bfree>
 8010c4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c4c:	9312      	str	r3, [sp, #72]	@ 0x48
 8010c4e:	2f00      	cmp	r7, #0
 8010c50:	dc1b      	bgt.n	8010c8a <_strtod_l+0x75a>
 8010c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	dd21      	ble.n	8010c9c <_strtod_l+0x76c>
 8010c58:	4631      	mov	r1, r6
 8010c5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010c5c:	9805      	ldr	r0, [sp, #20]
 8010c5e:	f7ff f99b 	bl	800ff98 <__pow5mult>
 8010c62:	4606      	mov	r6, r0
 8010c64:	b9d0      	cbnz	r0, 8010c9c <_strtod_l+0x76c>
 8010c66:	2600      	movs	r6, #0
 8010c68:	e672      	b.n	8010950 <_strtod_l+0x420>
 8010c6a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8010c6e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8010c72:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8010c76:	37e2      	adds	r7, #226	@ 0xe2
 8010c78:	fa02 f107 	lsl.w	r1, r2, r7
 8010c7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010c7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010c80:	e7b8      	b.n	8010bf4 <_strtod_l+0x6c4>
 8010c82:	2200      	movs	r2, #0
 8010c84:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010c86:	2201      	movs	r2, #1
 8010c88:	e7f9      	b.n	8010c7e <_strtod_l+0x74e>
 8010c8a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010c8c:	9805      	ldr	r0, [sp, #20]
 8010c8e:	463a      	mov	r2, r7
 8010c90:	f7ff f9dc 	bl	801004c <__lshift>
 8010c94:	9012      	str	r0, [sp, #72]	@ 0x48
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d1db      	bne.n	8010c52 <_strtod_l+0x722>
 8010c9a:	e659      	b.n	8010950 <_strtod_l+0x420>
 8010c9c:	f1b8 0f00 	cmp.w	r8, #0
 8010ca0:	dd07      	ble.n	8010cb2 <_strtod_l+0x782>
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	9805      	ldr	r0, [sp, #20]
 8010ca6:	4642      	mov	r2, r8
 8010ca8:	f7ff f9d0 	bl	801004c <__lshift>
 8010cac:	4606      	mov	r6, r0
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	d0d9      	beq.n	8010c66 <_strtod_l+0x736>
 8010cb2:	f1b9 0f00 	cmp.w	r9, #0
 8010cb6:	dd08      	ble.n	8010cca <_strtod_l+0x79a>
 8010cb8:	4629      	mov	r1, r5
 8010cba:	9805      	ldr	r0, [sp, #20]
 8010cbc:	464a      	mov	r2, r9
 8010cbe:	f7ff f9c5 	bl	801004c <__lshift>
 8010cc2:	4605      	mov	r5, r0
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	f43f ae43 	beq.w	8010950 <_strtod_l+0x420>
 8010cca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010ccc:	9805      	ldr	r0, [sp, #20]
 8010cce:	4632      	mov	r2, r6
 8010cd0:	f7ff fa44 	bl	801015c <__mdiff>
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	f43f ae3a 	beq.w	8010950 <_strtod_l+0x420>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010ce2:	60c3      	str	r3, [r0, #12]
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	f7ff fa1d 	bl	8010124 <__mcmp>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	da4e      	bge.n	8010d8c <_strtod_l+0x85c>
 8010cee:	ea58 080a 	orrs.w	r8, r8, sl
 8010cf2:	d174      	bne.n	8010dde <_strtod_l+0x8ae>
 8010cf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d170      	bne.n	8010dde <_strtod_l+0x8ae>
 8010cfc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d00:	0d1b      	lsrs	r3, r3, #20
 8010d02:	051b      	lsls	r3, r3, #20
 8010d04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010d08:	d969      	bls.n	8010dde <_strtod_l+0x8ae>
 8010d0a:	6963      	ldr	r3, [r4, #20]
 8010d0c:	b913      	cbnz	r3, 8010d14 <_strtod_l+0x7e4>
 8010d0e:	6923      	ldr	r3, [r4, #16]
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	dd64      	ble.n	8010dde <_strtod_l+0x8ae>
 8010d14:	4621      	mov	r1, r4
 8010d16:	2201      	movs	r2, #1
 8010d18:	9805      	ldr	r0, [sp, #20]
 8010d1a:	f7ff f997 	bl	801004c <__lshift>
 8010d1e:	4629      	mov	r1, r5
 8010d20:	4604      	mov	r4, r0
 8010d22:	f7ff f9ff 	bl	8010124 <__mcmp>
 8010d26:	2800      	cmp	r0, #0
 8010d28:	dd59      	ble.n	8010dde <_strtod_l+0x8ae>
 8010d2a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d2e:	9a06      	ldr	r2, [sp, #24]
 8010d30:	0d1b      	lsrs	r3, r3, #20
 8010d32:	051b      	lsls	r3, r3, #20
 8010d34:	2a00      	cmp	r2, #0
 8010d36:	d070      	beq.n	8010e1a <_strtod_l+0x8ea>
 8010d38:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010d3c:	d86d      	bhi.n	8010e1a <_strtod_l+0x8ea>
 8010d3e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010d42:	f67f ae99 	bls.w	8010a78 <_strtod_l+0x548>
 8010d46:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8010d78 <_strtod_l+0x848>
 8010d4a:	ec4b ab16 	vmov	d6, sl, fp
 8010d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8010d88 <_strtod_l+0x858>)
 8010d50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010d54:	ee17 2a90 	vmov	r2, s15
 8010d58:	4013      	ands	r3, r2
 8010d5a:	ec5b ab17 	vmov	sl, fp, d7
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f47f ae01 	bne.w	8010966 <_strtod_l+0x436>
 8010d64:	9a05      	ldr	r2, [sp, #20]
 8010d66:	2322      	movs	r3, #34	@ 0x22
 8010d68:	6013      	str	r3, [r2, #0]
 8010d6a:	e5fc      	b.n	8010966 <_strtod_l+0x436>
 8010d6c:	f3af 8000 	nop.w
 8010d70:	ffc00000 	.word	0xffc00000
 8010d74:	41dfffff 	.word	0x41dfffff
 8010d78:	00000000 	.word	0x00000000
 8010d7c:	39500000 	.word	0x39500000
 8010d80:	080125f0 	.word	0x080125f0
 8010d84:	fffffc02 	.word	0xfffffc02
 8010d88:	7ff00000 	.word	0x7ff00000
 8010d8c:	46d9      	mov	r9, fp
 8010d8e:	d15d      	bne.n	8010e4c <_strtod_l+0x91c>
 8010d90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d94:	f1b8 0f00 	cmp.w	r8, #0
 8010d98:	d02a      	beq.n	8010df0 <_strtod_l+0x8c0>
 8010d9a:	4aab      	ldr	r2, [pc, #684]	@ (8011048 <_strtod_l+0xb18>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d12a      	bne.n	8010df6 <_strtod_l+0x8c6>
 8010da0:	9b06      	ldr	r3, [sp, #24]
 8010da2:	4652      	mov	r2, sl
 8010da4:	b1fb      	cbz	r3, 8010de6 <_strtod_l+0x8b6>
 8010da6:	4ba9      	ldr	r3, [pc, #676]	@ (801104c <_strtod_l+0xb1c>)
 8010da8:	ea0b 0303 	and.w	r3, fp, r3
 8010dac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010db0:	f04f 31ff 	mov.w	r1, #4294967295
 8010db4:	d81a      	bhi.n	8010dec <_strtod_l+0x8bc>
 8010db6:	0d1b      	lsrs	r3, r3, #20
 8010db8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d118      	bne.n	8010df6 <_strtod_l+0x8c6>
 8010dc4:	4ba2      	ldr	r3, [pc, #648]	@ (8011050 <_strtod_l+0xb20>)
 8010dc6:	4599      	cmp	r9, r3
 8010dc8:	d102      	bne.n	8010dd0 <_strtod_l+0x8a0>
 8010dca:	3201      	adds	r2, #1
 8010dcc:	f43f adc0 	beq.w	8010950 <_strtod_l+0x420>
 8010dd0:	4b9e      	ldr	r3, [pc, #632]	@ (801104c <_strtod_l+0xb1c>)
 8010dd2:	ea09 0303 	and.w	r3, r9, r3
 8010dd6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8010dda:	f04f 0a00 	mov.w	sl, #0
 8010dde:	9b06      	ldr	r3, [sp, #24]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1b0      	bne.n	8010d46 <_strtod_l+0x816>
 8010de4:	e5bf      	b.n	8010966 <_strtod_l+0x436>
 8010de6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dea:	e7e9      	b.n	8010dc0 <_strtod_l+0x890>
 8010dec:	460b      	mov	r3, r1
 8010dee:	e7e7      	b.n	8010dc0 <_strtod_l+0x890>
 8010df0:	ea53 030a 	orrs.w	r3, r3, sl
 8010df4:	d099      	beq.n	8010d2a <_strtod_l+0x7fa>
 8010df6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010df8:	b1c3      	cbz	r3, 8010e2c <_strtod_l+0x8fc>
 8010dfa:	ea13 0f09 	tst.w	r3, r9
 8010dfe:	d0ee      	beq.n	8010dde <_strtod_l+0x8ae>
 8010e00:	9a06      	ldr	r2, [sp, #24]
 8010e02:	4650      	mov	r0, sl
 8010e04:	4659      	mov	r1, fp
 8010e06:	f1b8 0f00 	cmp.w	r8, #0
 8010e0a:	d013      	beq.n	8010e34 <_strtod_l+0x904>
 8010e0c:	f7ff fb75 	bl	80104fa <sulp>
 8010e10:	ee39 7b00 	vadd.f64	d7, d9, d0
 8010e14:	ec5b ab17 	vmov	sl, fp, d7
 8010e18:	e7e1      	b.n	8010dde <_strtod_l+0x8ae>
 8010e1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010e1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010e22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010e26:	f04f 3aff 	mov.w	sl, #4294967295
 8010e2a:	e7d8      	b.n	8010dde <_strtod_l+0x8ae>
 8010e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e2e:	ea13 0f0a 	tst.w	r3, sl
 8010e32:	e7e4      	b.n	8010dfe <_strtod_l+0x8ce>
 8010e34:	f7ff fb61 	bl	80104fa <sulp>
 8010e38:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010e3c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e44:	ec5b ab10 	vmov	sl, fp, d0
 8010e48:	d1c9      	bne.n	8010dde <_strtod_l+0x8ae>
 8010e4a:	e615      	b.n	8010a78 <_strtod_l+0x548>
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	4620      	mov	r0, r4
 8010e50:	f7ff fae0 	bl	8010414 <__ratio>
 8010e54:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8010e58:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e60:	d85d      	bhi.n	8010f1e <_strtod_l+0x9ee>
 8010e62:	f1b8 0f00 	cmp.w	r8, #0
 8010e66:	d164      	bne.n	8010f32 <_strtod_l+0xa02>
 8010e68:	f1ba 0f00 	cmp.w	sl, #0
 8010e6c:	d14b      	bne.n	8010f06 <_strtod_l+0x9d6>
 8010e6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e72:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d160      	bne.n	8010f3c <_strtod_l+0xa0c>
 8010e7a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8010e7e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e86:	d401      	bmi.n	8010e8c <_strtod_l+0x95c>
 8010e88:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010e8c:	eeb1 ab48 	vneg.f64	d10, d8
 8010e90:	486e      	ldr	r0, [pc, #440]	@ (801104c <_strtod_l+0xb1c>)
 8010e92:	4970      	ldr	r1, [pc, #448]	@ (8011054 <_strtod_l+0xb24>)
 8010e94:	ea09 0700 	and.w	r7, r9, r0
 8010e98:	428f      	cmp	r7, r1
 8010e9a:	ec53 2b1a 	vmov	r2, r3, d10
 8010e9e:	d17d      	bne.n	8010f9c <_strtod_l+0xa6c>
 8010ea0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8010ea4:	ec4b ab1c 	vmov	d12, sl, fp
 8010ea8:	eeb0 0b4c 	vmov.f64	d0, d12
 8010eac:	f7ff f9ea 	bl	8010284 <__ulp>
 8010eb0:	4866      	ldr	r0, [pc, #408]	@ (801104c <_strtod_l+0xb1c>)
 8010eb2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8010eb6:	ee1c 3a90 	vmov	r3, s25
 8010eba:	4a67      	ldr	r2, [pc, #412]	@ (8011058 <_strtod_l+0xb28>)
 8010ebc:	ea03 0100 	and.w	r1, r3, r0
 8010ec0:	4291      	cmp	r1, r2
 8010ec2:	ec5b ab1c 	vmov	sl, fp, d12
 8010ec6:	d93c      	bls.n	8010f42 <_strtod_l+0xa12>
 8010ec8:	ee19 2a90 	vmov	r2, s19
 8010ecc:	4b60      	ldr	r3, [pc, #384]	@ (8011050 <_strtod_l+0xb20>)
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d104      	bne.n	8010edc <_strtod_l+0x9ac>
 8010ed2:	ee19 3a10 	vmov	r3, s18
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	f43f ad3a 	beq.w	8010950 <_strtod_l+0x420>
 8010edc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8011050 <_strtod_l+0xb20>
 8010ee0:	f04f 3aff 	mov.w	sl, #4294967295
 8010ee4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010ee6:	9805      	ldr	r0, [sp, #20]
 8010ee8:	f7fe fe98 	bl	800fc1c <_Bfree>
 8010eec:	9805      	ldr	r0, [sp, #20]
 8010eee:	4631      	mov	r1, r6
 8010ef0:	f7fe fe94 	bl	800fc1c <_Bfree>
 8010ef4:	9805      	ldr	r0, [sp, #20]
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	f7fe fe90 	bl	800fc1c <_Bfree>
 8010efc:	9805      	ldr	r0, [sp, #20]
 8010efe:	4621      	mov	r1, r4
 8010f00:	f7fe fe8c 	bl	800fc1c <_Bfree>
 8010f04:	e625      	b.n	8010b52 <_strtod_l+0x622>
 8010f06:	f1ba 0f01 	cmp.w	sl, #1
 8010f0a:	d103      	bne.n	8010f14 <_strtod_l+0x9e4>
 8010f0c:	f1bb 0f00 	cmp.w	fp, #0
 8010f10:	f43f adb2 	beq.w	8010a78 <_strtod_l+0x548>
 8010f14:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010f18:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8010f1c:	e7b8      	b.n	8010e90 <_strtod_l+0x960>
 8010f1e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8010f22:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010f26:	f1b8 0f00 	cmp.w	r8, #0
 8010f2a:	d0af      	beq.n	8010e8c <_strtod_l+0x95c>
 8010f2c:	eeb0 ab48 	vmov.f64	d10, d8
 8010f30:	e7ae      	b.n	8010e90 <_strtod_l+0x960>
 8010f32:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8010f36:	eeb0 8b4a 	vmov.f64	d8, d10
 8010f3a:	e7a9      	b.n	8010e90 <_strtod_l+0x960>
 8010f3c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8010f40:	e7a6      	b.n	8010e90 <_strtod_l+0x960>
 8010f42:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010f46:	9b06      	ldr	r3, [sp, #24]
 8010f48:	46d9      	mov	r9, fp
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d1ca      	bne.n	8010ee4 <_strtod_l+0x9b4>
 8010f4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010f52:	0d1b      	lsrs	r3, r3, #20
 8010f54:	051b      	lsls	r3, r3, #20
 8010f56:	429f      	cmp	r7, r3
 8010f58:	d1c4      	bne.n	8010ee4 <_strtod_l+0x9b4>
 8010f5a:	ec51 0b18 	vmov	r0, r1, d8
 8010f5e:	f7ef fc03 	bl	8000768 <__aeabi_d2lz>
 8010f62:	f7ef fbbb 	bl	80006dc <__aeabi_l2d>
 8010f66:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8010f6a:	ec41 0b17 	vmov	d7, r0, r1
 8010f6e:	ea49 090a 	orr.w	r9, r9, sl
 8010f72:	ea59 0908 	orrs.w	r9, r9, r8
 8010f76:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010f7a:	d03c      	beq.n	8010ff6 <_strtod_l+0xac6>
 8010f7c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8011030 <_strtod_l+0xb00>
 8010f80:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f88:	f53f aced 	bmi.w	8010966 <_strtod_l+0x436>
 8010f8c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011038 <_strtod_l+0xb08>
 8010f90:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f98:	dda4      	ble.n	8010ee4 <_strtod_l+0x9b4>
 8010f9a:	e4e4      	b.n	8010966 <_strtod_l+0x436>
 8010f9c:	9906      	ldr	r1, [sp, #24]
 8010f9e:	b1e1      	cbz	r1, 8010fda <_strtod_l+0xaaa>
 8010fa0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8010fa4:	d819      	bhi.n	8010fda <_strtod_l+0xaaa>
 8010fa6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8010faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fae:	d811      	bhi.n	8010fd4 <_strtod_l+0xaa4>
 8010fb0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8010fb4:	ee18 3a10 	vmov	r3, s16
 8010fb8:	2b01      	cmp	r3, #1
 8010fba:	bf38      	it	cc
 8010fbc:	2301      	movcc	r3, #1
 8010fbe:	ee08 3a10 	vmov	s16, r3
 8010fc2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8010fc6:	f1b8 0f00 	cmp.w	r8, #0
 8010fca:	d111      	bne.n	8010ff0 <_strtod_l+0xac0>
 8010fcc:	eeb1 7b48 	vneg.f64	d7, d8
 8010fd0:	ec53 2b17 	vmov	r2, r3, d7
 8010fd4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8010fd8:	1bcb      	subs	r3, r1, r7
 8010fda:	eeb0 0b49 	vmov.f64	d0, d9
 8010fde:	ec43 2b1a 	vmov	d10, r2, r3
 8010fe2:	f7ff f94f 	bl	8010284 <__ulp>
 8010fe6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8010fea:	ec5b ab19 	vmov	sl, fp, d9
 8010fee:	e7aa      	b.n	8010f46 <_strtod_l+0xa16>
 8010ff0:	eeb0 7b48 	vmov.f64	d7, d8
 8010ff4:	e7ec      	b.n	8010fd0 <_strtod_l+0xaa0>
 8010ff6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8011040 <_strtod_l+0xb10>
 8010ffa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011002:	f57f af6f 	bpl.w	8010ee4 <_strtod_l+0x9b4>
 8011006:	e4ae      	b.n	8010966 <_strtod_l+0x436>
 8011008:	2300      	movs	r3, #0
 801100a:	9308      	str	r3, [sp, #32]
 801100c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801100e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011010:	6013      	str	r3, [r2, #0]
 8011012:	f7ff bacc 	b.w	80105ae <_strtod_l+0x7e>
 8011016:	2a65      	cmp	r2, #101	@ 0x65
 8011018:	f43f abbc 	beq.w	8010794 <_strtod_l+0x264>
 801101c:	2a45      	cmp	r2, #69	@ 0x45
 801101e:	f43f abb9 	beq.w	8010794 <_strtod_l+0x264>
 8011022:	2301      	movs	r3, #1
 8011024:	9306      	str	r3, [sp, #24]
 8011026:	f7ff bbf0 	b.w	801080a <_strtod_l+0x2da>
 801102a:	bf00      	nop
 801102c:	f3af 8000 	nop.w
 8011030:	94a03595 	.word	0x94a03595
 8011034:	3fdfffff 	.word	0x3fdfffff
 8011038:	35afe535 	.word	0x35afe535
 801103c:	3fe00000 	.word	0x3fe00000
 8011040:	94a03595 	.word	0x94a03595
 8011044:	3fcfffff 	.word	0x3fcfffff
 8011048:	000fffff 	.word	0x000fffff
 801104c:	7ff00000 	.word	0x7ff00000
 8011050:	7fefffff 	.word	0x7fefffff
 8011054:	7fe00000 	.word	0x7fe00000
 8011058:	7c9fffff 	.word	0x7c9fffff

0801105c <_strtod_r>:
 801105c:	4b01      	ldr	r3, [pc, #4]	@ (8011064 <_strtod_r+0x8>)
 801105e:	f7ff ba67 	b.w	8010530 <_strtod_l>
 8011062:	bf00      	nop
 8011064:	2400006c 	.word	0x2400006c

08011068 <_strtol_l.constprop.0>:
 8011068:	2b24      	cmp	r3, #36	@ 0x24
 801106a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801106e:	4686      	mov	lr, r0
 8011070:	4690      	mov	r8, r2
 8011072:	d801      	bhi.n	8011078 <_strtol_l.constprop.0+0x10>
 8011074:	2b01      	cmp	r3, #1
 8011076:	d106      	bne.n	8011086 <_strtol_l.constprop.0+0x1e>
 8011078:	f7fd fe7c 	bl	800ed74 <__errno>
 801107c:	2316      	movs	r3, #22
 801107e:	6003      	str	r3, [r0, #0]
 8011080:	2000      	movs	r0, #0
 8011082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011086:	4834      	ldr	r0, [pc, #208]	@ (8011158 <_strtol_l.constprop.0+0xf0>)
 8011088:	460d      	mov	r5, r1
 801108a:	462a      	mov	r2, r5
 801108c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011090:	5d06      	ldrb	r6, [r0, r4]
 8011092:	f016 0608 	ands.w	r6, r6, #8
 8011096:	d1f8      	bne.n	801108a <_strtol_l.constprop.0+0x22>
 8011098:	2c2d      	cmp	r4, #45	@ 0x2d
 801109a:	d12d      	bne.n	80110f8 <_strtol_l.constprop.0+0x90>
 801109c:	782c      	ldrb	r4, [r5, #0]
 801109e:	2601      	movs	r6, #1
 80110a0:	1c95      	adds	r5, r2, #2
 80110a2:	f033 0210 	bics.w	r2, r3, #16
 80110a6:	d109      	bne.n	80110bc <_strtol_l.constprop.0+0x54>
 80110a8:	2c30      	cmp	r4, #48	@ 0x30
 80110aa:	d12a      	bne.n	8011102 <_strtol_l.constprop.0+0x9a>
 80110ac:	782a      	ldrb	r2, [r5, #0]
 80110ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80110b2:	2a58      	cmp	r2, #88	@ 0x58
 80110b4:	d125      	bne.n	8011102 <_strtol_l.constprop.0+0x9a>
 80110b6:	786c      	ldrb	r4, [r5, #1]
 80110b8:	2310      	movs	r3, #16
 80110ba:	3502      	adds	r5, #2
 80110bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80110c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80110c4:	2200      	movs	r2, #0
 80110c6:	fbbc f9f3 	udiv	r9, ip, r3
 80110ca:	4610      	mov	r0, r2
 80110cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80110d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80110d4:	2f09      	cmp	r7, #9
 80110d6:	d81b      	bhi.n	8011110 <_strtol_l.constprop.0+0xa8>
 80110d8:	463c      	mov	r4, r7
 80110da:	42a3      	cmp	r3, r4
 80110dc:	dd27      	ble.n	801112e <_strtol_l.constprop.0+0xc6>
 80110de:	1c57      	adds	r7, r2, #1
 80110e0:	d007      	beq.n	80110f2 <_strtol_l.constprop.0+0x8a>
 80110e2:	4581      	cmp	r9, r0
 80110e4:	d320      	bcc.n	8011128 <_strtol_l.constprop.0+0xc0>
 80110e6:	d101      	bne.n	80110ec <_strtol_l.constprop.0+0x84>
 80110e8:	45a2      	cmp	sl, r4
 80110ea:	db1d      	blt.n	8011128 <_strtol_l.constprop.0+0xc0>
 80110ec:	fb00 4003 	mla	r0, r0, r3, r4
 80110f0:	2201      	movs	r2, #1
 80110f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80110f6:	e7eb      	b.n	80110d0 <_strtol_l.constprop.0+0x68>
 80110f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80110fa:	bf04      	itt	eq
 80110fc:	782c      	ldrbeq	r4, [r5, #0]
 80110fe:	1c95      	addeq	r5, r2, #2
 8011100:	e7cf      	b.n	80110a2 <_strtol_l.constprop.0+0x3a>
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1da      	bne.n	80110bc <_strtol_l.constprop.0+0x54>
 8011106:	2c30      	cmp	r4, #48	@ 0x30
 8011108:	bf0c      	ite	eq
 801110a:	2308      	moveq	r3, #8
 801110c:	230a      	movne	r3, #10
 801110e:	e7d5      	b.n	80110bc <_strtol_l.constprop.0+0x54>
 8011110:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011114:	2f19      	cmp	r7, #25
 8011116:	d801      	bhi.n	801111c <_strtol_l.constprop.0+0xb4>
 8011118:	3c37      	subs	r4, #55	@ 0x37
 801111a:	e7de      	b.n	80110da <_strtol_l.constprop.0+0x72>
 801111c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011120:	2f19      	cmp	r7, #25
 8011122:	d804      	bhi.n	801112e <_strtol_l.constprop.0+0xc6>
 8011124:	3c57      	subs	r4, #87	@ 0x57
 8011126:	e7d8      	b.n	80110da <_strtol_l.constprop.0+0x72>
 8011128:	f04f 32ff 	mov.w	r2, #4294967295
 801112c:	e7e1      	b.n	80110f2 <_strtol_l.constprop.0+0x8a>
 801112e:	1c53      	adds	r3, r2, #1
 8011130:	d108      	bne.n	8011144 <_strtol_l.constprop.0+0xdc>
 8011132:	2322      	movs	r3, #34	@ 0x22
 8011134:	f8ce 3000 	str.w	r3, [lr]
 8011138:	4660      	mov	r0, ip
 801113a:	f1b8 0f00 	cmp.w	r8, #0
 801113e:	d0a0      	beq.n	8011082 <_strtol_l.constprop.0+0x1a>
 8011140:	1e69      	subs	r1, r5, #1
 8011142:	e006      	b.n	8011152 <_strtol_l.constprop.0+0xea>
 8011144:	b106      	cbz	r6, 8011148 <_strtol_l.constprop.0+0xe0>
 8011146:	4240      	negs	r0, r0
 8011148:	f1b8 0f00 	cmp.w	r8, #0
 801114c:	d099      	beq.n	8011082 <_strtol_l.constprop.0+0x1a>
 801114e:	2a00      	cmp	r2, #0
 8011150:	d1f6      	bne.n	8011140 <_strtol_l.constprop.0+0xd8>
 8011152:	f8c8 1000 	str.w	r1, [r8]
 8011156:	e794      	b.n	8011082 <_strtol_l.constprop.0+0x1a>
 8011158:	08012619 	.word	0x08012619

0801115c <_strtol_r>:
 801115c:	f7ff bf84 	b.w	8011068 <_strtol_l.constprop.0>

08011160 <__ssputs_r>:
 8011160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011164:	688e      	ldr	r6, [r1, #8]
 8011166:	461f      	mov	r7, r3
 8011168:	42be      	cmp	r6, r7
 801116a:	680b      	ldr	r3, [r1, #0]
 801116c:	4682      	mov	sl, r0
 801116e:	460c      	mov	r4, r1
 8011170:	4690      	mov	r8, r2
 8011172:	d82d      	bhi.n	80111d0 <__ssputs_r+0x70>
 8011174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011178:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801117c:	d026      	beq.n	80111cc <__ssputs_r+0x6c>
 801117e:	6965      	ldr	r5, [r4, #20]
 8011180:	6909      	ldr	r1, [r1, #16]
 8011182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011186:	eba3 0901 	sub.w	r9, r3, r1
 801118a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801118e:	1c7b      	adds	r3, r7, #1
 8011190:	444b      	add	r3, r9
 8011192:	106d      	asrs	r5, r5, #1
 8011194:	429d      	cmp	r5, r3
 8011196:	bf38      	it	cc
 8011198:	461d      	movcc	r5, r3
 801119a:	0553      	lsls	r3, r2, #21
 801119c:	d527      	bpl.n	80111ee <__ssputs_r+0x8e>
 801119e:	4629      	mov	r1, r5
 80111a0:	f7fe fc70 	bl	800fa84 <_malloc_r>
 80111a4:	4606      	mov	r6, r0
 80111a6:	b360      	cbz	r0, 8011202 <__ssputs_r+0xa2>
 80111a8:	6921      	ldr	r1, [r4, #16]
 80111aa:	464a      	mov	r2, r9
 80111ac:	f000 fbee 	bl	801198c <memcpy>
 80111b0:	89a3      	ldrh	r3, [r4, #12]
 80111b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80111b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111ba:	81a3      	strh	r3, [r4, #12]
 80111bc:	6126      	str	r6, [r4, #16]
 80111be:	6165      	str	r5, [r4, #20]
 80111c0:	444e      	add	r6, r9
 80111c2:	eba5 0509 	sub.w	r5, r5, r9
 80111c6:	6026      	str	r6, [r4, #0]
 80111c8:	60a5      	str	r5, [r4, #8]
 80111ca:	463e      	mov	r6, r7
 80111cc:	42be      	cmp	r6, r7
 80111ce:	d900      	bls.n	80111d2 <__ssputs_r+0x72>
 80111d0:	463e      	mov	r6, r7
 80111d2:	6820      	ldr	r0, [r4, #0]
 80111d4:	4632      	mov	r2, r6
 80111d6:	4641      	mov	r1, r8
 80111d8:	f000 fb9c 	bl	8011914 <memmove>
 80111dc:	68a3      	ldr	r3, [r4, #8]
 80111de:	1b9b      	subs	r3, r3, r6
 80111e0:	60a3      	str	r3, [r4, #8]
 80111e2:	6823      	ldr	r3, [r4, #0]
 80111e4:	4433      	add	r3, r6
 80111e6:	6023      	str	r3, [r4, #0]
 80111e8:	2000      	movs	r0, #0
 80111ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ee:	462a      	mov	r2, r5
 80111f0:	f000 ff5f 	bl	80120b2 <_realloc_r>
 80111f4:	4606      	mov	r6, r0
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d1e0      	bne.n	80111bc <__ssputs_r+0x5c>
 80111fa:	6921      	ldr	r1, [r4, #16]
 80111fc:	4650      	mov	r0, sl
 80111fe:	f7fe fbcd 	bl	800f99c <_free_r>
 8011202:	230c      	movs	r3, #12
 8011204:	f8ca 3000 	str.w	r3, [sl]
 8011208:	89a3      	ldrh	r3, [r4, #12]
 801120a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801120e:	81a3      	strh	r3, [r4, #12]
 8011210:	f04f 30ff 	mov.w	r0, #4294967295
 8011214:	e7e9      	b.n	80111ea <__ssputs_r+0x8a>
	...

08011218 <_svfiprintf_r>:
 8011218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801121c:	4698      	mov	r8, r3
 801121e:	898b      	ldrh	r3, [r1, #12]
 8011220:	061b      	lsls	r3, r3, #24
 8011222:	b09d      	sub	sp, #116	@ 0x74
 8011224:	4607      	mov	r7, r0
 8011226:	460d      	mov	r5, r1
 8011228:	4614      	mov	r4, r2
 801122a:	d510      	bpl.n	801124e <_svfiprintf_r+0x36>
 801122c:	690b      	ldr	r3, [r1, #16]
 801122e:	b973      	cbnz	r3, 801124e <_svfiprintf_r+0x36>
 8011230:	2140      	movs	r1, #64	@ 0x40
 8011232:	f7fe fc27 	bl	800fa84 <_malloc_r>
 8011236:	6028      	str	r0, [r5, #0]
 8011238:	6128      	str	r0, [r5, #16]
 801123a:	b930      	cbnz	r0, 801124a <_svfiprintf_r+0x32>
 801123c:	230c      	movs	r3, #12
 801123e:	603b      	str	r3, [r7, #0]
 8011240:	f04f 30ff 	mov.w	r0, #4294967295
 8011244:	b01d      	add	sp, #116	@ 0x74
 8011246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124a:	2340      	movs	r3, #64	@ 0x40
 801124c:	616b      	str	r3, [r5, #20]
 801124e:	2300      	movs	r3, #0
 8011250:	9309      	str	r3, [sp, #36]	@ 0x24
 8011252:	2320      	movs	r3, #32
 8011254:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011258:	f8cd 800c 	str.w	r8, [sp, #12]
 801125c:	2330      	movs	r3, #48	@ 0x30
 801125e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80113fc <_svfiprintf_r+0x1e4>
 8011262:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011266:	f04f 0901 	mov.w	r9, #1
 801126a:	4623      	mov	r3, r4
 801126c:	469a      	mov	sl, r3
 801126e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011272:	b10a      	cbz	r2, 8011278 <_svfiprintf_r+0x60>
 8011274:	2a25      	cmp	r2, #37	@ 0x25
 8011276:	d1f9      	bne.n	801126c <_svfiprintf_r+0x54>
 8011278:	ebba 0b04 	subs.w	fp, sl, r4
 801127c:	d00b      	beq.n	8011296 <_svfiprintf_r+0x7e>
 801127e:	465b      	mov	r3, fp
 8011280:	4622      	mov	r2, r4
 8011282:	4629      	mov	r1, r5
 8011284:	4638      	mov	r0, r7
 8011286:	f7ff ff6b 	bl	8011160 <__ssputs_r>
 801128a:	3001      	adds	r0, #1
 801128c:	f000 80a7 	beq.w	80113de <_svfiprintf_r+0x1c6>
 8011290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011292:	445a      	add	r2, fp
 8011294:	9209      	str	r2, [sp, #36]	@ 0x24
 8011296:	f89a 3000 	ldrb.w	r3, [sl]
 801129a:	2b00      	cmp	r3, #0
 801129c:	f000 809f 	beq.w	80113de <_svfiprintf_r+0x1c6>
 80112a0:	2300      	movs	r3, #0
 80112a2:	f04f 32ff 	mov.w	r2, #4294967295
 80112a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112aa:	f10a 0a01 	add.w	sl, sl, #1
 80112ae:	9304      	str	r3, [sp, #16]
 80112b0:	9307      	str	r3, [sp, #28]
 80112b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80112b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80112b8:	4654      	mov	r4, sl
 80112ba:	2205      	movs	r2, #5
 80112bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112c0:	484e      	ldr	r0, [pc, #312]	@ (80113fc <_svfiprintf_r+0x1e4>)
 80112c2:	f7ef f825 	bl	8000310 <memchr>
 80112c6:	9a04      	ldr	r2, [sp, #16]
 80112c8:	b9d8      	cbnz	r0, 8011302 <_svfiprintf_r+0xea>
 80112ca:	06d0      	lsls	r0, r2, #27
 80112cc:	bf44      	itt	mi
 80112ce:	2320      	movmi	r3, #32
 80112d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112d4:	0711      	lsls	r1, r2, #28
 80112d6:	bf44      	itt	mi
 80112d8:	232b      	movmi	r3, #43	@ 0x2b
 80112da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112de:	f89a 3000 	ldrb.w	r3, [sl]
 80112e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80112e4:	d015      	beq.n	8011312 <_svfiprintf_r+0xfa>
 80112e6:	9a07      	ldr	r2, [sp, #28]
 80112e8:	4654      	mov	r4, sl
 80112ea:	2000      	movs	r0, #0
 80112ec:	f04f 0c0a 	mov.w	ip, #10
 80112f0:	4621      	mov	r1, r4
 80112f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112f6:	3b30      	subs	r3, #48	@ 0x30
 80112f8:	2b09      	cmp	r3, #9
 80112fa:	d94b      	bls.n	8011394 <_svfiprintf_r+0x17c>
 80112fc:	b1b0      	cbz	r0, 801132c <_svfiprintf_r+0x114>
 80112fe:	9207      	str	r2, [sp, #28]
 8011300:	e014      	b.n	801132c <_svfiprintf_r+0x114>
 8011302:	eba0 0308 	sub.w	r3, r0, r8
 8011306:	fa09 f303 	lsl.w	r3, r9, r3
 801130a:	4313      	orrs	r3, r2
 801130c:	9304      	str	r3, [sp, #16]
 801130e:	46a2      	mov	sl, r4
 8011310:	e7d2      	b.n	80112b8 <_svfiprintf_r+0xa0>
 8011312:	9b03      	ldr	r3, [sp, #12]
 8011314:	1d19      	adds	r1, r3, #4
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	9103      	str	r1, [sp, #12]
 801131a:	2b00      	cmp	r3, #0
 801131c:	bfbb      	ittet	lt
 801131e:	425b      	neglt	r3, r3
 8011320:	f042 0202 	orrlt.w	r2, r2, #2
 8011324:	9307      	strge	r3, [sp, #28]
 8011326:	9307      	strlt	r3, [sp, #28]
 8011328:	bfb8      	it	lt
 801132a:	9204      	strlt	r2, [sp, #16]
 801132c:	7823      	ldrb	r3, [r4, #0]
 801132e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011330:	d10a      	bne.n	8011348 <_svfiprintf_r+0x130>
 8011332:	7863      	ldrb	r3, [r4, #1]
 8011334:	2b2a      	cmp	r3, #42	@ 0x2a
 8011336:	d132      	bne.n	801139e <_svfiprintf_r+0x186>
 8011338:	9b03      	ldr	r3, [sp, #12]
 801133a:	1d1a      	adds	r2, r3, #4
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	9203      	str	r2, [sp, #12]
 8011340:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011344:	3402      	adds	r4, #2
 8011346:	9305      	str	r3, [sp, #20]
 8011348:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801140c <_svfiprintf_r+0x1f4>
 801134c:	7821      	ldrb	r1, [r4, #0]
 801134e:	2203      	movs	r2, #3
 8011350:	4650      	mov	r0, sl
 8011352:	f7ee ffdd 	bl	8000310 <memchr>
 8011356:	b138      	cbz	r0, 8011368 <_svfiprintf_r+0x150>
 8011358:	9b04      	ldr	r3, [sp, #16]
 801135a:	eba0 000a 	sub.w	r0, r0, sl
 801135e:	2240      	movs	r2, #64	@ 0x40
 8011360:	4082      	lsls	r2, r0
 8011362:	4313      	orrs	r3, r2
 8011364:	3401      	adds	r4, #1
 8011366:	9304      	str	r3, [sp, #16]
 8011368:	f814 1b01 	ldrb.w	r1, [r4], #1
 801136c:	4824      	ldr	r0, [pc, #144]	@ (8011400 <_svfiprintf_r+0x1e8>)
 801136e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011372:	2206      	movs	r2, #6
 8011374:	f7ee ffcc 	bl	8000310 <memchr>
 8011378:	2800      	cmp	r0, #0
 801137a:	d036      	beq.n	80113ea <_svfiprintf_r+0x1d2>
 801137c:	4b21      	ldr	r3, [pc, #132]	@ (8011404 <_svfiprintf_r+0x1ec>)
 801137e:	bb1b      	cbnz	r3, 80113c8 <_svfiprintf_r+0x1b0>
 8011380:	9b03      	ldr	r3, [sp, #12]
 8011382:	3307      	adds	r3, #7
 8011384:	f023 0307 	bic.w	r3, r3, #7
 8011388:	3308      	adds	r3, #8
 801138a:	9303      	str	r3, [sp, #12]
 801138c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801138e:	4433      	add	r3, r6
 8011390:	9309      	str	r3, [sp, #36]	@ 0x24
 8011392:	e76a      	b.n	801126a <_svfiprintf_r+0x52>
 8011394:	fb0c 3202 	mla	r2, ip, r2, r3
 8011398:	460c      	mov	r4, r1
 801139a:	2001      	movs	r0, #1
 801139c:	e7a8      	b.n	80112f0 <_svfiprintf_r+0xd8>
 801139e:	2300      	movs	r3, #0
 80113a0:	3401      	adds	r4, #1
 80113a2:	9305      	str	r3, [sp, #20]
 80113a4:	4619      	mov	r1, r3
 80113a6:	f04f 0c0a 	mov.w	ip, #10
 80113aa:	4620      	mov	r0, r4
 80113ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113b0:	3a30      	subs	r2, #48	@ 0x30
 80113b2:	2a09      	cmp	r2, #9
 80113b4:	d903      	bls.n	80113be <_svfiprintf_r+0x1a6>
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d0c6      	beq.n	8011348 <_svfiprintf_r+0x130>
 80113ba:	9105      	str	r1, [sp, #20]
 80113bc:	e7c4      	b.n	8011348 <_svfiprintf_r+0x130>
 80113be:	fb0c 2101 	mla	r1, ip, r1, r2
 80113c2:	4604      	mov	r4, r0
 80113c4:	2301      	movs	r3, #1
 80113c6:	e7f0      	b.n	80113aa <_svfiprintf_r+0x192>
 80113c8:	ab03      	add	r3, sp, #12
 80113ca:	9300      	str	r3, [sp, #0]
 80113cc:	462a      	mov	r2, r5
 80113ce:	4b0e      	ldr	r3, [pc, #56]	@ (8011408 <_svfiprintf_r+0x1f0>)
 80113d0:	a904      	add	r1, sp, #16
 80113d2:	4638      	mov	r0, r7
 80113d4:	f7fc fd90 	bl	800def8 <_printf_float>
 80113d8:	1c42      	adds	r2, r0, #1
 80113da:	4606      	mov	r6, r0
 80113dc:	d1d6      	bne.n	801138c <_svfiprintf_r+0x174>
 80113de:	89ab      	ldrh	r3, [r5, #12]
 80113e0:	065b      	lsls	r3, r3, #25
 80113e2:	f53f af2d 	bmi.w	8011240 <_svfiprintf_r+0x28>
 80113e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113e8:	e72c      	b.n	8011244 <_svfiprintf_r+0x2c>
 80113ea:	ab03      	add	r3, sp, #12
 80113ec:	9300      	str	r3, [sp, #0]
 80113ee:	462a      	mov	r2, r5
 80113f0:	4b05      	ldr	r3, [pc, #20]	@ (8011408 <_svfiprintf_r+0x1f0>)
 80113f2:	a904      	add	r1, sp, #16
 80113f4:	4638      	mov	r0, r7
 80113f6:	f7fd f807 	bl	800e408 <_printf_i>
 80113fa:	e7ed      	b.n	80113d8 <_svfiprintf_r+0x1c0>
 80113fc:	08012719 	.word	0x08012719
 8011400:	08012723 	.word	0x08012723
 8011404:	0800def9 	.word	0x0800def9
 8011408:	08011161 	.word	0x08011161
 801140c:	0801271f 	.word	0x0801271f

08011410 <__sfputc_r>:
 8011410:	6893      	ldr	r3, [r2, #8]
 8011412:	3b01      	subs	r3, #1
 8011414:	2b00      	cmp	r3, #0
 8011416:	b410      	push	{r4}
 8011418:	6093      	str	r3, [r2, #8]
 801141a:	da08      	bge.n	801142e <__sfputc_r+0x1e>
 801141c:	6994      	ldr	r4, [r2, #24]
 801141e:	42a3      	cmp	r3, r4
 8011420:	db01      	blt.n	8011426 <__sfputc_r+0x16>
 8011422:	290a      	cmp	r1, #10
 8011424:	d103      	bne.n	801142e <__sfputc_r+0x1e>
 8011426:	f85d 4b04 	ldr.w	r4, [sp], #4
 801142a:	f000 b9df 	b.w	80117ec <__swbuf_r>
 801142e:	6813      	ldr	r3, [r2, #0]
 8011430:	1c58      	adds	r0, r3, #1
 8011432:	6010      	str	r0, [r2, #0]
 8011434:	7019      	strb	r1, [r3, #0]
 8011436:	4608      	mov	r0, r1
 8011438:	f85d 4b04 	ldr.w	r4, [sp], #4
 801143c:	4770      	bx	lr

0801143e <__sfputs_r>:
 801143e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011440:	4606      	mov	r6, r0
 8011442:	460f      	mov	r7, r1
 8011444:	4614      	mov	r4, r2
 8011446:	18d5      	adds	r5, r2, r3
 8011448:	42ac      	cmp	r4, r5
 801144a:	d101      	bne.n	8011450 <__sfputs_r+0x12>
 801144c:	2000      	movs	r0, #0
 801144e:	e007      	b.n	8011460 <__sfputs_r+0x22>
 8011450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011454:	463a      	mov	r2, r7
 8011456:	4630      	mov	r0, r6
 8011458:	f7ff ffda 	bl	8011410 <__sfputc_r>
 801145c:	1c43      	adds	r3, r0, #1
 801145e:	d1f3      	bne.n	8011448 <__sfputs_r+0xa>
 8011460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011464 <_vfiprintf_r>:
 8011464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011468:	460d      	mov	r5, r1
 801146a:	b09d      	sub	sp, #116	@ 0x74
 801146c:	4614      	mov	r4, r2
 801146e:	4698      	mov	r8, r3
 8011470:	4606      	mov	r6, r0
 8011472:	b118      	cbz	r0, 801147c <_vfiprintf_r+0x18>
 8011474:	6a03      	ldr	r3, [r0, #32]
 8011476:	b90b      	cbnz	r3, 801147c <_vfiprintf_r+0x18>
 8011478:	f7fd fb7e 	bl	800eb78 <__sinit>
 801147c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801147e:	07d9      	lsls	r1, r3, #31
 8011480:	d405      	bmi.n	801148e <_vfiprintf_r+0x2a>
 8011482:	89ab      	ldrh	r3, [r5, #12]
 8011484:	059a      	lsls	r2, r3, #22
 8011486:	d402      	bmi.n	801148e <_vfiprintf_r+0x2a>
 8011488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801148a:	f7fd fc9e 	bl	800edca <__retarget_lock_acquire_recursive>
 801148e:	89ab      	ldrh	r3, [r5, #12]
 8011490:	071b      	lsls	r3, r3, #28
 8011492:	d501      	bpl.n	8011498 <_vfiprintf_r+0x34>
 8011494:	692b      	ldr	r3, [r5, #16]
 8011496:	b99b      	cbnz	r3, 80114c0 <_vfiprintf_r+0x5c>
 8011498:	4629      	mov	r1, r5
 801149a:	4630      	mov	r0, r6
 801149c:	f000 f9e4 	bl	8011868 <__swsetup_r>
 80114a0:	b170      	cbz	r0, 80114c0 <_vfiprintf_r+0x5c>
 80114a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80114a4:	07dc      	lsls	r4, r3, #31
 80114a6:	d504      	bpl.n	80114b2 <_vfiprintf_r+0x4e>
 80114a8:	f04f 30ff 	mov.w	r0, #4294967295
 80114ac:	b01d      	add	sp, #116	@ 0x74
 80114ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b2:	89ab      	ldrh	r3, [r5, #12]
 80114b4:	0598      	lsls	r0, r3, #22
 80114b6:	d4f7      	bmi.n	80114a8 <_vfiprintf_r+0x44>
 80114b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80114ba:	f7fd fc87 	bl	800edcc <__retarget_lock_release_recursive>
 80114be:	e7f3      	b.n	80114a8 <_vfiprintf_r+0x44>
 80114c0:	2300      	movs	r3, #0
 80114c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80114c4:	2320      	movs	r3, #32
 80114c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80114ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80114ce:	2330      	movs	r3, #48	@ 0x30
 80114d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011680 <_vfiprintf_r+0x21c>
 80114d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80114d8:	f04f 0901 	mov.w	r9, #1
 80114dc:	4623      	mov	r3, r4
 80114de:	469a      	mov	sl, r3
 80114e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114e4:	b10a      	cbz	r2, 80114ea <_vfiprintf_r+0x86>
 80114e6:	2a25      	cmp	r2, #37	@ 0x25
 80114e8:	d1f9      	bne.n	80114de <_vfiprintf_r+0x7a>
 80114ea:	ebba 0b04 	subs.w	fp, sl, r4
 80114ee:	d00b      	beq.n	8011508 <_vfiprintf_r+0xa4>
 80114f0:	465b      	mov	r3, fp
 80114f2:	4622      	mov	r2, r4
 80114f4:	4629      	mov	r1, r5
 80114f6:	4630      	mov	r0, r6
 80114f8:	f7ff ffa1 	bl	801143e <__sfputs_r>
 80114fc:	3001      	adds	r0, #1
 80114fe:	f000 80a7 	beq.w	8011650 <_vfiprintf_r+0x1ec>
 8011502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011504:	445a      	add	r2, fp
 8011506:	9209      	str	r2, [sp, #36]	@ 0x24
 8011508:	f89a 3000 	ldrb.w	r3, [sl]
 801150c:	2b00      	cmp	r3, #0
 801150e:	f000 809f 	beq.w	8011650 <_vfiprintf_r+0x1ec>
 8011512:	2300      	movs	r3, #0
 8011514:	f04f 32ff 	mov.w	r2, #4294967295
 8011518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801151c:	f10a 0a01 	add.w	sl, sl, #1
 8011520:	9304      	str	r3, [sp, #16]
 8011522:	9307      	str	r3, [sp, #28]
 8011524:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011528:	931a      	str	r3, [sp, #104]	@ 0x68
 801152a:	4654      	mov	r4, sl
 801152c:	2205      	movs	r2, #5
 801152e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011532:	4853      	ldr	r0, [pc, #332]	@ (8011680 <_vfiprintf_r+0x21c>)
 8011534:	f7ee feec 	bl	8000310 <memchr>
 8011538:	9a04      	ldr	r2, [sp, #16]
 801153a:	b9d8      	cbnz	r0, 8011574 <_vfiprintf_r+0x110>
 801153c:	06d1      	lsls	r1, r2, #27
 801153e:	bf44      	itt	mi
 8011540:	2320      	movmi	r3, #32
 8011542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011546:	0713      	lsls	r3, r2, #28
 8011548:	bf44      	itt	mi
 801154a:	232b      	movmi	r3, #43	@ 0x2b
 801154c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011550:	f89a 3000 	ldrb.w	r3, [sl]
 8011554:	2b2a      	cmp	r3, #42	@ 0x2a
 8011556:	d015      	beq.n	8011584 <_vfiprintf_r+0x120>
 8011558:	9a07      	ldr	r2, [sp, #28]
 801155a:	4654      	mov	r4, sl
 801155c:	2000      	movs	r0, #0
 801155e:	f04f 0c0a 	mov.w	ip, #10
 8011562:	4621      	mov	r1, r4
 8011564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011568:	3b30      	subs	r3, #48	@ 0x30
 801156a:	2b09      	cmp	r3, #9
 801156c:	d94b      	bls.n	8011606 <_vfiprintf_r+0x1a2>
 801156e:	b1b0      	cbz	r0, 801159e <_vfiprintf_r+0x13a>
 8011570:	9207      	str	r2, [sp, #28]
 8011572:	e014      	b.n	801159e <_vfiprintf_r+0x13a>
 8011574:	eba0 0308 	sub.w	r3, r0, r8
 8011578:	fa09 f303 	lsl.w	r3, r9, r3
 801157c:	4313      	orrs	r3, r2
 801157e:	9304      	str	r3, [sp, #16]
 8011580:	46a2      	mov	sl, r4
 8011582:	e7d2      	b.n	801152a <_vfiprintf_r+0xc6>
 8011584:	9b03      	ldr	r3, [sp, #12]
 8011586:	1d19      	adds	r1, r3, #4
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	9103      	str	r1, [sp, #12]
 801158c:	2b00      	cmp	r3, #0
 801158e:	bfbb      	ittet	lt
 8011590:	425b      	neglt	r3, r3
 8011592:	f042 0202 	orrlt.w	r2, r2, #2
 8011596:	9307      	strge	r3, [sp, #28]
 8011598:	9307      	strlt	r3, [sp, #28]
 801159a:	bfb8      	it	lt
 801159c:	9204      	strlt	r2, [sp, #16]
 801159e:	7823      	ldrb	r3, [r4, #0]
 80115a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80115a2:	d10a      	bne.n	80115ba <_vfiprintf_r+0x156>
 80115a4:	7863      	ldrb	r3, [r4, #1]
 80115a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80115a8:	d132      	bne.n	8011610 <_vfiprintf_r+0x1ac>
 80115aa:	9b03      	ldr	r3, [sp, #12]
 80115ac:	1d1a      	adds	r2, r3, #4
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	9203      	str	r2, [sp, #12]
 80115b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80115b6:	3402      	adds	r4, #2
 80115b8:	9305      	str	r3, [sp, #20]
 80115ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011690 <_vfiprintf_r+0x22c>
 80115be:	7821      	ldrb	r1, [r4, #0]
 80115c0:	2203      	movs	r2, #3
 80115c2:	4650      	mov	r0, sl
 80115c4:	f7ee fea4 	bl	8000310 <memchr>
 80115c8:	b138      	cbz	r0, 80115da <_vfiprintf_r+0x176>
 80115ca:	9b04      	ldr	r3, [sp, #16]
 80115cc:	eba0 000a 	sub.w	r0, r0, sl
 80115d0:	2240      	movs	r2, #64	@ 0x40
 80115d2:	4082      	lsls	r2, r0
 80115d4:	4313      	orrs	r3, r2
 80115d6:	3401      	adds	r4, #1
 80115d8:	9304      	str	r3, [sp, #16]
 80115da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115de:	4829      	ldr	r0, [pc, #164]	@ (8011684 <_vfiprintf_r+0x220>)
 80115e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80115e4:	2206      	movs	r2, #6
 80115e6:	f7ee fe93 	bl	8000310 <memchr>
 80115ea:	2800      	cmp	r0, #0
 80115ec:	d03f      	beq.n	801166e <_vfiprintf_r+0x20a>
 80115ee:	4b26      	ldr	r3, [pc, #152]	@ (8011688 <_vfiprintf_r+0x224>)
 80115f0:	bb1b      	cbnz	r3, 801163a <_vfiprintf_r+0x1d6>
 80115f2:	9b03      	ldr	r3, [sp, #12]
 80115f4:	3307      	adds	r3, #7
 80115f6:	f023 0307 	bic.w	r3, r3, #7
 80115fa:	3308      	adds	r3, #8
 80115fc:	9303      	str	r3, [sp, #12]
 80115fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011600:	443b      	add	r3, r7
 8011602:	9309      	str	r3, [sp, #36]	@ 0x24
 8011604:	e76a      	b.n	80114dc <_vfiprintf_r+0x78>
 8011606:	fb0c 3202 	mla	r2, ip, r2, r3
 801160a:	460c      	mov	r4, r1
 801160c:	2001      	movs	r0, #1
 801160e:	e7a8      	b.n	8011562 <_vfiprintf_r+0xfe>
 8011610:	2300      	movs	r3, #0
 8011612:	3401      	adds	r4, #1
 8011614:	9305      	str	r3, [sp, #20]
 8011616:	4619      	mov	r1, r3
 8011618:	f04f 0c0a 	mov.w	ip, #10
 801161c:	4620      	mov	r0, r4
 801161e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011622:	3a30      	subs	r2, #48	@ 0x30
 8011624:	2a09      	cmp	r2, #9
 8011626:	d903      	bls.n	8011630 <_vfiprintf_r+0x1cc>
 8011628:	2b00      	cmp	r3, #0
 801162a:	d0c6      	beq.n	80115ba <_vfiprintf_r+0x156>
 801162c:	9105      	str	r1, [sp, #20]
 801162e:	e7c4      	b.n	80115ba <_vfiprintf_r+0x156>
 8011630:	fb0c 2101 	mla	r1, ip, r1, r2
 8011634:	4604      	mov	r4, r0
 8011636:	2301      	movs	r3, #1
 8011638:	e7f0      	b.n	801161c <_vfiprintf_r+0x1b8>
 801163a:	ab03      	add	r3, sp, #12
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	462a      	mov	r2, r5
 8011640:	4b12      	ldr	r3, [pc, #72]	@ (801168c <_vfiprintf_r+0x228>)
 8011642:	a904      	add	r1, sp, #16
 8011644:	4630      	mov	r0, r6
 8011646:	f7fc fc57 	bl	800def8 <_printf_float>
 801164a:	4607      	mov	r7, r0
 801164c:	1c78      	adds	r0, r7, #1
 801164e:	d1d6      	bne.n	80115fe <_vfiprintf_r+0x19a>
 8011650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011652:	07d9      	lsls	r1, r3, #31
 8011654:	d405      	bmi.n	8011662 <_vfiprintf_r+0x1fe>
 8011656:	89ab      	ldrh	r3, [r5, #12]
 8011658:	059a      	lsls	r2, r3, #22
 801165a:	d402      	bmi.n	8011662 <_vfiprintf_r+0x1fe>
 801165c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801165e:	f7fd fbb5 	bl	800edcc <__retarget_lock_release_recursive>
 8011662:	89ab      	ldrh	r3, [r5, #12]
 8011664:	065b      	lsls	r3, r3, #25
 8011666:	f53f af1f 	bmi.w	80114a8 <_vfiprintf_r+0x44>
 801166a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801166c:	e71e      	b.n	80114ac <_vfiprintf_r+0x48>
 801166e:	ab03      	add	r3, sp, #12
 8011670:	9300      	str	r3, [sp, #0]
 8011672:	462a      	mov	r2, r5
 8011674:	4b05      	ldr	r3, [pc, #20]	@ (801168c <_vfiprintf_r+0x228>)
 8011676:	a904      	add	r1, sp, #16
 8011678:	4630      	mov	r0, r6
 801167a:	f7fc fec5 	bl	800e408 <_printf_i>
 801167e:	e7e4      	b.n	801164a <_vfiprintf_r+0x1e6>
 8011680:	08012719 	.word	0x08012719
 8011684:	08012723 	.word	0x08012723
 8011688:	0800def9 	.word	0x0800def9
 801168c:	0801143f 	.word	0x0801143f
 8011690:	0801271f 	.word	0x0801271f

08011694 <__sflush_r>:
 8011694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801169c:	0716      	lsls	r6, r2, #28
 801169e:	4605      	mov	r5, r0
 80116a0:	460c      	mov	r4, r1
 80116a2:	d454      	bmi.n	801174e <__sflush_r+0xba>
 80116a4:	684b      	ldr	r3, [r1, #4]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	dc02      	bgt.n	80116b0 <__sflush_r+0x1c>
 80116aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	dd48      	ble.n	8011742 <__sflush_r+0xae>
 80116b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80116b2:	2e00      	cmp	r6, #0
 80116b4:	d045      	beq.n	8011742 <__sflush_r+0xae>
 80116b6:	2300      	movs	r3, #0
 80116b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80116bc:	682f      	ldr	r7, [r5, #0]
 80116be:	6a21      	ldr	r1, [r4, #32]
 80116c0:	602b      	str	r3, [r5, #0]
 80116c2:	d030      	beq.n	8011726 <__sflush_r+0x92>
 80116c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	0759      	lsls	r1, r3, #29
 80116ca:	d505      	bpl.n	80116d8 <__sflush_r+0x44>
 80116cc:	6863      	ldr	r3, [r4, #4]
 80116ce:	1ad2      	subs	r2, r2, r3
 80116d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80116d2:	b10b      	cbz	r3, 80116d8 <__sflush_r+0x44>
 80116d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80116d6:	1ad2      	subs	r2, r2, r3
 80116d8:	2300      	movs	r3, #0
 80116da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80116dc:	6a21      	ldr	r1, [r4, #32]
 80116de:	4628      	mov	r0, r5
 80116e0:	47b0      	blx	r6
 80116e2:	1c43      	adds	r3, r0, #1
 80116e4:	89a3      	ldrh	r3, [r4, #12]
 80116e6:	d106      	bne.n	80116f6 <__sflush_r+0x62>
 80116e8:	6829      	ldr	r1, [r5, #0]
 80116ea:	291d      	cmp	r1, #29
 80116ec:	d82b      	bhi.n	8011746 <__sflush_r+0xb2>
 80116ee:	4a2a      	ldr	r2, [pc, #168]	@ (8011798 <__sflush_r+0x104>)
 80116f0:	410a      	asrs	r2, r1
 80116f2:	07d6      	lsls	r6, r2, #31
 80116f4:	d427      	bmi.n	8011746 <__sflush_r+0xb2>
 80116f6:	2200      	movs	r2, #0
 80116f8:	6062      	str	r2, [r4, #4]
 80116fa:	04d9      	lsls	r1, r3, #19
 80116fc:	6922      	ldr	r2, [r4, #16]
 80116fe:	6022      	str	r2, [r4, #0]
 8011700:	d504      	bpl.n	801170c <__sflush_r+0x78>
 8011702:	1c42      	adds	r2, r0, #1
 8011704:	d101      	bne.n	801170a <__sflush_r+0x76>
 8011706:	682b      	ldr	r3, [r5, #0]
 8011708:	b903      	cbnz	r3, 801170c <__sflush_r+0x78>
 801170a:	6560      	str	r0, [r4, #84]	@ 0x54
 801170c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801170e:	602f      	str	r7, [r5, #0]
 8011710:	b1b9      	cbz	r1, 8011742 <__sflush_r+0xae>
 8011712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011716:	4299      	cmp	r1, r3
 8011718:	d002      	beq.n	8011720 <__sflush_r+0x8c>
 801171a:	4628      	mov	r0, r5
 801171c:	f7fe f93e 	bl	800f99c <_free_r>
 8011720:	2300      	movs	r3, #0
 8011722:	6363      	str	r3, [r4, #52]	@ 0x34
 8011724:	e00d      	b.n	8011742 <__sflush_r+0xae>
 8011726:	2301      	movs	r3, #1
 8011728:	4628      	mov	r0, r5
 801172a:	47b0      	blx	r6
 801172c:	4602      	mov	r2, r0
 801172e:	1c50      	adds	r0, r2, #1
 8011730:	d1c9      	bne.n	80116c6 <__sflush_r+0x32>
 8011732:	682b      	ldr	r3, [r5, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d0c6      	beq.n	80116c6 <__sflush_r+0x32>
 8011738:	2b1d      	cmp	r3, #29
 801173a:	d001      	beq.n	8011740 <__sflush_r+0xac>
 801173c:	2b16      	cmp	r3, #22
 801173e:	d11e      	bne.n	801177e <__sflush_r+0xea>
 8011740:	602f      	str	r7, [r5, #0]
 8011742:	2000      	movs	r0, #0
 8011744:	e022      	b.n	801178c <__sflush_r+0xf8>
 8011746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801174a:	b21b      	sxth	r3, r3
 801174c:	e01b      	b.n	8011786 <__sflush_r+0xf2>
 801174e:	690f      	ldr	r7, [r1, #16]
 8011750:	2f00      	cmp	r7, #0
 8011752:	d0f6      	beq.n	8011742 <__sflush_r+0xae>
 8011754:	0793      	lsls	r3, r2, #30
 8011756:	680e      	ldr	r6, [r1, #0]
 8011758:	bf08      	it	eq
 801175a:	694b      	ldreq	r3, [r1, #20]
 801175c:	600f      	str	r7, [r1, #0]
 801175e:	bf18      	it	ne
 8011760:	2300      	movne	r3, #0
 8011762:	eba6 0807 	sub.w	r8, r6, r7
 8011766:	608b      	str	r3, [r1, #8]
 8011768:	f1b8 0f00 	cmp.w	r8, #0
 801176c:	dde9      	ble.n	8011742 <__sflush_r+0xae>
 801176e:	6a21      	ldr	r1, [r4, #32]
 8011770:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011772:	4643      	mov	r3, r8
 8011774:	463a      	mov	r2, r7
 8011776:	4628      	mov	r0, r5
 8011778:	47b0      	blx	r6
 801177a:	2800      	cmp	r0, #0
 801177c:	dc08      	bgt.n	8011790 <__sflush_r+0xfc>
 801177e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011786:	81a3      	strh	r3, [r4, #12]
 8011788:	f04f 30ff 	mov.w	r0, #4294967295
 801178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011790:	4407      	add	r7, r0
 8011792:	eba8 0800 	sub.w	r8, r8, r0
 8011796:	e7e7      	b.n	8011768 <__sflush_r+0xd4>
 8011798:	dfbffffe 	.word	0xdfbffffe

0801179c <_fflush_r>:
 801179c:	b538      	push	{r3, r4, r5, lr}
 801179e:	690b      	ldr	r3, [r1, #16]
 80117a0:	4605      	mov	r5, r0
 80117a2:	460c      	mov	r4, r1
 80117a4:	b913      	cbnz	r3, 80117ac <_fflush_r+0x10>
 80117a6:	2500      	movs	r5, #0
 80117a8:	4628      	mov	r0, r5
 80117aa:	bd38      	pop	{r3, r4, r5, pc}
 80117ac:	b118      	cbz	r0, 80117b6 <_fflush_r+0x1a>
 80117ae:	6a03      	ldr	r3, [r0, #32]
 80117b0:	b90b      	cbnz	r3, 80117b6 <_fflush_r+0x1a>
 80117b2:	f7fd f9e1 	bl	800eb78 <__sinit>
 80117b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d0f3      	beq.n	80117a6 <_fflush_r+0xa>
 80117be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80117c0:	07d0      	lsls	r0, r2, #31
 80117c2:	d404      	bmi.n	80117ce <_fflush_r+0x32>
 80117c4:	0599      	lsls	r1, r3, #22
 80117c6:	d402      	bmi.n	80117ce <_fflush_r+0x32>
 80117c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117ca:	f7fd fafe 	bl	800edca <__retarget_lock_acquire_recursive>
 80117ce:	4628      	mov	r0, r5
 80117d0:	4621      	mov	r1, r4
 80117d2:	f7ff ff5f 	bl	8011694 <__sflush_r>
 80117d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117d8:	07da      	lsls	r2, r3, #31
 80117da:	4605      	mov	r5, r0
 80117dc:	d4e4      	bmi.n	80117a8 <_fflush_r+0xc>
 80117de:	89a3      	ldrh	r3, [r4, #12]
 80117e0:	059b      	lsls	r3, r3, #22
 80117e2:	d4e1      	bmi.n	80117a8 <_fflush_r+0xc>
 80117e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117e6:	f7fd faf1 	bl	800edcc <__retarget_lock_release_recursive>
 80117ea:	e7dd      	b.n	80117a8 <_fflush_r+0xc>

080117ec <__swbuf_r>:
 80117ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ee:	460e      	mov	r6, r1
 80117f0:	4614      	mov	r4, r2
 80117f2:	4605      	mov	r5, r0
 80117f4:	b118      	cbz	r0, 80117fe <__swbuf_r+0x12>
 80117f6:	6a03      	ldr	r3, [r0, #32]
 80117f8:	b90b      	cbnz	r3, 80117fe <__swbuf_r+0x12>
 80117fa:	f7fd f9bd 	bl	800eb78 <__sinit>
 80117fe:	69a3      	ldr	r3, [r4, #24]
 8011800:	60a3      	str	r3, [r4, #8]
 8011802:	89a3      	ldrh	r3, [r4, #12]
 8011804:	071a      	lsls	r2, r3, #28
 8011806:	d501      	bpl.n	801180c <__swbuf_r+0x20>
 8011808:	6923      	ldr	r3, [r4, #16]
 801180a:	b943      	cbnz	r3, 801181e <__swbuf_r+0x32>
 801180c:	4621      	mov	r1, r4
 801180e:	4628      	mov	r0, r5
 8011810:	f000 f82a 	bl	8011868 <__swsetup_r>
 8011814:	b118      	cbz	r0, 801181e <__swbuf_r+0x32>
 8011816:	f04f 37ff 	mov.w	r7, #4294967295
 801181a:	4638      	mov	r0, r7
 801181c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801181e:	6823      	ldr	r3, [r4, #0]
 8011820:	6922      	ldr	r2, [r4, #16]
 8011822:	1a98      	subs	r0, r3, r2
 8011824:	6963      	ldr	r3, [r4, #20]
 8011826:	b2f6      	uxtb	r6, r6
 8011828:	4283      	cmp	r3, r0
 801182a:	4637      	mov	r7, r6
 801182c:	dc05      	bgt.n	801183a <__swbuf_r+0x4e>
 801182e:	4621      	mov	r1, r4
 8011830:	4628      	mov	r0, r5
 8011832:	f7ff ffb3 	bl	801179c <_fflush_r>
 8011836:	2800      	cmp	r0, #0
 8011838:	d1ed      	bne.n	8011816 <__swbuf_r+0x2a>
 801183a:	68a3      	ldr	r3, [r4, #8]
 801183c:	3b01      	subs	r3, #1
 801183e:	60a3      	str	r3, [r4, #8]
 8011840:	6823      	ldr	r3, [r4, #0]
 8011842:	1c5a      	adds	r2, r3, #1
 8011844:	6022      	str	r2, [r4, #0]
 8011846:	701e      	strb	r6, [r3, #0]
 8011848:	6962      	ldr	r2, [r4, #20]
 801184a:	1c43      	adds	r3, r0, #1
 801184c:	429a      	cmp	r2, r3
 801184e:	d004      	beq.n	801185a <__swbuf_r+0x6e>
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	07db      	lsls	r3, r3, #31
 8011854:	d5e1      	bpl.n	801181a <__swbuf_r+0x2e>
 8011856:	2e0a      	cmp	r6, #10
 8011858:	d1df      	bne.n	801181a <__swbuf_r+0x2e>
 801185a:	4621      	mov	r1, r4
 801185c:	4628      	mov	r0, r5
 801185e:	f7ff ff9d 	bl	801179c <_fflush_r>
 8011862:	2800      	cmp	r0, #0
 8011864:	d0d9      	beq.n	801181a <__swbuf_r+0x2e>
 8011866:	e7d6      	b.n	8011816 <__swbuf_r+0x2a>

08011868 <__swsetup_r>:
 8011868:	b538      	push	{r3, r4, r5, lr}
 801186a:	4b29      	ldr	r3, [pc, #164]	@ (8011910 <__swsetup_r+0xa8>)
 801186c:	4605      	mov	r5, r0
 801186e:	6818      	ldr	r0, [r3, #0]
 8011870:	460c      	mov	r4, r1
 8011872:	b118      	cbz	r0, 801187c <__swsetup_r+0x14>
 8011874:	6a03      	ldr	r3, [r0, #32]
 8011876:	b90b      	cbnz	r3, 801187c <__swsetup_r+0x14>
 8011878:	f7fd f97e 	bl	800eb78 <__sinit>
 801187c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011880:	0719      	lsls	r1, r3, #28
 8011882:	d422      	bmi.n	80118ca <__swsetup_r+0x62>
 8011884:	06da      	lsls	r2, r3, #27
 8011886:	d407      	bmi.n	8011898 <__swsetup_r+0x30>
 8011888:	2209      	movs	r2, #9
 801188a:	602a      	str	r2, [r5, #0]
 801188c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011890:	81a3      	strh	r3, [r4, #12]
 8011892:	f04f 30ff 	mov.w	r0, #4294967295
 8011896:	e033      	b.n	8011900 <__swsetup_r+0x98>
 8011898:	0758      	lsls	r0, r3, #29
 801189a:	d512      	bpl.n	80118c2 <__swsetup_r+0x5a>
 801189c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801189e:	b141      	cbz	r1, 80118b2 <__swsetup_r+0x4a>
 80118a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118a4:	4299      	cmp	r1, r3
 80118a6:	d002      	beq.n	80118ae <__swsetup_r+0x46>
 80118a8:	4628      	mov	r0, r5
 80118aa:	f7fe f877 	bl	800f99c <_free_r>
 80118ae:	2300      	movs	r3, #0
 80118b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80118b2:	89a3      	ldrh	r3, [r4, #12]
 80118b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80118b8:	81a3      	strh	r3, [r4, #12]
 80118ba:	2300      	movs	r3, #0
 80118bc:	6063      	str	r3, [r4, #4]
 80118be:	6923      	ldr	r3, [r4, #16]
 80118c0:	6023      	str	r3, [r4, #0]
 80118c2:	89a3      	ldrh	r3, [r4, #12]
 80118c4:	f043 0308 	orr.w	r3, r3, #8
 80118c8:	81a3      	strh	r3, [r4, #12]
 80118ca:	6923      	ldr	r3, [r4, #16]
 80118cc:	b94b      	cbnz	r3, 80118e2 <__swsetup_r+0x7a>
 80118ce:	89a3      	ldrh	r3, [r4, #12]
 80118d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80118d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80118d8:	d003      	beq.n	80118e2 <__swsetup_r+0x7a>
 80118da:	4621      	mov	r1, r4
 80118dc:	4628      	mov	r0, r5
 80118de:	f000 fc5b 	bl	8012198 <__smakebuf_r>
 80118e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118e6:	f013 0201 	ands.w	r2, r3, #1
 80118ea:	d00a      	beq.n	8011902 <__swsetup_r+0x9a>
 80118ec:	2200      	movs	r2, #0
 80118ee:	60a2      	str	r2, [r4, #8]
 80118f0:	6962      	ldr	r2, [r4, #20]
 80118f2:	4252      	negs	r2, r2
 80118f4:	61a2      	str	r2, [r4, #24]
 80118f6:	6922      	ldr	r2, [r4, #16]
 80118f8:	b942      	cbnz	r2, 801190c <__swsetup_r+0xa4>
 80118fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80118fe:	d1c5      	bne.n	801188c <__swsetup_r+0x24>
 8011900:	bd38      	pop	{r3, r4, r5, pc}
 8011902:	0799      	lsls	r1, r3, #30
 8011904:	bf58      	it	pl
 8011906:	6962      	ldrpl	r2, [r4, #20]
 8011908:	60a2      	str	r2, [r4, #8]
 801190a:	e7f4      	b.n	80118f6 <__swsetup_r+0x8e>
 801190c:	2000      	movs	r0, #0
 801190e:	e7f7      	b.n	8011900 <__swsetup_r+0x98>
 8011910:	2400001c 	.word	0x2400001c

08011914 <memmove>:
 8011914:	4288      	cmp	r0, r1
 8011916:	b510      	push	{r4, lr}
 8011918:	eb01 0402 	add.w	r4, r1, r2
 801191c:	d902      	bls.n	8011924 <memmove+0x10>
 801191e:	4284      	cmp	r4, r0
 8011920:	4623      	mov	r3, r4
 8011922:	d807      	bhi.n	8011934 <memmove+0x20>
 8011924:	1e43      	subs	r3, r0, #1
 8011926:	42a1      	cmp	r1, r4
 8011928:	d008      	beq.n	801193c <memmove+0x28>
 801192a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801192e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011932:	e7f8      	b.n	8011926 <memmove+0x12>
 8011934:	4402      	add	r2, r0
 8011936:	4601      	mov	r1, r0
 8011938:	428a      	cmp	r2, r1
 801193a:	d100      	bne.n	801193e <memmove+0x2a>
 801193c:	bd10      	pop	{r4, pc}
 801193e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011946:	e7f7      	b.n	8011938 <memmove+0x24>

08011948 <strncmp>:
 8011948:	b510      	push	{r4, lr}
 801194a:	b16a      	cbz	r2, 8011968 <strncmp+0x20>
 801194c:	3901      	subs	r1, #1
 801194e:	1884      	adds	r4, r0, r2
 8011950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011954:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011958:	429a      	cmp	r2, r3
 801195a:	d103      	bne.n	8011964 <strncmp+0x1c>
 801195c:	42a0      	cmp	r0, r4
 801195e:	d001      	beq.n	8011964 <strncmp+0x1c>
 8011960:	2a00      	cmp	r2, #0
 8011962:	d1f5      	bne.n	8011950 <strncmp+0x8>
 8011964:	1ad0      	subs	r0, r2, r3
 8011966:	bd10      	pop	{r4, pc}
 8011968:	4610      	mov	r0, r2
 801196a:	e7fc      	b.n	8011966 <strncmp+0x1e>

0801196c <_sbrk_r>:
 801196c:	b538      	push	{r3, r4, r5, lr}
 801196e:	4d06      	ldr	r5, [pc, #24]	@ (8011988 <_sbrk_r+0x1c>)
 8011970:	2300      	movs	r3, #0
 8011972:	4604      	mov	r4, r0
 8011974:	4608      	mov	r0, r1
 8011976:	602b      	str	r3, [r5, #0]
 8011978:	f7f1 fcda 	bl	8003330 <_sbrk>
 801197c:	1c43      	adds	r3, r0, #1
 801197e:	d102      	bne.n	8011986 <_sbrk_r+0x1a>
 8011980:	682b      	ldr	r3, [r5, #0]
 8011982:	b103      	cbz	r3, 8011986 <_sbrk_r+0x1a>
 8011984:	6023      	str	r3, [r4, #0]
 8011986:	bd38      	pop	{r3, r4, r5, pc}
 8011988:	24000d00 	.word	0x24000d00

0801198c <memcpy>:
 801198c:	440a      	add	r2, r1
 801198e:	4291      	cmp	r1, r2
 8011990:	f100 33ff 	add.w	r3, r0, #4294967295
 8011994:	d100      	bne.n	8011998 <memcpy+0xc>
 8011996:	4770      	bx	lr
 8011998:	b510      	push	{r4, lr}
 801199a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801199e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80119a2:	4291      	cmp	r1, r2
 80119a4:	d1f9      	bne.n	801199a <memcpy+0xe>
 80119a6:	bd10      	pop	{r4, pc}

080119a8 <nan>:
 80119a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80119b0 <nan+0x8>
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	00000000 	.word	0x00000000
 80119b4:	7ff80000 	.word	0x7ff80000

080119b8 <__assert_func>:
 80119b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119ba:	4614      	mov	r4, r2
 80119bc:	461a      	mov	r2, r3
 80119be:	4b09      	ldr	r3, [pc, #36]	@ (80119e4 <__assert_func+0x2c>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	4605      	mov	r5, r0
 80119c4:	68d8      	ldr	r0, [r3, #12]
 80119c6:	b954      	cbnz	r4, 80119de <__assert_func+0x26>
 80119c8:	4b07      	ldr	r3, [pc, #28]	@ (80119e8 <__assert_func+0x30>)
 80119ca:	461c      	mov	r4, r3
 80119cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80119d0:	9100      	str	r1, [sp, #0]
 80119d2:	462b      	mov	r3, r5
 80119d4:	4905      	ldr	r1, [pc, #20]	@ (80119ec <__assert_func+0x34>)
 80119d6:	f000 fba7 	bl	8012128 <fiprintf>
 80119da:	f000 fc3b 	bl	8012254 <abort>
 80119de:	4b04      	ldr	r3, [pc, #16]	@ (80119f0 <__assert_func+0x38>)
 80119e0:	e7f4      	b.n	80119cc <__assert_func+0x14>
 80119e2:	bf00      	nop
 80119e4:	2400001c 	.word	0x2400001c
 80119e8:	0801276d 	.word	0x0801276d
 80119ec:	0801273f 	.word	0x0801273f
 80119f0:	08012732 	.word	0x08012732

080119f4 <_calloc_r>:
 80119f4:	b570      	push	{r4, r5, r6, lr}
 80119f6:	fba1 5402 	umull	r5, r4, r1, r2
 80119fa:	b93c      	cbnz	r4, 8011a0c <_calloc_r+0x18>
 80119fc:	4629      	mov	r1, r5
 80119fe:	f7fe f841 	bl	800fa84 <_malloc_r>
 8011a02:	4606      	mov	r6, r0
 8011a04:	b928      	cbnz	r0, 8011a12 <_calloc_r+0x1e>
 8011a06:	2600      	movs	r6, #0
 8011a08:	4630      	mov	r0, r6
 8011a0a:	bd70      	pop	{r4, r5, r6, pc}
 8011a0c:	220c      	movs	r2, #12
 8011a0e:	6002      	str	r2, [r0, #0]
 8011a10:	e7f9      	b.n	8011a06 <_calloc_r+0x12>
 8011a12:	462a      	mov	r2, r5
 8011a14:	4621      	mov	r1, r4
 8011a16:	f7fd f95a 	bl	800ecce <memset>
 8011a1a:	e7f5      	b.n	8011a08 <_calloc_r+0x14>

08011a1c <rshift>:
 8011a1c:	6903      	ldr	r3, [r0, #16]
 8011a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011a2a:	f100 0414 	add.w	r4, r0, #20
 8011a2e:	dd45      	ble.n	8011abc <rshift+0xa0>
 8011a30:	f011 011f 	ands.w	r1, r1, #31
 8011a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011a3c:	d10c      	bne.n	8011a58 <rshift+0x3c>
 8011a3e:	f100 0710 	add.w	r7, r0, #16
 8011a42:	4629      	mov	r1, r5
 8011a44:	42b1      	cmp	r1, r6
 8011a46:	d334      	bcc.n	8011ab2 <rshift+0x96>
 8011a48:	1a9b      	subs	r3, r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	1eea      	subs	r2, r5, #3
 8011a4e:	4296      	cmp	r6, r2
 8011a50:	bf38      	it	cc
 8011a52:	2300      	movcc	r3, #0
 8011a54:	4423      	add	r3, r4
 8011a56:	e015      	b.n	8011a84 <rshift+0x68>
 8011a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011a5c:	f1c1 0820 	rsb	r8, r1, #32
 8011a60:	40cf      	lsrs	r7, r1
 8011a62:	f105 0e04 	add.w	lr, r5, #4
 8011a66:	46a1      	mov	r9, r4
 8011a68:	4576      	cmp	r6, lr
 8011a6a:	46f4      	mov	ip, lr
 8011a6c:	d815      	bhi.n	8011a9a <rshift+0x7e>
 8011a6e:	1a9a      	subs	r2, r3, r2
 8011a70:	0092      	lsls	r2, r2, #2
 8011a72:	3a04      	subs	r2, #4
 8011a74:	3501      	adds	r5, #1
 8011a76:	42ae      	cmp	r6, r5
 8011a78:	bf38      	it	cc
 8011a7a:	2200      	movcc	r2, #0
 8011a7c:	18a3      	adds	r3, r4, r2
 8011a7e:	50a7      	str	r7, [r4, r2]
 8011a80:	b107      	cbz	r7, 8011a84 <rshift+0x68>
 8011a82:	3304      	adds	r3, #4
 8011a84:	1b1a      	subs	r2, r3, r4
 8011a86:	42a3      	cmp	r3, r4
 8011a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011a8c:	bf08      	it	eq
 8011a8e:	2300      	moveq	r3, #0
 8011a90:	6102      	str	r2, [r0, #16]
 8011a92:	bf08      	it	eq
 8011a94:	6143      	streq	r3, [r0, #20]
 8011a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a9a:	f8dc c000 	ldr.w	ip, [ip]
 8011a9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011aa2:	ea4c 0707 	orr.w	r7, ip, r7
 8011aa6:	f849 7b04 	str.w	r7, [r9], #4
 8011aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011aae:	40cf      	lsrs	r7, r1
 8011ab0:	e7da      	b.n	8011a68 <rshift+0x4c>
 8011ab2:	f851 cb04 	ldr.w	ip, [r1], #4
 8011ab6:	f847 cf04 	str.w	ip, [r7, #4]!
 8011aba:	e7c3      	b.n	8011a44 <rshift+0x28>
 8011abc:	4623      	mov	r3, r4
 8011abe:	e7e1      	b.n	8011a84 <rshift+0x68>

08011ac0 <__hexdig_fun>:
 8011ac0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011ac4:	2b09      	cmp	r3, #9
 8011ac6:	d802      	bhi.n	8011ace <__hexdig_fun+0xe>
 8011ac8:	3820      	subs	r0, #32
 8011aca:	b2c0      	uxtb	r0, r0
 8011acc:	4770      	bx	lr
 8011ace:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011ad2:	2b05      	cmp	r3, #5
 8011ad4:	d801      	bhi.n	8011ada <__hexdig_fun+0x1a>
 8011ad6:	3847      	subs	r0, #71	@ 0x47
 8011ad8:	e7f7      	b.n	8011aca <__hexdig_fun+0xa>
 8011ada:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011ade:	2b05      	cmp	r3, #5
 8011ae0:	d801      	bhi.n	8011ae6 <__hexdig_fun+0x26>
 8011ae2:	3827      	subs	r0, #39	@ 0x27
 8011ae4:	e7f1      	b.n	8011aca <__hexdig_fun+0xa>
 8011ae6:	2000      	movs	r0, #0
 8011ae8:	4770      	bx	lr
	...

08011aec <__gethex>:
 8011aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af0:	b085      	sub	sp, #20
 8011af2:	468a      	mov	sl, r1
 8011af4:	9302      	str	r3, [sp, #8]
 8011af6:	680b      	ldr	r3, [r1, #0]
 8011af8:	9001      	str	r0, [sp, #4]
 8011afa:	4690      	mov	r8, r2
 8011afc:	1c9c      	adds	r4, r3, #2
 8011afe:	46a1      	mov	r9, r4
 8011b00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011b04:	2830      	cmp	r0, #48	@ 0x30
 8011b06:	d0fa      	beq.n	8011afe <__gethex+0x12>
 8011b08:	eba9 0303 	sub.w	r3, r9, r3
 8011b0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011b10:	f7ff ffd6 	bl	8011ac0 <__hexdig_fun>
 8011b14:	4605      	mov	r5, r0
 8011b16:	2800      	cmp	r0, #0
 8011b18:	d168      	bne.n	8011bec <__gethex+0x100>
 8011b1a:	49a0      	ldr	r1, [pc, #640]	@ (8011d9c <__gethex+0x2b0>)
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	4648      	mov	r0, r9
 8011b20:	f7ff ff12 	bl	8011948 <strncmp>
 8011b24:	4607      	mov	r7, r0
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d167      	bne.n	8011bfa <__gethex+0x10e>
 8011b2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011b2e:	4626      	mov	r6, r4
 8011b30:	f7ff ffc6 	bl	8011ac0 <__hexdig_fun>
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d062      	beq.n	8011bfe <__gethex+0x112>
 8011b38:	4623      	mov	r3, r4
 8011b3a:	7818      	ldrb	r0, [r3, #0]
 8011b3c:	2830      	cmp	r0, #48	@ 0x30
 8011b3e:	4699      	mov	r9, r3
 8011b40:	f103 0301 	add.w	r3, r3, #1
 8011b44:	d0f9      	beq.n	8011b3a <__gethex+0x4e>
 8011b46:	f7ff ffbb 	bl	8011ac0 <__hexdig_fun>
 8011b4a:	fab0 f580 	clz	r5, r0
 8011b4e:	096d      	lsrs	r5, r5, #5
 8011b50:	f04f 0b01 	mov.w	fp, #1
 8011b54:	464a      	mov	r2, r9
 8011b56:	4616      	mov	r6, r2
 8011b58:	3201      	adds	r2, #1
 8011b5a:	7830      	ldrb	r0, [r6, #0]
 8011b5c:	f7ff ffb0 	bl	8011ac0 <__hexdig_fun>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d1f8      	bne.n	8011b56 <__gethex+0x6a>
 8011b64:	498d      	ldr	r1, [pc, #564]	@ (8011d9c <__gethex+0x2b0>)
 8011b66:	2201      	movs	r2, #1
 8011b68:	4630      	mov	r0, r6
 8011b6a:	f7ff feed 	bl	8011948 <strncmp>
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d13f      	bne.n	8011bf2 <__gethex+0x106>
 8011b72:	b944      	cbnz	r4, 8011b86 <__gethex+0x9a>
 8011b74:	1c74      	adds	r4, r6, #1
 8011b76:	4622      	mov	r2, r4
 8011b78:	4616      	mov	r6, r2
 8011b7a:	3201      	adds	r2, #1
 8011b7c:	7830      	ldrb	r0, [r6, #0]
 8011b7e:	f7ff ff9f 	bl	8011ac0 <__hexdig_fun>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	d1f8      	bne.n	8011b78 <__gethex+0x8c>
 8011b86:	1ba4      	subs	r4, r4, r6
 8011b88:	00a7      	lsls	r7, r4, #2
 8011b8a:	7833      	ldrb	r3, [r6, #0]
 8011b8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011b90:	2b50      	cmp	r3, #80	@ 0x50
 8011b92:	d13e      	bne.n	8011c12 <__gethex+0x126>
 8011b94:	7873      	ldrb	r3, [r6, #1]
 8011b96:	2b2b      	cmp	r3, #43	@ 0x2b
 8011b98:	d033      	beq.n	8011c02 <__gethex+0x116>
 8011b9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8011b9c:	d034      	beq.n	8011c08 <__gethex+0x11c>
 8011b9e:	1c71      	adds	r1, r6, #1
 8011ba0:	2400      	movs	r4, #0
 8011ba2:	7808      	ldrb	r0, [r1, #0]
 8011ba4:	f7ff ff8c 	bl	8011ac0 <__hexdig_fun>
 8011ba8:	1e43      	subs	r3, r0, #1
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	2b18      	cmp	r3, #24
 8011bae:	d830      	bhi.n	8011c12 <__gethex+0x126>
 8011bb0:	f1a0 0210 	sub.w	r2, r0, #16
 8011bb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011bb8:	f7ff ff82 	bl	8011ac0 <__hexdig_fun>
 8011bbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8011bc0:	fa5f fc8c 	uxtb.w	ip, ip
 8011bc4:	f1bc 0f18 	cmp.w	ip, #24
 8011bc8:	f04f 030a 	mov.w	r3, #10
 8011bcc:	d91e      	bls.n	8011c0c <__gethex+0x120>
 8011bce:	b104      	cbz	r4, 8011bd2 <__gethex+0xe6>
 8011bd0:	4252      	negs	r2, r2
 8011bd2:	4417      	add	r7, r2
 8011bd4:	f8ca 1000 	str.w	r1, [sl]
 8011bd8:	b1ed      	cbz	r5, 8011c16 <__gethex+0x12a>
 8011bda:	f1bb 0f00 	cmp.w	fp, #0
 8011bde:	bf0c      	ite	eq
 8011be0:	2506      	moveq	r5, #6
 8011be2:	2500      	movne	r5, #0
 8011be4:	4628      	mov	r0, r5
 8011be6:	b005      	add	sp, #20
 8011be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bec:	2500      	movs	r5, #0
 8011bee:	462c      	mov	r4, r5
 8011bf0:	e7b0      	b.n	8011b54 <__gethex+0x68>
 8011bf2:	2c00      	cmp	r4, #0
 8011bf4:	d1c7      	bne.n	8011b86 <__gethex+0x9a>
 8011bf6:	4627      	mov	r7, r4
 8011bf8:	e7c7      	b.n	8011b8a <__gethex+0x9e>
 8011bfa:	464e      	mov	r6, r9
 8011bfc:	462f      	mov	r7, r5
 8011bfe:	2501      	movs	r5, #1
 8011c00:	e7c3      	b.n	8011b8a <__gethex+0x9e>
 8011c02:	2400      	movs	r4, #0
 8011c04:	1cb1      	adds	r1, r6, #2
 8011c06:	e7cc      	b.n	8011ba2 <__gethex+0xb6>
 8011c08:	2401      	movs	r4, #1
 8011c0a:	e7fb      	b.n	8011c04 <__gethex+0x118>
 8011c0c:	fb03 0002 	mla	r0, r3, r2, r0
 8011c10:	e7ce      	b.n	8011bb0 <__gethex+0xc4>
 8011c12:	4631      	mov	r1, r6
 8011c14:	e7de      	b.n	8011bd4 <__gethex+0xe8>
 8011c16:	eba6 0309 	sub.w	r3, r6, r9
 8011c1a:	3b01      	subs	r3, #1
 8011c1c:	4629      	mov	r1, r5
 8011c1e:	2b07      	cmp	r3, #7
 8011c20:	dc0a      	bgt.n	8011c38 <__gethex+0x14c>
 8011c22:	9801      	ldr	r0, [sp, #4]
 8011c24:	f7fd ffba 	bl	800fb9c <_Balloc>
 8011c28:	4604      	mov	r4, r0
 8011c2a:	b940      	cbnz	r0, 8011c3e <__gethex+0x152>
 8011c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8011da0 <__gethex+0x2b4>)
 8011c2e:	4602      	mov	r2, r0
 8011c30:	21e4      	movs	r1, #228	@ 0xe4
 8011c32:	485c      	ldr	r0, [pc, #368]	@ (8011da4 <__gethex+0x2b8>)
 8011c34:	f7ff fec0 	bl	80119b8 <__assert_func>
 8011c38:	3101      	adds	r1, #1
 8011c3a:	105b      	asrs	r3, r3, #1
 8011c3c:	e7ef      	b.n	8011c1e <__gethex+0x132>
 8011c3e:	f100 0a14 	add.w	sl, r0, #20
 8011c42:	2300      	movs	r3, #0
 8011c44:	4655      	mov	r5, sl
 8011c46:	469b      	mov	fp, r3
 8011c48:	45b1      	cmp	r9, r6
 8011c4a:	d337      	bcc.n	8011cbc <__gethex+0x1d0>
 8011c4c:	f845 bb04 	str.w	fp, [r5], #4
 8011c50:	eba5 050a 	sub.w	r5, r5, sl
 8011c54:	10ad      	asrs	r5, r5, #2
 8011c56:	6125      	str	r5, [r4, #16]
 8011c58:	4658      	mov	r0, fp
 8011c5a:	f7fe f891 	bl	800fd80 <__hi0bits>
 8011c5e:	016d      	lsls	r5, r5, #5
 8011c60:	f8d8 6000 	ldr.w	r6, [r8]
 8011c64:	1a2d      	subs	r5, r5, r0
 8011c66:	42b5      	cmp	r5, r6
 8011c68:	dd54      	ble.n	8011d14 <__gethex+0x228>
 8011c6a:	1bad      	subs	r5, r5, r6
 8011c6c:	4629      	mov	r1, r5
 8011c6e:	4620      	mov	r0, r4
 8011c70:	f7fe fc22 	bl	80104b8 <__any_on>
 8011c74:	4681      	mov	r9, r0
 8011c76:	b178      	cbz	r0, 8011c98 <__gethex+0x1ac>
 8011c78:	1e6b      	subs	r3, r5, #1
 8011c7a:	1159      	asrs	r1, r3, #5
 8011c7c:	f003 021f 	and.w	r2, r3, #31
 8011c80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011c84:	f04f 0901 	mov.w	r9, #1
 8011c88:	fa09 f202 	lsl.w	r2, r9, r2
 8011c8c:	420a      	tst	r2, r1
 8011c8e:	d003      	beq.n	8011c98 <__gethex+0x1ac>
 8011c90:	454b      	cmp	r3, r9
 8011c92:	dc36      	bgt.n	8011d02 <__gethex+0x216>
 8011c94:	f04f 0902 	mov.w	r9, #2
 8011c98:	4629      	mov	r1, r5
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f7ff febe 	bl	8011a1c <rshift>
 8011ca0:	442f      	add	r7, r5
 8011ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ca6:	42bb      	cmp	r3, r7
 8011ca8:	da42      	bge.n	8011d30 <__gethex+0x244>
 8011caa:	9801      	ldr	r0, [sp, #4]
 8011cac:	4621      	mov	r1, r4
 8011cae:	f7fd ffb5 	bl	800fc1c <_Bfree>
 8011cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	6013      	str	r3, [r2, #0]
 8011cb8:	25a3      	movs	r5, #163	@ 0xa3
 8011cba:	e793      	b.n	8011be4 <__gethex+0xf8>
 8011cbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011cc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8011cc2:	d012      	beq.n	8011cea <__gethex+0x1fe>
 8011cc4:	2b20      	cmp	r3, #32
 8011cc6:	d104      	bne.n	8011cd2 <__gethex+0x1e6>
 8011cc8:	f845 bb04 	str.w	fp, [r5], #4
 8011ccc:	f04f 0b00 	mov.w	fp, #0
 8011cd0:	465b      	mov	r3, fp
 8011cd2:	7830      	ldrb	r0, [r6, #0]
 8011cd4:	9303      	str	r3, [sp, #12]
 8011cd6:	f7ff fef3 	bl	8011ac0 <__hexdig_fun>
 8011cda:	9b03      	ldr	r3, [sp, #12]
 8011cdc:	f000 000f 	and.w	r0, r0, #15
 8011ce0:	4098      	lsls	r0, r3
 8011ce2:	ea4b 0b00 	orr.w	fp, fp, r0
 8011ce6:	3304      	adds	r3, #4
 8011ce8:	e7ae      	b.n	8011c48 <__gethex+0x15c>
 8011cea:	45b1      	cmp	r9, r6
 8011cec:	d8ea      	bhi.n	8011cc4 <__gethex+0x1d8>
 8011cee:	492b      	ldr	r1, [pc, #172]	@ (8011d9c <__gethex+0x2b0>)
 8011cf0:	9303      	str	r3, [sp, #12]
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	f7ff fe27 	bl	8011948 <strncmp>
 8011cfa:	9b03      	ldr	r3, [sp, #12]
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	d1e1      	bne.n	8011cc4 <__gethex+0x1d8>
 8011d00:	e7a2      	b.n	8011c48 <__gethex+0x15c>
 8011d02:	1ea9      	subs	r1, r5, #2
 8011d04:	4620      	mov	r0, r4
 8011d06:	f7fe fbd7 	bl	80104b8 <__any_on>
 8011d0a:	2800      	cmp	r0, #0
 8011d0c:	d0c2      	beq.n	8011c94 <__gethex+0x1a8>
 8011d0e:	f04f 0903 	mov.w	r9, #3
 8011d12:	e7c1      	b.n	8011c98 <__gethex+0x1ac>
 8011d14:	da09      	bge.n	8011d2a <__gethex+0x23e>
 8011d16:	1b75      	subs	r5, r6, r5
 8011d18:	4621      	mov	r1, r4
 8011d1a:	9801      	ldr	r0, [sp, #4]
 8011d1c:	462a      	mov	r2, r5
 8011d1e:	f7fe f995 	bl	801004c <__lshift>
 8011d22:	1b7f      	subs	r7, r7, r5
 8011d24:	4604      	mov	r4, r0
 8011d26:	f100 0a14 	add.w	sl, r0, #20
 8011d2a:	f04f 0900 	mov.w	r9, #0
 8011d2e:	e7b8      	b.n	8011ca2 <__gethex+0x1b6>
 8011d30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011d34:	42bd      	cmp	r5, r7
 8011d36:	dd6f      	ble.n	8011e18 <__gethex+0x32c>
 8011d38:	1bed      	subs	r5, r5, r7
 8011d3a:	42ae      	cmp	r6, r5
 8011d3c:	dc34      	bgt.n	8011da8 <__gethex+0x2bc>
 8011d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d42:	2b02      	cmp	r3, #2
 8011d44:	d022      	beq.n	8011d8c <__gethex+0x2a0>
 8011d46:	2b03      	cmp	r3, #3
 8011d48:	d024      	beq.n	8011d94 <__gethex+0x2a8>
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d115      	bne.n	8011d7a <__gethex+0x28e>
 8011d4e:	42ae      	cmp	r6, r5
 8011d50:	d113      	bne.n	8011d7a <__gethex+0x28e>
 8011d52:	2e01      	cmp	r6, #1
 8011d54:	d10b      	bne.n	8011d6e <__gethex+0x282>
 8011d56:	9a02      	ldr	r2, [sp, #8]
 8011d58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011d5c:	6013      	str	r3, [r2, #0]
 8011d5e:	2301      	movs	r3, #1
 8011d60:	6123      	str	r3, [r4, #16]
 8011d62:	f8ca 3000 	str.w	r3, [sl]
 8011d66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d68:	2562      	movs	r5, #98	@ 0x62
 8011d6a:	601c      	str	r4, [r3, #0]
 8011d6c:	e73a      	b.n	8011be4 <__gethex+0xf8>
 8011d6e:	1e71      	subs	r1, r6, #1
 8011d70:	4620      	mov	r0, r4
 8011d72:	f7fe fba1 	bl	80104b8 <__any_on>
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d1ed      	bne.n	8011d56 <__gethex+0x26a>
 8011d7a:	9801      	ldr	r0, [sp, #4]
 8011d7c:	4621      	mov	r1, r4
 8011d7e:	f7fd ff4d 	bl	800fc1c <_Bfree>
 8011d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d84:	2300      	movs	r3, #0
 8011d86:	6013      	str	r3, [r2, #0]
 8011d88:	2550      	movs	r5, #80	@ 0x50
 8011d8a:	e72b      	b.n	8011be4 <__gethex+0xf8>
 8011d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d1f3      	bne.n	8011d7a <__gethex+0x28e>
 8011d92:	e7e0      	b.n	8011d56 <__gethex+0x26a>
 8011d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1dd      	bne.n	8011d56 <__gethex+0x26a>
 8011d9a:	e7ee      	b.n	8011d7a <__gethex+0x28e>
 8011d9c:	080125c0 	.word	0x080125c0
 8011da0:	08012459 	.word	0x08012459
 8011da4:	0801276e 	.word	0x0801276e
 8011da8:	1e6f      	subs	r7, r5, #1
 8011daa:	f1b9 0f00 	cmp.w	r9, #0
 8011dae:	d130      	bne.n	8011e12 <__gethex+0x326>
 8011db0:	b127      	cbz	r7, 8011dbc <__gethex+0x2d0>
 8011db2:	4639      	mov	r1, r7
 8011db4:	4620      	mov	r0, r4
 8011db6:	f7fe fb7f 	bl	80104b8 <__any_on>
 8011dba:	4681      	mov	r9, r0
 8011dbc:	117a      	asrs	r2, r7, #5
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011dc4:	f007 071f 	and.w	r7, r7, #31
 8011dc8:	40bb      	lsls	r3, r7
 8011dca:	4213      	tst	r3, r2
 8011dcc:	4629      	mov	r1, r5
 8011dce:	4620      	mov	r0, r4
 8011dd0:	bf18      	it	ne
 8011dd2:	f049 0902 	orrne.w	r9, r9, #2
 8011dd6:	f7ff fe21 	bl	8011a1c <rshift>
 8011dda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011dde:	1b76      	subs	r6, r6, r5
 8011de0:	2502      	movs	r5, #2
 8011de2:	f1b9 0f00 	cmp.w	r9, #0
 8011de6:	d047      	beq.n	8011e78 <__gethex+0x38c>
 8011de8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011dec:	2b02      	cmp	r3, #2
 8011dee:	d015      	beq.n	8011e1c <__gethex+0x330>
 8011df0:	2b03      	cmp	r3, #3
 8011df2:	d017      	beq.n	8011e24 <__gethex+0x338>
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d109      	bne.n	8011e0c <__gethex+0x320>
 8011df8:	f019 0f02 	tst.w	r9, #2
 8011dfc:	d006      	beq.n	8011e0c <__gethex+0x320>
 8011dfe:	f8da 3000 	ldr.w	r3, [sl]
 8011e02:	ea49 0903 	orr.w	r9, r9, r3
 8011e06:	f019 0f01 	tst.w	r9, #1
 8011e0a:	d10e      	bne.n	8011e2a <__gethex+0x33e>
 8011e0c:	f045 0510 	orr.w	r5, r5, #16
 8011e10:	e032      	b.n	8011e78 <__gethex+0x38c>
 8011e12:	f04f 0901 	mov.w	r9, #1
 8011e16:	e7d1      	b.n	8011dbc <__gethex+0x2d0>
 8011e18:	2501      	movs	r5, #1
 8011e1a:	e7e2      	b.n	8011de2 <__gethex+0x2f6>
 8011e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e1e:	f1c3 0301 	rsb	r3, r3, #1
 8011e22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d0f0      	beq.n	8011e0c <__gethex+0x320>
 8011e2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011e2e:	f104 0314 	add.w	r3, r4, #20
 8011e32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011e36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011e3a:	f04f 0c00 	mov.w	ip, #0
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011e48:	d01b      	beq.n	8011e82 <__gethex+0x396>
 8011e4a:	3201      	adds	r2, #1
 8011e4c:	6002      	str	r2, [r0, #0]
 8011e4e:	2d02      	cmp	r5, #2
 8011e50:	f104 0314 	add.w	r3, r4, #20
 8011e54:	d13c      	bne.n	8011ed0 <__gethex+0x3e4>
 8011e56:	f8d8 2000 	ldr.w	r2, [r8]
 8011e5a:	3a01      	subs	r2, #1
 8011e5c:	42b2      	cmp	r2, r6
 8011e5e:	d109      	bne.n	8011e74 <__gethex+0x388>
 8011e60:	1171      	asrs	r1, r6, #5
 8011e62:	2201      	movs	r2, #1
 8011e64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e68:	f006 061f 	and.w	r6, r6, #31
 8011e6c:	fa02 f606 	lsl.w	r6, r2, r6
 8011e70:	421e      	tst	r6, r3
 8011e72:	d13a      	bne.n	8011eea <__gethex+0x3fe>
 8011e74:	f045 0520 	orr.w	r5, r5, #32
 8011e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e7a:	601c      	str	r4, [r3, #0]
 8011e7c:	9b02      	ldr	r3, [sp, #8]
 8011e7e:	601f      	str	r7, [r3, #0]
 8011e80:	e6b0      	b.n	8011be4 <__gethex+0xf8>
 8011e82:	4299      	cmp	r1, r3
 8011e84:	f843 cc04 	str.w	ip, [r3, #-4]
 8011e88:	d8d9      	bhi.n	8011e3e <__gethex+0x352>
 8011e8a:	68a3      	ldr	r3, [r4, #8]
 8011e8c:	459b      	cmp	fp, r3
 8011e8e:	db17      	blt.n	8011ec0 <__gethex+0x3d4>
 8011e90:	6861      	ldr	r1, [r4, #4]
 8011e92:	9801      	ldr	r0, [sp, #4]
 8011e94:	3101      	adds	r1, #1
 8011e96:	f7fd fe81 	bl	800fb9c <_Balloc>
 8011e9a:	4681      	mov	r9, r0
 8011e9c:	b918      	cbnz	r0, 8011ea6 <__gethex+0x3ba>
 8011e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8011f08 <__gethex+0x41c>)
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	2184      	movs	r1, #132	@ 0x84
 8011ea4:	e6c5      	b.n	8011c32 <__gethex+0x146>
 8011ea6:	6922      	ldr	r2, [r4, #16]
 8011ea8:	3202      	adds	r2, #2
 8011eaa:	f104 010c 	add.w	r1, r4, #12
 8011eae:	0092      	lsls	r2, r2, #2
 8011eb0:	300c      	adds	r0, #12
 8011eb2:	f7ff fd6b 	bl	801198c <memcpy>
 8011eb6:	4621      	mov	r1, r4
 8011eb8:	9801      	ldr	r0, [sp, #4]
 8011eba:	f7fd feaf 	bl	800fc1c <_Bfree>
 8011ebe:	464c      	mov	r4, r9
 8011ec0:	6923      	ldr	r3, [r4, #16]
 8011ec2:	1c5a      	adds	r2, r3, #1
 8011ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ec8:	6122      	str	r2, [r4, #16]
 8011eca:	2201      	movs	r2, #1
 8011ecc:	615a      	str	r2, [r3, #20]
 8011ece:	e7be      	b.n	8011e4e <__gethex+0x362>
 8011ed0:	6922      	ldr	r2, [r4, #16]
 8011ed2:	455a      	cmp	r2, fp
 8011ed4:	dd0b      	ble.n	8011eee <__gethex+0x402>
 8011ed6:	2101      	movs	r1, #1
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f7ff fd9f 	bl	8011a1c <rshift>
 8011ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ee2:	3701      	adds	r7, #1
 8011ee4:	42bb      	cmp	r3, r7
 8011ee6:	f6ff aee0 	blt.w	8011caa <__gethex+0x1be>
 8011eea:	2501      	movs	r5, #1
 8011eec:	e7c2      	b.n	8011e74 <__gethex+0x388>
 8011eee:	f016 061f 	ands.w	r6, r6, #31
 8011ef2:	d0fa      	beq.n	8011eea <__gethex+0x3fe>
 8011ef4:	4453      	add	r3, sl
 8011ef6:	f1c6 0620 	rsb	r6, r6, #32
 8011efa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011efe:	f7fd ff3f 	bl	800fd80 <__hi0bits>
 8011f02:	42b0      	cmp	r0, r6
 8011f04:	dbe7      	blt.n	8011ed6 <__gethex+0x3ea>
 8011f06:	e7f0      	b.n	8011eea <__gethex+0x3fe>
 8011f08:	08012459 	.word	0x08012459

08011f0c <L_shift>:
 8011f0c:	f1c2 0208 	rsb	r2, r2, #8
 8011f10:	0092      	lsls	r2, r2, #2
 8011f12:	b570      	push	{r4, r5, r6, lr}
 8011f14:	f1c2 0620 	rsb	r6, r2, #32
 8011f18:	6843      	ldr	r3, [r0, #4]
 8011f1a:	6804      	ldr	r4, [r0, #0]
 8011f1c:	fa03 f506 	lsl.w	r5, r3, r6
 8011f20:	432c      	orrs	r4, r5
 8011f22:	40d3      	lsrs	r3, r2
 8011f24:	6004      	str	r4, [r0, #0]
 8011f26:	f840 3f04 	str.w	r3, [r0, #4]!
 8011f2a:	4288      	cmp	r0, r1
 8011f2c:	d3f4      	bcc.n	8011f18 <L_shift+0xc>
 8011f2e:	bd70      	pop	{r4, r5, r6, pc}

08011f30 <__match>:
 8011f30:	b530      	push	{r4, r5, lr}
 8011f32:	6803      	ldr	r3, [r0, #0]
 8011f34:	3301      	adds	r3, #1
 8011f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f3a:	b914      	cbnz	r4, 8011f42 <__match+0x12>
 8011f3c:	6003      	str	r3, [r0, #0]
 8011f3e:	2001      	movs	r0, #1
 8011f40:	bd30      	pop	{r4, r5, pc}
 8011f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011f4a:	2d19      	cmp	r5, #25
 8011f4c:	bf98      	it	ls
 8011f4e:	3220      	addls	r2, #32
 8011f50:	42a2      	cmp	r2, r4
 8011f52:	d0f0      	beq.n	8011f36 <__match+0x6>
 8011f54:	2000      	movs	r0, #0
 8011f56:	e7f3      	b.n	8011f40 <__match+0x10>

08011f58 <__hexnan>:
 8011f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f5c:	680b      	ldr	r3, [r1, #0]
 8011f5e:	6801      	ldr	r1, [r0, #0]
 8011f60:	115e      	asrs	r6, r3, #5
 8011f62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011f66:	f013 031f 	ands.w	r3, r3, #31
 8011f6a:	b087      	sub	sp, #28
 8011f6c:	bf18      	it	ne
 8011f6e:	3604      	addne	r6, #4
 8011f70:	2500      	movs	r5, #0
 8011f72:	1f37      	subs	r7, r6, #4
 8011f74:	4682      	mov	sl, r0
 8011f76:	4690      	mov	r8, r2
 8011f78:	9301      	str	r3, [sp, #4]
 8011f7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f7e:	46b9      	mov	r9, r7
 8011f80:	463c      	mov	r4, r7
 8011f82:	9502      	str	r5, [sp, #8]
 8011f84:	46ab      	mov	fp, r5
 8011f86:	784a      	ldrb	r2, [r1, #1]
 8011f88:	1c4b      	adds	r3, r1, #1
 8011f8a:	9303      	str	r3, [sp, #12]
 8011f8c:	b342      	cbz	r2, 8011fe0 <__hexnan+0x88>
 8011f8e:	4610      	mov	r0, r2
 8011f90:	9105      	str	r1, [sp, #20]
 8011f92:	9204      	str	r2, [sp, #16]
 8011f94:	f7ff fd94 	bl	8011ac0 <__hexdig_fun>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d151      	bne.n	8012040 <__hexnan+0xe8>
 8011f9c:	9a04      	ldr	r2, [sp, #16]
 8011f9e:	9905      	ldr	r1, [sp, #20]
 8011fa0:	2a20      	cmp	r2, #32
 8011fa2:	d818      	bhi.n	8011fd6 <__hexnan+0x7e>
 8011fa4:	9b02      	ldr	r3, [sp, #8]
 8011fa6:	459b      	cmp	fp, r3
 8011fa8:	dd13      	ble.n	8011fd2 <__hexnan+0x7a>
 8011faa:	454c      	cmp	r4, r9
 8011fac:	d206      	bcs.n	8011fbc <__hexnan+0x64>
 8011fae:	2d07      	cmp	r5, #7
 8011fb0:	dc04      	bgt.n	8011fbc <__hexnan+0x64>
 8011fb2:	462a      	mov	r2, r5
 8011fb4:	4649      	mov	r1, r9
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f7ff ffa8 	bl	8011f0c <L_shift>
 8011fbc:	4544      	cmp	r4, r8
 8011fbe:	d952      	bls.n	8012066 <__hexnan+0x10e>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	f1a4 0904 	sub.w	r9, r4, #4
 8011fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8011fca:	f8cd b008 	str.w	fp, [sp, #8]
 8011fce:	464c      	mov	r4, r9
 8011fd0:	461d      	mov	r5, r3
 8011fd2:	9903      	ldr	r1, [sp, #12]
 8011fd4:	e7d7      	b.n	8011f86 <__hexnan+0x2e>
 8011fd6:	2a29      	cmp	r2, #41	@ 0x29
 8011fd8:	d157      	bne.n	801208a <__hexnan+0x132>
 8011fda:	3102      	adds	r1, #2
 8011fdc:	f8ca 1000 	str.w	r1, [sl]
 8011fe0:	f1bb 0f00 	cmp.w	fp, #0
 8011fe4:	d051      	beq.n	801208a <__hexnan+0x132>
 8011fe6:	454c      	cmp	r4, r9
 8011fe8:	d206      	bcs.n	8011ff8 <__hexnan+0xa0>
 8011fea:	2d07      	cmp	r5, #7
 8011fec:	dc04      	bgt.n	8011ff8 <__hexnan+0xa0>
 8011fee:	462a      	mov	r2, r5
 8011ff0:	4649      	mov	r1, r9
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f7ff ff8a 	bl	8011f0c <L_shift>
 8011ff8:	4544      	cmp	r4, r8
 8011ffa:	d936      	bls.n	801206a <__hexnan+0x112>
 8011ffc:	f1a8 0204 	sub.w	r2, r8, #4
 8012000:	4623      	mov	r3, r4
 8012002:	f853 1b04 	ldr.w	r1, [r3], #4
 8012006:	f842 1f04 	str.w	r1, [r2, #4]!
 801200a:	429f      	cmp	r7, r3
 801200c:	d2f9      	bcs.n	8012002 <__hexnan+0xaa>
 801200e:	1b3b      	subs	r3, r7, r4
 8012010:	f023 0303 	bic.w	r3, r3, #3
 8012014:	3304      	adds	r3, #4
 8012016:	3401      	adds	r4, #1
 8012018:	3e03      	subs	r6, #3
 801201a:	42b4      	cmp	r4, r6
 801201c:	bf88      	it	hi
 801201e:	2304      	movhi	r3, #4
 8012020:	4443      	add	r3, r8
 8012022:	2200      	movs	r2, #0
 8012024:	f843 2b04 	str.w	r2, [r3], #4
 8012028:	429f      	cmp	r7, r3
 801202a:	d2fb      	bcs.n	8012024 <__hexnan+0xcc>
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	b91b      	cbnz	r3, 8012038 <__hexnan+0xe0>
 8012030:	4547      	cmp	r7, r8
 8012032:	d128      	bne.n	8012086 <__hexnan+0x12e>
 8012034:	2301      	movs	r3, #1
 8012036:	603b      	str	r3, [r7, #0]
 8012038:	2005      	movs	r0, #5
 801203a:	b007      	add	sp, #28
 801203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012040:	3501      	adds	r5, #1
 8012042:	2d08      	cmp	r5, #8
 8012044:	f10b 0b01 	add.w	fp, fp, #1
 8012048:	dd06      	ble.n	8012058 <__hexnan+0x100>
 801204a:	4544      	cmp	r4, r8
 801204c:	d9c1      	bls.n	8011fd2 <__hexnan+0x7a>
 801204e:	2300      	movs	r3, #0
 8012050:	f844 3c04 	str.w	r3, [r4, #-4]
 8012054:	2501      	movs	r5, #1
 8012056:	3c04      	subs	r4, #4
 8012058:	6822      	ldr	r2, [r4, #0]
 801205a:	f000 000f 	and.w	r0, r0, #15
 801205e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012062:	6020      	str	r0, [r4, #0]
 8012064:	e7b5      	b.n	8011fd2 <__hexnan+0x7a>
 8012066:	2508      	movs	r5, #8
 8012068:	e7b3      	b.n	8011fd2 <__hexnan+0x7a>
 801206a:	9b01      	ldr	r3, [sp, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d0dd      	beq.n	801202c <__hexnan+0xd4>
 8012070:	f1c3 0320 	rsb	r3, r3, #32
 8012074:	f04f 32ff 	mov.w	r2, #4294967295
 8012078:	40da      	lsrs	r2, r3
 801207a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801207e:	4013      	ands	r3, r2
 8012080:	f846 3c04 	str.w	r3, [r6, #-4]
 8012084:	e7d2      	b.n	801202c <__hexnan+0xd4>
 8012086:	3f04      	subs	r7, #4
 8012088:	e7d0      	b.n	801202c <__hexnan+0xd4>
 801208a:	2004      	movs	r0, #4
 801208c:	e7d5      	b.n	801203a <__hexnan+0xe2>

0801208e <__ascii_mbtowc>:
 801208e:	b082      	sub	sp, #8
 8012090:	b901      	cbnz	r1, 8012094 <__ascii_mbtowc+0x6>
 8012092:	a901      	add	r1, sp, #4
 8012094:	b142      	cbz	r2, 80120a8 <__ascii_mbtowc+0x1a>
 8012096:	b14b      	cbz	r3, 80120ac <__ascii_mbtowc+0x1e>
 8012098:	7813      	ldrb	r3, [r2, #0]
 801209a:	600b      	str	r3, [r1, #0]
 801209c:	7812      	ldrb	r2, [r2, #0]
 801209e:	1e10      	subs	r0, r2, #0
 80120a0:	bf18      	it	ne
 80120a2:	2001      	movne	r0, #1
 80120a4:	b002      	add	sp, #8
 80120a6:	4770      	bx	lr
 80120a8:	4610      	mov	r0, r2
 80120aa:	e7fb      	b.n	80120a4 <__ascii_mbtowc+0x16>
 80120ac:	f06f 0001 	mvn.w	r0, #1
 80120b0:	e7f8      	b.n	80120a4 <__ascii_mbtowc+0x16>

080120b2 <_realloc_r>:
 80120b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b6:	4680      	mov	r8, r0
 80120b8:	4615      	mov	r5, r2
 80120ba:	460c      	mov	r4, r1
 80120bc:	b921      	cbnz	r1, 80120c8 <_realloc_r+0x16>
 80120be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120c2:	4611      	mov	r1, r2
 80120c4:	f7fd bcde 	b.w	800fa84 <_malloc_r>
 80120c8:	b92a      	cbnz	r2, 80120d6 <_realloc_r+0x24>
 80120ca:	f7fd fc67 	bl	800f99c <_free_r>
 80120ce:	2400      	movs	r4, #0
 80120d0:	4620      	mov	r0, r4
 80120d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d6:	f000 f8c4 	bl	8012262 <_malloc_usable_size_r>
 80120da:	4285      	cmp	r5, r0
 80120dc:	4606      	mov	r6, r0
 80120de:	d802      	bhi.n	80120e6 <_realloc_r+0x34>
 80120e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80120e4:	d8f4      	bhi.n	80120d0 <_realloc_r+0x1e>
 80120e6:	4629      	mov	r1, r5
 80120e8:	4640      	mov	r0, r8
 80120ea:	f7fd fccb 	bl	800fa84 <_malloc_r>
 80120ee:	4607      	mov	r7, r0
 80120f0:	2800      	cmp	r0, #0
 80120f2:	d0ec      	beq.n	80120ce <_realloc_r+0x1c>
 80120f4:	42b5      	cmp	r5, r6
 80120f6:	462a      	mov	r2, r5
 80120f8:	4621      	mov	r1, r4
 80120fa:	bf28      	it	cs
 80120fc:	4632      	movcs	r2, r6
 80120fe:	f7ff fc45 	bl	801198c <memcpy>
 8012102:	4621      	mov	r1, r4
 8012104:	4640      	mov	r0, r8
 8012106:	f7fd fc49 	bl	800f99c <_free_r>
 801210a:	463c      	mov	r4, r7
 801210c:	e7e0      	b.n	80120d0 <_realloc_r+0x1e>

0801210e <__ascii_wctomb>:
 801210e:	4603      	mov	r3, r0
 8012110:	4608      	mov	r0, r1
 8012112:	b141      	cbz	r1, 8012126 <__ascii_wctomb+0x18>
 8012114:	2aff      	cmp	r2, #255	@ 0xff
 8012116:	d904      	bls.n	8012122 <__ascii_wctomb+0x14>
 8012118:	228a      	movs	r2, #138	@ 0x8a
 801211a:	601a      	str	r2, [r3, #0]
 801211c:	f04f 30ff 	mov.w	r0, #4294967295
 8012120:	4770      	bx	lr
 8012122:	700a      	strb	r2, [r1, #0]
 8012124:	2001      	movs	r0, #1
 8012126:	4770      	bx	lr

08012128 <fiprintf>:
 8012128:	b40e      	push	{r1, r2, r3}
 801212a:	b503      	push	{r0, r1, lr}
 801212c:	4601      	mov	r1, r0
 801212e:	ab03      	add	r3, sp, #12
 8012130:	4805      	ldr	r0, [pc, #20]	@ (8012148 <fiprintf+0x20>)
 8012132:	f853 2b04 	ldr.w	r2, [r3], #4
 8012136:	6800      	ldr	r0, [r0, #0]
 8012138:	9301      	str	r3, [sp, #4]
 801213a:	f7ff f993 	bl	8011464 <_vfiprintf_r>
 801213e:	b002      	add	sp, #8
 8012140:	f85d eb04 	ldr.w	lr, [sp], #4
 8012144:	b003      	add	sp, #12
 8012146:	4770      	bx	lr
 8012148:	2400001c 	.word	0x2400001c

0801214c <__swhatbuf_r>:
 801214c:	b570      	push	{r4, r5, r6, lr}
 801214e:	460c      	mov	r4, r1
 8012150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012154:	2900      	cmp	r1, #0
 8012156:	b096      	sub	sp, #88	@ 0x58
 8012158:	4615      	mov	r5, r2
 801215a:	461e      	mov	r6, r3
 801215c:	da0d      	bge.n	801217a <__swhatbuf_r+0x2e>
 801215e:	89a3      	ldrh	r3, [r4, #12]
 8012160:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012164:	f04f 0100 	mov.w	r1, #0
 8012168:	bf14      	ite	ne
 801216a:	2340      	movne	r3, #64	@ 0x40
 801216c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012170:	2000      	movs	r0, #0
 8012172:	6031      	str	r1, [r6, #0]
 8012174:	602b      	str	r3, [r5, #0]
 8012176:	b016      	add	sp, #88	@ 0x58
 8012178:	bd70      	pop	{r4, r5, r6, pc}
 801217a:	466a      	mov	r2, sp
 801217c:	f000 f848 	bl	8012210 <_fstat_r>
 8012180:	2800      	cmp	r0, #0
 8012182:	dbec      	blt.n	801215e <__swhatbuf_r+0x12>
 8012184:	9901      	ldr	r1, [sp, #4]
 8012186:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801218a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801218e:	4259      	negs	r1, r3
 8012190:	4159      	adcs	r1, r3
 8012192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012196:	e7eb      	b.n	8012170 <__swhatbuf_r+0x24>

08012198 <__smakebuf_r>:
 8012198:	898b      	ldrh	r3, [r1, #12]
 801219a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801219c:	079d      	lsls	r5, r3, #30
 801219e:	4606      	mov	r6, r0
 80121a0:	460c      	mov	r4, r1
 80121a2:	d507      	bpl.n	80121b4 <__smakebuf_r+0x1c>
 80121a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80121a8:	6023      	str	r3, [r4, #0]
 80121aa:	6123      	str	r3, [r4, #16]
 80121ac:	2301      	movs	r3, #1
 80121ae:	6163      	str	r3, [r4, #20]
 80121b0:	b003      	add	sp, #12
 80121b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121b4:	ab01      	add	r3, sp, #4
 80121b6:	466a      	mov	r2, sp
 80121b8:	f7ff ffc8 	bl	801214c <__swhatbuf_r>
 80121bc:	9f00      	ldr	r7, [sp, #0]
 80121be:	4605      	mov	r5, r0
 80121c0:	4639      	mov	r1, r7
 80121c2:	4630      	mov	r0, r6
 80121c4:	f7fd fc5e 	bl	800fa84 <_malloc_r>
 80121c8:	b948      	cbnz	r0, 80121de <__smakebuf_r+0x46>
 80121ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121ce:	059a      	lsls	r2, r3, #22
 80121d0:	d4ee      	bmi.n	80121b0 <__smakebuf_r+0x18>
 80121d2:	f023 0303 	bic.w	r3, r3, #3
 80121d6:	f043 0302 	orr.w	r3, r3, #2
 80121da:	81a3      	strh	r3, [r4, #12]
 80121dc:	e7e2      	b.n	80121a4 <__smakebuf_r+0xc>
 80121de:	89a3      	ldrh	r3, [r4, #12]
 80121e0:	6020      	str	r0, [r4, #0]
 80121e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121e6:	81a3      	strh	r3, [r4, #12]
 80121e8:	9b01      	ldr	r3, [sp, #4]
 80121ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80121ee:	b15b      	cbz	r3, 8012208 <__smakebuf_r+0x70>
 80121f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121f4:	4630      	mov	r0, r6
 80121f6:	f000 f81d 	bl	8012234 <_isatty_r>
 80121fa:	b128      	cbz	r0, 8012208 <__smakebuf_r+0x70>
 80121fc:	89a3      	ldrh	r3, [r4, #12]
 80121fe:	f023 0303 	bic.w	r3, r3, #3
 8012202:	f043 0301 	orr.w	r3, r3, #1
 8012206:	81a3      	strh	r3, [r4, #12]
 8012208:	89a3      	ldrh	r3, [r4, #12]
 801220a:	431d      	orrs	r5, r3
 801220c:	81a5      	strh	r5, [r4, #12]
 801220e:	e7cf      	b.n	80121b0 <__smakebuf_r+0x18>

08012210 <_fstat_r>:
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	4d07      	ldr	r5, [pc, #28]	@ (8012230 <_fstat_r+0x20>)
 8012214:	2300      	movs	r3, #0
 8012216:	4604      	mov	r4, r0
 8012218:	4608      	mov	r0, r1
 801221a:	4611      	mov	r1, r2
 801221c:	602b      	str	r3, [r5, #0]
 801221e:	f7f1 f85e 	bl	80032de <_fstat>
 8012222:	1c43      	adds	r3, r0, #1
 8012224:	d102      	bne.n	801222c <_fstat_r+0x1c>
 8012226:	682b      	ldr	r3, [r5, #0]
 8012228:	b103      	cbz	r3, 801222c <_fstat_r+0x1c>
 801222a:	6023      	str	r3, [r4, #0]
 801222c:	bd38      	pop	{r3, r4, r5, pc}
 801222e:	bf00      	nop
 8012230:	24000d00 	.word	0x24000d00

08012234 <_isatty_r>:
 8012234:	b538      	push	{r3, r4, r5, lr}
 8012236:	4d06      	ldr	r5, [pc, #24]	@ (8012250 <_isatty_r+0x1c>)
 8012238:	2300      	movs	r3, #0
 801223a:	4604      	mov	r4, r0
 801223c:	4608      	mov	r0, r1
 801223e:	602b      	str	r3, [r5, #0]
 8012240:	f7f1 f85d 	bl	80032fe <_isatty>
 8012244:	1c43      	adds	r3, r0, #1
 8012246:	d102      	bne.n	801224e <_isatty_r+0x1a>
 8012248:	682b      	ldr	r3, [r5, #0]
 801224a:	b103      	cbz	r3, 801224e <_isatty_r+0x1a>
 801224c:	6023      	str	r3, [r4, #0]
 801224e:	bd38      	pop	{r3, r4, r5, pc}
 8012250:	24000d00 	.word	0x24000d00

08012254 <abort>:
 8012254:	b508      	push	{r3, lr}
 8012256:	2006      	movs	r0, #6
 8012258:	f000 f834 	bl	80122c4 <raise>
 801225c:	2001      	movs	r0, #1
 801225e:	f7f1 f80a 	bl	8003276 <_exit>

08012262 <_malloc_usable_size_r>:
 8012262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012266:	1f18      	subs	r0, r3, #4
 8012268:	2b00      	cmp	r3, #0
 801226a:	bfbc      	itt	lt
 801226c:	580b      	ldrlt	r3, [r1, r0]
 801226e:	18c0      	addlt	r0, r0, r3
 8012270:	4770      	bx	lr

08012272 <_raise_r>:
 8012272:	291f      	cmp	r1, #31
 8012274:	b538      	push	{r3, r4, r5, lr}
 8012276:	4605      	mov	r5, r0
 8012278:	460c      	mov	r4, r1
 801227a:	d904      	bls.n	8012286 <_raise_r+0x14>
 801227c:	2316      	movs	r3, #22
 801227e:	6003      	str	r3, [r0, #0]
 8012280:	f04f 30ff 	mov.w	r0, #4294967295
 8012284:	bd38      	pop	{r3, r4, r5, pc}
 8012286:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012288:	b112      	cbz	r2, 8012290 <_raise_r+0x1e>
 801228a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801228e:	b94b      	cbnz	r3, 80122a4 <_raise_r+0x32>
 8012290:	4628      	mov	r0, r5
 8012292:	f000 f831 	bl	80122f8 <_getpid_r>
 8012296:	4622      	mov	r2, r4
 8012298:	4601      	mov	r1, r0
 801229a:	4628      	mov	r0, r5
 801229c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122a0:	f000 b818 	b.w	80122d4 <_kill_r>
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d00a      	beq.n	80122be <_raise_r+0x4c>
 80122a8:	1c59      	adds	r1, r3, #1
 80122aa:	d103      	bne.n	80122b4 <_raise_r+0x42>
 80122ac:	2316      	movs	r3, #22
 80122ae:	6003      	str	r3, [r0, #0]
 80122b0:	2001      	movs	r0, #1
 80122b2:	e7e7      	b.n	8012284 <_raise_r+0x12>
 80122b4:	2100      	movs	r1, #0
 80122b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80122ba:	4620      	mov	r0, r4
 80122bc:	4798      	blx	r3
 80122be:	2000      	movs	r0, #0
 80122c0:	e7e0      	b.n	8012284 <_raise_r+0x12>
	...

080122c4 <raise>:
 80122c4:	4b02      	ldr	r3, [pc, #8]	@ (80122d0 <raise+0xc>)
 80122c6:	4601      	mov	r1, r0
 80122c8:	6818      	ldr	r0, [r3, #0]
 80122ca:	f7ff bfd2 	b.w	8012272 <_raise_r>
 80122ce:	bf00      	nop
 80122d0:	2400001c 	.word	0x2400001c

080122d4 <_kill_r>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	4d07      	ldr	r5, [pc, #28]	@ (80122f4 <_kill_r+0x20>)
 80122d8:	2300      	movs	r3, #0
 80122da:	4604      	mov	r4, r0
 80122dc:	4608      	mov	r0, r1
 80122de:	4611      	mov	r1, r2
 80122e0:	602b      	str	r3, [r5, #0]
 80122e2:	f7f0 ffb8 	bl	8003256 <_kill>
 80122e6:	1c43      	adds	r3, r0, #1
 80122e8:	d102      	bne.n	80122f0 <_kill_r+0x1c>
 80122ea:	682b      	ldr	r3, [r5, #0]
 80122ec:	b103      	cbz	r3, 80122f0 <_kill_r+0x1c>
 80122ee:	6023      	str	r3, [r4, #0]
 80122f0:	bd38      	pop	{r3, r4, r5, pc}
 80122f2:	bf00      	nop
 80122f4:	24000d00 	.word	0x24000d00

080122f8 <_getpid_r>:
 80122f8:	f7f0 bfa5 	b.w	8003246 <_getpid>

080122fc <_init>:
 80122fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fe:	bf00      	nop
 8012300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012302:	bc08      	pop	{r3}
 8012304:	469e      	mov	lr, r3
 8012306:	4770      	bx	lr

08012308 <_fini>:
 8012308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230a:	bf00      	nop
 801230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801230e:	bc08      	pop	{r3}
 8012310:	469e      	mov	lr, r3
 8012312:	4770      	bx	lr
