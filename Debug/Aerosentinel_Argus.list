
Aerosentinel_Argus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001951c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  080197f0  080197f0  0001a7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a338  0801a338  0001b338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a340  0801a340  0001b340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a344  0801a344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000350  24000000  0801a348  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000178c  24000350  0801a698  0001c350  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001adc  0801a698  0001cadc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c350  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031894  00000000  00000000  0001c37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ec7  00000000  00000000  0004dc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028c8  00000000  00000000  00052ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002062  00000000  00000000  000553a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000b703  00000000  00000000  0005740a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000336f5  00000000  00000000  00062b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c1e4  00000000  00000000  00096202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002023e6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c590  00000000  00000000  0020242c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  0020e9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000350 	.word	0x24000350
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080197d4 	.word	0x080197d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000354 	.word	0x24000354
 800030c:	080197d4 	.word	0x080197d4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <bme680_platform_read>:
  *
  */


int8_t bme680_platform_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73fb      	strb	r3, [r7, #15]
	BME_GTXBuffer[0] = reg_addr | 0x80;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <bme680_platform_read+0x70>)
 8000ab2:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aba:	4814      	ldr	r0, [pc, #80]	@ (8000b0c <bme680_platform_read+0x74>)
 8000abc:	f00a fb1e 	bl	800b0fc <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&hspi2, BME_GTXBuffer, BME_GRXBuffer, length+1, 1000); // timeout 1000msec;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000acc:	9200      	str	r2, [sp, #0]
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <bme680_platform_read+0x78>)
 8000ad0:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <bme680_platform_read+0x70>)
 8000ad2:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <bme680_platform_read+0x7c>)
 8000ad4:	f010 fdd0 	bl	8011678 <HAL_SPI_TransmitReceive>
    while(hspi2.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000ad8:	bf00      	nop
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <bme680_platform_read+0x7c>)
 8000adc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d0f9      	beq.n	8000ada <bme680_platform_read+0x42>

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_SET); // NSS High
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <bme680_platform_read+0x74>)
 8000aee:	f00a fb05 	bl	800b0fc <HAL_GPIO_WritePin>
    memcpy(reg_data, BME_GRXBuffer+1, length);
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <bme680_platform_read+0x80>)
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4619      	mov	r1, r3
 8000af8:	68b8      	ldr	r0, [r7, #8]
 8000afa:	f015 fc66 	bl	80163ca <memcpy>

    return 0;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	240003dc 	.word	0x240003dc
 8000b0c:	58020400 	.word	0x58020400
 8000b10:	240005dc 	.word	0x240005dc
 8000b14:	24001684 	.word	0x24001684
 8000b18:	240005dd 	.word	0x240005dd

08000b1c <bme680_platform_write>:

int8_t bme680_platform_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	4603      	mov	r3, r0
 8000b2a:	73fb      	strb	r3, [r7, #15]
	BME_GTXBuffer[0] = reg_addr & 0x7F;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <bme680_platform_write+0x6c>)
 8000b36:	701a      	strb	r2, [r3, #0]
    memcpy(&BME_GTXBuffer[1], reg_data, length);
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <bme680_platform_write+0x70>)
 8000b3e:	f015 fc44 	bl	80163ca <memcpy>

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <bme680_platform_write+0x74>)
 8000b4a:	f00a fad7 	bl	800b0fc <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&hspi2, BME_GTXBuffer, length+1, 1000); // send register address + write data
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5a:	490b      	ldr	r1, [pc, #44]	@ (8000b88 <bme680_platform_write+0x6c>)
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <bme680_platform_write+0x78>)
 8000b5e:	f010 f92b 	bl	8010db8 <HAL_SPI_Transmit>
    while(hspi2.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8000b62:	bf00      	nop
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <bme680_platform_write+0x78>)
 8000b66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d0f9      	beq.n	8000b64 <bme680_platform_write+0x48>

    HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_SET); // NSS High
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <bme680_platform_write+0x74>)
 8000b78:	f00a fac0 	bl	800b0fc <HAL_GPIO_WritePin>

    return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	240003dc 	.word	0x240003dc
 8000b8c:	240003dd 	.word	0x240003dd
 8000b90:	58020400 	.word	0x58020400
 8000b94:	24001684 	.word	0x24001684

08000b98 <bme680_delay_func>:
  * @}
  *
  */

void bme680_delay_func(uint32_t period, void *intf_ptr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	HAL_Delay(period/1000);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <bme680_delay_func+0x24>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	099b      	lsrs	r3, r3, #6
 8000bac:	4618      	mov	r0, r3
 8000bae:	f009 ff65 	bl	800aa7c <HAL_Delay>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	10624dd3 	.word	0x10624dd3

08000bc0 <BME680_Init>:
  *
  * @param  bme680_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
int8_t BME680_Init(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0



	uint8_t chipid;
	int8_t rslt = BME68X_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]

	dev_bme->intf = BME68X_SPI_INTF;
 8000bca:	4b44      	ldr	r3, [pc, #272]	@ (8000cdc <BME680_Init+0x11c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	731a      	strb	r2, [r3, #12]

	dev_bme->read = bme680_platform_read;
 8000bd2:	4b42      	ldr	r3, [pc, #264]	@ (8000cdc <BME680_Init+0x11c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a42      	ldr	r2, [pc, #264]	@ (8000ce0 <BME680_Init+0x120>)
 8000bd8:	641a      	str	r2, [r3, #64]	@ 0x40
	dev_bme->write = bme680_platform_write;
 8000bda:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <BME680_Init+0x11c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a41      	ldr	r2, [pc, #260]	@ (8000ce4 <BME680_Init+0x124>)
 8000be0:	645a      	str	r2, [r3, #68]	@ 0x44
	dev_bme->intf_ptr = &bme680_dev_addr;
 8000be2:	4b3e      	ldr	r3, [pc, #248]	@ (8000cdc <BME680_Init+0x11c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a40      	ldr	r2, [pc, #256]	@ (8000ce8 <BME680_Init+0x128>)
 8000be8:	605a      	str	r2, [r3, #4]
	dev_bme->delay_us = bme680_delay_func;
 8000bea:	4b3c      	ldr	r3, [pc, #240]	@ (8000cdc <BME680_Init+0x11c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a3f      	ldr	r2, [pc, #252]	@ (8000cec <BME680_Init+0x12c>)
 8000bf0:	649a      	str	r2, [r3, #72]	@ 0x48
	dev_bme->amb_temp = 25;
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <BME680_Init+0x11c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2219      	movs	r2, #25
 8000bf8:	739a      	strb	r2, [r3, #14]
    bme680_delay_func(100000, dev_bme->intf_ptr);
 8000bfa:	4b38      	ldr	r3, [pc, #224]	@ (8000cdc <BME680_Init+0x11c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4619      	mov	r1, r3
 8000c02:	483b      	ldr	r0, [pc, #236]	@ (8000cf0 <BME680_Init+0x130>)
 8000c04:	f7ff ffc8 	bl	8000b98 <bme680_delay_func>

    bme680_platform_read(BME68X_REG_CHIP_ID, &chipid, 1, dev_bme->intf_ptr);
 8000c08:	4b34      	ldr	r3, [pc, #208]	@ (8000cdc <BME680_Init+0x11c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	1db9      	adds	r1, r7, #6
 8000c10:	2201      	movs	r2, #1
 8000c12:	20d0      	movs	r0, #208	@ 0xd0
 8000c14:	f7ff ff40 	bl	8000a98 <bme680_platform_read>

    bme680_delay_func(100000, dev_bme->intf_ptr);
 8000c18:	4b30      	ldr	r3, [pc, #192]	@ (8000cdc <BME680_Init+0x11c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4833      	ldr	r0, [pc, #204]	@ (8000cf0 <BME680_Init+0x130>)
 8000c22:	f7ff ffb9 	bl	8000b98 <bme680_delay_func>
	/* Initialize bmi323. */
	rslt += bme68x_init(dev_bme);
 8000c26:	4b2d      	ldr	r3, [pc, #180]	@ (8000cdc <BME680_Init+0x11c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f90a 	bl	8000e44 <bme68x_init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4413      	add	r3, r2
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	71fb      	strb	r3, [r7, #7]

	if (rslt != BME68X_OK)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <BME680_Init+0x8a>
	{
		//printf("bme680_init() failed, error code: %d\r\n", rslt);
		return rslt;
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	e044      	b.n	8000cd4 <BME680_Init+0x114>
	else
	{
		//printf("BME680 initialized successfully\r\n");
	}

	rslt += bme68x_get_regs(BME68X_REG_CHIP_ID, &chipid, 1, dev_bme);
 8000c4a:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <BME680_Init+0x11c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1db9      	adds	r1, r7, #6
 8000c50:	2201      	movs	r2, #1
 8000c52:	20d0      	movs	r0, #208	@ 0xd0
 8000c54:	f000 f9b4 	bl	8000fc0 <bme68x_get_regs>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4413      	add	r3, r2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	71fb      	strb	r3, [r7, #7]
	if (rslt != BME68X_OK)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <BME680_Init+0xb2>
	{
		//printf("read chip ID failed, error code: %d\r\n", rslt);
		return rslt;
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	e030      	b.n	8000cd4 <BME680_Init+0x114>
	}

	bme680_config.os_hum = BME68X_OS_2X;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <BME680_Init+0x134>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	701a      	strb	r2, [r3, #0]
	bme680_config.os_pres = BME68X_OS_4X;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <BME680_Init+0x134>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	709a      	strb	r2, [r3, #2]
	bme680_config.os_temp = BME68X_OS_8X;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <BME680_Init+0x134>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	705a      	strb	r2, [r3, #1]
	bme680_config.filter = BME68X_FILTER_SIZE_3;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <BME680_Init+0x134>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	70da      	strb	r2, [r3, #3]

	rslt += bme68x_set_conf(&bme680_config, dev_bme);
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <BME680_Init+0x11c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4818      	ldr	r0, [pc, #96]	@ (8000cf4 <BME680_Init+0x134>)
 8000c92:	f000 fa1d 	bl	80010d0 <bme68x_set_conf>
 8000c96:	4603      	mov	r3, r0
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	71fb      	strb	r3, [r7, #7]

	heater_config.enable = 1;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <BME680_Init+0x138>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
	heater_config.heatr_temp = 320; //Target temperature in degrees Celsius
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <BME680_Init+0x138>)
 8000caa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000cae:	805a      	strh	r2, [r3, #2]
	heater_config.heatr_dur = 150; // Heating duration in milliseconds
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <BME680_Init+0x138>)
 8000cb2:	2296      	movs	r2, #150	@ 0x96
 8000cb4:	809a      	strh	r2, [r3, #4]

	rslt += bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heater_config, dev_bme);
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <BME680_Init+0x11c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	490e      	ldr	r1, [pc, #56]	@ (8000cf8 <BME680_Init+0x138>)
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fcfe 	bl	80016c0 <bme68x_set_heatr_conf>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	71fb      	strb	r3, [r7, #7]




    return rslt;
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	24000000 	.word	0x24000000
 8000ce0:	08000a99 	.word	0x08000a99
 8000ce4:	08000b1d 	.word	0x08000b1d
 8000ce8:	240003d8 	.word	0x240003d8
 8000cec:	08000b99 	.word	0x08000b99
 8000cf0:	000186a0 	.word	0x000186a0
 8000cf4:	240003bc 	.word	0x240003bc
 8000cf8:	240003c4 	.word	0x240003c4

08000cfc <bme680_data_poll>:


Barometer_4_Axis bme680_data_poll(){
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b08f      	sub	sp, #60	@ 0x3c
 8000d00:	af00      	add	r7, sp, #0
	Barometer_4_Axis data = {0};
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

	bme68x_set_op_mode(BME68X_FORCED_MODE, dev_bme);
 8000d10:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc4 <bme680_data_poll+0xc8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	f000 fade 	bl	80012d8 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &bme680_config, dev_bme) + (heater_config.heatr_dur * 1000);
 8000d1c:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <bme680_data_poll+0xc8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4929      	ldr	r1, [pc, #164]	@ (8000dc8 <bme680_data_poll+0xcc>)
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 fb59 	bl	80013dc <bme68x_get_meas_dur>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a27      	ldr	r2, [pc, #156]	@ (8000dcc <bme680_data_poll+0xd0>)
 8000d2e:	8892      	ldrh	r2, [r2, #4]
 8000d30:	4611      	mov	r1, r2
 8000d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d36:	fb01 f202 	mul.w	r2, r1, r2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a24      	ldr	r2, [pc, #144]	@ (8000dd0 <bme680_data_poll+0xd4>)
 8000d3e:	6013      	str	r3, [r2, #0]
	dev_bme->delay_us(del_period, dev_bme->intf_ptr);
 8000d40:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <bme680_data_poll+0xc8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d46:	4a22      	ldr	r2, [pc, #136]	@ (8000dd0 <bme680_data_poll+0xd4>)
 8000d48:	6810      	ldr	r0, [r2, #0]
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc4 <bme680_data_poll+0xc8>)
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	6852      	ldr	r2, [r2, #4]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4798      	blx	r3

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	int8_t rslt = bme68x_get_data(BME68X_FORCED_MODE, &temp_data, &n_fields, dev_bme);
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <bme680_data_poll+0xc8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd4 <bme680_data_poll+0xd8>)
 8000d5a:	491f      	ldr	r1, [pc, #124]	@ (8000dd8 <bme680_data_poll+0xdc>)
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f000 fbb1 	bl	80014c4 <bme68x_get_data>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	//int8_t rslt = bme68x_get_data(BME68X_FORCED_MODE, &temp_data, (uint8_t *)4, dev_bme);

	if(rslt == BME68X_OK){
 8000d68:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10b      	bne.n	8000d88 <bme680_data_poll+0x8c>
		data.temperature = temp_data.temperature;
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <bme680_data_poll+0xdc>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	617b      	str	r3, [r7, #20]
		data.pressure = temp_data.pressure;
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <bme680_data_poll+0xdc>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	61fb      	str	r3, [r7, #28]
		data.humidity = temp_data.humidity;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <bme680_data_poll+0xdc>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	61bb      	str	r3, [r7, #24]
		data.gas_resistance = temp_data.gas_resistance;
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <bme680_data_poll+0xdc>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	623b      	str	r3, [r7, #32]
	}
	return data;
 8000d88:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d9e:	ee06 0a10 	vmov	s12, r0
 8000da2:	ee06 1a90 	vmov	s13, r1
 8000da6:	ee07 2a10 	vmov	s14, r2
 8000daa:	ee07 3a90 	vmov	s15, r3
}
 8000dae:	eeb0 0a46 	vmov.f32	s0, s12
 8000db2:	eef0 0a66 	vmov.f32	s1, s13
 8000db6:	eeb0 1a47 	vmov.f32	s2, s14
 8000dba:	eef0 1a67 	vmov.f32	s3, s15
 8000dbe:	373c      	adds	r7, #60	@ 0x3c
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	24000000 	.word	0x24000000
 8000dc8:	240003bc 	.word	0x240003bc
 8000dcc:	240003c4 	.word	0x240003c4
 8000dd0:	240007e0 	.word	0x240007e0
 8000dd4:	240007dc 	.word	0x240007dc
 8000dd8:	240007e4 	.word	0x240007e4

08000ddc <bme680_print_barometer_data>:

void bme680_print_barometer_data(Barometer_4_Axis *data){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af06      	add	r7, sp, #24
 8000de2:	6078      	str	r0, [r7, #4]
	printf("BME680 Barometer: \n");
 8000de4:	4814      	ldr	r0, [pc, #80]	@ (8000e38 <bme680_print_barometer_data+0x5c>)
 8000de6:	f015 f971 	bl	80160cc <puts>
	printf("Pressure: %f Pa, Temperature: %f °C, Humidity: %f , Gas Res: %f  \n", data->pressure, data->temperature, data->humidity, data->gas_resistance);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	edd3 7a02 	vldr	s15, [r3, #8]
 8000df0:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	edd3 7a00 	vldr	s15, [r3]
 8000dfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e04:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	edd3 5a03 	vldr	s11, [r3, #12]
 8000e0e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000e12:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000e16:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000e1a:	ed8d 7b00 	vstr	d7, [sp]
 8000e1e:	ec53 2b14 	vmov	r2, r3, d4
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <bme680_print_barometer_data+0x60>)
 8000e24:	f015 f8ea 	bl	8015ffc <iprintf>
    printf("----- \n");
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <bme680_print_barometer_data+0x64>)
 8000e2a:	f015 f94f 	bl	80160cc <puts>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	080197f0 	.word	0x080197f0
 8000e3c:	08019804 	.word	0x08019804
 8000e40:	08019848 	.word	0x08019848

08000e44 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f8fb 	bl	8001048 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	20d0      	movs	r0, #208	@ 0xd0
 8000e5a:	f000 f8b1 	bl	8000fc0 <bme68x_get_regs>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d114      	bne.n	8000e94 <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b61      	cmp	r3, #97	@ 0x61
 8000e70:	d10e      	bne.n	8000e90 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f002 f84c 	bl	8002f10 <read_variant_id>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d107      	bne.n	8000e94 <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f001 ff3f 	bl	8002d08 <get_calib_data>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e001      	b.n	8000e94 <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8000e90:	23fd      	movs	r3, #253	@ 0xfd
 8000e92:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000ec0:	6838      	ldr	r0, [r7, #0]
 8000ec2:	f001 fcfb 	bl	80028bc <null_ptr_check>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8000ecc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d16c      	bne.n	8000fae <bme68x_set_regs+0x10e>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d069      	beq.n	8000fae <bme68x_set_regs+0x10e>
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d066      	beq.n	8000fae <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d05d      	beq.n	8000fa2 <bme68x_set_regs+0x102>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0a      	cmp	r3, #10
 8000eea:	d85a      	bhi.n	8000fa2 <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000ef0:	e034      	b.n	8000f5c <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	7b1b      	ldrb	r3, [r3, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d118      	bne.n	8000f2c <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8000efa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 fc18 	bl	800273a <set_mem_page>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8000f10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4413      	add	r3, r2
 8000f16:	781a      	ldrb	r2, [r3, #0]
 8000f18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	3328      	adds	r3, #40	@ 0x28
 8000f24:	443b      	add	r3, r7
 8000f26:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000f2a:	e009      	b.n	8000f40 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8000f2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	441a      	add	r2, r3
 8000f32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	3328      	adds	r3, #40	@ 0x28
 8000f3a:	443b      	add	r3, r7
 8000f3c:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8000f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	441a      	add	r2, r3
 8000f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	3328      	adds	r3, #40	@ 0x28
 8000f50:	443b      	add	r3, r7
 8000f52:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8000f56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f58:	3301      	adds	r3, #1
 8000f5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000f5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8c6      	bhi.n	8000ef2 <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8000f64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d11e      	bne.n	8000faa <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8000f70:	7c38      	ldrb	r0, [r7, #16]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	1e5a      	subs	r2, r3, #1
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685d      	ldr	r5, [r3, #4]
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	1c59      	adds	r1, r3, #1
 8000f82:	462b      	mov	r3, r5
 8000f84:	47a0      	blx	r4
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8000f9a:	23fe      	movs	r3, #254	@ 0xfe
 8000f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8000fa0:	e003      	b.n	8000faa <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8000fa2:	23fc      	movs	r3, #252	@ 0xfc
 8000fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000fa8:	e004      	b.n	8000fb4 <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8000faa:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8000fac:	e002      	b.n	8000fb4 <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8000fae:	23ff      	movs	r3, #255	@ 0xff
 8000fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8000fb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3728      	adds	r7, #40	@ 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bdb0      	pop	{r4, r5, r7, pc}

08000fc0 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f001 fc73 	bl	80028bc <null_ptr_check>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8000fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d12a      	bne.n	8001038 <bme68x_get_regs+0x78>
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d027      	beq.n	8001038 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	7b1b      	ldrb	r3, [r3, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10e      	bne.n	800100e <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	6839      	ldr	r1, [r7, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fba0 	bl	800273a <set_mem_page>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8000ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d103      	bne.n	800100e <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800100c:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	7bf8      	ldrb	r0, [r7, #15]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	47a0      	blx	r4
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8001032:	23fe      	movs	r3, #254	@ 0xfe
 8001034:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8001036:	e001      	b.n	800103c <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001038:	23ff      	movs	r3, #255	@ 0xff
 800103a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800103c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001050:	23e0      	movs	r3, #224	@ 0xe0
 8001052:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001054:	23b6      	movs	r3, #182	@ 0xb6
 8001056:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f001 fc2f 	bl	80028bc <null_ptr_check>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d12b      	bne.n	80010c2 <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7b1b      	ldrb	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d104      	bne.n	800107c <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f001 fbc6 	bl	8002804 <get_mem_page>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 800107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d11e      	bne.n	80010c2 <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001084:	f107 010d 	add.w	r1, r7, #13
 8001088:	f107 000e 	add.w	r0, r7, #14
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f7ff ff06 	bl	8000ea0 <bme68x_set_regs>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d110      	bne.n	80010c2 <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6852      	ldr	r2, [r2, #4]
 80010a8:	4611      	mov	r1, r2
 80010aa:	f242 7010 	movw	r0, #10000	@ 0x2710
 80010ae:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7b1b      	ldrb	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d104      	bne.n	80010c2 <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f001 fba3 	bl	8002804 <get_mem_page>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 80010da:	2300      	movs	r3, #0
 80010dc:	77bb      	strb	r3, [r7, #30]
 80010de:	2301      	movs	r3, #1
 80010e0:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 80010e2:	4a7c      	ldr	r2, [pc, #496]	@ (80012d4 <bme68x_set_conf+0x204>)
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ec:	6018      	str	r0, [r3, #0]
 80010ee:	3304      	adds	r3, #4
 80010f0:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	2300      	movs	r3, #0
 80010f8:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f94a 	bl	800139a <bme68x_get_op_mode>
 8001106:	4603      	mov	r3, r0
 8001108:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 800110a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d105      	bne.n	800111e <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001112:	6839      	ldr	r1, [r7, #0]
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f8df 	bl	80012d8 <bme68x_set_op_mode>
 800111a:	4603      	mov	r3, r0
 800111c:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8001124:	23ff      	movs	r3, #255	@ 0xff
 8001126:	77fb      	strb	r3, [r7, #31]
 8001128:	e0b2      	b.n	8001290 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 800112a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 80ae 	bne.w	8001290 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001134:	7d38      	ldrb	r0, [r7, #20]
 8001136:	f107 010c 	add.w	r1, r7, #12
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2205      	movs	r2, #5
 800113e:	f7ff ff3f 	bl	8000fc0 <bme68x_get_regs>
 8001142:	4603      	mov	r3, r0
 8001144:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 800114e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d108      	bne.n	8001168 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3303      	adds	r3, #3
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	2107      	movs	r1, #7
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fb7f 	bl	8002862 <boundary_check>
 8001164:	4603      	mov	r3, r0
 8001166:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001168:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d108      	bne.n	8001182 <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	2105      	movs	r1, #5
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fb72 	bl	8002862 <boundary_check>
 800117e:	4603      	mov	r3, r0
 8001180:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001182:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d108      	bne.n	800119c <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3302      	adds	r3, #2
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	2105      	movs	r1, #5
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fb65 	bl	8002862 <boundary_check>
 8001198:	4603      	mov	r3, r0
 800119a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800119c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d107      	bne.n	80011b4 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	2105      	movs	r1, #5
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fb59 	bl	8002862 <boundary_check>
 80011b0:	4603      	mov	r3, r0
 80011b2:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80011b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d108      	bne.n	80011ce <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3304      	adds	r3, #4
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	2108      	movs	r1, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fb4c 	bl	8002862 <boundary_check>
 80011ca:	4603      	mov	r3, r0
 80011cc:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80011ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d15c      	bne.n	8001290 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 80011d6:	7c3b      	ldrb	r3, [r7, #16]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	f023 031c 	bic.w	r3, r3, #28
 80011de:	b25a      	sxtb	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	78db      	ldrb	r3, [r3, #3]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	f003 031c 	and.w	r3, r3, #28
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	b25a      	sxtb	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	015b      	lsls	r3, r3, #5
 8001206:	b25b      	sxtb	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b25b      	sxtb	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	f023 031c 	bic.w	r3, r3, #28
 8001218:	b25a      	sxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	789b      	ldrb	r3, [r3, #2]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	b25b      	sxtb	r3, r3
 8001222:	f003 031c 	and.w	r3, r3, #28
 8001226:	b25b      	sxtb	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b25b      	sxtb	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001230:	7b7b      	ldrb	r3, [r7, #13]
 8001232:	b25b      	sxtb	r3, r3
 8001234:	f023 0307 	bic.w	r3, r3, #7
 8001238:	b25a      	sxtb	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b25b      	sxtb	r3, r3
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	b25b      	sxtb	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b25b      	sxtb	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	791b      	ldrb	r3, [r3, #4]
 8001252:	2b08      	cmp	r3, #8
 8001254:	d004      	beq.n	8001260 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001260:	7c3b      	ldrb	r3, [r7, #16]
 8001262:	b25b      	sxtb	r3, r3
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	b25a      	sxtb	r2, r3
 800126a:	7fbb      	ldrb	r3, [r7, #30]
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001278:	7b3b      	ldrb	r3, [r7, #12]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001280:	b25a      	sxtb	r2, r3
 8001282:	7f7b      	ldrb	r3, [r7, #29]
 8001284:	01db      	lsls	r3, r3, #7
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8001290:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001298:	f107 010c 	add.w	r1, r7, #12
 800129c:	f107 0014 	add.w	r0, r7, #20
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2205      	movs	r2, #5
 80012a4:	f7ff fdfc 	bl	8000ea0 <bme68x_set_regs>
 80012a8:	4603      	mov	r3, r0
 80012aa:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80012ac:	7f3b      	ldrb	r3, [r7, #28]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00a      	beq.n	80012c8 <bme68x_set_conf+0x1f8>
 80012b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 80012ba:	7f3b      	ldrb	r3, [r7, #28]
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f80a 	bl	80012d8 <bme68x_set_op_mode>
 80012c4:	4603      	mov	r3, r0
 80012c6:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80012c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08019850 	.word	0x08019850

080012d8 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80012e8:	2374      	movs	r3, #116	@ 0x74
 80012ea:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80012ec:	f107 010d 	add.w	r1, r7, #13
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	2074      	movs	r0, #116	@ 0x74
 80012f6:	f7ff fe63 	bl	8000fc0 <bme68x_get_regs>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d11d      	bne.n	8001342 <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8001306:	7b7b      	ldrb	r3, [r7, #13]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d016      	beq.n	8001342 <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8001314:	7b7b      	ldrb	r3, [r7, #13]
 8001316:	f023 0303 	bic.w	r3, r3, #3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800131e:	f107 010d 	add.w	r1, r7, #13
 8001322:	f107 000c 	add.w	r0, r7, #12
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2201      	movs	r2, #1
 800132a:	f7ff fdb9 	bl	8000ea0 <bme68x_set_regs>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	6852      	ldr	r2, [r2, #4]
 800133a:	4611      	mov	r1, r2
 800133c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001340:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <bme68x_set_op_mode+0x78>
 8001348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0cd      	beq.n	80012ec <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01b      	beq.n	800138e <bme68x_set_op_mode+0xb6>
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d117      	bne.n	800138e <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 800135e:	7b7b      	ldrb	r3, [r7, #13]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	f023 0303 	bic.w	r3, r3, #3
 8001366:	b25a      	sxtb	r2, r3
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	b25b      	sxtb	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b25b      	sxtb	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800137a:	f107 010d 	add.w	r1, r7, #13
 800137e:	f107 000c 	add.w	r0, r7, #12
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	f7ff fd8b 	bl	8000ea0 <bme68x_set_regs>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00f      	beq.n	80013ca <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 80013aa:	f107 010e 	add.w	r1, r7, #14
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	2074      	movs	r0, #116	@ 0x74
 80013b4:	f7ff fe04 	bl	8000fc0 <bme68x_get_regs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	701a      	strb	r2, [r3, #0]
 80013c8:	e001      	b.n	80013ce <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80013ca:	23ff      	movs	r3, #255	@ 0xff
 80013cc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 80013ee:	4a34      	ldr	r2, [pc, #208]	@ (80014c0 <bme68x_get_meas_dur+0xe4>)
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f8:	6018      	str	r0, [r3, #0]
 80013fa:	3304      	adds	r3, #4
 80013fc:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d058      	beq.n	80014b6 <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	3301      	adds	r3, #1
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	2105      	movs	r1, #5
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fa28 	bl	8002862 <boundary_check>
 8001412:	4603      	mov	r3, r0
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME68X_OK)
 8001418:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3302      	adds	r3, #2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	2105      	movs	r1, #5
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fa1a 	bl	8002862 <boundary_check>
 800142e:	4603      	mov	r3, r0
 8001430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8001434:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	2105      	movs	r1, #5
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fa0d 	bl	8002862 <boundary_check>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 800144e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001452:	2b00      	cmp	r3, #0
 8001454:	d12f      	bne.n	80014b6 <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	3328      	adds	r3, #40	@ 0x28
 800145c:	443b      	add	r3, r7
 800145e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001462:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	789b      	ldrb	r3, [r3, #2]
 8001468:	3328      	adds	r3, #40	@ 0x28
 800146a:	443b      	add	r3, r7
 800146c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001470:	461a      	mov	r2, r3
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	3328      	adds	r3, #40	@ 0x28
 800147e:	443b      	add	r3, r7
 8001480:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001484:	461a      	mov	r2, r3
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 800149e:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 80014a6:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d003      	beq.n	80014b6 <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80014b4:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 80014b6:	6a3b      	ldr	r3, [r7, #32]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	08019858 	.word	0x08019858

080014c4 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 80014c4:	b5b0      	push	{r4, r5, r7, lr}
 80014c6:	b09a      	sub	sp, #104	@ 0x68
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 80014e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	2248      	movs	r2, #72	@ 0x48
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f014 fee6 	bl	80162cc <memset>

    field_ptr[0] = &field_data[0];
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	65bb      	str	r3, [r7, #88]	@ 0x58
    field_ptr[1] = &field_data[1];
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	3318      	adds	r3, #24
 800150c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    field_ptr[2] = &field_data[2];
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	3330      	adds	r3, #48	@ 0x30
 8001514:	663b      	str	r3, [r7, #96]	@ 0x60

    rslt = null_ptr_check(dev);
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	f001 f9d0 	bl	80028bc <null_ptr_check>
 800151c:	4603      	mov	r3, r0
 800151e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 8001522:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001526:	2b00      	cmp	r3, #0
 8001528:	f040 80c1 	bne.w	80016ae <bme68x_get_data+0x1ea>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80bd 	beq.w	80016ae <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d11c      	bne.n	8001574 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	2000      	movs	r0, #0
 8001540:	f000 fd8b 	bl	800205a <read_field_data>
 8001544:	4603      	mov	r3, r0
 8001546:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (rslt == BME68X_OK)
 800154a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 80a1 	bne.w	8001696 <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b25b      	sxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	da03      	bge.n	8001566 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001564:	e097      	b.n	8001696 <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 800156c:	2302      	movs	r3, #2
 800156e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001572:	e090      	b.n	8001696 <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d003      	beq.n	8001582 <bme68x_get_data+0xbe>
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2b03      	cmp	r3, #3
 800157e:	f040 8087 	bne.w	8001690 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001582:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 feaa 	bl	80022e2 <read_all_field_data>
 800158e:	4603      	mov	r3, r0
 8001590:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

            new_fields = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800159a:	2300      	movs	r3, #0
 800159c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80015a0:	e014      	b.n	80015cc <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 80015a2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	3368      	adds	r3, #104	@ 0x68
 80015aa:	443b      	add	r3, r7
 80015ac:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da04      	bge.n	80015c2 <bme68x_get_data+0xfe>
                {
                    new_fields++;
 80015b8:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80015bc:	3301      	adds	r3, #1
 80015be:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80015c2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80015c6:	3301      	adds	r3, #1
 80015c8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80015cc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d803      	bhi.n	80015dc <bme68x_get_data+0x118>
 80015d4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0e2      	beq.n	80015a2 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80015e2:	e01c      	b.n	800161e <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 80015e4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80015e8:	3301      	adds	r3, #1
 80015ea:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 80015ee:	e00d      	b.n	800160c <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 80015f0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80015f4:	f897 1065 	ldrb.w	r1, [r7, #101]	@ 0x65
 80015f8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fb09 	bl	8002c14 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8001602:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001606:	3301      	adds	r3, #1
 8001608:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800160c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001610:	2b02      	cmp	r3, #2
 8001612:	d9ed      	bls.n	80015f0 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001614:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001618:	3301      	adds	r3, #1
 800161a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800161e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001622:	2b01      	cmp	r3, #1
 8001624:	d803      	bhi.n	800162e <bme68x_get_data+0x16a>
 8001626:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0da      	beq.n	80015e4 <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800162e:	2300      	movs	r3, #0
 8001630:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001634:	e01c      	b.n	8001670 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 8001636:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	3368      	adds	r3, #104	@ 0x68
 800163e:	443b      	add	r3, r7
 8001640:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001644:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4413      	add	r3, r2
 8001656:	461c      	mov	r4, r3
 8001658:	460d      	mov	r5, r1
 800165a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001662:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001666:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800166a:	3301      	adds	r3, #1
 800166c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001670:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001674:	2b02      	cmp	r3, #2
 8001676:	d803      	bhi.n	8001680 <bme68x_get_data+0x1bc>
 8001678:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0da      	beq.n	8001636 <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8001680:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001684:	2b00      	cmp	r3, #0
 8001686:	d106      	bne.n	8001696 <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8001688:	2302      	movs	r3, #2
 800168a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (new_fields == 0)
 800168e:	e002      	b.n	8001696 <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        if (n_data == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 800169c:	23ff      	movs	r3, #255	@ 0xff
 800169e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (n_data == NULL)
 80016a2:	e007      	b.n	80016b4 <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80016aa:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80016ac:	e002      	b.n	80016b4 <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80016ae:	23ff      	movs	r3, #255	@ 0xff
 80016b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }

    return rslt;
 80016b4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3768      	adds	r7, #104	@ 0x68
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdb0      	pop	{r4, r5, r7, pc}

080016c0 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80016d6:	f247 1370 	movw	r3, #29040	@ 0x7170
 80016da:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d06e      	beq.n	80017c0 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fdf7 	bl	80012d8 <bme68x_set_op_mode>
 80016ea:	4603      	mov	r3, r0
 80016ec:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 80016ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80016f6:	f107 021c 	add.w	r2, r7, #28
 80016fa:	7bf9      	ldrb	r1, [r7, #15]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68b8      	ldr	r0, [r7, #8]
 8001700:	f001 f8fc 	bl	80028fc <set_conf>
 8001704:	4603      	mov	r3, r0
 8001706:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001708:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d159      	bne.n	80017c4 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8001710:	f107 0118 	add.w	r1, r7, #24
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	2070      	movs	r0, #112	@ 0x70
 800171a:	f7ff fc51 	bl	8000fc0 <bme68x_get_regs>
 800171e:	4603      	mov	r3, r0
 8001720:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 8001722:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d14c      	bne.n	80017c4 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10b      	bne.n	800174a <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8001732:	2300      	movs	r3, #0
 8001734:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d102      	bne.n	8001744 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 800173e:	2302      	movs	r3, #2
 8001740:	777b      	strb	r3, [r7, #29]
 8001742:	e006      	b.n	8001752 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8001744:	2301      	movs	r3, #1
 8001746:	777b      	strb	r3, [r7, #29]
 8001748:	e003      	b.n	8001752 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 800174a:	2301      	movs	r3, #1
 800174c:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 800174e:	2300      	movs	r3, #0
 8001750:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8001752:	7e3b      	ldrb	r3, [r7, #24]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	f023 0308 	bic.w	r3, r3, #8
 800175a:	b25a      	sxtb	r2, r3
 800175c:	7fbb      	ldrb	r3, [r7, #30]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	b25b      	sxtb	r3, r3
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	b25b      	sxtb	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b25b      	sxtb	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001770:	7e7b      	ldrb	r3, [r7, #25]
 8001772:	b25b      	sxtb	r3, r3
 8001774:	f023 030f 	bic.w	r3, r3, #15
 8001778:	b25a      	sxtb	r2, r3
 800177a:	7f3b      	ldrb	r3, [r7, #28]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	b25b      	sxtb	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b25b      	sxtb	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800178c:	7e7b      	ldrb	r3, [r7, #25]
 800178e:	b25b      	sxtb	r3, r3
 8001790:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001794:	b25a      	sxtb	r2, r3
 8001796:	7f7b      	ldrb	r3, [r7, #29]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	b25b      	sxtb	r3, r3
 800179c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 80017aa:	f107 0118 	add.w	r1, r7, #24
 80017ae:	f107 0014 	add.w	r0, r7, #20
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	f7ff fb73 	bl	8000ea0 <bme68x_set_regs>
 80017ba:	4603      	mov	r3, r0
 80017bc:	77fb      	strb	r3, [r7, #31]
 80017be:	e001      	b.n	80017c4 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80017c0:	23ff      	movs	r3, #255	@ 0xff
 80017c2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80017c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80018c8 <calc_temperature+0xf8>
 80017e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	8bdb      	ldrh	r3, [r3, #30]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017f8:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 80018cc <calc_temperature+0xfc>
 80017fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001800:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001824:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80018d0 <calc_temperature+0x100>
 8001828:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	8bdb      	ldrh	r3, [r3, #30]
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001838:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 80018d4 <calc_temperature+0x104>
 800183c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001840:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184e:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80018d0 <calc_temperature+0x100>
 8001852:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	8bdb      	ldrh	r3, [r3, #30]
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001862:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80018d4 <calc_temperature+0x104>
 8001866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800186a:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 800186e:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001880:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001884:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8001888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8001890:	ed97 7a05 	vldr	s14, [r7, #20]
 8001894:	edd7 7a04 	vldr	s15, [r7, #16]
 8001898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80018a8:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80018d8 <calc_temperature+0x108>
 80018ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b0:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	ee07 3a90 	vmov	s15, r3
}
 80018ba:	eeb0 0a67 	vmov.f32	s0, s15
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	46800000 	.word	0x46800000
 80018cc:	44800000 	.word	0x44800000
 80018d0:	48000000 	.word	0x48000000
 80018d4:	46000000 	.word	0x46000000
 80018d8:	45a00000 	.word	0x45a00000

080018dc <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80018ec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f4:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001b30 <calc_pressure+0x254>
 80018f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018fc:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8001900:	edd7 7a04 	vldr	s15, [r7, #16]
 8001904:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001916:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 8001b34 <calc_pressure+0x258>
 800191a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800191e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001922:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001934:	edd7 7a04 	vldr	s15, [r7, #16]
 8001938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001940:	ed97 7a03 	vldr	s14, [r7, #12]
 8001944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001948:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 800194c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001950:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001966:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8001b38 <calc_pressure+0x25c>
 800196a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001984:	edd7 7a04 	vldr	s15, [r7, #16]
 8001988:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001994:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001b3c <calc_pressure+0x260>
 8001998:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b6:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8001b40 <calc_pressure+0x264>
 80019ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019be:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 80019c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80019c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001b44 <calc_pressure+0x268>
 80019ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001b48 <calc_pressure+0x26c>
 80019f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fc:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001a00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a08:	ee17 3a90 	vmov	r3, s15
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8081 	beq.w	8001b14 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001a12:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a16:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001b4c <calc_pressure+0x270>
 8001a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a26:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001b50 <calc_pressure+0x274>
 8001a2a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a36:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a58:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001b54 <calc_pressure+0x278>
 8001a5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a60:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a72:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001b44 <calc_pressure+0x268>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a82:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a8a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001b58 <calc_pressure+0x27c>
 8001a8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a92:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a96:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8001b58 <calc_pressure+0x27c>
 8001a9a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001aa6:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8001b58 <calc_pressure+0x27c>
 8001aaa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ac0:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8001b34 <calc_pressure+0x258>
 8001ac4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001acc:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001ad0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af2:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001b5c <calc_pressure+0x280>
 8001af6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001afe:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001b12:	e002      	b.n	8001b1a <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	ee07 3a90 	vmov	s15, r3
}
 8001b20:	eeb0 0a67 	vmov.f32	s0, s15
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	477a0000 	.word	0x477a0000
 8001b34:	48000000 	.word	0x48000000
 8001b38:	47800000 	.word	0x47800000
 8001b3c:	46800000 	.word	0x46800000
 8001b40:	49000000 	.word	0x49000000
 8001b44:	47000000 	.word	0x47000000
 8001b48:	49800000 	.word	0x49800000
 8001b4c:	45800000 	.word	0x45800000
 8001b50:	45c35000 	.word	0x45c35000
 8001b54:	4f000000 	.word	0x4f000000
 8001b58:	43800000 	.word	0x43800000
 8001b5c:	43000000 	.word	0x43000000

08001b60 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001b72:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001cdc <calc_humidity+0x17c>
 8001b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b7a:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	8a1b      	ldrh	r3, [r3, #16]
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b94:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001b98:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001baa:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8001bae:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001bb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc2:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	8a5b      	ldrh	r3, [r3, #18]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001ce0 <calc_humidity+0x180>
 8001bd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be8:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8001ce4 <calc_humidity+0x184>
 8001bec:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001bfc:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8001ce8 <calc_humidity+0x188>
 8001c12:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001c16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c22:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001c2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c36:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	7ddb      	ldrb	r3, [r3, #23]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c46:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001ce4 <calc_humidity+0x184>
 8001c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4e:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c60:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001cec <calc_humidity+0x18c>
 8001c64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c68:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001c6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c70:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c90:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ca0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001cf0 <calc_humidity+0x190>
 8001ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	dd02      	ble.n	8001cb4 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <calc_humidity+0x194>)
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e009      	b.n	8001cc8 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001cb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	d502      	bpl.n	8001cc8 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	ee07 3a90 	vmov	s15, r3
}
 8001cce:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd2:	3724      	adds	r7, #36	@ 0x24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	45a00000 	.word	0x45a00000
 8001ce0:	48800000 	.word	0x48800000
 8001ce4:	46800000 	.word	0x46800000
 8001ce8:	49800000 	.word	0x49800000
 8001cec:	4a000000 	.word	0x4a000000
 8001cf0:	42c80000 	.word	0x42c80000
 8001cf4:	42c80000 	.word	0x42c80000

08001cf8 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001cf8:	b4b0      	push	{r4, r5, r7}
 8001cfa:	b0a9      	sub	sp, #164	@ 0xa4
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	603a      	str	r2, [r7, #0]
 8001d02:	80fb      	strh	r3, [r7, #6]
 8001d04:	460b      	mov	r3, r1
 8001d06:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d12:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001d16:	797b      	ldrb	r3, [r7, #5]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d26:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    const float lookup_k1_range[16] = {
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e24 <calc_gas_resistance_low+0x12c>)
 8001d2c:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001d30:	461d      	mov	r5, r3
 8001d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001d46:	4b38      	ldr	r3, [pc, #224]	@ (8001e28 <calc_gas_resistance_low+0x130>)
 8001d48:	f107 0408 	add.w	r4, r7, #8
 8001d4c:	461d      	mov	r5, r3
 8001d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d70:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d78:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001e2c <calc_gas_resistance_low+0x134>
 8001d7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d80:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001d84:	797b      	ldrb	r3, [r7, #5]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	33a0      	adds	r3, #160	@ 0xa0
 8001d8a:	443b      	add	r3, r7
 8001d8c:	3b58      	subs	r3, #88	@ 0x58
 8001d8e:	ed93 7a00 	vldr	s14, [r3]
 8001d92:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001e30 <calc_gas_resistance_low+0x138>
 8001d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001da2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001daa:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001dae:	797b      	ldrb	r3, [r7, #5]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	33a0      	adds	r3, #160	@ 0xa0
 8001db4:	443b      	add	r3, r7
 8001db6:	3b98      	subs	r3, #152	@ 0x98
 8001db8:	ed93 7a00 	vldr	s14, [r3]
 8001dbc:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001e30 <calc_gas_resistance_low+0x138>
 8001dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dcc:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001dd0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001dd4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001e34 <calc_gas_resistance_low+0x13c>
 8001dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ddc:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001de8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001e38 <calc_gas_resistance_low+0x140>
 8001dec:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001df0:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8001df4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001df8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0c:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    return calc_gas_res;
 8001e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e14:	ee07 3a90 	vmov	s15, r3
}
 8001e18:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1c:	37a4      	adds	r7, #164	@ 0xa4
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bcb0      	pop	{r4, r5, r7}
 8001e22:	4770      	bx	lr
 8001e24:	08019860 	.word	0x08019860
 8001e28:	080198a0 	.word	0x080198a0
 8001e2c:	44a78000 	.word	0x44a78000
 8001e30:	42c80000 	.word	0x42c80000
 8001e34:	340637bd 	.word	0x340637bd
 8001e38:	44000000 	.word	0x44000000

08001e3c <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	460a      	mov	r2, r1
 8001e46:	80fb      	strh	r3, [r7, #6]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001e4c:	797b      	ldrb	r3, [r7, #5]
 8001e4e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8001e5e:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e70:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001eac <calc_gas_resistance_high+0x70>
 8001e80:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e92:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	ee07 3a90 	vmov	s15, r3
}
 8001e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	49742400 	.word	0x49742400

08001eb0 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b08b      	sub	sp, #44	@ 0x2c
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001ec2:	d902      	bls.n	8001eca <calc_res_heat+0x1a>
    {
        temp = 400;
 8001ec4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ec8:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee0:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001ff4 <calc_res_heat+0x144>
 8001ee4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ee8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efa:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001ff8 <calc_res_heat+0x148>
 8001efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f02:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001ffc <calc_res_heat+0x14c>
 8001f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002000 <calc_res_heat+0x150>
 8001f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f12:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f24:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002004 <calc_res_heat+0x154>
 8001f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2c:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8001f30:	89fb      	ldrh	r3, [r7, #14]
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f4a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f64:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f74:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f86:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001f8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f8e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fac:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002008 <calc_res_heat+0x158>
 8001fb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fb8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001fbc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001fc0:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8001fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8001fc8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 8001fd0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800200c <calc_res_heat+0x15c>
 8001fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8001fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fdc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fe0:	793b      	ldrb	r3, [r7, #4]
 8001fe2:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	372c      	adds	r7, #44	@ 0x2c
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	42440000 	.word	0x42440000
 8001ff8:	47000000 	.word	0x47000000
 8001ffc:	3a03126f 	.word	0x3a03126f
 8002000:	3b1a0275 	.word	0x3b1a0275
 8002004:	44800000 	.word	0x44800000
 8002008:	3b03126f 	.word	0x3b03126f
 800200c:	4059999a 	.word	0x4059999a

08002010 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8002024:	d308      	bcc.n	8002038 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8002026:	23ff      	movs	r3, #255	@ 0xff
 8002028:	73bb      	strb	r3, [r7, #14]
 800202a:	e00f      	b.n	800204c <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	3301      	adds	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	2b3f      	cmp	r3, #63	@ 0x3f
 800203c:	d8f6      	bhi.n	800202c <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	019b      	lsls	r3, r3, #6
 8002046:	b2db      	uxtb	r3, r3
 8002048:	4413      	add	r3, r2
 800204a:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 800204c:	7bbb      	ldrb	r3, [r7, #14]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b08e      	sub	sp, #56	@ 0x38
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8002080:	2305      	movs	r3, #5
 8002082:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME68X_OK))
 8002086:	e11d      	b.n	80022c4 <read_field_data+0x26a>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	461a      	mov	r2, r3
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	4413      	add	r3, r2
 8002090:	b2db      	uxtb	r3, r3
 8002092:	331d      	adds	r3, #29
 8002094:	b2d8      	uxtb	r0, r3
 8002096:	f107 0110 	add.w	r1, r7, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2211      	movs	r2, #17
 800209e:	f7fe ff8f 	bl	8000fc0 <bme68x_get_regs>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 80020ae:	23ff      	movs	r3, #255	@ 0xff
 80020b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 80020b4:	e10f      	b.n	80022d6 <read_field_data+0x27c>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 80020b6:	7c3b      	ldrb	r3, [r7, #16]
 80020b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 80020c2:	7c3b      	ldrb	r3, [r7, #16]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80020ce:	7c7a      	ldrb	r2, [r7, #17]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 80020d4:	7cbb      	ldrb	r3, [r7, #18]
 80020d6:	031a      	lsls	r2, r3, #12
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4313      	orrs	r3, r2
 80020de:	7d3a      	ldrb	r2, [r7, #20]
 80020e0:	0912      	lsrs	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	4313      	orrs	r3, r2
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 80020e8:	7d7b      	ldrb	r3, [r7, #21]
 80020ea:	031a      	lsls	r2, r3, #12
 80020ec:	7dbb      	ldrb	r3, [r7, #22]
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	4313      	orrs	r3, r2
 80020f2:	7dfa      	ldrb	r2, [r7, #23]
 80020f4:	0912      	lsrs	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	4313      	orrs	r3, r2
 80020fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 80020fc:	7e3b      	ldrb	r3, [r7, #24]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	b29b      	uxth	r3, r3
 8002102:	7e7a      	ldrb	r2, [r7, #25]
 8002104:	4313      	orrs	r3, r2
 8002106:	857b      	strh	r3, [r7, #42]	@ 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8002108:	7f7b      	ldrb	r3, [r7, #29]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	b29b      	uxth	r3, r3
 800210e:	7fba      	ldrb	r2, [r7, #30]
 8002110:	0992      	lsrs	r2, r2, #6
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	4313      	orrs	r3, r2
 8002116:	853b      	strh	r3, [r7, #40]	@ 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8002118:	7ffb      	ldrb	r3, [r7, #31]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	b29b      	uxth	r3, r3
 800211e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002122:	0992      	lsrs	r2, r2, #6
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	4313      	orrs	r3, r2
 8002128:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 800212a:	7fbb      	ldrb	r3, [r7, #30]
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002134:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d11c      	bne.n	8002182 <read_field_data+0x128>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b25a      	sxtb	r2, r3
 800214e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002152:	b25b      	sxtb	r3, r3
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	b25b      	sxtb	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b25b      	sxtb	r3, r3
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b25a      	sxtb	r2, r3
 800216a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800216e:	b25b      	sxtb	r3, r3
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	b25b      	sxtb	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	b25b      	sxtb	r3, r3
 800217a:	b2da      	uxtb	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	e019      	b.n	80021b6 <read_field_data+0x15c>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b25a      	sxtb	r2, r3
 8002188:	7fbb      	ldrb	r3, [r7, #30]
 800218a:	b25b      	sxtb	r3, r3
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	b25b      	sxtb	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b25b      	sxtb	r3, r3
 8002196:	b2da      	uxtb	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b25a      	sxtb	r2, r3
 80021a2:	7fbb      	ldrb	r3, [r7, #30]
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	da70      	bge.n	80022a2 <read_field_data+0x248>
 80021c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d16c      	bne.n	80022a2 <read_field_data+0x248>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	785b      	ldrb	r3, [r3, #1]
 80021cc:	335a      	adds	r3, #90	@ 0x5a
 80021ce:	b2d8      	uxtb	r0, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1cd9      	adds	r1, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f7fe fef2 	bl	8000fc0 <bme68x_get_regs>
 80021dc:	4603      	mov	r3, r0
 80021de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME68X_OK)
 80021e2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <read_field_data+0x1aa>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	785b      	ldrb	r3, [r3, #1]
 80021ee:	3350      	adds	r3, #80	@ 0x50
 80021f0:	b2d8      	uxtb	r0, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1d19      	adds	r1, r3, #4
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f7fe fee1 	bl	8000fc0 <bme68x_get_regs>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8002204:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10c      	bne.n	8002226 <read_field_data+0x1cc>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	785b      	ldrb	r3, [r3, #1]
 8002210:	3364      	adds	r3, #100	@ 0x64
 8002212:	b2d8      	uxtb	r0, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1d59      	adds	r1, r3, #5
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f7fe fed0 	bl	8000fc0 <bme68x_get_regs>
 8002220:	4603      	mov	r3, r0
 8002222:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8002226:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800222a:	2b00      	cmp	r3, #0
 800222c:	d139      	bne.n	80022a2 <read_field_data+0x248>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002232:	f7ff facd 	bl	80017d0 <calc_temperature>
 8002236:	eef0 7a40 	vmov.f32	s15, s0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002244:	f7ff fb4a 	bl	80018dc <calc_pressure>
 8002248:	eef0 7a40 	vmov.f32	s15, s0
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8002252:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fc82 	bl	8001b60 <calc_humidity>
 800225c:	eef0 7a40 	vmov.f32	s15, s0
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10c      	bne.n	8002288 <read_field_data+0x22e>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 800226e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002272:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fde0 	bl	8001e3c <calc_gas_resistance_high>
 800227c:	eef0 7a40 	vmov.f32	s15, s0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8002286:	e026      	b.n	80022d6 <read_field_data+0x27c>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002288:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800228c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fd31 	bl	8001cf8 <calc_gas_resistance_low>
 8002296:	eef0 7a40 	vmov.f32	s15, s0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 80022a0:	e019      	b.n	80022d6 <read_field_data+0x27c>
            }
        }

        if (rslt == BME68X_OK)
 80022a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <read_field_data+0x260>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6852      	ldr	r2, [r2, #4]
 80022b2:	4611      	mov	r1, r2
 80022b4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80022b8:	4798      	blx	r3
        }

        tries--;
 80022ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80022be:	3b01      	subs	r3, #1
 80022c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME68X_OK))
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <read_field_data+0x27c>
 80022cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f43f aed9 	beq.w	8002088 <read_field_data+0x2e>
    }

    return rslt;
 80022d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3738      	adds	r7, #56	@ 0x38
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 80022e2:	b590      	push	{r4, r7, lr}
 80022e4:	b09d      	sub	sp, #116	@ 0x74
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 80022f2:	2300      	movs	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022fa:	222f      	movs	r2, #47	@ 0x2f
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f013 ffe4 	bl	80162cc <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	615a      	str	r2, [r3, #20]
 800231a:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10c      	bne.n	800233e <read_all_field_data+0x5c>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <read_all_field_data+0x5c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3308      	adds	r3, #8
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8002338:	23ff      	movs	r3, #255	@ 0xff
 800233a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 800233e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8002346:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2233      	movs	r2, #51	@ 0x33
 800234e:	201d      	movs	r0, #29
 8002350:	f7fe fe36 	bl	8000fc0 <bme68x_get_regs>
 8002354:	4603      	mov	r3, r0
 8002356:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 800235a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8002362:	f107 0108 	add.w	r1, r7, #8
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	221e      	movs	r2, #30
 800236a:	2050      	movs	r0, #80	@ 0x50
 800236c:	f7fe fe28 	bl	8000fc0 <bme68x_get_regs>
 8002370:	4603      	mov	r3, r0
 8002372:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002376:	2300      	movs	r3, #0
 8002378:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800237c:	e1ce      	b.n	800271c <read_all_field_data+0x43a>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 800237e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002382:	461a      	mov	r2, r3
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	4413      	add	r3, r2
 8002388:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 800238c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002390:	3370      	adds	r3, #112	@ 0x70
 8002392:	443b      	add	r3, r7
 8002394:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002398:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	440b      	add	r3, r1
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 80023ac:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80023b0:	3370      	adds	r3, #112	@ 0x70
 80023b2:	443b      	add	r3, r7
 80023b4:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 80023b8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	440b      	add	r3, r1
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f002 020f 	and.w	r2, r2, #15
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 80023cc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	440b      	add	r3, r1
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3270      	adds	r2, #112	@ 0x70
 80023e0:	443a      	add	r2, r7
 80023e2:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80023e6:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 80023e8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80023ec:	3302      	adds	r3, #2
 80023ee:	3370      	adds	r3, #112	@ 0x70
 80023f0:	443b      	add	r3, r7
 80023f2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023f6:	031a      	lsls	r2, r3, #12
 80023f8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80023fc:	3303      	adds	r3, #3
 80023fe:	3370      	adds	r3, #112	@ 0x70
 8002400:	443b      	add	r3, r7
 8002402:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 800240a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800240e:	3204      	adds	r2, #4
 8002410:	3270      	adds	r2, #112	@ 0x70
 8002412:	443a      	add	r2, r7
 8002414:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002418:	0912      	lsrs	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
        adc_pres =
 800241c:	4313      	orrs	r3, r2
 800241e:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8002420:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002424:	3305      	adds	r3, #5
 8002426:	3370      	adds	r3, #112	@ 0x70
 8002428:	443b      	add	r3, r7
 800242a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800242e:	031a      	lsls	r2, r3, #12
 8002430:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002434:	3306      	adds	r3, #6
 8002436:	3370      	adds	r3, #112	@ 0x70
 8002438:	443b      	add	r3, r7
 800243a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8002442:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002446:	3207      	adds	r2, #7
 8002448:	3270      	adds	r2, #112	@ 0x70
 800244a:	443a      	add	r2, r7
 800244c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002450:	0912      	lsrs	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
        adc_temp =
 8002454:	4313      	orrs	r3, r2
 8002456:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8002458:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800245c:	3308      	adds	r3, #8
 800245e:	3370      	adds	r3, #112	@ 0x70
 8002460:	443b      	add	r3, r7
 8002462:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	b29b      	uxth	r3, r3
 800246a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800246e:	3209      	adds	r2, #9
 8002470:	3270      	adds	r2, #112	@ 0x70
 8002472:	443a      	add	r2, r7
 8002474:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002478:	4313      	orrs	r3, r2
 800247a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 800247e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002482:	330d      	adds	r3, #13
 8002484:	3370      	adds	r3, #112	@ 0x70
 8002486:	443b      	add	r3, r7
 8002488:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	b29b      	uxth	r3, r3
 8002490:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002494:	320e      	adds	r2, #14
 8002496:	3270      	adds	r2, #112	@ 0x70
 8002498:	443a      	add	r2, r7
 800249a:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800249e:	0992      	lsrs	r2, r2, #6
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 80024a8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024ac:	330f      	adds	r3, #15
 80024ae:	3370      	adds	r3, #112	@ 0x70
 80024b0:	443b      	add	r3, r7
 80024b2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80024be:	3210      	adds	r2, #16
 80024c0:	3270      	adds	r2, #112	@ 0x70
 80024c2:	443a      	add	r2, r7
 80024c4:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80024c8:	0992      	lsrs	r2, r2, #6
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 80024d2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024d6:	330e      	adds	r3, #14
 80024d8:	3370      	adds	r3, #112	@ 0x70
 80024da:	443b      	add	r3, r7
 80024dc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 80024e8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80024ec:	3310      	adds	r3, #16
 80024ee:	3370      	adds	r3, #112	@ 0x70
 80024f0:	443b      	add	r3, r7
 80024f2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d13a      	bne.n	800257c <read_all_field_data+0x29a>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8002506:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b25a      	sxtb	r2, r3
 8002516:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800251a:	3310      	adds	r3, #16
 800251c:	3370      	adds	r3, #112	@ 0x70
 800251e:	443b      	add	r3, r7
 8002520:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002524:	b25b      	sxtb	r3, r3
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	b25b      	sxtb	r3, r3
 800252c:	4313      	orrs	r3, r2
 800252e:	b259      	sxtb	r1, r3
 8002530:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b2ca      	uxtb	r2, r1
 800253e:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8002540:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b25a      	sxtb	r2, r3
 8002550:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002554:	3310      	adds	r3, #16
 8002556:	3370      	adds	r3, #112	@ 0x70
 8002558:	443b      	add	r3, r7
 800255a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	b25b      	sxtb	r3, r3
 8002566:	4313      	orrs	r3, r2
 8002568:	b259      	sxtb	r1, r3
 800256a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b2ca      	uxtb	r2, r1
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e039      	b.n	80025f0 <read_all_field_data+0x30e>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 800257c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b25a      	sxtb	r2, r3
 800258c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002590:	330e      	adds	r3, #14
 8002592:	3370      	adds	r3, #112	@ 0x70
 8002594:	443b      	add	r3, r7
 8002596:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800259a:	b25b      	sxtb	r3, r3
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b259      	sxtb	r1, r3
 80025a6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	b2ca      	uxtb	r2, r1
 80025b4:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80025b6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b25a      	sxtb	r2, r3
 80025c6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025ca:	330e      	adds	r3, #14
 80025cc:	3370      	adds	r3, #112	@ 0x70
 80025ce:	443b      	add	r3, r7
 80025d0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b259      	sxtb	r1, r3
 80025e0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b2ca      	uxtb	r2, r1
 80025ee:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 80025f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	4619      	mov	r1, r3
 8002600:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8002610:	443a      	add	r2, r7
 8002612:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002616:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8002618:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	785b      	ldrb	r3, [r3, #1]
 8002626:	f103 020a 	add.w	r2, r3, #10
 800262a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	440b      	add	r3, r1
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3270      	adds	r2, #112	@ 0x70
 8002638:	443a      	add	r2, r7
 800263a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800263e:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8002640:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	f103 0214 	add.w	r2, r3, #20
 8002652:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	440b      	add	r3, r1
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3270      	adds	r2, #112	@ 0x70
 8002660:	443a      	add	r2, r7
 8002662:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002666:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8002668:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	681c      	ldr	r4, [r3, #0]
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002678:	f7ff f8aa 	bl	80017d0 <calc_temperature>
 800267c:	eef0 7a40 	vmov.f32	s15, s0
 8002680:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8002684:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	681c      	ldr	r4, [r3, #0]
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002694:	f7ff f922 	bl	80018dc <calc_pressure>
 8002698:	eef0 7a40 	vmov.f32	s15, s0
 800269c:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80026a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	681c      	ldr	r4, [r3, #0]
 80026ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80026b0:	6839      	ldr	r1, [r7, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fa54 	bl	8001b60 <calc_humidity>
 80026b8:	eef0 7a40 	vmov.f32	s15, s0
 80026bc:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d112      	bne.n	80026ee <read_all_field_data+0x40c>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80026c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	681c      	ldr	r4, [r3, #0]
 80026d4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80026d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fbac 	bl	8001e3c <calc_gas_resistance_high>
 80026e4:	eef0 7a40 	vmov.f32	s15, s0
 80026e8:	edc4 7a05 	vstr	s15, [r4, #20]
 80026ec:	e011      	b.n	8002712 <read_all_field_data+0x430>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80026ee:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	681c      	ldr	r4, [r3, #0]
 80026fa:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 80026fe:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff faf7 	bl	8001cf8 <calc_gas_resistance_low>
 800270a:	eef0 7a40 	vmov.f32	s15, s0
 800270e:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002712:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002716:	3301      	adds	r3, #1
 8002718:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800271c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002720:	2b02      	cmp	r3, #2
 8002722:	d804      	bhi.n	800272e <read_all_field_data+0x44c>
 8002724:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002728:	2b00      	cmp	r3, #0
 800272a:	f43f ae28 	beq.w	800237e <read_all_field_data+0x9c>
        }
    }

    return rslt;
 800272e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8002732:	4618      	mov	r0, r3
 8002734:	3774      	adds	r7, #116	@ 0x74
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}

0800273a <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800273a:	b590      	push	{r4, r7, lr}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	6039      	str	r1, [r7, #0]
 8002744:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8002746:	6838      	ldr	r0, [r7, #0]
 8002748:	f000 f8b8 	bl	80028bc <null_ptr_check>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8002750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d14f      	bne.n	80027f8 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	da02      	bge.n	8002766 <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8002760:	2300      	movs	r3, #0
 8002762:	73bb      	strb	r3, [r7, #14]
 8002764:	e001      	b.n	800276a <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 8002766:	2310      	movs	r3, #16
 8002768:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	7b5b      	ldrb	r3, [r3, #13]
 800276e:	7bba      	ldrb	r2, [r7, #14]
 8002770:	429a      	cmp	r2, r3
 8002772:	d041      	beq.n	80027f8 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	7bba      	ldrb	r2, [r7, #14]
 8002778:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f107 010d 	add.w	r1, r7, #13
 8002786:	2201      	movs	r2, #1
 8002788:	20f3      	movs	r0, #243	@ 0xf3
 800278a:	47a0      	blx	r4
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80027a0:	23fe      	movs	r3, #254	@ 0xfe
 80027a2:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80027a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d125      	bne.n	80027f8 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80027ac:	7b7b      	ldrb	r3, [r7, #13]
 80027ae:	f023 0310 	bic.w	r3, r3, #16
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	7b5b      	ldrb	r3, [r3, #13]
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	b25a      	sxtb	r2, r3
 80027c2:	7b7b      	ldrb	r3, [r7, #13]
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	4313      	orrs	r3, r2
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f107 010d 	add.w	r1, r7, #13
 80027da:	2201      	movs	r2, #1
 80027dc:	2073      	movs	r0, #115	@ 0x73
 80027de:	47a0      	blx	r4
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 80027f4:	23fe      	movs	r3, #254	@ 0xfe
 80027f6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80027f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}

08002804 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f855 	bl	80028bc <null_ptr_check>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11b      	bne.n	8002856 <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f107 010e 	add.w	r1, r7, #14
 800282a:	2201      	movs	r2, #1
 800282c:	20f3      	movs	r0, #243	@ 0xf3
 800282e:	47a0      	blx	r4
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8002844:	23fe      	movs	r3, #254	@ 0xfe
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	e005      	b.n	8002856 <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 800284a:	7bbb      	ldrb	r3, [r7, #14]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	b2da      	uxtb	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8002856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}

08002862 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	460b      	mov	r3, r1
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f823 	bl	80028bc <null_ptr_check>
 8002876:	4603      	mov	r3, r0
 8002878:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <boundary_check+0x4a>
 8002880:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	7afa      	ldrb	r2, [r7, #11]
 800288e:	429a      	cmp	r2, r3
 8002890:	d20e      	bcs.n	80028b0 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	7afa      	ldrb	r2, [r7, #11]
 8002896:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 80028aa:	e001      	b.n	80028b0 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80028ac:	23ff      	movs	r3, #255	@ 0xff
 80028ae:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80028b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <null_ptr_check+0x2a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <null_ptr_check+0x2a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <null_ptr_check+0x2a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 80028e6:	23ff      	movs	r3, #255	@ 0xff
 80028e8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b093      	sub	sp, #76	@ 0x4c
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	460b      	mov	r3, r1
 800290a:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8002918:	236e      	movs	r3, #110	@ 0x6e
 800291a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800291e:	4aa1      	ldr	r2, [pc, #644]	@ (8002ba4 <set_conf+0x2a8>)
 8002920:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002924:	ca07      	ldmia	r2, {r0, r1, r2}
 8002926:	c303      	stmia	r3!, {r0, r1}
 8002928:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800292a:	4a9e      	ldr	r2, [pc, #632]	@ (8002ba4 <set_conf+0x2a8>)
 800292c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002930:	ca07      	ldmia	r2, {r0, r1, r2}
 8002932:	c303      	stmia	r3!, {r0, r1}
 8002934:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002936:	4a9b      	ldr	r2, [pc, #620]	@ (8002ba4 <set_conf+0x2a8>)
 8002938:	f107 0320 	add.w	r3, r7, #32
 800293c:	ca07      	ldmia	r2, {r0, r1, r2}
 800293e:	c303      	stmia	r3!, {r0, r1}
 8002940:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002942:	4a98      	ldr	r2, [pc, #608]	@ (8002ba4 <set_conf+0x2a8>)
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	ca07      	ldmia	r2, {r0, r1, r2}
 800294a:	c303      	stmia	r3!, {r0, r1}
 800294c:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 800294e:	7afb      	ldrb	r3, [r7, #11]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d024      	beq.n	800299e <set_conf+0xa2>
 8002954:	2b03      	cmp	r3, #3
 8002956:	f300 80f9 	bgt.w	8002b4c <set_conf+0x250>
 800295a:	2b01      	cmp	r3, #1
 800295c:	d002      	beq.n	8002964 <set_conf+0x68>
 800295e:	2b02      	cmp	r3, #2
 8002960:	d07c      	beq.n	8002a5c <set_conf+0x160>
 8002962:	e0f3      	b.n	8002b4c <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8002964:	235a      	movs	r3, #90	@ 0x5a
 8002966:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	885b      	ldrh	r3, [r3, #2]
 800296e:	6839      	ldr	r1, [r7, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fa9d 	bl	8001eb0 <calc_res_heat>
 8002976:	4603      	mov	r3, r0
 8002978:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 800297c:	2364      	movs	r3, #100	@ 0x64
 800297e:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	889b      	ldrh	r3, [r3, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fb42 	bl	8002010 <calc_gas_wait>
 800298c:	4603      	mov	r3, r0
 800298e:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 800299c:	e0db      	b.n	8002b56 <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <set_conf+0xb2>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d103      	bne.n	80029b6 <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 80029ae:	23ff      	movs	r3, #255	@ 0xff
 80029b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 80029b4:	e0cf      	b.n	8002b56 <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80029bc:	e03f      	b.n	8002a3e <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80029be:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80029c2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80029c6:	325a      	adds	r2, #90	@ 0x5a
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	3348      	adds	r3, #72	@ 0x48
 80029cc:	443b      	add	r3, r7
 80029ce:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fa62 	bl	8001eb0 <calc_res_heat>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80029f4:	443b      	add	r3, r7
 80029f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80029fa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80029fe:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002a02:	3264      	adds	r2, #100	@ 0x64
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	3348      	adds	r3, #72	@ 0x48
 8002a08:	443b      	add	r3, r7
 8002a0a:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff faf5 	bl	8002010 <calc_gas_wait>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002a2e:	443b      	add	r3, r7
 8002a30:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002a34:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	7c1b      	ldrb	r3, [r3, #16]
 8002a42:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d3b9      	bcc.n	80029be <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	7c1a      	ldrb	r2, [r3, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	7c1b      	ldrb	r3, [r3, #16]
 8002a56:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002a5a:	e07c      	b.n	8002b56 <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <set_conf+0x170>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d103      	bne.n	8002a74 <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8002a6c:	23ff      	movs	r3, #255	@ 0xff
 8002a6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8002a72:	e070      	b.n	8002b56 <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8a5b      	ldrh	r3, [r3, #18]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002a88:	e03a      	b.n	8002b00 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002a8a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a8e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002a92:	325a      	adds	r2, #90	@ 0x5a
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	3348      	adds	r3, #72	@ 0x48
 8002a98:	443b      	add	r3, r7
 8002a9a:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f9fc 	bl	8001eb0 <calc_res_heat>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002ac0:	443b      	add	r3, r7
 8002ac2:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002ac6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002aca:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002ace:	3264      	adds	r2, #100	@ 0x64
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	3348      	adds	r3, #72	@ 0x48
 8002ad4:	443b      	add	r3, r7
 8002ad6:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	3348      	adds	r3, #72	@ 0x48
 8002af0:	443b      	add	r3, r7
 8002af2:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002af6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002afa:	3301      	adds	r3, #1
 8002afc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	7c1b      	ldrb	r3, [r3, #16]
 8002b04:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3be      	bcc.n	8002a8a <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	7c1a      	ldrb	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	7c1b      	ldrb	r3, [r3, #16]
 8002b18:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8a5b      	ldrh	r3, [r3, #18]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f841 	bl	8002ba8 <calc_heatr_dur_shared>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 8002b2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10f      	bne.n	8002b54 <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002b34:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002b38:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f7fe f9ae 	bl	8000ea0 <bme68x_set_regs>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 8002b4a:	e003      	b.n	8002b54 <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002b52:	e000      	b.n	8002b56 <set_conf+0x25a>
            break;
 8002b54:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002b56:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002b5e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b62:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002b66:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f7fe f998 	bl	8000ea0 <bme68x_set_regs>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 8002b76:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002b7e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002b82:	f107 0114 	add.w	r1, r7, #20
 8002b86:	f107 0020 	add.w	r0, r7, #32
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f7fe f988 	bl	8000ea0 <bme68x_set_regs>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8002b96:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	374c      	adds	r7, #76	@ 0x4c
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	080198e0 	.word	0x080198e0

08002ba8 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	f240 7282 	movw	r2, #1922	@ 0x782
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d902      	bls.n	8002bc6 <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002bc0:	23ff      	movs	r3, #255	@ 0xff
 8002bc2:	73bb      	strb	r3, [r7, #14]
 8002bc4:	e01d      	b.n	8002c02 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bcc:	fb03 f202 	mul.w	r2, r3, r2
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <calc_heatr_dur_shared+0x68>)
 8002bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002bd6:	1ad2      	subs	r2, r2, r3
 8002bd8:	0852      	lsrs	r2, r2, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002be0:	e005      	b.n	8002bee <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	3301      	adds	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bf2:	d8f6      	bhi.n	8002be2 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	019b      	lsls	r3, r3, #6
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	12c8b89f 	.word	0x12c8b89f

08002c14 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	603a      	str	r2, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
 8002c20:	460b      	mov	r3, r1
 8002c22:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	789b      	ldrb	r3, [r3, #2]
 8002c30:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002c32:	79bb      	ldrb	r3, [r7, #6]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	789b      	ldrb	r3, [r3, #2]
 8002c3e:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da21      	bge.n	8002c96 <sort_sensor_data+0x82>
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da18      	bge.n	8002c96 <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002c64:	89ba      	ldrh	r2, [r7, #12]
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002c6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c72:	f113 0f02 	cmn.w	r3, #2
 8002c76:	db03      	blt.n	8002c80 <sort_sensor_data+0x6c>
 8002c78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db03      	blt.n	8002c88 <sort_sensor_data+0x74>
 8002c80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	dd16      	ble.n	8002cb6 <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002c88:	79b9      	ldrb	r1, [r7, #6]
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f816 	bl	8002cc0 <swap_fields>
    {
 8002c94:	e00f      	b.n	8002cb6 <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002c96:	79bb      	ldrb	r3, [r7, #6]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b25b      	sxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da07      	bge.n	8002cb8 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002ca8:	79b9      	ldrb	r1, [r7, #6]
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f806 	bl	8002cc0 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002cb4:	e000      	b.n	8002cb8 <sort_sensor_data+0xa4>
    {
 8002cb6:	bf00      	nop
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	603a      	str	r2, [r7, #0]
 8002cca:	71fb      	strb	r3, [r7, #7]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002cdc:	79bb      	ldrb	r3, [r7, #6]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	6839      	ldr	r1, [r7, #0]
 8002cea:	440b      	add	r3, r1
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002cf0:	79bb      	ldrb	r3, [r7, #6]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	601a      	str	r2, [r3, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08e      	sub	sp, #56	@ 0x38
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002d10:	f107 010c 	add.w	r1, r7, #12
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2217      	movs	r2, #23
 8002d18:	208a      	movs	r0, #138	@ 0x8a
 8002d1a:	f7fe f951 	bl	8000fc0 <bme68x_get_regs>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 8002d24:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002d2c:	f107 030c 	add.w	r3, r7, #12
 8002d30:	f103 0117 	add.w	r1, r3, #23
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	220e      	movs	r2, #14
 8002d38:	20e1      	movs	r0, #225	@ 0xe1
 8002d3a:	f7fe f941 	bl	8000fc0 <bme68x_get_regs>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 8002d44:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2205      	movs	r2, #5
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe f931 	bl	8000fc0 <bme68x_get_regs>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002d64:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f040 80cb 	bne.w	8002f04 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002d6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d7a:	b21b      	sxth	r3, r3
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002d86:	7b7b      	ldrb	r3, [r7, #13]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	7b3b      	ldrb	r3, [r7, #12]
 8002d8e:	b21b      	sxth	r3, r3
 8002d90:	4313      	orrs	r3, r2
 8002d92:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002d98:	7bbb      	ldrb	r3, [r7, #14]
 8002d9a:	b25a      	sxtb	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002da2:	7c7b      	ldrb	r3, [r7, #17]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	7c3b      	ldrb	r3, [r7, #16]
 8002daa:	b21b      	sxth	r3, r3
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b21b      	sxth	r3, r3
 8002db0:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	b21a      	sxth	r2, r3
 8002dbc:	7cbb      	ldrb	r3, [r7, #18]
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002dc8:	7d3b      	ldrb	r3, [r7, #20]
 8002dca:	b25a      	sxtb	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	b21a      	sxth	r2, r3
 8002dd8:	7dbb      	ldrb	r3, [r7, #22]
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8002de4:	7e7b      	ldrb	r3, [r7, #25]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	b21a      	sxth	r2, r3
 8002dea:	7e3b      	ldrb	r3, [r7, #24]
 8002dec:	b21b      	sxth	r3, r3
 8002dee:	4313      	orrs	r3, r2
 8002df0:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8002df6:	7efb      	ldrb	r3, [r7, #27]
 8002df8:	b25a      	sxtb	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8002e00:	7ebb      	ldrb	r3, [r7, #26]
 8002e02:	b25a      	sxtb	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	b21a      	sxth	r2, r3
 8002e10:	7fbb      	ldrb	r3, [r7, #30]
 8002e12:	b21b      	sxth	r3, r3
 8002e14:	4313      	orrs	r3, r2
 8002e16:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8002e1c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	b21a      	sxth	r2, r3
 8002e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e28:	b21b      	sxth	r3, r3
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002e32:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002e3c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8002e44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e48:	b21b      	sxth	r3, r3
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002e50:	4313      	orrs	r3, r2
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002e76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002e7a:	b25a      	sxtb	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8002e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e84:	b25a      	sxtb	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e8e:	b25a      	sxtb	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8002e94:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002e9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002ea0:	b25a      	sxtb	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002eaa:	b25a      	sxtb	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8002eb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	b21a      	sxth	r2, r3
 8002eb8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002ebc:	b21b      	sxth	r3, r3
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002ec6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002eca:	b25a      	sxtb	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8002ed0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ed4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da00      	bge.n	8002ede <get_calib_data+0x1d6>
 8002edc:	330f      	adds	r3, #15
 8002ede:	111b      	asrs	r3, r3, #4
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002ee8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002eec:	b25a      	sxtb	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8002ef4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	111b      	asrs	r3, r3, #4
 8002efc:	b25a      	sxtb	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 8002f04:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3738      	adds	r7, #56	@ 0x38
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8002f1c:	f107 010e 	add.w	r1, r7, #14
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	20f0      	movs	r0, #240	@ 0xf0
 8002f26:	f7fe f84b 	bl	8000fc0 <bme68x_get_regs>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8002f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8002f36:	7bbb      	ldrb	r3, [r7, #14]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <bmi3_init>:
/*!
 * @brief This API is the entry point for bmi3 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi3_init(struct bmi3_dev *dev)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to assign chip id */
    uint8_t chip_id[2] = { 0 };
 8002f52:	2300      	movs	r3, #0
 8002f54:	81bb      	strh	r3, [r7, #12]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f001 f959 	bl	800420e <null_ptr_check>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI3_OK)
 8002f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10d      	bne.n	8002f84 <bmi3_init+0x3a>
    {
        dev->chip_id = 0;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]

        /* An extra dummy byte is read during SPI read */
        if (dev->intf == BMI3_SPI_INTF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7a5b      	ldrb	r3, [r3, #9]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <bmi3_init+0x34>
        {
            dev->dummy_byte = 1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	72da      	strb	r2, [r3, #11]
 8002f7c:	e002      	b.n	8002f84 <bmi3_init+0x3a>
        }
        else
        {
            dev->dummy_byte = 2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	72da      	strb	r2, [r3, #11]
        }
    }

    if (rslt == BMI3_OK)
 8002f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d118      	bne.n	8002fbe <bmi3_init+0x74>
    {
        /* Perform soft-reset to bring all register values to their default values */
        rslt = bmi3_soft_reset(dev);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f8d3 	bl	8003138 <bmi3_soft_reset>
 8002f92:	4603      	mov	r3, r0
 8002f94:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8002f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <bmi3_init+0x74>
        {
            /* Read chip-id of the BMI3 sensor */
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, chip_id, 2, dev);
 8002f9e:	f107 010c 	add.w	r1, r7, #12
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f000 f821 	bl	8002fee <bmi3_get_regs>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8002fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <bmi3_init+0x74>
            {
                dev->chip_id = chip_id[0];
 8002fb8:	7b3a      	ldrb	r2, [r7, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (rslt == BMI3_OK)
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <bmi3_init+0x98>
    {
        if (((chip_id[1] & BMI3_REV_ID_MASK) >> BMI3_REV_ID_POS) == BMI3_ENABLE)
 8002fc6:	7b7b      	ldrb	r3, [r7, #13]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d104      	bne.n	8002fda <bmi3_init+0x90>
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_14_BIT_MASK;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f643 72ff 	movw	r2, #16383	@ 0x3fff
 8002fd6:	839a      	strh	r2, [r3, #28]
 8002fd8:	e003      	b.n	8002fe2 <bmi3_init+0x98>
        }
        else
        {
            dev->accel_bit_width = BMI3_ACC_DP_OFF_XYZ_13_BIT_MASK;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8002fe0:	839a      	strh	r2, [r3, #28]
        }
    }

    return rslt;
 8002fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <bmi3_get_regs>:
 * @note For most of the registers auto address increment applies, with the
 * exception of a few special registers, which trap the address. For e.g.,
 * Register address - 0x03.
 */
int8_t bmi3_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 8002fee:	b590      	push	{r4, r7, lr}
 8002ff0:	b0a7      	sub	sp, #156	@ 0x9c
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	81bb      	strh	r3, [r7, #12]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[BMI3_MAX_LEN];

    /* Variable to define loop */
    uint16_t index = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f001 f901 	bl	800420e <null_ptr_check>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    if ((rslt == BMI3_OK) && (data != NULL))
 8003012:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8003016:	2b00      	cmp	r3, #0
 8003018:	d145      	bne.n	80030a6 <bmi3_get_regs+0xb8>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d042      	beq.n	80030a6 <bmi3_get_regs+0xb8>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7a5b      	ldrb	r3, [r3, #9]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <bmi3_get_regs+0x42>
        {
            reg_addr = (reg_addr | BMI3_SPI_RD_MASK);
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800302e:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, temp_buf, len + dev->dummy_byte, dev->intf_ptr);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691c      	ldr	r4, [r3, #16]
 8003034:	89bb      	ldrh	r3, [r7, #12]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	7ad2      	ldrb	r2, [r2, #11]
 800303a:	4413      	add	r3, r2
 800303c:	461a      	mov	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f107 0114 	add.w	r1, r7, #20
 8003046:	7bf8      	ldrb	r0, [r7, #15]
 8003048:	47a0      	blx	r4
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6852      	ldr	r2, [r2, #4]
 800305a:	4611      	mov	r1, r2
 800305c:	2002      	movs	r0, #2
 800305e:	4798      	blx	r3

        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d119      	bne.n	800309e <bmi3_get_regs+0xb0>
        {
            /* Read the data from the position next to dummy byte */
            while (index < len)
 800306a:	e012      	b.n	8003092 <bmi3_get_regs+0xa4>
            {
                data[index] = temp_buf[index + dev->dummy_byte];
 800306c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	7ad2      	ldrb	r2, [r2, #11]
 8003074:	441a      	add	r2, r3
 8003076:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	440b      	add	r3, r1
 800307e:	3298      	adds	r2, #152	@ 0x98
 8003080:	443a      	add	r2, r7
 8003082:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8003086:	701a      	strb	r2, [r3, #0]
                index++;
 8003088:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800308c:	3301      	adds	r3, #1
 800308e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
            while (index < len)
 8003092:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8003096:	89bb      	ldrh	r3, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d3e7      	bcc.n	800306c <bmi3_get_regs+0x7e>
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 800309c:	e006      	b.n	80030ac <bmi3_get_regs+0xbe>
            }
        }
        else
        {
            rslt = BMI3_E_COM_FAIL;
 800309e:	23fe      	movs	r3, #254	@ 0xfe
 80030a0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (dev->intf_rslt == BMI3_INTF_RET_SUCCESS)
 80030a4:	e002      	b.n	80030ac <bmi3_get_regs+0xbe>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80030a6:	23ff      	movs	r3, #255	@ 0xff
 80030a8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    }

    return rslt;
 80030ac:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	379c      	adds	r7, #156	@ 0x9c
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd90      	pop	{r4, r7, pc}

080030b8 <bmi3_set_regs>:

/*!
 * @brief This API writes data to the given register address of bmi3 sensor.
 */
int8_t bmi3_set_regs(uint8_t reg_addr, const uint8_t *data, uint16_t len, struct bmi3_dev *dev)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	4613      	mov	r3, r2
 80030c8:	81bb      	strh	r3, [r7, #12]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f001 f89f 	bl	800420e <null_ptr_check>
 80030d0:	4603      	mov	r3, r0
 80030d2:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (data != NULL))
 80030d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d125      	bne.n	8003128 <bmi3_set_regs+0x70>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d022      	beq.n	8003128 <bmi3_set_regs+0x70>
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI3_SPI_INTF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7a5b      	ldrb	r3, [r3, #9]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <bmi3_set_regs+0x3a>
        {
            reg_addr = (reg_addr & BMI3_SPI_WR_MASK);
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f0:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->write(reg_addr, data, len, dev->intf_ptr);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695c      	ldr	r4, [r3, #20]
 80030f6:	89ba      	ldrh	r2, [r7, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	7bf8      	ldrb	r0, [r7, #15]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	47a0      	blx	r4
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	729a      	strb	r2, [r3, #10]
        dev->delay_us(2, dev->intf_ptr);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6852      	ldr	r2, [r2, #4]
 8003112:	4611      	mov	r1, r2
 8003114:	2002      	movs	r0, #2
 8003116:	4798      	blx	r3

        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <bmi3_set_regs+0x74>
        {
            rslt = BMI3_E_COM_FAIL;
 8003122:	23fe      	movs	r3, #254	@ 0xfe
 8003124:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMI3_INTF_RET_SUCCESS)
 8003126:	e001      	b.n	800312c <bmi3_set_regs+0x74>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003128:	23ff      	movs	r3, #255	@ 0xff
 800312a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800312c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003130:	4618      	mov	r0, r3
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}

08003138 <bmi3_soft_reset>:
/*!
 * @brief This API resets bmi3 sensor. All registers are overwritten with
 * their default values.
 */
int8_t bmi3_soft_reset(struct bmi3_dev *dev)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to read the dummy byte */
    uint8_t dummy_byte[2] = { 0 };
 8003140:	2300      	movs	r3, #0
 8003142:	83bb      	strh	r3, [r7, #28]

    /* Variable to store feature data array */
    uint8_t feature_data[2] = { 0x2c, 0x01 };
 8003144:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003148:	833b      	strh	r3, [r7, #24]

    /* Variable to enable feature engine bit */
    uint8_t feature_engine_en[2] = { BMI3_ENABLE, 0 };
 800314a:	2301      	movs	r3, #1
 800314c:	82bb      	strh	r3, [r7, #20]

    /* Variable to store status value for feature engine enable */
    uint8_t reg_data[2] = { 0 };
 800314e:	2300      	movs	r3, #0
 8003150:	823b      	strh	r3, [r7, #16]

    /* Array variable to store feature IO status */
    uint8_t feature_io_status[2] = { BMI3_ENABLE, 0 };
 8003152:	2301      	movs	r3, #1
 8003154:	81bb      	strh	r3, [r7, #12]

    uint8_t loop = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	77bb      	strb	r3, [r7, #30]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f001 f857 	bl	800420e <null_ptr_check>
 8003160:	4603      	mov	r3, r0
 8003162:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI3_OK)
 8003164:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d16f      	bne.n	800324c <bmi3_soft_reset+0x114>
    {
        /* Reset bmi3 device */
        rslt = bmi3_set_command_register(BMI3_CMD_SOFT_RESET, dev);
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	f64d 60af 	movw	r0, #57007	@ 0xdeaf
 8003172:	f000 f873 	bl	800325c <bmi3_set_command_register>
 8003176:	4603      	mov	r3, r0
 8003178:	77fb      	strb	r3, [r7, #31]
        dev->delay_us(BMI3_SOFT_RESET_DELAY, dev->intf_ptr);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6852      	ldr	r2, [r2, #4]
 8003182:	4611      	mov	r1, r2
 8003184:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003188:	4798      	blx	r3

        /* Performing a dummy read after a soft-reset */
        if ((rslt == BMI3_OK) && (dev->intf == BMI3_SPI_INTF))
 800318a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <bmi3_soft_reset+0x74>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7a5b      	ldrb	r3, [r3, #9]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d108      	bne.n	80031ac <bmi3_soft_reset+0x74>
        {
            rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, dummy_byte, 2, dev);
 800319a:	f107 011c 	add.w	r1, r7, #28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7ff ff23 	bl	8002fee <bmi3_get_regs>
 80031a8:	4603      	mov	r3, r0
 80031aa:	77fb      	strb	r3, [r7, #31]
        }

        /* Enabling Feature engine */
        if (rslt == BMI3_OK)
 80031ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d108      	bne.n	80031c6 <bmi3_soft_reset+0x8e>
        {
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO2, feature_data, 2, dev);
 80031b4:	f107 0118 	add.w	r1, r7, #24
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	2012      	movs	r0, #18
 80031be:	f7ff ff7b 	bl	80030b8 <bmi3_set_regs>
 80031c2:	4603      	mov	r3, r0
 80031c4:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 80031c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <bmi3_soft_reset+0xa8>
        {
            /* Enabling feature status bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_IO_STATUS, feature_io_status, 2, dev);
 80031ce:	f107 010c 	add.w	r1, r7, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	2014      	movs	r0, #20
 80031d8:	f7ff ff6e 	bl	80030b8 <bmi3_set_regs>
 80031dc:	4603      	mov	r3, r0
 80031de:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 80031e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d108      	bne.n	80031fa <bmi3_soft_reset+0xc2>
        {
            /* Enable feature engine bit */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_CTRL, feature_engine_en, 2, dev);
 80031e8:	f107 0114 	add.w	r1, r7, #20
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	2040      	movs	r0, #64	@ 0x40
 80031f2:	f7ff ff61 	bl	80030b8 <bmi3_set_regs>
 80031f6:	4603      	mov	r3, r0
 80031f8:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMI3_OK)
 80031fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d124      	bne.n	800324c <bmi3_soft_reset+0x114>
        {
            /* Checking the status bit for feature engine enable */
            while (loop <= 10)
 8003202:	e020      	b.n	8003246 <bmi3_soft_reset+0x10e>
            {
                dev->delay_us(100000, dev->intf_ptr);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6852      	ldr	r2, [r2, #4]
 800320c:	4611      	mov	r1, r2
 800320e:	4812      	ldr	r0, [pc, #72]	@ (8003258 <bmi3_soft_reset+0x120>)
 8003210:	4798      	blx	r3

                rslt = bmi3_get_regs(BMI3_REG_FEATURE_IO1, reg_data, 2, dev);
 8003212:	f107 0110 	add.w	r1, r7, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	2011      	movs	r0, #17
 800321c:	f7ff fee7 	bl	8002fee <bmi3_get_regs>
 8003220:	4603      	mov	r3, r0
 8003222:	77fb      	strb	r3, [r7, #31]

                if (rslt == BMI3_OK)
 8003224:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <bmi3_soft_reset+0x108>
                {
                    if (reg_data[0] & BMI3_FEATURE_ENGINE_ENABLE_MASK)
 800322c:	7c3b      	ldrb	r3, [r7, #16]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <bmi3_soft_reset+0x104>
                    {
                        rslt = BMI3_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	77fb      	strb	r3, [r7, #31]

                        break;
 800323a:	e007      	b.n	800324c <bmi3_soft_reset+0x114>
                    }
                    else
                    {
                        rslt = BMI3_E_FEATURE_ENGINE_STATUS;
 800323c:	23f2      	movs	r3, #242	@ 0xf2
 800323e:	77fb      	strb	r3, [r7, #31]
                    }
                }

                loop++;
 8003240:	7fbb      	ldrb	r3, [r7, #30]
 8003242:	3301      	adds	r3, #1
 8003244:	77bb      	strb	r3, [r7, #30]
            while (loop <= 10)
 8003246:	7fbb      	ldrb	r3, [r7, #30]
 8003248:	2b0a      	cmp	r3, #10
 800324a:	d9db      	bls.n	8003204 <bmi3_soft_reset+0xcc>
            }
        }
    }

    return rslt;
 800324c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	000186a0 	.word	0x000186a0

0800325c <bmi3_set_command_register>:

/*!
 * @brief This API writes the available sensor specific commands to the sensor.
 */
int8_t bmi3_set_command_register(uint16_t command, struct bmi3_dev *dev)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	80fb      	strh	r3, [r7, #6]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array variable to store command value */
    uint8_t reg_data[2] = { 0 };
 8003268:	2300      	movs	r3, #0
 800326a:	81bb      	strh	r3, [r7, #12]

    reg_data[0] = (uint8_t)(command & BMI3_SET_LOW_BYTE);
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	733b      	strb	r3, [r7, #12]
    reg_data[1] = (uint8_t)((command & BMI3_SET_HIGH_BYTE) >> 8);
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	b29b      	uxth	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	737b      	strb	r3, [r7, #13]

    /* Set the command in the command register */
    rslt = bmi3_set_regs(BMI3_REG_CMD, reg_data, 2, dev);
 800327c:	f107 010c 	add.w	r1, r7, #12
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	207e      	movs	r0, #126	@ 0x7e
 8003286:	f7ff ff17 	bl	80030b8 <bmi3_set_regs>
 800328a:	4603      	mov	r3, r0
 800328c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800328e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <bmi3_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi3_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	460b      	mov	r3, r1
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 ffaf 	bl	800420e <null_ptr_check>
 80032b0:	4603      	mov	r3, r0
 80032b2:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80032b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f040 80f1 	bne.w	80034a0 <bmi3_set_sensor_config+0x204>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80ed 	beq.w	80034a0 <bmi3_set_sensor_config+0x204>
    {
        for (loop = 0; loop < n_sens; loop++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	75bb      	strb	r3, [r7, #22]
 80032ca:	e0e3      	b.n	8003494 <bmi3_set_sensor_config+0x1f8>
        {
            switch (sens_cfg[loop].type)
 80032cc:	7dbb      	ldrb	r3, [r7, #22]
 80032ce:	222e      	movs	r2, #46	@ 0x2e
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	f200 80d4 	bhi.w	8003488 <bmi3_set_sensor_config+0x1ec>
 80032e0:	a201      	add	r2, pc, #4	@ (adr r2, 80032e8 <bmi3_set_sensor_config+0x4c>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	08003339 	.word	0x08003339
 80032f0:	0800338d 	.word	0x0800338d
 80032f4:	08003355 	.word	0x08003355
 80032f8:	08003371 	.word	0x08003371
 80032fc:	080033fd 	.word	0x080033fd
 8003300:	080033c5 	.word	0x080033c5
 8003304:	080033e1 	.word	0x080033e1
 8003308:	080033a9 	.word	0x080033a9
 800330c:	08003419 	.word	0x08003419
 8003310:	08003435 	.word	0x08003435
 8003314:	08003451 	.word	0x08003451
 8003318:	0800346d 	.word	0x0800346d
            {
                case BMI3_ACCEL:
                    rslt = set_accel_config(&sens_cfg[loop].cfg.acc, dev);
 800331c:	7dbb      	ldrb	r3, [r7, #22]
 800331e:	222e      	movs	r2, #46	@ 0x2e
 8003320:	fb02 f303 	mul.w	r3, r2, r3
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	3302      	adds	r3, #2
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 faa3 	bl	8003878 <set_accel_config>
 8003332:	4603      	mov	r3, r0
 8003334:	75fb      	strb	r3, [r7, #23]
                    break;
 8003336:	e0aa      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_GYRO:
                    rslt = set_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8003338:	7dbb      	ldrb	r3, [r7, #22]
 800333a:	222e      	movs	r2, #46	@ 0x2e
 800333c:	fb02 f303 	mul.w	r3, r2, r3
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	3302      	adds	r3, #2
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fc37 	bl	8003bbc <set_gyro_config>
 800334e:	4603      	mov	r3, r0
 8003350:	75fb      	strb	r3, [r7, #23]
                    break;
 8003352:	e09c      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ANY_MOTION:
                    rslt = set_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 8003354:	7dbb      	ldrb	r3, [r7, #22]
 8003356:	222e      	movs	r2, #46	@ 0x2e
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	3302      	adds	r3, #2
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	f001 f803 	bl	8004370 <set_any_motion_config>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]
                    break;
 800336e:	e08e      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_NO_MOTION:
                    rslt = set_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8003370:	7dbb      	ldrb	r3, [r7, #22]
 8003372:	222e      	movs	r2, #46	@ 0x2e
 8003374:	fb02 f303 	mul.w	r3, r2, r3
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	3302      	adds	r3, #2
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4618      	mov	r0, r3
 8003382:	f001 f95f 	bl	8004644 <set_no_motion_config>
 8003386:	4603      	mov	r3, r0
 8003388:	75fb      	strb	r3, [r7, #23]
                    break;
 800338a:	e080      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_SIG_MOTION:
                    rslt = set_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 800338c:	7dbb      	ldrb	r3, [r7, #22]
 800338e:	222e      	movs	r2, #46	@ 0x2e
 8003390:	fb02 f303 	mul.w	r3, r2, r3
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	3302      	adds	r3, #2
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4618      	mov	r0, r3
 800339e:	f001 fbad 	bl	8004afc <set_sig_motion_config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	75fb      	strb	r3, [r7, #23]
                    break;
 80033a6:	e072      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_FLAT:
                    rslt = set_flat_config(&sens_cfg[loop].cfg.flat, dev);
 80033a8:	7dbb      	ldrb	r3, [r7, #22]
 80033aa:	222e      	movs	r2, #46	@ 0x2e
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	3302      	adds	r3, #2
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fa91 	bl	80048e0 <set_flat_config>
 80033be:	4603      	mov	r3, r0
 80033c0:	75fb      	strb	r3, [r7, #23]
                    break;
 80033c2:	e064      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_TILT:
                    rslt = set_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 80033c4:	7dbb      	ldrb	r3, [r7, #22]
 80033c6:	222e      	movs	r2, #46	@ 0x2e
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	3302      	adds	r3, #2
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 fcbb 	bl	8004d50 <set_tilt_config>
 80033da:	4603      	mov	r3, r0
 80033dc:	75fb      	strb	r3, [r7, #23]
                    break;
 80033de:	e056      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ORIENTATION:
                    rslt = set_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 80033e0:	7dbb      	ldrb	r3, [r7, #22]
 80033e2:	222e      	movs	r2, #46	@ 0x2e
 80033e4:	fb02 f303 	mul.w	r3, r2, r3
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	3302      	adds	r3, #2
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 fd98 	bl	8004f26 <set_orientation_config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	75fb      	strb	r3, [r7, #23]
                    break;
 80033fa:	e048      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_STEP_COUNTER:
                    rslt = set_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 80033fc:	7dbb      	ldrb	r3, [r7, #22]
 80033fe:	222e      	movs	r2, #46	@ 0x2e
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	3302      	adds	r3, #2
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	f002 f84b 	bl	80054a8 <set_step_config>
 8003412:	4603      	mov	r3, r0
 8003414:	75fb      	strb	r3, [r7, #23]
                    break;
 8003416:	e03a      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_TAP:
                    rslt = set_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8003418:	7dbb      	ldrb	r3, [r7, #22]
 800341a:	222e      	movs	r2, #46	@ 0x2e
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	3302      	adds	r3, #2
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4618      	mov	r0, r3
 800342a:	f002 fb7d 	bl	8005b28 <set_tap_config>
 800342e:	4603      	mov	r3, r0
 8003430:	75fb      	strb	r3, [r7, #23]
                    break;
 8003432:	e02c      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_ACCEL:
                    rslt = set_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 8003434:	7dbb      	ldrb	r3, [r7, #22]
 8003436:	222e      	movs	r2, #46	@ 0x2e
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	3302      	adds	r3, #2
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	f002 fd69 	bl	8005f1c <set_alternate_accel_config>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]
                    break;
 800344e:	e01e      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_GYRO:
                    rslt = set_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8003450:	7dbb      	ldrb	r3, [r7, #22]
 8003452:	222e      	movs	r2, #46	@ 0x2e
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	3302      	adds	r3, #2
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4618      	mov	r0, r3
 8003462:	f002 fde4 	bl	800602e <set_alternate_gyro_config>
 8003466:	4603      	mov	r3, r0
 8003468:	75fb      	strb	r3, [r7, #23]
                    break;
 800346a:	e010      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = set_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 800346c:	7dbb      	ldrb	r3, [r7, #22]
 800346e:	222e      	movs	r2, #46	@ 0x2e
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	3302      	adds	r3, #2
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4618      	mov	r0, r3
 800347e:	f002 fe5f 	bl	8006140 <set_alternate_auto_config>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]
                    break;
 8003486:	e002      	b.n	800348e <bmi3_set_sensor_config+0x1f2>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8003488:	23fa      	movs	r3, #250	@ 0xfa
 800348a:	75fb      	strb	r3, [r7, #23]
                    break;
 800348c:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 800348e:	7dbb      	ldrb	r3, [r7, #22]
 8003490:	3301      	adds	r3, #1
 8003492:	75bb      	strb	r3, [r7, #22]
 8003494:	7dba      	ldrb	r2, [r7, #22]
 8003496:	7afb      	ldrb	r3, [r7, #11]
 8003498:	429a      	cmp	r2, r3
 800349a:	f4ff af17 	bcc.w	80032cc <bmi3_set_sensor_config+0x30>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 800349e:	e001      	b.n	80034a4 <bmi3_set_sensor_config+0x208>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80034a0:	23ff      	movs	r3, #255	@ 0xff
 80034a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80034a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <bmi3_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi3_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	460b      	mov	r3, r1
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to define loop */
    uint8_t loop = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fea3 	bl	800420e <null_ptr_check>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80034cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 80f1 	bne.w	80036b8 <bmi3_get_sensor_config+0x208>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80ed 	beq.w	80036b8 <bmi3_get_sensor_config+0x208>
    {
        for (loop = 0; loop < n_sens; loop++)
 80034de:	2300      	movs	r3, #0
 80034e0:	75bb      	strb	r3, [r7, #22]
 80034e2:	e0e3      	b.n	80036ac <bmi3_get_sensor_config+0x1fc>
        {
            switch (sens_cfg[loop].type)
 80034e4:	7dbb      	ldrb	r3, [r7, #22]
 80034e6:	222e      	movs	r2, #46	@ 0x2e
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	f200 80d4 	bhi.w	80036a0 <bmi3_get_sensor_config+0x1f0>
 80034f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <bmi3_get_sensor_config+0x50>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003535 	.word	0x08003535
 8003504:	08003551 	.word	0x08003551
 8003508:	080035a5 	.word	0x080035a5
 800350c:	0800356d 	.word	0x0800356d
 8003510:	08003589 	.word	0x08003589
 8003514:	08003615 	.word	0x08003615
 8003518:	080035dd 	.word	0x080035dd
 800351c:	080035f9 	.word	0x080035f9
 8003520:	080035c1 	.word	0x080035c1
 8003524:	08003631 	.word	0x08003631
 8003528:	0800364d 	.word	0x0800364d
 800352c:	08003669 	.word	0x08003669
 8003530:	08003685 	.word	0x08003685
            {
                case BMI3_ACCEL:
                    rslt = get_accel_config(&sens_cfg[loop].cfg.acc, dev);
 8003534:	7dbb      	ldrb	r3, [r7, #22]
 8003536:	222e      	movs	r2, #46	@ 0x2e
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	3302      	adds	r3, #2
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fa4d 	bl	80039e4 <get_accel_config>
 800354a:	4603      	mov	r3, r0
 800354c:	75fb      	strb	r3, [r7, #23]
                    break;
 800354e:	e0aa      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_GYRO:
                    rslt = get_gyro_config(&sens_cfg[loop].cfg.gyr, dev);
 8003550:	7dbb      	ldrb	r3, [r7, #22]
 8003552:	222e      	movs	r2, #46	@ 0x2e
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	3302      	adds	r3, #2
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fd73 	bl	800404c <get_gyro_config>
 8003566:	4603      	mov	r3, r0
 8003568:	75fb      	strb	r3, [r7, #23]
                    break;
 800356a:	e09c      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ANY_MOTION:
                    rslt = get_any_motion_config(&sens_cfg[loop].cfg.any_motion, dev);
 800356c:	7dbb      	ldrb	r3, [r7, #22]
 800356e:	222e      	movs	r2, #46	@ 0x2e
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	3302      	adds	r3, #2
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fe66 	bl	800424e <get_any_motion_config>
 8003582:	4603      	mov	r3, r0
 8003584:	75fb      	strb	r3, [r7, #23]
                    break;
 8003586:	e08e      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_NO_MOTION:
                    rslt = get_no_motion_config(&sens_cfg[loop].cfg.no_motion, dev);
 8003588:	7dbb      	ldrb	r3, [r7, #22]
 800358a:	222e      	movs	r2, #46	@ 0x2e
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	3302      	adds	r3, #2
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 ffc1 	bl	8004520 <get_no_motion_config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]
                    break;
 80035a2:	e080      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_SIG_MOTION:
                    rslt = get_sig_motion_config(&sens_cfg[loop].cfg.sig_motion, dev);
 80035a4:	7dbb      	ldrb	r3, [r7, #22]
 80035a6:	222e      	movs	r2, #46	@ 0x2e
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	3302      	adds	r3, #2
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fa17 	bl	80049e8 <get_sig_motion_config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]
                    break;
 80035be:	e072      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_FLAT:
                    rslt = get_flat_config(&sens_cfg[loop].cfg.flat, dev);
 80035c0:	7dbb      	ldrb	r3, [r7, #22]
 80035c2:	222e      	movs	r2, #46	@ 0x2e
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	3302      	adds	r3, #2
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 f90d 	bl	80047f0 <get_flat_config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	75fb      	strb	r3, [r7, #23]
                    break;
 80035da:	e064      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TILT:
                    rslt = get_tilt_config(&sens_cfg[loop].cfg.tilt, dev);
 80035dc:	7dbb      	ldrb	r3, [r7, #22]
 80035de:	222e      	movs	r2, #46	@ 0x2e
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	3302      	adds	r3, #2
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fb41 	bl	8004c74 <get_tilt_config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	75fb      	strb	r3, [r7, #23]
                    break;
 80035f6:	e056      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ORIENTATION:
                    rslt = get_orientation_config(&sens_cfg[loop].cfg.orientation, dev);
 80035f8:	7dbb      	ldrb	r3, [r7, #22]
 80035fa:	222e      	movs	r2, #46	@ 0x2e
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	3302      	adds	r3, #2
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fc02 	bl	8004e12 <get_orientation_config>
 800360e:	4603      	mov	r3, r0
 8003610:	75fb      	strb	r3, [r7, #23]
                    break;
 8003612:	e048      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_config(&sens_cfg[loop].cfg.step_counter, dev);
 8003614:	7dbb      	ldrb	r3, [r7, #22]
 8003616:	222e      	movs	r2, #46	@ 0x2e
 8003618:	fb02 f303 	mul.w	r3, r2, r3
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	3302      	adds	r3, #2
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fd37 	bl	8005098 <get_step_config>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]
                    break;
 800362e:	e03a      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_TAP:
                    rslt = get_tap_config(&sens_cfg[loop].cfg.tap, dev);
 8003630:	7dbb      	ldrb	r3, [r7, #22]
 8003632:	222e      	movs	r2, #46	@ 0x2e
 8003634:	fb02 f303 	mul.w	r3, r2, r3
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	3302      	adds	r3, #2
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f002 f9b3 	bl	80059ac <get_tap_config>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]
                    break;
 800364a:	e02c      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_ACCEL:
                    rslt = get_alternate_accel_config(&sens_cfg[loop].cfg.alt_acc, dev);
 800364c:	7dbb      	ldrb	r3, [r7, #22]
 800364e:	222e      	movs	r2, #46	@ 0x2e
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	3302      	adds	r3, #2
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	f002 fcaa 	bl	8005fb6 <get_alternate_accel_config>
 8003662:	4603      	mov	r3, r0
 8003664:	75fb      	strb	r3, [r7, #23]
                    break;
 8003666:	e01e      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_GYRO:
                    rslt = get_alternate_gyro_config(&sens_cfg[loop].cfg.alt_gyr, dev);
 8003668:	7dbb      	ldrb	r3, [r7, #22]
 800366a:	222e      	movs	r2, #46	@ 0x2e
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	3302      	adds	r3, #2
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	f002 fd25 	bl	80060c8 <get_alternate_gyro_config>
 800367e:	4603      	mov	r3, r0
 8003680:	75fb      	strb	r3, [r7, #23]
                    break;
 8003682:	e010      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                case BMI3_ALT_AUTO_CONFIG:
                    rslt = get_alternate_auto_config(&sens_cfg[loop].cfg.alt_auto_cfg, dev);
 8003684:	7dbb      	ldrb	r3, [r7, #22]
 8003686:	222e      	movs	r2, #46	@ 0x2e
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	3302      	adds	r3, #2
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	f002 fd9d 	bl	80061d4 <get_alternate_auto_config>
 800369a:	4603      	mov	r3, r0
 800369c:	75fb      	strb	r3, [r7, #23]
                    break;
 800369e:	e002      	b.n	80036a6 <bmi3_get_sensor_config+0x1f6>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 80036a0:	23fa      	movs	r3, #250	@ 0xfa
 80036a2:	75fb      	strb	r3, [r7, #23]
                    break;
 80036a4:	bf00      	nop
        for (loop = 0; loop < n_sens; loop++)
 80036a6:	7dbb      	ldrb	r3, [r7, #22]
 80036a8:	3301      	adds	r3, #1
 80036aa:	75bb      	strb	r3, [r7, #22]
 80036ac:	7dba      	ldrb	r2, [r7, #22]
 80036ae:	7afb      	ldrb	r3, [r7, #11]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f4ff af17 	bcc.w	80034e4 <bmi3_get_sensor_config+0x34>
    if ((rslt == BMI3_OK) && (sens_cfg != NULL))
 80036b6:	e001      	b.n	80036bc <bmi3_get_sensor_config+0x20c>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80036b8:	23ff      	movs	r3, #255	@ 0xff
 80036ba:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80036bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <bmi3_get_sensor_data>:
/*!
 * @brief This API gets the sensor/feature data for accelerometer, gyroscope,
 * step counter, orientation, i3c sync accel, i3c sync gyro and i3c sync temperature.
 */
int8_t bmi3_get_sensor_data(struct bmi3_sensor_data *sensor_data, uint8_t n_sens, struct bmi3_dev *dev)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	460b      	mov	r3, r1
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	72fb      	strb	r3, [r7, #11]

    /* Variable to define loop */
    uint8_t loop;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fd99 	bl	800420e <null_ptr_check>
 80036dc:	4603      	mov	r3, r0
 80036de:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 80036e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 80bf 	bne.w	8003868 <bmi3_get_sensor_data+0x1a0>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80bb 	beq.w	8003868 <bmi3_get_sensor_data+0x1a0>
    {
        for (loop = 0; loop < n_sens; loop++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	75bb      	strb	r3, [r7, #22]
 80036f6:	e0af      	b.n	8003858 <bmi3_get_sensor_data+0x190>
        {
            switch (sensor_data[loop].type)
 80036f8:	7dba      	ldrb	r2, [r7, #22]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b10      	cmp	r3, #16
 800370c:	f200 809a 	bhi.w	8003844 <bmi3_get_sensor_data+0x17c>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <bmi3_get_sensor_data+0x50>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800375d 	.word	0x0800375d
 800371c:	0800377f 	.word	0x0800377f
 8003720:	08003845 	.word	0x08003845
 8003724:	08003845 	.word	0x08003845
 8003728:	08003845 	.word	0x08003845
 800372c:	080037a1 	.word	0x080037a1
 8003730:	08003845 	.word	0x08003845
 8003734:	080037c3 	.word	0x080037c3
 8003738:	08003845 	.word	0x08003845
 800373c:	08003845 	.word	0x08003845
 8003740:	08003845 	.word	0x08003845
 8003744:	08003845 	.word	0x08003845
 8003748:	08003845 	.word	0x08003845
 800374c:	08003845 	.word	0x08003845
 8003750:	080037e5 	.word	0x080037e5
 8003754:	08003805 	.word	0x08003805
 8003758:	08003825 	.word	0x08003825
            {
                case BMI3_ACCEL:
                    rslt = get_accel_sensor_data(&sensor_data[loop].sens_data.acc, BMI3_REG_ACC_DATA_X, dev);
 800375c:	7dba      	ldrb	r2, [r7, #22]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	2103      	movs	r1, #3
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fb2a 	bl	8003dcc <get_accel_sensor_data>
 8003778:	4603      	mov	r3, r0
 800377a:	75fb      	strb	r3, [r7, #23]
                    break;
 800377c:	e065      	b.n	800384a <bmi3_get_sensor_data+0x182>

                case BMI3_GYRO:
                    rslt = get_gyro_sensor_data(&sensor_data[loop].sens_data.gyr, BMI3_REG_GYR_DATA_X, dev);
 800377e:	7dba      	ldrb	r2, [r7, #22]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	461a      	mov	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	2106      	movs	r1, #6
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fb84 	bl	8003ea2 <get_gyro_sensor_data>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]
                    break;
 800379e:	e054      	b.n	800384a <bmi3_get_sensor_data+0x182>

                case BMI3_STEP_COUNTER:
                    rslt = get_step_counter_sensor_data(&sensor_data[loop].sens_data.step_counter_output,
 80037a0:	7dba      	ldrb	r2, [r7, #22]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	3304      	adds	r3, #4
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	2112      	movs	r1, #18
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fbdd 	bl	8003f76 <get_step_counter_sensor_data>
 80037bc:	4603      	mov	r3, r0
 80037be:	75fb      	strb	r3, [r7, #23]
                                                        BMI3_REG_FEATURE_IO2,
                                                        dev);
                    break;
 80037c0:	e043      	b.n	800384a <bmi3_get_sensor_data+0x182>

                case BMI3_ORIENTATION:
                    rslt = get_orient_output_data(&sensor_data[loop].sens_data.orient_output,
 80037c2:	7dba      	ldrb	r2, [r7, #22]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	461a      	mov	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	2147      	movs	r1, #71	@ 0x47
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fc07 	bl	8003fec <get_orient_output_data>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]
                                                  BMI3_REG_FEATURE_EVENT_EXT,
                                                  dev);
                    break;
 80037e2:	e032      	b.n	800384a <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_ACCEL:
                    rslt = get_i3c_sync_accel_sensor_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 80037e4:	7dba      	ldrb	r2, [r7, #22]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 fa97 	bl	8005d2c <get_i3c_sync_accel_sensor_data>
 80037fe:	4603      	mov	r3, r0
 8003800:	75fb      	strb	r3, [r7, #23]
                    break;
 8003802:	e022      	b.n	800384a <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_GYRO:
                    rslt = get_i3c_sync_gyro_sensor_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 8003804:	7dba      	ldrb	r2, [r7, #22]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4618      	mov	r0, r3
 800381a:	f002 fae0 	bl	8005dde <get_i3c_sync_gyro_sensor_data>
 800381e:	4603      	mov	r3, r0
 8003820:	75fb      	strb	r3, [r7, #23]
                    break;
 8003822:	e012      	b.n	800384a <bmi3_get_sensor_data+0x182>

                case BMI3_I3C_SYNC_TEMP:
                    rslt = get_i3c_sync_temp_data(&sensor_data[loop].sens_data.i3c_sync, dev);
 8003824:	7dba      	ldrb	r2, [r7, #22]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	f002 fb2c 	bl	8005e96 <get_i3c_sync_temp_data>
 800383e:	4603      	mov	r3, r0
 8003840:	75fb      	strb	r3, [r7, #23]
                    break;
 8003842:	e002      	b.n	800384a <bmi3_get_sensor_data+0x182>

                default:
                    rslt = BMI3_E_INVALID_SENSOR;
 8003844:	23fa      	movs	r3, #250	@ 0xfa
 8003846:	75fb      	strb	r3, [r7, #23]
                    break;
 8003848:	bf00      	nop
            }

            /* Return error if any of the get sensor data fails */
            if (rslt != BMI3_OK)
 800384a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <bmi3_get_sensor_data+0x19c>
        for (loop = 0; loop < n_sens; loop++)
 8003852:	7dbb      	ldrb	r3, [r7, #22]
 8003854:	3301      	adds	r3, #1
 8003856:	75bb      	strb	r3, [r7, #22]
 8003858:	7dba      	ldrb	r2, [r7, #22]
 800385a:	7afb      	ldrb	r3, [r7, #11]
 800385c:	429a      	cmp	r2, r3
 800385e:	f4ff af4b 	bcc.w	80036f8 <bmi3_get_sensor_data+0x30>
    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 8003862:	e003      	b.n	800386c <bmi3_get_sensor_data+0x1a4>
            {
                break;
 8003864:	bf00      	nop
    if ((rslt == BMI3_OK) && (sensor_data != NULL))
 8003866:	e001      	b.n	800386c <bmi3_get_sensor_data+0x1a4>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003868:	23ff      	movs	r3, #255	@ 0xff
 800386a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800386c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <set_accel_config>:
/*!
 * @brief This internal API sets accelerometer configurations like ODR, accel mode,
 * bandwidth, average samples and range.
 */
static int8_t set_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003882:	2300      	movs	r3, #0
 8003884:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, acc_mode;

    if (config != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a3 	beq.w	80039d4 <set_accel_config+0x15c>
    {
        /* Validate bandwidth and averaging samples */
        rslt = validate_bw_avg_acc_mode(&config->bwp, &config->acc_mode, &config->avg_num, dev);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	1c58      	adds	r0, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	1c99      	adds	r1, r3, #2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	1d1a      	adds	r2, r3, #4
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f000 f8ee 	bl	8003a7c <validate_bw_avg_acc_mode>
 80038a0:	4603      	mov	r3, r0
 80038a2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 80038a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d108      	bne.n	80038be <set_accel_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_acc_odr_range(&config->odr, &config->range, dev);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3303      	adds	r3, #3
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	f000 f91c 	bl	8003af2 <validate_acc_odr_range>
 80038ba:	4603      	mov	r3, r0
 80038bc:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 80038be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11f      	bne.n	8003906 <set_accel_config+0x8e>
        {
            if (config->acc_mode == BMI3_ACC_MODE_LOW_PWR)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	789b      	ldrb	r3, [r3, #2]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d109      	bne.n	80038e2 <set_accel_config+0x6a>
            {
                rslt = validate_acc_odr_avg(config->odr, config->avg_num);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	791b      	ldrb	r3, [r3, #4]
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f002 fcb5 	bl	8006248 <validate_acc_odr_avg>
 80038de:	4603      	mov	r3, r0
 80038e0:	75fb      	strb	r3, [r7, #23]
            }

            if ((config->acc_mode == BMI3_ACC_MODE_NORMAL) || (config->acc_mode == BMI3_ACC_MODE_HIGH_PERF))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	789b      	ldrb	r3, [r3, #2]
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d003      	beq.n	80038f2 <set_accel_config+0x7a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	789b      	ldrb	r3, [r3, #2]
 80038ee:	2b07      	cmp	r3, #7
 80038f0:	d109      	bne.n	8003906 <set_accel_config+0x8e>
            {
                if ((config->odr >= BMI3_ACC_ODR_0_78HZ) && (config->odr <= BMI3_ACC_ODR_6_25HZ))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <set_accel_config+0x8e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d801      	bhi.n	8003906 <set_accel_config+0x8e>
                {
                    rslt = BMI3_E_ACC_INVALID_CFG;
 8003902:	23fc      	movs	r3, #252	@ 0xfc
 8003904:	75fb      	strb	r3, [r7, #23]
                }
            }
        }

        if (rslt == BMI3_OK)
 8003906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d15f      	bne.n	80039ce <set_accel_config+0x156>
        {
            /* Set accelerometer ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ACC_ODR, config->odr);
 800390e:	7a3b      	ldrb	r3, [r7, #8]
 8003910:	b21b      	sxth	r3, r3
 8003912:	f023 030f 	bic.w	r3, r3, #15
 8003916:	b21a      	sxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b21b      	sxth	r3, r3
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	b21b      	sxth	r3, r3
 8003924:	4313      	orrs	r3, r2
 8003926:	b21b      	sxth	r3, r3
 8003928:	82bb      	strh	r3, [r7, #20]

            /* Set accelerometer range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_ACC_RANGE, config->range);
 800392a:	7a3b      	ldrb	r3, [r7, #8]
 800392c:	b21b      	sxth	r3, r3
 800392e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003932:	b21a      	sxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	78db      	ldrb	r3, [r3, #3]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	b21b      	sxth	r3, r3
 800393c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003940:	b21b      	sxth	r3, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	b21b      	sxth	r3, r3
 8003946:	827b      	strh	r3, [r7, #18]

            /* Set accelerometer bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_ACC_BW, config->bwp);
 8003948:	7a3b      	ldrb	r3, [r7, #8]
 800394a:	b21b      	sxth	r3, r3
 800394c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003950:	b21a      	sxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	785b      	ldrb	r3, [r3, #1]
 8003956:	01db      	lsls	r3, r3, #7
 8003958:	b21b      	sxth	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	b21b      	sxth	r3, r3
 800395e:	4313      	orrs	r3, r2
 8003960:	b21b      	sxth	r3, r3
 8003962:	823b      	strh	r3, [r7, #16]

            /* Set accelerometer average number of samples */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ACC_AVG_NUM, config->avg_num);
 8003964:	7a7b      	ldrb	r3, [r7, #9]
 8003966:	b21a      	sxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	791b      	ldrb	r3, [r3, #4]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	b21b      	sxth	r3, r3
 8003970:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003974:	b21b      	sxth	r3, r3
 8003976:	4313      	orrs	r3, r2
 8003978:	b21b      	sxth	r3, r3
 800397a:	81fb      	strh	r3, [r7, #14]

            /* Set accelerometer accel mode */
            acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ACC_MODE, config->acc_mode);
 800397c:	7a7b      	ldrb	r3, [r7, #9]
 800397e:	b21a      	sxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	789b      	ldrb	r3, [r3, #2]
 8003984:	031b      	lsls	r3, r3, #12
 8003986:	b21b      	sxth	r3, r3
 8003988:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800398c:	b21b      	sxth	r3, r3
 800398e:	4313      	orrs	r3, r2
 8003990:	b21b      	sxth	r3, r3
 8003992:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8003994:	8abb      	ldrh	r3, [r7, #20]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	8a7b      	ldrh	r3, [r7, #18]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	4313      	orrs	r3, r2
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	8a3b      	ldrh	r3, [r7, #16]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	4313      	orrs	r3, r2
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | acc_mode) >> 8);
 80039aa:	89fa      	ldrh	r2, [r7, #14]
 80039ac:	89bb      	ldrh	r3, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	727b      	strb	r3, [r7, #9]

            /* Set configurations for accel */
            rslt = bmi3_set_regs(BMI3_REG_ACC_CONF, reg_data, 2, dev);
 80039ba:	f107 0108 	add.w	r1, r7, #8
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2202      	movs	r2, #2
 80039c2:	2020      	movs	r0, #32
 80039c4:	f7ff fb78 	bl	80030b8 <bmi3_set_regs>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]
 80039cc:	e004      	b.n	80039d8 <set_accel_config+0x160>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 80039ce:	23fc      	movs	r3, #252	@ 0xfc
 80039d0:	75fb      	strb	r3, [r7, #23]
 80039d2:	e001      	b.n	80039d8 <set_accel_config+0x160>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80039d4:	23ff      	movs	r3, #255	@ 0xff
 80039d6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80039d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <get_accel_config>:
/*!
 * @brief This internal API gets accelerometer configurations like ODR,
 * bandwidth, accel mode, average samples and gravity range.
 */
static int8_t get_accel_config(struct bmi3_accel_config *config, struct bmi3_dev *dev)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80039ee:	2300      	movs	r3, #0
 80039f0:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d039      	beq.n	8003a6c <get_accel_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ACC_CONF, data_array, 2, dev);
 80039f8:	f107 0108 	add.w	r1, r7, #8
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2202      	movs	r2, #2
 8003a00:	2020      	movs	r0, #32
 8003a02:	f7ff faf4 	bl	8002fee <bmi3_get_regs>
 8003a06:	4603      	mov	r3, r0
 8003a08:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d12e      	bne.n	8003a70 <get_accel_config+0x8c>
        {
            reg_data = data_array[0];
 8003a12:	7a3b      	ldrb	r3, [r7, #8]
 8003a14:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ACC_ODR);
 8003a16:	89bb      	ldrh	r3, [r7, #12]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	701a      	strb	r2, [r3, #0]

            /* Get accelerometer range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_ACC_RANGE);
 8003a24:	89bb      	ldrh	r3, [r7, #12]
 8003a26:	111b      	asrs	r3, r3, #4
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	70da      	strb	r2, [r3, #3]

            /* Get accelerometer bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_ACC_BW);
 8003a34:	89bb      	ldrh	r3, [r7, #12]
 8003a36:	11db      	asrs	r3, r3, #7
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 8003a44:	7a7b      	ldrb	r3, [r7, #9]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	81bb      	strh	r3, [r7, #12]

            /* Get accelerometer average samples */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_ACC_AVG_NUM);
 8003a4a:	89bb      	ldrh	r3, [r7, #12]
 8003a4c:	121b      	asrs	r3, r3, #8
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	711a      	strb	r2, [r3, #4]

            /* Get accel mode */
            config->acc_mode = BMI3_GET_BITS(reg_data, BMI3_ACC_MODE);
 8003a5a:	89bb      	ldrh	r3, [r7, #12]
 8003a5c:	131b      	asrs	r3, r3, #12
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	709a      	strb	r2, [r3, #2]
 8003a6a:	e001      	b.n	8003a70 <get_accel_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003a6c:	23ff      	movs	r3, #255	@ 0xff
 8003a6e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <validate_bw_avg_acc_mode>:
/*!
 * @brief This internal API validates bandwidth and accel mode of the
 * accelerometer set by the user.
 */
static int8_t validate_bw_avg_acc_mode(uint8_t *bandwidth, uint8_t *acc_mode, uint8_t *avg_num, struct bmi3_dev *dev)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (acc_mode != NULL) && (avg_num != NULL))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d026      	beq.n	8003ade <validate_bw_avg_acc_mode+0x62>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d023      	beq.n	8003ade <validate_bw_avg_acc_mode+0x62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <validate_bw_avg_acc_mode+0x62>
    {
        /* Validate and auto-correct accel mode */
        rslt = check_boundary_val(acc_mode, BMI3_ACC_MODE_DISABLE, BMI3_ACC_MODE_HIGH_PERF, dev);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2207      	movs	r2, #7
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	68b8      	ldr	r0, [r7, #8]
 8003aa4:	f000 f84e 	bl	8003b44 <check_boundary_val>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003aac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d117      	bne.n	8003ae4 <validate_bw_avg_acc_mode+0x68>
        {
            /* Validate for averaging number of samples */
            rslt = check_boundary_val(avg_num, BMI3_ACC_AVG1, BMI3_ACC_AVG64, dev);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2206      	movs	r2, #6
 8003ab8:	2100      	movs	r1, #0
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f842 	bl	8003b44 <check_boundary_val>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8003ac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <validate_bw_avg_acc_mode+0x68>
            {
                /* Validate bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_ACC_BW_ODR_HALF, BMI3_ACC_BW_ODR_QUARTER, dev);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f836 	bl	8003b44 <check_boundary_val>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8003adc:	e002      	b.n	8003ae4 <validate_bw_avg_acc_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003ade:	23ff      	movs	r3, #255	@ 0xff
 8003ae0:	75fb      	strb	r3, [r7, #23]
 8003ae2:	e000      	b.n	8003ae6 <validate_bw_avg_acc_mode+0x6a>
        if (rslt == BMI3_OK)
 8003ae4:	bf00      	nop
    }

    return rslt;
 8003ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <validate_acc_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the accelerometer set by
 * the user.
 */
static int8_t validate_acc_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d017      	beq.n	8003b34 <validate_acc_odr_range+0x42>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d014      	beq.n	8003b34 <validate_acc_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_ACC_ODR_0_78HZ, BMI3_ACC_ODR_6400HZ, dev);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	220e      	movs	r2, #14
 8003b0e:	2101      	movs	r1, #1
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f817 	bl	8003b44 <check_boundary_val>
 8003b16:	4603      	mov	r3, r0
 8003b18:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <validate_acc_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_ACC_RANGE_2G, BMI3_ACC_RANGE_16G, dev);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2203      	movs	r2, #3
 8003b26:	2100      	movs	r1, #0
 8003b28:	68b8      	ldr	r0, [r7, #8]
 8003b2a:	f000 f80b 	bl	8003b44 <check_boundary_val>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8003b32:	e001      	b.n	8003b38 <validate_acc_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003b34:	23ff      	movs	r3, #255	@ 0xff
 8003b36:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <check_boundary_val>:

/*!
 * @brief This internal API is used to validate the boundary conditions.
 */
static int8_t check_boundary_val(uint8_t *val, uint8_t min, uint8_t max, struct bmi3_dev *dev)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	72fb      	strb	r3, [r7, #11]
 8003b52:	4613      	mov	r3, r2
 8003b54:	72bb      	strb	r3, [r7, #10]
    /* Variable to store result of API */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fb59 	bl	800420e <null_ptr_check>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMI3_OK) && (val != NULL))
 8003b60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d121      	bne.n	8003bac <check_boundary_val+0x68>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01e      	beq.n	8003bac <check_boundary_val+0x68>
    {
        /* Check if value is below minimum value */
        if (*val < min)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	7afa      	ldrb	r2, [r7, #11]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d909      	bls.n	8003b8c <check_boundary_val+0x48>
        {
            /* Auto correct the invalid value to minimum value */
            *val = min;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	7afa      	ldrb	r2, [r7, #11]
 8003b7c:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MIN_VALUE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7a1b      	ldrb	r3, [r3, #8]
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	721a      	strb	r2, [r3, #8]
        }

        /* Check if value is above maximum value */
        if (*val > max)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	7aba      	ldrb	r2, [r7, #10]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d20c      	bcs.n	8003bb0 <check_boundary_val+0x6c>
        {
            /* Auto correct the invalid value to maximum value */
            *val = max;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	7aba      	ldrb	r2, [r7, #10]
 8003b9a:	701a      	strb	r2, [r3, #0]
            dev->info |= BMI3_I_MAX_VALUE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7a1b      	ldrb	r3, [r3, #8]
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	721a      	strb	r2, [r3, #8]
        if (*val > max)
 8003baa:	e001      	b.n	8003bb0 <check_boundary_val+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003bac:	23ff      	movs	r3, #255	@ 0xff
 8003bae:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <set_gyro_config>:
/*!
 * @brief This internal API sets gyroscope configurations like ODR,
 * bandwidth, gyro mode, average samples and dps range.
 */
static int8_t set_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	813b      	strh	r3, [r7, #8]

    uint16_t odr, range, bwp, avg_num, gyr_mode;

    if (config != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8091 	beq.w	8003cf4 <set_gyro_config+0x138>
    {
        /* Validate bandwidth, average samples and mode */
        rslt = validate_bw_avg_gyr_mode(&config->bwp, &config->gyr_mode, &config->avg_num, dev);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	1c58      	adds	r0, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	1c99      	adds	r1, r3, #2
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	1d1a      	adds	r2, r3, #4
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f000 f890 	bl	8003d04 <validate_bw_avg_gyr_mode>
 8003be4:	4603      	mov	r3, r0
 8003be6:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d108      	bne.n	8003c02 <set_gyro_config+0x46>
        {
            /* Validate ODR and range */
            rslt = validate_gyr_odr_range(&config->odr, &config->range, dev);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3303      	adds	r3, #3
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f000 f8be 	bl	8003d7a <validate_gyr_odr_range>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMI3_OK)
 8003c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10d      	bne.n	8003c26 <set_gyro_config+0x6a>
        {
            if (config->gyr_mode == BMI3_GYR_MODE_LOW_PWR)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	789b      	ldrb	r3, [r3, #2]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d109      	bne.n	8003c26 <set_gyro_config+0x6a>
            {
                rslt = validate_gyr_odr_avg(config->odr, config->avg_num);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	791b      	ldrb	r3, [r3, #4]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f002 fbf1 	bl	8006404 <validate_gyr_odr_avg>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]
            }
        }

        if (rslt == BMI3_OK)
 8003c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d15f      	bne.n	8003cee <set_gyro_config+0x132>
        {
            /* Set gyroscope ODR */
            odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_GYR_ODR, config->odr);
 8003c2e:	7a3b      	ldrb	r3, [r7, #8]
 8003c30:	b21b      	sxth	r3, r3
 8003c32:	f023 030f 	bic.w	r3, r3, #15
 8003c36:	b21a      	sxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	82bb      	strh	r3, [r7, #20]

            /* Set gyroscope range */
            range = BMI3_SET_BITS(reg_data[0], BMI3_GYR_RANGE, config->range);
 8003c4a:	7a3b      	ldrb	r3, [r7, #8]
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c52:	b21a      	sxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	78db      	ldrb	r3, [r3, #3]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	827b      	strh	r3, [r7, #18]

            /* Set gyroscope bandwidth */
            bwp = BMI3_SET_BITS(reg_data[0], BMI3_GYR_BW, config->bwp);
 8003c68:	7a3b      	ldrb	r3, [r7, #8]
 8003c6a:	b21b      	sxth	r3, r3
 8003c6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c70:	b21a      	sxth	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	01db      	lsls	r3, r3, #7
 8003c78:	b21b      	sxth	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	b21b      	sxth	r3, r3
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	b21b      	sxth	r3, r3
 8003c82:	823b      	strh	r3, [r7, #16]

            /* Set gyroscope average sample */
            avg_num = BMI3_SET_BITS(reg_data[1], BMI3_GYR_AVG_NUM, config->avg_num);
 8003c84:	7a7b      	ldrb	r3, [r7, #9]
 8003c86:	b21a      	sxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	791b      	ldrb	r3, [r3, #4]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	b21b      	sxth	r3, r3
 8003c90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b21b      	sxth	r3, r3
 8003c9a:	81fb      	strh	r3, [r7, #14]

            /* Set gyroscope mode */
            gyr_mode = BMI3_SET_BITS(reg_data[1], BMI3_GYR_MODE, config->gyr_mode);
 8003c9c:	7a7b      	ldrb	r3, [r7, #9]
 8003c9e:	b21a      	sxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	789b      	ldrb	r3, [r3, #2]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	b21b      	sxth	r3, r3
 8003ca8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	81bb      	strh	r3, [r7, #12]

            reg_data[0] = (uint8_t)(odr | range | bwp);
 8003cb4:	8abb      	ldrh	r3, [r7, #20]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	8a7b      	ldrh	r3, [r7, #18]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	8a3b      	ldrh	r3, [r7, #16]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	723b      	strb	r3, [r7, #8]
            reg_data[1] = (uint8_t)((avg_num | gyr_mode) >> 8);
 8003cca:	89fa      	ldrh	r2, [r7, #14]
 8003ccc:	89bb      	ldrh	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	727b      	strb	r3, [r7, #9]

            /* Set gyro configurations */
            rslt = bmi3_set_regs(BMI3_REG_GYR_CONF, reg_data, 2, dev);
 8003cda:	f107 0108 	add.w	r1, r7, #8
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	2021      	movs	r0, #33	@ 0x21
 8003ce4:	f7ff f9e8 	bl	80030b8 <bmi3_set_regs>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	75fb      	strb	r3, [r7, #23]
 8003cec:	e004      	b.n	8003cf8 <set_gyro_config+0x13c>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 8003cee:	23fb      	movs	r3, #251	@ 0xfb
 8003cf0:	75fb      	strb	r3, [r7, #23]
 8003cf2:	e001      	b.n	8003cf8 <set_gyro_config+0x13c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003cf4:	23ff      	movs	r3, #255	@ 0xff
 8003cf6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <validate_bw_avg_gyr_mode>:
 */
static int8_t validate_bw_avg_gyr_mode(uint8_t *bandwidth,
                                       uint8_t *gyr_mode,
                                       const uint8_t *avg_num,
                                       struct bmi3_dev *dev)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    if ((bandwidth != NULL) && (gyr_mode != NULL) && (avg_num != NULL))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d026      	beq.n	8003d66 <validate_bw_avg_gyr_mode+0x62>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d023      	beq.n	8003d66 <validate_bw_avg_gyr_mode+0x62>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <validate_bw_avg_gyr_mode+0x62>
    {
        /* Validate and auto-correct gyro mode */
        rslt = check_boundary_val(gyr_mode, BMI3_GYR_MODE_DISABLE, BMI3_GYR_MODE_HIGH_PERF, dev);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2207      	movs	r2, #7
 8003d28:	2100      	movs	r1, #0
 8003d2a:	68b8      	ldr	r0, [r7, #8]
 8003d2c:	f7ff ff0a 	bl	8003b44 <check_boundary_val>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d117      	bne.n	8003d6c <validate_bw_avg_gyr_mode+0x68>
        {
            /* Validate for averaging mode */
            rslt = check_boundary_val(bandwidth, BMI3_GYR_AVG1, BMI3_GYR_AVG64, dev);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2206      	movs	r2, #6
 8003d40:	2100      	movs	r1, #0
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff fefe 	bl	8003b44 <check_boundary_val>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8003d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <validate_bw_avg_gyr_mode+0x68>
            {
                /* Validate for bandwidth */
                rslt = check_boundary_val(bandwidth, BMI3_GYR_BW_ODR_HALF, BMI3_GYR_BW_ODR_QUARTER, dev);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2201      	movs	r2, #1
 8003d58:	2100      	movs	r1, #0
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff fef2 	bl	8003b44 <check_boundary_val>
 8003d60:	4603      	mov	r3, r0
 8003d62:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8003d64:	e002      	b.n	8003d6c <validate_bw_avg_gyr_mode+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003d66:	23ff      	movs	r3, #255	@ 0xff
 8003d68:	75fb      	strb	r3, [r7, #23]
 8003d6a:	e000      	b.n	8003d6e <validate_bw_avg_gyr_mode+0x6a>
        if (rslt == BMI3_OK)
 8003d6c:	bf00      	nop
    }

    return rslt;
 8003d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <validate_gyr_odr_range>:
/*!
 * @brief This internal API validates ODR and range of the gyroscope set by
 * the user.
 */
static int8_t validate_gyr_odr_range(uint8_t *odr, uint8_t *range, struct bmi3_dev *dev)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
    /* Variable to store result of API */
    int8_t rslt;

    if ((odr != NULL) && (range != NULL))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <validate_gyr_odr_range+0x42>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d014      	beq.n	8003dbc <validate_gyr_odr_range+0x42>
    {
        /* Validate and auto correct ODR */
        rslt = check_boundary_val(odr, BMI3_GYR_ODR_0_78HZ, BMI3_GYR_ODR_6400HZ, dev);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	220e      	movs	r2, #14
 8003d96:	2101      	movs	r1, #1
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff fed3 	bl	8003b44 <check_boundary_val>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <validate_gyr_odr_range+0x46>
        {
            /* Validate and auto correct Range */
            rslt = check_boundary_val(range, BMI3_GYR_RANGE_125DPS, BMI3_GYR_RANGE_2000DPS, dev);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2204      	movs	r2, #4
 8003dae:	2100      	movs	r1, #0
 8003db0:	68b8      	ldr	r0, [r7, #8]
 8003db2:	f7ff fec7 	bl	8003b44 <check_boundary_val>
 8003db6:	4603      	mov	r3, r0
 8003db8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI3_OK)
 8003dba:	e001      	b.n	8003dc0 <validate_gyr_odr_range+0x46>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003dbc:	23ff      	movs	r3, #255	@ 0xff
 8003dbe:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003dc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <get_accel_sensor_data>:

/*!
 * @brief This internal API gets the accelerometer data from the register.
 */
int8_t get_accel_sensor_data(struct bmi3_sens_axes_data *data, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08e      	sub	sp, #56	@ 0x38
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_ACC_NUM_BYTES] = { 0 };
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
 8003dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]

    /* Stores the accel x, y and z axis data from register */
    uint16_t acc_data[6];

    if (data != NULL)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d04e      	beq.n	8003e90 <get_accel_sensor_data+0xc4>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, BMI3_ACC_NUM_BYTES, dev);
 8003df2:	f107 0120 	add.w	r1, r7, #32
 8003df6:	7af8      	ldrb	r0, [r7, #11]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2214      	movs	r2, #20
 8003dfc:	f7ff f8f7 	bl	8002fee <bmi3_get_regs>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8003e06:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d143      	bne.n	8003e96 <get_accel_sensor_data+0xca>
        {
            acc_data[0] = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8003e0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b21b      	sxth	r3, r3
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	82bb      	strh	r3, [r7, #20]
            acc_data[1] = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8003e24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003e28:	b21a      	sxth	r2, r3
 8003e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	4313      	orrs	r3, r2
 8003e34:	b21b      	sxth	r3, r3
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	82fb      	strh	r3, [r7, #22]
            acc_data[2] = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8003e3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e3e:	b21a      	sxth	r2, r3
 8003e40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	b21b      	sxth	r3, r3
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	b21b      	sxth	r3, r3
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	833b      	strh	r3, [r7, #24]
            acc_data[3] = (reg_data[14] | (uint16_t)reg_data[15] << 8);
 8003e50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e54:	b21a      	sxth	r2, r3
 8003e56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	b21b      	sxth	r3, r3
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	837b      	strh	r3, [r7, #26]
            acc_data[4] = (reg_data[16] | (uint16_t)reg_data[17] << 8);
 8003e66:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003e6a:	b21a      	sxth	r2, r3
 8003e6c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	b21b      	sxth	r3, r3
 8003e74:	4313      	orrs	r3, r2
 8003e76:	b21b      	sxth	r3, r3
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	83bb      	strh	r3, [r7, #28]
            acc_data[5] = reg_data[18];
 8003e7c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003e80:	83fb      	strh	r3, [r7, #30]

            /* Get accelerometer data from the register */
            get_acc_data(data, acc_data);
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4619      	mov	r1, r3
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f92b 	bl	80040e4 <get_acc_data>
 8003e8e:	e002      	b.n	8003e96 <get_accel_sensor_data+0xca>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003e90:	23ff      	movs	r3, #255	@ 0xff
 8003e92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8003e96:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3738      	adds	r7, #56	@ 0x38
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <get_gyro_sensor_data>:

/*!
 * @brief This internal API gets the gyroscope data from the register.
 */
int8_t get_gyro_sensor_data(struct bmi3_sens_axes_data *data, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b08c      	sub	sp, #48	@ 0x30
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_GYR_NUM_BYTES] = { 0 };
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
 8003eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	811a      	strh	r2, [r3, #8]

    /* Variable to store x, y and z axis gyro data */
    uint16_t gyr_data[6];

    if (data != NULL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d04e      	beq.n	8003f64 <get_gyro_sensor_data+0xc2>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, BMI3_GYR_NUM_BYTES, dev);
 8003ec6:	f107 0120 	add.w	r1, r7, #32
 8003eca:	7af8      	ldrb	r0, [r7, #11]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	220e      	movs	r2, #14
 8003ed0:	f7ff f88d 	bl	8002fee <bmi3_get_regs>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8003eda:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d143      	bne.n	8003f6a <get_gyro_sensor_data+0xc8>
        {
            gyr_data[0] = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8003ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ee6:	b21a      	sxth	r2, r3
 8003ee8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	b21b      	sxth	r3, r3
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	b21b      	sxth	r3, r3
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	82bb      	strh	r3, [r7, #20]
            gyr_data[1] = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8003ef8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003efc:	b21a      	sxth	r2, r3
 8003efe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	b21b      	sxth	r3, r3
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b21b      	sxth	r3, r3
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	82fb      	strh	r3, [r7, #22]
            gyr_data[2] = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8003f0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f12:	b21a      	sxth	r2, r3
 8003f14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	b21b      	sxth	r3, r3
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	b21b      	sxth	r3, r3
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	833b      	strh	r3, [r7, #24]
            gyr_data[3] = (reg_data[8] | (uint16_t)reg_data[9] << 8);
 8003f24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f28:	b21a      	sxth	r2, r3
 8003f2a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	b21b      	sxth	r3, r3
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b21b      	sxth	r3, r3
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	837b      	strh	r3, [r7, #26]
            gyr_data[4] = (reg_data[10] | (uint16_t)reg_data[11] << 8);
 8003f3a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003f3e:	b21a      	sxth	r2, r3
 8003f40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	b21b      	sxth	r3, r3
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	83bb      	strh	r3, [r7, #28]
            gyr_data[5] = reg_data[12];
 8003f50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003f54:	83fb      	strh	r3, [r7, #30]

            /* Get gyro data from the register */
            get_gyr_data(data, gyr_data);
 8003f56:	f107 0314 	add.w	r3, r7, #20
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 f90b 	bl	8004178 <get_gyr_data>
 8003f62:	e002      	b.n	8003f6a <get_gyro_sensor_data+0xc8>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003f64:	23ff      	movs	r3, #255	@ 0xff
 8003f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8003f6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3730      	adds	r7, #48	@ 0x30
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <get_step_counter_sensor_data>:

/*!
 * @brief This internal API gets the step counter data from the register.
 */
static int8_t get_step_counter_sensor_data(uint32_t *step_count, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b086      	sub	sp, #24
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	607a      	str	r2, [r7, #4]
 8003f82:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[4] = { 0 };
 8003f84:	2300      	movs	r3, #0
 8003f86:	613b      	str	r3, [r7, #16]

    if (step_count != NULL)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d026      	beq.n	8003fdc <get_step_counter_sensor_data+0x66>
    {
        /* Read the sensor data */
        rslt = bmi3_get_regs(reg_addr, reg_data, 4, dev);
 8003f8e:	f107 0110 	add.w	r1, r7, #16
 8003f92:	7af8      	ldrb	r0, [r7, #11]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2204      	movs	r2, #4
 8003f98:	f7ff f829 	bl	8002fee <bmi3_get_regs>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8003fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d11b      	bne.n	8003fe0 <get_step_counter_sensor_data+0x6a>
        {
            /* Get the step counter output in 4 bytes */
            *step_count = (uint32_t) reg_data[0];
 8003fa8:	7c3b      	ldrb	r3, [r7, #16]
 8003faa:	461a      	mov	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[1] << 8);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	7c7b      	ldrb	r3, [r7, #17]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[2] << 16);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	7cbb      	ldrb	r3, [r7, #18]
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]
            *step_count |= ((uint32_t) reg_data[3] << 24);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e001      	b.n	8003fe0 <get_step_counter_sensor_data+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8003fdc:	23ff      	movs	r3, #255	@ 0xff
 8003fde:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <get_orient_output_data>:
/*!
 * @brief This internal API gets the output values of orientation: portrait-
 * landscape and face up-down.
 */
static int8_t get_orient_output_data(struct bmi3_orientation_output *orient_out, uint8_t reg_addr, struct bmi3_dev *dev)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	72fb      	strb	r3, [r7, #11]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[2] = { 0 };
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	82bb      	strh	r3, [r7, #20]

    if (orient_out != NULL)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01b      	beq.n	800403c <get_orient_output_data+0x50>
    {
        /* Read the data from feature engine status register */
        rslt = bmi3_get_regs(reg_addr, reg_data, 2, dev);
 8004004:	f107 0114 	add.w	r1, r7, #20
 8004008:	7af8      	ldrb	r0, [r7, #11]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f7fe ffee 	bl	8002fee <bmi3_get_regs>
 8004012:	4603      	mov	r3, r0
 8004014:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8004016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d110      	bne.n	8004040 <get_orient_output_data+0x54>
        {
            /* Get the output value of the orientation detection feature */
            orient_out->orientation_portrait_landscape = BMI3_GET_BIT_POS0(reg_data[0],
 800401e:	7d3b      	ldrb	r3, [r7, #20]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	701a      	strb	r2, [r3, #0]
                                                                           BMI3_ORIENTATION_PORTRAIT_LANDSCAPE);

            /* Get the output value of the orientation face up-down feature */
            orient_out->orientation_faceup_down = BMI3_GET_BITS(reg_data[0], BMI3_ORIENTATION_FACEUP_DOWN);
 800402a:	7d3b      	ldrb	r3, [r7, #20]
 800402c:	109b      	asrs	r3, r3, #2
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	705a      	strb	r2, [r3, #1]
 800403a:	e001      	b.n	8004040 <get_orient_output_data+0x54>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800403c:	23ff      	movs	r3, #255	@ 0xff
 800403e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004040:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <get_gyro_config>:
/*!
 * @brief This internal API gets gyroscope configurations like ODR, gyro mode,
 * bandwidth, averaging samples and range.
 */
static int8_t get_gyro_config(struct bmi3_gyro_config *config, struct bmi3_dev *dev)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8004056:	2300      	movs	r3, #0
 8004058:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d039      	beq.n	80040d4 <get_gyro_config+0x88>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_GYR_CONF, data_array, 2, dev);
 8004060:	f107 0108 	add.w	r1, r7, #8
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2202      	movs	r2, #2
 8004068:	2021      	movs	r0, #33	@ 0x21
 800406a:	f7fe ffc0 	bl	8002fee <bmi3_get_regs>
 800406e:	4603      	mov	r3, r0
 8004070:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8004072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d12e      	bne.n	80040d8 <get_gyro_config+0x8c>
        {
            reg_data = data_array[0];
 800407a:	7a3b      	ldrb	r3, [r7, #8]
 800407c:	81bb      	strh	r3, [r7, #12]

            /* Get gyro ODR */
            config->odr = BMI3_GET_BIT_POS0(reg_data, BMI3_GYR_ODR);
 800407e:	89bb      	ldrh	r3, [r7, #12]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	b2da      	uxtb	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	701a      	strb	r2, [r3, #0]

            /* Get gyro range */
            config->range = BMI3_GET_BITS(reg_data, BMI3_GYR_RANGE);
 800408c:	89bb      	ldrh	r3, [r7, #12]
 800408e:	111b      	asrs	r3, r3, #4
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	b2da      	uxtb	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	70da      	strb	r2, [r3, #3]

            /* Get gyro bandwidth */
            config->bwp = BMI3_GET_BITS(reg_data, BMI3_GYR_BW);
 800409c:	89bb      	ldrh	r3, [r7, #12]
 800409e:	11db      	asrs	r3, r3, #7
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	705a      	strb	r2, [r3, #1]

            reg_data = (uint16_t)data_array[1] << 8;
 80040ac:	7a7b      	ldrb	r3, [r7, #9]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	81bb      	strh	r3, [r7, #12]

            /* Get gyro average sample */
            config->avg_num = BMI3_GET_BITS(reg_data, BMI3_GYR_AVG_NUM);
 80040b2:	89bb      	ldrh	r3, [r7, #12]
 80040b4:	121b      	asrs	r3, r3, #8
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	711a      	strb	r2, [r3, #4]

            /* Get gyro mode */
            config->gyr_mode = BMI3_GET_BITS(reg_data, BMI3_GYR_MODE);
 80040c2:	89bb      	ldrh	r3, [r7, #12]
 80040c4:	131b      	asrs	r3, r3, #12
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	709a      	strb	r2, [r3, #2]
 80040d2:	e001      	b.n	80040d8 <get_gyro_config+0x8c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80040d4:	23ff      	movs	r3, #255	@ 0xff
 80040d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80040d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <get_acc_data>:

/*!
 * @brief This internal API gets the accelerometer data.
 */
static void get_acc_data(struct bmi3_sens_axes_data *data, const uint16_t *reg_data)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
    /* Stores accel x-axis data */
    data->x = (int16_t)reg_data[0];
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b21a      	sxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	801a      	strh	r2, [r3, #0]

    /* Stores accel y-axis data */
    data->y = (int16_t)reg_data[1];
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	3302      	adds	r3, #2
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b21a      	sxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	805a      	strh	r2, [r3, #2]

    /* Stores accel z-axis data */
    data->z = (int16_t)reg_data[2];
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	3304      	adds	r3, #4
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b21a      	sxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	809a      	strh	r2, [r3, #4]

    /* Stores sensor time data */
    data->sens_time = (reg_data[3] | ((uint32_t)reg_data[4] << 16));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	3306      	adds	r3, #6
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	609a      	str	r2, [r3, #8]

    /* Stores saturation x-axis data */
    data->sat_x = (reg_data[5] & BMI3_SATF_ACC_X_MASK);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	330a      	adds	r3, #10
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	b2d9      	uxtb	r1, r3
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	7b13      	ldrb	r3, [r2, #12]
 8004136:	f361 0300 	bfi	r3, r1, #0, #1
 800413a:	7313      	strb	r3, [r2, #12]

    /* Stores saturation y-axis data */
    data->sat_y = (reg_data[5] & BMI3_SATF_ACC_Y_MASK) >> BMI3_SATF_ACC_Y_POS;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	330a      	adds	r3, #10
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	105b      	asrs	r3, r3, #1
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	b2d9      	uxtb	r1, r3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	7b13      	ldrb	r3, [r2, #12]
 800414e:	f361 0341 	bfi	r3, r1, #1, #1
 8004152:	7313      	strb	r3, [r2, #12]

    /* Stores saturation z-axis data */
    data->sat_z = (reg_data[5] & BMI3_SATF_ACC_Z_MASK) >> BMI3_SATF_ACC_Z_POS;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	330a      	adds	r3, #10
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	109b      	asrs	r3, r3, #2
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	b2d9      	uxtb	r1, r3
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	7b13      	ldrb	r3, [r2, #12]
 8004166:	f361 0382 	bfi	r3, r1, #2, #1
 800416a:	7313      	strb	r3, [r2, #12]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <get_gyr_data>:

/*!
 * @brief This internal API gets the gyroscope data.
 */
static void get_gyr_data(struct bmi3_sens_axes_data *data, const uint16_t *reg_data)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
    /* Stores accel x-axis data */
    data->x = (int16_t)reg_data[0];
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b21a      	sxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	801a      	strh	r2, [r3, #0]

    /* Stores accel y-axis data */
    data->y = (int16_t)reg_data[1];
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	3302      	adds	r3, #2
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b21a      	sxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	805a      	strh	r2, [r3, #2]

    /* Stores accel z-axis data */
    data->z = (int16_t)reg_data[2];
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	3304      	adds	r3, #4
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b21a      	sxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	809a      	strh	r2, [r3, #4]

    /* Stores sensor time data */
    data->sens_time = (reg_data[3] | ((uint32_t)reg_data[4] << 16));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	3306      	adds	r3, #6
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	609a      	str	r2, [r3, #8]

    /* Stores saturation x-axis data */
    data->sat_x = (reg_data[5] & BMI3_SATF_GYR_X_MASK) >> BMI3_SATF_GYR_X_POS;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	330a      	adds	r3, #10
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	10db      	asrs	r3, r3, #3
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	b2d9      	uxtb	r1, r3
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	7b13      	ldrb	r3, [r2, #12]
 80041cc:	f361 0300 	bfi	r3, r1, #0, #1
 80041d0:	7313      	strb	r3, [r2, #12]

    /* Stores saturation y-axis data */
    data->sat_y = (reg_data[5] & BMI3_SATF_GYR_Y_MASK) >> BMI3_SATF_GYR_Y_POS;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	330a      	adds	r3, #10
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	111b      	asrs	r3, r3, #4
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	b2d9      	uxtb	r1, r3
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	7b13      	ldrb	r3, [r2, #12]
 80041e4:	f361 0341 	bfi	r3, r1, #1, #1
 80041e8:	7313      	strb	r3, [r2, #12]

    /* Stores saturation z-axis data */
    data->sat_z = (reg_data[5] & BMI3_SATF_GYR_Z_MASK) >> BMI3_SATF_GYR_Z_POS;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	330a      	adds	r3, #10
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	115b      	asrs	r3, r3, #5
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2d9      	uxtb	r1, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	7b13      	ldrb	r3, [r2, #12]
 80041fc:	f361 0382 	bfi	r3, r1, #2, #1
 8004200:	7313      	strb	r3, [r2, #12]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00b      	beq.n	8004234 <null_ptr_check+0x26>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <null_ptr_check+0x26>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <null_ptr_check+0x26>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <null_ptr_check+0x2c>
    {
        rslt = BMI3_E_NULL_PTR;
 8004234:	23ff      	movs	r3, #255	@ 0xff
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e001      	b.n	800423e <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI3_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800423e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <get_any_motion_config>:
/*!
 * @brief This internal API gets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_any_motion_config(struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b088      	sub	sp, #32
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	2300      	movs	r3, #0
 800425e:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 8004260:	2305      	movs	r3, #5
 8004262:	81bb      	strh	r3, [r7, #12]

    uint8_t idx = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d078      	beq.n	8004360 <get_any_motion_config+0x112>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800426e:	f107 010c 	add.w	r1, r7, #12
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2202      	movs	r2, #2
 8004276:	2041      	movs	r0, #65	@ 0x41
 8004278:	f7fe ff1e 	bl	80030b8 <bmi3_set_regs>
 800427c:	4603      	mov	r3, r0
 800427e:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8004280:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d16d      	bne.n	8004364 <get_any_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where any-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 8004288:	f107 0110 	add.w	r1, r7, #16
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2206      	movs	r2, #6
 8004290:	2042      	movs	r0, #66	@ 0x42
 8004292:	f7fe feac 	bl	8002fee <bmi3_get_regs>
 8004296:	4603      	mov	r3, r0
 8004298:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 800429a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d160      	bne.n	8004364 <get_any_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) any_mot_config[idx++];
 80042a2:	7fbb      	ldrb	r3, [r7, #30]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	77ba      	strb	r2, [r7, #30]
 80042a8:	3320      	adds	r3, #32
 80042aa:	443b      	add	r3, r7
 80042ac:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80042b0:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 80042b2:	7fbb      	ldrb	r3, [r7, #30]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	77ba      	strb	r2, [r7, #30]
 80042b8:	3320      	adds	r3, #32
 80042ba:	443b      	add	r3, r7
 80042bc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 80042c4:	8bba      	ldrh	r2, [r7, #28]
 80042c6:	8b7b      	ldrh	r3, [r7, #26]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 80042cc:	8b3b      	ldrh	r3, [r7, #24]
 80042ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 80042d8:	8b3b      	ldrh	r3, [r7, #24]
 80042da:	131b      	asrs	r3, r3, #12
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis from the word */
                lsb = (uint16_t) any_mot_config[idx++];
 80042e8:	7fbb      	ldrb	r3, [r7, #30]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	77ba      	strb	r2, [r7, #30]
 80042ee:	3320      	adds	r3, #32
 80042f0:	443b      	add	r3, r7
 80042f2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80042f6:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 80042f8:	7fbb      	ldrb	r3, [r7, #30]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	77ba      	strb	r2, [r7, #30]
 80042fe:	3320      	adds	r3, #32
 8004300:	443b      	add	r3, r7
 8004302:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 800430a:	8bba      	ldrh	r2, [r7, #28]
 800430c:	8b7b      	ldrh	r3, [r7, #26]
 800430e:	4313      	orrs	r3, r2
 8004310:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 8004312:	8b3b      	ldrh	r3, [r7, #24]
 8004314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from the same word */
                lsb = (uint16_t) any_mot_config[idx++];
 800431e:	7fbb      	ldrb	r3, [r7, #30]
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	77ba      	strb	r2, [r7, #30]
 8004324:	3320      	adds	r3, #32
 8004326:	443b      	add	r3, r7
 8004328:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800432c:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) any_mot_config[idx++] << 8);
 800432e:	7fbb      	ldrb	r3, [r7, #30]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	77ba      	strb	r2, [r7, #30]
 8004334:	3320      	adds	r3, #32
 8004336:	443b      	add	r3, r7
 8004338:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8004340:	8bba      	ldrh	r2, [r7, #28]
 8004342:	8b7b      	ldrh	r3, [r7, #26]
 8004344:	4313      	orrs	r3, r2
 8004346:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 8004348:	8b3b      	ldrh	r3, [r7, #24]
 800434a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8004354:	8b3b      	ldrh	r3, [r7, #24]
 8004356:	0b5b      	lsrs	r3, r3, #13
 8004358:	b29a      	uxth	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	811a      	strh	r2, [r3, #8]
 800435e:	e001      	b.n	8004364 <get_any_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004360:	23ff      	movs	r3, #255	@ 0xff
 8004362:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004364:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <set_any_motion_config>:
/*!
 * @brief This internal API sets any-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_any_motion_config(const struct bmi3_any_motion_config *config, struct bmi3_dev *dev)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08e      	sub	sp, #56	@ 0x38
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of any-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ANY_MOTION, 0 };
 800437a:	2305      	movs	r3, #5
 800437c:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t any_mot_config[6] = { 0 };
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	2300      	movs	r3, #0
 8004384:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	2300      	movs	r3, #0
 800438c:	823b      	strh	r3, [r7, #16]
    uint16_t acc_ref_up;

    /* Wait time for clearing the event after slope is below threshold */
    uint16_t wait_time;

    if (config != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80b6 	beq.w	8004502 <set_any_motion_config+0x192>
    {
        /* Set the any-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004396:	f107 011c 	add.w	r1, r7, #28
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2202      	movs	r2, #2
 800439e:	2041      	movs	r0, #65	@ 0x41
 80043a0:	f7fe fe8a 	bl	80030b8 <bmi3_set_regs>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 80043aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 80aa 	bne.w	8004508 <set_any_motion_config+0x198>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80043b4:	7b3b      	ldrb	r3, [r7, #12]
 80043b6:	b21a      	sxth	r2, r3
 80043b8:	4b56      	ldr	r3, [pc, #344]	@ (8004514 <set_any_motion_config+0x1a4>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	b21a      	sxth	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	885b      	ldrh	r3, [r3, #2]
 80043c2:	b21b      	sxth	r3, r3
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	b21b      	sxth	r3, r3
 80043ca:	4313      	orrs	r3, r2
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 80043d0:	7b7b      	ldrb	r3, [r7, #13]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80043d6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80043da:	4b4e      	ldr	r3, [pc, #312]	@ (8004514 <set_any_motion_config+0x1a4>)
 80043dc:	4013      	ands	r3, r2
 80043de:	b21a      	sxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	885b      	ldrh	r3, [r3, #2]
 80043e4:	b21b      	sxth	r3, r3
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ea:	b21b      	sxth	r3, r3
 80043ec:	4313      	orrs	r3, r2
 80043ee:	b21b      	sxth	r3, r3
 80043f0:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = ((uint16_t)data_array[1] << 8);
 80043f2:	7b7b      	ldrb	r3, [r7, #13]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            acc_ref_up = BMI3_SET_BITS(acc_ref_up, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 80043f8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80043fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004400:	b21a      	sxth	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	791b      	ldrb	r3, [r3, #4]
 8004406:	031b      	lsls	r3, r3, #12
 8004408:	b21b      	sxth	r3, r3
 800440a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800440e:	b21b      	sxth	r3, r3
 8004410:	4313      	orrs	r3, r2
 8004412:	b21b      	sxth	r3, r3
 8004414:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8004416:	7bbb      	ldrb	r3, [r7, #14]
 8004418:	b21a      	sxth	r2, r3
 800441a:	4b3f      	ldr	r3, [pc, #252]	@ (8004518 <set_any_motion_config+0x1a8>)
 800441c:	4013      	ands	r3, r2
 800441e:	b21a      	sxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	88db      	ldrh	r3, [r3, #6]
 8004424:	b21b      	sxth	r3, r3
 8004426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442a:	b21b      	sxth	r3, r3
 800442c:	4313      	orrs	r3, r2
 800442e:	b21b      	sxth	r3, r3
 8004430:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8004432:	7bbb      	ldrb	r3, [r7, #14]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8004438:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800443c:	4b36      	ldr	r3, [pc, #216]	@ (8004518 <set_any_motion_config+0x1a8>)
 800443e:	4013      	ands	r3, r2
 8004440:	b21a      	sxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	88db      	ldrh	r3, [r3, #6]
 8004446:	b21b      	sxth	r3, r3
 8004448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444c:	b21b      	sxth	r3, r3
 800444e:	4313      	orrs	r3, r2
 8004450:	b21b      	sxth	r3, r3
 8004452:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	b21a      	sxth	r2, r3
 8004458:	4b30      	ldr	r3, [pc, #192]	@ (800451c <set_any_motion_config+0x1ac>)
 800445a:	4013      	ands	r3, r2
 800445c:	b21a      	sxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b21b      	sxth	r3, r3
 8004464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004468:	b21b      	sxth	r3, r3
 800446a:	4313      	orrs	r3, r2
 800446c:	b21b      	sxth	r3, r3
 800446e:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 8004470:	7c3b      	ldrb	r3, [r7, #16]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 8004476:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800447a:	4b28      	ldr	r3, [pc, #160]	@ (800451c <set_any_motion_config+0x1ac>)
 800447c:	4013      	ands	r3, r2
 800447e:	b21a      	sxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b21b      	sxth	r3, r3
 8004486:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800448a:	b21b      	sxth	r3, r3
 800448c:	4313      	orrs	r3, r2
 800448e:	b21b      	sxth	r3, r3
 8004490:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 8004492:	7c7b      	ldrb	r3, [r7, #17]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 8004498:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800449c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044a0:	b21a      	sxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	891b      	ldrh	r3, [r3, #8]
 80044a6:	035b      	lsls	r3, r3, #13
 80044a8:	b21b      	sxth	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b21b      	sxth	r3, r3
 80044ae:	83fb      	strh	r3, [r7, #30]

            any_mot_config[0] = (uint8_t)threshold1;
 80044b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	753b      	strb	r3, [r7, #20]
            any_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 80044b6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80044b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80044ba:	4313      	orrs	r3, r2
 80044bc:	b29b      	uxth	r3, r3
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	757b      	strb	r3, [r7, #21]
            any_mot_config[2] = (uint8_t)(hysteresis1);
 80044c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	75bb      	strb	r3, [r7, #22]
            any_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 80044cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	75fb      	strb	r3, [r7, #23]
            any_mot_config[4] = (uint8_t)(duration1);
 80044d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	763b      	strb	r3, [r7, #24]
            any_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 80044dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80044de:	8bfb      	ldrh	r3, [r7, #30]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	767b      	strb	r3, [r7, #25]

            /* Set the configurations back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, any_mot_config, 6, dev);
 80044ec:	f107 0114 	add.w	r1, r7, #20
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2206      	movs	r2, #6
 80044f4:	2042      	movs	r0, #66	@ 0x42
 80044f6:	f7fe fddf 	bl	80030b8 <bmi3_set_regs>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004500:	e002      	b.n	8004508 <set_any_motion_config+0x198>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004502:	23ff      	movs	r3, #255	@ 0xff
 8004504:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8004508:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800450c:	4618      	mov	r0, r3
 800450e:	3738      	adds	r7, #56	@ 0x38
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	fffff000 	.word	0xfffff000
 8004518:	fffffc00 	.word	0xfffffc00
 800451c:	ffffe000 	.word	0xffffe000

08004520 <get_no_motion_config>:
/*!
 * @brief This internal API gets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t get_no_motion_config(struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	2300      	movs	r3, #0
 8004530:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 8004532:	2308      	movs	r3, #8
 8004534:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d078      	beq.n	8004632 <get_no_motion_config+0x112>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004540:	f107 010c 	add.w	r1, r7, #12
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2202      	movs	r2, #2
 8004548:	2041      	movs	r0, #65	@ 0x41
 800454a:	f7fe fdb5 	bl	80030b8 <bmi3_set_regs>
 800454e:	4603      	mov	r3, r0
 8004550:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8004552:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d16d      	bne.n	8004636 <get_no_motion_config+0x116>
        {
            /* Get the configuration from the feature engine register where no-motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 800455a:	f107 0110 	add.w	r1, r7, #16
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2206      	movs	r2, #6
 8004562:	2042      	movs	r0, #66	@ 0x42
 8004564:	f7fe fd43 	bl	8002fee <bmi3_get_regs>
 8004568:	4603      	mov	r3, r0
 800456a:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 800456c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d160      	bne.n	8004636 <get_no_motion_config+0x116>
            {
                /* Get word to calculate threshold and accel reference up from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 8004574:	7fbb      	ldrb	r3, [r7, #30]
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	77ba      	strb	r2, [r7, #30]
 800457a:	3320      	adds	r3, #32
 800457c:	443b      	add	r3, r7
 800457e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004582:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8004584:	7fbb      	ldrb	r3, [r7, #30]
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	77ba      	strb	r2, [r7, #30]
 800458a:	3320      	adds	r3, #32
 800458c:	443b      	add	r3, r7
 800458e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8004596:	8bba      	ldrh	r2, [r7, #28]
 8004598:	8b7b      	ldrh	r3, [r7, #26]
 800459a:	4313      	orrs	r3, r2
 800459c:	833b      	strh	r3, [r7, #24]

                /* Get threshold */
                config->slope_thres = (lsb_msb & BMI3_ANY_NO_SLOPE_THRESHOLD_MASK);
 800459e:	8b3b      	ldrh	r3, [r7, #24]
 80045a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	805a      	strh	r2, [r3, #2]

                /* Get accel reference up */
                config->acc_ref_up = (lsb_msb & BMI3_ANY_NO_ACC_REF_UP_MASK) >> BMI3_ANY_NO_ACC_REF_UP_POS;
 80045aa:	8b3b      	ldrh	r3, [r7, #24]
 80045ac:	131b      	asrs	r3, r3, #12
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate hysteresis */
                lsb = (uint16_t) no_mot_config[idx++];
 80045ba:	7fbb      	ldrb	r3, [r7, #30]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	77ba      	strb	r2, [r7, #30]
 80045c0:	3320      	adds	r3, #32
 80045c2:	443b      	add	r3, r7
 80045c4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80045c8:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 80045ca:	7fbb      	ldrb	r3, [r7, #30]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	77ba      	strb	r2, [r7, #30]
 80045d0:	3320      	adds	r3, #32
 80045d2:	443b      	add	r3, r7
 80045d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 80045dc:	8bba      	ldrh	r2, [r7, #28]
 80045de:	8b7b      	ldrh	r3, [r7, #26]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	833b      	strh	r3, [r7, #24]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ANY_NO_HYSTERESIS_MASK);
 80045e4:	8b3b      	ldrh	r3, [r7, #24]
 80045e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate duration and wait time from same word */
                lsb = (uint16_t) no_mot_config[idx++];
 80045f0:	7fbb      	ldrb	r3, [r7, #30]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	77ba      	strb	r2, [r7, #30]
 80045f6:	3320      	adds	r3, #32
 80045f8:	443b      	add	r3, r7
 80045fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80045fe:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) no_mot_config[idx++] << 8);
 8004600:	7fbb      	ldrb	r3, [r7, #30]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	77ba      	strb	r2, [r7, #30]
 8004606:	3320      	adds	r3, #32
 8004608:	443b      	add	r3, r7
 800460a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	837b      	strh	r3, [r7, #26]
                lsb_msb = (uint16_t)(lsb | msb);
 8004612:	8bba      	ldrh	r2, [r7, #28]
 8004614:	8b7b      	ldrh	r3, [r7, #26]
 8004616:	4313      	orrs	r3, r2
 8004618:	833b      	strh	r3, [r7, #24]

                /* Get duration */
                config->duration = (lsb_msb & BMI3_ANY_NO_DURATION_MASK);
 800461a:	8b3b      	ldrh	r3, [r7, #24]
 800461c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	801a      	strh	r2, [r3, #0]

                /* Get wait time */
                config->wait_time = (lsb_msb & BMI3_ANY_NO_WAIT_TIME_MASK) >> BMI3_ANY_NO_WAIT_TIME_POS;
 8004626:	8b3b      	ldrh	r3, [r7, #24]
 8004628:	0b5b      	lsrs	r3, r3, #13
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	811a      	strh	r2, [r3, #8]
 8004630:	e001      	b.n	8004636 <get_no_motion_config+0x116>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004632:	23ff      	movs	r3, #255	@ 0xff
 8004634:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004636:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <set_no_motion_config>:
/*!
 * @brief This internal API sets no-motion configurations like threshold,
 * duration, accel reference up, hysteresis and wait time.
 */
static int8_t set_no_motion_config(const struct bmi3_no_motion_config *config, struct bmi3_dev *dev)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08e      	sub	sp, #56	@ 0x38
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of no-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_NO_MOTION, 0 };
 800464e:	2308      	movs	r3, #8
 8004650:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t no_mot_config[6] = { 0 };
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	2300      	movs	r3, #0
 8004658:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	2300      	movs	r3, #0
 8004660:	823b      	strh	r3, [r7, #16]

    uint16_t acc_ref_up;

    uint16_t wait_time;

    if (config != NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80b3 	beq.w	80047d0 <set_no_motion_config+0x18c>
    {
        /* Set the no-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800466a:	f107 011c 	add.w	r1, r7, #28
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2202      	movs	r2, #2
 8004672:	2041      	movs	r0, #65	@ 0x41
 8004674:	f7fe fd20 	bl	80030b8 <bmi3_set_regs>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 800467e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 80a7 	bne.w	80047d6 <set_no_motion_config+0x192>
        {
            /* Set threshold for lsb 8 bits */
            threshold1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 8004688:	7b3b      	ldrb	r3, [r7, #12]
 800468a:	b21a      	sxth	r2, r3
 800468c:	4b55      	ldr	r3, [pc, #340]	@ (80047e4 <set_no_motion_config+0x1a0>)
 800468e:	4013      	ands	r3, r2
 8004690:	b21a      	sxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	885b      	ldrh	r3, [r3, #2]
 8004696:	b21b      	sxth	r3, r3
 8004698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469c:	b21b      	sxth	r3, r3
 800469e:	4313      	orrs	r3, r2
 80046a0:	b21b      	sxth	r3, r3
 80046a2:	86bb      	strh	r3, [r7, #52]	@ 0x34

            threshold = ((uint16_t)data_array[1] << 8);
 80046a4:	7b7b      	ldrb	r3, [r7, #13]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set threshold for msb 8 bits */
            threshold2 = BMI3_SET_BIT_POS0(threshold, BMI3_ANY_NO_SLOPE_THRESHOLD, config->slope_thres);
 80046aa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80046ae:	4b4d      	ldr	r3, [pc, #308]	@ (80047e4 <set_no_motion_config+0x1a0>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	b21a      	sxth	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	885b      	ldrh	r3, [r3, #2]
 80046b8:	b21b      	sxth	r3, r3
 80046ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046be:	b21b      	sxth	r3, r3
 80046c0:	4313      	orrs	r3, r2
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set accel reference */
            acc_ref_up = BMI3_SET_BITS(threshold, BMI3_ANY_NO_ACC_REF_UP, config->acc_ref_up);
 80046c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80046ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046ce:	b21a      	sxth	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	791b      	ldrb	r3, [r3, #4]
 80046d4:	031b      	lsls	r3, r3, #12
 80046d6:	b21b      	sxth	r3, r3
 80046d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046dc:	b21b      	sxth	r3, r3
 80046de:	4313      	orrs	r3, r2
 80046e0:	b21b      	sxth	r3, r3
 80046e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /* Set hysteresis for lsb 8 bits */
            hysteresis1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 80046e4:	7bbb      	ldrb	r3, [r7, #14]
 80046e6:	b21a      	sxth	r2, r3
 80046e8:	4b3f      	ldr	r3, [pc, #252]	@ (80047e8 <set_no_motion_config+0x1a4>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	b21a      	sxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	88db      	ldrh	r3, [r3, #6]
 80046f2:	b21b      	sxth	r3, r3
 80046f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f8:	b21b      	sxth	r3, r3
 80046fa:	4313      	orrs	r3, r2
 80046fc:	b21b      	sxth	r3, r3
 80046fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            hysteresis = ((uint16_t)data_array[2] << 8);
 8004700:	7bbb      	ldrb	r3, [r7, #14]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set hysteresis for msb 8 bits */
            hysteresis2 = BMI3_SET_BIT_POS0(hysteresis, BMI3_ANY_NO_HYSTERESIS, config->hysteresis);
 8004706:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800470a:	4b37      	ldr	r3, [pc, #220]	@ (80047e8 <set_no_motion_config+0x1a4>)
 800470c:	4013      	ands	r3, r2
 800470e:	b21a      	sxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	88db      	ldrh	r3, [r3, #6]
 8004714:	b21b      	sxth	r3, r3
 8004716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800471a:	b21b      	sxth	r3, r3
 800471c:	4313      	orrs	r3, r2
 800471e:	b21b      	sxth	r3, r3
 8004720:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set duration for lsb 8 bits */
            duration1 = BMI3_SET_BIT_POS0(data_array[3], BMI3_ANY_NO_DURATION, config->duration);
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	b21a      	sxth	r2, r3
 8004726:	4b31      	ldr	r3, [pc, #196]	@ (80047ec <set_no_motion_config+0x1a8>)
 8004728:	4013      	ands	r3, r2
 800472a:	b21a      	sxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b21b      	sxth	r3, r3
 8004732:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004736:	b21b      	sxth	r3, r3
 8004738:	4313      	orrs	r3, r2
 800473a:	b21b      	sxth	r3, r3
 800473c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            duration = ((uint16_t)data_array[4] << 8);
 800473e:	7c3b      	ldrb	r3, [r7, #16]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set duration for msb 8 bits */
            duration2 = BMI3_SET_BIT_POS0(duration, BMI3_ANY_NO_DURATION, config->duration);
 8004744:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8004748:	4b28      	ldr	r3, [pc, #160]	@ (80047ec <set_no_motion_config+0x1a8>)
 800474a:	4013      	ands	r3, r2
 800474c:	b21a      	sxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b21b      	sxth	r3, r3
 8004754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004758:	b21b      	sxth	r3, r3
 800475a:	4313      	orrs	r3, r2
 800475c:	b21b      	sxth	r3, r3
 800475e:	847b      	strh	r3, [r7, #34]	@ 0x22

            wait_time1 = ((uint16_t)data_array[5] << 8);
 8004760:	7c7b      	ldrb	r3, [r7, #17]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	843b      	strh	r3, [r7, #32]

            /* Set wait time */
            wait_time = BMI3_SET_BITS(wait_time1, BMI3_ANY_NO_WAIT_TIME, config->wait_time);
 8004766:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800476a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800476e:	b21a      	sxth	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	891b      	ldrh	r3, [r3, #8]
 8004774:	035b      	lsls	r3, r3, #13
 8004776:	b21b      	sxth	r3, r3
 8004778:	4313      	orrs	r3, r2
 800477a:	b21b      	sxth	r3, r3
 800477c:	83fb      	strh	r3, [r7, #30]

            no_mot_config[0] = (uint8_t)threshold1;
 800477e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004780:	b2db      	uxtb	r3, r3
 8004782:	753b      	strb	r3, [r7, #20]
            no_mot_config[1] = (uint8_t)((threshold2 | acc_ref_up) >> 8);
 8004784:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8004786:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004788:	4313      	orrs	r3, r2
 800478a:	b29b      	uxth	r3, r3
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	b29b      	uxth	r3, r3
 8004790:	b2db      	uxtb	r3, r3
 8004792:	757b      	strb	r3, [r7, #21]
            no_mot_config[2] = (uint8_t)(hysteresis1);
 8004794:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004796:	b2db      	uxtb	r3, r3
 8004798:	75bb      	strb	r3, [r7, #22]
            no_mot_config[3] = (uint8_t)((hysteresis2) >> 8);
 800479a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	b29b      	uxth	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	75fb      	strb	r3, [r7, #23]
            no_mot_config[4] = (uint8_t)(duration1);
 80047a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	763b      	strb	r3, [r7, #24]
            no_mot_config[5] = (uint8_t)((duration2 | wait_time) >> 8);
 80047aa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80047ac:	8bfb      	ldrh	r3, [r7, #30]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, no_mot_config, 6, dev);
 80047ba:	f107 0114 	add.w	r1, r7, #20
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2206      	movs	r2, #6
 80047c2:	2042      	movs	r0, #66	@ 0x42
 80047c4:	f7fe fc78 	bl	80030b8 <bmi3_set_regs>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80047ce:	e002      	b.n	80047d6 <set_no_motion_config+0x192>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80047d0:	23ff      	movs	r3, #255	@ 0xff
 80047d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 80047d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3738      	adds	r7, #56	@ 0x38
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	fffff000 	.word	0xfffff000
 80047e8:	fffffc00 	.word	0xfffffc00
 80047ec:	ffffe000 	.word	0xffffe000

080047f0 <get_flat_config>:
/*!
 * @brief This internal API gets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t get_flat_config(struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 80047fe:	230b      	movs	r3, #11
 8004800:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d061      	beq.n	80048d0 <get_flat_config+0xe0>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 800480c:	f107 0108 	add.w	r1, r7, #8
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2202      	movs	r2, #2
 8004814:	2041      	movs	r0, #65	@ 0x41
 8004816:	f7fe fc4f 	bl	80030b8 <bmi3_set_regs>
 800481a:	4603      	mov	r3, r0
 800481c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800481e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d156      	bne.n	80048d4 <get_flat_config+0xe4>
        {
            /* Get the configuration from the feature engine register where flat feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 8004826:	f107 010c 	add.w	r1, r7, #12
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2204      	movs	r2, #4
 800482e:	2042      	movs	r0, #66	@ 0x42
 8004830:	f7fe fbdd 	bl	8002fee <bmi3_get_regs>
 8004834:	4603      	mov	r3, r0
 8004836:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8004838:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d149      	bne.n	80048d4 <get_flat_config+0xe4>
            {
                /* Get word to calculate theta, blocking and hold time from the same word */
                lsb = (uint16_t) flat_config[idx++];
 8004840:	7dbb      	ldrb	r3, [r7, #22]
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	75ba      	strb	r2, [r7, #22]
 8004846:	3318      	adds	r3, #24
 8004848:	443b      	add	r3, r7
 800484a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800484e:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 8004850:	7dbb      	ldrb	r3, [r7, #22]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	75ba      	strb	r2, [r7, #22]
 8004856:	3318      	adds	r3, #24
 8004858:	443b      	add	r3, r7
 800485a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	827b      	strh	r3, [r7, #18]
                lsb_msb = (lsb | msb);
 8004862:	8aba      	ldrh	r2, [r7, #20]
 8004864:	8a7b      	ldrh	r3, [r7, #18]
 8004866:	4313      	orrs	r3, r2
 8004868:	823b      	strh	r3, [r7, #16]

                /* Get theta */
                config->theta = lsb_msb & BMI3_FLAT_THETA_MASK;
 800486a:	8a3b      	ldrh	r3, [r7, #16]
 800486c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	801a      	strh	r2, [r3, #0]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_FLAT_BLOCKING_MASK) >> BMI3_FLAT_BLOCKING_POS;
 8004876:	8a3b      	ldrh	r3, [r7, #16]
 8004878:	119b      	asrs	r3, r3, #6
 800487a:	b29b      	uxth	r3, r3
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	805a      	strh	r2, [r3, #2]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_FLAT_HOLD_TIME_MASK) >> BMI3_FLAT_HOLD_TIME_POS;
 8004886:	8a3b      	ldrh	r3, [r7, #16]
 8004888:	0a1b      	lsrs	r3, r3, #8
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) flat_config[idx++];
 8004890:	7dbb      	ldrb	r3, [r7, #22]
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	75ba      	strb	r2, [r7, #22]
 8004896:	3318      	adds	r3, #24
 8004898:	443b      	add	r3, r7
 800489a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800489e:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) flat_config[idx++] << 8);
 80048a0:	7dbb      	ldrb	r3, [r7, #22]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	75ba      	strb	r2, [r7, #22]
 80048a6:	3318      	adds	r3, #24
 80048a8:	443b      	add	r3, r7
 80048aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 80048b2:	8aba      	ldrh	r2, [r7, #20]
 80048b4:	8a7b      	ldrh	r3, [r7, #18]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_FLAT_SLOPE_THRES_MASK;
 80048ba:	8a3b      	ldrh	r3, [r7, #16]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	811a      	strh	r2, [r3, #8]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_FLAT_HYST_MASK) >> BMI3_FLAT_HYST_POS;
 80048c4:	8a3b      	ldrh	r3, [r7, #16]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	809a      	strh	r2, [r3, #4]
 80048ce:	e001      	b.n	80048d4 <get_flat_config+0xe4>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80048d0:	23ff      	movs	r3, #255	@ 0xff
 80048d2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80048d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <set_flat_config>:
/*!
 * @brief This internal API sets flat configurations like theta, blocking,
 * hold-time, hysteresis, and slope threshold.
 */
static int8_t set_flat_config(const struct bmi3_flat_config *config, struct bmi3_dev *dev)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t flat_config[4] = { 0 };
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of flat feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_FLAT, 0 };
 80048ee:	230b      	movs	r3, #11
 80048f0:	81bb      	strh	r3, [r7, #12]

    uint16_t theta, blocking, holdtime, slope_thres, hyst;

    if (config != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d06f      	beq.n	80049d8 <set_flat_config+0xf8>
    {
        /* Set the flat base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80048f8:	f107 010c 	add.w	r1, r7, #12
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2202      	movs	r2, #2
 8004900:	2041      	movs	r0, #65	@ 0x41
 8004902:	f7fe fbd9 	bl	80030b8 <bmi3_set_regs>
 8004906:	4603      	mov	r3, r0
 8004908:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 800490a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d164      	bne.n	80049dc <set_flat_config+0xfc>
        {
            /* Set theta */
            theta = BMI3_SET_BIT_POS0(flat_config[0], BMI3_FLAT_THETA, config->theta);
 8004912:	7c3b      	ldrb	r3, [r7, #16]
 8004914:	b21b      	sxth	r3, r3
 8004916:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800491a:	b21a      	sxth	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b21b      	sxth	r3, r3
 8004922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004926:	b21b      	sxth	r3, r3
 8004928:	4313      	orrs	r3, r2
 800492a:	b21b      	sxth	r3, r3
 800492c:	83bb      	strh	r3, [r7, #28]

            /* Set blocking */
            blocking = BMI3_SET_BITS(flat_config[0], BMI3_FLAT_BLOCKING, config->blocking);
 800492e:	7c3b      	ldrb	r3, [r7, #16]
 8004930:	b21b      	sxth	r3, r3
 8004932:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004936:	b21a      	sxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	885b      	ldrh	r3, [r3, #2]
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	b21b      	sxth	r3, r3
 8004940:	b2db      	uxtb	r3, r3
 8004942:	b21b      	sxth	r3, r3
 8004944:	4313      	orrs	r3, r2
 8004946:	b21b      	sxth	r3, r3
 8004948:	837b      	strh	r3, [r7, #26]

            /* Set hold time */
            holdtime = ((uint16_t)flat_config[1] << 8);
 800494a:	7c7b      	ldrb	r3, [r7, #17]
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	833b      	strh	r3, [r7, #24]
            holdtime = BMI3_SET_BITS(holdtime, BMI3_FLAT_HOLD_TIME, config->hold_time);
 8004950:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	b21a      	sxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	88db      	ldrh	r3, [r3, #6]
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	b21b      	sxth	r3, r3
 8004960:	4313      	orrs	r3, r2
 8004962:	b21b      	sxth	r3, r3
 8004964:	833b      	strh	r3, [r7, #24]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(flat_config[2], BMI3_FLAT_SLOPE_THRES, config->slope_thres);
 8004966:	7cbb      	ldrb	r3, [r7, #18]
 8004968:	b21b      	sxth	r3, r3
 800496a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800496e:	b21a      	sxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	891b      	ldrh	r3, [r3, #8]
 8004974:	b21b      	sxth	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	b21b      	sxth	r3, r3
 800497a:	4313      	orrs	r3, r2
 800497c:	b21b      	sxth	r3, r3
 800497e:	82fb      	strh	r3, [r7, #22]

            /* Set hysteresis */
            hyst = ((uint16_t)flat_config[3] << 8);
 8004980:	7cfb      	ldrb	r3, [r7, #19]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	82bb      	strh	r3, [r7, #20]
            hyst = BMI3_SET_BITS(hyst, BMI3_FLAT_HYST, config->hysteresis);
 8004986:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	b21a      	sxth	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	889b      	ldrh	r3, [r3, #4]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	b21b      	sxth	r3, r3
 8004996:	4313      	orrs	r3, r2
 8004998:	b21b      	sxth	r3, r3
 800499a:	82bb      	strh	r3, [r7, #20]

            flat_config[0] = (uint8_t)(theta | blocking);
 800499c:	8bbb      	ldrh	r3, [r7, #28]
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	8b7b      	ldrh	r3, [r7, #26]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	743b      	strb	r3, [r7, #16]
            flat_config[1] = (uint8_t)(holdtime >> 8);
 80049aa:	8b3b      	ldrh	r3, [r7, #24]
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	747b      	strb	r3, [r7, #17]
            flat_config[2] = (uint8_t)(slope_thres);
 80049b4:	8afb      	ldrh	r3, [r7, #22]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	74bb      	strb	r3, [r7, #18]
            flat_config[3] = (uint8_t)(hyst >> 8);
 80049ba:	8abb      	ldrh	r3, [r7, #20]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	b29b      	uxth	r3, r3
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, flat_config, 4, dev);
 80049c4:	f107 0110 	add.w	r1, r7, #16
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2204      	movs	r2, #4
 80049cc:	2042      	movs	r0, #66	@ 0x42
 80049ce:	f7fe fb73 	bl	80030b8 <bmi3_set_regs>
 80049d2:	4603      	mov	r3, r0
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e001      	b.n	80049dc <set_flat_config+0xfc>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80049d8:	23ff      	movs	r3, #255	@ 0xff
 80049da:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80049dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <get_sig_motion_config>:
/*!
 * @brief This internal API gets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t get_sig_motion_config(struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]

    /* Variable to define a word */
    uint16_t lsb_msb;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 80049f2:	230d      	movs	r3, #13
 80049f4:	81bb      	strh	r3, [r7, #12]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	77bb      	strb	r3, [r7, #30]

    if (config != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d074      	beq.n	8004aea <get_sig_motion_config+0x102>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004a00:	f107 010c 	add.w	r1, r7, #12
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2202      	movs	r2, #2
 8004a08:	2041      	movs	r0, #65	@ 0x41
 8004a0a:	f7fe fb55 	bl	80030b8 <bmi3_set_regs>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8004a12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d169      	bne.n	8004aee <get_sig_motion_config+0x106>
        {
            /* Get the configuration from the feature engine register where sig motion feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8004a1a:	f107 0110 	add.w	r1, r7, #16
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2206      	movs	r2, #6
 8004a22:	2042      	movs	r0, #66	@ 0x42
 8004a24:	f7fe fae3 	bl	8002fee <bmi3_get_regs>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 8004a2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d15c      	bne.n	8004aee <get_sig_motion_config+0x106>
            {
                /* Get word to calculate block size */
                lsb = (uint16_t) sig_mot_config[idx++];
 8004a34:	7fbb      	ldrb	r3, [r7, #30]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	77ba      	strb	r2, [r7, #30]
 8004a3a:	3320      	adds	r3, #32
 8004a3c:	443b      	add	r3, r7
 8004a3e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004a42:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8004a44:	7fbb      	ldrb	r3, [r7, #30]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	77ba      	strb	r2, [r7, #30]
 8004a4a:	3320      	adds	r3, #32
 8004a4c:	443b      	add	r3, r7
 8004a4e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8004a56:	8bba      	ldrh	r2, [r7, #28]
 8004a58:	8b7b      	ldrh	r3, [r7, #26]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	833b      	strh	r3, [r7, #24]

                /* Get block size */
                config->block_size = lsb_msb & BMI3_SIG_BLOCK_SIZE_MASK;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8b3a      	ldrh	r2, [r7, #24]
 8004a62:	801a      	strh	r2, [r3, #0]

                /* Get word to calculate peak 2 peak minimum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8004a64:	7fbb      	ldrb	r3, [r7, #30]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	77ba      	strb	r2, [r7, #30]
 8004a6a:	3320      	adds	r3, #32
 8004a6c:	443b      	add	r3, r7
 8004a6e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004a72:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8004a74:	7fbb      	ldrb	r3, [r7, #30]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	77ba      	strb	r2, [r7, #30]
 8004a7a:	3320      	adds	r3, #32
 8004a7c:	443b      	add	r3, r7
 8004a7e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8004a86:	8bba      	ldrh	r2, [r7, #28]
 8004a88:	8b7b      	ldrh	r3, [r7, #26]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak minimum */
                config->peak_2_peak_min = (lsb_msb & BMI3_SIG_P2P_MIN_MASK);
 8004a8e:	8b3b      	ldrh	r3, [r7, #24]
 8004a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	805a      	strh	r2, [r3, #2]

                /* Get mcr minimum */
                config->mcr_min = (lsb_msb & BMI3_SIG_MCR_MIN_MASK) >> BMI3_SIG_MCR_MIN_POS;
 8004a9a:	8b3b      	ldrh	r3, [r7, #24]
 8004a9c:	0a9b      	lsrs	r3, r3, #10
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate peak 2 peak maximum and mcr maximum from the same word */
                lsb = (uint16_t) sig_mot_config[idx++];
 8004aa6:	7fbb      	ldrb	r3, [r7, #30]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	77ba      	strb	r2, [r7, #30]
 8004aac:	3320      	adds	r3, #32
 8004aae:	443b      	add	r3, r7
 8004ab0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004ab4:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) sig_mot_config[idx++] << 8);
 8004ab6:	7fbb      	ldrb	r3, [r7, #30]
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	77ba      	strb	r2, [r7, #30]
 8004abc:	3320      	adds	r3, #32
 8004abe:	443b      	add	r3, r7
 8004ac0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	837b      	strh	r3, [r7, #26]
                lsb_msb = (lsb | msb);
 8004ac8:	8bba      	ldrh	r2, [r7, #28]
 8004aca:	8b7b      	ldrh	r3, [r7, #26]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	833b      	strh	r3, [r7, #24]

                /* Get peak 2 peak maximum */
                config->peak_2_peak_max = (lsb_msb & BMI3_SIG_P2P_MAX_MASK);
 8004ad0:	8b3b      	ldrh	r3, [r7, #24]
 8004ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	80da      	strh	r2, [r3, #6]

                /* Get mcr maximum */
                config->mcr_max = (lsb_msb & BMI3_MCR_MAX_MASK) >> BMI3_MCR_MAX_POS;
 8004adc:	8b3b      	ldrh	r3, [r7, #24]
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	721a      	strb	r2, [r3, #8]
 8004ae8:	e001      	b.n	8004aee <get_sig_motion_config+0x106>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004aea:	23ff      	movs	r3, #255	@ 0xff
 8004aec:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004aee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <set_sig_motion_config>:
/*!
 * @brief This internal API sets sig-motion configurations like block size,
 * peak 2 peak min, mcr min, peak 2 peak max and mcr max.
 */
static int8_t set_sig_motion_config(const struct bmi3_sig_motion_config *config, struct bmi3_dev *dev)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08e      	sub	sp, #56	@ 0x38
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of sig-motion feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_SIG_MOTION, 0 };
 8004b06:	230d      	movs	r3, #13
 8004b08:	83bb      	strh	r3, [r7, #28]

    /* Array to define the feature configuration */
    uint8_t sig_mot_config[6] = { 0 };
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	833b      	strh	r3, [r7, #24]

    uint8_t data_array[6] = { 0 };
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	2300      	movs	r3, #0
 8004b18:	823b      	strh	r3, [r7, #16]

    uint16_t mcr_min;

    uint16_t mcr_max;

    if (config != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 809d 	beq.w	8004c5c <set_sig_motion_config+0x160>
    {
        /* Set the sig-motion base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004b22:	f107 011c 	add.w	r1, r7, #28
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	2041      	movs	r0, #65	@ 0x41
 8004b2c:	f7fe fac4 	bl	80030b8 <bmi3_set_regs>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMI3_OK)
 8004b36:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 8091 	bne.w	8004c62 <set_sig_motion_config+0x166>
        {
            /* Set block size for lsb 8 bits */
            block_size1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_SIG_BLOCK_SIZE, config->block_size);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	86bb      	strh	r3, [r7, #52]	@ 0x34

            block_size = ((uint16_t)data_array[1] << 8);
 8004b46:	7b7b      	ldrb	r3, [r7, #13]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	867b      	strh	r3, [r7, #50]	@ 0x32

            /* Set block size for msb 8 bits */
            block_size2 = BMI3_SET_BIT_POS0(block_size, BMI3_SIG_BLOCK_SIZE, config->block_size);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	863b      	strh	r3, [r7, #48]	@ 0x30

            /* Set peak to peak minimum for lsb 8 bits */
            p2p_min1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8004b52:	7bbb      	ldrb	r3, [r7, #14]
 8004b54:	b21a      	sxth	r2, r3
 8004b56:	4b46      	ldr	r3, [pc, #280]	@ (8004c70 <set_sig_motion_config+0x174>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	b21a      	sxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	885b      	ldrh	r3, [r3, #2]
 8004b60:	b21b      	sxth	r3, r3
 8004b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b66:	b21b      	sxth	r3, r3
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	b21b      	sxth	r3, r3
 8004b6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            p2p_min = ((uint16_t)data_array[3] << 8);
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set peak to peak minimum for msb 8 bits */
            p2p_min2 = BMI3_SET_BIT_POS0(p2p_min, BMI3_SIG_P2P_MIN, config->peak_2_peak_min);
 8004b74:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8004b78:	4b3d      	ldr	r3, [pc, #244]	@ (8004c70 <set_sig_motion_config+0x174>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	b21a      	sxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	885b      	ldrh	r3, [r3, #2]
 8004b82:	b21b      	sxth	r3, r3
 8004b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b88:	b21b      	sxth	r3, r3
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	b21b      	sxth	r3, r3
 8004b8e:	857b      	strh	r3, [r7, #42]	@ 0x2a

            mcr_min = ((uint16_t)data_array[3] << 8);
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mcr minimum */
            mcr_min = BMI3_SET_BITS(mcr_min, BMI3_SIG_MCR_MIN, config->mcr_min);
 8004b96:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8004b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b9e:	b21a      	sxth	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	791b      	ldrb	r3, [r3, #4]
 8004ba4:	029b      	lsls	r3, r3, #10
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	b21b      	sxth	r3, r3
 8004bac:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set peak to peak maximum for lsb 8 bits */
            p2p_max1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8004bae:	7c3b      	ldrb	r3, [r7, #16]
 8004bb0:	b21a      	sxth	r2, r3
 8004bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c70 <set_sig_motion_config+0x174>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b21a      	sxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	88db      	ldrh	r3, [r3, #6]
 8004bbc:	b21b      	sxth	r3, r3
 8004bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	b21b      	sxth	r3, r3
 8004bc8:	84fb      	strh	r3, [r7, #38]	@ 0x26

            p2p_max = ((uint16_t)data_array[5] << 8);
 8004bca:	7c7b      	ldrb	r3, [r7, #17]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set peak to peak maximum for msb 8 bits */
            p2p_max2 = BMI3_SET_BIT_POS0(p2p_max, BMI3_SIG_P2P_MAX, config->peak_2_peak_max);
 8004bd0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8004bd4:	4b26      	ldr	r3, [pc, #152]	@ (8004c70 <set_sig_motion_config+0x174>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	b21a      	sxth	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	88db      	ldrh	r3, [r3, #6]
 8004bde:	b21b      	sxth	r3, r3
 8004be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be4:	b21b      	sxth	r3, r3
 8004be6:	4313      	orrs	r3, r2
 8004be8:	b21b      	sxth	r3, r3
 8004bea:	847b      	strh	r3, [r7, #34]	@ 0x22

            mcr_max = ((uint16_t)data_array[5] << 8);
 8004bec:	7c7b      	ldrb	r3, [r7, #17]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	843b      	strh	r3, [r7, #32]

            /* Set mcr maximum */
            mcr_max = BMI3_SET_BITS(mcr_max, BMI3_MCR_MAX, config->mcr_max);
 8004bf2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bfa:	b21a      	sxth	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	7a1b      	ldrb	r3, [r3, #8]
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	b21b      	sxth	r3, r3
 8004c04:	4313      	orrs	r3, r2
 8004c06:	b21b      	sxth	r3, r3
 8004c08:	843b      	strh	r3, [r7, #32]

            sig_mot_config[0] = (uint8_t)(block_size1);
 8004c0a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	753b      	strb	r3, [r7, #20]
            sig_mot_config[1] = (uint8_t)(block_size2 >> 8);
 8004c10:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c12:	0a1b      	lsrs	r3, r3, #8
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	757b      	strb	r3, [r7, #21]
            sig_mot_config[2] = (uint8_t)(p2p_min1);
 8004c1a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	75bb      	strb	r3, [r7, #22]
            sig_mot_config[3] = (uint8_t)((p2p_min2 | mcr_min) >> 8);
 8004c20:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004c22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c24:	4313      	orrs	r3, r2
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	75fb      	strb	r3, [r7, #23]
            sig_mot_config[4] = (uint8_t)(p2p_max1);
 8004c30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	763b      	strb	r3, [r7, #24]
            sig_mot_config[5] = (uint8_t)((p2p_max2 | mcr_max) >> 8);
 8004c36:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004c38:	8c3b      	ldrh	r3, [r7, #32]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	0a1b      	lsrs	r3, r3, #8
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	767b      	strb	r3, [r7, #25]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, sig_mot_config, 6, dev);
 8004c46:	f107 0114 	add.w	r1, r7, #20
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2206      	movs	r2, #6
 8004c4e:	2042      	movs	r0, #66	@ 0x42
 8004c50:	f7fe fa32 	bl	80030b8 <bmi3_set_regs>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8004c5a:	e002      	b.n	8004c62 <set_sig_motion_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004c5c:	23ff      	movs	r3, #255	@ 0xff
 8004c5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return rslt;
 8004c62:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3738      	adds	r7, #56	@ 0x38
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	fffffc00 	.word	0xfffffc00

08004c74 <get_tilt_config>:
/*!
 * @brief This internal API gets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t get_tilt_config(struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8004c82:	2321      	movs	r3, #33	@ 0x21
 8004c84:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d057      	beq.n	8004d40 <get_tilt_config+0xcc>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004c90:	f107 0108 	add.w	r1, r7, #8
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2202      	movs	r2, #2
 8004c98:	2041      	movs	r0, #65	@ 0x41
 8004c9a:	f7fe fa0d 	bl	80030b8 <bmi3_set_regs>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8004ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d14c      	bne.n	8004d44 <get_tilt_config+0xd0>
        {
            /* Get the configuration from the feature engine register where tilt feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8004caa:	f107 010c 	add.w	r1, r7, #12
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	2042      	movs	r0, #66	@ 0x42
 8004cb4:	f7fe f99b 	bl	8002fee <bmi3_get_regs>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8004cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d13f      	bne.n	8004d44 <get_tilt_config+0xd0>
            {
                /* Get word to calculate segment size and minimum tilt angle from the same word */
                lsb = ((uint16_t)tilt_config[idx++]);
 8004cc4:	7dbb      	ldrb	r3, [r7, #22]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	75ba      	strb	r2, [r7, #22]
 8004cca:	3318      	adds	r3, #24
 8004ccc:	443b      	add	r3, r7
 8004cce:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004cd2:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8004cd4:	7dbb      	ldrb	r3, [r7, #22]
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	75ba      	strb	r2, [r7, #22]
 8004cda:	3318      	adds	r3, #24
 8004cdc:	443b      	add	r3, r7
 8004cde:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004ce2:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8004ce4:	8a7b      	ldrh	r3, [r7, #18]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	b21a      	sxth	r2, r3
 8004cea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	b21b      	sxth	r3, r3
 8004cf2:	823b      	strh	r3, [r7, #16]

                /* Get segment size */
                config->segment_size = lsb_msb & BMI3_TILT_SEGMENT_SIZE_MASK;
 8004cf4:	8a3b      	ldrh	r3, [r7, #16]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	801a      	strh	r2, [r3, #0]

                /* Get minimum tilt angle */
                config->min_tilt_angle = (lsb_msb & BMI3_TILT_MIN_TILT_ANGLE_MASK) >> BMI3_TILT_MIN_TILT_ANGLE_POS;
 8004cfe:	8a3b      	ldrh	r3, [r7, #16]
 8004d00:	0a1b      	lsrs	r3, r3, #8
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate beta accel mean */
                lsb = ((uint16_t)tilt_config[idx++]);
 8004d08:	7dbb      	ldrb	r3, [r7, #22]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	75ba      	strb	r2, [r7, #22]
 8004d0e:	3318      	adds	r3, #24
 8004d10:	443b      	add	r3, r7
 8004d12:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004d16:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t)tilt_config[idx++]);
 8004d18:	7dbb      	ldrb	r3, [r7, #22]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	75ba      	strb	r2, [r7, #22]
 8004d1e:	3318      	adds	r3, #24
 8004d20:	443b      	add	r3, r7
 8004d22:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004d26:	827b      	strh	r3, [r7, #18]
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8004d28:	8a7b      	ldrh	r3, [r7, #18]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	b21a      	sxth	r2, r3
 8004d2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	b21b      	sxth	r3, r3
 8004d36:	823b      	strh	r3, [r7, #16]

                /* Get beta accel mean */
                config->beta_acc_mean = lsb_msb & BMI3_TILT_BETA_ACC_MEAN_MASK;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8a3a      	ldrh	r2, [r7, #16]
 8004d3c:	809a      	strh	r2, [r3, #4]
 8004d3e:	e001      	b.n	8004d44 <get_tilt_config+0xd0>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004d40:	23ff      	movs	r3, #255	@ 0xff
 8004d42:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <set_tilt_config>:
/*!
 * @brief This internal API sets tilt configurations like segment size,
 * tilt angle, beta accel mean.
 */
static int8_t set_tilt_config(const struct bmi3_tilt_config *config, struct bmi3_dev *dev)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of tilt feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TILT, 0 };
 8004d5a:	2321      	movs	r3, #33	@ 0x21
 8004d5c:	823b      	strh	r3, [r7, #16]

    /* Array to define the feature configuration */
    uint8_t tilt_config[4] = { 0 };
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]

    uint8_t data_array[4] = { 0 };
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]

    uint16_t min_tilt_angle, beta_acc_mean;

    uint16_t segment_size;

    if (config != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d04a      	beq.n	8004e02 <set_tilt_config+0xb2>
    {
        /* Set the tilt base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004d6c:	f107 0110 	add.w	r1, r7, #16
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2202      	movs	r2, #2
 8004d74:	2041      	movs	r0, #65	@ 0x41
 8004d76:	f7fe f99f 	bl	80030b8 <bmi3_set_regs>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8004d7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d13f      	bne.n	8004e06 <set_tilt_config+0xb6>
        {
            /* Set segment size */
            segment_size = BMI3_SET_BIT_POS0(data_array[0], BMI3_TILT_SEGMENT_SIZE, config->segment_size);
 8004d86:	7a3b      	ldrb	r3, [r7, #8]
 8004d88:	b21b      	sxth	r3, r3
 8004d8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d8e:	b21a      	sxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b21b      	sxth	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	b21b      	sxth	r3, r3
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	b21b      	sxth	r3, r3
 8004d9e:	83bb      	strh	r3, [r7, #28]

            min_tilt_angle1 = ((uint16_t)data_array[1] << 8);
 8004da0:	7a7b      	ldrb	r3, [r7, #9]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	837b      	strh	r3, [r7, #26]

            /* Set minimum tilt angle */
            min_tilt_angle = BMI3_SET_BITS(min_tilt_angle1, BMI3_TILT_MIN_TILT_ANGLE, config->min_tilt_angle);
 8004da6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	b21a      	sxth	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	885b      	ldrh	r3, [r3, #2]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	b21b      	sxth	r3, r3
 8004db6:	4313      	orrs	r3, r2
 8004db8:	b21b      	sxth	r3, r3
 8004dba:	833b      	strh	r3, [r7, #24]

            /* Set beta accel mean for lsb 8 bits */
            beta_acc_mean1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	889b      	ldrh	r3, [r3, #4]
 8004dc0:	82fb      	strh	r3, [r7, #22]

            beta_acc_mean = ((uint16_t)data_array[3] << 8);
 8004dc2:	7afb      	ldrb	r3, [r7, #11]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	82bb      	strh	r3, [r7, #20]

            /* Set beta accel mean for msb 8 bits */
            beta_acc_mean2 = BMI3_SET_BIT_POS0(beta_acc_mean, BMI3_TILT_BETA_ACC_MEAN, config->beta_acc_mean);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	889b      	ldrh	r3, [r3, #4]
 8004dcc:	827b      	strh	r3, [r7, #18]

            tilt_config[0] = (uint8_t)segment_size;
 8004dce:	8bbb      	ldrh	r3, [r7, #28]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	733b      	strb	r3, [r7, #12]
            tilt_config[1] = (uint8_t)(min_tilt_angle >> 8);
 8004dd4:	8b3b      	ldrh	r3, [r7, #24]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	737b      	strb	r3, [r7, #13]
            tilt_config[2] = (uint8_t)(beta_acc_mean1);
 8004dde:	8afb      	ldrh	r3, [r7, #22]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	73bb      	strb	r3, [r7, #14]
            tilt_config[3] = (uint8_t)(beta_acc_mean2 >> 8);
 8004de4:	8a7b      	ldrh	r3, [r7, #18]
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	73fb      	strb	r3, [r7, #15]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tilt_config, 4, dev);
 8004dee:	f107 010c 	add.w	r1, r7, #12
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2204      	movs	r2, #4
 8004df6:	2042      	movs	r0, #66	@ 0x42
 8004df8:	f7fe f95e 	bl	80030b8 <bmi3_set_regs>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e001      	b.n	8004e06 <set_tilt_config+0xb6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004e02:	23ff      	movs	r3, #255	@ 0xff
 8004e04:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004e06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <get_orientation_config>:
/*!
 * @brief This internal API gets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t get_orientation_config(struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b086      	sub	sp, #24
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

    /* Array to set the base address of orient feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8004e20:	231c      	movs	r3, #28
 8004e22:	813b      	strh	r3, [r7, #8]

    /* Variable to define the array offset */
    uint8_t idx = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	75bb      	strb	r3, [r7, #22]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d073      	beq.n	8004f16 <get_orientation_config+0x104>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8004e2e:	f107 0108 	add.w	r1, r7, #8
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2202      	movs	r2, #2
 8004e36:	2041      	movs	r0, #65	@ 0x41
 8004e38:	f7fe f93e 	bl	80030b8 <bmi3_set_regs>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8004e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d168      	bne.n	8004f1a <get_orientation_config+0x108>
        {
            /* Get the configuration from the feature engine register where orientation feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8004e48:	f107 010c 	add.w	r1, r7, #12
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2204      	movs	r2, #4
 8004e50:	2042      	movs	r0, #66	@ 0x42
 8004e52:	f7fe f8cc 	bl	8002fee <bmi3_get_regs>
 8004e56:	4603      	mov	r3, r0
 8004e58:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8004e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d15b      	bne.n	8004f1a <get_orientation_config+0x108>
            {
                /* Get word to calculate upside down enable, mode, blocking, theta and hold time
                 * from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8004e62:	7dbb      	ldrb	r3, [r7, #22]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	75ba      	strb	r2, [r7, #22]
 8004e68:	3318      	adds	r3, #24
 8004e6a:	443b      	add	r3, r7
 8004e6c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004e70:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8004e72:	7dbb      	ldrb	r3, [r7, #22]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	75ba      	strb	r2, [r7, #22]
 8004e78:	3318      	adds	r3, #24
 8004e7a:	443b      	add	r3, r7
 8004e7c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8004e84:	8aba      	ldrh	r2, [r7, #20]
 8004e86:	8a7b      	ldrh	r3, [r7, #18]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	823b      	strh	r3, [r7, #16]

                /* Get upside enable */
                config->ud_en = lsb_msb & BMI3_ORIENT_UD_EN_MASK;
 8004e8c:	8a3b      	ldrh	r3, [r7, #16]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	701a      	strb	r2, [r3, #0]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_ORIENT_MODE_MASK) >> BMI3_ORIENT_MODE_POS;
 8004e9a:	8a3b      	ldrh	r3, [r7, #16]
 8004e9c:	105b      	asrs	r3, r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	705a      	strb	r2, [r3, #1]

                /* Get blocking */
                config->blocking = (lsb_msb & BMI3_ORIENT_BLOCKING_MASK) >> BMI3_ORIENT_BLOCKING_POS;
 8004eaa:	8a3b      	ldrh	r3, [r7, #16]
 8004eac:	10db      	asrs	r3, r3, #3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	709a      	strb	r2, [r3, #2]

                /* Get theta */
                config->theta = (lsb_msb & BMI3_ORIENT_THETA_MASK) >> BMI3_ORIENT_THETA_POS;
 8004eba:	8a3b      	ldrh	r3, [r7, #16]
 8004ebc:	115b      	asrs	r3, r3, #5
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	70da      	strb	r2, [r3, #3]

                /* Get hold time */
                config->hold_time = (lsb_msb & BMI3_ORIENT_HOLD_TIME_MASK) >> BMI3_ORIENT_HOLD_TIME_POS;
 8004eca:	8a3b      	ldrh	r3, [r7, #16]
 8004ecc:	0adb      	lsrs	r3, r3, #11
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	711a      	strb	r2, [r3, #4]

                /* Get word to calculate slope threshold and hysteresis from the same word */
                lsb = (uint16_t) orient_config[idx++];
 8004ed6:	7dbb      	ldrb	r3, [r7, #22]
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	75ba      	strb	r2, [r7, #22]
 8004edc:	3318      	adds	r3, #24
 8004ede:	443b      	add	r3, r7
 8004ee0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004ee4:	82bb      	strh	r3, [r7, #20]
                msb = ((uint16_t) orient_config[idx++] << 8);
 8004ee6:	7dbb      	ldrb	r3, [r7, #22]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	75ba      	strb	r2, [r7, #22]
 8004eec:	3318      	adds	r3, #24
 8004eee:	443b      	add	r3, r7
 8004ef0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	827b      	strh	r3, [r7, #18]
                lsb_msb = lsb | msb;
 8004ef8:	8aba      	ldrh	r2, [r7, #20]
 8004efa:	8a7b      	ldrh	r3, [r7, #18]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	823b      	strh	r3, [r7, #16]

                /* Get slope threshold */
                config->slope_thres = lsb_msb & BMI3_ORIENT_SLOPE_THRES_MASK;
 8004f00:	8a3b      	ldrh	r3, [r7, #16]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	719a      	strb	r2, [r3, #6]

                /* Get hysteresis */
                config->hysteresis = (lsb_msb & BMI3_ORIENT_HYST_MASK) >> BMI3_ORIENT_HYST_POS;
 8004f08:	8a3b      	ldrh	r3, [r7, #16]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	715a      	strb	r2, [r3, #5]
 8004f14:	e001      	b.n	8004f1a <get_orientation_config+0x108>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8004f16:	23ff      	movs	r3, #255	@ 0xff
 8004f18:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <set_orientation_config>:
/*!
 * @brief This internal API sets orientation configurations like upside enable,
 * mode, blocking, theta, hold time, slope threshold and hysteresis.
 */
static int8_t set_orientation_config(const struct bmi3_orientation_config *config, struct bmi3_dev *dev)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b08a      	sub	sp, #40	@ 0x28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t orient_config[4] = { 0 };
 8004f30:	2300      	movs	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of orient feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_ORIENT, 0 };
 8004f34:	231c      	movs	r3, #28
 8004f36:	81bb      	strh	r3, [r7, #12]

    uint16_t ud_en, mode, blocking, theta, theta1, holdtime, slope_thres, hyst;

    if (config != NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80a3 	beq.w	8005086 <set_orientation_config+0x160>
    {
        /* Set the orient base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8004f40:	f107 010c 	add.w	r1, r7, #12
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2202      	movs	r2, #2
 8004f48:	2041      	movs	r0, #65	@ 0x41
 8004f4a:	f7fe f8b5 	bl	80030b8 <bmi3_set_regs>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMI3_OK)
 8004f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 8097 	bne.w	800508c <set_orientation_config+0x166>
        {
            /* Set upside down bit */
            ud_en = BMI3_SET_BIT_POS0(orient_config[0], BMI3_ORIENT_UD_EN, config->ud_en);
 8004f5e:	7c3b      	ldrb	r3, [r7, #16]
 8004f60:	b21b      	sxth	r3, r3
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	b21a      	sxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b21b      	sxth	r3, r3
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	b21b      	sxth	r3, r3
 8004f74:	4313      	orrs	r3, r2
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Set mode */
            mode = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_MODE, config->mode);
 8004f7a:	7c3b      	ldrb	r3, [r7, #16]
 8004f7c:	b21b      	sxth	r3, r3
 8004f7e:	f023 0306 	bic.w	r3, r3, #6
 8004f82:	b21a      	sxth	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	b21b      	sxth	r3, r3
 8004f8c:	f003 0306 	and.w	r3, r3, #6
 8004f90:	b21b      	sxth	r3, r3
 8004f92:	4313      	orrs	r3, r2
 8004f94:	b21b      	sxth	r3, r3
 8004f96:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set blocking */
            blocking = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_BLOCKING, config->blocking);
 8004f98:	7c3b      	ldrb	r3, [r7, #16]
 8004f9a:	b21b      	sxth	r3, r3
 8004f9c:	f023 0318 	bic.w	r3, r3, #24
 8004fa0:	b21a      	sxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	789b      	ldrb	r3, [r3, #2]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	b21b      	sxth	r3, r3
 8004faa:	f003 0318 	and.w	r3, r3, #24
 8004fae:	b21b      	sxth	r3, r3
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	b21b      	sxth	r3, r3
 8004fb4:	843b      	strh	r3, [r7, #32]

            /* Set theta for lsb 8 bits */
            theta1 = BMI3_SET_BITS(orient_config[0], BMI3_ORIENT_THETA, config->theta);
 8004fb6:	7c3b      	ldrb	r3, [r7, #16]
 8004fb8:	b21b      	sxth	r3, r3
 8004fba:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8004fbe:	b21a      	sxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	78db      	ldrb	r3, [r3, #3]
 8004fc4:	015b      	lsls	r3, r3, #5
 8004fc6:	b21b      	sxth	r3, r3
 8004fc8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8004fcc:	b21b      	sxth	r3, r3
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	b21b      	sxth	r3, r3
 8004fd2:	83fb      	strh	r3, [r7, #30]

            theta = ((uint16_t)orient_config[1] << 8);
 8004fd4:	7c7b      	ldrb	r3, [r7, #17]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	83bb      	strh	r3, [r7, #28]

            /* Set theta for msb 8 bits */
            theta = BMI3_SET_BITS(theta, BMI3_ORIENT_THETA, config->theta);
 8004fda:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004fde:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8004fe2:	b21a      	sxth	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	78db      	ldrb	r3, [r3, #3]
 8004fe8:	015b      	lsls	r3, r3, #5
 8004fea:	b21b      	sxth	r3, r3
 8004fec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8004ff0:	b21b      	sxth	r3, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	b21b      	sxth	r3, r3
 8004ff6:	83bb      	strh	r3, [r7, #28]

            /* Set hold time */
            holdtime = BMI3_SET_BITS(orient_config[1], BMI3_ORIENT_HOLD_TIME, config->hold_time);
 8004ff8:	7c7b      	ldrb	r3, [r7, #17]
 8004ffa:	b21a      	sxth	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	791b      	ldrb	r3, [r3, #4]
 8005000:	02db      	lsls	r3, r3, #11
 8005002:	b21b      	sxth	r3, r3
 8005004:	4313      	orrs	r3, r2
 8005006:	b21b      	sxth	r3, r3
 8005008:	837b      	strh	r3, [r7, #26]

            /* Set slope threshold */
            slope_thres = BMI3_SET_BIT_POS0(orient_config[2], BMI3_ORIENT_SLOPE_THRES, config->slope_thres);
 800500a:	7cbb      	ldrb	r3, [r7, #18]
 800500c:	b21b      	sxth	r3, r3
 800500e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005012:	b21a      	sxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	799b      	ldrb	r3, [r3, #6]
 8005018:	b21b      	sxth	r3, r3
 800501a:	4313      	orrs	r3, r2
 800501c:	b21b      	sxth	r3, r3
 800501e:	833b      	strh	r3, [r7, #24]

            /* Set hysteresis */
            hyst = BMI3_SET_BITS(orient_config[3], BMI3_ORIENT_HYST, config->hysteresis);
 8005020:	7cfb      	ldrb	r3, [r7, #19]
 8005022:	b21a      	sxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	795b      	ldrb	r3, [r3, #5]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	b21b      	sxth	r3, r3
 800502c:	4313      	orrs	r3, r2
 800502e:	b21b      	sxth	r3, r3
 8005030:	82fb      	strh	r3, [r7, #22]

            orient_config[0] = (uint8_t)(ud_en | mode | blocking | theta1);
 8005032:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005034:	b2da      	uxtb	r2, r3
 8005036:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005038:	b2db      	uxtb	r3, r3
 800503a:	4313      	orrs	r3, r2
 800503c:	b2da      	uxtb	r2, r3
 800503e:	8c3b      	ldrh	r3, [r7, #32]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	4313      	orrs	r3, r2
 8005044:	b2da      	uxtb	r2, r3
 8005046:	8bfb      	ldrh	r3, [r7, #30]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	4313      	orrs	r3, r2
 800504c:	b2db      	uxtb	r3, r3
 800504e:	743b      	strb	r3, [r7, #16]
            orient_config[1] = (uint8_t)((theta | holdtime) >> 8);
 8005050:	8bba      	ldrh	r2, [r7, #28]
 8005052:	8b7b      	ldrh	r3, [r7, #26]
 8005054:	4313      	orrs	r3, r2
 8005056:	b29b      	uxth	r3, r3
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	b29b      	uxth	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	747b      	strb	r3, [r7, #17]
            orient_config[2] = (uint8_t)(slope_thres);
 8005060:	8b3b      	ldrh	r3, [r7, #24]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	74bb      	strb	r3, [r7, #18]
            orient_config[3] = (uint8_t)(hyst >> 8);
 8005066:	8afb      	ldrh	r3, [r7, #22]
 8005068:	0a1b      	lsrs	r3, r3, #8
 800506a:	b29b      	uxth	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	74fb      	strb	r3, [r7, #19]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, orient_config, 4, dev);
 8005070:	f107 0110 	add.w	r1, r7, #16
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2204      	movs	r2, #4
 8005078:	2042      	movs	r0, #66	@ 0x42
 800507a:	f7fe f81d 	bl	80030b8 <bmi3_set_regs>
 800507e:	4603      	mov	r3, r0
 8005080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005084:	e002      	b.n	800508c <set_orientation_config+0x166>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8005086:	23ff      	movs	r3, #255	@ 0xff
 8005088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800508c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005090:	4618      	mov	r0, r3
 8005092:	3728      	adds	r7, #40	@ 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <get_step_config>:
/*!
 * @brief This internal API gets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t get_step_config(struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08c      	sub	sp, #48	@ 0x30
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	f107 0314 	add.w	r3, r7, #20
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	60da      	str	r2, [r3, #12]
 80050b4:	611a      	str	r2, [r3, #16]

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 80050b6:	2310      	movs	r3, #16
 80050b8:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint16_t msb;

    /* Variable to define word */
    uint16_t lsb_msb;

    if (config != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 81e7 	beq.w	8005496 <get_step_config+0x3fe>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80050c8:	f107 010c 	add.w	r1, r7, #12
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2202      	movs	r2, #2
 80050d0:	2041      	movs	r0, #65	@ 0x41
 80050d2:	f7fd fff1 	bl	80030b8 <bmi3_set_regs>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 80050dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f040 81db 	bne.w	800549c <get_step_config+0x404>
        {
            /* Get the configuration from the feature engine register where step counter feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 80050e6:	f107 0110 	add.w	r1, r7, #16
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2218      	movs	r2, #24
 80050ee:	2042      	movs	r0, #66	@ 0x42
 80050f0:	f7fd ff7d 	bl	8002fee <bmi3_get_regs>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (rslt == BMI3_OK)
 80050fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f040 81cc 	bne.w	800549c <get_step_config+0x404>
            {
                /* Get word to calculate water-mark level, reset counter from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8005104:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800510e:	3330      	adds	r3, #48	@ 0x30
 8005110:	443b      	add	r3, r7
 8005112:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005116:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8005118:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005122:	3330      	adds	r3, #48	@ 0x30
 8005124:	443b      	add	r3, r7
 8005126:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800512a:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800512c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	b21a      	sxth	r2, r3
 8005132:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005136:	4313      	orrs	r3, r2
 8005138:	b21b      	sxth	r3, r3
 800513a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get water-mark level */
                config->watermark_level = lsb_msb & BMI3_STEP_WATERMARK_MASK;
 800513c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800513e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005142:	b29a      	uxth	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	801a      	strh	r2, [r3, #0]

                /* Get reset counter */
                config->reset_counter = (lsb_msb & BMI3_STEP_RESET_COUNTER_MASK) >> BMI3_STEP_RESET_COUNTER_POS;
 8005148:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800514a:	129b      	asrs	r3, r3, #10
 800514c:	b29b      	uxth	r3, r3
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	805a      	strh	r2, [r3, #2]

                /* Get word to calculate minimum distance up */
                lsb = ((uint16_t)step_config[idx++]);
 8005158:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005162:	3330      	adds	r3, #48	@ 0x30
 8005164:	443b      	add	r3, r7
 8005166:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800516a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800516c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005176:	3330      	adds	r3, #48	@ 0x30
 8005178:	443b      	add	r3, r7
 800517a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800517e:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8005180:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	b21a      	sxth	r2, r3
 8005186:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800518a:	4313      	orrs	r3, r2
 800518c:	b21b      	sxth	r3, r3
 800518e:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get minimum distance up */
                config->env_min_dist_up = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_UP_MASK);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005194:	809a      	strh	r2, [r3, #4]

                /* Get word to calculate env coefficient up */
                lsb = ((uint16_t)step_config[idx++]);
 8005196:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80051a0:	3330      	adds	r3, #48	@ 0x30
 80051a2:	443b      	add	r3, r7
 80051a4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80051a8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80051aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80051b4:	3330      	adds	r3, #48	@ 0x30
 80051b6:	443b      	add	r3, r7
 80051b8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80051bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80051be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	b21a      	sxth	r2, r3
 80051c4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80051c8:	4313      	orrs	r3, r2
 80051ca:	b21b      	sxth	r3, r3
 80051cc:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient up */
                config->env_coef_up = (lsb_msb & BMI3_STEP_ENV_COEF_UP_MASK);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80051d2:	80da      	strh	r2, [r3, #6]

                /* Get word to calculate env minimum distance down */
                lsb = ((uint16_t)step_config[idx++]);
 80051d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80051de:	3330      	adds	r3, #48	@ 0x30
 80051e0:	443b      	add	r3, r7
 80051e2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80051e6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80051e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80051f2:	3330      	adds	r3, #48	@ 0x30
 80051f4:	443b      	add	r3, r7
 80051f6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80051fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80051fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	b21a      	sxth	r2, r3
 8005202:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005206:	4313      	orrs	r3, r2
 8005208:	b21b      	sxth	r3, r3
 800520a:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env minimum distance down */
                config->env_min_dist_down = (lsb_msb & BMI3_STEP_ENV_MIN_DIST_DOWN_MASK);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005210:	811a      	strh	r2, [r3, #8]

                /* Get word to calculate env coefficient down */
                lsb = ((uint16_t)step_config[idx++]);
 8005212:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800521c:	3330      	adds	r3, #48	@ 0x30
 800521e:	443b      	add	r3, r7
 8005220:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005224:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8005226:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005230:	3330      	adds	r3, #48	@ 0x30
 8005232:	443b      	add	r3, r7
 8005234:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005238:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800523a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	b21a      	sxth	r2, r3
 8005240:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005244:	4313      	orrs	r3, r2
 8005246:	b21b      	sxth	r3, r3
 8005248:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get env coefficient down */
                config->env_coef_down = (lsb_msb & BMI3_STEP_ENV_COEF_DOWN_MASK);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800524e:	815a      	strh	r2, [r3, #10]

                /* Get word to calculate mean val decay */
                lsb = ((uint16_t)step_config[idx++]);
 8005250:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800525a:	3330      	adds	r3, #48	@ 0x30
 800525c:	443b      	add	r3, r7
 800525e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005262:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8005264:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800526e:	3330      	adds	r3, #48	@ 0x30
 8005270:	443b      	add	r3, r7
 8005272:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005276:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8005278:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	b21a      	sxth	r2, r3
 800527e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005282:	4313      	orrs	r3, r2
 8005284:	b21b      	sxth	r3, r3
 8005286:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean val decay */
                config->mean_val_decay = (lsb_msb & BMI3_STEP_MEAN_VAL_DECAY_MASK);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800528c:	819a      	strh	r2, [r3, #12]

                /* Get word to calculate mean step duration */
                lsb = ((uint16_t)step_config[idx++]);
 800528e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005298:	3330      	adds	r3, #48	@ 0x30
 800529a:	443b      	add	r3, r7
 800529c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80052a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80052ac:	3330      	adds	r3, #48	@ 0x30
 80052ae:	443b      	add	r3, r7
 80052b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80052b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	b21a      	sxth	r2, r3
 80052bc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b21b      	sxth	r3, r3
 80052c4:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get mean step duration */
                config->mean_step_dur = (lsb_msb & BMI3_STEP_MEAN_STEP_DUR_MASK);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80052ca:	81da      	strh	r2, [r3, #14]

                /* Get word to calculate step buffer size, filter cascade enabled and step counter increment
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80052cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80052d6:	3330      	adds	r3, #48	@ 0x30
 80052d8:	443b      	add	r3, r7
 80052da:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80052e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80052ea:	3330      	adds	r3, #48	@ 0x30
 80052ec:	443b      	add	r3, r7
 80052ee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80052f2:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80052f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	b21a      	sxth	r2, r3
 80052fa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80052fe:	4313      	orrs	r3, r2
 8005300:	b21b      	sxth	r3, r3
 8005302:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step buffer size */
                config->step_buffer_size = lsb_msb & BMI3_STEP_BUFFER_SIZE_MASK;
 8005304:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	821a      	strh	r2, [r3, #16]

                /* Get filter cascade enable */
                config->filter_cascade_enabled = (lsb_msb & BMI3_STEP_FILTER_CASCADE_ENABLED_MASK) >>
 8005310:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005312:	111b      	asrs	r3, r3, #4
 8005314:	b29b      	uxth	r3, r3
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	825a      	strh	r2, [r3, #18]
                                                 BMI3_STEP_FILTER_CASCADE_ENABLED_POS;

                /* Get step counter increment */
                config->step_counter_increment = (lsb_msb & BMI3_STEP_COUNTER_INCREMENT_MASK) >>
 8005320:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	829a      	strh	r2, [r3, #20]
                                                 BMI3_STEP_COUNTER_INCREMENT_POS;

                /* Get word to calculate peak duration minimum walking and peak duration minimum running */
                lsb = ((uint16_t)step_config[idx++]);
 800532a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005334:	3330      	adds	r3, #48	@ 0x30
 8005336:	443b      	add	r3, r7
 8005338:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800533c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800533e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005348:	3330      	adds	r3, #48	@ 0x30
 800534a:	443b      	add	r3, r7
 800534c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005350:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8005352:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	b21a      	sxth	r2, r3
 8005358:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800535c:	4313      	orrs	r3, r2
 800535e:	b21b      	sxth	r3, r3
 8005360:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get peak duration minimum walking */
                config->peak_duration_min_walking = lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_WALKING_MASK;
 8005362:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005364:	b2db      	uxtb	r3, r3
 8005366:	b29a      	uxth	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	82da      	strh	r2, [r3, #22]

                /* Get peak duration minimum running */
                config->peak_duration_min_running = (lsb_msb & BMI3_STEP_PEAK_DURATION_MIN_RUNNING_MASK) >>
 800536c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800536e:	0a1b      	lsrs	r3, r3, #8
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	831a      	strh	r2, [r3, #24]
                                                    BMI3_STEP_PEAK_DURATION_MIN_RUNNING_POS;

                /* Get word to calculate activity detection factor and activity detection threshold
                 * from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8005376:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005380:	3330      	adds	r3, #48	@ 0x30
 8005382:	443b      	add	r3, r7
 8005384:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005388:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 800538a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005394:	3330      	adds	r3, #48	@ 0x30
 8005396:	443b      	add	r3, r7
 8005398:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800539c:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 800539e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	b21a      	sxth	r2, r3
 80053a4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80053a8:	4313      	orrs	r3, r2
 80053aa:	b21b      	sxth	r3, r3
 80053ac:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get activity detection factor */
                config->activity_detection_factor = lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_FACTOR_MASK;
 80053ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	835a      	strh	r2, [r3, #26]

                /* Get activity detection threshold */
                config->activity_detection_thres = (lsb_msb & BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_MASK) >>
 80053ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	b29a      	uxth	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	839a      	strh	r2, [r3, #28]
                                                   BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD_POS;

                /* Get word to calculate step duration max and step duration window from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 80053c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80053ce:	3330      	adds	r3, #48	@ 0x30
 80053d0:	443b      	add	r3, r7
 80053d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80053d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 80053d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80053e2:	3330      	adds	r3, #48	@ 0x30
 80053e4:	443b      	add	r3, r7
 80053e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80053ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 80053ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	b21a      	sxth	r2, r3
 80053f2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration max */
                config->step_duration_max = lsb_msb & BMI3_STEP_DURATION_MAX_MASK;
 80053fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	83da      	strh	r2, [r3, #30]

                /* Get step duration window */
                config->step_duration_window = (lsb_msb & BMI3_STEP_DURATION_WINDOW_MASK) >>
 8005406:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	841a      	strh	r2, [r3, #32]
                                               BMI3_STEP_DURATION_WINDOW_POS;

                /* Get word to calculate step duration pp enabled, duration threshold,
                 * mean crossing pp enabled, mcr threshold, sc_12_res from the same word */
                lsb = ((uint16_t)step_config[idx++]);
 8005410:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800541a:	3330      	adds	r3, #48	@ 0x30
 800541c:	443b      	add	r3, r7
 800541e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005422:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                msb = ((uint16_t)step_config[idx++]);
 8005424:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800542e:	3330      	adds	r3, #48	@ 0x30
 8005430:	443b      	add	r3, r7
 8005432:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005436:	857b      	strh	r3, [r7, #42]	@ 0x2a
                lsb_msb = (uint16_t)(lsb | (msb << 8));
 8005438:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	b21a      	sxth	r2, r3
 800543e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005442:	4313      	orrs	r3, r2
 8005444:	b21b      	sxth	r3, r3
 8005446:	853b      	strh	r3, [r7, #40]	@ 0x28

                /* Get step duration pp enable */
                config->step_duration_pp_enabled = lsb_msb & BMI3_STEP_DURATION_PP_ENABLED_MASK;
 8005448:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	845a      	strh	r2, [r3, #34]	@ 0x22

                /* Get step duration threshold */
                config->step_duration_thres = (lsb_msb & BMI3_STEP_DURATION_THRESHOLD_MASK) >>
 8005454:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005456:	105b      	asrs	r3, r3, #1
 8005458:	b29b      	uxth	r3, r3
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	b29a      	uxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	849a      	strh	r2, [r3, #36]	@ 0x24
                                              BMI3_STEP_DURATION_THRESHOLD_POS;

                /* Get mean crossing pp enabled */
                config->mean_crossing_pp_enabled = (lsb_msb & BMI3_STEP_MEAN_CROSSING_PP_ENABLED_MASK) >>
 8005464:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005466:	111b      	asrs	r3, r3, #4
 8005468:	b29b      	uxth	r3, r3
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	84da      	strh	r2, [r3, #38]	@ 0x26
                                                   BMI3_STEP_MEAN_CROSSING_PP_ENABLED_POS;

                /* Get mcr threshold */
                config->mcr_threshold = (lsb_msb & BMI3_STEP_MCR_THRESHOLD_MASK) >> BMI3_STEP_MCR_THRESHOLD_POS;
 8005474:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005476:	115b      	asrs	r3, r3, #5
 8005478:	b29b      	uxth	r3, r3
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	851a      	strh	r2, [r3, #40]	@ 0x28

                /* Get sc_12_res selection */
                config->sc_12_res = (lsb_msb & BMI3_STEP_SC_12_RES_MASK) >> BMI3_STEP_SC_12_RES_POS;
 8005484:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005486:	129b      	asrs	r3, r3, #10
 8005488:	b29b      	uxth	r3, r3
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	b29a      	uxth	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005494:	e002      	b.n	800549c <get_step_config+0x404>
            }
        }
    }
    else
    {
        rslt = BMI3_E_INVALID_SENSOR;
 8005496:	23fa      	movs	r3, #250	@ 0xfa
 8005498:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800549c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3730      	adds	r7, #48	@ 0x30
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <set_step_config>:
/*!
 * @brief This internal API sets step counter configurations like water-mark level,
 * reset counter, step counter parameters and sc_12_res.
 */
static int8_t set_step_config(const struct bmi3_step_counter_config *config, struct bmi3_dev *dev)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b0a4      	sub	sp, #144	@ 0x90
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to set the base address of step counter feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_STEP_CNT, 0 };
 80054b2:	2310      	movs	r3, #16
 80054b4:	873b      	strh	r3, [r7, #56]	@ 0x38

    /* Array to define the feature configuration */
    uint8_t step_config[24] = { 0 };
 80054b6:	2300      	movs	r3, #0
 80054b8:	623b      	str	r3, [r7, #32]
 80054ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	605a      	str	r2, [r3, #4]
 80054c4:	609a      	str	r2, [r3, #8]
 80054c6:	60da      	str	r2, [r3, #12]
 80054c8:	611a      	str	r2, [r3, #16]

    uint8_t data_array[24] = { 0 };
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	f107 030c 	add.w	r3, r7, #12
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	609a      	str	r2, [r3, #8]
 80054da:	60da      	str	r2, [r3, #12]
 80054dc:	611a      	str	r2, [r3, #16]
    uint16_t reset_counter, activity_detection_factor, step_duration_max, step_duration_window,
             step_duration_pp_enabled;

    uint16_t step_duration_threshold, mean_crossing_pp_enabled, mcr_threshold1, mcr_threshold2, sc_12_res;

    if (config != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8259 	beq.w	8005998 <set_step_config+0x4f0>
    {
        /* Set the step counter base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80054e6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2202      	movs	r2, #2
 80054ee:	2041      	movs	r0, #65	@ 0x41
 80054f0:	f7fd fde2 	bl	80030b8 <bmi3_set_regs>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

        if (rslt == BMI3_OK)
 80054fa:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f040 824d 	bne.w	800599e <set_step_config+0x4f6>
        {
            /* Set water-mark for lsb 8 bits */
            watermark1 = BMI3_SET_BIT_POS0(data_array[0], BMI3_STEP_WATERMARK, config->watermark_level);
 8005504:	7a3b      	ldrb	r3, [r7, #8]
 8005506:	b21a      	sxth	r2, r3
 8005508:	4bac      	ldr	r3, [pc, #688]	@ (80057bc <set_step_config+0x314>)
 800550a:	4013      	ands	r3, r2
 800550c:	b21a      	sxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b21b      	sxth	r3, r3
 8005514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005518:	b21b      	sxth	r3, r3
 800551a:	4313      	orrs	r3, r2
 800551c:	b21b      	sxth	r3, r3
 800551e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

            watermark = ((uint16_t)data_array[1] << 8);
 8005522:	7a7b      	ldrb	r3, [r7, #9]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

            /* Set water-mark for msb 8 bits */
            watermark2 = BMI3_SET_BIT_POS0(watermark, BMI3_STEP_WATERMARK, config->watermark_level);
 800552a:	f9b7 208a 	ldrsh.w	r2, [r7, #138]	@ 0x8a
 800552e:	4ba3      	ldr	r3, [pc, #652]	@ (80057bc <set_step_config+0x314>)
 8005530:	4013      	ands	r3, r2
 8005532:	b21a      	sxth	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b21b      	sxth	r3, r3
 800553a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553e:	b21b      	sxth	r3, r3
 8005540:	4313      	orrs	r3, r2
 8005542:	b21b      	sxth	r3, r3
 8005544:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

            reset_counter = ((uint16_t)data_array[1] << 8);
 8005548:	7a7b      	ldrb	r3, [r7, #9]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set reset counter */
            reset_counter = BMI3_SET_BITS(reset_counter, BMI3_STEP_RESET_COUNTER, config->reset_counter);
 8005550:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8005554:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005558:	b21a      	sxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	885b      	ldrh	r3, [r3, #2]
 800555e:	029b      	lsls	r3, r3, #10
 8005560:	b21b      	sxth	r3, r3
 8005562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005566:	b21b      	sxth	r3, r3
 8005568:	4313      	orrs	r3, r2
 800556a:	b21b      	sxth	r3, r3
 800556c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

            /* Set env_min_dist_up for lsb 8 bits */
            env_min_dist_up1 = BMI3_SET_BIT_POS0(data_array[2], BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	889b      	ldrh	r3, [r3, #4]
 8005574:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84

            env_min_dist_up = ((uint16_t)data_array[3] << 8);
 8005578:	7afb      	ldrb	r3, [r7, #11]
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

            /* Set env_min_dist_up for msb 8 bits */
            env_min_dist_up2 = BMI3_SET_BIT_POS0(env_min_dist_up, BMI3_STEP_ENV_MIN_DIST_UP, config->env_min_dist_up);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	889b      	ldrh	r3, [r3, #4]
 8005584:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

            /* Set env_coef_up for lsb 8 bits */
            env_coef_up1 = BMI3_SET_BIT_POS0(data_array[4], BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	88db      	ldrh	r3, [r3, #6]
 800558c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

            env_coef_up = ((uint16_t)data_array[5] << 8);
 8005590:	7b7b      	ldrb	r3, [r7, #13]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

            /* Set env_coef_up for msb 8 bits */
            env_coef_up2 = BMI3_SET_BIT_POS0(env_coef_up, BMI3_STEP_ENV_COEF_UP, config->env_coef_up);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	88db      	ldrh	r3, [r3, #6]
 800559c:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

            /* Set env_min_dist_down for lsb 8 bits */
            env_min_dist_down1 =
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	891b      	ldrh	r3, [r3, #8]
 80055a4:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
                BMI3_SET_BIT_POS0(data_array[6], BMI3_STEP_ENV_MIN_DIST_DOWN, config->env_min_dist_down);

            env_min_dist_down = ((uint16_t)data_array[7] << 8);
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Set env_min_dist_down for msb 8 bits */
            env_min_dist_down2 = BMI3_SET_BIT_POS0(env_min_dist_down,
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	891b      	ldrh	r3, [r3, #8]
 80055b4:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
                                                   BMI3_STEP_ENV_MIN_DIST_DOWN,
                                                   config->env_min_dist_down);

            /* Set env_coef_down for lsb 8 bits */
            env_coef_down1 = BMI3_SET_BIT_POS0(data_array[8], BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	895b      	ldrh	r3, [r3, #10]
 80055bc:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

            env_coef_down = ((uint16_t)data_array[9] << 8);
 80055c0:	7c7b      	ldrb	r3, [r7, #17]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

            /* Set env_coef_down for msb 8 bits */
            env_coef_down2 = BMI3_SET_BIT_POS0(env_coef_down, BMI3_STEP_ENV_COEF_DOWN, config->env_coef_down);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	895b      	ldrh	r3, [r3, #10]
 80055cc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

            /* Set mean_val_decay for lsb 8 bits */
            mean_val_decay1 = BMI3_SET_BIT_POS0(data_array[10], BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	899b      	ldrh	r3, [r3, #12]
 80055d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

            mean_val_decay = ((uint16_t)data_array[11] << 8);
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

            /* Set mean_val_decay for msb 8 bits */
            mean_val_decay2 = BMI3_SET_BIT_POS0(mean_val_decay, BMI3_STEP_MEAN_VAL_DECAY, config->mean_val_decay);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	899b      	ldrh	r3, [r3, #12]
 80055e4:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

            /* Set mean_step_dur for lsb 8 bits */
            mean_step_dur1 = BMI3_SET_BIT_POS0(data_array[12], BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	89db      	ldrh	r3, [r3, #14]
 80055ec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

            mean_step_dur = ((uint16_t)data_array[13] << 8);
 80055f0:	7d7b      	ldrb	r3, [r7, #21]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

            /* Set mean_step_dur for msb 8 bits */
            mean_step_dur2 = BMI3_SET_BIT_POS0(mean_step_dur, BMI3_STEP_MEAN_STEP_DUR, config->mean_step_dur);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	89db      	ldrh	r3, [r3, #14]
 80055fc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

            /* Set step buffer size */
            step_buffer_size = BMI3_SET_BIT_POS0(data_array[14], BMI3_STEP_BUFFER_SIZE, config->step_buffer_size);
 8005600:	7dbb      	ldrb	r3, [r7, #22]
 8005602:	b21b      	sxth	r3, r3
 8005604:	f023 030f 	bic.w	r3, r3, #15
 8005608:	b21a      	sxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8a1b      	ldrh	r3, [r3, #16]
 800560e:	b21b      	sxth	r3, r3
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	b21b      	sxth	r3, r3
 8005616:	4313      	orrs	r3, r2
 8005618:	b21b      	sxth	r3, r3
 800561a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

            /* Set filter cascade */
            filter_cascade_enabled = BMI3_SET_BITS(data_array[14],
 800561e:	7dbb      	ldrb	r3, [r7, #22]
 8005620:	b21b      	sxth	r3, r3
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	b21a      	sxth	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8a5b      	ldrh	r3, [r3, #18]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	b21b      	sxth	r3, r3
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	b21b      	sxth	r3, r3
 8005636:	4313      	orrs	r3, r2
 8005638:	b21b      	sxth	r3, r3
 800563a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                                   BMI3_STEP_FILTER_CASCADE_ENABLED,
                                                   config->filter_cascade_enabled);

            /* Set step_counter_increment for lsb 8 bits */
            step_counter_increment1 = BMI3_SET_BITS(data_array[14],
 800563e:	7dbb      	ldrb	r3, [r7, #22]
 8005640:	b21b      	sxth	r3, r3
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	b21a      	sxth	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8a9b      	ldrh	r3, [r3, #20]
 800564c:	015b      	lsls	r3, r3, #5
 800564e:	b21b      	sxth	r3, r3
 8005650:	4313      	orrs	r3, r2
 8005652:	b21b      	sxth	r3, r3
 8005654:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            step_counter_increment2 = ((uint16_t)data_array[15] << 8);
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Set step_counter_increment for msb 8 bits */
            step_counter_increment2 = BMI3_SET_BITS(step_counter_increment2,
 8005660:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	b21a      	sxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8a9b      	ldrh	r3, [r3, #20]
 800566e:	015b      	lsls	r3, r3, #5
 8005670:	b21b      	sxth	r3, r3
 8005672:	4313      	orrs	r3, r2
 8005674:	b21b      	sxth	r3, r3
 8005676:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
                                                    BMI3_STEP_COUNTER_INCREMENT,
                                                    config->step_counter_increment);

            /* Set peak_duration_min_walking for lsb 8 bits */
            peak_duration_min_walking = BMI3_SET_BIT_POS0(data_array[16],
 800567a:	7e3b      	ldrb	r3, [r7, #24]
 800567c:	b21b      	sxth	r3, r3
 800567e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005682:	b21a      	sxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8adb      	ldrh	r3, [r3, #22]
 8005688:	b21b      	sxth	r3, r3
 800568a:	b2db      	uxtb	r3, r3
 800568c:	b21b      	sxth	r3, r3
 800568e:	4313      	orrs	r3, r2
 8005690:	b21b      	sxth	r3, r3
 8005692:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                                                          BMI3_STEP_PEAK_DURATION_MIN_WALKING,
                                                          config->peak_duration_min_walking);

            peak_duration_min_running = ((uint16_t)data_array[17] << 8);
 8005696:	7e7b      	ldrb	r3, [r7, #25]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

            /* Set peak_duration_min_walking for msb 8 bits */
            peak_duration_min_running = BMI3_SET_BITS(peak_duration_min_running,
 800569e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	b21a      	sxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8b1b      	ldrh	r3, [r3, #24]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	b21b      	sxth	r3, r3
 80056ae:	4313      	orrs	r3, r2
 80056b0:	b21b      	sxth	r3, r3
 80056b2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                                                      BMI3_STEP_PEAK_DURATION_MIN_RUNNING,
                                                      config->peak_duration_min_running);

            /* Set activity detection fsctor */
            activity_detection_factor = BMI3_SET_BIT_POS0(data_array[18],
 80056b6:	7ebb      	ldrb	r3, [r7, #26]
 80056b8:	b21b      	sxth	r3, r3
 80056ba:	f023 030f 	bic.w	r3, r3, #15
 80056be:	b21a      	sxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8b5b      	ldrh	r3, [r3, #26]
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	4313      	orrs	r3, r2
 80056ce:	b21b      	sxth	r3, r3
 80056d0:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                                                          BMI3_STEP_ACTIVITY_DETECTION_FACTOR,
                                                          config->activity_detection_factor);

            /* Set activity_detection_threshold for lsb 8 bits */
            activity_detection_threshold1 = BMI3_SET_BITS(data_array[18],
 80056d4:	7ebb      	ldrb	r3, [r7, #26]
 80056d6:	b21b      	sxth	r3, r3
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	b21a      	sxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8b9b      	ldrh	r3, [r3, #28]
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	b21b      	sxth	r3, r3
 80056e6:	4313      	orrs	r3, r2
 80056e8:	b21b      	sxth	r3, r3
 80056ea:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            activity_detection_threshold = ((uint16_t)data_array[19] << 8);
 80056ee:	7efb      	ldrb	r3, [r7, #27]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

            /* Set activity_detection_threshold for msb 8 bits */
            activity_detection_threshold2 = BMI3_SET_BITS(activity_detection_threshold,
 80056f6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	b21a      	sxth	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8b9b      	ldrh	r3, [r3, #28]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	b21b      	sxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b21b      	sxth	r3, r3
 800570c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                                                          BMI3_STEP_ACTIVITY_DETECTION_THRESHOLD,
                                                          config->activity_detection_thres);

            /* Set maximum step duration */
            step_duration_max = BMI3_SET_BIT_POS0(data_array[20], BMI3_STEP_DURATION_MAX, config->step_duration_max);
 8005710:	7f3b      	ldrb	r3, [r7, #28]
 8005712:	b21b      	sxth	r3, r3
 8005714:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005718:	b21a      	sxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	8bdb      	ldrh	r3, [r3, #30]
 800571e:	b21b      	sxth	r3, r3
 8005720:	b2db      	uxtb	r3, r3
 8005722:	b21b      	sxth	r3, r3
 8005724:	4313      	orrs	r3, r2
 8005726:	b21b      	sxth	r3, r3
 8005728:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

            step_duration_window = ((uint16_t)data_array[21] << 8);
 800572c:	7f7b      	ldrb	r3, [r7, #29]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

            /* Set step duration window */
            step_duration_window = BMI3_SET_BITS(step_duration_window,
 8005734:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005738:	b2db      	uxtb	r3, r3
 800573a:	b21a      	sxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8c1b      	ldrh	r3, [r3, #32]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	b21b      	sxth	r3, r3
 8005744:	4313      	orrs	r3, r2
 8005746:	b21b      	sxth	r3, r3
 8005748:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                                                 BMI3_STEP_DURATION_WINDOW,
                                                 config->step_duration_window);

            step_duration_pp_enabled = BMI3_SET_BIT_POS0(data_array[22],
 800574c:	7fbb      	ldrb	r3, [r7, #30]
 800574e:	b21b      	sxth	r3, r3
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	b21a      	sxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800575a:	b21b      	sxth	r3, r3
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	b21b      	sxth	r3, r3
 8005762:	4313      	orrs	r3, r2
 8005764:	b21b      	sxth	r3, r3
 8005766:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                                                         BMI3_STEP_DURATION_PP_ENABLED,
                                                         config->step_duration_pp_enabled);

            step_duration_threshold = BMI3_SET_BITS(data_array[22],
 800576a:	7fbb      	ldrb	r3, [r7, #30]
 800576c:	b21b      	sxth	r3, r3
 800576e:	f023 030e 	bic.w	r3, r3, #14
 8005772:	b21a      	sxth	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	b21b      	sxth	r3, r3
 800577c:	f003 030e 	and.w	r3, r3, #14
 8005780:	b21b      	sxth	r3, r3
 8005782:	4313      	orrs	r3, r2
 8005784:	b21b      	sxth	r3, r3
 8005786:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                    BMI3_STEP_DURATION_THRESHOLD,
                                                    config->step_duration_thres);

            mean_crossing_pp_enabled = BMI3_SET_BITS(data_array[22],
 800578a:	7fbb      	ldrb	r3, [r7, #30]
 800578c:	b21b      	sxth	r3, r3
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	b21a      	sxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	b21b      	sxth	r3, r3
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	b21b      	sxth	r3, r3
 80057a2:	4313      	orrs	r3, r2
 80057a4:	b21b      	sxth	r3, r3
 80057a6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                                                     BMI3_STEP_MEAN_CROSSING_PP_ENABLED,
                                                     config->mean_crossing_pp_enabled);

            /* Set mcr_threshold for lsb 8 bits */
            mcr_threshold1 = BMI3_SET_BITS(data_array[22], BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 80057aa:	7fbb      	ldrb	r3, [r7, #30]
 80057ac:	b21b      	sxth	r3, r3
 80057ae:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 80057b2:	b21a      	sxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b8:	015b      	lsls	r3, r3, #5
 80057ba:	e001      	b.n	80057c0 <set_step_config+0x318>
 80057bc:	fffffc00 	.word	0xfffffc00
 80057c0:	b21b      	sxth	r3, r3
 80057c2:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 80057c6:	b21b      	sxth	r3, r3
 80057c8:	4313      	orrs	r3, r2
 80057ca:	b21b      	sxth	r3, r3
 80057cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

            mcr_threshold = ((uint16_t)data_array[23] << 8);
 80057d0:	7ffb      	ldrb	r3, [r7, #31]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            /* Set mcr_threshold for msb 8 bits */
            mcr_threshold2 = BMI3_SET_BITS(mcr_threshold, BMI3_STEP_MCR_THRESHOLD, config->mcr_threshold);
 80057d8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80057dc:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 80057e0:	b21a      	sxth	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e6:	015b      	lsls	r3, r3, #5
 80057e8:	b21b      	sxth	r3, r3
 80057ea:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 80057ee:	b21b      	sxth	r3, r3
 80057f0:	4313      	orrs	r3, r2
 80057f2:	b21b      	sxth	r3, r3
 80057f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e

            sc_12_res = ((uint16_t)data_array[23] << 8);
 80057f6:	7ffb      	ldrb	r3, [r7, #31]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            sc_12_res = BMI3_SET_BITS(sc_12_res, BMI3_STEP_SC_12_RES, config->sc_12_res);
 80057fc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8005800:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005804:	b21a      	sxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	029b      	lsls	r3, r3, #10
 800580c:	b21b      	sxth	r3, r3
 800580e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005812:	b21b      	sxth	r3, r3
 8005814:	4313      	orrs	r3, r2
 8005816:	b21b      	sxth	r3, r3
 8005818:	87bb      	strh	r3, [r7, #60]	@ 0x3c

            step_config[0] = (uint8_t)watermark1;
 800581a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f887 3020 	strb.w	r3, [r7, #32]
            step_config[1] = (uint8_t)((watermark2 | reset_counter) >> 8);
 8005824:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8005828:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800582c:	4313      	orrs	r3, r2
 800582e:	b29b      	uxth	r3, r3
 8005830:	0a1b      	lsrs	r3, r3, #8
 8005832:	b29b      	uxth	r3, r3
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            step_config[2] = (uint8_t)env_min_dist_up1;
 800583a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            step_config[3] = (uint8_t)(env_min_dist_up2 >> 8);
 8005844:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8005848:	0a1b      	lsrs	r3, r3, #8
 800584a:	b29b      	uxth	r3, r3
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            step_config[4] = (uint8_t)env_coef_up1;
 8005852:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            step_config[5] = (uint8_t)(env_coef_up2 >> 8);
 800585c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8005860:	0a1b      	lsrs	r3, r3, #8
 8005862:	b29b      	uxth	r3, r3
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            step_config[6] = (uint8_t)env_min_dist_down1;
 800586a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            step_config[7] = (uint8_t)(env_min_dist_down2 >> 8);
 8005874:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8005878:	0a1b      	lsrs	r3, r3, #8
 800587a:	b29b      	uxth	r3, r3
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            step_config[8] = (uint8_t)env_coef_down1;
 8005882:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            step_config[9] = (uint8_t)(env_coef_down2 >> 8);
 800588c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005890:	0a1b      	lsrs	r3, r3, #8
 8005892:	b29b      	uxth	r3, r3
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            step_config[10] = (uint8_t)mean_val_decay1;
 800589a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            step_config[11] = (uint8_t)(mean_val_decay2 >> 8);
 80058a4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            step_config[12] = (uint8_t)mean_step_dur1;
 80058b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            step_config[13] = (uint8_t)(mean_step_dur2 >> 8);
 80058bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80058c0:	0a1b      	lsrs	r3, r3, #8
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            step_config[14] = (uint8_t)(step_buffer_size | filter_cascade_enabled | step_counter_increment1);
 80058ca:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            step_config[15] = (uint8_t)(step_counter_increment2 >> 8);
 80058e8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            step_config[16] = (uint8_t)peak_duration_min_walking;
 80058f6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            step_config[17] = (uint8_t)(peak_duration_min_running >> 8);
 8005900:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005904:	0a1b      	lsrs	r3, r3, #8
 8005906:	b29b      	uxth	r3, r3
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
            step_config[18] = (uint8_t)(activity_detection_factor | activity_detection_threshold1);
 800590e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8005912:	b2da      	uxtb	r2, r3
 8005914:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005918:	b2db      	uxtb	r3, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            step_config[19] = (uint8_t)(activity_detection_threshold2 >> 8);
 8005922:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005926:	0a1b      	lsrs	r3, r3, #8
 8005928:	b29b      	uxth	r3, r3
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            step_config[20] = (uint8_t)step_duration_max;
 8005930:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005934:	b2db      	uxtb	r3, r3
 8005936:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            step_config[21] = (uint8_t)(step_duration_window >> 8);
 800593a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	b29b      	uxth	r3, r3
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            step_config[22] =
                (uint8_t)(step_duration_pp_enabled | step_duration_threshold | mean_crossing_pp_enabled |
 8005948:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800594c:	b2da      	uxtb	r2, r3
 800594e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005952:	b2db      	uxtb	r3, r3
 8005954:	4313      	orrs	r3, r2
 8005956:	b2da      	uxtb	r2, r3
 8005958:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800595c:	b2db      	uxtb	r3, r3
 800595e:	4313      	orrs	r3, r2
 8005960:	b2da      	uxtb	r2, r3
 8005962:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005966:	b2db      	uxtb	r3, r3
 8005968:	4313      	orrs	r3, r2
 800596a:	b2db      	uxtb	r3, r3
            step_config[22] =
 800596c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                          mcr_threshold1);
            step_config[23] = (uint8_t)((mcr_threshold2 | sc_12_res) >> 8);
 8005970:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8005972:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005974:	4313      	orrs	r3, r2
 8005976:	b29b      	uxth	r3, r3
 8005978:	0a1b      	lsrs	r3, r3, #8
 800597a:	b29b      	uxth	r3, r3
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            /* Set the configuration back to feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, step_config, 24, dev);
 8005982:	f107 0120 	add.w	r1, r7, #32
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2218      	movs	r2, #24
 800598a:	2042      	movs	r0, #66	@ 0x42
 800598c:	f7fd fb94 	bl	80030b8 <bmi3_set_regs>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8005996:	e002      	b.n	800599e <set_step_config+0x4f6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8005998:	23ff      	movs	r3, #255	@ 0xff
 800599a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return rslt;
 800599e:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3790      	adds	r7, #144	@ 0x90
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop

080059ac <get_tap_config>:
 * @brief This internal API gets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t get_tap_config(struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	2300      	movs	r3, #0
 80059bc:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 80059be:	231e      	movs	r3, #30
 80059c0:	81bb      	strh	r3, [r7, #12]

    /* Variable to define array offset */
    uint8_t idx = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	77bb      	strb	r3, [r7, #30]
    uint16_t msb;

    /* Variable to define a word */
    uint16_t lsb_msb;

    if (config != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80a4 	beq.w	8005b16 <get_tap_config+0x16a>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80059ce:	f107 010c 	add.w	r1, r7, #12
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2202      	movs	r2, #2
 80059d6:	2041      	movs	r0, #65	@ 0x41
 80059d8:	f7fd fb6e 	bl	80030b8 <bmi3_set_regs>
 80059dc:	4603      	mov	r3, r0
 80059de:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 80059e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 8098 	bne.w	8005b1a <get_tap_config+0x16e>
        {
            /* Get the configuration from the feature engine register where tap feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 80059ea:	f107 0110 	add.w	r1, r7, #16
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2206      	movs	r2, #6
 80059f2:	2042      	movs	r0, #66	@ 0x42
 80059f4:	f7fd fafb 	bl	8002fee <bmi3_get_regs>
 80059f8:	4603      	mov	r3, r0
 80059fa:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMI3_OK)
 80059fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f040 808a 	bne.w	8005b1a <get_tap_config+0x16e>
            {
                /* Get word to calculate axis select, wait for time out, max peaks for tap and mode
                 * from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8005a06:	7fbb      	ldrb	r3, [r7, #30]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	77ba      	strb	r2, [r7, #30]
 8005a0c:	3320      	adds	r3, #32
 8005a0e:	443b      	add	r3, r7
 8005a10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005a14:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8005a16:	7fbb      	ldrb	r3, [r7, #30]
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	77ba      	strb	r2, [r7, #30]
 8005a1c:	3320      	adds	r3, #32
 8005a1e:	443b      	add	r3, r7
 8005a20:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8005a28:	8bba      	ldrh	r2, [r7, #28]
 8005a2a:	8b7b      	ldrh	r3, [r7, #26]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	833b      	strh	r3, [r7, #24]

                /* Get axis selection */
                config->axis_sel = lsb_msb & BMI3_TAP_AXIS_SEL_MASK;
 8005a30:	8b3b      	ldrh	r3, [r7, #24]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	701a      	strb	r2, [r3, #0]

                /* Get wait for time out */
                config->wait_for_timeout = (lsb_msb & BMI3_TAP_WAIT_FR_TIME_OUT_MASK) >> BMI3_TAP_WAIT_FR_TIME_OUT_POS;
 8005a3e:	8b3b      	ldrh	r3, [r7, #24]
 8005a40:	109b      	asrs	r3, r3, #2
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	705a      	strb	r2, [r3, #1]

                /* Get max peaks for tap */
                config->max_peaks_for_tap = (lsb_msb & BMI3_TAP_MAX_PEAKS_MASK) >> BMI3_TAP_MAX_PEAKS_POS;
 8005a4e:	8b3b      	ldrh	r3, [r7, #24]
 8005a50:	10db      	asrs	r3, r3, #3
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	709a      	strb	r2, [r3, #2]

                /* Get mode */
                config->mode = (lsb_msb & BMI3_TAP_MODE_MASK) >> BMI3_TAP_MODE_POS;
 8005a5e:	8b3b      	ldrh	r3, [r7, #24]
 8005a60:	119b      	asrs	r3, r3, #6
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	70da      	strb	r2, [r3, #3]

                /* Get word to calculate threshold, output configuration from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8005a6e:	7fbb      	ldrb	r3, [r7, #30]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	77ba      	strb	r2, [r7, #30]
 8005a74:	3320      	adds	r3, #32
 8005a76:	443b      	add	r3, r7
 8005a78:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005a7c:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8005a7e:	7fbb      	ldrb	r3, [r7, #30]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	77ba      	strb	r2, [r7, #30]
 8005a84:	3320      	adds	r3, #32
 8005a86:	443b      	add	r3, r7
 8005a88:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8005a90:	8bba      	ldrh	r2, [r7, #28]
 8005a92:	8b7b      	ldrh	r3, [r7, #26]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	833b      	strh	r3, [r7, #24]

                /* Get tap peak threshold */
                config->tap_peak_thres = lsb_msb & BMI3_TAP_PEAK_THRES_MASK;
 8005a98:	8b3b      	ldrh	r3, [r7, #24]
 8005a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	809a      	strh	r2, [r3, #4]

                /* Get max gesture duration */
                config->max_gest_dur = (lsb_msb & BMI3_TAP_MAX_GEST_DUR_MASK) >> BMI3_TAP_MAX_GEST_DUR_POS;
 8005aa4:	8b3b      	ldrh	r3, [r7, #24]
 8005aa6:	0a9b      	lsrs	r3, r3, #10
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	719a      	strb	r2, [r3, #6]

                /* Get word to calculate max_dur_between_peaks, tap_shock_settling_dur, min_quite_dur_between_taps
                 *  and quite_time_after_gest from the same word */
                lsb = (uint16_t) tap_config[idx++];
 8005ab0:	7fbb      	ldrb	r3, [r7, #30]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	77ba      	strb	r2, [r7, #30]
 8005ab6:	3320      	adds	r3, #32
 8005ab8:	443b      	add	r3, r7
 8005aba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005abe:	83bb      	strh	r3, [r7, #28]
                msb = ((uint16_t) tap_config[idx++] << 8);
 8005ac0:	7fbb      	ldrb	r3, [r7, #30]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	77ba      	strb	r2, [r7, #30]
 8005ac6:	3320      	adds	r3, #32
 8005ac8:	443b      	add	r3, r7
 8005aca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	837b      	strh	r3, [r7, #26]
                lsb_msb = lsb | msb;
 8005ad2:	8bba      	ldrh	r2, [r7, #28]
 8005ad4:	8b7b      	ldrh	r3, [r7, #26]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	833b      	strh	r3, [r7, #24]

                /* Get maximum duration between peaks */
                config->max_dur_between_peaks = lsb_msb & BMI3_TAP_MAX_DUR_BW_PEAKS_MASK;
 8005ada:	8b3b      	ldrh	r3, [r7, #24]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	71da      	strb	r2, [r3, #7]

                /* Get tap shock settling duration */
                config->tap_shock_settling_dur = (lsb_msb & BMI3_TAP_SHOCK_SETT_DUR_MASK) >>
 8005ae8:	8b3b      	ldrh	r3, [r7, #24]
 8005aea:	111b      	asrs	r3, r3, #4
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	721a      	strb	r2, [r3, #8]
                                                 BMI3_TAP_SHOCK_SETT_DUR_POS;

                /* Get minimum quite duration between taps */
                config->min_quite_dur_between_taps = (lsb_msb & BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_MASK) >>
 8005af8:	8b3b      	ldrh	r3, [r7, #24]
 8005afa:	121b      	asrs	r3, r3, #8
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	725a      	strb	r2, [r3, #9]
                                                     BMI3_TAP_MIN_QUITE_DUR_BW_TAPS_POS;

                /* Get quite time after gesture */
                config->quite_time_after_gest = (lsb_msb & BMI3_TAP_QUITE_TIME_AFTR_GEST_MASK) >>
 8005b08:	8b3b      	ldrh	r3, [r7, #24]
 8005b0a:	0b1b      	lsrs	r3, r3, #12
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	729a      	strb	r2, [r3, #10]
 8005b14:	e001      	b.n	8005b1a <get_tap_config+0x16e>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8005b16:	23ff      	movs	r3, #255	@ 0xff
 8005b18:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005b1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <set_tap_config>:
 * @brief This internal API sets tap configurations like axes select, wait for time out, mode,
 * max peaks for tap, duration, tap peak threshold, max gest duration, max dur bw peaks,
 * shock settling duration.
 */
static int8_t set_tap_config(const struct bmi3_tap_detector_config *config, struct bmi3_dev *dev)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08c      	sub	sp, #48	@ 0x30
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the feature configuration */
    uint8_t tap_config[6] = { 0 };
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	2300      	movs	r3, #0
 8005b38:	82bb      	strh	r3, [r7, #20]

    /* Array to set the base address of tap feature */
    uint8_t base_aadr[2] = { BMI3_BASE_ADDR_TAP, 0 };
 8005b3a:	231e      	movs	r3, #30
 8005b3c:	81bb      	strh	r3, [r7, #12]

    uint16_t axis_sel, wait_fr_time_out, max_peaks_for_tap, mode;
    uint16_t tap_peak_thres, tap_peak_thres1, tap_peak_thres2, max_gest_dur;
    uint16_t max_dur_between_peaks, tap_shock_setting_dur, min_quite_dur_between_taps, quite_time_after_gest;

    if (config != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80e8 	beq.w	8005d16 <set_tap_config+0x1ee>
    {
        /* Set the tap base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_aadr, 2, dev);
 8005b46:	f107 010c 	add.w	r1, r7, #12
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	2041      	movs	r0, #65	@ 0x41
 8005b50:	f7fd fab2 	bl	80030b8 <bmi3_set_regs>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMI3_OK)
 8005b5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 80dc 	bne.w	8005d1c <set_tap_config+0x1f4>
        {
            /* Set axis_sel */
            axis_sel = BMI3_SET_BIT_POS0(tap_config[0], BMI3_TAP_AXIS_SEL, config->axis_sel);
 8005b64:	7c3b      	ldrb	r3, [r7, #16]
 8005b66:	b21b      	sxth	r3, r3
 8005b68:	f023 0303 	bic.w	r3, r3, #3
 8005b6c:	b21a      	sxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b21b      	sxth	r3, r3
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	b21b      	sxth	r3, r3
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b21b      	sxth	r3, r3
 8005b7e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            /* Set wait for time out */
            wait_fr_time_out = BMI3_SET_BITS(tap_config[0], BMI3_TAP_WAIT_FR_TIME_OUT, config->wait_for_timeout);
 8005b80:	7c3b      	ldrb	r3, [r7, #16]
 8005b82:	b21b      	sxth	r3, r3
 8005b84:	f023 0304 	bic.w	r3, r3, #4
 8005b88:	b21a      	sxth	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	b21b      	sxth	r3, r3
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	b21b      	sxth	r3, r3
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	b21b      	sxth	r3, r3
 8005b9c:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /* Set maximum peaks for tap */
            max_peaks_for_tap = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MAX_PEAKS, config->max_peaks_for_tap);
 8005b9e:	7c3b      	ldrb	r3, [r7, #16]
 8005ba0:	b21b      	sxth	r3, r3
 8005ba2:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8005ba6:	b21a      	sxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	789b      	ldrb	r3, [r3, #2]
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	b21b      	sxth	r3, r3
 8005bb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bb4:	b21b      	sxth	r3, r3
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	b21b      	sxth	r3, r3
 8005bba:	853b      	strh	r3, [r7, #40]	@ 0x28

            /* Set mode */
            mode = BMI3_SET_BITS(tap_config[0], BMI3_TAP_MODE, config->mode);
 8005bbc:	7c3b      	ldrb	r3, [r7, #16]
 8005bbe:	b21b      	sxth	r3, r3
 8005bc0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005bc4:	b21a      	sxth	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	78db      	ldrb	r3, [r3, #3]
 8005bca:	019b      	lsls	r3, r3, #6
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	b21b      	sxth	r3, r3
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	b21b      	sxth	r3, r3
 8005bd6:	84fb      	strh	r3, [r7, #38]	@ 0x26

            /* Set peak threshold first byte in word */
            tap_peak_thres = BMI3_SET_BIT_POS0(tap_config[2], BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8005bd8:	7cbb      	ldrb	r3, [r7, #18]
 8005bda:	b21a      	sxth	r2, r3
 8005bdc:	4b52      	ldr	r3, [pc, #328]	@ (8005d28 <set_tap_config+0x200>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	b21a      	sxth	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	889b      	ldrh	r3, [r3, #4]
 8005be6:	b21b      	sxth	r3, r3
 8005be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	84bb      	strh	r3, [r7, #36]	@ 0x24

            /* Left shift by 8 times so that we can set rest of the values of tap peak threshold conf in word */
            tap_peak_thres1 = ((uint16_t)tap_config[3] << 8);
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	847b      	strh	r3, [r7, #34]	@ 0x22

            /* Set peak threshold second byte in word */
            tap_peak_thres2 = BMI3_SET_BIT_POS0(tap_peak_thres1, BMI3_TAP_PEAK_THRES, config->tap_peak_thres);
 8005bfa:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8005bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8005d28 <set_tap_config+0x200>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	b21a      	sxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	889b      	ldrh	r3, [r3, #4]
 8005c08:	b21b      	sxth	r3, r3
 8005c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c0e:	b21b      	sxth	r3, r3
 8005c10:	4313      	orrs	r3, r2
 8005c12:	b21b      	sxth	r3, r3
 8005c14:	843b      	strh	r3, [r7, #32]

            max_gest_dur = ((uint16_t)tap_config[3] << 8);
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	83fb      	strh	r3, [r7, #30]

            /* Set max gesture duration */
            max_gest_dur = BMI3_SET_BITS(max_gest_dur, BMI3_TAP_MAX_GEST_DUR, config->max_gest_dur);
 8005c1c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c24:	b21a      	sxth	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	799b      	ldrb	r3, [r3, #6]
 8005c2a:	029b      	lsls	r3, r3, #10
 8005c2c:	b21b      	sxth	r3, r3
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	b21b      	sxth	r3, r3
 8005c32:	83fb      	strh	r3, [r7, #30]

            /* Set max duration between peaks */
            max_dur_between_peaks = BMI3_SET_BIT_POS0(tap_config[4],
 8005c34:	7d3b      	ldrb	r3, [r7, #20]
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	f023 030f 	bic.w	r3, r3, #15
 8005c3c:	b21a      	sxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	79db      	ldrb	r3, [r3, #7]
 8005c42:	b21b      	sxth	r3, r3
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	b21b      	sxth	r3, r3
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	b21b      	sxth	r3, r3
 8005c4e:	83bb      	strh	r3, [r7, #28]
                                                      BMI3_TAP_MAX_DUR_BW_PEAKS,
                                                      config->max_dur_between_peaks);

            /* Set shock settling duration */
            tap_shock_setting_dur =
                BMI3_SET_BITS(tap_config[4], BMI3_TAP_SHOCK_SETT_DUR, config->tap_shock_settling_dur);
 8005c50:	7d3b      	ldrb	r3, [r7, #20]
 8005c52:	b21b      	sxth	r3, r3
 8005c54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c58:	b21a      	sxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	7a1b      	ldrb	r3, [r3, #8]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	b21b      	sxth	r3, r3
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	b21b      	sxth	r3, r3
 8005c66:	4313      	orrs	r3, r2
 8005c68:	b21b      	sxth	r3, r3
            tap_shock_setting_dur =
 8005c6a:	837b      	strh	r3, [r7, #26]

            min_quite_dur_between_taps = ((uint16_t)tap_config[5] << 8);
 8005c6c:	7d7b      	ldrb	r3, [r7, #21]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	833b      	strh	r3, [r7, #24]

            /* Set quite duration between taps */
            min_quite_dur_between_taps = BMI3_SET_BITS(min_quite_dur_between_taps,
 8005c72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005c76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c7a:	b21a      	sxth	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	7a5b      	ldrb	r3, [r3, #9]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	b21b      	sxth	r3, r3
 8005c84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c88:	b21b      	sxth	r3, r3
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	b21b      	sxth	r3, r3
 8005c8e:	833b      	strh	r3, [r7, #24]
                                                       BMI3_TAP_MIN_QUITE_DUR_BW_TAPS,
                                                       config->min_quite_dur_between_taps);

            quite_time_after_gest = ((uint16_t)tap_config[5] << 8);
 8005c90:	7d7b      	ldrb	r3, [r7, #21]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	82fb      	strh	r3, [r7, #22]

            /* Set quite time after gesture */
            quite_time_after_gest = BMI3_SET_BITS(quite_time_after_gest,
 8005c96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c9e:	b21a      	sxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	7a9b      	ldrb	r3, [r3, #10]
 8005ca4:	031b      	lsls	r3, r3, #12
 8005ca6:	b21b      	sxth	r3, r3
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	b21b      	sxth	r3, r3
 8005cac:	82fb      	strh	r3, [r7, #22]
                                                  BMI3_TAP_QUITE_TIME_AFTR_GEST,
                                                  config->quite_time_after_gest);

            /* Copy all the configurations back to the tap configuration array */
            tap_config[0] = (uint8_t)(axis_sel | wait_fr_time_out | max_peaks_for_tap | mode);
 8005cae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	743b      	strb	r3, [r7, #16]
            tap_config[2] = (uint8_t)(tap_peak_thres);
 8005ccc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	74bb      	strb	r3, [r7, #18]
            tap_config[3] = (uint8_t)((tap_peak_thres2 | max_gest_dur) >> 8);
 8005cd2:	8c3a      	ldrh	r2, [r7, #32]
 8005cd4:	8bfb      	ldrh	r3, [r7, #30]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	0a1b      	lsrs	r3, r3, #8
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	74fb      	strb	r3, [r7, #19]
            tap_config[4] = (uint8_t)(max_dur_between_peaks | tap_shock_setting_dur);
 8005ce2:	8bbb      	ldrh	r3, [r7, #28]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	8b7b      	ldrh	r3, [r7, #26]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	4313      	orrs	r3, r2
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	753b      	strb	r3, [r7, #20]
            tap_config[5] = (uint8_t)((min_quite_dur_between_taps | quite_time_after_gest) >> 8);
 8005cf0:	8b3a      	ldrh	r2, [r7, #24]
 8005cf2:	8afb      	ldrh	r3, [r7, #22]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	0a1b      	lsrs	r3, r3, #8
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	757b      	strb	r3, [r7, #21]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, tap_config, 6, dev);
 8005d00:	f107 0110 	add.w	r1, r7, #16
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2206      	movs	r2, #6
 8005d08:	2042      	movs	r0, #66	@ 0x42
 8005d0a:	f7fd f9d5 	bl	80030b8 <bmi3_set_regs>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005d14:	e002      	b.n	8005d1c <set_tap_config+0x1f4>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8005d16:	23ff      	movs	r3, #255	@ 0xff
 8005d18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8005d1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3730      	adds	r7, #48	@ 0x30
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	fffffc00 	.word	0xfffffc00

08005d2c <get_i3c_sync_accel_sensor_data>:

/*!
 * @brief This internal API gets the i3c sync accelerometer data from the register.
 */
static int8_t get_i3c_sync_accel_sensor_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_ACC] = { 0 };
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	f107 0310 	add.w	r3, r7, #16
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	605a      	str	r2, [r3, #4]
 8005d44:	609a      	str	r2, [r3, #8]

    /* Array to set the base address of i3c sync accel data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_ACC, 0 };
 8005d46:	2337      	movs	r3, #55	@ 0x37
 8005d48:	813b      	strh	r3, [r7, #8]

    if (data != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d03e      	beq.n	8005dce <get_i3c_sync_accel_sensor_data+0xa2>
    {
        /* Set the i3c sync accelerometer base address to feature engine transmission address to start DMA transaction
         * */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8005d50:	f107 0108 	add.w	r1, r7, #8
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2202      	movs	r2, #2
 8005d58:	2041      	movs	r0, #65	@ 0x41
 8005d5a:	f7fd f9ad 	bl	80030b8 <bmi3_set_regs>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMI3_OK)
 8005d62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d133      	bne.n	8005dd2 <get_i3c_sync_accel_sensor_data+0xa6>
        {
            /* Get the configuration from the feature engine register where i3c sync accel data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_ACC, dev);
 8005d6a:	f107 010c 	add.w	r1, r7, #12
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2210      	movs	r2, #16
 8005d72:	2042      	movs	r0, #66	@ 0x42
 8005d74:	f7fd f93b 	bl	8002fee <bmi3_get_regs>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	77fb      	strb	r3, [r7, #31]

            data->sync_x = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8005d7c:	7b3b      	ldrb	r3, [r7, #12]
 8005d7e:	b21a      	sxth	r2, r3
 8005d80:	7b7b      	ldrb	r3, [r7, #13]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b21b      	sxth	r3, r3
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	801a      	strh	r2, [r3, #0]
            data->sync_y = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	b21a      	sxth	r2, r3
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	021b      	lsls	r3, r3, #8
 8005d98:	b21b      	sxth	r3, r3
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	b21b      	sxth	r3, r3
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	805a      	strh	r2, [r3, #2]
            data->sync_z = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8005da4:	7c3b      	ldrb	r3, [r7, #16]
 8005da6:	b21a      	sxth	r2, r3
 8005da8:	7c7b      	ldrb	r3, [r7, #17]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	b21b      	sxth	r3, r3
 8005dae:	4313      	orrs	r3, r2
 8005db0:	b21b      	sxth	r3, r3
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	809a      	strh	r2, [r3, #4]
            data->sync_time = (reg_data[14] | (uint16_t)reg_data[15] << 8);
 8005db8:	7ebb      	ldrb	r3, [r7, #26]
 8005dba:	b21a      	sxth	r2, r3
 8005dbc:	7efb      	ldrb	r3, [r7, #27]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	b21b      	sxth	r3, r3
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b21b      	sxth	r3, r3
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	811a      	strh	r2, [r3, #8]
 8005dcc:	e001      	b.n	8005dd2 <get_i3c_sync_accel_sensor_data+0xa6>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8005dce:	23ff      	movs	r3, #255	@ 0xff
 8005dd0:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8005dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <get_i3c_sync_gyro_sensor_data>:

/*!
 * @brief This internal API gets the i3c sync gyroscope data from the register.
 */
static int8_t get_i3c_sync_gyro_sensor_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b086      	sub	sp, #24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_GYR] = { 0 };
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	f107 0310 	add.w	r3, r7, #16
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	809a      	strh	r2, [r3, #4]

    /* Array to set the base address of i3c sync gyro data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_GYR, 0 };
 8005df6:	233a      	movs	r3, #58	@ 0x3a
 8005df8:	813b      	strh	r3, [r7, #8]

    if (data != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d042      	beq.n	8005e86 <get_i3c_sync_gyro_sensor_data+0xa8>
    {
        /* Set the i3c sync gyroscope base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8005e00:	f107 0108 	add.w	r1, r7, #8
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2202      	movs	r2, #2
 8005e08:	2041      	movs	r0, #65	@ 0x41
 8005e0a:	f7fd f955 	bl	80030b8 <bmi3_set_regs>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8005e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d137      	bne.n	8005e8a <get_i3c_sync_gyro_sensor_data+0xac>
        {
            /* Get the configuration from the feature engine register where i3c sync gyro data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_GYR, dev);
 8005e1a:	f107 010c 	add.w	r1, r7, #12
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	220a      	movs	r2, #10
 8005e22:	2042      	movs	r0, #66	@ 0x42
 8005e24:	f7fd f8e3 	bl	8002fee <bmi3_get_regs>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8005e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d12a      	bne.n	8005e8a <get_i3c_sync_gyro_sensor_data+0xac>
            {
                data->sync_x = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8005e34:	7b3b      	ldrb	r3, [r7, #12]
 8005e36:	b21a      	sxth	r2, r3
 8005e38:	7b7b      	ldrb	r3, [r7, #13]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	b21b      	sxth	r3, r3
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	b21b      	sxth	r3, r3
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	801a      	strh	r2, [r3, #0]
                data->sync_y = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	b21a      	sxth	r2, r3
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	4313      	orrs	r3, r2
 8005e54:	b21b      	sxth	r3, r3
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	805a      	strh	r2, [r3, #2]
                data->sync_z = (reg_data[4] | (uint16_t)reg_data[5] << 8);
 8005e5c:	7c3b      	ldrb	r3, [r7, #16]
 8005e5e:	b21a      	sxth	r2, r3
 8005e60:	7c7b      	ldrb	r3, [r7, #17]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	b21b      	sxth	r3, r3
 8005e66:	4313      	orrs	r3, r2
 8005e68:	b21b      	sxth	r3, r3
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	809a      	strh	r2, [r3, #4]
                data->sync_time = (reg_data[8] | (uint16_t)reg_data[9] << 8);
 8005e70:	7d3b      	ldrb	r3, [r7, #20]
 8005e72:	b21a      	sxth	r2, r3
 8005e74:	7d7b      	ldrb	r3, [r7, #21]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	b21b      	sxth	r3, r3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	811a      	strh	r2, [r3, #8]
 8005e84:	e001      	b.n	8005e8a <get_i3c_sync_gyro_sensor_data+0xac>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8005e86:	23ff      	movs	r3, #255	@ 0xff
 8005e88:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <get_i3c_sync_temp_data>:

/*!
 * @brief This internal API gets the i3c sync temperature data from the register.
 */
static int8_t get_i3c_sync_temp_data(struct bmi3_i3c_sync_data *data, struct bmi3_dev *dev)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b086      	sub	sp, #24
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define data stored in register */
    uint8_t reg_data[BMI3_NUM_BYTES_I3C_SYNC_TEMP] = { 0 };
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]

    /* Array to set the base address of i3c sync temperature data */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_I3C_SYNC_TEMP, 0 };
 8005ea4:	233d      	movs	r3, #61	@ 0x3d
 8005ea6:	81bb      	strh	r3, [r7, #12]

    if (data != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02e      	beq.n	8005f0c <get_i3c_sync_temp_data+0x76>
    {
        /* Set the i3c sync temperature base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8005eae:	f107 010c 	add.w	r1, r7, #12
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	2041      	movs	r0, #65	@ 0x41
 8005eb8:	f7fd f8fe 	bl	80030b8 <bmi3_set_regs>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 8005ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d123      	bne.n	8005f10 <get_i3c_sync_temp_data+0x7a>
        {
            /* Get the configuration from the feature engine register where i3c sync temperature data resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, reg_data, BMI3_NUM_BYTES_I3C_SYNC_TEMP, dev);
 8005ec8:	f107 0110 	add.w	r1, r7, #16
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	2042      	movs	r0, #66	@ 0x42
 8005ed2:	f7fd f88c 	bl	8002fee <bmi3_get_regs>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMI3_OK)
 8005eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d116      	bne.n	8005f10 <get_i3c_sync_temp_data+0x7a>
            {
                data->sync_temp = (reg_data[0] | (uint16_t)reg_data[1] << 8);
 8005ee2:	7c3b      	ldrb	r3, [r7, #16]
 8005ee4:	b21a      	sxth	r2, r3
 8005ee6:	7c7b      	ldrb	r3, [r7, #17]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	b21b      	sxth	r3, r3
 8005eec:	4313      	orrs	r3, r2
 8005eee:	b21b      	sxth	r3, r3
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	80da      	strh	r2, [r3, #6]
                data->sync_time = (reg_data[2] | (uint16_t)reg_data[3] << 8);
 8005ef6:	7cbb      	ldrb	r3, [r7, #18]
 8005ef8:	b21a      	sxth	r2, r3
 8005efa:	7cfb      	ldrb	r3, [r7, #19]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b21b      	sxth	r3, r3
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	811a      	strh	r2, [r3, #8]
 8005f0a:	e001      	b.n	8005f10 <get_i3c_sync_temp_data+0x7a>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8005f0c:	23ff      	movs	r3, #255	@ 0xff
 8005f0e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <set_alternate_accel_config>:
/*!
 * @brief This internal API sets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t set_alternate_accel_config(const struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8005f26:	2300      	movs	r3, #0
 8005f28:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_acc_odr, alt_acc_avg_num, alt_acc_mode;

    if (config != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d03a      	beq.n	8005fa6 <set_alternate_accel_config+0x8a>
    {
        /* Set alternate accelerometer ODR */
        alt_acc_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_ACC_ODR, config->alt_acc_odr);
 8005f30:	7b3b      	ldrb	r3, [r7, #12]
 8005f32:	b21b      	sxth	r3, r3
 8005f34:	f023 030f 	bic.w	r3, r3, #15
 8005f38:	b21a      	sxth	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	b21b      	sxth	r3, r3
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	4313      	orrs	r3, r2
 8005f48:	b21b      	sxth	r3, r3
 8005f4a:	82bb      	strh	r3, [r7, #20]

        /* Set alternate accelerometer average number of samples */
        alt_acc_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_AVG_NUM, config->alt_acc_avg_num);
 8005f4c:	7b7b      	ldrb	r3, [r7, #13]
 8005f4e:	b21a      	sxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	789b      	ldrb	r3, [r3, #2]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	827b      	strh	r3, [r7, #18]

        /* Set alternate accelerometer mode */
        alt_acc_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_ACC_MODE, config->alt_acc_mode);
 8005f64:	7b7b      	ldrb	r3, [r7, #13]
 8005f66:	b21a      	sxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	031b      	lsls	r3, r3, #12
 8005f6e:	b21b      	sxth	r3, r3
 8005f70:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005f74:	b21b      	sxth	r3, r3
 8005f76:	4313      	orrs	r3, r2
 8005f78:	b21b      	sxth	r3, r3
 8005f7a:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_acc_odr);
 8005f7c:	8abb      	ldrh	r3, [r7, #20]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_acc_avg_num | alt_acc_mode) >> 8);
 8005f82:	8a7a      	ldrh	r2, [r7, #18]
 8005f84:	8a3b      	ldrh	r3, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate accel */
        rslt = bmi3_set_regs(BMI3_REG_ALT_ACC_CONF, reg_data, 2, dev);
 8005f92:	f107 010c 	add.w	r1, r7, #12
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	2028      	movs	r0, #40	@ 0x28
 8005f9c:	f7fd f88c 	bl	80030b8 <bmi3_set_regs>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]
 8005fa4:	e001      	b.n	8005faa <set_alternate_accel_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8005fa6:	23ff      	movs	r3, #255	@ 0xff
 8005fa8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <get_alternate_accel_config>:
/*!
 * @brief This internal API gets alternate accelerometer configurations like ODR,
 * accel mode and average number of samples.
 */
static int8_t get_alternate_accel_config(struct bmi3_alt_accel_config *config, struct bmi3_dev *dev)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d029      	beq.n	800601e <get_alternate_accel_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_ACC_CONF, data_array, 2, dev);
 8005fca:	f107 0108 	add.w	r1, r7, #8
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	2028      	movs	r0, #40	@ 0x28
 8005fd4:	f7fd f80b 	bl	8002fee <bmi3_get_regs>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 8005fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11e      	bne.n	8006022 <get_alternate_accel_config+0x6c>
        {
            reg_data = data_array[0];
 8005fe4:	7a3b      	ldrb	r3, [r7, #8]
 8005fe6:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer ODR */
            config->alt_acc_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_ACC_ODR);
 8005fe8:	89bb      	ldrh	r3, [r7, #12]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8005ff6:	7a7b      	ldrb	r3, [r7, #9]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	81bb      	strh	r3, [r7, #12]

            /* Get alternate accelerometer average samples */
            config->alt_acc_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_AVG_NUM);
 8005ffc:	89bb      	ldrh	r3, [r7, #12]
 8005ffe:	121b      	asrs	r3, r3, #8
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	b2da      	uxtb	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	709a      	strb	r2, [r3, #2]

            /* Get alternate accel mode */
            config->alt_acc_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_ACC_MODE);
 800600c:	89bb      	ldrh	r3, [r7, #12]
 800600e:	131b      	asrs	r3, r3, #12
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	b2da      	uxtb	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	705a      	strb	r2, [r3, #1]
 800601c:	e001      	b.n	8006022 <get_alternate_accel_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 800601e:	23ff      	movs	r3, #255	@ 0xff
 8006020:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <set_alternate_gyro_config>:
/*!
 * @brief This internal API sets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t set_alternate_gyro_config(const struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Variable to store data */
    uint8_t reg_data[2] = { 0 };
 8006038:	2300      	movs	r3, #0
 800603a:	81bb      	strh	r3, [r7, #12]

    uint16_t alt_gyro_odr, alt_gyro_avg_num, alt_gyro_mode;

    if (config != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d03a      	beq.n	80060b8 <set_alternate_gyro_config+0x8a>
    {
        /* Set alternate gyro ODR */
        alt_gyro_odr = BMI3_SET_BIT_POS0(reg_data[0], BMI3_ALT_GYR_ODR, config->alt_gyro_odr);
 8006042:	7b3b      	ldrb	r3, [r7, #12]
 8006044:	b21b      	sxth	r3, r3
 8006046:	f023 030f 	bic.w	r3, r3, #15
 800604a:	b21a      	sxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	b21b      	sxth	r3, r3
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	b21b      	sxth	r3, r3
 8006058:	4313      	orrs	r3, r2
 800605a:	b21b      	sxth	r3, r3
 800605c:	82bb      	strh	r3, [r7, #20]

        /* Set alternate gyro average number of samples */
        alt_gyro_avg_num = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_AVG_NUM, config->alt_gyro_avg_num);
 800605e:	7b7b      	ldrb	r3, [r7, #13]
 8006060:	b21a      	sxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	789b      	ldrb	r3, [r3, #2]
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	b21b      	sxth	r3, r3
 800606a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800606e:	b21b      	sxth	r3, r3
 8006070:	4313      	orrs	r3, r2
 8006072:	b21b      	sxth	r3, r3
 8006074:	827b      	strh	r3, [r7, #18]

        /* Set alternate gyro mode */
        alt_gyro_mode = BMI3_SET_BITS(reg_data[1], BMI3_ALT_GYR_MODE, config->alt_gyro_mode);
 8006076:	7b7b      	ldrb	r3, [r7, #13]
 8006078:	b21a      	sxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	031b      	lsls	r3, r3, #12
 8006080:	b21b      	sxth	r3, r3
 8006082:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006086:	b21b      	sxth	r3, r3
 8006088:	4313      	orrs	r3, r2
 800608a:	b21b      	sxth	r3, r3
 800608c:	823b      	strh	r3, [r7, #16]

        reg_data[0] = (uint8_t)(alt_gyro_odr);
 800608e:	8abb      	ldrh	r3, [r7, #20]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	733b      	strb	r3, [r7, #12]
        reg_data[1] = (uint8_t)((alt_gyro_avg_num | alt_gyro_mode) >> 8);
 8006094:	8a7a      	ldrh	r2, [r7, #18]
 8006096:	8a3b      	ldrh	r3, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	b29b      	uxth	r3, r3
 800609c:	0a1b      	lsrs	r3, r3, #8
 800609e:	b29b      	uxth	r3, r3
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	737b      	strb	r3, [r7, #13]

        /* Set configurations of alternate gyro */
        rslt = bmi3_set_regs(BMI3_REG_ALT_GYR_CONF, reg_data, 2, dev);
 80060a4:	f107 010c 	add.w	r1, r7, #12
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2202      	movs	r2, #2
 80060ac:	2029      	movs	r0, #41	@ 0x29
 80060ae:	f7fd f803 	bl	80030b8 <bmi3_set_regs>
 80060b2:	4603      	mov	r3, r0
 80060b4:	75fb      	strb	r3, [r7, #23]
 80060b6:	e001      	b.n	80060bc <set_alternate_gyro_config+0x8e>
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80060b8:	23ff      	movs	r3, #255	@ 0xff
 80060ba:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80060bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <get_alternate_gyro_config>:
/*!
 * @brief This internal API gets alternate gyro configurations like ODR,
 * gyro mode and average number of samples.
 */
static int8_t get_alternate_gyro_config(struct bmi3_alt_gyro_config *config, struct bmi3_dev *dev)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to store data */
    uint8_t data_array[2] = { 0 };
 80060d2:	2300      	movs	r3, #0
 80060d4:	813b      	strh	r3, [r7, #8]

    uint16_t reg_data;

    if (config != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d029      	beq.n	8006130 <get_alternate_gyro_config+0x68>
    {
        /* Read the sensor configuration details */
        rslt = bmi3_get_regs(BMI3_REG_ALT_GYR_CONF, data_array, 2, dev);
 80060dc:	f107 0108 	add.w	r1, r7, #8
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2202      	movs	r2, #2
 80060e4:	2029      	movs	r0, #41	@ 0x29
 80060e6:	f7fc ff82 	bl	8002fee <bmi3_get_regs>
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80060ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d11e      	bne.n	8006134 <get_alternate_gyro_config+0x6c>
        {
            reg_data = data_array[0];
 80060f6:	7a3b      	ldrb	r3, [r7, #8]
 80060f8:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro ODR */
            config->alt_gyro_odr = BMI3_GET_BIT_POS0(reg_data, BMI3_ALT_GYR_ODR);
 80060fa:	89bb      	ldrh	r3, [r7, #12]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	b2da      	uxtb	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	701a      	strb	r2, [r3, #0]

            reg_data = ((uint16_t)data_array[1] << 8);
 8006108:	7a7b      	ldrb	r3, [r7, #9]
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	81bb      	strh	r3, [r7, #12]

            /* Get alternate gyro average samples */
            config->alt_gyro_avg_num = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_AVG_NUM);
 800610e:	89bb      	ldrh	r3, [r7, #12]
 8006110:	121b      	asrs	r3, r3, #8
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	b2da      	uxtb	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	709a      	strb	r2, [r3, #2]

            /* Get alternate gyro mode */
            config->alt_gyro_mode = BMI3_GET_BITS(reg_data, BMI3_ALT_GYR_MODE);
 800611e:	89bb      	ldrh	r3, [r7, #12]
 8006120:	131b      	asrs	r3, r3, #12
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	b2da      	uxtb	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	705a      	strb	r2, [r3, #1]
 800612e:	e001      	b.n	8006134 <get_alternate_gyro_config+0x6c>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8006130:	23ff      	movs	r3, #255	@ 0xff
 8006132:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006134:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <set_alternate_auto_config>:

/*!
 * @brief This internal API sets alternate auto configurations for feature interrupts.
 */
static int8_t set_alternate_auto_config(const struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 800614a:	2300      	movs	r3, #0
 800614c:	823b      	strh	r3, [r7, #16]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 800614e:	2323      	movs	r3, #35	@ 0x23
 8006150:	81bb      	strh	r3, [r7, #12]

    uint8_t alt_switch, user_switch;

    if (config != NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d035      	beq.n	80061c4 <set_alternate_auto_config+0x84>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 8006158:	f107 010c 	add.w	r1, r7, #12
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2202      	movs	r2, #2
 8006160:	2041      	movs	r0, #65	@ 0x41
 8006162:	f7fc ffa9 	bl	80030b8 <bmi3_set_regs>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI3_OK)
 800616a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d12a      	bne.n	80061c8 <set_alternate_auto_config+0x88>
        {
            /* Set alternate switch config */
            alt_switch = BMI3_SET_BIT_POS0(alt_auto_config[0],
 8006172:	7c3b      	ldrb	r3, [r7, #16]
 8006174:	b25b      	sxtb	r3, r3
 8006176:	f023 030f 	bic.w	r3, r3, #15
 800617a:	b25a      	sxtb	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	b25b      	sxtb	r3, r3
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	b25b      	sxtb	r3, r3
 8006188:	4313      	orrs	r3, r2
 800618a:	b25b      	sxtb	r3, r3
 800618c:	75bb      	strb	r3, [r7, #22]
                                           BMI3_ALT_CONF_ALT_SWITCH,
                                           config->alt_conf_alt_switch_src_select);

            /* Set alternate user config */
            user_switch = BMI3_SET_BITS(alt_auto_config[0],
 800618e:	7c3b      	ldrb	r3, [r7, #16]
 8006190:	b25b      	sxtb	r3, r3
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	b25a      	sxtb	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	b25b      	sxtb	r3, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	757b      	strb	r3, [r7, #21]
                                        BMI3_ALT_CONF_USER_SWITCH,
                                        config->alt_conf_user_switch_src_select);

            alt_auto_config[0] = alt_switch | user_switch;
 80061a6:	7dba      	ldrb	r2, [r7, #22]
 80061a8:	7d7b      	ldrb	r3, [r7, #21]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	743b      	strb	r3, [r7, #16]

            /* Set the configuration back to the feature engine register */
            rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 80061b0:	f107 0110 	add.w	r1, r7, #16
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2202      	movs	r2, #2
 80061b8:	2042      	movs	r0, #66	@ 0x42
 80061ba:	f7fc ff7d 	bl	80030b8 <bmi3_set_regs>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]
 80061c2:	e001      	b.n	80061c8 <set_alternate_auto_config+0x88>
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 80061c4:	23ff      	movs	r3, #255	@ 0xff
 80061c6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80061c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <get_alternate_auto_config>:

/*!
 * @brief This internal API gets alternate auto configurations for feature interrupts.
 */
static int8_t get_alternate_auto_config(struct bmi3_auto_config_change *config, struct bmi3_dev *dev)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
    /* Variable to store result of API */
    int8_t rslt;

    /* Array to define the alternate auto configuration */
    uint8_t alt_auto_config[2] = { 0 };
 80061de:	2300      	movs	r3, #0
 80061e0:	81bb      	strh	r3, [r7, #12]

    /* Array to set the base address of alternate auto config */
    uint8_t base_addr[2] = { BMI3_BASE_ADDR_ALT_AUTO_CONFIG, 0 };
 80061e2:	2323      	movs	r3, #35	@ 0x23
 80061e4:	813b      	strh	r3, [r7, #8]

    if (config != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d025      	beq.n	8006238 <get_alternate_auto_config+0x64>
    {
        /* Set the alternate auto config base address to feature engine transmission address to start DMA transaction */
        rslt = bmi3_set_regs(BMI3_REG_FEATURE_DATA_ADDR, base_addr, 2, dev);
 80061ec:	f107 0108 	add.w	r1, r7, #8
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2202      	movs	r2, #2
 80061f4:	2041      	movs	r0, #65	@ 0x41
 80061f6:	f7fc ff5f 	bl	80030b8 <bmi3_set_regs>
 80061fa:	4603      	mov	r3, r0
 80061fc:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI3_OK)
 80061fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11a      	bne.n	800623c <get_alternate_auto_config+0x68>
        {
            /* Get the configuration from the feature engine register where alternate config feature resides */
            rslt = bmi3_get_regs(BMI3_REG_FEATURE_DATA_TX, alt_auto_config, 2, dev);
 8006206:	f107 010c 	add.w	r1, r7, #12
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2202      	movs	r2, #2
 800620e:	2042      	movs	r0, #66	@ 0x42
 8006210:	f7fc feed 	bl	8002fee <bmi3_get_regs>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI3_OK)
 8006218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10d      	bne.n	800623c <get_alternate_auto_config+0x68>
            {
                /* Get alternate switch config */
                config->alt_conf_alt_switch_src_select = alt_auto_config[0] & BMI3_ALT_CONF_ALT_SWITCH_MASK;
 8006220:	7b3b      	ldrb	r3, [r7, #12]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	b2da      	uxtb	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	701a      	strb	r2, [r3, #0]

                /* Get alternate user config */
                config->alt_conf_user_switch_src_select = (alt_auto_config[0] & BMI3_ALT_CONF_USER_SWITCH_MASK) >>
 800622c:	7b3b      	ldrb	r3, [r7, #12]
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	b2da      	uxtb	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	705a      	strb	r2, [r3, #1]
 8006236:	e001      	b.n	800623c <get_alternate_auto_config+0x68>
            }
        }
    }
    else
    {
        rslt = BMI3_E_NULL_PTR;
 8006238:	23ff      	movs	r3, #255	@ 0xff
 800623a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800623c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <validate_acc_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for accel
 */
static int8_t validate_acc_odr_avg(uint8_t acc_odr, uint8_t acc_avg)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	460a      	mov	r2, r1
 8006252:	71fb      	strb	r3, [r7, #7]
 8006254:	4613      	mov	r3, r2
 8006256:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	613b      	str	r3, [r7, #16]

    switch (acc_odr)
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	3b01      	subs	r3, #1
 8006268:	2b09      	cmp	r3, #9
 800626a:	d835      	bhi.n	80062d8 <validate_acc_odr_avg+0x90>
 800626c:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <validate_acc_odr_avg+0x2c>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	0800629d 	.word	0x0800629d
 8006278:	080062a3 	.word	0x080062a3
 800627c:	080062a9 	.word	0x080062a9
 8006280:	080062af 	.word	0x080062af
 8006284:	080062b5 	.word	0x080062b5
 8006288:	080062bb 	.word	0x080062bb
 800628c:	080062c1 	.word	0x080062c1
 8006290:	080062c7 	.word	0x080062c7
 8006294:	080062cd 	.word	0x080062cd
 8006298:	080062d3 	.word	0x080062d3
    {
        case BMI3_ACC_ODR_0_78HZ:
            odr = 0.78125;
 800629c:	4b2f      	ldr	r3, [pc, #188]	@ (800635c <validate_acc_odr_avg+0x114>)
 800629e:	617b      	str	r3, [r7, #20]
            break;
 80062a0:	e01b      	b.n	80062da <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_1_56HZ:
            odr = 1.5625;
 80062a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006360 <validate_acc_odr_avg+0x118>)
 80062a4:	617b      	str	r3, [r7, #20]
            break;
 80062a6:	e018      	b.n	80062da <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_3_125HZ:
            odr = 3.125;
 80062a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006364 <validate_acc_odr_avg+0x11c>)
 80062aa:	617b      	str	r3, [r7, #20]
            break;
 80062ac:	e015      	b.n	80062da <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_6_25HZ:
            odr = 6.25;
 80062ae:	4b2e      	ldr	r3, [pc, #184]	@ (8006368 <validate_acc_odr_avg+0x120>)
 80062b0:	617b      	str	r3, [r7, #20]
            break;
 80062b2:	e012      	b.n	80062da <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_12_5HZ:
            odr = 12.5;
 80062b4:	4b2d      	ldr	r3, [pc, #180]	@ (800636c <validate_acc_odr_avg+0x124>)
 80062b6:	617b      	str	r3, [r7, #20]
            break;
 80062b8:	e00f      	b.n	80062da <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_25HZ:
            odr = 25.0;
 80062ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006370 <validate_acc_odr_avg+0x128>)
 80062bc:	617b      	str	r3, [r7, #20]
            break;
 80062be:	e00c      	b.n	80062da <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_50HZ:
            odr = 50.0;
 80062c0:	4b2c      	ldr	r3, [pc, #176]	@ (8006374 <validate_acc_odr_avg+0x12c>)
 80062c2:	617b      	str	r3, [r7, #20]
            break;
 80062c4:	e009      	b.n	80062da <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_100HZ:
            odr = 100.0;
 80062c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006378 <validate_acc_odr_avg+0x130>)
 80062c8:	617b      	str	r3, [r7, #20]
            break;
 80062ca:	e006      	b.n	80062da <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_200HZ:
            odr = 200.0;
 80062cc:	4b2b      	ldr	r3, [pc, #172]	@ (800637c <validate_acc_odr_avg+0x134>)
 80062ce:	617b      	str	r3, [r7, #20]
            break;
 80062d0:	e003      	b.n	80062da <validate_acc_odr_avg+0x92>
        case BMI3_ACC_ODR_400HZ:
            odr = 400.0;
 80062d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006380 <validate_acc_odr_avg+0x138>)
 80062d4:	617b      	str	r3, [r7, #20]
            break;
 80062d6:	e000      	b.n	80062da <validate_acc_odr_avg+0x92>
        default:
            break;
 80062d8:	bf00      	nop
    }

    switch (acc_avg)
 80062da:	79bb      	ldrb	r3, [r7, #6]
 80062dc:	2b06      	cmp	r3, #6
 80062de:	d82d      	bhi.n	800633c <validate_acc_odr_avg+0xf4>
 80062e0:	a201      	add	r2, pc, #4	@ (adr r2, 80062e8 <validate_acc_odr_avg+0xa0>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	08006305 	.word	0x08006305
 80062ec:	0800630d 	.word	0x0800630d
 80062f0:	08006315 	.word	0x08006315
 80062f4:	0800631d 	.word	0x0800631d
 80062f8:	08006325 	.word	0x08006325
 80062fc:	0800632d 	.word	0x0800632d
 8006300:	08006335 	.word	0x08006335
    {
        case BMI3_ACC_AVG1:
            avg = 1.0;
 8006304:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006308:	613b      	str	r3, [r7, #16]
            break;
 800630a:	e018      	b.n	800633e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG2:
            avg = 2.0;
 800630c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006310:	613b      	str	r3, [r7, #16]
            break;
 8006312:	e014      	b.n	800633e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG4:
            avg = 4.0;
 8006314:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8006318:	613b      	str	r3, [r7, #16]
            break;
 800631a:	e010      	b.n	800633e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG8:
            avg = 8.0;
 800631c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8006320:	613b      	str	r3, [r7, #16]
            break;
 8006322:	e00c      	b.n	800633e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG16:
            avg = 16.0;
 8006324:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8006328:	613b      	str	r3, [r7, #16]
            break;
 800632a:	e008      	b.n	800633e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG32:
            avg = 32.0;
 800632c:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 8006330:	613b      	str	r3, [r7, #16]
            break;
 8006332:	e004      	b.n	800633e <validate_acc_odr_avg+0xf6>
        case BMI3_ACC_AVG64:
            avg = 64.0;
 8006334:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 8006338:	613b      	str	r3, [r7, #16]
            break;
 800633a:	e000      	b.n	800633e <validate_acc_odr_avg+0xf6>
        default:
            break;
 800633c:	bf00      	nop
    }

    rslt = accel_skipped_samples_check(odr, avg);
 800633e:	edd7 0a04 	vldr	s1, [r7, #16]
 8006342:	ed97 0a05 	vldr	s0, [r7, #20]
 8006346:	f000 f81d 	bl	8006384 <accel_skipped_samples_check>
 800634a:	4603      	mov	r3, r0
 800634c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800634e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	3f480000 	.word	0x3f480000
 8006360:	3fc80000 	.word	0x3fc80000
 8006364:	40480000 	.word	0x40480000
 8006368:	40c80000 	.word	0x40c80000
 800636c:	41480000 	.word	0x41480000
 8006370:	41c80000 	.word	0x41c80000
 8006374:	42480000 	.word	0x42480000
 8006378:	42c80000 	.word	0x42c80000
 800637c:	43480000 	.word	0x43480000
 8006380:	43c80000 	.word	0x43c80000

08006384 <accel_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for accel
 */
static int8_t accel_skipped_samples_check(float odr, float avg)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	ed87 0a01 	vstr	s0, [r7, #4]
 800638e:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 8006392:	4b1b      	ldr	r3, [pc, #108]	@ (8006400 <accel_skipped_samples_check+0x7c>)
 8006394:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 800639c:	edd7 7a01 	vldr	s15, [r7, #4]
 80063a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a8:	dd1f      	ble.n	80063ea <accel_skipped_samples_check+0x66>
 80063aa:	edd7 7a00 	vldr	s15, [r7]
 80063ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b6:	dd18      	ble.n	80063ea <accel_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 80063b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80063bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80063c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c4:	edd7 7a00 	vldr	s15, [r7]
 80063c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063cc:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 80063d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80063d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063dc:	dd02      	ble.n	80063e4 <accel_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80063e2:	e004      	b.n	80063ee <accel_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_ACC_INVALID_CFG;
 80063e4:	23fc      	movs	r3, #252	@ 0xfc
 80063e6:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80063e8:	e001      	b.n	80063ee <accel_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_ACC_INVALID_CFG;
 80063ea:	23fc      	movs	r3, #252	@ 0xfc
 80063ec:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80063ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	45c80000 	.word	0x45c80000

08006404 <validate_gyr_odr_avg>:

/*!
 * @brief This internal API is used to validate ODR and AVG combinations for gyro
 */
static int8_t validate_gyr_odr_avg(uint8_t gyr_odr, uint8_t gyr_avg)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	460a      	mov	r2, r1
 800640e:	71fb      	strb	r3, [r7, #7]
 8006410:	4613      	mov	r3, r2
 8006412:	71bb      	strb	r3, [r7, #6]
    int8_t rslt;

    float odr = 0.0, avg = 0.0;
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	613b      	str	r3, [r7, #16]

    switch (gyr_odr)
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	3b01      	subs	r3, #1
 8006424:	2b09      	cmp	r3, #9
 8006426:	d835      	bhi.n	8006494 <validate_gyr_odr_avg+0x90>
 8006428:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <validate_gyr_odr_avg+0x2c>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	08006459 	.word	0x08006459
 8006434:	0800645f 	.word	0x0800645f
 8006438:	08006465 	.word	0x08006465
 800643c:	0800646b 	.word	0x0800646b
 8006440:	08006471 	.word	0x08006471
 8006444:	08006477 	.word	0x08006477
 8006448:	0800647d 	.word	0x0800647d
 800644c:	08006483 	.word	0x08006483
 8006450:	08006489 	.word	0x08006489
 8006454:	0800648f 	.word	0x0800648f
    {
        case BMI3_GYR_ODR_0_78HZ:
            odr = 0.78125;
 8006458:	4b2f      	ldr	r3, [pc, #188]	@ (8006518 <validate_gyr_odr_avg+0x114>)
 800645a:	617b      	str	r3, [r7, #20]
            break;
 800645c:	e01b      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_1_56HZ:
            odr = 1.5625;
 800645e:	4b2f      	ldr	r3, [pc, #188]	@ (800651c <validate_gyr_odr_avg+0x118>)
 8006460:	617b      	str	r3, [r7, #20]
            break;
 8006462:	e018      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_3_125HZ:
            odr = 3.125;
 8006464:	4b2e      	ldr	r3, [pc, #184]	@ (8006520 <validate_gyr_odr_avg+0x11c>)
 8006466:	617b      	str	r3, [r7, #20]
            break;
 8006468:	e015      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_6_25HZ:
            odr = 6.25;
 800646a:	4b2e      	ldr	r3, [pc, #184]	@ (8006524 <validate_gyr_odr_avg+0x120>)
 800646c:	617b      	str	r3, [r7, #20]
            break;
 800646e:	e012      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_12_5HZ:
            odr = 12.5;
 8006470:	4b2d      	ldr	r3, [pc, #180]	@ (8006528 <validate_gyr_odr_avg+0x124>)
 8006472:	617b      	str	r3, [r7, #20]
            break;
 8006474:	e00f      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_25HZ:
            odr = 25.0;
 8006476:	4b2d      	ldr	r3, [pc, #180]	@ (800652c <validate_gyr_odr_avg+0x128>)
 8006478:	617b      	str	r3, [r7, #20]
            break;
 800647a:	e00c      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_50HZ:
            odr = 50.0;
 800647c:	4b2c      	ldr	r3, [pc, #176]	@ (8006530 <validate_gyr_odr_avg+0x12c>)
 800647e:	617b      	str	r3, [r7, #20]
            break;
 8006480:	e009      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_100HZ:
            odr = 100.0;
 8006482:	4b2c      	ldr	r3, [pc, #176]	@ (8006534 <validate_gyr_odr_avg+0x130>)
 8006484:	617b      	str	r3, [r7, #20]
            break;
 8006486:	e006      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_200HZ:
            odr = 200.0;
 8006488:	4b2b      	ldr	r3, [pc, #172]	@ (8006538 <validate_gyr_odr_avg+0x134>)
 800648a:	617b      	str	r3, [r7, #20]
            break;
 800648c:	e003      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        case BMI3_GYR_ODR_400HZ:
            odr = 400.0;
 800648e:	4b2b      	ldr	r3, [pc, #172]	@ (800653c <validate_gyr_odr_avg+0x138>)
 8006490:	617b      	str	r3, [r7, #20]
            break;
 8006492:	e000      	b.n	8006496 <validate_gyr_odr_avg+0x92>
        default:
            break;
 8006494:	bf00      	nop
    }

    switch (gyr_avg)
 8006496:	79bb      	ldrb	r3, [r7, #6]
 8006498:	2b06      	cmp	r3, #6
 800649a:	d82d      	bhi.n	80064f8 <validate_gyr_odr_avg+0xf4>
 800649c:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <validate_gyr_odr_avg+0xa0>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064c1 	.word	0x080064c1
 80064a8:	080064c9 	.word	0x080064c9
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064d9 	.word	0x080064d9
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	080064e9 	.word	0x080064e9
 80064bc:	080064f1 	.word	0x080064f1
    {
        case BMI3_GYR_AVG1:
            avg = 1.0;
 80064c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80064c4:	613b      	str	r3, [r7, #16]
            break;
 80064c6:	e018      	b.n	80064fa <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG2:
            avg = 2.0;
 80064c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80064cc:	613b      	str	r3, [r7, #16]
            break;
 80064ce:	e014      	b.n	80064fa <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG4:
            avg = 4.0;
 80064d0:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80064d4:	613b      	str	r3, [r7, #16]
            break;
 80064d6:	e010      	b.n	80064fa <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG8:
            avg = 8.0;
 80064d8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80064dc:	613b      	str	r3, [r7, #16]
            break;
 80064de:	e00c      	b.n	80064fa <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG16:
            avg = 16.0;
 80064e0:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80064e4:	613b      	str	r3, [r7, #16]
            break;
 80064e6:	e008      	b.n	80064fa <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG32:
            avg = 32.0;
 80064e8:	f04f 4384 	mov.w	r3, #1107296256	@ 0x42000000
 80064ec:	613b      	str	r3, [r7, #16]
            break;
 80064ee:	e004      	b.n	80064fa <validate_gyr_odr_avg+0xf6>
        case BMI3_GYR_AVG64:
            avg = 64.0;
 80064f0:	f04f 4385 	mov.w	r3, #1115684864	@ 0x42800000
 80064f4:	613b      	str	r3, [r7, #16]
            break;
 80064f6:	e000      	b.n	80064fa <validate_gyr_odr_avg+0xf6>
        default:
            break;
 80064f8:	bf00      	nop
    }

    rslt = gyro_skipped_samples_check(odr, avg);
 80064fa:	edd7 0a04 	vldr	s1, [r7, #16]
 80064fe:	ed97 0a05 	vldr	s0, [r7, #20]
 8006502:	f000 f81d 	bl	8006540 <gyro_skipped_samples_check>
 8006506:	4603      	mov	r3, r0
 8006508:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800650a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	3f480000 	.word	0x3f480000
 800651c:	3fc80000 	.word	0x3fc80000
 8006520:	40480000 	.word	0x40480000
 8006524:	40c80000 	.word	0x40c80000
 8006528:	41480000 	.word	0x41480000
 800652c:	41c80000 	.word	0x41c80000
 8006530:	42480000 	.word	0x42480000
 8006534:	42c80000 	.word	0x42c80000
 8006538:	43480000 	.word	0x43480000
 800653c:	43c80000 	.word	0x43c80000

08006540 <gyro_skipped_samples_check>:

/*!
 * @brief This internal API is used to check skipped samples for gyro
 */
static int8_t gyro_skipped_samples_check(float odr, float avg)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	ed87 0a01 	vstr	s0, [r7, #4]
 800654a:	edc7 0a00 	vstr	s1, [r7]
    int8_t rslt;

    float max_odr = 6400.0;
 800654e:	4b1b      	ldr	r3, [pc, #108]	@ (80065bc <gyro_skipped_samples_check+0x7c>)
 8006550:	613b      	str	r3, [r7, #16]

    float skipped_samples = 0.0;
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]

    if ((odr > 0.0) && (avg > 0.0))
 8006558:	edd7 7a01 	vldr	s15, [r7, #4]
 800655c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006564:	dd1f      	ble.n	80065a6 <gyro_skipped_samples_check+0x66>
 8006566:	edd7 7a00 	vldr	s15, [r7]
 800656a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800656e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006572:	dd18      	ble.n	80065a6 <gyro_skipped_samples_check+0x66>
    {
        skipped_samples = (float)(max_odr / odr) - avg;
 8006574:	edd7 6a04 	vldr	s13, [r7, #16]
 8006578:	edd7 7a01 	vldr	s15, [r7, #4]
 800657c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006580:	edd7 7a00 	vldr	s15, [r7]
 8006584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006588:	edc7 7a03 	vstr	s15, [r7, #12]

        if (skipped_samples > 0.0)
 800658c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006598:	dd02      	ble.n	80065a0 <gyro_skipped_samples_check+0x60>
        {
            rslt = BMI3_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 800659e:	e004      	b.n	80065aa <gyro_skipped_samples_check+0x6a>
        }
        else
        {
            rslt = BMI3_E_GYRO_INVALID_CFG;
 80065a0:	23fb      	movs	r3, #251	@ 0xfb
 80065a2:	75fb      	strb	r3, [r7, #23]
        if (skipped_samples > 0.0)
 80065a4:	e001      	b.n	80065aa <gyro_skipped_samples_check+0x6a>
        }
    }
    else
    {
        rslt = BMI3_E_GYRO_INVALID_CFG;
 80065a6:	23fb      	movs	r3, #251	@ 0xfb
 80065a8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80065aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	45c80000 	.word	0x45c80000

080065c0 <bmi323_init>:
/*!
 * @brief This API is the entry point for bmi323 sensor. It reads and validates the
 * chip-id of the sensor.
 */
int8_t bmi323_init(struct bmi3_dev *dev)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
    /* Variable to define error */
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fdf5 	bl	80071b8 <null_ptr_check>
 80065ce:	4603      	mov	r3, r0
 80065d0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI323_OK)
 80065d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d104      	bne.n	80065e4 <bmi323_init+0x24>
    {
        rslt = bmi3_init(dev);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fc fcb5 	bl	8002f4a <bmi3_init>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI323_OK)
 80065e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <bmi323_init+0x40>
    {
        /* Validate chip-id */
        if (dev->chip_id == BMI323_CHIP_ID)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b43      	cmp	r3, #67	@ 0x43
 80065f2:	d103      	bne.n	80065fc <bmi323_init+0x3c>
        {
            /* Assign resolution to the structure */
            dev->resolution = BMI323_16_BIT_RESOLUTION;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2210      	movs	r2, #16
 80065f8:	731a      	strb	r2, [r3, #12]
 80065fa:	e001      	b.n	8006600 <bmi323_init+0x40>
        }
        else
        {
            rslt = BMI323_E_DEV_NOT_FOUND;
 80065fc:	23fd      	movs	r3, #253	@ 0xfd
 80065fe:	73fb      	strb	r3, [r7, #15]
        }
    }

    if (rslt == BMI323_OK)
 8006600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d105      	bne.n	8006614 <bmi323_init+0x54>
    {
        rslt = bmi323_context_switch_selection(BMI323_WEARABLE_SEL, dev);
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	2001      	movs	r0, #1
 800660c:	f000 f832 	bl	8006674 <bmi323_context_switch_selection>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <bmi323_set_sensor_config>:

/*!
 * @brief This API sets the sensor/feature configuration.
 */
int8_t bmi323_set_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	460b      	mov	r3, r1
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_set_sensor_config(sens_cfg, n_sens, dev);
 800662e:	7afb      	ldrb	r3, [r7, #11]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4619      	mov	r1, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7fc fe31 	bl	800329c <bmi3_set_sensor_config>
 800663a:	4603      	mov	r3, r0
 800663c:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800663e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <bmi323_get_sensor_config>:

/*!
 * @brief This API gets the sensor/feature configuration.
 */
int8_t bmi323_get_sensor_config(struct bmi3_sens_config *sens_cfg, uint8_t n_sens, struct bmi3_dev *dev)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	460b      	mov	r3, r1
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	72fb      	strb	r3, [r7, #11]
    /* Variable to define error */
    int8_t rslt;

    rslt = bmi3_get_sensor_config(sens_cfg, n_sens, dev);
 8006658:	7afb      	ldrb	r3, [r7, #11]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	4619      	mov	r1, r3
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7fc ff26 	bl	80034b0 <bmi3_get_sensor_config>
 8006664:	4603      	mov	r3, r0
 8006666:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8006668:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <bmi323_context_switch_selection>:

/*!
 * @brief This API writes the configurations of context feature for smart phone, wearables and hearables.
 */
int8_t bmi323_context_switch_selection(uint8_t context_sel, struct bmi3_dev *dev)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b0c8      	sub	sp, #288	@ 0x120
 8006678:	af00      	add	r7, sp, #0
 800667a:	4602      	mov	r2, r0
 800667c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006680:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006684:	6019      	str	r1, [r3, #0]
 8006686:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800668a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800668e:	701a      	strb	r2, [r3, #0]
    /* Variable to define error */
    int8_t rslt;

    struct bmi3_sens_config sens_cfg[BMI323_MAX_FEATURE];

    uint8_t index = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    if (context_sel < BMI323_SEL_MAX)
 8006696:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800669a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	f200 8578 	bhi.w	8007196 <bmi323_context_switch_selection+0xb22>
    {
        /* Set any-motion configuration */
        sens_cfg[0].type = BMI323_ANY_MOTION;
 80066a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80066aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80066ae:	2203      	movs	r2, #3
 80066b0:	701a      	strb	r2, [r3, #0]
        sens_cfg[0].cfg.any_motion.slope_thres = any_motion_param_set[context_sel][index++];
 80066b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80066b6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80066c0:	1c59      	adds	r1, r3, #1
 80066c2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80066c6:	4618      	mov	r0, r3
 80066c8:	49e3      	ldr	r1, [pc, #908]	@ (8006a58 <bmi323_context_switch_selection+0x3e4>)
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	4403      	add	r3, r0
 80066d2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80066d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80066da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80066de:	809a      	strh	r2, [r3, #4]
        sens_cfg[0].cfg.any_motion.acc_ref_up = (uint8_t)(any_motion_param_set[context_sel][index++]);
 80066e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80066e4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80066ee:	1c59      	adds	r1, r3, #1
 80066f0:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80066f4:	4618      	mov	r0, r3
 80066f6:	49d8      	ldr	r1, [pc, #864]	@ (8006a58 <bmi323_context_switch_selection+0x3e4>)
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	4403      	add	r3, r0
 8006700:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006704:	b2da      	uxtb	r2, r3
 8006706:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800670a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800670e:	719a      	strb	r2, [r3, #6]
        sens_cfg[0].cfg.any_motion.hysteresis = any_motion_param_set[context_sel][index++];
 8006710:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006714:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800671e:	1c59      	adds	r1, r3, #1
 8006720:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006724:	4618      	mov	r0, r3
 8006726:	49cc      	ldr	r1, [pc, #816]	@ (8006a58 <bmi323_context_switch_selection+0x3e4>)
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	4403      	add	r3, r0
 8006730:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006734:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006738:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800673c:	811a      	strh	r2, [r3, #8]
        sens_cfg[0].cfg.any_motion.duration = any_motion_param_set[context_sel][index++];
 800673e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006742:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006746:	781a      	ldrb	r2, [r3, #0]
 8006748:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800674c:	1c59      	adds	r1, r3, #1
 800674e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006752:	4618      	mov	r0, r3
 8006754:	49c0      	ldr	r1, [pc, #768]	@ (8006a58 <bmi323_context_switch_selection+0x3e4>)
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	4403      	add	r3, r0
 800675e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006762:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006766:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800676a:	805a      	strh	r2, [r3, #2]
        sens_cfg[0].cfg.any_motion.wait_time = any_motion_param_set[context_sel][index++];
 800676c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006770:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800677a:	1c59      	adds	r1, r3, #1
 800677c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006780:	4618      	mov	r0, r3
 8006782:	49b5      	ldr	r1, [pc, #724]	@ (8006a58 <bmi323_context_switch_selection+0x3e4>)
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	4403      	add	r3, r0
 800678c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006790:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006794:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006798:	815a      	strh	r2, [r3, #10]

        /* Set no-motion configuration */
        index = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[1].type = BMI323_NO_MOTION;
 80067a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80067a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80067a8:	2204      	movs	r2, #4
 80067aa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        sens_cfg[1].cfg.no_motion.slope_thres = no_motion_param_set[context_sel][index++];
 80067ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80067b2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80067b6:	781a      	ldrb	r2, [r3, #0]
 80067b8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80067bc:	1c59      	adds	r1, r3, #1
 80067be:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80067c2:	4618      	mov	r0, r3
 80067c4:	49a5      	ldr	r1, [pc, #660]	@ (8006a5c <bmi323_context_switch_selection+0x3e8>)
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	4403      	add	r3, r0
 80067ce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80067d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80067d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80067da:	865a      	strh	r2, [r3, #50]	@ 0x32
        sens_cfg[1].cfg.no_motion.acc_ref_up = (uint8_t)(no_motion_param_set[context_sel][index++]);
 80067dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80067e0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80067ea:	1c59      	adds	r1, r3, #1
 80067ec:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80067f0:	4618      	mov	r0, r3
 80067f2:	499a      	ldr	r1, [pc, #616]	@ (8006a5c <bmi323_context_switch_selection+0x3e8>)
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	4403      	add	r3, r0
 80067fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006806:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800680a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        sens_cfg[1].cfg.no_motion.hysteresis = no_motion_param_set[context_sel][index++];
 800680e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006812:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800681c:	1c59      	adds	r1, r3, #1
 800681e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006822:	4618      	mov	r0, r3
 8006824:	498d      	ldr	r1, [pc, #564]	@ (8006a5c <bmi323_context_switch_selection+0x3e8>)
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	4403      	add	r3, r0
 800682e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006832:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006836:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800683a:	86da      	strh	r2, [r3, #54]	@ 0x36
        sens_cfg[1].cfg.no_motion.duration = no_motion_param_set[context_sel][index++];
 800683c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006840:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006850:	4618      	mov	r0, r3
 8006852:	4982      	ldr	r1, [pc, #520]	@ (8006a5c <bmi323_context_switch_selection+0x3e8>)
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	4403      	add	r3, r0
 800685c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006860:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006864:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006868:	861a      	strh	r2, [r3, #48]	@ 0x30
        sens_cfg[1].cfg.no_motion.wait_time = no_motion_param_set[context_sel][index++];
 800686a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800686e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006872:	781a      	ldrb	r2, [r3, #0]
 8006874:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006878:	1c59      	adds	r1, r3, #1
 800687a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800687e:	4618      	mov	r0, r3
 8006880:	4976      	ldr	r1, [pc, #472]	@ (8006a5c <bmi323_context_switch_selection+0x3e8>)
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	4403      	add	r3, r0
 800688a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800688e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006892:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006896:	871a      	strh	r2, [r3, #56]	@ 0x38

        /* Set tap configuration */
        index = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[2].type = BMI323_TAP;
 800689e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068a2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80068a6:	2209      	movs	r2, #9
 80068a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        sens_cfg[2].cfg.tap.axis_sel = (uint8_t)tap_param_set[context_sel][index++];
 80068ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068b0:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80068c0:	4618      	mov	r0, r3
 80068c2:	4967      	ldr	r1, [pc, #412]	@ (8006a60 <bmi323_context_switch_selection+0x3ec>)
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	4403      	add	r3, r0
 80068ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80068dc:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
        sens_cfg[2].cfg.tap.wait_for_timeout = (uint8_t)tap_param_set[context_sel][index++];
 80068e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068e4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80068e8:	781a      	ldrb	r2, [r3, #0]
 80068ea:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80068ee:	1c59      	adds	r1, r3, #1
 80068f0:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80068f4:	4618      	mov	r0, r3
 80068f6:	495a      	ldr	r1, [pc, #360]	@ (8006a60 <bmi323_context_switch_selection+0x3ec>)
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	4403      	add	r3, r0
 8006902:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800690c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006910:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
        sens_cfg[2].cfg.tap.max_peaks_for_tap = (uint8_t)tap_param_set[context_sel][index++];
 8006914:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006918:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800691c:	781a      	ldrb	r2, [r3, #0]
 800691e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006922:	1c59      	adds	r1, r3, #1
 8006924:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006928:	4618      	mov	r0, r3
 800692a:	494d      	ldr	r1, [pc, #308]	@ (8006a60 <bmi323_context_switch_selection+0x3ec>)
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	4403      	add	r3, r0
 8006936:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006940:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006944:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        sens_cfg[2].cfg.tap.mode = (uint8_t)tap_param_set[context_sel][index++];
 8006948:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800694c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800695c:	4618      	mov	r0, r3
 800695e:	4940      	ldr	r1, [pc, #256]	@ (8006a60 <bmi323_context_switch_selection+0x3ec>)
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	4403      	add	r3, r0
 800696a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800696e:	b2da      	uxtb	r2, r3
 8006970:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006974:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006978:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        sens_cfg[2].cfg.tap.tap_peak_thres = tap_param_set[context_sel][index++];
 800697c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006980:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800698a:	1c59      	adds	r1, r3, #1
 800698c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006990:	4618      	mov	r0, r3
 8006992:	4933      	ldr	r1, [pc, #204]	@ (8006a60 <bmi323_context_switch_selection+0x3ec>)
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	4403      	add	r3, r0
 800699e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80069a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80069a6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80069aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        sens_cfg[2].cfg.tap.max_gest_dur = (uint8_t)tap_param_set[context_sel][index++];
 80069ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80069b2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80069b6:	781a      	ldrb	r2, [r3, #0]
 80069b8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80069bc:	1c59      	adds	r1, r3, #1
 80069be:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80069c2:	4618      	mov	r0, r3
 80069c4:	4926      	ldr	r1, [pc, #152]	@ (8006a60 <bmi323_context_switch_selection+0x3ec>)
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	4403      	add	r3, r0
 80069d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80069da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80069de:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        sens_cfg[2].cfg.tap.max_dur_between_peaks = (uint8_t)tap_param_set[context_sel][index++];
 80069e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80069e6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80069ea:	781a      	ldrb	r2, [r3, #0]
 80069ec:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80069f6:	4618      	mov	r0, r3
 80069f8:	4919      	ldr	r1, [pc, #100]	@ (8006a60 <bmi323_context_switch_selection+0x3ec>)
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	4403      	add	r3, r0
 8006a04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006a0e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006a12:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
        sens_cfg[2].cfg.tap.tap_shock_settling_dur = (uint8_t)tap_param_set[context_sel][index++];
 8006a16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006a1a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006a1e:	781a      	ldrb	r2, [r3, #0]
 8006a20:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006a24:	1c59      	adds	r1, r3, #1
 8006a26:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	490c      	ldr	r1, [pc, #48]	@ (8006a60 <bmi323_context_switch_selection+0x3ec>)
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	4403      	add	r3, r0
 8006a38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006a42:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006a46:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
        sens_cfg[2].cfg.tap.min_quite_dur_between_taps = (uint8_t)tap_param_set[context_sel][index++];
 8006a4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006a4e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	e006      	b.n	8006a64 <bmi323_context_switch_selection+0x3f0>
 8006a56:	bf00      	nop
 8006a58:	24000004 	.word	0x24000004
 8006a5c:	24000024 	.word	0x24000024
 8006a60:	24000044 	.word	0x24000044
 8006a64:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006a6e:	4618      	mov	r0, r3
 8006a70:	49e9      	ldr	r1, [pc, #932]	@ (8006e18 <bmi323_context_switch_selection+0x7a4>)
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	4403      	add	r3, r0
 8006a7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006a86:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006a8a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
        sens_cfg[2].cfg.tap.quite_time_after_gest = (uint8_t)tap_param_set[context_sel][index++];
 8006a8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006a92:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006a9c:	1c59      	adds	r1, r3, #1
 8006a9e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	49dc      	ldr	r1, [pc, #880]	@ (8006e18 <bmi323_context_switch_selection+0x7a4>)
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	4403      	add	r3, r0
 8006ab0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006aba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006abe:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

        /* Set step counter configuration */
        index = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[3].type = BMI323_STEP_COUNTER;
 8006ac8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006acc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006ad0:	2205      	movs	r2, #5
 8006ad2:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
        sens_cfg[3].cfg.step_counter.watermark_level = step_counter_param_set[context_sel][index++];
 8006ad6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ada:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006ade:	781a      	ldrb	r2, [r3, #0]
 8006ae0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006aea:	4618      	mov	r0, r3
 8006aec:	49cb      	ldr	r1, [pc, #812]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006aee:	2316      	movs	r3, #22
 8006af0:	fb02 f303 	mul.w	r3, r2, r3
 8006af4:	4403      	add	r3, r0
 8006af6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006afa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006afe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006b02:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
        sens_cfg[3].cfg.step_counter.reset_counter = step_counter_param_set[context_sel][index++];
 8006b06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006b0a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006b0e:	781a      	ldrb	r2, [r3, #0]
 8006b10:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006b14:	1c59      	adds	r1, r3, #1
 8006b16:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	49bf      	ldr	r1, [pc, #764]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006b1e:	2316      	movs	r3, #22
 8006b20:	fb02 f303 	mul.w	r3, r2, r3
 8006b24:	4403      	add	r3, r0
 8006b26:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006b2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006b2e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006b32:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        sens_cfg[3].cfg.step_counter.env_min_dist_up = step_counter_param_set[context_sel][index++];
 8006b36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006b3a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006b3e:	781a      	ldrb	r2, [r3, #0]
 8006b40:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006b44:	1c59      	adds	r1, r3, #1
 8006b46:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	49b3      	ldr	r1, [pc, #716]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006b4e:	2316      	movs	r3, #22
 8006b50:	fb02 f303 	mul.w	r3, r2, r3
 8006b54:	4403      	add	r3, r0
 8006b56:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006b5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006b5e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006b62:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        sens_cfg[3].cfg.step_counter.env_coef_up = step_counter_param_set[context_sel][index++];
 8006b66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006b6a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006b6e:	781a      	ldrb	r2, [r3, #0]
 8006b70:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006b74:	1c59      	adds	r1, r3, #1
 8006b76:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	49a7      	ldr	r1, [pc, #668]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006b7e:	2316      	movs	r3, #22
 8006b80:	fb02 f303 	mul.w	r3, r2, r3
 8006b84:	4403      	add	r3, r0
 8006b86:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006b8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006b8e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006b92:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        sens_cfg[3].cfg.step_counter.env_min_dist_down = step_counter_param_set[context_sel][index++];
 8006b96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006b9a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006b9e:	781a      	ldrb	r2, [r3, #0]
 8006ba0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006ba4:	1c59      	adds	r1, r3, #1
 8006ba6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006baa:	4618      	mov	r0, r3
 8006bac:	499b      	ldr	r1, [pc, #620]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006bae:	2316      	movs	r3, #22
 8006bb0:	fb02 f303 	mul.w	r3, r2, r3
 8006bb4:	4403      	add	r3, r0
 8006bb6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006bba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006bbe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006bc2:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        sens_cfg[3].cfg.step_counter.env_coef_down = step_counter_param_set[context_sel][index++];
 8006bc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006bca:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006bd4:	1c59      	adds	r1, r3, #1
 8006bd6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006bda:	4618      	mov	r0, r3
 8006bdc:	498f      	ldr	r1, [pc, #572]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006bde:	2316      	movs	r3, #22
 8006be0:	fb02 f303 	mul.w	r3, r2, r3
 8006be4:	4403      	add	r3, r0
 8006be6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006bea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006bee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006bf2:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        sens_cfg[3].cfg.step_counter.mean_val_decay = step_counter_param_set[context_sel][index++];
 8006bf6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006bfa:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006bfe:	781a      	ldrb	r2, [r3, #0]
 8006c00:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006c04:	1c59      	adds	r1, r3, #1
 8006c06:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	4983      	ldr	r1, [pc, #524]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006c0e:	2316      	movs	r3, #22
 8006c10:	fb02 f303 	mul.w	r3, r2, r3
 8006c14:	4403      	add	r3, r0
 8006c16:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006c1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006c1e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006c22:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        sens_cfg[3].cfg.step_counter.mean_step_dur = step_counter_param_set[context_sel][index++];
 8006c26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006c2a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006c34:	1c59      	adds	r1, r3, #1
 8006c36:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	4977      	ldr	r1, [pc, #476]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006c3e:	2316      	movs	r3, #22
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	4403      	add	r3, r0
 8006c46:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006c4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006c4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006c52:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
        sens_cfg[3].cfg.step_counter.step_buffer_size = step_counter_param_set[context_sel][index++];
 8006c56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006c5a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006c64:	1c59      	adds	r1, r3, #1
 8006c66:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	496b      	ldr	r1, [pc, #428]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006c6e:	2316      	movs	r3, #22
 8006c70:	fb02 f303 	mul.w	r3, r2, r3
 8006c74:	4403      	add	r3, r0
 8006c76:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006c7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006c7e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006c82:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
        sens_cfg[3].cfg.step_counter.filter_cascade_enabled = step_counter_param_set[context_sel][index++];
 8006c86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006c8a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006c94:	1c59      	adds	r1, r3, #1
 8006c96:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	495f      	ldr	r1, [pc, #380]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006c9e:	2316      	movs	r3, #22
 8006ca0:	fb02 f303 	mul.w	r3, r2, r3
 8006ca4:	4403      	add	r3, r0
 8006ca6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006caa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006cae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006cb2:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        sens_cfg[3].cfg.step_counter.step_counter_increment = step_counter_param_set[context_sel][index++];
 8006cb6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006cba:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006cc4:	1c59      	adds	r1, r3, #1
 8006cc6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006cca:	4618      	mov	r0, r3
 8006ccc:	4953      	ldr	r1, [pc, #332]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006cce:	2316      	movs	r3, #22
 8006cd0:	fb02 f303 	mul.w	r3, r2, r3
 8006cd4:	4403      	add	r3, r0
 8006cd6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006cda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006cde:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006ce2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        sens_cfg[3].cfg.step_counter.peak_duration_min_walking = step_counter_param_set[context_sel][index++];
 8006ce6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006cea:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006cee:	781a      	ldrb	r2, [r3, #0]
 8006cf0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006cf4:	1c59      	adds	r1, r3, #1
 8006cf6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	4947      	ldr	r1, [pc, #284]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006cfe:	2316      	movs	r3, #22
 8006d00:	fb02 f303 	mul.w	r3, r2, r3
 8006d04:	4403      	add	r3, r0
 8006d06:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006d0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006d0e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006d12:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
        sens_cfg[3].cfg.step_counter.peak_duration_min_running = step_counter_param_set[context_sel][index++];
 8006d16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006d1a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006d1e:	781a      	ldrb	r2, [r3, #0]
 8006d20:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006d24:	1c59      	adds	r1, r3, #1
 8006d26:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	493b      	ldr	r1, [pc, #236]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006d2e:	2316      	movs	r3, #22
 8006d30:	fb02 f303 	mul.w	r3, r2, r3
 8006d34:	4403      	add	r3, r0
 8006d36:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006d3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006d3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006d42:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
        sens_cfg[3].cfg.step_counter.activity_detection_factor = step_counter_param_set[context_sel][index++];
 8006d46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006d4a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006d54:	1c59      	adds	r1, r3, #1
 8006d56:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	492f      	ldr	r1, [pc, #188]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006d5e:	2316      	movs	r3, #22
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	4403      	add	r3, r0
 8006d66:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006d6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006d6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006d72:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
        sens_cfg[3].cfg.step_counter.activity_detection_thres = step_counter_param_set[context_sel][index++];
 8006d76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006d7a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006d84:	1c59      	adds	r1, r3, #1
 8006d86:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	4923      	ldr	r1, [pc, #140]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006d8e:	2316      	movs	r3, #22
 8006d90:	fb02 f303 	mul.w	r3, r2, r3
 8006d94:	4403      	add	r3, r0
 8006d96:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006d9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006d9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006da2:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
        sens_cfg[3].cfg.step_counter.step_duration_max = step_counter_param_set[context_sel][index++];
 8006da6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006daa:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006dae:	781a      	ldrb	r2, [r3, #0]
 8006db0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006db4:	1c59      	adds	r1, r3, #1
 8006db6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006dba:	4618      	mov	r0, r3
 8006dbc:	4917      	ldr	r1, [pc, #92]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006dbe:	2316      	movs	r3, #22
 8006dc0:	fb02 f303 	mul.w	r3, r2, r3
 8006dc4:	4403      	add	r3, r0
 8006dc6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006dca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006dce:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006dd2:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
        sens_cfg[3].cfg.step_counter.step_duration_window = step_counter_param_set[context_sel][index++];
 8006dd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006dda:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006dde:	781a      	ldrb	r2, [r3, #0]
 8006de0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006de4:	1c59      	adds	r1, r3, #1
 8006de6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006dea:	4618      	mov	r0, r3
 8006dec:	490b      	ldr	r1, [pc, #44]	@ (8006e1c <bmi323_context_switch_selection+0x7a8>)
 8006dee:	2316      	movs	r3, #22
 8006df0:	fb02 f303 	mul.w	r3, r2, r3
 8006df4:	4403      	add	r3, r0
 8006df6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006dfa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006dfe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006e02:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        sens_cfg[3].cfg.step_counter.step_duration_pp_enabled = step_counter_param_set[context_sel][index++];
 8006e06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006e0a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006e14:	1c59      	adds	r1, r3, #1
 8006e16:	e003      	b.n	8006e20 <bmi323_context_switch_selection+0x7ac>
 8006e18:	24000044 	.word	0x24000044
 8006e1c:	24000080 	.word	0x24000080
 8006e20:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006e24:	4618      	mov	r0, r3
 8006e26:	49e1      	ldr	r1, [pc, #900]	@ (80071ac <bmi323_context_switch_selection+0xb38>)
 8006e28:	2316      	movs	r3, #22
 8006e2a:	fb02 f303 	mul.w	r3, r2, r3
 8006e2e:	4403      	add	r3, r0
 8006e30:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006e34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006e38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006e3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        sens_cfg[3].cfg.step_counter.step_duration_thres = step_counter_param_set[context_sel][index++];
 8006e40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006e44:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006e4e:	1c59      	adds	r1, r3, #1
 8006e50:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006e54:	4618      	mov	r0, r3
 8006e56:	49d5      	ldr	r1, [pc, #852]	@ (80071ac <bmi323_context_switch_selection+0xb38>)
 8006e58:	2316      	movs	r3, #22
 8006e5a:	fb02 f303 	mul.w	r3, r2, r3
 8006e5e:	4403      	add	r3, r0
 8006e60:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006e64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006e68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006e6c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
        sens_cfg[3].cfg.step_counter.mean_crossing_pp_enabled = step_counter_param_set[context_sel][index++];
 8006e70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006e74:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006e7e:	1c59      	adds	r1, r3, #1
 8006e80:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006e84:	4618      	mov	r0, r3
 8006e86:	49c9      	ldr	r1, [pc, #804]	@ (80071ac <bmi323_context_switch_selection+0xb38>)
 8006e88:	2316      	movs	r3, #22
 8006e8a:	fb02 f303 	mul.w	r3, r2, r3
 8006e8e:	4403      	add	r3, r0
 8006e90:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006e94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006e98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006e9c:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        sens_cfg[3].cfg.step_counter.mcr_threshold = step_counter_param_set[context_sel][index++];
 8006ea0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ea4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006ea8:	781a      	ldrb	r2, [r3, #0]
 8006eaa:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006eae:	1c59      	adds	r1, r3, #1
 8006eb0:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	49bd      	ldr	r1, [pc, #756]	@ (80071ac <bmi323_context_switch_selection+0xb38>)
 8006eb8:	2316      	movs	r3, #22
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	4403      	add	r3, r0
 8006ec0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006ec4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ec8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006ecc:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
        sens_cfg[3].cfg.step_counter.sc_12_res = step_counter_param_set[context_sel][index++];
 8006ed0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ed4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006ede:	1c59      	adds	r1, r3, #1
 8006ee0:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	49b1      	ldr	r1, [pc, #708]	@ (80071ac <bmi323_context_switch_selection+0xb38>)
 8006ee8:	2316      	movs	r3, #22
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
 8006eee:	4403      	add	r3, r0
 8006ef0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006ef4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ef8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006efc:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6

        /* Set significant motion configuration */
        index = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[4].type = BMI323_SIG_MOTION;
 8006f06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f0a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
        sens_cfg[4].cfg.sig_motion.block_size = sig_motion_param_set[context_sel][index++];
 8006f14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f18:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006f1c:	781a      	ldrb	r2, [r3, #0]
 8006f1e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006f22:	1c59      	adds	r1, r3, #1
 8006f24:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006f28:	4618      	mov	r0, r3
 8006f2a:	49a1      	ldr	r1, [pc, #644]	@ (80071b0 <bmi323_context_switch_selection+0xb3c>)
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	4403      	add	r3, r0
 8006f34:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006f38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006f40:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        sens_cfg[4].cfg.sig_motion.peak_2_peak_min = sig_motion_param_set[context_sel][index++];
 8006f44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f48:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006f58:	4618      	mov	r0, r3
 8006f5a:	4995      	ldr	r1, [pc, #596]	@ (80071b0 <bmi323_context_switch_selection+0xb3c>)
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	4403      	add	r3, r0
 8006f64:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006f68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006f70:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
        sens_cfg[4].cfg.sig_motion.mcr_min = (uint8_t)sig_motion_param_set[context_sel][index++];
 8006f74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f78:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006f7c:	781a      	ldrb	r2, [r3, #0]
 8006f7e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006f82:	1c59      	adds	r1, r3, #1
 8006f84:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006f88:	4618      	mov	r0, r3
 8006f8a:	4989      	ldr	r1, [pc, #548]	@ (80071b0 <bmi323_context_switch_selection+0xb3c>)
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	4403      	add	r3, r0
 8006f94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006fa2:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
        sens_cfg[4].cfg.sig_motion.peak_2_peak_max = sig_motion_param_set[context_sel][index++];
 8006fa6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006faa:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006fae:	781a      	ldrb	r2, [r3, #0]
 8006fb0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006fb4:	1c59      	adds	r1, r3, #1
 8006fb6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006fba:	4618      	mov	r0, r3
 8006fbc:	497c      	ldr	r1, [pc, #496]	@ (80071b0 <bmi323_context_switch_selection+0xb3c>)
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	4403      	add	r3, r0
 8006fc6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006fca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006fce:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006fd2:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
        sens_cfg[4].cfg.sig_motion.mcr_max = (uint8_t)sig_motion_param_set[context_sel][index++];
 8006fd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006fda:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8006fde:	781a      	ldrb	r2, [r3, #0]
 8006fe0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006fe4:	1c59      	adds	r1, r3, #1
 8006fe6:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8006fea:	4618      	mov	r0, r3
 8006fec:	4970      	ldr	r1, [pc, #448]	@ (80071b0 <bmi323_context_switch_selection+0xb3c>)
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	4403      	add	r3, r0
 8006ff6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007000:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007004:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

        /* Set orientation configuration */
        index = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        sens_cfg[5].type = BMI323_ORIENTATION;
 800700e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007012:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007016:	2207      	movs	r2, #7
 8007018:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        sens_cfg[5].cfg.orientation.ud_en = (uint8_t)orientation_param_set[context_sel][index++];
 800701c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007020:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800702a:	1c59      	adds	r1, r3, #1
 800702c:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8007030:	4618      	mov	r0, r3
 8007032:	4960      	ldr	r1, [pc, #384]	@ (80071b4 <bmi323_context_switch_selection+0xb40>)
 8007034:	4613      	mov	r3, r2
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	4403      	add	r3, r0
 800703c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007040:	b2da      	uxtb	r2, r3
 8007042:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007046:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800704a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        sens_cfg[5].cfg.orientation.mode = (uint8_t)orientation_param_set[context_sel][index++];
 800704e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007052:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8007056:	781a      	ldrb	r2, [r3, #0]
 8007058:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800705c:	1c59      	adds	r1, r3, #1
 800705e:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8007062:	4618      	mov	r0, r3
 8007064:	4953      	ldr	r1, [pc, #332]	@ (80071b4 <bmi323_context_switch_selection+0xb40>)
 8007066:	4613      	mov	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	4403      	add	r3, r0
 800706e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007072:	b2da      	uxtb	r2, r3
 8007074:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007078:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800707c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
        sens_cfg[5].cfg.orientation.blocking = (uint8_t)orientation_param_set[context_sel][index++];
 8007080:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007084:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800708e:	1c59      	adds	r1, r3, #1
 8007090:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8007094:	4618      	mov	r0, r3
 8007096:	4947      	ldr	r1, [pc, #284]	@ (80071b4 <bmi323_context_switch_selection+0xb40>)
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	4403      	add	r3, r0
 80070a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80070aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80070ae:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        sens_cfg[5].cfg.orientation.theta = (uint8_t)orientation_param_set[context_sel][index++];
 80070b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80070b6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80070c0:	1c59      	adds	r1, r3, #1
 80070c2:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80070c6:	4618      	mov	r0, r3
 80070c8:	493a      	ldr	r1, [pc, #232]	@ (80071b4 <bmi323_context_switch_selection+0xb40>)
 80070ca:	4613      	mov	r3, r2
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	1a9b      	subs	r3, r3, r2
 80070d0:	4403      	add	r3, r0
 80070d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80070dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80070e0:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        sens_cfg[5].cfg.orientation.hold_time = (uint8_t)orientation_param_set[context_sel][index++];
 80070e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80070e8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80070ec:	781a      	ldrb	r2, [r3, #0]
 80070ee:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80070f2:	1c59      	adds	r1, r3, #1
 80070f4:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 80070f8:	4618      	mov	r0, r3
 80070fa:	492e      	ldr	r1, [pc, #184]	@ (80071b4 <bmi323_context_switch_selection+0xb40>)
 80070fc:	4613      	mov	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	4403      	add	r3, r0
 8007104:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800710e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007112:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        sens_cfg[5].cfg.orientation.slope_thres = (uint8_t)orientation_param_set[context_sel][index++];
 8007116:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800711a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800711e:	781a      	ldrb	r2, [r3, #0]
 8007120:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007124:	1c59      	adds	r1, r3, #1
 8007126:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800712a:	4618      	mov	r0, r3
 800712c:	4921      	ldr	r1, [pc, #132]	@ (80071b4 <bmi323_context_switch_selection+0xb40>)
 800712e:	4613      	mov	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	4403      	add	r3, r0
 8007136:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007140:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007144:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
        sens_cfg[5].cfg.orientation.hysteresis = (uint8_t)orientation_param_set[context_sel][index++];
 8007148:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800714c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8007150:	781a      	ldrb	r2, [r3, #0]
 8007152:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007156:	1c59      	adds	r1, r3, #1
 8007158:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800715c:	4618      	mov	r0, r3
 800715e:	4915      	ldr	r1, [pc, #84]	@ (80071b4 <bmi323_context_switch_selection+0xb40>)
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	4403      	add	r3, r0
 8007168:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007172:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007176:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

        /* Set the context configurations */
        rslt = bmi323_set_sensor_config(sens_cfg, BMI323_MAX_FEATURE, dev);
 800717a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800717e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007182:	f107 0008 	add.w	r0, r7, #8
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	2106      	movs	r1, #6
 800718a:	f7ff fa49 	bl	8006620 <bmi323_set_sensor_config>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8007194:	e002      	b.n	800719c <bmi323_context_switch_selection+0xb28>
    }
    else
    {
        rslt = BMI323_E_INVALID_CONTEXT_SEL;
 8007196:	23f3      	movs	r3, #243	@ 0xf3
 8007198:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    }

    return rslt;
 800719c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	24000080 	.word	0x24000080
 80071b0:	24000104 	.word	0x24000104
 80071b4:	24000124 	.word	0x24000124

080071b8 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi3_dev *dev)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <null_ptr_check+0x26>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <null_ptr_check+0x26>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <null_ptr_check+0x26>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <null_ptr_check+0x2c>
    {
        rslt = BMI323_E_NULL_PTR;
 80071de:	23ff      	movs	r3, #255	@ 0xff
 80071e0:	73fb      	strb	r3, [r7, #15]
 80071e2:	e001      	b.n	80071e8 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI323_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80071e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <accel_lsb_to_mps2_4g>:

float accel_lsb_to_mps2_2g(int16_t val) {
    return (val / 16384.0f) * GRAVITY_EARTH;
}

float accel_lsb_to_mps2_4g(int16_t val) {
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	80fb      	strh	r3, [r7, #6]
    return (val / 8192.0f) * GRAVITY_EARTH;
 8007202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800720e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800722c <accel_lsb_to_mps2_4g+0x34>
 8007212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007216:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007230 <accel_lsb_to_mps2_4g+0x38>
 800721a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800721e:	eeb0 0a67 	vmov.f32	s0, s15
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	46000000 	.word	0x46000000
 8007230:	411ce80a 	.word	0x411ce80a

08007234 <gyro_lsb_to_dps_2000>:

float gyro_lsb_to_dps_1000(int16_t val) {
    return val / 32.8f;
}

float gyro_lsb_to_dps_2000(int16_t val) {
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	80fb      	strh	r3, [r7, #6]
    return val / 16.4f;
 800723e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800724a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007264 <gyro_lsb_to_dps_2000+0x30>
 800724e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007252:	eef0 7a66 	vmov.f32	s15, s13
}
 8007256:	eeb0 0a67 	vmov.f32	s0, s15
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	41833333 	.word	0x41833333

08007268 <bmi3_interface_init>:

int8_t bmi3_interface_init(struct bmi3_dev *bmi, uint8_t intf)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMI3_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]

		bmi->intf = BMI3_SPI_INTF;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	725a      	strb	r2, [r3, #9]
		bmi->read = (bmi3_read_fptr_t)SensorAPI_SPIx_Read;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a0a      	ldr	r2, [pc, #40]	@ (80072ac <bmi3_interface_init+0x44>)
 8007282:	611a      	str	r2, [r3, #16]
		bmi->write = (bmi3_write_fptr_t)SensorAPI_SPIx_Write;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a0a      	ldr	r2, [pc, #40]	@ (80072b0 <bmi3_interface_init+0x48>)
 8007288:	615a      	str	r2, [r3, #20]

	/* Assign device address to interface pointer */
	bmi->intf_ptr = &bmi323_dev_addr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a09      	ldr	r2, [pc, #36]	@ (80072b4 <bmi3_interface_init+0x4c>)
 800728e:	605a      	str	r2, [r3, #4]

	/* Configure delay in microseconds */
	bmi->delay_us = bst_delay_us;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a09      	ldr	r2, [pc, #36]	@ (80072b8 <bmi3_interface_init+0x50>)
 8007294:	619a      	str	r2, [r3, #24]

	/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
	bmi->read_write_len = READ_WRITE_LEN;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	81da      	strh	r2, [r3, #14]

	return rslt;
 800729c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	08007625 	.word	0x08007625
 80072b0:	080076a5 	.word	0x080076a5
 80072b4:	2400081c 	.word	0x2400081c
 80072b8:	080075fd 	.word	0x080075fd

080072bc <Init_BMI323>:

int8_t Init_BMI323()
{ // START INIT
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	71fb      	strb	r3, [r7, #7]
	uint8_t chipid;


	rslt = bmi3_interface_init(dev, BMI3_SPI_INTF);
 80072c6:	4b24      	ldr	r3, [pc, #144]	@ (8007358 <Init_BMI323+0x9c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff ffcb 	bl	8007268 <bmi3_interface_init>
 80072d2:	4603      	mov	r3, r0
 80072d4:	71fb      	strb	r3, [r7, #7]

	bst_delay_us(100000, dev->intf_ptr);
 80072d6:	4b20      	ldr	r3, [pc, #128]	@ (8007358 <Init_BMI323+0x9c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	4619      	mov	r1, r3
 80072de:	481f      	ldr	r0, [pc, #124]	@ (800735c <Init_BMI323+0xa0>)
 80072e0:	f000 f98c 	bl	80075fc <bst_delay_us>

	/* Initialize bmi323. */
	rslt = bmi323_init(dev);
 80072e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007358 <Init_BMI323+0x9c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff f969 	bl	80065c0 <bmi323_init>
 80072ee:	4603      	mov	r3, r0
 80072f0:	71fb      	strb	r3, [r7, #7]

	if (rslt != BMI3_OK)
 80072f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d008      	beq.n	800730c <Init_BMI323+0x50>
	{
		printf("bmi323_init() failed, error code: %d\r\n", rslt);
 80072fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072fe:	4619      	mov	r1, r3
 8007300:	4817      	ldr	r0, [pc, #92]	@ (8007360 <Init_BMI323+0xa4>)
 8007302:	f00e fe7b 	bl	8015ffc <iprintf>
		return rslt;
 8007306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730a:	e021      	b.n	8007350 <Init_BMI323+0x94>
	}

	rslt = bmi3_get_regs(BMI3_REG_CHIP_ID, &chipid, 1, dev);
 800730c:	4b12      	ldr	r3, [pc, #72]	@ (8007358 <Init_BMI323+0x9c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	1db9      	adds	r1, r7, #6
 8007312:	2201      	movs	r2, #1
 8007314:	2000      	movs	r0, #0
 8007316:	f7fb fe6a 	bl	8002fee <bmi3_get_regs>
 800731a:	4603      	mov	r3, r0
 800731c:	71fb      	strb	r3, [r7, #7]
	if (rslt != BMI3_OK)
 800731e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d008      	beq.n	8007338 <Init_BMI323+0x7c>
	{
		printf("read chip ID failed, error code: %d\r\n", rslt);
 8007326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800732a:	4619      	mov	r1, r3
 800732c:	480d      	ldr	r0, [pc, #52]	@ (8007364 <Init_BMI323+0xa8>)
 800732e:	f00e fe65 	bl	8015ffc <iprintf>
		return rslt;
 8007332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007336:	e00b      	b.n	8007350 <Init_BMI323+0x94>
	//printf("Result of self-test error is %d\n", st_result_status.self_test_err_rslt);
	//printf("Result of ST_result is %d\n", st_result_status.self_test_rslt);
#endif

	#if defined(ACC_GYRO)
	Open_BMI323_ACC(dev);
 8007338:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <Init_BMI323+0x9c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f000 f813 	bl	8007368 <Open_BMI323_ACC>
	Open_BMI323_GYRO(dev);
 8007342:	4b05      	ldr	r3, [pc, #20]	@ (8007358 <Init_BMI323+0x9c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f854 	bl	80073f4 <Open_BMI323_GYRO>
	#endif

	return rslt;
 800734c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	24000150 	.word	0x24000150
 800735c:	000186a0 	.word	0x000186a0
 8007360:	080198ec 	.word	0x080198ec
 8007364:	08019914 	.word	0x08019914

08007368 <Open_BMI323_ACC>:

int8_t Open_BMI323_ACC()
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08c      	sub	sp, #48	@ 0x30
 800736c:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8007374:	463b      	mov	r3, r7
 8007376:	222e      	movs	r2, #46	@ 0x2e
 8007378:	2100      	movs	r1, #0
 800737a:	4618      	mov	r0, r3
 800737c:	f00e ffa6 	bl	80162cc <memset>

	config.type = BMI3_ACCEL;
 8007380:	2300      	movs	r3, #0
 8007382:	703b      	strb	r3, [r7, #0]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8007384:	4b1a      	ldr	r3, [pc, #104]	@ (80073f0 <Open_BMI323_ACC+0x88>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	463b      	mov	r3, r7
 800738a:	2101      	movs	r1, #1
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff f95c 	bl	800664a <bmi323_get_sensor_config>
 8007392:	4603      	mov	r3, r0
 8007394:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (rslt == BMI3_OK)
 8007398:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800739c:	2b00      	cmp	r3, #0
 800739e:	d121      	bne.n	80073e4 <Open_BMI323_ACC+0x7c>
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_LOW_PWR;
	#else
		/* The Accel bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR. */
		config.cfg.acc.bwp = BMI3_ACC_BW_ODR_HALF;
 80073a0:	2300      	movs	r3, #0
 80073a2:	70fb      	strb	r3, [r7, #3]

		/* Set number of average samples for accel. */
		config.cfg.acc.avg_num = BMI3_ACC_AVG4;
 80073a4:	2302      	movs	r3, #2
 80073a6:	71bb      	strb	r3, [r7, #6]

		/* Enable the accel mode where averaging of samples
		* will be done based on above set bandwidth and ODR.
		* Note : By default accel is disabled. The accel will get enable by selecting the mode.
		*/
		config.cfg.acc.acc_mode = BMI3_ACC_MODE_HIGH_PERF;
 80073a8:	2307      	movs	r3, #7
 80073aa:	713b      	strb	r3, [r7, #4]
	#endif


		config.cfg.acc.odr      = BMI3_ACC_ODR_50HZ;
 80073ac:	2307      	movs	r3, #7
 80073ae:	70bb      	strb	r3, [r7, #2]

		/* Gravity range of the sensor (+/- 2G, 4G, 8G, 16G). */
		config.cfg.acc.range     = BMI3_ACC_RANGE_4G;
 80073b0:	2301      	movs	r3, #1
 80073b2:	717b      	strb	r3, [r7, #5]

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 80073b4:	4b0e      	ldr	r3, [pc, #56]	@ (80073f0 <Open_BMI323_ACC+0x88>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	463b      	mov	r3, r7
 80073ba:	2101      	movs	r1, #1
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff f92f 	bl	8006620 <bmi323_set_sensor_config>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (rslt != BMI3_OK)
 80073c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <Open_BMI323_ACC+0x7c>
		else
		{
			//printf("Open ACC set successfully\r\n");

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 80073d0:	4b07      	ldr	r3, [pc, #28]	@ (80073f0 <Open_BMI323_ACC+0x88>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	463b      	mov	r3, r7
 80073d6:	2101      	movs	r1, #1
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff f936 	bl	800664a <bmi323_get_sensor_config>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				//printf("avg_num = %d\r\n", config.cfg.acc.avg_num);
			}
		}
	}

	return rslt;
 80073e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3730      	adds	r7, #48	@ 0x30
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	24000150 	.word	0x24000150

080073f4 <Open_BMI323_GYRO>:

	return rslt;
}

int8_t Open_BMI323_GYRO()
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08c      	sub	sp, #48	@ 0x30
 80073f8:	af00      	add	r7, sp, #0
	int8_t rslt = BMI3_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Sensor configuration structure */
	struct bmi3_sens_config config = { 0 };
 8007400:	463b      	mov	r3, r7
 8007402:	222e      	movs	r2, #46	@ 0x2e
 8007404:	2100      	movs	r1, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f00e ff60 	bl	80162cc <memset>

	config.type = BMI3_GYRO;
 800740c:	2301      	movs	r3, #1
 800740e:	703b      	strb	r3, [r7, #0]

	/* Get the previous or default configuration settings */
	rslt = bmi323_get_sensor_config(&config, 1, dev);
 8007410:	4b1a      	ldr	r3, [pc, #104]	@ (800747c <Open_BMI323_GYRO+0x88>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	463b      	mov	r3, r7
 8007416:	2101      	movs	r1, #1
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff f916 	bl	800664a <bmi323_get_sensor_config>
 800741e:	4603      	mov	r3, r0
 8007420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (rslt == BMI3_OK)
 8007424:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007428:	2b00      	cmp	r3, #0
 800742a:	d121      	bne.n	8007470 <Open_BMI323_GYRO+0x7c>
	{
		config.cfg.gyr.odr = BMI3_GYR_ODR_50HZ;
 800742c:	2307      	movs	r3, #7
 800742e:	70bb      	strb	r3, [r7, #2]
		/* Gyroscope Angular Rate Measurement Range. By default the range is 2000dps. */
		config.cfg.gyr.range = BMI3_GYR_RANGE_2000DPS;
 8007430:	2304      	movs	r3, #4
 8007432:	717b      	strb	r3, [r7, #5]
		/*	The Gyroscope bandwidth coefficient defines the 3 dB cutoff frequency in relation to the ODR
		*	Value	Name	  Description
		*	  0   odr_half	 BW = gyr_odr/2
		*	  1  odr_quarter BW = gyr_odr/4
		*/
		config.cfg.gyr.bwp = BMI3_GYR_BW_ODR_HALF;
 8007434:	2300      	movs	r3, #0
 8007436:	70fb      	strb	r3, [r7, #3]
		/* By default the gyro is disabled. Gyro is enabled by selecting the mode. */
		config.cfg.gyr.gyr_mode = BMI3_GYR_MODE_HIGH_PERF;
 8007438:	2307      	movs	r3, #7
 800743a:	713b      	strb	r3, [r7, #4]
		*  011     avg_8   Averaging of 8 samples
		*  100     avg_16  Averaging of 16 samples
		*  101     avg_32  Averaging of 32 samples
		*  110     avg_64  Averaging of 64 samples
		*/
		config.cfg.gyr.avg_num = BMI3_GYR_AVG4;
 800743c:	2302      	movs	r3, #2
 800743e:	71bb      	strb	r3, [r7, #6]
	#endif

		/* Set the configurations */
		rslt = bmi323_set_sensor_config(&config, 1, dev);
 8007440:	4b0e      	ldr	r3, [pc, #56]	@ (800747c <Open_BMI323_GYRO+0x88>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	463b      	mov	r3, r7
 8007446:	2101      	movs	r1, #1
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff f8e9 	bl	8006620 <bmi323_set_sensor_config>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (rslt != BMI3_OK)
 8007454:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <Open_BMI323_GYRO+0x7c>
		else
		{
			//printf("Open GYRO successfully\r\n");

			/* Get the configuration settings for validation */
			rslt = bmi323_get_sensor_config(&config, 1, dev);
 800745c:	4b07      	ldr	r3, [pc, #28]	@ (800747c <Open_BMI323_GYRO+0x88>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	463b      	mov	r3, r7
 8007462:	2101      	movs	r1, #1
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff f8f0 	bl	800664a <bmi323_get_sensor_config>
 800746a:	4603      	mov	r3, r0
 800746c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				//printf("avg_num = %d\r\n", config.cfg.gyr.avg_num);
			}
		}
	}

	return rslt;
 8007470:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007474:	4618      	mov	r0, r3
 8007476:	3730      	adds	r7, #48	@ 0x30
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	24000150 	.word	0x24000150

08007480 <bmi323_data_poll>:
	return rslt;
}


// Function to get and return the sensor data
IMU_6_Axis_Data bmi323_data_poll() {
 8007480:	b5b0      	push	{r4, r5, r7, lr}
 8007482:	b094      	sub	sp, #80	@ 0x50
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
    IMU_6_Axis_Data imu_data = {0};
 8007488:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	605a      	str	r2, [r3, #4]
 8007492:	609a      	str	r2, [r3, #8]
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	611a      	str	r2, [r3, #16]
 8007498:	615a      	str	r2, [r3, #20]
    struct bmi3_sensor_data sensor_data[2];

    // Set the types of data we want to read
    sensor_data[0].type = BMI3_ACCEL;
 800749a:	2300      	movs	r3, #0
 800749c:	733b      	strb	r3, [r7, #12]
    sensor_data[1].type = BMI3_GYRO;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 3020 	strb.w	r3, [r7, #32]

    // Get the sensor data
    int8_t rslt = bmi3_get_sensor_data(sensor_data, 2, dev);
 80074a4:	4b2c      	ldr	r3, [pc, #176]	@ (8007558 <bmi323_data_poll+0xd8>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	f107 030c 	add.w	r3, r7, #12
 80074ac:	2102      	movs	r1, #2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fc f90a 	bl	80036c8 <bmi3_get_sensor_data>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (rslt == BMI3_OK) {
 80074ba:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d13c      	bne.n	800753c <bmi323_data_poll+0xbc>
        // Use the appropriate conversion functions
        // Replace these with the actual functions based on your configuration

        // Fill accelerometer data
        if (sensor_data[0].type == BMI3_ACCEL) {
 80074c2:	7b3b      	ldrb	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d11a      	bne.n	80074fe <bmi323_data_poll+0x7e>
            imu_data.acceleration[0] = accel_lsb_to_mps2_4g(sensor_data[0].sens_data.acc.x);  // Assuming ±4g range
 80074c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fe93 	bl	80071f8 <accel_lsb_to_mps2_4g>
 80074d2:	eef0 7a40 	vmov.f32	s15, s0
 80074d6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            imu_data.acceleration[1] = accel_lsb_to_mps2_4g(sensor_data[0].sens_data.acc.y);  // Assuming ±4g range
 80074da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff fe8a 	bl	80071f8 <accel_lsb_to_mps2_4g>
 80074e4:	eef0 7a40 	vmov.f32	s15, s0
 80074e8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            imu_data.acceleration[2] = accel_lsb_to_mps2_4g(sensor_data[0].sens_data.acc.z);  // Assuming ±4g range
 80074ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fe81 	bl	80071f8 <accel_lsb_to_mps2_4g>
 80074f6:	eef0 7a40 	vmov.f32	s15, s0
 80074fa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        }

        // Fill gyroscope data
        if (sensor_data[1].type == BMI3_GYRO) {
 80074fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d11a      	bne.n	800753c <bmi323_data_poll+0xbc>
            imu_data.gyroscope[0] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.x);  // Assuming ±2000°/s range
 8007506:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fe92 	bl	8007234 <gyro_lsb_to_dps_2000>
 8007510:	eef0 7a40 	vmov.f32	s15, s0
 8007514:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            imu_data.gyroscope[1] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.y);  // Assuming ±2000°/s range
 8007518:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff fe89 	bl	8007234 <gyro_lsb_to_dps_2000>
 8007522:	eef0 7a40 	vmov.f32	s15, s0
 8007526:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            imu_data.gyroscope[2] = gyro_lsb_to_dps_2000(sensor_data[1].sens_data.gyr.z);  // Assuming ±2000°/s range
 800752a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff fe80 	bl	8007234 <gyro_lsb_to_dps_2000>
 8007534:	eef0 7a40 	vmov.f32	s15, s0
 8007538:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        }
    } else {
        //printf("Failed to get sensor data. Error code: %d\n", rslt);
    }

    return imu_data;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	461d      	mov	r5, r3
 8007540:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8007544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800754c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	3750      	adds	r7, #80	@ 0x50
 8007554:	46bd      	mov	sp, r7
 8007556:	bdb0      	pop	{r4, r5, r7, pc}
 8007558:	24000150 	.word	0x24000150

0800755c <bmi323_print_sensor_data>:


void bmi323_print_sensor_data(IMU_6_Axis_Data *data){
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af04      	add	r7, sp, #16
 8007562:	6078      	str	r0, [r7, #4]
	printf("BMI323 IMU: \n");
 8007564:	481f      	ldr	r0, [pc, #124]	@ (80075e4 <bmi323_print_sensor_data+0x88>)
 8007566:	f00e fdb1 	bl	80160cc <puts>
    printf("Acceleration: -> ");
 800756a:	481f      	ldr	r0, [pc, #124]	@ (80075e8 <bmi323_print_sensor_data+0x8c>)
 800756c:	f00e fd46 	bl	8015ffc <iprintf>
    printf("X: %f m/s^2, Y: %f m/s^2, Z: %f m/s^2\n", data->acceleration[0], data->acceleration[1], data->acceleration[2]);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	edd3 7a00 	vldr	s15, [r3]
 8007576:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007580:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	edd3 6a02 	vldr	s13, [r3, #8]
 800758a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800758e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007592:	ed8d 7b00 	vstr	d7, [sp]
 8007596:	ec53 2b15 	vmov	r2, r3, d5
 800759a:	4814      	ldr	r0, [pc, #80]	@ (80075ec <bmi323_print_sensor_data+0x90>)
 800759c:	f00e fd2e 	bl	8015ffc <iprintf>
    printf("Angular Rate -> ");
 80075a0:	4813      	ldr	r0, [pc, #76]	@ (80075f0 <bmi323_print_sensor_data+0x94>)
 80075a2:	f00e fd2b 	bl	8015ffc <iprintf>
    printf("X: %f dps, Y: %f dps, Z: %f dps\n", data->gyroscope[0], data->gyroscope[1], data->gyroscope[2]);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80075ac:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80075b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	edd3 6a05 	vldr	s13, [r3, #20]
 80075c0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80075c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80075c8:	ed8d 7b00 	vstr	d7, [sp]
 80075cc:	ec53 2b15 	vmov	r2, r3, d5
 80075d0:	4808      	ldr	r0, [pc, #32]	@ (80075f4 <bmi323_print_sensor_data+0x98>)
 80075d2:	f00e fd13 	bl	8015ffc <iprintf>
    printf("----- \n");
 80075d6:	4808      	ldr	r0, [pc, #32]	@ (80075f8 <bmi323_print_sensor_data+0x9c>)
 80075d8:	f00e fd78 	bl	80160cc <puts>
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	0801993c 	.word	0x0801993c
 80075e8:	0801994c 	.word	0x0801994c
 80075ec:	08019960 	.word	0x08019960
 80075f0:	08019988 	.word	0x08019988
 80075f4:	0801999c 	.word	0x0801999c
 80075f8:	080199c0 	.word	0x080199c0

080075fc <bst_delay_us>:

extern SPI_HandleTypeDef hspi1;


void bst_delay_us(uint32_t period, void *intf_ptr)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
	HAL_Delay(period/1000);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a05      	ldr	r2, [pc, #20]	@ (8007620 <bst_delay_us+0x24>)
 800760a:	fba2 2303 	umull	r2, r3, r2, r3
 800760e:	099b      	lsrs	r3, r3, #6
 8007610:	4618      	mov	r0, r3
 8007612:	f003 fa33 	bl	800aa7c <HAL_Delay>
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	10624dd3 	.word	0x10624dd3

08007624 <SensorAPI_SPIx_Read>:

#if defined(USE_BOSCH_SENSOR_API)


int8_t SensorAPI_SPIx_Read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af02      	add	r7, sp, #8
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr | 0x80;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800763a:	b2da      	uxtb	r2, r3
 800763c:	4b14      	ldr	r3, [pc, #80]	@ (8007690 <SensorAPI_SPIx_Read+0x6c>)
 800763e:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 8007640:	2200      	movs	r2, #0
 8007642:	2110      	movs	r1, #16
 8007644:	4813      	ldr	r0, [pc, #76]	@ (8007694 <SensorAPI_SPIx_Read+0x70>)
 8007646:	f003 fd59 	bl	800b0fc <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, ReadNumbr+1, BUS_TIMEOUT); // timeout 1000msec;
    HAL_SPI_TransmitReceive(&hspi1, GTXBuffer, GRXBuffer, length+1, BUS_TIMEOUT); // timeout 1000msec;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	b29b      	uxth	r3, r3
 800764e:	3301      	adds	r3, #1
 8007650:	b29b      	uxth	r3, r3
 8007652:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007656:	9200      	str	r2, [sp, #0]
 8007658:	4a0f      	ldr	r2, [pc, #60]	@ (8007698 <SensorAPI_SPIx_Read+0x74>)
 800765a:	490d      	ldr	r1, [pc, #52]	@ (8007690 <SensorAPI_SPIx_Read+0x6c>)
 800765c:	480f      	ldr	r0, [pc, #60]	@ (800769c <SensorAPI_SPIx_Read+0x78>)
 800765e:	f00a f80b 	bl	8011678 <HAL_SPI_TransmitReceive>
    while(hspi1.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8007662:	bf00      	nop
 8007664:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <SensorAPI_SPIx_Read+0x78>)
 8007666:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b02      	cmp	r3, #2
 800766e:	d0f9      	beq.n	8007664 <SensorAPI_SPIx_Read+0x40>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 8007670:	2201      	movs	r2, #1
 8007672:	2110      	movs	r1, #16
 8007674:	4807      	ldr	r0, [pc, #28]	@ (8007694 <SensorAPI_SPIx_Read+0x70>)
 8007676:	f003 fd41 	bl	800b0fc <HAL_GPIO_WritePin>
    memcpy(reg_data, GRXBuffer+1, length);
 800767a:	4b09      	ldr	r3, [pc, #36]	@ (80076a0 <SensorAPI_SPIx_Read+0x7c>)
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4619      	mov	r1, r3
 8007680:	68b8      	ldr	r0, [r7, #8]
 8007682:	f00e fea2 	bl	80163ca <memcpy>

    return 0;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	24000820 	.word	0x24000820
 8007694:	58020000 	.word	0x58020000
 8007698:	24000a20 	.word	0x24000a20
 800769c:	240015fc 	.word	0x240015fc
 80076a0:	24000a21 	.word	0x24000a21

080076a4 <SensorAPI_SPIx_Write>:

int8_t SensorAPI_SPIx_Write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]
    GTXBuffer[0] = reg_addr & 0x7F;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	4b13      	ldr	r3, [pc, #76]	@ (800770c <SensorAPI_SPIx_Write+0x68>)
 80076be:	701a      	strb	r2, [r3, #0]
    memcpy(&GTXBuffer[1], reg_data, length);
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	4812      	ldr	r0, [pc, #72]	@ (8007710 <SensorAPI_SPIx_Write+0x6c>)
 80076c6:	f00e fe80 	bl	80163ca <memcpy>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET); // NSS low
 80076ca:	2200      	movs	r2, #0
 80076cc:	2110      	movs	r1, #16
 80076ce:	4811      	ldr	r0, [pc, #68]	@ (8007714 <SensorAPI_SPIx_Write+0x70>)
 80076d0:	f003 fd14 	bl	800b0fc <HAL_GPIO_WritePin>

    //HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, WriteNumbr+1, BUS_TIMEOUT); // send register address + write data
    HAL_SPI_Transmit(&hspi1, GTXBuffer, length+1, BUS_TIMEOUT); // send register address + write data
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3301      	adds	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80076e0:	490a      	ldr	r1, [pc, #40]	@ (800770c <SensorAPI_SPIx_Write+0x68>)
 80076e2:	480d      	ldr	r0, [pc, #52]	@ (8007718 <SensorAPI_SPIx_Write+0x74>)
 80076e4:	f009 fb68 	bl	8010db8 <HAL_SPI_Transmit>
    while(hspi1.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 80076e8:	bf00      	nop
 80076ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <SensorAPI_SPIx_Write+0x74>)
 80076ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d0f9      	beq.n	80076ea <SensorAPI_SPIx_Write+0x46>

    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_SET); // NSS high
 80076f6:	2201      	movs	r2, #1
 80076f8:	2110      	movs	r1, #16
 80076fa:	4806      	ldr	r0, [pc, #24]	@ (8007714 <SensorAPI_SPIx_Write+0x70>)
 80076fc:	f003 fcfe 	bl	800b0fc <HAL_GPIO_WritePin>

    return 0;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	24000820 	.word	0x24000820
 8007710:	24000821 	.word	0x24000821
 8007714:	58020000 	.word	0x58020000
 8007718:	240015fc 	.word	0x240015fc

0800771c <bno055_init>:
 800771c:	b590      	push	{r4, r7, lr}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	23ff      	movs	r3, #255	@ 0xff
 8007726:	73fb      	strb	r3, [r7, #15]
 8007728:	2300      	movs	r3, #0
 800772a:	73bb      	strb	r3, [r7, #14]
 800772c:	2300      	movs	r3, #0
 800772e:	737b      	strb	r3, [r7, #13]
 8007730:	2300      	movs	r3, #0
 8007732:	813b      	strh	r3, [r7, #8]
 8007734:	4a58      	ldr	r2, [pc, #352]	@ (8007898 <bno055_init+0x17c>)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	4b57      	ldr	r3, [pc, #348]	@ (8007898 <bno055_init+0x17c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68dc      	ldr	r4, [r3, #12]
 8007740:	4b55      	ldr	r3, [pc, #340]	@ (8007898 <bno055_init+0x17c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	7a58      	ldrb	r0, [r3, #9]
 8007746:	f107 020d 	add.w	r2, r7, #13
 800774a:	2301      	movs	r3, #1
 800774c:	2107      	movs	r1, #7
 800774e:	47a0      	blx	r4
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
 8007754:	4b50      	ldr	r3, [pc, #320]	@ (8007898 <bno055_init+0x17c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691c      	ldr	r4, [r3, #16]
 800775a:	4b4f      	ldr	r3, [pc, #316]	@ (8007898 <bno055_init+0x17c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	7a58      	ldrb	r0, [r3, #9]
 8007760:	f107 020e 	add.w	r2, r7, #14
 8007764:	2301      	movs	r3, #1
 8007766:	2100      	movs	r1, #0
 8007768:	47a0      	blx	r4
 800776a:	4603      	mov	r3, r0
 800776c:	b2da      	uxtb	r2, r3
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	4413      	add	r3, r2
 8007772:	b2db      	uxtb	r3, r3
 8007774:	73fb      	strb	r3, [r7, #15]
 8007776:	4b48      	ldr	r3, [pc, #288]	@ (8007898 <bno055_init+0x17c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	7bba      	ldrb	r2, [r7, #14]
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	4b46      	ldr	r3, [pc, #280]	@ (8007898 <bno055_init+0x17c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691c      	ldr	r4, [r3, #16]
 8007784:	4b44      	ldr	r3, [pc, #272]	@ (8007898 <bno055_init+0x17c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	7a58      	ldrb	r0, [r3, #9]
 800778a:	f107 020e 	add.w	r2, r7, #14
 800778e:	2301      	movs	r3, #1
 8007790:	2101      	movs	r1, #1
 8007792:	47a0      	blx	r4
 8007794:	4603      	mov	r3, r0
 8007796:	b2da      	uxtb	r2, r3
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	4413      	add	r3, r2
 800779c:	b2db      	uxtb	r3, r3
 800779e:	73fb      	strb	r3, [r7, #15]
 80077a0:	4b3d      	ldr	r3, [pc, #244]	@ (8007898 <bno055_init+0x17c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	7bba      	ldrb	r2, [r7, #14]
 80077a6:	715a      	strb	r2, [r3, #5]
 80077a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007898 <bno055_init+0x17c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691c      	ldr	r4, [r3, #16]
 80077ae:	4b3a      	ldr	r3, [pc, #232]	@ (8007898 <bno055_init+0x17c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	7a58      	ldrb	r0, [r3, #9]
 80077b4:	f107 020e 	add.w	r2, r7, #14
 80077b8:	2301      	movs	r3, #1
 80077ba:	2102      	movs	r1, #2
 80077bc:	47a0      	blx	r4
 80077be:	4603      	mov	r3, r0
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	4413      	add	r3, r2
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	73fb      	strb	r3, [r7, #15]
 80077ca:	4b33      	ldr	r3, [pc, #204]	@ (8007898 <bno055_init+0x17c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	7bba      	ldrb	r2, [r7, #14]
 80077d0:	719a      	strb	r2, [r3, #6]
 80077d2:	4b31      	ldr	r3, [pc, #196]	@ (8007898 <bno055_init+0x17c>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691c      	ldr	r4, [r3, #16]
 80077d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007898 <bno055_init+0x17c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	7a58      	ldrb	r0, [r3, #9]
 80077de:	f107 020e 	add.w	r2, r7, #14
 80077e2:	2301      	movs	r3, #1
 80077e4:	2103      	movs	r1, #3
 80077e6:	47a0      	blx	r4
 80077e8:	4603      	mov	r3, r0
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	4413      	add	r3, r2
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	73fb      	strb	r3, [r7, #15]
 80077f4:	4b28      	ldr	r3, [pc, #160]	@ (8007898 <bno055_init+0x17c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	7bba      	ldrb	r2, [r7, #14]
 80077fa:	71da      	strb	r2, [r3, #7]
 80077fc:	4b26      	ldr	r3, [pc, #152]	@ (8007898 <bno055_init+0x17c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691c      	ldr	r4, [r3, #16]
 8007802:	4b25      	ldr	r3, [pc, #148]	@ (8007898 <bno055_init+0x17c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	7a58      	ldrb	r0, [r3, #9]
 8007808:	f107 020e 	add.w	r2, r7, #14
 800780c:	2301      	movs	r3, #1
 800780e:	2106      	movs	r1, #6
 8007810:	47a0      	blx	r4
 8007812:	4603      	mov	r3, r0
 8007814:	b2da      	uxtb	r2, r3
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	4413      	add	r3, r2
 800781a:	b2db      	uxtb	r3, r3
 800781c:	73fb      	strb	r3, [r7, #15]
 800781e:	4b1e      	ldr	r3, [pc, #120]	@ (8007898 <bno055_init+0x17c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	7bba      	ldrb	r2, [r7, #14]
 8007824:	721a      	strb	r2, [r3, #8]
 8007826:	4b1c      	ldr	r3, [pc, #112]	@ (8007898 <bno055_init+0x17c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691c      	ldr	r4, [r3, #16]
 800782c:	4b1a      	ldr	r3, [pc, #104]	@ (8007898 <bno055_init+0x17c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	7a58      	ldrb	r0, [r3, #9]
 8007832:	f107 0208 	add.w	r2, r7, #8
 8007836:	2302      	movs	r3, #2
 8007838:	2104      	movs	r1, #4
 800783a:	47a0      	blx	r4
 800783c:	4603      	mov	r3, r0
 800783e:	b2da      	uxtb	r2, r3
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	4413      	add	r3, r2
 8007844:	b2db      	uxtb	r3, r3
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	7a3b      	ldrb	r3, [r7, #8]
 800784a:	723b      	strb	r3, [r7, #8]
 800784c:	7a7b      	ldrb	r3, [r7, #9]
 800784e:	021b      	lsls	r3, r3, #8
 8007850:	b29a      	uxth	r2, r3
 8007852:	7a3b      	ldrb	r3, [r7, #8]
 8007854:	4619      	mov	r1, r3
 8007856:	4b10      	ldr	r3, [pc, #64]	@ (8007898 <bno055_init+0x17c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	b292      	uxth	r2, r2
 800785e:	805a      	strh	r2, [r3, #2]
 8007860:	4b0d      	ldr	r3, [pc, #52]	@ (8007898 <bno055_init+0x17c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691c      	ldr	r4, [r3, #16]
 8007866:	4b0c      	ldr	r3, [pc, #48]	@ (8007898 <bno055_init+0x17c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	7a58      	ldrb	r0, [r3, #9]
 800786c:	f107 020e 	add.w	r2, r7, #14
 8007870:	2301      	movs	r3, #1
 8007872:	2107      	movs	r1, #7
 8007874:	47a0      	blx	r4
 8007876:	4603      	mov	r3, r0
 8007878:	b2da      	uxtb	r2, r3
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	4413      	add	r3, r2
 800787e:	b2db      	uxtb	r3, r3
 8007880:	73fb      	strb	r3, [r7, #15]
 8007882:	4b05      	ldr	r3, [pc, #20]	@ (8007898 <bno055_init+0x17c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	7bba      	ldrb	r2, [r7, #14]
 8007888:	711a      	strb	r2, [r3, #4]
 800788a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	bd90      	pop	{r4, r7, pc}
 8007896:	bf00      	nop
 8007898:	24001220 	.word	0x24001220

0800789c <bno055_write_register>:
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
 80078a8:	4613      	mov	r3, r2
 80078aa:	71bb      	strb	r3, [r7, #6]
 80078ac:	23ff      	movs	r3, #255	@ 0xff
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	4b0c      	ldr	r3, [pc, #48]	@ (80078e4 <bno055_write_register+0x48>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <bno055_write_register+0x22>
 80078b8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80078bc:	e00d      	b.n	80078da <bno055_write_register+0x3e>
 80078be:	4b09      	ldr	r3, [pc, #36]	@ (80078e4 <bno055_write_register+0x48>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68dc      	ldr	r4, [r3, #12]
 80078c4:	4b07      	ldr	r3, [pc, #28]	@ (80078e4 <bno055_write_register+0x48>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	7a58      	ldrb	r0, [r3, #9]
 80078ca:	79bb      	ldrb	r3, [r7, #6]
 80078cc:	79f9      	ldrb	r1, [r7, #7]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	47a0      	blx	r4
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
 80078d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd90      	pop	{r4, r7, pc}
 80078e2:	bf00      	nop
 80078e4:	24001220 	.word	0x24001220

080078e8 <bno055_write_page_id>:
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	71fb      	strb	r3, [r7, #7]
 80078f2:	23ff      	movs	r3, #255	@ 0xff
 80078f4:	73fb      	strb	r3, [r7, #15]
 80078f6:	2300      	movs	r3, #0
 80078f8:	73bb      	strb	r3, [r7, #14]
 80078fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007974 <bno055_write_page_id+0x8c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <bno055_write_page_id+0x20>
 8007902:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007906:	e030      	b.n	800796a <bno055_write_page_id+0x82>
 8007908:	4b1a      	ldr	r3, [pc, #104]	@ (8007974 <bno055_write_page_id+0x8c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691c      	ldr	r4, [r3, #16]
 800790e:	4b19      	ldr	r3, [pc, #100]	@ (8007974 <bno055_write_page_id+0x8c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	7a58      	ldrb	r0, [r3, #9]
 8007914:	f107 020e 	add.w	r2, r7, #14
 8007918:	2301      	movs	r3, #1
 800791a:	2107      	movs	r1, #7
 800791c:	47a0      	blx	r4
 800791e:	4603      	mov	r3, r0
 8007920:	73fb      	strb	r3, [r7, #15]
 8007922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d11b      	bne.n	8007962 <bno055_write_page_id+0x7a>
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	73bb      	strb	r3, [r7, #14]
 800792e:	4b11      	ldr	r3, [pc, #68]	@ (8007974 <bno055_write_page_id+0x8c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68dc      	ldr	r4, [r3, #12]
 8007934:	4b0f      	ldr	r3, [pc, #60]	@ (8007974 <bno055_write_page_id+0x8c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	7a58      	ldrb	r0, [r3, #9]
 800793a:	f107 020e 	add.w	r2, r7, #14
 800793e:	2301      	movs	r3, #1
 8007940:	2107      	movs	r1, #7
 8007942:	47a0      	blx	r4
 8007944:	4603      	mov	r3, r0
 8007946:	b2da      	uxtb	r2, r3
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	4413      	add	r3, r2
 800794c:	b2db      	uxtb	r3, r3
 800794e:	73fb      	strb	r3, [r7, #15]
 8007950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d106      	bne.n	8007966 <bno055_write_page_id+0x7e>
 8007958:	4b06      	ldr	r3, [pc, #24]	@ (8007974 <bno055_write_page_id+0x8c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	79fa      	ldrb	r2, [r7, #7]
 800795e:	711a      	strb	r2, [r3, #4]
 8007960:	e001      	b.n	8007966 <bno055_write_page_id+0x7e>
 8007962:	23ff      	movs	r3, #255	@ 0xff
 8007964:	73fb      	strb	r3, [r7, #15]
 8007966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	bd90      	pop	{r4, r7, pc}
 8007972:	bf00      	nop
 8007974:	24001220 	.word	0x24001220

08007978 <bno055_read_mag_x>:
 8007978:	b590      	push	{r4, r7, lr}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	23ff      	movs	r3, #255	@ 0xff
 8007982:	73fb      	strb	r3, [r7, #15]
 8007984:	2300      	movs	r3, #0
 8007986:	81bb      	strh	r3, [r7, #12]
 8007988:	23ff      	movs	r3, #255	@ 0xff
 800798a:	73bb      	strb	r3, [r7, #14]
 800798c:	4b1e      	ldr	r3, [pc, #120]	@ (8007a08 <bno055_read_mag_x+0x90>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <bno055_read_mag_x+0x22>
 8007994:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007998:	e032      	b.n	8007a00 <bno055_read_mag_x+0x88>
 800799a:	4b1b      	ldr	r3, [pc, #108]	@ (8007a08 <bno055_read_mag_x+0x90>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	791b      	ldrb	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <bno055_read_mag_x+0x36>
 80079a4:	2000      	movs	r0, #0
 80079a6:	f7ff ff9f 	bl	80078e8 <bno055_write_page_id>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73bb      	strb	r3, [r7, #14]
 80079ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d004      	beq.n	80079c0 <bno055_read_mag_x+0x48>
 80079b6:	4b14      	ldr	r3, [pc, #80]	@ (8007a08 <bno055_read_mag_x+0x90>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	791b      	ldrb	r3, [r3, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11b      	bne.n	80079f8 <bno055_read_mag_x+0x80>
 80079c0:	4b11      	ldr	r3, [pc, #68]	@ (8007a08 <bno055_read_mag_x+0x90>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691c      	ldr	r4, [r3, #16]
 80079c6:	4b10      	ldr	r3, [pc, #64]	@ (8007a08 <bno055_read_mag_x+0x90>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	7a58      	ldrb	r0, [r3, #9]
 80079cc:	f107 020c 	add.w	r2, r7, #12
 80079d0:	2302      	movs	r3, #2
 80079d2:	210e      	movs	r1, #14
 80079d4:	47a0      	blx	r4
 80079d6:	4603      	mov	r3, r0
 80079d8:	73fb      	strb	r3, [r7, #15]
 80079da:	7b3b      	ldrb	r3, [r7, #12]
 80079dc:	733b      	strb	r3, [r7, #12]
 80079de:	7b7b      	ldrb	r3, [r7, #13]
 80079e0:	737b      	strb	r3, [r7, #13]
 80079e2:	7b7b      	ldrb	r3, [r7, #13]
 80079e4:	b25b      	sxtb	r3, r3
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	b21a      	sxth	r2, r3
 80079ea:	7b3b      	ldrb	r3, [r7, #12]
 80079ec:	b21b      	sxth	r3, r3
 80079ee:	4313      	orrs	r3, r2
 80079f0:	b21a      	sxth	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	801a      	strh	r2, [r3, #0]
 80079f6:	e001      	b.n	80079fc <bno055_read_mag_x+0x84>
 80079f8:	23ff      	movs	r3, #255	@ 0xff
 80079fa:	73fb      	strb	r3, [r7, #15]
 80079fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd90      	pop	{r4, r7, pc}
 8007a08:	24001220 	.word	0x24001220

08007a0c <bno055_read_mag_y>:
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	23ff      	movs	r3, #255	@ 0xff
 8007a16:	73fb      	strb	r3, [r7, #15]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	81bb      	strh	r3, [r7, #12]
 8007a1c:	23ff      	movs	r3, #255	@ 0xff
 8007a1e:	73bb      	strb	r3, [r7, #14]
 8007a20:	4b1e      	ldr	r3, [pc, #120]	@ (8007a9c <bno055_read_mag_y+0x90>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d102      	bne.n	8007a2e <bno055_read_mag_y+0x22>
 8007a28:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007a2c:	e032      	b.n	8007a94 <bno055_read_mag_y+0x88>
 8007a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8007a9c <bno055_read_mag_y+0x90>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	791b      	ldrb	r3, [r3, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <bno055_read_mag_y+0x36>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f7ff ff55 	bl	80078e8 <bno055_write_page_id>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73bb      	strb	r3, [r7, #14]
 8007a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <bno055_read_mag_y+0x48>
 8007a4a:	4b14      	ldr	r3, [pc, #80]	@ (8007a9c <bno055_read_mag_y+0x90>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	791b      	ldrb	r3, [r3, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d11b      	bne.n	8007a8c <bno055_read_mag_y+0x80>
 8007a54:	4b11      	ldr	r3, [pc, #68]	@ (8007a9c <bno055_read_mag_y+0x90>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691c      	ldr	r4, [r3, #16]
 8007a5a:	4b10      	ldr	r3, [pc, #64]	@ (8007a9c <bno055_read_mag_y+0x90>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	7a58      	ldrb	r0, [r3, #9]
 8007a60:	f107 020c 	add.w	r2, r7, #12
 8007a64:	2302      	movs	r3, #2
 8007a66:	2110      	movs	r1, #16
 8007a68:	47a0      	blx	r4
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	7b3b      	ldrb	r3, [r7, #12]
 8007a70:	733b      	strb	r3, [r7, #12]
 8007a72:	7b7b      	ldrb	r3, [r7, #13]
 8007a74:	737b      	strb	r3, [r7, #13]
 8007a76:	7b7b      	ldrb	r3, [r7, #13]
 8007a78:	b25b      	sxtb	r3, r3
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	b21a      	sxth	r2, r3
 8007a7e:	7b3b      	ldrb	r3, [r7, #12]
 8007a80:	b21b      	sxth	r3, r3
 8007a82:	4313      	orrs	r3, r2
 8007a84:	b21a      	sxth	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	801a      	strh	r2, [r3, #0]
 8007a8a:	e001      	b.n	8007a90 <bno055_read_mag_y+0x84>
 8007a8c:	23ff      	movs	r3, #255	@ 0xff
 8007a8e:	73fb      	strb	r3, [r7, #15]
 8007a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd90      	pop	{r4, r7, pc}
 8007a9c:	24001220 	.word	0x24001220

08007aa0 <bno055_read_mag_z>:
 8007aa0:	b590      	push	{r4, r7, lr}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	23ff      	movs	r3, #255	@ 0xff
 8007aaa:	73fb      	strb	r3, [r7, #15]
 8007aac:	2300      	movs	r3, #0
 8007aae:	81bb      	strh	r3, [r7, #12]
 8007ab0:	23ff      	movs	r3, #255	@ 0xff
 8007ab2:	73bb      	strb	r3, [r7, #14]
 8007ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8007b30 <bno055_read_mag_z+0x90>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <bno055_read_mag_z+0x22>
 8007abc:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007ac0:	e032      	b.n	8007b28 <bno055_read_mag_z+0x88>
 8007ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b30 <bno055_read_mag_z+0x90>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	791b      	ldrb	r3, [r3, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <bno055_read_mag_z+0x36>
 8007acc:	2000      	movs	r0, #0
 8007ace:	f7ff ff0b 	bl	80078e8 <bno055_write_page_id>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	73bb      	strb	r3, [r7, #14]
 8007ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <bno055_read_mag_z+0x48>
 8007ade:	4b14      	ldr	r3, [pc, #80]	@ (8007b30 <bno055_read_mag_z+0x90>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	791b      	ldrb	r3, [r3, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d11b      	bne.n	8007b20 <bno055_read_mag_z+0x80>
 8007ae8:	4b11      	ldr	r3, [pc, #68]	@ (8007b30 <bno055_read_mag_z+0x90>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691c      	ldr	r4, [r3, #16]
 8007aee:	4b10      	ldr	r3, [pc, #64]	@ (8007b30 <bno055_read_mag_z+0x90>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	7a58      	ldrb	r0, [r3, #9]
 8007af4:	f107 020c 	add.w	r2, r7, #12
 8007af8:	2302      	movs	r3, #2
 8007afa:	2112      	movs	r1, #18
 8007afc:	47a0      	blx	r4
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]
 8007b02:	7b3b      	ldrb	r3, [r7, #12]
 8007b04:	733b      	strb	r3, [r7, #12]
 8007b06:	7b7b      	ldrb	r3, [r7, #13]
 8007b08:	737b      	strb	r3, [r7, #13]
 8007b0a:	7b7b      	ldrb	r3, [r7, #13]
 8007b0c:	b25b      	sxtb	r3, r3
 8007b0e:	021b      	lsls	r3, r3, #8
 8007b10:	b21a      	sxth	r2, r3
 8007b12:	7b3b      	ldrb	r3, [r7, #12]
 8007b14:	b21b      	sxth	r3, r3
 8007b16:	4313      	orrs	r3, r2
 8007b18:	b21a      	sxth	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	801a      	strh	r2, [r3, #0]
 8007b1e:	e001      	b.n	8007b24 <bno055_read_mag_z+0x84>
 8007b20:	23ff      	movs	r3, #255	@ 0xff
 8007b22:	73fb      	strb	r3, [r7, #15]
 8007b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd90      	pop	{r4, r7, pc}
 8007b30:	24001220 	.word	0x24001220

08007b34 <bno055_read_euler_h>:
 8007b34:	b590      	push	{r4, r7, lr}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	23ff      	movs	r3, #255	@ 0xff
 8007b3e:	73fb      	strb	r3, [r7, #15]
 8007b40:	2300      	movs	r3, #0
 8007b42:	81bb      	strh	r3, [r7, #12]
 8007b44:	23ff      	movs	r3, #255	@ 0xff
 8007b46:	73bb      	strb	r3, [r7, #14]
 8007b48:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc4 <bno055_read_euler_h+0x90>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <bno055_read_euler_h+0x22>
 8007b50:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007b54:	e032      	b.n	8007bbc <bno055_read_euler_h+0x88>
 8007b56:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc4 <bno055_read_euler_h+0x90>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	791b      	ldrb	r3, [r3, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d004      	beq.n	8007b6a <bno055_read_euler_h+0x36>
 8007b60:	2000      	movs	r0, #0
 8007b62:	f7ff fec1 	bl	80078e8 <bno055_write_page_id>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73bb      	strb	r3, [r7, #14]
 8007b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <bno055_read_euler_h+0x48>
 8007b72:	4b14      	ldr	r3, [pc, #80]	@ (8007bc4 <bno055_read_euler_h+0x90>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	791b      	ldrb	r3, [r3, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d11b      	bne.n	8007bb4 <bno055_read_euler_h+0x80>
 8007b7c:	4b11      	ldr	r3, [pc, #68]	@ (8007bc4 <bno055_read_euler_h+0x90>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691c      	ldr	r4, [r3, #16]
 8007b82:	4b10      	ldr	r3, [pc, #64]	@ (8007bc4 <bno055_read_euler_h+0x90>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	7a58      	ldrb	r0, [r3, #9]
 8007b88:	f107 020c 	add.w	r2, r7, #12
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	211a      	movs	r1, #26
 8007b90:	47a0      	blx	r4
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
 8007b96:	7b3b      	ldrb	r3, [r7, #12]
 8007b98:	733b      	strb	r3, [r7, #12]
 8007b9a:	7b7b      	ldrb	r3, [r7, #13]
 8007b9c:	737b      	strb	r3, [r7, #13]
 8007b9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	b21a      	sxth	r2, r3
 8007ba6:	7b3b      	ldrb	r3, [r7, #12]
 8007ba8:	b21b      	sxth	r3, r3
 8007baa:	4313      	orrs	r3, r2
 8007bac:	b21a      	sxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	e001      	b.n	8007bb8 <bno055_read_euler_h+0x84>
 8007bb4:	23ff      	movs	r3, #255	@ 0xff
 8007bb6:	73fb      	strb	r3, [r7, #15]
 8007bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd90      	pop	{r4, r7, pc}
 8007bc4:	24001220 	.word	0x24001220

08007bc8 <bno055_read_euler_r>:
 8007bc8:	b590      	push	{r4, r7, lr}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	23ff      	movs	r3, #255	@ 0xff
 8007bd2:	73fb      	strb	r3, [r7, #15]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	81bb      	strh	r3, [r7, #12]
 8007bd8:	23ff      	movs	r3, #255	@ 0xff
 8007bda:	73bb      	strb	r3, [r7, #14]
 8007bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8007c58 <bno055_read_euler_r+0x90>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d102      	bne.n	8007bea <bno055_read_euler_r+0x22>
 8007be4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007be8:	e032      	b.n	8007c50 <bno055_read_euler_r+0x88>
 8007bea:	4b1b      	ldr	r3, [pc, #108]	@ (8007c58 <bno055_read_euler_r+0x90>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	791b      	ldrb	r3, [r3, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d004      	beq.n	8007bfe <bno055_read_euler_r+0x36>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f7ff fe77 	bl	80078e8 <bno055_write_page_id>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73bb      	strb	r3, [r7, #14]
 8007bfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <bno055_read_euler_r+0x48>
 8007c06:	4b14      	ldr	r3, [pc, #80]	@ (8007c58 <bno055_read_euler_r+0x90>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	791b      	ldrb	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d11b      	bne.n	8007c48 <bno055_read_euler_r+0x80>
 8007c10:	4b11      	ldr	r3, [pc, #68]	@ (8007c58 <bno055_read_euler_r+0x90>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691c      	ldr	r4, [r3, #16]
 8007c16:	4b10      	ldr	r3, [pc, #64]	@ (8007c58 <bno055_read_euler_r+0x90>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	7a58      	ldrb	r0, [r3, #9]
 8007c1c:	f107 020c 	add.w	r2, r7, #12
 8007c20:	2302      	movs	r3, #2
 8007c22:	211c      	movs	r1, #28
 8007c24:	47a0      	blx	r4
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
 8007c2a:	7b3b      	ldrb	r3, [r7, #12]
 8007c2c:	733b      	strb	r3, [r7, #12]
 8007c2e:	7b7b      	ldrb	r3, [r7, #13]
 8007c30:	737b      	strb	r3, [r7, #13]
 8007c32:	7b7b      	ldrb	r3, [r7, #13]
 8007c34:	b25b      	sxtb	r3, r3
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	b21a      	sxth	r2, r3
 8007c3a:	7b3b      	ldrb	r3, [r7, #12]
 8007c3c:	b21b      	sxth	r3, r3
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	b21a      	sxth	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	801a      	strh	r2, [r3, #0]
 8007c46:	e001      	b.n	8007c4c <bno055_read_euler_r+0x84>
 8007c48:	23ff      	movs	r3, #255	@ 0xff
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd90      	pop	{r4, r7, pc}
 8007c58:	24001220 	.word	0x24001220

08007c5c <bno055_read_euler_p>:
 8007c5c:	b590      	push	{r4, r7, lr}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	23ff      	movs	r3, #255	@ 0xff
 8007c66:	73fb      	strb	r3, [r7, #15]
 8007c68:	2300      	movs	r3, #0
 8007c6a:	81bb      	strh	r3, [r7, #12]
 8007c6c:	23ff      	movs	r3, #255	@ 0xff
 8007c6e:	73bb      	strb	r3, [r7, #14]
 8007c70:	4b1e      	ldr	r3, [pc, #120]	@ (8007cec <bno055_read_euler_p+0x90>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <bno055_read_euler_p+0x22>
 8007c78:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007c7c:	e032      	b.n	8007ce4 <bno055_read_euler_p+0x88>
 8007c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cec <bno055_read_euler_p+0x90>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	791b      	ldrb	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <bno055_read_euler_p+0x36>
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f7ff fe2d 	bl	80078e8 <bno055_write_page_id>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	73bb      	strb	r3, [r7, #14]
 8007c92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <bno055_read_euler_p+0x48>
 8007c9a:	4b14      	ldr	r3, [pc, #80]	@ (8007cec <bno055_read_euler_p+0x90>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	791b      	ldrb	r3, [r3, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d11b      	bne.n	8007cdc <bno055_read_euler_p+0x80>
 8007ca4:	4b11      	ldr	r3, [pc, #68]	@ (8007cec <bno055_read_euler_p+0x90>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691c      	ldr	r4, [r3, #16]
 8007caa:	4b10      	ldr	r3, [pc, #64]	@ (8007cec <bno055_read_euler_p+0x90>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	7a58      	ldrb	r0, [r3, #9]
 8007cb0:	f107 020c 	add.w	r2, r7, #12
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	211e      	movs	r1, #30
 8007cb8:	47a0      	blx	r4
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]
 8007cbe:	7b3b      	ldrb	r3, [r7, #12]
 8007cc0:	733b      	strb	r3, [r7, #12]
 8007cc2:	7b7b      	ldrb	r3, [r7, #13]
 8007cc4:	737b      	strb	r3, [r7, #13]
 8007cc6:	7b7b      	ldrb	r3, [r7, #13]
 8007cc8:	b25b      	sxtb	r3, r3
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	b21a      	sxth	r2, r3
 8007cce:	7b3b      	ldrb	r3, [r7, #12]
 8007cd0:	b21b      	sxth	r3, r3
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	b21a      	sxth	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	801a      	strh	r2, [r3, #0]
 8007cda:	e001      	b.n	8007ce0 <bno055_read_euler_p+0x84>
 8007cdc:	23ff      	movs	r3, #255	@ 0xff
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd90      	pop	{r4, r7, pc}
 8007cec:	24001220 	.word	0x24001220

08007cf0 <bno055_read_quaternion_w>:
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	23ff      	movs	r3, #255	@ 0xff
 8007cfa:	73fb      	strb	r3, [r7, #15]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	81bb      	strh	r3, [r7, #12]
 8007d00:	23ff      	movs	r3, #255	@ 0xff
 8007d02:	73bb      	strb	r3, [r7, #14]
 8007d04:	4b1e      	ldr	r3, [pc, #120]	@ (8007d80 <bno055_read_quaternion_w+0x90>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d102      	bne.n	8007d12 <bno055_read_quaternion_w+0x22>
 8007d0c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007d10:	e032      	b.n	8007d78 <bno055_read_quaternion_w+0x88>
 8007d12:	4b1b      	ldr	r3, [pc, #108]	@ (8007d80 <bno055_read_quaternion_w+0x90>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	791b      	ldrb	r3, [r3, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <bno055_read_quaternion_w+0x36>
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	f7ff fde3 	bl	80078e8 <bno055_write_page_id>
 8007d22:	4603      	mov	r3, r0
 8007d24:	73bb      	strb	r3, [r7, #14]
 8007d26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <bno055_read_quaternion_w+0x48>
 8007d2e:	4b14      	ldr	r3, [pc, #80]	@ (8007d80 <bno055_read_quaternion_w+0x90>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	791b      	ldrb	r3, [r3, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d11b      	bne.n	8007d70 <bno055_read_quaternion_w+0x80>
 8007d38:	4b11      	ldr	r3, [pc, #68]	@ (8007d80 <bno055_read_quaternion_w+0x90>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691c      	ldr	r4, [r3, #16]
 8007d3e:	4b10      	ldr	r3, [pc, #64]	@ (8007d80 <bno055_read_quaternion_w+0x90>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	7a58      	ldrb	r0, [r3, #9]
 8007d44:	f107 020c 	add.w	r2, r7, #12
 8007d48:	2302      	movs	r3, #2
 8007d4a:	2120      	movs	r1, #32
 8007d4c:	47a0      	blx	r4
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]
 8007d52:	7b3b      	ldrb	r3, [r7, #12]
 8007d54:	733b      	strb	r3, [r7, #12]
 8007d56:	7b7b      	ldrb	r3, [r7, #13]
 8007d58:	737b      	strb	r3, [r7, #13]
 8007d5a:	7b7b      	ldrb	r3, [r7, #13]
 8007d5c:	b25b      	sxtb	r3, r3
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	b21a      	sxth	r2, r3
 8007d62:	7b3b      	ldrb	r3, [r7, #12]
 8007d64:	b21b      	sxth	r3, r3
 8007d66:	4313      	orrs	r3, r2
 8007d68:	b21a      	sxth	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	801a      	strh	r2, [r3, #0]
 8007d6e:	e001      	b.n	8007d74 <bno055_read_quaternion_w+0x84>
 8007d70:	23ff      	movs	r3, #255	@ 0xff
 8007d72:	73fb      	strb	r3, [r7, #15]
 8007d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd90      	pop	{r4, r7, pc}
 8007d80:	24001220 	.word	0x24001220

08007d84 <bno055_read_quaternion_x>:
 8007d84:	b590      	push	{r4, r7, lr}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	23ff      	movs	r3, #255	@ 0xff
 8007d8e:	73fb      	strb	r3, [r7, #15]
 8007d90:	2300      	movs	r3, #0
 8007d92:	81bb      	strh	r3, [r7, #12]
 8007d94:	23ff      	movs	r3, #255	@ 0xff
 8007d96:	73bb      	strb	r3, [r7, #14]
 8007d98:	4b1e      	ldr	r3, [pc, #120]	@ (8007e14 <bno055_read_quaternion_x+0x90>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d102      	bne.n	8007da6 <bno055_read_quaternion_x+0x22>
 8007da0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007da4:	e032      	b.n	8007e0c <bno055_read_quaternion_x+0x88>
 8007da6:	4b1b      	ldr	r3, [pc, #108]	@ (8007e14 <bno055_read_quaternion_x+0x90>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	791b      	ldrb	r3, [r3, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <bno055_read_quaternion_x+0x36>
 8007db0:	2000      	movs	r0, #0
 8007db2:	f7ff fd99 	bl	80078e8 <bno055_write_page_id>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73bb      	strb	r3, [r7, #14]
 8007dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d004      	beq.n	8007dcc <bno055_read_quaternion_x+0x48>
 8007dc2:	4b14      	ldr	r3, [pc, #80]	@ (8007e14 <bno055_read_quaternion_x+0x90>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	791b      	ldrb	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11b      	bne.n	8007e04 <bno055_read_quaternion_x+0x80>
 8007dcc:	4b11      	ldr	r3, [pc, #68]	@ (8007e14 <bno055_read_quaternion_x+0x90>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691c      	ldr	r4, [r3, #16]
 8007dd2:	4b10      	ldr	r3, [pc, #64]	@ (8007e14 <bno055_read_quaternion_x+0x90>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	7a58      	ldrb	r0, [r3, #9]
 8007dd8:	f107 020c 	add.w	r2, r7, #12
 8007ddc:	2302      	movs	r3, #2
 8007dde:	2122      	movs	r1, #34	@ 0x22
 8007de0:	47a0      	blx	r4
 8007de2:	4603      	mov	r3, r0
 8007de4:	73fb      	strb	r3, [r7, #15]
 8007de6:	7b3b      	ldrb	r3, [r7, #12]
 8007de8:	733b      	strb	r3, [r7, #12]
 8007dea:	7b7b      	ldrb	r3, [r7, #13]
 8007dec:	737b      	strb	r3, [r7, #13]
 8007dee:	7b7b      	ldrb	r3, [r7, #13]
 8007df0:	b25b      	sxtb	r3, r3
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	b21a      	sxth	r2, r3
 8007df6:	7b3b      	ldrb	r3, [r7, #12]
 8007df8:	b21b      	sxth	r3, r3
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	b21a      	sxth	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	801a      	strh	r2, [r3, #0]
 8007e02:	e001      	b.n	8007e08 <bno055_read_quaternion_x+0x84>
 8007e04:	23ff      	movs	r3, #255	@ 0xff
 8007e06:	73fb      	strb	r3, [r7, #15]
 8007e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd90      	pop	{r4, r7, pc}
 8007e14:	24001220 	.word	0x24001220

08007e18 <bno055_read_quaternion_y>:
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	23ff      	movs	r3, #255	@ 0xff
 8007e22:	73fb      	strb	r3, [r7, #15]
 8007e24:	2300      	movs	r3, #0
 8007e26:	81bb      	strh	r3, [r7, #12]
 8007e28:	23ff      	movs	r3, #255	@ 0xff
 8007e2a:	73bb      	strb	r3, [r7, #14]
 8007e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ea8 <bno055_read_quaternion_y+0x90>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <bno055_read_quaternion_y+0x22>
 8007e34:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007e38:	e032      	b.n	8007ea0 <bno055_read_quaternion_y+0x88>
 8007e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea8 <bno055_read_quaternion_y+0x90>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	791b      	ldrb	r3, [r3, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <bno055_read_quaternion_y+0x36>
 8007e44:	2000      	movs	r0, #0
 8007e46:	f7ff fd4f 	bl	80078e8 <bno055_write_page_id>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]
 8007e4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <bno055_read_quaternion_y+0x48>
 8007e56:	4b14      	ldr	r3, [pc, #80]	@ (8007ea8 <bno055_read_quaternion_y+0x90>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	791b      	ldrb	r3, [r3, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d11b      	bne.n	8007e98 <bno055_read_quaternion_y+0x80>
 8007e60:	4b11      	ldr	r3, [pc, #68]	@ (8007ea8 <bno055_read_quaternion_y+0x90>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691c      	ldr	r4, [r3, #16]
 8007e66:	4b10      	ldr	r3, [pc, #64]	@ (8007ea8 <bno055_read_quaternion_y+0x90>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	7a58      	ldrb	r0, [r3, #9]
 8007e6c:	f107 020c 	add.w	r2, r7, #12
 8007e70:	2302      	movs	r3, #2
 8007e72:	2124      	movs	r1, #36	@ 0x24
 8007e74:	47a0      	blx	r4
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
 8007e7a:	7b3b      	ldrb	r3, [r7, #12]
 8007e7c:	733b      	strb	r3, [r7, #12]
 8007e7e:	7b7b      	ldrb	r3, [r7, #13]
 8007e80:	737b      	strb	r3, [r7, #13]
 8007e82:	7b7b      	ldrb	r3, [r7, #13]
 8007e84:	b25b      	sxtb	r3, r3
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	b21a      	sxth	r2, r3
 8007e8a:	7b3b      	ldrb	r3, [r7, #12]
 8007e8c:	b21b      	sxth	r3, r3
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	b21a      	sxth	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	e001      	b.n	8007e9c <bno055_read_quaternion_y+0x84>
 8007e98:	23ff      	movs	r3, #255	@ 0xff
 8007e9a:	73fb      	strb	r3, [r7, #15]
 8007e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd90      	pop	{r4, r7, pc}
 8007ea8:	24001220 	.word	0x24001220

08007eac <bno055_read_quaternion_z>:
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	23ff      	movs	r3, #255	@ 0xff
 8007eb6:	73fb      	strb	r3, [r7, #15]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	81bb      	strh	r3, [r7, #12]
 8007ebc:	23ff      	movs	r3, #255	@ 0xff
 8007ebe:	73bb      	strb	r3, [r7, #14]
 8007ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8007f3c <bno055_read_quaternion_z+0x90>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <bno055_read_quaternion_z+0x22>
 8007ec8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007ecc:	e032      	b.n	8007f34 <bno055_read_quaternion_z+0x88>
 8007ece:	4b1b      	ldr	r3, [pc, #108]	@ (8007f3c <bno055_read_quaternion_z+0x90>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <bno055_read_quaternion_z+0x36>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	f7ff fd05 	bl	80078e8 <bno055_write_page_id>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73bb      	strb	r3, [r7, #14]
 8007ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <bno055_read_quaternion_z+0x48>
 8007eea:	4b14      	ldr	r3, [pc, #80]	@ (8007f3c <bno055_read_quaternion_z+0x90>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	791b      	ldrb	r3, [r3, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11b      	bne.n	8007f2c <bno055_read_quaternion_z+0x80>
 8007ef4:	4b11      	ldr	r3, [pc, #68]	@ (8007f3c <bno055_read_quaternion_z+0x90>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691c      	ldr	r4, [r3, #16]
 8007efa:	4b10      	ldr	r3, [pc, #64]	@ (8007f3c <bno055_read_quaternion_z+0x90>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	7a58      	ldrb	r0, [r3, #9]
 8007f00:	f107 020c 	add.w	r2, r7, #12
 8007f04:	2302      	movs	r3, #2
 8007f06:	2126      	movs	r1, #38	@ 0x26
 8007f08:	47a0      	blx	r4
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73fb      	strb	r3, [r7, #15]
 8007f0e:	7b3b      	ldrb	r3, [r7, #12]
 8007f10:	733b      	strb	r3, [r7, #12]
 8007f12:	7b7b      	ldrb	r3, [r7, #13]
 8007f14:	737b      	strb	r3, [r7, #13]
 8007f16:	7b7b      	ldrb	r3, [r7, #13]
 8007f18:	b25b      	sxtb	r3, r3
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	b21a      	sxth	r2, r3
 8007f1e:	7b3b      	ldrb	r3, [r7, #12]
 8007f20:	b21b      	sxth	r3, r3
 8007f22:	4313      	orrs	r3, r2
 8007f24:	b21a      	sxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	801a      	strh	r2, [r3, #0]
 8007f2a:	e001      	b.n	8007f30 <bno055_read_quaternion_z+0x84>
 8007f2c:	23ff      	movs	r3, #255	@ 0xff
 8007f2e:	73fb      	strb	r3, [r7, #15]
 8007f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd90      	pop	{r4, r7, pc}
 8007f3c:	24001220 	.word	0x24001220

08007f40 <bno055_read_linear_accel_x>:
 8007f40:	b590      	push	{r4, r7, lr}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	23ff      	movs	r3, #255	@ 0xff
 8007f4a:	73fb      	strb	r3, [r7, #15]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	81bb      	strh	r3, [r7, #12]
 8007f50:	23ff      	movs	r3, #255	@ 0xff
 8007f52:	73bb      	strb	r3, [r7, #14]
 8007f54:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd0 <bno055_read_linear_accel_x+0x90>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d102      	bne.n	8007f62 <bno055_read_linear_accel_x+0x22>
 8007f5c:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007f60:	e032      	b.n	8007fc8 <bno055_read_linear_accel_x+0x88>
 8007f62:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd0 <bno055_read_linear_accel_x+0x90>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	791b      	ldrb	r3, [r3, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d004      	beq.n	8007f76 <bno055_read_linear_accel_x+0x36>
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	f7ff fcbb 	bl	80078e8 <bno055_write_page_id>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73bb      	strb	r3, [r7, #14]
 8007f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <bno055_read_linear_accel_x+0x48>
 8007f7e:	4b14      	ldr	r3, [pc, #80]	@ (8007fd0 <bno055_read_linear_accel_x+0x90>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	791b      	ldrb	r3, [r3, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11b      	bne.n	8007fc0 <bno055_read_linear_accel_x+0x80>
 8007f88:	4b11      	ldr	r3, [pc, #68]	@ (8007fd0 <bno055_read_linear_accel_x+0x90>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691c      	ldr	r4, [r3, #16]
 8007f8e:	4b10      	ldr	r3, [pc, #64]	@ (8007fd0 <bno055_read_linear_accel_x+0x90>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	7a58      	ldrb	r0, [r3, #9]
 8007f94:	f107 020c 	add.w	r2, r7, #12
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2128      	movs	r1, #40	@ 0x28
 8007f9c:	47a0      	blx	r4
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73fb      	strb	r3, [r7, #15]
 8007fa2:	7b3b      	ldrb	r3, [r7, #12]
 8007fa4:	733b      	strb	r3, [r7, #12]
 8007fa6:	7b7b      	ldrb	r3, [r7, #13]
 8007fa8:	737b      	strb	r3, [r7, #13]
 8007faa:	7b7b      	ldrb	r3, [r7, #13]
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	021b      	lsls	r3, r3, #8
 8007fb0:	b21a      	sxth	r2, r3
 8007fb2:	7b3b      	ldrb	r3, [r7, #12]
 8007fb4:	b21b      	sxth	r3, r3
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	b21a      	sxth	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	801a      	strh	r2, [r3, #0]
 8007fbe:	e001      	b.n	8007fc4 <bno055_read_linear_accel_x+0x84>
 8007fc0:	23ff      	movs	r3, #255	@ 0xff
 8007fc2:	73fb      	strb	r3, [r7, #15]
 8007fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd90      	pop	{r4, r7, pc}
 8007fd0:	24001220 	.word	0x24001220

08007fd4 <bno055_read_linear_accel_y>:
 8007fd4:	b590      	push	{r4, r7, lr}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	23ff      	movs	r3, #255	@ 0xff
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	81bb      	strh	r3, [r7, #12]
 8007fe4:	23ff      	movs	r3, #255	@ 0xff
 8007fe6:	73bb      	strb	r3, [r7, #14]
 8007fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8008064 <bno055_read_linear_accel_y+0x90>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <bno055_read_linear_accel_y+0x22>
 8007ff0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8007ff4:	e032      	b.n	800805c <bno055_read_linear_accel_y+0x88>
 8007ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8008064 <bno055_read_linear_accel_y+0x90>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	791b      	ldrb	r3, [r3, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <bno055_read_linear_accel_y+0x36>
 8008000:	2000      	movs	r0, #0
 8008002:	f7ff fc71 	bl	80078e8 <bno055_write_page_id>
 8008006:	4603      	mov	r3, r0
 8008008:	73bb      	strb	r3, [r7, #14]
 800800a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d004      	beq.n	800801c <bno055_read_linear_accel_y+0x48>
 8008012:	4b14      	ldr	r3, [pc, #80]	@ (8008064 <bno055_read_linear_accel_y+0x90>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	791b      	ldrb	r3, [r3, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d11b      	bne.n	8008054 <bno055_read_linear_accel_y+0x80>
 800801c:	4b11      	ldr	r3, [pc, #68]	@ (8008064 <bno055_read_linear_accel_y+0x90>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691c      	ldr	r4, [r3, #16]
 8008022:	4b10      	ldr	r3, [pc, #64]	@ (8008064 <bno055_read_linear_accel_y+0x90>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	7a58      	ldrb	r0, [r3, #9]
 8008028:	f107 020c 	add.w	r2, r7, #12
 800802c:	2302      	movs	r3, #2
 800802e:	212a      	movs	r1, #42	@ 0x2a
 8008030:	47a0      	blx	r4
 8008032:	4603      	mov	r3, r0
 8008034:	73fb      	strb	r3, [r7, #15]
 8008036:	7b3b      	ldrb	r3, [r7, #12]
 8008038:	733b      	strb	r3, [r7, #12]
 800803a:	7b7b      	ldrb	r3, [r7, #13]
 800803c:	737b      	strb	r3, [r7, #13]
 800803e:	7b7b      	ldrb	r3, [r7, #13]
 8008040:	b25b      	sxtb	r3, r3
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	b21a      	sxth	r2, r3
 8008046:	7b3b      	ldrb	r3, [r7, #12]
 8008048:	b21b      	sxth	r3, r3
 800804a:	4313      	orrs	r3, r2
 800804c:	b21a      	sxth	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	801a      	strh	r2, [r3, #0]
 8008052:	e001      	b.n	8008058 <bno055_read_linear_accel_y+0x84>
 8008054:	23ff      	movs	r3, #255	@ 0xff
 8008056:	73fb      	strb	r3, [r7, #15]
 8008058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	bd90      	pop	{r4, r7, pc}
 8008064:	24001220 	.word	0x24001220

08008068 <bno055_read_linear_accel_z>:
 8008068:	b590      	push	{r4, r7, lr}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	23ff      	movs	r3, #255	@ 0xff
 8008072:	73fb      	strb	r3, [r7, #15]
 8008074:	2300      	movs	r3, #0
 8008076:	81bb      	strh	r3, [r7, #12]
 8008078:	23ff      	movs	r3, #255	@ 0xff
 800807a:	73bb      	strb	r3, [r7, #14]
 800807c:	4b1e      	ldr	r3, [pc, #120]	@ (80080f8 <bno055_read_linear_accel_z+0x90>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <bno055_read_linear_accel_z+0x22>
 8008084:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8008088:	e032      	b.n	80080f0 <bno055_read_linear_accel_z+0x88>
 800808a:	4b1b      	ldr	r3, [pc, #108]	@ (80080f8 <bno055_read_linear_accel_z+0x90>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	791b      	ldrb	r3, [r3, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d004      	beq.n	800809e <bno055_read_linear_accel_z+0x36>
 8008094:	2000      	movs	r0, #0
 8008096:	f7ff fc27 	bl	80078e8 <bno055_write_page_id>
 800809a:	4603      	mov	r3, r0
 800809c:	73bb      	strb	r3, [r7, #14]
 800809e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d004      	beq.n	80080b0 <bno055_read_linear_accel_z+0x48>
 80080a6:	4b14      	ldr	r3, [pc, #80]	@ (80080f8 <bno055_read_linear_accel_z+0x90>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	791b      	ldrb	r3, [r3, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d11b      	bne.n	80080e8 <bno055_read_linear_accel_z+0x80>
 80080b0:	4b11      	ldr	r3, [pc, #68]	@ (80080f8 <bno055_read_linear_accel_z+0x90>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691c      	ldr	r4, [r3, #16]
 80080b6:	4b10      	ldr	r3, [pc, #64]	@ (80080f8 <bno055_read_linear_accel_z+0x90>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	7a58      	ldrb	r0, [r3, #9]
 80080bc:	f107 020c 	add.w	r2, r7, #12
 80080c0:	2302      	movs	r3, #2
 80080c2:	212c      	movs	r1, #44	@ 0x2c
 80080c4:	47a0      	blx	r4
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]
 80080ca:	7b3b      	ldrb	r3, [r7, #12]
 80080cc:	733b      	strb	r3, [r7, #12]
 80080ce:	7b7b      	ldrb	r3, [r7, #13]
 80080d0:	737b      	strb	r3, [r7, #13]
 80080d2:	7b7b      	ldrb	r3, [r7, #13]
 80080d4:	b25b      	sxtb	r3, r3
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	b21a      	sxth	r2, r3
 80080da:	7b3b      	ldrb	r3, [r7, #12]
 80080dc:	b21b      	sxth	r3, r3
 80080de:	4313      	orrs	r3, r2
 80080e0:	b21a      	sxth	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	801a      	strh	r2, [r3, #0]
 80080e6:	e001      	b.n	80080ec <bno055_read_linear_accel_z+0x84>
 80080e8:	23ff      	movs	r3, #255	@ 0xff
 80080ea:	73fb      	strb	r3, [r7, #15]
 80080ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd90      	pop	{r4, r7, pc}
 80080f8:	24001220 	.word	0x24001220

080080fc <bno055_read_gravity_x>:
 80080fc:	b590      	push	{r4, r7, lr}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	23ff      	movs	r3, #255	@ 0xff
 8008106:	73fb      	strb	r3, [r7, #15]
 8008108:	2300      	movs	r3, #0
 800810a:	81bb      	strh	r3, [r7, #12]
 800810c:	23ff      	movs	r3, #255	@ 0xff
 800810e:	73bb      	strb	r3, [r7, #14]
 8008110:	4b1e      	ldr	r3, [pc, #120]	@ (800818c <bno055_read_gravity_x+0x90>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <bno055_read_gravity_x+0x22>
 8008118:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800811c:	e032      	b.n	8008184 <bno055_read_gravity_x+0x88>
 800811e:	4b1b      	ldr	r3, [pc, #108]	@ (800818c <bno055_read_gravity_x+0x90>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	791b      	ldrb	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d004      	beq.n	8008132 <bno055_read_gravity_x+0x36>
 8008128:	2000      	movs	r0, #0
 800812a:	f7ff fbdd 	bl	80078e8 <bno055_write_page_id>
 800812e:	4603      	mov	r3, r0
 8008130:	73bb      	strb	r3, [r7, #14]
 8008132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <bno055_read_gravity_x+0x48>
 800813a:	4b14      	ldr	r3, [pc, #80]	@ (800818c <bno055_read_gravity_x+0x90>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	791b      	ldrb	r3, [r3, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d11b      	bne.n	800817c <bno055_read_gravity_x+0x80>
 8008144:	4b11      	ldr	r3, [pc, #68]	@ (800818c <bno055_read_gravity_x+0x90>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691c      	ldr	r4, [r3, #16]
 800814a:	4b10      	ldr	r3, [pc, #64]	@ (800818c <bno055_read_gravity_x+0x90>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	7a58      	ldrb	r0, [r3, #9]
 8008150:	f107 020c 	add.w	r2, r7, #12
 8008154:	2302      	movs	r3, #2
 8008156:	212e      	movs	r1, #46	@ 0x2e
 8008158:	47a0      	blx	r4
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]
 800815e:	7b3b      	ldrb	r3, [r7, #12]
 8008160:	733b      	strb	r3, [r7, #12]
 8008162:	7b7b      	ldrb	r3, [r7, #13]
 8008164:	737b      	strb	r3, [r7, #13]
 8008166:	7b7b      	ldrb	r3, [r7, #13]
 8008168:	b25b      	sxtb	r3, r3
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	b21a      	sxth	r2, r3
 800816e:	7b3b      	ldrb	r3, [r7, #12]
 8008170:	b21b      	sxth	r3, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	b21a      	sxth	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	801a      	strh	r2, [r3, #0]
 800817a:	e001      	b.n	8008180 <bno055_read_gravity_x+0x84>
 800817c:	23ff      	movs	r3, #255	@ 0xff
 800817e:	73fb      	strb	r3, [r7, #15]
 8008180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	bd90      	pop	{r4, r7, pc}
 800818c:	24001220 	.word	0x24001220

08008190 <bno055_read_gravity_y>:
 8008190:	b590      	push	{r4, r7, lr}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	23ff      	movs	r3, #255	@ 0xff
 800819a:	73fb      	strb	r3, [r7, #15]
 800819c:	2300      	movs	r3, #0
 800819e:	81bb      	strh	r3, [r7, #12]
 80081a0:	23ff      	movs	r3, #255	@ 0xff
 80081a2:	73bb      	strb	r3, [r7, #14]
 80081a4:	4b1e      	ldr	r3, [pc, #120]	@ (8008220 <bno055_read_gravity_y+0x90>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <bno055_read_gravity_y+0x22>
 80081ac:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80081b0:	e032      	b.n	8008218 <bno055_read_gravity_y+0x88>
 80081b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008220 <bno055_read_gravity_y+0x90>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	791b      	ldrb	r3, [r3, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <bno055_read_gravity_y+0x36>
 80081bc:	2000      	movs	r0, #0
 80081be:	f7ff fb93 	bl	80078e8 <bno055_write_page_id>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73bb      	strb	r3, [r7, #14]
 80081c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d004      	beq.n	80081d8 <bno055_read_gravity_y+0x48>
 80081ce:	4b14      	ldr	r3, [pc, #80]	@ (8008220 <bno055_read_gravity_y+0x90>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	791b      	ldrb	r3, [r3, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d11b      	bne.n	8008210 <bno055_read_gravity_y+0x80>
 80081d8:	4b11      	ldr	r3, [pc, #68]	@ (8008220 <bno055_read_gravity_y+0x90>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691c      	ldr	r4, [r3, #16]
 80081de:	4b10      	ldr	r3, [pc, #64]	@ (8008220 <bno055_read_gravity_y+0x90>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	7a58      	ldrb	r0, [r3, #9]
 80081e4:	f107 020c 	add.w	r2, r7, #12
 80081e8:	2302      	movs	r3, #2
 80081ea:	2130      	movs	r1, #48	@ 0x30
 80081ec:	47a0      	blx	r4
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
 80081f2:	7b3b      	ldrb	r3, [r7, #12]
 80081f4:	733b      	strb	r3, [r7, #12]
 80081f6:	7b7b      	ldrb	r3, [r7, #13]
 80081f8:	737b      	strb	r3, [r7, #13]
 80081fa:	7b7b      	ldrb	r3, [r7, #13]
 80081fc:	b25b      	sxtb	r3, r3
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	b21a      	sxth	r2, r3
 8008202:	7b3b      	ldrb	r3, [r7, #12]
 8008204:	b21b      	sxth	r3, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	b21a      	sxth	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	e001      	b.n	8008214 <bno055_read_gravity_y+0x84>
 8008210:	23ff      	movs	r3, #255	@ 0xff
 8008212:	73fb      	strb	r3, [r7, #15]
 8008214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	bd90      	pop	{r4, r7, pc}
 8008220:	24001220 	.word	0x24001220

08008224 <bno055_read_gravity_z>:
 8008224:	b590      	push	{r4, r7, lr}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	23ff      	movs	r3, #255	@ 0xff
 800822e:	73fb      	strb	r3, [r7, #15]
 8008230:	2300      	movs	r3, #0
 8008232:	81bb      	strh	r3, [r7, #12]
 8008234:	23ff      	movs	r3, #255	@ 0xff
 8008236:	73bb      	strb	r3, [r7, #14]
 8008238:	4b1e      	ldr	r3, [pc, #120]	@ (80082b4 <bno055_read_gravity_z+0x90>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <bno055_read_gravity_z+0x22>
 8008240:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8008244:	e032      	b.n	80082ac <bno055_read_gravity_z+0x88>
 8008246:	4b1b      	ldr	r3, [pc, #108]	@ (80082b4 <bno055_read_gravity_z+0x90>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	791b      	ldrb	r3, [r3, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <bno055_read_gravity_z+0x36>
 8008250:	2000      	movs	r0, #0
 8008252:	f7ff fb49 	bl	80078e8 <bno055_write_page_id>
 8008256:	4603      	mov	r3, r0
 8008258:	73bb      	strb	r3, [r7, #14]
 800825a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <bno055_read_gravity_z+0x48>
 8008262:	4b14      	ldr	r3, [pc, #80]	@ (80082b4 <bno055_read_gravity_z+0x90>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	791b      	ldrb	r3, [r3, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d11b      	bne.n	80082a4 <bno055_read_gravity_z+0x80>
 800826c:	4b11      	ldr	r3, [pc, #68]	@ (80082b4 <bno055_read_gravity_z+0x90>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	691c      	ldr	r4, [r3, #16]
 8008272:	4b10      	ldr	r3, [pc, #64]	@ (80082b4 <bno055_read_gravity_z+0x90>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	7a58      	ldrb	r0, [r3, #9]
 8008278:	f107 020c 	add.w	r2, r7, #12
 800827c:	2302      	movs	r3, #2
 800827e:	2132      	movs	r1, #50	@ 0x32
 8008280:	47a0      	blx	r4
 8008282:	4603      	mov	r3, r0
 8008284:	73fb      	strb	r3, [r7, #15]
 8008286:	7b3b      	ldrb	r3, [r7, #12]
 8008288:	733b      	strb	r3, [r7, #12]
 800828a:	7b7b      	ldrb	r3, [r7, #13]
 800828c:	737b      	strb	r3, [r7, #13]
 800828e:	7b7b      	ldrb	r3, [r7, #13]
 8008290:	b25b      	sxtb	r3, r3
 8008292:	021b      	lsls	r3, r3, #8
 8008294:	b21a      	sxth	r2, r3
 8008296:	7b3b      	ldrb	r3, [r7, #12]
 8008298:	b21b      	sxth	r3, r3
 800829a:	4313      	orrs	r3, r2
 800829c:	b21a      	sxth	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	e001      	b.n	80082a8 <bno055_read_gravity_z+0x84>
 80082a4:	23ff      	movs	r3, #255	@ 0xff
 80082a6:	73fb      	strb	r3, [r7, #15]
 80082a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}
 80082b4:	24001220 	.word	0x24001220

080082b8 <bno055_get_operation_mode>:
 80082b8:	b590      	push	{r4, r7, lr}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	23ff      	movs	r3, #255	@ 0xff
 80082c2:	73fb      	strb	r3, [r7, #15]
 80082c4:	2300      	movs	r3, #0
 80082c6:	737b      	strb	r3, [r7, #13]
 80082c8:	23ff      	movs	r3, #255	@ 0xff
 80082ca:	73bb      	strb	r3, [r7, #14]
 80082cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008338 <bno055_get_operation_mode+0x80>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <bno055_get_operation_mode+0x22>
 80082d4:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80082d8:	e02a      	b.n	8008330 <bno055_get_operation_mode+0x78>
 80082da:	4b17      	ldr	r3, [pc, #92]	@ (8008338 <bno055_get_operation_mode+0x80>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	791b      	ldrb	r3, [r3, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d004      	beq.n	80082ee <bno055_get_operation_mode+0x36>
 80082e4:	2000      	movs	r0, #0
 80082e6:	f7ff faff 	bl	80078e8 <bno055_write_page_id>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73bb      	strb	r3, [r7, #14]
 80082ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <bno055_get_operation_mode+0x48>
 80082f6:	4b10      	ldr	r3, [pc, #64]	@ (8008338 <bno055_get_operation_mode+0x80>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	791b      	ldrb	r3, [r3, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d113      	bne.n	8008328 <bno055_get_operation_mode+0x70>
 8008300:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <bno055_get_operation_mode+0x80>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691c      	ldr	r4, [r3, #16]
 8008306:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <bno055_get_operation_mode+0x80>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	7a58      	ldrb	r0, [r3, #9]
 800830c:	f107 020d 	add.w	r2, r7, #13
 8008310:	2301      	movs	r3, #1
 8008312:	213d      	movs	r1, #61	@ 0x3d
 8008314:	47a0      	blx	r4
 8008316:	4603      	mov	r3, r0
 8008318:	73fb      	strb	r3, [r7, #15]
 800831a:	7b7b      	ldrb	r3, [r7, #13]
 800831c:	f003 030f 	and.w	r3, r3, #15
 8008320:	b2da      	uxtb	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	e001      	b.n	800832c <bno055_get_operation_mode+0x74>
 8008328:	23ff      	movs	r3, #255	@ 0xff
 800832a:	73fb      	strb	r3, [r7, #15]
 800832c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	bd90      	pop	{r4, r7, pc}
 8008338:	24001220 	.word	0x24001220

0800833c <bno055_set_operation_mode>:
 800833c:	b590      	push	{r4, r7, lr}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
 8008346:	23ff      	movs	r3, #255	@ 0xff
 8008348:	73fb      	strb	r3, [r7, #15]
 800834a:	2300      	movs	r3, #0
 800834c:	737b      	strb	r3, [r7, #13]
 800834e:	2300      	movs	r3, #0
 8008350:	733b      	strb	r3, [r7, #12]
 8008352:	23ff      	movs	r3, #255	@ 0xff
 8008354:	73bb      	strb	r3, [r7, #14]
 8008356:	4b5c      	ldr	r3, [pc, #368]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <bno055_set_operation_mode+0x28>
 800835e:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8008362:	e0ac      	b.n	80084be <bno055_set_operation_mode+0x182>
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff ffa5 	bl	80082b8 <bno055_get_operation_mode>
 800836e:	4603      	mov	r3, r0
 8008370:	73bb      	strb	r3, [r7, #14]
 8008372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008376:	2b00      	cmp	r3, #0
 8008378:	f040 809d 	bne.w	80084b6 <bno055_set_operation_mode+0x17a>
 800837c:	7b3b      	ldrb	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d137      	bne.n	80083f2 <bno055_set_operation_mode+0xb6>
 8008382:	4b51      	ldr	r3, [pc, #324]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691c      	ldr	r4, [r3, #16]
 8008388:	4b4f      	ldr	r3, [pc, #316]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	7a58      	ldrb	r0, [r3, #9]
 800838e:	f107 020d 	add.w	r2, r7, #13
 8008392:	2301      	movs	r3, #1
 8008394:	213d      	movs	r1, #61	@ 0x3d
 8008396:	47a0      	blx	r4
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
 800839c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f040 808a 	bne.w	80084ba <bno055_set_operation_mode+0x17e>
 80083a6:	7b7b      	ldrb	r3, [r7, #13]
 80083a8:	b25b      	sxtb	r3, r3
 80083aa:	f023 030f 	bic.w	r3, r3, #15
 80083ae:	b25a      	sxtb	r2, r3
 80083b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083b4:	f003 030f 	and.w	r3, r3, #15
 80083b8:	b25b      	sxtb	r3, r3
 80083ba:	4313      	orrs	r3, r2
 80083bc:	b25b      	sxtb	r3, r3
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	737b      	strb	r3, [r7, #13]
 80083c2:	4b41      	ldr	r3, [pc, #260]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68dc      	ldr	r4, [r3, #12]
 80083c8:	4b3f      	ldr	r3, [pc, #252]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	7a58      	ldrb	r0, [r3, #9]
 80083ce:	f107 020d 	add.w	r2, r7, #13
 80083d2:	2301      	movs	r3, #1
 80083d4:	213d      	movs	r1, #61	@ 0x3d
 80083d6:	47a0      	blx	r4
 80083d8:	4603      	mov	r3, r0
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	4413      	add	r3, r2
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	73fb      	strb	r3, [r7, #15]
 80083e4:	4b38      	ldr	r3, [pc, #224]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80083ee:	4798      	blx	r3
 80083f0:	e063      	b.n	80084ba <bno055_set_operation_mode+0x17e>
 80083f2:	4b35      	ldr	r3, [pc, #212]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	691c      	ldr	r4, [r3, #16]
 80083f8:	4b33      	ldr	r3, [pc, #204]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	7a58      	ldrb	r0, [r3, #9]
 80083fe:	f107 020d 	add.w	r2, r7, #13
 8008402:	2301      	movs	r3, #1
 8008404:	213d      	movs	r1, #61	@ 0x3d
 8008406:	47a0      	blx	r4
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
 800840c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d116      	bne.n	8008442 <bno055_set_operation_mode+0x106>
 8008414:	7b7b      	ldrb	r3, [r7, #13]
 8008416:	f023 030f 	bic.w	r3, r3, #15
 800841a:	b2db      	uxtb	r3, r3
 800841c:	737b      	strb	r3, [r7, #13]
 800841e:	f107 030d 	add.w	r3, r7, #13
 8008422:	2201      	movs	r2, #1
 8008424:	4619      	mov	r1, r3
 8008426:	203d      	movs	r0, #61	@ 0x3d
 8008428:	f7ff fa38 	bl	800789c <bno055_write_register>
 800842c:	4603      	mov	r3, r0
 800842e:	b2da      	uxtb	r2, r3
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	4413      	add	r3, r2
 8008434:	b2db      	uxtb	r3, r3
 8008436:	73fb      	strb	r3, [r7, #15]
 8008438:	4b23      	ldr	r3, [pc, #140]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	2014      	movs	r0, #20
 8008440:	4798      	blx	r3
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d038      	beq.n	80084ba <bno055_set_operation_mode+0x17e>
 8008448:	4b1f      	ldr	r3, [pc, #124]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691c      	ldr	r4, [r3, #16]
 800844e:	4b1e      	ldr	r3, [pc, #120]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	7a58      	ldrb	r0, [r3, #9]
 8008454:	f107 020d 	add.w	r2, r7, #13
 8008458:	2301      	movs	r3, #1
 800845a:	213d      	movs	r1, #61	@ 0x3d
 800845c:	47a0      	blx	r4
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
 8008462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d127      	bne.n	80084ba <bno055_set_operation_mode+0x17e>
 800846a:	7b7b      	ldrb	r3, [r7, #13]
 800846c:	b25b      	sxtb	r3, r3
 800846e:	f023 030f 	bic.w	r3, r3, #15
 8008472:	b25a      	sxtb	r2, r3
 8008474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	b25b      	sxtb	r3, r3
 800847e:	4313      	orrs	r3, r2
 8008480:	b25b      	sxtb	r3, r3
 8008482:	b2db      	uxtb	r3, r3
 8008484:	737b      	strb	r3, [r7, #13]
 8008486:	4b10      	ldr	r3, [pc, #64]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68dc      	ldr	r4, [r3, #12]
 800848c:	4b0e      	ldr	r3, [pc, #56]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	7a58      	ldrb	r0, [r3, #9]
 8008492:	f107 020d 	add.w	r2, r7, #13
 8008496:	2301      	movs	r3, #1
 8008498:	213d      	movs	r1, #61	@ 0x3d
 800849a:	47a0      	blx	r4
 800849c:	4603      	mov	r3, r0
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	4413      	add	r3, r2
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	73fb      	strb	r3, [r7, #15]
 80084a8:	4b07      	ldr	r3, [pc, #28]	@ (80084c8 <bno055_set_operation_mode+0x18c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80084b2:	4798      	blx	r3
 80084b4:	e001      	b.n	80084ba <bno055_set_operation_mode+0x17e>
 80084b6:	23ff      	movs	r3, #255	@ 0xff
 80084b8:	73fb      	strb	r3, [r7, #15]
 80084ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd90      	pop	{r4, r7, pc}
 80084c6:	bf00      	nop
 80084c8:	24001220 	.word	0x24001220

080084cc <bno055_set_power_mode>:
 80084cc:	b590      	push	{r4, r7, lr}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	71fb      	strb	r3, [r7, #7]
 80084d6:	23ff      	movs	r3, #255	@ 0xff
 80084d8:	73fb      	strb	r3, [r7, #15]
 80084da:	2300      	movs	r3, #0
 80084dc:	737b      	strb	r3, [r7, #13]
 80084de:	2300      	movs	r3, #0
 80084e0:	733b      	strb	r3, [r7, #12]
 80084e2:	23ff      	movs	r3, #255	@ 0xff
 80084e4:	73bb      	strb	r3, [r7, #14]
 80084e6:	4b35      	ldr	r3, [pc, #212]	@ (80085bc <bno055_set_power_mode+0xf0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <bno055_set_power_mode+0x28>
 80084ee:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 80084f2:	e05f      	b.n	80085b4 <bno055_set_power_mode+0xe8>
 80084f4:	f107 030c 	add.w	r3, r7, #12
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff fedd 	bl	80082b8 <bno055_get_operation_mode>
 80084fe:	4603      	mov	r3, r0
 8008500:	73bb      	strb	r3, [r7, #14]
 8008502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d143      	bne.n	8008592 <bno055_set_power_mode+0xc6>
 800850a:	7b3b      	ldrb	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d008      	beq.n	8008522 <bno055_set_power_mode+0x56>
 8008510:	2000      	movs	r0, #0
 8008512:	f7ff ff13 	bl	800833c <bno055_set_operation_mode>
 8008516:	4603      	mov	r3, r0
 8008518:	b2da      	uxtb	r2, r3
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	4413      	add	r3, r2
 800851e:	b2db      	uxtb	r3, r3
 8008520:	73bb      	strb	r3, [r7, #14]
 8008522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d130      	bne.n	800858c <bno055_set_power_mode+0xc0>
 800852a:	4b24      	ldr	r3, [pc, #144]	@ (80085bc <bno055_set_power_mode+0xf0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	691c      	ldr	r4, [r3, #16]
 8008530:	4b22      	ldr	r3, [pc, #136]	@ (80085bc <bno055_set_power_mode+0xf0>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	7a58      	ldrb	r0, [r3, #9]
 8008536:	f107 020d 	add.w	r2, r7, #13
 800853a:	2301      	movs	r3, #1
 800853c:	213e      	movs	r1, #62	@ 0x3e
 800853e:	47a0      	blx	r4
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]
 8008544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d124      	bne.n	8008596 <bno055_set_power_mode+0xca>
 800854c:	7b7b      	ldrb	r3, [r7, #13]
 800854e:	b25b      	sxtb	r3, r3
 8008550:	f023 0303 	bic.w	r3, r3, #3
 8008554:	b25a      	sxtb	r2, r3
 8008556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	b25b      	sxtb	r3, r3
 8008560:	4313      	orrs	r3, r2
 8008562:	b25b      	sxtb	r3, r3
 8008564:	b2db      	uxtb	r3, r3
 8008566:	737b      	strb	r3, [r7, #13]
 8008568:	4b14      	ldr	r3, [pc, #80]	@ (80085bc <bno055_set_power_mode+0xf0>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68dc      	ldr	r4, [r3, #12]
 800856e:	4b13      	ldr	r3, [pc, #76]	@ (80085bc <bno055_set_power_mode+0xf0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	7a58      	ldrb	r0, [r3, #9]
 8008574:	f107 020d 	add.w	r2, r7, #13
 8008578:	2301      	movs	r3, #1
 800857a:	213e      	movs	r1, #62	@ 0x3e
 800857c:	47a0      	blx	r4
 800857e:	4603      	mov	r3, r0
 8008580:	b2da      	uxtb	r2, r3
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	4413      	add	r3, r2
 8008586:	b2db      	uxtb	r3, r3
 8008588:	73fb      	strb	r3, [r7, #15]
 800858a:	e004      	b.n	8008596 <bno055_set_power_mode+0xca>
 800858c:	23ff      	movs	r3, #255	@ 0xff
 800858e:	73fb      	strb	r3, [r7, #15]
 8008590:	e001      	b.n	8008596 <bno055_set_power_mode+0xca>
 8008592:	23ff      	movs	r3, #255	@ 0xff
 8008594:	73fb      	strb	r3, [r7, #15]
 8008596:	7b3b      	ldrb	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d009      	beq.n	80085b0 <bno055_set_power_mode+0xe4>
 800859c:	7b3b      	ldrb	r3, [r7, #12]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff fecc 	bl	800833c <bno055_set_operation_mode>
 80085a4:	4603      	mov	r3, r0
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4413      	add	r3, r2
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	73fb      	strb	r3, [r7, #15]
 80085b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd90      	pop	{r4, r7, pc}
 80085bc:	24001220 	.word	0x24001220

080085c0 <bno055_platform_read>:
  * @param  len     number of consecutive register to read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
signed char bno055_platform_read(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char ReadNumbr)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	603a      	str	r2, [r7, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
 80085ce:	460b      	mov	r3, r1
 80085d0:	71bb      	strb	r3, [r7, #6]
 80085d2:	4613      	mov	r3, r2
 80085d4:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	81fb      	strh	r3, [r7, #14]

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 80085de:	1dba      	adds	r2, r7, #6
 80085e0:	89f9      	ldrh	r1, [r7, #14]
 80085e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	2301      	movs	r3, #1
 80085ea:	4809      	ldr	r0, [pc, #36]	@ (8008610 <bno055_platform_read+0x50>)
 80085ec:	f002 fe3c 	bl	800b268 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BNO_I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 80085f0:	797b      	ldrb	r3, [r7, #5]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	89f9      	ldrh	r1, [r7, #14]
 80085f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80085fa:	9200      	str	r2, [sp, #0]
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	4804      	ldr	r0, [pc, #16]	@ (8008610 <bno055_platform_read+0x50>)
 8008600:	f002 ff4a 	bl	800b498 <HAL_I2C_Master_Receive>
    return 0;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	240014d8 	.word	0x240014d8

08008614 <bno055_platform_write>:
  *
  */


signed char bno055_platform_write(unsigned char slave_address7, unsigned char subaddress, unsigned char *pBuffer, unsigned char WriteNumbr)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af02      	add	r7, sp, #8
 800861a:	603a      	str	r2, [r7, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	4603      	mov	r3, r0
 8008620:	71fb      	strb	r3, [r7, #7]
 8008622:	460b      	mov	r3, r1
 8008624:	71bb      	strb	r3, [r7, #6]
 8008626:	4613      	mov	r3, r2
 8008628:	717b      	strb	r3, [r7, #5]
    uint16_t DevAddress = slave_address7 << 1;
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	b29b      	uxth	r3, r3
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	81fb      	strh	r3, [r7, #14]

    BNO_GTXBuffer[0] = subaddress;
 8008632:	4a0d      	ldr	r2, [pc, #52]	@ (8008668 <bno055_platform_write+0x54>)
 8008634:	79bb      	ldrb	r3, [r7, #6]
 8008636:	7013      	strb	r3, [r2, #0]
    memcpy(&BNO_GTXBuffer[1], pBuffer, WriteNumbr);
 8008638:	797b      	ldrb	r3, [r7, #5]
 800863a:	461a      	mov	r2, r3
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	480b      	ldr	r0, [pc, #44]	@ (800866c <bno055_platform_write+0x58>)
 8008640:	f00d fec3 	bl	80163ca <memcpy>

    // send register address
    HAL_I2C_Master_Transmit(&BNO_I2C_HANDLE, DevAddress, BNO_GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8008644:	797b      	ldrb	r3, [r7, #5]
 8008646:	b29b      	uxth	r3, r3
 8008648:	3301      	adds	r3, #1
 800864a:	b29b      	uxth	r3, r3
 800864c:	89f9      	ldrh	r1, [r7, #14]
 800864e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008652:	9200      	str	r2, [sp, #0]
 8008654:	4a04      	ldr	r2, [pc, #16]	@ (8008668 <bno055_platform_write+0x54>)
 8008656:	4806      	ldr	r0, [pc, #24]	@ (8008670 <bno055_platform_write+0x5c>)
 8008658:	f002 fe06 	bl	800b268 <HAL_I2C_Master_Transmit>
    return 0;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	2400123c 	.word	0x2400123c
 800866c:	2400123d 	.word	0x2400123d
 8008670:	240014d8 	.word	0x240014d8

08008674 <DelayUs>:
  *
  */


void DelayUs(unsigned int Delay)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
//		{
//			;
//		}
//	}

	HAL_Delay(Delay);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f002 f9fd 	bl	800aa7c <HAL_Delay>
}
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <BNO055_Init>:
  *
  * @param  		bno055_config     TODO -> Create this structure and add the parameter to this function.
  * @retval         Initialization Status (MANDATORY: return 1 or True -> no Error)
  *
  */
int8_t BNO055_Init(){
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
	bno055_dev.bus_write = bno055_platform_write;
 8008692:	4b23      	ldr	r3, [pc, #140]	@ (8008720 <BNO055_Init+0x94>)
 8008694:	4a23      	ldr	r2, [pc, #140]	@ (8008724 <BNO055_Init+0x98>)
 8008696:	60da      	str	r2, [r3, #12]
	bno055_dev.bus_read = bno055_platform_read;
 8008698:	4b21      	ldr	r3, [pc, #132]	@ (8008720 <BNO055_Init+0x94>)
 800869a:	4a23      	ldr	r2, [pc, #140]	@ (8008728 <BNO055_Init+0x9c>)
 800869c:	611a      	str	r2, [r3, #16]
	bno055_dev.delay_msec = &DelayUs;
 800869e:	4b20      	ldr	r3, [pc, #128]	@ (8008720 <BNO055_Init+0x94>)
 80086a0:	4a22      	ldr	r2, [pc, #136]	@ (800872c <BNO055_Init+0xa0>)
 80086a2:	615a      	str	r2, [r3, #20]
	bno055_dev.dev_addr = BNO055_I2C_ADDR1;
 80086a4:	4b1e      	ldr	r3, [pc, #120]	@ (8008720 <BNO055_Init+0x94>)
 80086a6:	2228      	movs	r2, #40	@ 0x28
 80086a8:	725a      	strb	r2, [r3, #9]

	uint8_t value;
	bno055_platform_read(BNO055_I2C_ADDR1, 0x00, &value, 1);
 80086aa:	1dfa      	adds	r2, r7, #7
 80086ac:	2301      	movs	r3, #1
 80086ae:	2100      	movs	r1, #0
 80086b0:	2028      	movs	r0, #40	@ 0x28
 80086b2:	f7ff ff85 	bl	80085c0 <bno055_platform_read>

	comres = bno055_init(&bno055_dev);
 80086b6:	481a      	ldr	r0, [pc, #104]	@ (8008720 <BNO055_Init+0x94>)
 80086b8:	f7ff f830 	bl	800771c <bno055_init>
 80086bc:	4603      	mov	r3, r0
 80086be:	461a      	mov	r2, r3
 80086c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008730 <BNO055_Init+0xa4>)
 80086c2:	601a      	str	r2, [r3, #0]
//	{
//		printf("bno055_init failed, comres=%d\r\n", comres);
//	}

	/* set the power mode as NORMAL*/
	power_mode = BNO055_POWER_MODE_NORMAL;
 80086c4:	4b1b      	ldr	r3, [pc, #108]	@ (8008734 <BNO055_Init+0xa8>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
	comres += bno055_set_power_mode(power_mode);
 80086ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008734 <BNO055_Init+0xa8>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff fefc 	bl	80084cc <bno055_set_power_mode>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <BNO055_Init+0xa4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4413      	add	r3, r2
 80086de:	4a14      	ldr	r2, [pc, #80]	@ (8008730 <BNO055_Init+0xa4>)
 80086e0:	6013      	str	r3, [r2, #0]
		* 0x0A - BNO055_OPERATION_MODE_M4G
		* 0x0B - BNO055_OPERATION_MODE_NDOF_FMC_OFF
		* 0x0C - BNO055_OPERATION_MODE_NDOF
		* based on the user need configure the operation mode*/
	    // Set the operation mode to NDOF
	    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 80086e2:	200c      	movs	r0, #12
 80086e4:	f7ff fe2a 	bl	800833c <bno055_set_operation_mode>
 80086e8:	4603      	mov	r3, r0
 80086ea:	461a      	mov	r2, r3
 80086ec:	4b10      	ldr	r3, [pc, #64]	@ (8008730 <BNO055_Init+0xa4>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4413      	add	r3, r2
 80086f2:	4a0f      	ldr	r2, [pc, #60]	@ (8008730 <BNO055_Init+0xa4>)
 80086f4:	6013      	str	r3, [r2, #0]
	    comres += bno055_get_operation_mode(&op_mode_current);
 80086f6:	4810      	ldr	r0, [pc, #64]	@ (8008738 <BNO055_Init+0xac>)
 80086f8:	f7ff fdde 	bl	80082b8 <bno055_get_operation_mode>
 80086fc:	4603      	mov	r3, r0
 80086fe:	461a      	mov	r2, r3
 8008700:	4b0b      	ldr	r3, [pc, #44]	@ (8008730 <BNO055_Init+0xa4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4413      	add	r3, r2
 8008706:	4a0a      	ldr	r2, [pc, #40]	@ (8008730 <BNO055_Init+0xa4>)
 8008708:	6013      	str	r3, [r2, #0]
//		}
//		else
//		{
//			printf("bno055_init failed, comres=%d\r\n", comres);
//		}
		HAL_Delay(1000); // 1 second
 800870a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800870e:	f002 f9b5 	bl	800aa7c <HAL_Delay>
//			printf("BNO Units configuration failed\r\n", comres);
//		}



	return (int8_t)comres;
 8008712:	4b07      	ldr	r3, [pc, #28]	@ (8008730 <BNO055_Init+0xa4>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	b25b      	sxtb	r3, r3
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	24001224 	.word	0x24001224
 8008724:	08008615 	.word	0x08008615
 8008728:	080085c1 	.word	0x080085c1
 800872c:	08008675 	.word	0x08008675
 8008730:	24000154 	.word	0x24000154
 8008734:	2400143d 	.word	0x2400143d
 8008738:	2400143c 	.word	0x2400143c

0800873c <bno_read_fusion_data>:

AHRS_9_Axis_Data bno_read_fusion_data(){
 800873c:	b580      	push	{r7, lr}
 800873e:	b09c      	sub	sp, #112	@ 0x70
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]

    int8_t comres = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    // Initialize the return structure
    AHRS_9_Axis_Data data = {0};
 800874a:	f107 0308 	add.w	r3, r7, #8
 800874e:	2260      	movs	r2, #96	@ 0x60
 8008750:	2100      	movs	r1, #0
 8008752:	4618      	mov	r0, r3
 8008754:	f00d fdba 	bl	80162cc <memset>

    // Read Euler angles (Orientation)
    comres += bno055_read_euler_h(&euler_data_h);
 8008758:	4893      	ldr	r0, [pc, #588]	@ (80089a8 <bno_read_fusion_data+0x26c>)
 800875a:	f7ff f9eb 	bl	8007b34 <bno055_read_euler_h>
 800875e:	4603      	mov	r3, r0
 8008760:	b2da      	uxtb	r2, r3
 8008762:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008766:	4413      	add	r3, r2
 8008768:	b2db      	uxtb	r3, r3
 800876a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_euler_r(&euler_data_r);
 800876e:	488f      	ldr	r0, [pc, #572]	@ (80089ac <bno_read_fusion_data+0x270>)
 8008770:	f7ff fa2a 	bl	8007bc8 <bno055_read_euler_r>
 8008774:	4603      	mov	r3, r0
 8008776:	b2da      	uxtb	r2, r3
 8008778:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800877c:	4413      	add	r3, r2
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_euler_p(&euler_data_p);
 8008784:	488a      	ldr	r0, [pc, #552]	@ (80089b0 <bno_read_fusion_data+0x274>)
 8008786:	f7ff fa69 	bl	8007c5c <bno055_read_euler_p>
 800878a:	4603      	mov	r3, r0
 800878c:	b2da      	uxtb	r2, r3
 800878e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008792:	4413      	add	r3, r2
 8008794:	b2db      	uxtb	r3, r3
 8008796:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    data.orientation[0] = euler_data_p;
 800879a:	4b85      	ldr	r3, [pc, #532]	@ (80089b0 <bno_read_fusion_data+0x274>)
 800879c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087a0:	ee07 3a90 	vmov	s15, r3
 80087a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087a8:	ed87 7b02 	vstr	d7, [r7, #8]
    data.orientation[1] = euler_data_r;
 80087ac:	4b7f      	ldr	r3, [pc, #508]	@ (80089ac <bno_read_fusion_data+0x270>)
 80087ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087ba:	ed87 7b04 	vstr	d7, [r7, #16]
    data.orientation[2] = euler_data_h;
 80087be:	4b7a      	ldr	r3, [pc, #488]	@ (80089a8 <bno_read_fusion_data+0x26c>)
 80087c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087cc:	ed87 7b06 	vstr	d7, [r7, #24]

    // Read Quaternion data (Optional, not used in this example)
    comres += bno055_read_quaternion_w(&quaternion_data_w);
 80087d0:	4878      	ldr	r0, [pc, #480]	@ (80089b4 <bno_read_fusion_data+0x278>)
 80087d2:	f7ff fa8d 	bl	8007cf0 <bno055_read_quaternion_w>
 80087d6:	4603      	mov	r3, r0
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80087de:	4413      	add	r3, r2
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_quaternion_x(&quaternion_data_x);
 80087e6:	4874      	ldr	r0, [pc, #464]	@ (80089b8 <bno_read_fusion_data+0x27c>)
 80087e8:	f7ff facc 	bl	8007d84 <bno055_read_quaternion_x>
 80087ec:	4603      	mov	r3, r0
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80087f4:	4413      	add	r3, r2
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_quaternion_y(&quaternion_data_y);
 80087fc:	486f      	ldr	r0, [pc, #444]	@ (80089bc <bno_read_fusion_data+0x280>)
 80087fe:	f7ff fb0b 	bl	8007e18 <bno055_read_quaternion_y>
 8008802:	4603      	mov	r3, r0
 8008804:	b2da      	uxtb	r2, r3
 8008806:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800880a:	4413      	add	r3, r2
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_quaternion_z(&quaternion_data_z);
 8008812:	486b      	ldr	r0, [pc, #428]	@ (80089c0 <bno_read_fusion_data+0x284>)
 8008814:	f7ff fb4a 	bl	8007eac <bno055_read_quaternion_z>
 8008818:	4603      	mov	r3, r0
 800881a:	b2da      	uxtb	r2, r3
 800881c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008820:	4413      	add	r3, r2
 8008822:	b2db      	uxtb	r3, r3
 8008824:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    // Read Linear acceleration
    comres += bno055_read_linear_accel_x(&linear_accel_data_x);
 8008828:	4866      	ldr	r0, [pc, #408]	@ (80089c4 <bno_read_fusion_data+0x288>)
 800882a:	f7ff fb89 	bl	8007f40 <bno055_read_linear_accel_x>
 800882e:	4603      	mov	r3, r0
 8008830:	b2da      	uxtb	r2, r3
 8008832:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008836:	4413      	add	r3, r2
 8008838:	b2db      	uxtb	r3, r3
 800883a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_linear_accel_y(&linear_accel_data_y);
 800883e:	4862      	ldr	r0, [pc, #392]	@ (80089c8 <bno_read_fusion_data+0x28c>)
 8008840:	f7ff fbc8 	bl	8007fd4 <bno055_read_linear_accel_y>
 8008844:	4603      	mov	r3, r0
 8008846:	b2da      	uxtb	r2, r3
 8008848:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800884c:	4413      	add	r3, r2
 800884e:	b2db      	uxtb	r3, r3
 8008850:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_linear_accel_z(&linear_accel_data_z);
 8008854:	485d      	ldr	r0, [pc, #372]	@ (80089cc <bno_read_fusion_data+0x290>)
 8008856:	f7ff fc07 	bl	8008068 <bno055_read_linear_accel_z>
 800885a:	4603      	mov	r3, r0
 800885c:	b2da      	uxtb	r2, r3
 800885e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008862:	4413      	add	r3, r2
 8008864:	b2db      	uxtb	r3, r3
 8008866:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    data.acceleration[0] = linear_accel_data_x;
 800886a:	4b56      	ldr	r3, [pc, #344]	@ (80089c4 <bno_read_fusion_data+0x288>)
 800886c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008878:	ed87 7b08 	vstr	d7, [r7, #32]
    data.acceleration[1] = linear_accel_data_y;
 800887c:	4b52      	ldr	r3, [pc, #328]	@ (80089c8 <bno_read_fusion_data+0x28c>)
 800887e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800888a:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    data.acceleration[2] = linear_accel_data_z;
 800888e:	4b4f      	ldr	r3, [pc, #316]	@ (80089cc <bno_read_fusion_data+0x290>)
 8008890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800889c:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

    // Read Gravity data
    comres += bno055_read_gravity_x(&gravity_data_x);
 80088a0:	484b      	ldr	r0, [pc, #300]	@ (80089d0 <bno_read_fusion_data+0x294>)
 80088a2:	f7ff fc2b 	bl	80080fc <bno055_read_gravity_x>
 80088a6:	4603      	mov	r3, r0
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80088ae:	4413      	add	r3, r2
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_gravity_y(&gravity_data_y);
 80088b6:	4847      	ldr	r0, [pc, #284]	@ (80089d4 <bno_read_fusion_data+0x298>)
 80088b8:	f7ff fc6a 	bl	8008190 <bno055_read_gravity_y>
 80088bc:	4603      	mov	r3, r0
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80088c4:	4413      	add	r3, r2
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_gravity_z(&gravity_data_z);
 80088cc:	4842      	ldr	r0, [pc, #264]	@ (80089d8 <bno_read_fusion_data+0x29c>)
 80088ce:	f7ff fca9 	bl	8008224 <bno055_read_gravity_z>
 80088d2:	4603      	mov	r3, r0
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80088da:	4413      	add	r3, r2
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    // Gravity data can be used as gyroscope data
    data.gyroscope[0] = gravity_data_x;
 80088e2:	4b3b      	ldr	r3, [pc, #236]	@ (80089d0 <bno_read_fusion_data+0x294>)
 80088e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80088f0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    data.gyroscope[1] = gravity_data_y;
 80088f4:	4b37      	ldr	r3, [pc, #220]	@ (80089d4 <bno_read_fusion_data+0x298>)
 80088f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008902:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    data.gyroscope[2] = gravity_data_z;
 8008906:	4b34      	ldr	r3, [pc, #208]	@ (80089d8 <bno_read_fusion_data+0x29c>)
 8008908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008914:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48

    // Read Magnetometer data
    comres += bno055_read_mag_x(&mag_datax);
 8008918:	4830      	ldr	r0, [pc, #192]	@ (80089dc <bno_read_fusion_data+0x2a0>)
 800891a:	f7ff f82d 	bl	8007978 <bno055_read_mag_x>
 800891e:	4603      	mov	r3, r0
 8008920:	b2da      	uxtb	r2, r3
 8008922:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008926:	4413      	add	r3, r2
 8008928:	b2db      	uxtb	r3, r3
 800892a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_mag_y(&mag_datay);
 800892e:	482c      	ldr	r0, [pc, #176]	@ (80089e0 <bno_read_fusion_data+0x2a4>)
 8008930:	f7ff f86c 	bl	8007a0c <bno055_read_mag_y>
 8008934:	4603      	mov	r3, r0
 8008936:	b2da      	uxtb	r2, r3
 8008938:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800893c:	4413      	add	r3, r2
 800893e:	b2db      	uxtb	r3, r3
 8008940:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    comres += bno055_read_mag_z(&mag_dataz);
 8008944:	4827      	ldr	r0, [pc, #156]	@ (80089e4 <bno_read_fusion_data+0x2a8>)
 8008946:	f7ff f8ab 	bl	8007aa0 <bno055_read_mag_z>
 800894a:	4603      	mov	r3, r0
 800894c:	b2da      	uxtb	r2, r3
 800894e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008952:	4413      	add	r3, r2
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    data.magnetometer[0] = mag_datax;
 800895a:	4b20      	ldr	r3, [pc, #128]	@ (80089dc <bno_read_fusion_data+0x2a0>)
 800895c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008968:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    data.magnetometer[1] = mag_datay;
 800896c:	4b1c      	ldr	r3, [pc, #112]	@ (80089e0 <bno_read_fusion_data+0x2a4>)
 800896e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008972:	ee07 3a90 	vmov	s15, r3
 8008976:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800897a:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    data.magnetometer[2] = mag_dataz;
 800897e:	4b19      	ldr	r3, [pc, #100]	@ (80089e4 <bno_read_fusion_data+0x2a8>)
 8008980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008984:	ee07 3a90 	vmov	s15, r3
 8008988:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800898c:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    // Check communication results (Optional, for debugging)
    if (comres != 0) {
        //printf("Communication error: %d\n", comres);
    }

    return data;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4618      	mov	r0, r3
 8008994:	f107 0308 	add.w	r3, r7, #8
 8008998:	2260      	movs	r2, #96	@ 0x60
 800899a:	4619      	mov	r1, r3
 800899c:	f00d fd15 	bl	80163ca <memcpy>
}
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	3770      	adds	r7, #112	@ 0x70
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	24001444 	.word	0x24001444
 80089ac:	24001446 	.word	0x24001446
 80089b0:	24001448 	.word	0x24001448
 80089b4:	2400144a 	.word	0x2400144a
 80089b8:	2400144c 	.word	0x2400144c
 80089bc:	2400144e 	.word	0x2400144e
 80089c0:	24001450 	.word	0x24001450
 80089c4:	24001452 	.word	0x24001452
 80089c8:	24001454 	.word	0x24001454
 80089cc:	24001456 	.word	0x24001456
 80089d0:	24001458 	.word	0x24001458
 80089d4:	2400145a 	.word	0x2400145a
 80089d8:	2400145c 	.word	0x2400145c
 80089dc:	2400143e 	.word	0x2400143e
 80089e0:	24001440 	.word	0x24001440
 80089e4:	24001442 	.word	0x24001442

080089e8 <bno055_print_fusion_data>:

void bno055_print_fusion_data(AHRS_9_Axis_Data *data) {
 80089e8:	b5b0      	push	{r4, r5, r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af04      	add	r7, sp, #16
 80089ee:	6078      	str	r0, [r7, #4]
printf("BNO055 AHRS: \n");
 80089f0:	482e      	ldr	r0, [pc, #184]	@ (8008aac <bno055_print_fusion_data+0xc4>)
 80089f2:	f00d fb6b 	bl	80160cc <puts>
// Print orientation (Pitch, Roll, Yaw)
printf("Orientation -> ");
 80089f6:	482e      	ldr	r0, [pc, #184]	@ (8008ab0 <bno055_print_fusion_data+0xc8>)
 80089f8:	f00d fb00 	bl	8015ffc <iprintf>
printf("Pitch: %.2f m/s^2, Roll: %.2f m/s^2, Yaw: %.2f m/s^2\n", data->orientation[0], data->orientation[1], data->orientation[2]);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8008a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a12:	e9cd 2300 	strd	r2, r3, [sp]
 8008a16:	4622      	mov	r2, r4
 8008a18:	462b      	mov	r3, r5
 8008a1a:	4826      	ldr	r0, [pc, #152]	@ (8008ab4 <bno055_print_fusion_data+0xcc>)
 8008a1c:	f00d faee 	bl	8015ffc <iprintf>

// Print acceleration (X, Y, Z)
printf("Acceleration -> ");
 8008a20:	4825      	ldr	r0, [pc, #148]	@ (8008ab8 <bno055_print_fusion_data+0xd0>)
 8008a22:	f00d faeb 	bl	8015ffc <iprintf>
printf("X: %.2f m/s^2, Y: %.2f m/s^2, Z: %.2f m/s^2\n", data->acceleration[0], data->acceleration[1], data->acceleration[2]);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	@ 0x28
 8008a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a3c:	e9cd 2300 	strd	r2, r3, [sp]
 8008a40:	4622      	mov	r2, r4
 8008a42:	462b      	mov	r3, r5
 8008a44:	481d      	ldr	r0, [pc, #116]	@ (8008abc <bno055_print_fusion_data+0xd4>)
 8008a46:	f00d fad9 	bl	8015ffc <iprintf>

// Print gyroscope data (X, Y, Z)
printf("Angular Rate -> ");
 8008a4a:	481d      	ldr	r0, [pc, #116]	@ (8008ac0 <bno055_print_fusion_data+0xd8>)
 8008a4c:	f00d fad6 	bl	8015ffc <iprintf>
printf("X: %.2f m/s^2, Y: %.2f m/s^2, Z: %.2f m/s^2\n", data->gyroscope[0], data->gyroscope[1], data->gyroscope[2]);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	@ 0x40
 8008a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a66:	e9cd 2300 	strd	r2, r3, [sp]
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	4813      	ldr	r0, [pc, #76]	@ (8008abc <bno055_print_fusion_data+0xd4>)
 8008a70:	f00d fac4 	bl	8015ffc <iprintf>

// Print magnetometer data (X, Y, Z)
printf("Magnetometer -> ");
 8008a74:	4813      	ldr	r0, [pc, #76]	@ (8008ac4 <bno055_print_fusion_data+0xdc>)
 8008a76:	f00d fac1 	bl	8015ffc <iprintf>
printf("X: %.2f m/s^2, Y: %.2f m/s^2, Z: %.2f m/s^2\n", data->magnetometer[0], data->magnetometer[1], data->magnetometer[2]);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	e9d1 0116 	ldrd	r0, r1, [r1, #88]	@ 0x58
 8008a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a90:	e9cd 2300 	strd	r2, r3, [sp]
 8008a94:	4622      	mov	r2, r4
 8008a96:	462b      	mov	r3, r5
 8008a98:	4808      	ldr	r0, [pc, #32]	@ (8008abc <bno055_print_fusion_data+0xd4>)
 8008a9a:	f00d faaf 	bl	8015ffc <iprintf>

printf("----- \n");
 8008a9e:	480a      	ldr	r0, [pc, #40]	@ (8008ac8 <bno055_print_fusion_data+0xe0>)
 8008aa0:	f00d fb14 	bl	80160cc <puts>
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8008aac:	080199c8 	.word	0x080199c8
 8008ab0:	080199d8 	.word	0x080199d8
 8008ab4:	080199e8 	.word	0x080199e8
 8008ab8:	08019a20 	.word	0x08019a20
 8008abc:	08019a34 	.word	0x08019a34
 8008ac0:	08019a64 	.word	0x08019a64
 8008ac4:	08019a78 	.word	0x08019a78
 8008ac8:	08019a8c 	.word	0x08019a8c

08008acc <MS5607_Init>:

/** Reset and prepare for general usage.
 * This will reset the device and perform the PROM reading to find the conversion values and if
 * the communication is working.
 */
int8_t MS5607_Init() {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0

  enableCSB();
 8008ad0:	f000 fbf4 	bl	80092bc <enableCSB>
  SPITransmitData = RESET_COMMAND;
 8008ad4:	4b12      	ldr	r3, [pc, #72]	@ (8008b20 <MS5607_Init+0x54>)
 8008ad6:	221e      	movs	r2, #30
 8008ad8:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8008ada:	230a      	movs	r3, #10
 8008adc:	2201      	movs	r2, #1
 8008ade:	4910      	ldr	r1, [pc, #64]	@ (8008b20 <MS5607_Init+0x54>)
 8008ae0:	4810      	ldr	r0, [pc, #64]	@ (8008b24 <MS5607_Init+0x58>)
 8008ae2:	f008 f969 	bl	8010db8 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8008ae6:	bf00      	nop
 8008ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b24 <MS5607_Init+0x58>)
 8008aea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d0f9      	beq.n	8008ae8 <MS5607_Init+0x1c>
  HAL_Delay(3);
 8008af4:	2003      	movs	r0, #3
 8008af6:	f001 ffc1 	bl	800aa7c <HAL_Delay>
  disableCSB();
 8008afa:	f000 fbeb 	bl	80092d4 <disableCSB>

  MS5607PromRead(&promData);
 8008afe:	480a      	ldr	r0, [pc, #40]	@ (8008b28 <MS5607_Init+0x5c>)
 8008b00:	f000 f814 	bl	8008b2c <MS5607PromRead>

  if (promData.reserved == 0x00 || promData.reserved == 0xff) {
 8008b04:	4b08      	ldr	r3, [pc, #32]	@ (8008b28 <MS5607_Init+0x5c>)
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <MS5607_Init+0x48>
 8008b0c:	4b06      	ldr	r3, [pc, #24]	@ (8008b28 <MS5607_Init+0x5c>)
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	2bff      	cmp	r3, #255	@ 0xff
 8008b12:	d101      	bne.n	8008b18 <MS5607_Init+0x4c>
	 //printf("MS5607 Init fail! \n");
    return MS5607_STATE_FAILED;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <MS5607_Init+0x4e>
  } else {
	  //printf("MS5607 Init success! \n");
    return MS5607_STATE_READY;
 8008b18:	2300      	movs	r3, #0
  }
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	2400145e 	.word	0x2400145e
 8008b24:	2400170c 	.word	0x2400170c
 8008b28:	24001464 	.word	0x24001464

08008b2c <MS5607PromRead>:

/* Performs a reading on the devices PROM. */
void MS5607PromRead(struct promData *prom){
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint8_t   address;
  uint16_t  *structPointer;

  /* As the PROM is made of 8 16bit addresses I used a pointer for acessing the data structure */
  structPointer = (uint16_t *) prom;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	613b      	str	r3, [r7, #16]

  for (address = 0; address < 8; address++) {
 8008b38:	2300      	movs	r3, #0
 8008b3a:	75fb      	strb	r3, [r7, #23]
 8008b3c:	e01e      	b.n	8008b7c <MS5607PromRead+0x50>
    SPITransmitData = PROM_READ(address);
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	b25b      	sxtb	r3, r3
 8008b44:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8008b48:	b25b      	sxtb	r3, r3
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bc4 <MS5607PromRead+0x98>)
 8008b4e:	701a      	strb	r2, [r3, #0]
    enableCSB();
 8008b50:	f000 fbb4 	bl	80092bc <enableCSB>
    HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8008b54:	230a      	movs	r3, #10
 8008b56:	2201      	movs	r2, #1
 8008b58:	491a      	ldr	r1, [pc, #104]	@ (8008bc4 <MS5607PromRead+0x98>)
 8008b5a:	481b      	ldr	r0, [pc, #108]	@ (8008bc8 <MS5607PromRead+0x9c>)
 8008b5c:	f008 f92c 	bl	8010db8 <HAL_SPI_Transmit>
    /* Receive two bytes at once and stores it directly at the structure */
    HAL_SPI_Receive(&hspi4, structPointer, 2, 10);
 8008b60:	230a      	movs	r3, #10
 8008b62:	2202      	movs	r2, #2
 8008b64:	6939      	ldr	r1, [r7, #16]
 8008b66:	4818      	ldr	r0, [pc, #96]	@ (8008bc8 <MS5607PromRead+0x9c>)
 8008b68:	f008 fb14 	bl	8011194 <HAL_SPI_Receive>
    disableCSB();
 8008b6c:	f000 fbb2 	bl	80092d4 <disableCSB>
    structPointer++;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	3302      	adds	r3, #2
 8008b74:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	2b07      	cmp	r3, #7
 8008b80:	d9dd      	bls.n	8008b3e <MS5607PromRead+0x12>
  }

  /* Byte swap on 16bit integers*/
  structPointer = (uint16_t *) prom;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8008b86:	2300      	movs	r3, #0
 8008b88:	75fb      	strb	r3, [r7, #23]
 8008b8a:	e012      	b.n	8008bb2 <MS5607PromRead+0x86>
    uint8_t   *toSwap = (uint8_t *) structPointer;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	60fb      	str	r3, [r7, #12]
    uint8_t secondByte = toSwap[0];
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	72fb      	strb	r3, [r7, #11]
    toSwap[0] = toSwap[1];
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	785a      	ldrb	r2, [r3, #1]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	701a      	strb	r2, [r3, #0]
    toSwap[1] = secondByte;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	7afa      	ldrb	r2, [r7, #11]
 8008ba4:	701a      	strb	r2, [r3, #0]
    structPointer++;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	3302      	adds	r3, #2
 8008baa:	613b      	str	r3, [r7, #16]
  for (address = 0; address < 8; address++) {
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	75fb      	strb	r3, [r7, #23]
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	2b07      	cmp	r3, #7
 8008bb6:	d9e9      	bls.n	8008b8c <MS5607PromRead+0x60>
  }
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	2400145e 	.word	0x2400145e
 8008bc8:	2400170c 	.word	0x2400170c

08008bcc <MS5607UncompensatedRead>:

/* Performs a reading on the devices PROM. */
void MS5607UncompensatedRead(struct MS5607UncompensatedValues *uncompValues){
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]

  /*Sensor reply data buffer*/
  uint8_t reply[3];

  enableCSB();
 8008bd4:	f000 fb72 	bl	80092bc <enableCSB>
  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D1_COMMAND | Pressure_OSR;
 8008bd8:	4b55      	ldr	r3, [pc, #340]	@ (8008d30 <MS5607UncompensatedRead+0x164>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	4b54      	ldr	r3, [pc, #336]	@ (8008d34 <MS5607UncompensatedRead+0x168>)
 8008be4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8008be6:	230a      	movs	r3, #10
 8008be8:	2201      	movs	r2, #1
 8008bea:	4952      	ldr	r1, [pc, #328]	@ (8008d34 <MS5607UncompensatedRead+0x168>)
 8008bec:	4852      	ldr	r0, [pc, #328]	@ (8008d38 <MS5607UncompensatedRead+0x16c>)
 8008bee:	f008 f8e3 	bl	8010db8 <HAL_SPI_Transmit>
  while(hspi4.State == HAL_SPI_STATE_BUSY);  // wait for xmission complete
 8008bf2:	bf00      	nop
 8008bf4:	4b50      	ldr	r3, [pc, #320]	@ (8008d38 <MS5607UncompensatedRead+0x16c>)
 8008bf6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d0f9      	beq.n	8008bf4 <MS5607UncompensatedRead+0x28>

  if(Pressure_OSR == 0x00)
 8008c00:	4b4b      	ldr	r3, [pc, #300]	@ (8008d30 <MS5607UncompensatedRead+0x164>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d103      	bne.n	8008c10 <MS5607UncompensatedRead+0x44>
    HAL_Delay(1);
 8008c08:	2001      	movs	r0, #1
 8008c0a:	f001 ff37 	bl	800aa7c <HAL_Delay>
 8008c0e:	e01a      	b.n	8008c46 <MS5607UncompensatedRead+0x7a>
  else if(Pressure_OSR == 0x02)
 8008c10:	4b47      	ldr	r3, [pc, #284]	@ (8008d30 <MS5607UncompensatedRead+0x164>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d103      	bne.n	8008c20 <MS5607UncompensatedRead+0x54>
    HAL_Delay(2);
 8008c18:	2002      	movs	r0, #2
 8008c1a:	f001 ff2f 	bl	800aa7c <HAL_Delay>
 8008c1e:	e012      	b.n	8008c46 <MS5607UncompensatedRead+0x7a>
  else if(Pressure_OSR == 0x04)
 8008c20:	4b43      	ldr	r3, [pc, #268]	@ (8008d30 <MS5607UncompensatedRead+0x164>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d103      	bne.n	8008c30 <MS5607UncompensatedRead+0x64>
    HAL_Delay(3);
 8008c28:	2003      	movs	r0, #3
 8008c2a:	f001 ff27 	bl	800aa7c <HAL_Delay>
 8008c2e:	e00a      	b.n	8008c46 <MS5607UncompensatedRead+0x7a>
  else if(Pressure_OSR == 0x06)
 8008c30:	4b3f      	ldr	r3, [pc, #252]	@ (8008d30 <MS5607UncompensatedRead+0x164>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b06      	cmp	r3, #6
 8008c36:	d103      	bne.n	8008c40 <MS5607UncompensatedRead+0x74>
    HAL_Delay(5);
 8008c38:	2005      	movs	r0, #5
 8008c3a:	f001 ff1f 	bl	800aa7c <HAL_Delay>
 8008c3e:	e002      	b.n	8008c46 <MS5607UncompensatedRead+0x7a>
  else
    HAL_Delay(10);
 8008c40:	200a      	movs	r0, #10
 8008c42:	f001 ff1b 	bl	800aa7c <HAL_Delay>

  disableCSB();
 8008c46:	f000 fb45 	bl	80092d4 <disableCSB>

  /* Performs the reading of the 24 bits from the ADC */

  enableCSB();
 8008c4a:	f000 fb37 	bl	80092bc <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8008c4e:	4b39      	ldr	r3, [pc, #228]	@ (8008d34 <MS5607UncompensatedRead+0x168>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8008c54:	230a      	movs	r3, #10
 8008c56:	2201      	movs	r2, #1
 8008c58:	4936      	ldr	r1, [pc, #216]	@ (8008d34 <MS5607UncompensatedRead+0x168>)
 8008c5a:	4837      	ldr	r0, [pc, #220]	@ (8008d38 <MS5607UncompensatedRead+0x16c>)
 8008c5c:	f008 f8ac 	bl	8010db8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi4, reply, 3, 10);
 8008c60:	f107 010c 	add.w	r1, r7, #12
 8008c64:	230a      	movs	r3, #10
 8008c66:	2203      	movs	r2, #3
 8008c68:	4833      	ldr	r0, [pc, #204]	@ (8008d38 <MS5607UncompensatedRead+0x16c>)
 8008c6a:	f008 fa93 	bl	8011194 <HAL_SPI_Receive>

  disableCSB();
 8008c6e:	f000 fb31 	bl	80092d4 <disableCSB>

  /* Tranfer the 24bits read into a 32bit int */
  uncompValues->pressure = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8008c72:	7b3b      	ldrb	r3, [r7, #12]
 8008c74:	041a      	lsls	r2, r3, #16
 8008c76:	7b7b      	ldrb	r3, [r7, #13]
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	7bba      	ldrb	r2, [r7, #14]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	601a      	str	r2, [r3, #0]

  enableCSB();
 8008c84:	f000 fb1a 	bl	80092bc <enableCSB>

  /* Assemble the conversion command based on previously set OSR */
  SPITransmitData = CONVERT_D2_COMMAND | Temperature_OSR;
 8008c88:	4b2c      	ldr	r3, [pc, #176]	@ (8008d3c <MS5607UncompensatedRead+0x170>)
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	4b28      	ldr	r3, [pc, #160]	@ (8008d34 <MS5607UncompensatedRead+0x168>)
 8008c94:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8008c96:	230a      	movs	r3, #10
 8008c98:	2201      	movs	r2, #1
 8008c9a:	4926      	ldr	r1, [pc, #152]	@ (8008d34 <MS5607UncompensatedRead+0x168>)
 8008c9c:	4826      	ldr	r0, [pc, #152]	@ (8008d38 <MS5607UncompensatedRead+0x16c>)
 8008c9e:	f008 f88b 	bl	8010db8 <HAL_SPI_Transmit>

  if(Temperature_OSR == 0x00)
 8008ca2:	4b26      	ldr	r3, [pc, #152]	@ (8008d3c <MS5607UncompensatedRead+0x170>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d103      	bne.n	8008cb2 <MS5607UncompensatedRead+0xe6>
    HAL_Delay(1);
 8008caa:	2001      	movs	r0, #1
 8008cac:	f001 fee6 	bl	800aa7c <HAL_Delay>
 8008cb0:	e01a      	b.n	8008ce8 <MS5607UncompensatedRead+0x11c>
  else if(Temperature_OSR == 0x02)
 8008cb2:	4b22      	ldr	r3, [pc, #136]	@ (8008d3c <MS5607UncompensatedRead+0x170>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d103      	bne.n	8008cc2 <MS5607UncompensatedRead+0xf6>
    HAL_Delay(2);
 8008cba:	2002      	movs	r0, #2
 8008cbc:	f001 fede 	bl	800aa7c <HAL_Delay>
 8008cc0:	e012      	b.n	8008ce8 <MS5607UncompensatedRead+0x11c>
  else if(Temperature_OSR == 0x04)
 8008cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8008d3c <MS5607UncompensatedRead+0x170>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	d103      	bne.n	8008cd2 <MS5607UncompensatedRead+0x106>
    HAL_Delay(3);
 8008cca:	2003      	movs	r0, #3
 8008ccc:	f001 fed6 	bl	800aa7c <HAL_Delay>
 8008cd0:	e00a      	b.n	8008ce8 <MS5607UncompensatedRead+0x11c>
  else if(Temperature_OSR == 0x06)
 8008cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8008d3c <MS5607UncompensatedRead+0x170>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b06      	cmp	r3, #6
 8008cd8:	d103      	bne.n	8008ce2 <MS5607UncompensatedRead+0x116>
    HAL_Delay(5);
 8008cda:	2005      	movs	r0, #5
 8008cdc:	f001 fece 	bl	800aa7c <HAL_Delay>
 8008ce0:	e002      	b.n	8008ce8 <MS5607UncompensatedRead+0x11c>
  else
    HAL_Delay(10);
 8008ce2:	200a      	movs	r0, #10
 8008ce4:	f001 feca 	bl	800aa7c <HAL_Delay>

  disableCSB();
 8008ce8:	f000 faf4 	bl	80092d4 <disableCSB>


  enableCSB();
 8008cec:	f000 fae6 	bl	80092bc <enableCSB>

  SPITransmitData = READ_ADC_COMMAND;
 8008cf0:	4b10      	ldr	r3, [pc, #64]	@ (8008d34 <MS5607UncompensatedRead+0x168>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi4, &SPITransmitData, 1, 10);
 8008cf6:	230a      	movs	r3, #10
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	490e      	ldr	r1, [pc, #56]	@ (8008d34 <MS5607UncompensatedRead+0x168>)
 8008cfc:	480e      	ldr	r0, [pc, #56]	@ (8008d38 <MS5607UncompensatedRead+0x16c>)
 8008cfe:	f008 f85b 	bl	8010db8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi4, reply, 3, 10);
 8008d02:	f107 010c 	add.w	r1, r7, #12
 8008d06:	230a      	movs	r3, #10
 8008d08:	2203      	movs	r2, #3
 8008d0a:	480b      	ldr	r0, [pc, #44]	@ (8008d38 <MS5607UncompensatedRead+0x16c>)
 8008d0c:	f008 fa42 	bl	8011194 <HAL_SPI_Receive>

  disableCSB();
 8008d10:	f000 fae0 	bl	80092d4 <disableCSB>

  /* Assemble the conversion command based on previously set OSR */
  uncompValues->temperature = ((uint32_t) reply[0] << 16) | ((uint32_t) reply[1] << 8) | (uint32_t) reply[2];
 8008d14:	7b3b      	ldrb	r3, [r7, #12]
 8008d16:	041a      	lsls	r2, r3, #16
 8008d18:	7b7b      	ldrb	r3, [r7, #13]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	7bba      	ldrb	r2, [r7, #14]
 8008d20:	431a      	orrs	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	605a      	str	r2, [r3, #4]
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	2400145f 	.word	0x2400145f
 8008d34:	2400145e 	.word	0x2400145e
 8008d38:	2400170c 	.word	0x2400170c
 8008d3c:	24001460 	.word	0x24001460

08008d40 <MS5607Convert>:

/* Performs the data conversion according to the MS5607 datasheet */
void MS5607Convert(struct MS5607UncompensatedValues *sample, struct MS5607Readings *value){
 8008d40:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008d44:	b0d7      	sub	sp, #348	@ 0x15c
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8008d4c:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
  int32_t dT;
  int32_t TEMP;
  int64_t OFF;
  int64_t SENS;

  dT = sample->temperature - ((int32_t) (promData.tref << 8));
 8008d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	4bda      	ldr	r3, [pc, #872]	@ (80090c0 <MS5607Convert+0x380>)
 8008d58:	895b      	ldrh	r3, [r3, #10]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  TEMP = 2000 + (((int64_t) dT * promData.tempsens) >> 23);
 8008d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d66:	17da      	asrs	r2, r3, #31
 8008d68:	469a      	mov	sl, r3
 8008d6a:	4693      	mov	fp, r2
 8008d6c:	4bd4      	ldr	r3, [pc, #848]	@ (80090c0 <MS5607Convert+0x380>)
 8008d6e:	899b      	ldrh	r3, [r3, #12]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2200      	movs	r2, #0
 8008d74:	4698      	mov	r8, r3
 8008d76:	4691      	mov	r9, r2
 8008d78:	fb08 f20b 	mul.w	r2, r8, fp
 8008d7c:	fb0a f309 	mul.w	r3, sl, r9
 8008d80:	4413      	add	r3, r2
 8008d82:	fbaa 4508 	umull	r4, r5, sl, r8
 8008d86:	442b      	add	r3, r5
 8008d88:	461d      	mov	r5, r3
 8008d8a:	f04f 0200 	mov.w	r2, #0
 8008d8e:	f04f 0300 	mov.w	r3, #0
 8008d92:	0de2      	lsrs	r2, r4, #23
 8008d94:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8008d98:	15eb      	asrs	r3, r5, #23
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8008da0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

  OFF = ((int64_t) promData.off << 17) + (((int64_t) promData.tco * dT) >> 6);
 8008da4:	4bc6      	ldr	r3, [pc, #792]	@ (80090c0 <MS5607Convert+0x380>)
 8008da6:	889b      	ldrh	r3, [r3, #4]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008db0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008db4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008db8:	460b      	mov	r3, r1
 8008dba:	0bdb      	lsrs	r3, r3, #15
 8008dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	045b      	lsls	r3, r3, #17
 8008dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dc8:	4bbd      	ldr	r3, [pc, #756]	@ (80090c0 <MS5607Convert+0x380>)
 8008dca:	891b      	ldrh	r3, [r3, #8]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008dd4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8008dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ddc:	17da      	asrs	r2, r3, #31
 8008dde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008de2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008de6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8008dea:	462b      	mov	r3, r5
 8008dec:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8008df0:	4642      	mov	r2, r8
 8008df2:	fb02 f203 	mul.w	r2, r2, r3
 8008df6:	464b      	mov	r3, r9
 8008df8:	4621      	mov	r1, r4
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	4622      	mov	r2, r4
 8008e02:	4641      	mov	r1, r8
 8008e04:	fba2 1201 	umull	r1, r2, r2, r1
 8008e08:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8008e0c:	460a      	mov	r2, r1
 8008e0e:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8008e12:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8008e16:	4413      	add	r3, r2
 8008e18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008e1c:	f04f 0200 	mov.w	r2, #0
 8008e20:	f04f 0300 	mov.w	r3, #0
 8008e24:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8008e28:	4621      	mov	r1, r4
 8008e2a:	098a      	lsrs	r2, r1, #6
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8008e32:	4629      	mov	r1, r5
 8008e34:	118b      	asrs	r3, r1, #6
 8008e36:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	1889      	adds	r1, r1, r2
 8008e3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e40:	4629      	mov	r1, r5
 8008e42:	eb43 0101 	adc.w	r1, r3, r1
 8008e46:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8008e48:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8008e4c:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
  SENS = ((int64_t) promData.sens << 16) + (((int64_t) promData.tcs * dT) >> 7);
 8008e50:	4b9b      	ldr	r3, [pc, #620]	@ (80090c0 <MS5607Convert+0x380>)
 8008e52:	885b      	ldrh	r3, [r3, #2]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e60:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008e64:	460b      	mov	r3, r1
 8008e66:	0c1b      	lsrs	r3, r3, #16
 8008e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	041b      	lsls	r3, r3, #16
 8008e70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e74:	4b92      	ldr	r3, [pc, #584]	@ (80090c0 <MS5607Convert+0x380>)
 8008e76:	88db      	ldrh	r3, [r3, #6]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e88:	17da      	asrs	r2, r3, #31
 8008e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008e92:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8008e96:	462b      	mov	r3, r5
 8008e98:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	fb02 f203 	mul.w	r2, r2, r3
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	fb01 f303 	mul.w	r3, r1, r3
 8008eaa:	4413      	add	r3, r2
 8008eac:	4622      	mov	r2, r4
 8008eae:	4641      	mov	r1, r8
 8008eb0:	fba2 1201 	umull	r1, r2, r2, r1
 8008eb4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8008eb8:	460a      	mov	r2, r1
 8008eba:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8008ebe:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008ec8:	f04f 0200 	mov.w	r2, #0
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	09ca      	lsrs	r2, r1, #7
 8008ed8:	4629      	mov	r1, r5
 8008eda:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8008ede:	4629      	mov	r1, r5
 8008ee0:	11cb      	asrs	r3, r1, #7
 8008ee2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	1889      	adds	r1, r1, r2
 8008eea:	6339      	str	r1, [r7, #48]	@ 0x30
 8008eec:	4629      	mov	r1, r5
 8008eee:	eb43 0101 	adc.w	r1, r3, r1
 8008ef2:	6379      	str	r1, [r7, #52]	@ 0x34
 8008ef4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8008ef8:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140

  /**/
  if (TEMP < 2000) {
 8008efc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008f00:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008f04:	f280 8152 	bge.w	80091ac <MS5607Convert+0x46c>
    int32_t T2 = ((int64_t) dT * (int64_t) dT) >> 31;
 8008f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f0c:	17da      	asrs	r2, r3, #31
 8008f0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f12:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f1a:	17da      	asrs	r2, r3, #31
 8008f1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f20:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f24:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8008f28:	462b      	mov	r3, r5
 8008f2a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8008f2e:	4642      	mov	r2, r8
 8008f30:	fb02 f203 	mul.w	r2, r2, r3
 8008f34:	464b      	mov	r3, r9
 8008f36:	4621      	mov	r1, r4
 8008f38:	fb01 f303 	mul.w	r3, r1, r3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	4622      	mov	r2, r4
 8008f40:	4641      	mov	r1, r8
 8008f42:	fba2 1201 	umull	r1, r2, r2, r1
 8008f46:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8008f4a:	460a      	mov	r2, r1
 8008f4c:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8008f50:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8008f54:	4413      	add	r3, r2
 8008f56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f5a:	f04f 0200 	mov.w	r2, #0
 8008f5e:	f04f 0300 	mov.w	r3, #0
 8008f62:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8008f66:	4621      	mov	r1, r4
 8008f68:	0fca      	lsrs	r2, r1, #31
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8008f70:	4629      	mov	r1, r5
 8008f72:	17cb      	asrs	r3, r1, #31
 8008f74:	4613      	mov	r3, r2
 8008f76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t TEMPM = TEMP - 2000;
 8008f7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008f7e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8008f82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int64_t OFF2 = (61 * (int64_t) TEMPM * (int64_t) TEMPM) >> 4;
 8008f86:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008f8a:	17da      	asrs	r2, r3, #31
 8008f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f94:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008f98:	17da      	asrs	r2, r3, #31
 8008f9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f9e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008fa2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8008fa6:	462b      	mov	r3, r5
 8008fa8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8008fac:	4642      	mov	r2, r8
 8008fae:	fb02 f203 	mul.w	r2, r2, r3
 8008fb2:	464b      	mov	r3, r9
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	fb01 f303 	mul.w	r3, r1, r3
 8008fba:	4413      	add	r3, r2
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	4641      	mov	r1, r8
 8008fc0:	fba2 1201 	umull	r1, r2, r2, r1
 8008fc4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8008fc8:	460a      	mov	r2, r1
 8008fca:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8008fce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008fd8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8008fdc:	4622      	mov	r2, r4
 8008fde:	462b      	mov	r3, r5
 8008fe0:	f04f 0000 	mov.w	r0, #0
 8008fe4:	f04f 0100 	mov.w	r1, #0
 8008fe8:	0119      	lsls	r1, r3, #4
 8008fea:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8008fee:	0110      	lsls	r0, r2, #4
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	1a51      	subs	r1, r2, r1
 8008ff8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	eb63 0301 	sbc.w	r3, r3, r1
 8009000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009002:	f04f 0200 	mov.w	r2, #0
 8009006:	f04f 0300 	mov.w	r3, #0
 800900a:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800900e:	4649      	mov	r1, r9
 8009010:	008b      	lsls	r3, r1, #2
 8009012:	4641      	mov	r1, r8
 8009014:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009018:	4641      	mov	r1, r8
 800901a:	008a      	lsls	r2, r1, #2
 800901c:	4610      	mov	r0, r2
 800901e:	4619      	mov	r1, r3
 8009020:	4603      	mov	r3, r0
 8009022:	4622      	mov	r2, r4
 8009024:	189b      	adds	r3, r3, r2
 8009026:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009028:	462b      	mov	r3, r5
 800902a:	460a      	mov	r2, r1
 800902c:	eb42 0303 	adc.w	r3, r2, r3
 8009030:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	f04f 0300 	mov.w	r3, #0
 800903a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800903e:	4621      	mov	r1, r4
 8009040:	090a      	lsrs	r2, r1, #4
 8009042:	4629      	mov	r1, r5
 8009044:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8009048:	4629      	mov	r1, r5
 800904a:	110b      	asrs	r3, r1, #4
 800904c:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
    int64_t SENS2 = 2 * (int64_t) TEMPM * (int64_t) TEMPM;
 8009050:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009054:	17da      	asrs	r2, r3, #31
 8009056:	673b      	str	r3, [r7, #112]	@ 0x70
 8009058:	677a      	str	r2, [r7, #116]	@ 0x74
 800905a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800905e:	17da      	asrs	r2, r3, #31
 8009060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009062:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009064:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8009068:	462b      	mov	r3, r5
 800906a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800906e:	4642      	mov	r2, r8
 8009070:	fb02 f203 	mul.w	r2, r2, r3
 8009074:	464b      	mov	r3, r9
 8009076:	4621      	mov	r1, r4
 8009078:	fb01 f303 	mul.w	r3, r1, r3
 800907c:	4413      	add	r3, r2
 800907e:	4622      	mov	r2, r4
 8009080:	4641      	mov	r1, r8
 8009082:	fba2 1201 	umull	r1, r2, r2, r1
 8009086:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800908a:	460a      	mov	r2, r1
 800908c:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8009090:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8009094:	4413      	add	r3, r2
 8009096:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800909a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800909e:	460b      	mov	r3, r1
 80090a0:	18db      	adds	r3, r3, r3
 80090a2:	623b      	str	r3, [r7, #32]
 80090a4:	4613      	mov	r3, r2
 80090a6:	eb42 0303 	adc.w	r3, r2, r3
 80090aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80090b0:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    if (TEMP < -1500) {
 80090b4:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80090b8:	4b02      	ldr	r3, [pc, #8]	@ (80090c4 <MS5607Convert+0x384>)
 80090ba:	429a      	cmp	r2, r3
 80090bc:	da55      	bge.n	800916a <MS5607Convert+0x42a>
 80090be:	e003      	b.n	80090c8 <MS5607Convert+0x388>
 80090c0:	24001464 	.word	0x24001464
 80090c4:	fffffa24 	.word	0xfffffa24
      int32_t TEMPP = TEMP + 1500;
 80090c8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80090cc:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80090d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      int32_t TEMPP2 = TEMPP * TEMPP;
 80090d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80090d8:	fb03 f303 	mul.w	r3, r3, r3
 80090dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      OFF2 = OFF2 + (int64_t) 15 * TEMPP2;
 80090e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80090e4:	17da      	asrs	r2, r3, #31
 80090e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80090e8:	667a      	str	r2, [r7, #100]	@ 0x64
 80090ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80090ee:	4622      	mov	r2, r4
 80090f0:	462b      	mov	r3, r5
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f04f 0100 	mov.w	r1, #0
 80090fa:	0119      	lsls	r1, r3, #4
 80090fc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8009100:	0110      	lsls	r0, r2, #4
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	4621      	mov	r1, r4
 8009108:	1a51      	subs	r1, r2, r1
 800910a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800910c:	4629      	mov	r1, r5
 800910e:	eb63 0301 	sbc.w	r3, r3, r1
 8009112:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009114:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8009118:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800911c:	4621      	mov	r1, r4
 800911e:	1851      	adds	r1, r2, r1
 8009120:	61b9      	str	r1, [r7, #24]
 8009122:	4629      	mov	r1, r5
 8009124:	eb43 0101 	adc.w	r1, r3, r1
 8009128:	61f9      	str	r1, [r7, #28]
 800912a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800912e:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
      SENS2 = SENS2 + (int64_t) 8 * TEMPP2;
 8009132:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009136:	17da      	asrs	r2, r3, #31
 8009138:	653b      	str	r3, [r7, #80]	@ 0x50
 800913a:	657a      	str	r2, [r7, #84]	@ 0x54
 800913c:	f04f 0000 	mov.w	r0, #0
 8009140:	f04f 0100 	mov.w	r1, #0
 8009144:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8009148:	462b      	mov	r3, r5
 800914a:	00d9      	lsls	r1, r3, #3
 800914c:	4623      	mov	r3, r4
 800914e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8009152:	4623      	mov	r3, r4
 8009154:	00d8      	lsls	r0, r3, #3
 8009156:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800915a:	1814      	adds	r4, r2, r0
 800915c:	613c      	str	r4, [r7, #16]
 800915e:	414b      	adcs	r3, r1
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009166:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    }
    TEMP -= T2;
 800916a:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800916e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    OFF -= OFF2;
 8009178:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800917c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8009180:	1a84      	subs	r4, r0, r2
 8009182:	60bc      	str	r4, [r7, #8]
 8009184:	eb61 0303 	sbc.w	r3, r1, r3
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800918e:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    SENS -= SENS2;
 8009192:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8009196:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800919a:	1a84      	subs	r4, r0, r2
 800919c:	603c      	str	r4, [r7, #0]
 800919e:	eb61 0303 	sbc.w	r3, r1, r3
 80091a2:	607b      	str	r3, [r7, #4]
 80091a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80091a8:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
  }

  value->pressure = ((((int64_t) sample->pressure * SENS) >> 21) - OFF) >> 15;
 80091ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2200      	movs	r2, #0
 80091b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80091b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80091bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80091c0:	462a      	mov	r2, r5
 80091c2:	fb02 f203 	mul.w	r2, r2, r3
 80091c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80091ca:	4621      	mov	r1, r4
 80091cc:	fb01 f303 	mul.w	r3, r1, r3
 80091d0:	4413      	add	r3, r2
 80091d2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80091d6:	4621      	mov	r1, r4
 80091d8:	fba2 1201 	umull	r1, r2, r2, r1
 80091dc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80091e0:	460a      	mov	r2, r1
 80091e2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80091e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80091ea:	4413      	add	r3, r2
 80091ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80091fc:	4621      	mov	r1, r4
 80091fe:	0d4a      	lsrs	r2, r1, #21
 8009200:	4629      	mov	r1, r5
 8009202:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8009206:	4629      	mov	r1, r5
 8009208:	154b      	asrs	r3, r1, #21
 800920a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800920e:	1a14      	subs	r4, r2, r0
 8009210:	643c      	str	r4, [r7, #64]	@ 0x40
 8009212:	eb63 0301 	sbc.w	r3, r3, r1
 8009216:	647b      	str	r3, [r7, #68]	@ 0x44
 8009218:	f04f 0200 	mov.w	r2, #0
 800921c:	f04f 0300 	mov.w	r3, #0
 8009220:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8009224:	4621      	mov	r1, r4
 8009226:	0bca      	lsrs	r2, r1, #15
 8009228:	4629      	mov	r1, r5
 800922a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800922e:	4629      	mov	r1, r5
 8009230:	13cb      	asrs	r3, r1, #15
 8009232:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009236:	601a      	str	r2, [r3, #0]
  value->temperature = TEMP;
 8009238:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800923c:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8009240:	605a      	str	r2, [r3, #4]
}
 8009242:	bf00      	nop
 8009244:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8009248:	46bd      	mov	sp, r7
 800924a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800924e:	4770      	bx	lr

08009250 <MS5607Update>:

/* Performs the sensor reading updating the data structures */
void MS5607Update(void){
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  MS5607UncompensatedRead(&uncompValues);
 8009254:	4804      	ldr	r0, [pc, #16]	@ (8009268 <MS5607Update+0x18>)
 8009256:	f7ff fcb9 	bl	8008bcc <MS5607UncompensatedRead>
  MS5607Convert(&uncompValues, &readings);
 800925a:	4904      	ldr	r1, [pc, #16]	@ (800926c <MS5607Update+0x1c>)
 800925c:	4802      	ldr	r0, [pc, #8]	@ (8009268 <MS5607Update+0x18>)
 800925e:	f7ff fd6f 	bl	8008d40 <MS5607Convert>
}
 8009262:	bf00      	nop
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	24001474 	.word	0x24001474
 800926c:	2400147c 	.word	0x2400147c

08009270 <MS5607GetTemperatureC>:

/* Gets the temperature from the sensor reading */
double MS5607GetTemperatureC(void){
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  return (double)readings.temperature/(double)100.0;
 8009274:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <MS5607GetTemperatureC+0x30>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009280:	ed9f 6b05 	vldr	d6, [pc, #20]	@ 8009298 <MS5607GetTemperatureC+0x28>
 8009284:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009288:	eeb0 7b45 	vmov.f64	d7, d5
}
 800928c:	eeb0 0b47 	vmov.f64	d0, d7
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	00000000 	.word	0x00000000
 800929c:	40590000 	.word	0x40590000
 80092a0:	2400147c 	.word	0x2400147c

080092a4 <MS5607GetPressurePa>:

/* Gets the pressure from the sensor reading */
int32_t MS5607GetPressurePa(void){
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
  return readings.pressure;
 80092a8:	4b03      	ldr	r3, [pc, #12]	@ (80092b8 <MS5607GetPressurePa+0x14>)
 80092aa:	681b      	ldr	r3, [r3, #0]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	2400147c 	.word	0x2400147c

080092bc <enableCSB>:

/* Sets the CS pin */
void enableCSB(void){
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 80092c0:	2200      	movs	r2, #0
 80092c2:	2110      	movs	r1, #16
 80092c4:	4802      	ldr	r0, [pc, #8]	@ (80092d0 <enableCSB+0x14>)
 80092c6:	f001 ff19 	bl	800b0fc <HAL_GPIO_WritePin>
}
 80092ca:	bf00      	nop
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	58021000 	.word	0x58021000

080092d4 <disableCSB>:

/* Sets the CS pin */
void disableCSB(void){
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 80092d8:	2201      	movs	r2, #1
 80092da:	2110      	movs	r1, #16
 80092dc:	4802      	ldr	r0, [pc, #8]	@ (80092e8 <disableCSB+0x14>)
 80092de:	f001 ff0d 	bl	800b0fc <HAL_GPIO_WritePin>
}
 80092e2:	bf00      	nop
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	58021000 	.word	0x58021000

080092ec <MS5607_ReadData>:
void MS5607SetPressureOSR(MS5607OSRFactors pOSR){
  Pressure_OSR = pOSR;
}


Barometer_2_Axis MS5607_ReadData(){
 80092ec:	b590      	push	{r4, r7, lr}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	Barometer_2_Axis data = {0};
 80092f4:	f107 0308 	add.w	r3, r7, #8
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	605a      	str	r2, [r3, #4]
 80092fe:	609a      	str	r2, [r3, #8]
 8009300:	60da      	str	r2, [r3, #12]
	MS5607UncompensatedRead(&uncompValues);
 8009302:	480f      	ldr	r0, [pc, #60]	@ (8009340 <MS5607_ReadData+0x54>)
 8009304:	f7ff fc62 	bl	8008bcc <MS5607UncompensatedRead>
	MS5607Convert(&uncompValues, &readings);
 8009308:	490e      	ldr	r1, [pc, #56]	@ (8009344 <MS5607_ReadData+0x58>)
 800930a:	480d      	ldr	r0, [pc, #52]	@ (8009340 <MS5607_ReadData+0x54>)
 800930c:	f7ff fd18 	bl	8008d40 <MS5607Convert>
	data.temperature = MS5607GetTemperatureC();
 8009310:	f7ff ffae 	bl	8009270 <MS5607GetTemperatureC>
 8009314:	eeb0 7b40 	vmov.f64	d7, d0
 8009318:	ed87 7b04 	vstr	d7, [r7, #16]
	data.pressure = MS5607GetPressurePa();
 800931c:	f7ff ffc2 	bl	80092a4 <MS5607GetPressurePa>
 8009320:	4603      	mov	r3, r0
 8009322:	60bb      	str	r3, [r7, #8]
	MS5607Update();
 8009324:	f7ff ff94 	bl	8009250 <MS5607Update>
	return data;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	461c      	mov	r4, r3
 800932c:	f107 0308 	add.w	r3, r7, #8
 8009330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009332:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	bd90      	pop	{r4, r7, pc}
 800933e:	bf00      	nop
 8009340:	24001474 	.word	0x24001474
 8009344:	2400147c 	.word	0x2400147c

08009348 <ms5607_print_barometer_data>:


void ms5607_print_barometer_data(Barometer_2_Axis *data) {
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	printf("MS5607 Barometer: \n");
 8009350:	4808      	ldr	r0, [pc, #32]	@ (8009374 <ms5607_print_barometer_data+0x2c>)
 8009352:	f00c febb 	bl	80160cc <puts>
	printf("Pressure: %ld Pa, Temperature: %f °C \n", data->pressure, data->temperature);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6819      	ldr	r1, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009360:	4805      	ldr	r0, [pc, #20]	@ (8009378 <ms5607_print_barometer_data+0x30>)
 8009362:	f00c fe4b 	bl	8015ffc <iprintf>
    printf("----- \n");
 8009366:	4805      	ldr	r0, [pc, #20]	@ (800937c <ms5607_print_barometer_data+0x34>)
 8009368:	f00c feb0 	bl	80160cc <puts>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	08019d60 	.word	0x08019d60
 8009378:	08019d74 	.word	0x08019d74
 800937c:	08019d9c 	.word	0x08019d9c

08009380 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009388:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800938c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d013      	beq.n	80093c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8009398:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800939c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80093a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00b      	beq.n	80093c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80093a8:	e000      	b.n	80093ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80093aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80093ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0f9      	beq.n	80093aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80093b6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	b2d2      	uxtb	r2, r2
 80093be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80093c0:	687b      	ldr	r3, [r7, #4]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <_write>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b086      	sub	sp, #24
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	607a      	str	r2, [r7, #4]
	int i=0;
 80093da:	2300      	movs	r3, #0
 80093dc:	617b      	str	r3, [r7, #20]
	for(i=0 ; i < len ; i++){
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	e009      	b.n	80093f8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	60ba      	str	r2, [r7, #8]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff ffc7 	bl	8009380 <ITM_SendChar>
	for(i=0 ; i < len ; i++){
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	3301      	adds	r3, #1
 80093f6:	617b      	str	r3, [r7, #20]
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	dbf1      	blt.n	80093e4 <_write+0x16>
	}
	return len;
 8009400:	687b      	ldr	r3, [r7, #4]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800940e:	f000 fc2d 	bl	8009c6c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009412:	f001 faa1 	bl	800a958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009416:	f000 f81d 	bl	8009454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800941a:	f000 fb15 	bl	8009a48 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800941e:	f000 f947 	bl	80096b0 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8009422:	f000 f885 	bl	8009530 <MX_I2C1_Init>
  MX_I2C2_Init();
 8009426:	f000 f8c3 	bl	80095b0 <MX_I2C2_Init>
  MX_I2C4_Init();
 800942a:	f000 f901 	bl	8009630 <MX_I2C4_Init>
  MX_SPI1_Init();
 800942e:	f000 f95d 	bl	80096ec <MX_SPI1_Init>
  MX_SPI2_Init();
 8009432:	f000 f9b1 	bl	8009798 <MX_SPI2_Init>
  MX_UART8_Init();
 8009436:	f000 fa5b 	bl	80098f0 <MX_UART8_Init>
  MX_USART1_Init();
 800943a:	f000 faa7 	bl	800998c <MX_USART1_Init>
  MX_SPI4_Init();
 800943e:	f000 fa01 	bl	8009844 <MX_SPI4_Init>
  MX_FATFS_Init();
 8009442:	f00b fcdd 	bl	8014e00 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
  SensorManager_Init();
 8009446:	f001 f995 	bl	800a774 <SensorManager_Init>
  TestTelemetry();
 800944a:	f001 fa29 	bl	800a8a0 <TestTelemetry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800944e:	bf00      	nop
 8009450:	e7fd      	b.n	800944e <main+0x44>
	...

08009454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b09c      	sub	sp, #112	@ 0x70
 8009458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800945a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800945e:	224c      	movs	r2, #76	@ 0x4c
 8009460:	2100      	movs	r1, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f00c ff32 	bl	80162cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009468:	1d3b      	adds	r3, r7, #4
 800946a:	2220      	movs	r2, #32
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f00c ff2c 	bl	80162cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8009474:	2002      	movs	r0, #2
 8009476:	f002 fc43 	bl	800bd00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800947a:	2300      	movs	r3, #0
 800947c:	603b      	str	r3, [r7, #0]
 800947e:	4b2b      	ldr	r3, [pc, #172]	@ (800952c <SystemClock_Config+0xd8>)
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	4a2a      	ldr	r2, [pc, #168]	@ (800952c <SystemClock_Config+0xd8>)
 8009484:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8009488:	6193      	str	r3, [r2, #24]
 800948a:	4b28      	ldr	r3, [pc, #160]	@ (800952c <SystemClock_Config+0xd8>)
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8009496:	bf00      	nop
 8009498:	4b24      	ldr	r3, [pc, #144]	@ (800952c <SystemClock_Config+0xd8>)
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094a4:	d1f8      	bne.n	8009498 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80094a6:	2301      	movs	r3, #1
 80094a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80094aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80094ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80094b0:	2302      	movs	r3, #2
 80094b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80094b4:	2302      	movs	r3, #2
 80094b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80094b8:	2303      	movs	r3, #3
 80094ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80094bc:	231f      	movs	r3, #31
 80094be:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80094c0:	2301      	movs	r3, #1
 80094c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80094c4:	2302      	movs	r3, #2
 80094c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80094c8:	2302      	movs	r3, #2
 80094ca:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80094cc:	230c      	movs	r3, #12
 80094ce:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 80094d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094de:	4618      	mov	r0, r3
 80094e0:	f002 fc48 	bl	800bd74 <HAL_RCC_OscConfig>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80094ea:	f000 fbeb 	bl	8009cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094ee:	233f      	movs	r3, #63	@ 0x3f
 80094f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094f2:	2303      	movs	r3, #3
 80094f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80094fa:	2308      	movs	r3, #8
 80094fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80094fe:	2340      	movs	r3, #64	@ 0x40
 8009500:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8009502:	2340      	movs	r3, #64	@ 0x40
 8009504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8009506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800950a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800950c:	2340      	movs	r3, #64	@ 0x40
 800950e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8009510:	1d3b      	adds	r3, r7, #4
 8009512:	2103      	movs	r1, #3
 8009514:	4618      	mov	r0, r3
 8009516:	f003 f807 	bl	800c528 <HAL_RCC_ClockConfig>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8009520:	f000 fbd0 	bl	8009cc4 <Error_Handler>
  }
}
 8009524:	bf00      	nop
 8009526:	3770      	adds	r7, #112	@ 0x70
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	58024800 	.word	0x58024800

08009530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009534:	4b1b      	ldr	r3, [pc, #108]	@ (80095a4 <MX_I2C1_Init+0x74>)
 8009536:	4a1c      	ldr	r2, [pc, #112]	@ (80095a8 <MX_I2C1_Init+0x78>)
 8009538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0A3F6;
 800953a:	4b1a      	ldr	r3, [pc, #104]	@ (80095a4 <MX_I2C1_Init+0x74>)
 800953c:	4a1b      	ldr	r2, [pc, #108]	@ (80095ac <MX_I2C1_Init+0x7c>)
 800953e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009540:	4b18      	ldr	r3, [pc, #96]	@ (80095a4 <MX_I2C1_Init+0x74>)
 8009542:	2200      	movs	r2, #0
 8009544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009546:	4b17      	ldr	r3, [pc, #92]	@ (80095a4 <MX_I2C1_Init+0x74>)
 8009548:	2201      	movs	r2, #1
 800954a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800954c:	4b15      	ldr	r3, [pc, #84]	@ (80095a4 <MX_I2C1_Init+0x74>)
 800954e:	2200      	movs	r2, #0
 8009550:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009552:	4b14      	ldr	r3, [pc, #80]	@ (80095a4 <MX_I2C1_Init+0x74>)
 8009554:	2200      	movs	r2, #0
 8009556:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009558:	4b12      	ldr	r3, [pc, #72]	@ (80095a4 <MX_I2C1_Init+0x74>)
 800955a:	2200      	movs	r2, #0
 800955c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800955e:	4b11      	ldr	r3, [pc, #68]	@ (80095a4 <MX_I2C1_Init+0x74>)
 8009560:	2200      	movs	r2, #0
 8009562:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009564:	4b0f      	ldr	r3, [pc, #60]	@ (80095a4 <MX_I2C1_Init+0x74>)
 8009566:	2200      	movs	r2, #0
 8009568:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800956a:	480e      	ldr	r0, [pc, #56]	@ (80095a4 <MX_I2C1_Init+0x74>)
 800956c:	f001 fde0 	bl	800b130 <HAL_I2C_Init>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009576:	f000 fba5 	bl	8009cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800957a:	2100      	movs	r1, #0
 800957c:	4809      	ldr	r0, [pc, #36]	@ (80095a4 <MX_I2C1_Init+0x74>)
 800957e:	f002 fb27 	bl	800bbd0 <HAL_I2CEx_ConfigAnalogFilter>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8009588:	f000 fb9c 	bl	8009cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800958c:	2100      	movs	r1, #0
 800958e:	4805      	ldr	r0, [pc, #20]	@ (80095a4 <MX_I2C1_Init+0x74>)
 8009590:	f002 fb69 	bl	800bc66 <HAL_I2CEx_ConfigDigitalFilter>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800959a:	f000 fb93 	bl	8009cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800959e:	bf00      	nop
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	24001484 	.word	0x24001484
 80095a8:	40005400 	.word	0x40005400
 80095ac:	20a0a3f6 	.word	0x20a0a3f6

080095b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80095b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009628 <MX_I2C2_Init+0x78>)
 80095b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0A3F6;
 80095ba:	4b1a      	ldr	r3, [pc, #104]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095bc:	4a1b      	ldr	r2, [pc, #108]	@ (800962c <MX_I2C2_Init+0x7c>)
 80095be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80095c0:	4b18      	ldr	r3, [pc, #96]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095c6:	4b17      	ldr	r3, [pc, #92]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095c8:	2201      	movs	r2, #1
 80095ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095cc:	4b15      	ldr	r3, [pc, #84]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80095d2:	4b14      	ldr	r3, [pc, #80]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80095d8:	4b12      	ldr	r3, [pc, #72]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095da:	2200      	movs	r2, #0
 80095dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095de:	4b11      	ldr	r3, [pc, #68]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80095ea:	480e      	ldr	r0, [pc, #56]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095ec:	f001 fda0 	bl	800b130 <HAL_I2C_Init>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80095f6:	f000 fb65 	bl	8009cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80095fa:	2100      	movs	r1, #0
 80095fc:	4809      	ldr	r0, [pc, #36]	@ (8009624 <MX_I2C2_Init+0x74>)
 80095fe:	f002 fae7 	bl	800bbd0 <HAL_I2CEx_ConfigAnalogFilter>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8009608:	f000 fb5c 	bl	8009cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800960c:	2100      	movs	r1, #0
 800960e:	4805      	ldr	r0, [pc, #20]	@ (8009624 <MX_I2C2_Init+0x74>)
 8009610:	f002 fb29 	bl	800bc66 <HAL_I2CEx_ConfigDigitalFilter>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800961a:	f000 fb53 	bl	8009cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800961e:	bf00      	nop
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	240014d8 	.word	0x240014d8
 8009628:	40005800 	.word	0x40005800
 800962c:	20a0a3f6 	.word	0x20a0a3f6

08009630 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8009634:	4b1b      	ldr	r3, [pc, #108]	@ (80096a4 <MX_I2C4_Init+0x74>)
 8009636:	4a1c      	ldr	r2, [pc, #112]	@ (80096a8 <MX_I2C4_Init+0x78>)
 8009638:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60405858;
 800963a:	4b1a      	ldr	r3, [pc, #104]	@ (80096a4 <MX_I2C4_Init+0x74>)
 800963c:	4a1b      	ldr	r2, [pc, #108]	@ (80096ac <MX_I2C4_Init+0x7c>)
 800963e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8009640:	4b18      	ldr	r3, [pc, #96]	@ (80096a4 <MX_I2C4_Init+0x74>)
 8009642:	2200      	movs	r2, #0
 8009644:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009646:	4b17      	ldr	r3, [pc, #92]	@ (80096a4 <MX_I2C4_Init+0x74>)
 8009648:	2201      	movs	r2, #1
 800964a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800964c:	4b15      	ldr	r3, [pc, #84]	@ (80096a4 <MX_I2C4_Init+0x74>)
 800964e:	2200      	movs	r2, #0
 8009650:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8009652:	4b14      	ldr	r3, [pc, #80]	@ (80096a4 <MX_I2C4_Init+0x74>)
 8009654:	2200      	movs	r2, #0
 8009656:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009658:	4b12      	ldr	r3, [pc, #72]	@ (80096a4 <MX_I2C4_Init+0x74>)
 800965a:	2200      	movs	r2, #0
 800965c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800965e:	4b11      	ldr	r3, [pc, #68]	@ (80096a4 <MX_I2C4_Init+0x74>)
 8009660:	2200      	movs	r2, #0
 8009662:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009664:	4b0f      	ldr	r3, [pc, #60]	@ (80096a4 <MX_I2C4_Init+0x74>)
 8009666:	2200      	movs	r2, #0
 8009668:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800966a:	480e      	ldr	r0, [pc, #56]	@ (80096a4 <MX_I2C4_Init+0x74>)
 800966c:	f001 fd60 	bl	800b130 <HAL_I2C_Init>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8009676:	f000 fb25 	bl	8009cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800967a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800967e:	4809      	ldr	r0, [pc, #36]	@ (80096a4 <MX_I2C4_Init+0x74>)
 8009680:	f002 faa6 	bl	800bbd0 <HAL_I2CEx_ConfigAnalogFilter>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 800968a:	f000 fb1b 	bl	8009cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800968e:	2100      	movs	r1, #0
 8009690:	4804      	ldr	r0, [pc, #16]	@ (80096a4 <MX_I2C4_Init+0x74>)
 8009692:	f002 fae8 	bl	800bc66 <HAL_I2CEx_ConfigDigitalFilter>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 800969c:	f000 fb12 	bl	8009cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80096a0:	bf00      	nop
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	2400152c 	.word	0x2400152c
 80096a8:	58001c00 	.word	0x58001c00
 80096ac:	60405858 	.word	0x60405858

080096b0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80096b0:	b480      	push	{r7}
 80096b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80096b4:	4b0b      	ldr	r3, [pc, #44]	@ (80096e4 <MX_SDMMC1_SD_Init+0x34>)
 80096b6:	4a0c      	ldr	r2, [pc, #48]	@ (80096e8 <MX_SDMMC1_SD_Init+0x38>)
 80096b8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80096ba:	4b0a      	ldr	r3, [pc, #40]	@ (80096e4 <MX_SDMMC1_SD_Init+0x34>)
 80096bc:	2200      	movs	r2, #0
 80096be:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80096c0:	4b08      	ldr	r3, [pc, #32]	@ (80096e4 <MX_SDMMC1_SD_Init+0x34>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80096c6:	4b07      	ldr	r3, [pc, #28]	@ (80096e4 <MX_SDMMC1_SD_Init+0x34>)
 80096c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80096cc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80096ce:	4b05      	ldr	r3, [pc, #20]	@ (80096e4 <MX_SDMMC1_SD_Init+0x34>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80096d4:	4b03      	ldr	r3, [pc, #12]	@ (80096e4 <MX_SDMMC1_SD_Init+0x34>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80096da:	bf00      	nop
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	24001580 	.word	0x24001580
 80096e8:	52007000 	.word	0x52007000

080096ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80096f0:	4b27      	ldr	r3, [pc, #156]	@ (8009790 <MX_SPI1_Init+0xa4>)
 80096f2:	4a28      	ldr	r2, [pc, #160]	@ (8009794 <MX_SPI1_Init+0xa8>)
 80096f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80096f6:	4b26      	ldr	r3, [pc, #152]	@ (8009790 <MX_SPI1_Init+0xa4>)
 80096f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80096fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80096fe:	4b24      	ldr	r3, [pc, #144]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009700:	2200      	movs	r2, #0
 8009702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009704:	4b22      	ldr	r3, [pc, #136]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009706:	2207      	movs	r2, #7
 8009708:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800970a:	4b21      	ldr	r3, [pc, #132]	@ (8009790 <MX_SPI1_Init+0xa4>)
 800970c:	2200      	movs	r2, #0
 800970e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009710:	4b1f      	ldr	r3, [pc, #124]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009712:	2200      	movs	r2, #0
 8009714:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009716:	4b1e      	ldr	r3, [pc, #120]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009718:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800971c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800971e:	4b1c      	ldr	r3, [pc, #112]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009720:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8009724:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009726:	4b1a      	ldr	r3, [pc, #104]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009728:	2200      	movs	r2, #0
 800972a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800972c:	4b18      	ldr	r3, [pc, #96]	@ (8009790 <MX_SPI1_Init+0xa4>)
 800972e:	2200      	movs	r2, #0
 8009730:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009732:	4b17      	ldr	r3, [pc, #92]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009734:	2200      	movs	r2, #0
 8009736:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8009738:	4b15      	ldr	r3, [pc, #84]	@ (8009790 <MX_SPI1_Init+0xa4>)
 800973a:	2200      	movs	r2, #0
 800973c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800973e:	4b14      	ldr	r3, [pc, #80]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009740:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009744:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8009746:	4b12      	ldr	r3, [pc, #72]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009748:	2200      	movs	r2, #0
 800974a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800974c:	4b10      	ldr	r3, [pc, #64]	@ (8009790 <MX_SPI1_Init+0xa4>)
 800974e:	2200      	movs	r2, #0
 8009750:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8009752:	4b0f      	ldr	r3, [pc, #60]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009754:	2200      	movs	r2, #0
 8009756:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8009758:	4b0d      	ldr	r3, [pc, #52]	@ (8009790 <MX_SPI1_Init+0xa4>)
 800975a:	2200      	movs	r2, #0
 800975c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800975e:	4b0c      	ldr	r3, [pc, #48]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009760:	2200      	movs	r2, #0
 8009762:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8009764:	4b0a      	ldr	r3, [pc, #40]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009766:	2200      	movs	r2, #0
 8009768:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800976a:	4b09      	ldr	r3, [pc, #36]	@ (8009790 <MX_SPI1_Init+0xa4>)
 800976c:	2200      	movs	r2, #0
 800976e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8009770:	4b07      	ldr	r3, [pc, #28]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009772:	2200      	movs	r2, #0
 8009774:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8009776:	4b06      	ldr	r3, [pc, #24]	@ (8009790 <MX_SPI1_Init+0xa4>)
 8009778:	2200      	movs	r2, #0
 800977a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800977c:	4804      	ldr	r0, [pc, #16]	@ (8009790 <MX_SPI1_Init+0xa4>)
 800977e:	f007 f9f7 	bl	8010b70 <HAL_SPI_Init>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8009788:	f000 fa9c 	bl	8009cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800978c:	bf00      	nop
 800978e:	bd80      	pop	{r7, pc}
 8009790:	240015fc 	.word	0x240015fc
 8009794:	40013000 	.word	0x40013000

08009798 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800979c:	4b27      	ldr	r3, [pc, #156]	@ (800983c <MX_SPI2_Init+0xa4>)
 800979e:	4a28      	ldr	r2, [pc, #160]	@ (8009840 <MX_SPI2_Init+0xa8>)
 80097a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80097a2:	4b26      	ldr	r3, [pc, #152]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80097a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80097aa:	4b24      	ldr	r3, [pc, #144]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80097b0:	4b22      	ldr	r3, [pc, #136]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097b2:	2207      	movs	r2, #7
 80097b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80097b6:	4b21      	ldr	r3, [pc, #132]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80097bc:	4b1f      	ldr	r3, [pc, #124]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097be:	2200      	movs	r2, #0
 80097c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80097c2:	4b1e      	ldr	r3, [pc, #120]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80097c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80097ca:	4b1c      	ldr	r3, [pc, #112]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097cc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80097d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80097d2:	4b1a      	ldr	r3, [pc, #104]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80097d8:	4b18      	ldr	r3, [pc, #96]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097da:	2200      	movs	r2, #0
 80097dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097de:	4b17      	ldr	r3, [pc, #92]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80097e4:	4b15      	ldr	r3, [pc, #84]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80097ea:	4b14      	ldr	r3, [pc, #80]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80097f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80097f2:	4b12      	ldr	r3, [pc, #72]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80097f8:	4b10      	ldr	r3, [pc, #64]	@ (800983c <MX_SPI2_Init+0xa4>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80097fe:	4b0f      	ldr	r3, [pc, #60]	@ (800983c <MX_SPI2_Init+0xa4>)
 8009800:	2200      	movs	r2, #0
 8009802:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8009804:	4b0d      	ldr	r3, [pc, #52]	@ (800983c <MX_SPI2_Init+0xa4>)
 8009806:	2200      	movs	r2, #0
 8009808:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800980a:	4b0c      	ldr	r3, [pc, #48]	@ (800983c <MX_SPI2_Init+0xa4>)
 800980c:	2200      	movs	r2, #0
 800980e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8009810:	4b0a      	ldr	r3, [pc, #40]	@ (800983c <MX_SPI2_Init+0xa4>)
 8009812:	2200      	movs	r2, #0
 8009814:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8009816:	4b09      	ldr	r3, [pc, #36]	@ (800983c <MX_SPI2_Init+0xa4>)
 8009818:	2200      	movs	r2, #0
 800981a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800981c:	4b07      	ldr	r3, [pc, #28]	@ (800983c <MX_SPI2_Init+0xa4>)
 800981e:	2200      	movs	r2, #0
 8009820:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8009822:	4b06      	ldr	r3, [pc, #24]	@ (800983c <MX_SPI2_Init+0xa4>)
 8009824:	2200      	movs	r2, #0
 8009826:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009828:	4804      	ldr	r0, [pc, #16]	@ (800983c <MX_SPI2_Init+0xa4>)
 800982a:	f007 f9a1 	bl	8010b70 <HAL_SPI_Init>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8009834:	f000 fa46 	bl	8009cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009838:	bf00      	nop
 800983a:	bd80      	pop	{r7, pc}
 800983c:	24001684 	.word	0x24001684
 8009840:	40003800 	.word	0x40003800

08009844 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8009848:	4b27      	ldr	r3, [pc, #156]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 800984a:	4a28      	ldr	r2, [pc, #160]	@ (80098ec <MX_SPI4_Init+0xa8>)
 800984c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800984e:	4b26      	ldr	r3, [pc, #152]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 8009850:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8009854:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8009856:	4b24      	ldr	r3, [pc, #144]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 8009858:	2200      	movs	r2, #0
 800985a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800985c:	4b22      	ldr	r3, [pc, #136]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 800985e:	2207      	movs	r2, #7
 8009860:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009862:	4b21      	ldr	r3, [pc, #132]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 8009864:	2200      	movs	r2, #0
 8009866:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009868:	4b1f      	ldr	r3, [pc, #124]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 800986a:	2200      	movs	r2, #0
 800986c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800986e:	4b1e      	ldr	r3, [pc, #120]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 8009870:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8009874:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009876:	4b1c      	ldr	r3, [pc, #112]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 8009878:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800987c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800987e:	4b1a      	ldr	r3, [pc, #104]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 8009880:	2200      	movs	r2, #0
 8009882:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8009884:	4b18      	ldr	r3, [pc, #96]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 8009886:	2200      	movs	r2, #0
 8009888:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800988a:	4b17      	ldr	r3, [pc, #92]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 800988c:	2200      	movs	r2, #0
 800988e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8009890:	4b15      	ldr	r3, [pc, #84]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 8009892:	2200      	movs	r2, #0
 8009894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009896:	4b14      	ldr	r3, [pc, #80]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 8009898:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800989c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800989e:	4b12      	ldr	r3, [pc, #72]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80098a4:	4b10      	ldr	r3, [pc, #64]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80098aa:	4b0f      	ldr	r3, [pc, #60]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80098b0:	4b0d      	ldr	r3, [pc, #52]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80098b6:	4b0c      	ldr	r3, [pc, #48]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80098bc:	4b0a      	ldr	r3, [pc, #40]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098be:	2200      	movs	r2, #0
 80098c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80098c2:	4b09      	ldr	r3, [pc, #36]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80098c8:	4b07      	ldr	r3, [pc, #28]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80098ce:	4b06      	ldr	r3, [pc, #24]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80098d4:	4804      	ldr	r0, [pc, #16]	@ (80098e8 <MX_SPI4_Init+0xa4>)
 80098d6:	f007 f94b 	bl	8010b70 <HAL_SPI_Init>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80098e0:	f000 f9f0 	bl	8009cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80098e4:	bf00      	nop
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	2400170c 	.word	0x2400170c
 80098ec:	40013400 	.word	0x40013400

080098f0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80098f4:	4b23      	ldr	r3, [pc, #140]	@ (8009984 <MX_UART8_Init+0x94>)
 80098f6:	4a24      	ldr	r2, [pc, #144]	@ (8009988 <MX_UART8_Init+0x98>)
 80098f8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80098fa:	4b22      	ldr	r3, [pc, #136]	@ (8009984 <MX_UART8_Init+0x94>)
 80098fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009900:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8009902:	4b20      	ldr	r3, [pc, #128]	@ (8009984 <MX_UART8_Init+0x94>)
 8009904:	2200      	movs	r2, #0
 8009906:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8009908:	4b1e      	ldr	r3, [pc, #120]	@ (8009984 <MX_UART8_Init+0x94>)
 800990a:	2200      	movs	r2, #0
 800990c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800990e:	4b1d      	ldr	r3, [pc, #116]	@ (8009984 <MX_UART8_Init+0x94>)
 8009910:	2200      	movs	r2, #0
 8009912:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8009914:	4b1b      	ldr	r3, [pc, #108]	@ (8009984 <MX_UART8_Init+0x94>)
 8009916:	220c      	movs	r2, #12
 8009918:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800991a:	4b1a      	ldr	r3, [pc, #104]	@ (8009984 <MX_UART8_Init+0x94>)
 800991c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8009920:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8009922:	4b18      	ldr	r3, [pc, #96]	@ (8009984 <MX_UART8_Init+0x94>)
 8009924:	2200      	movs	r2, #0
 8009926:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009928:	4b16      	ldr	r3, [pc, #88]	@ (8009984 <MX_UART8_Init+0x94>)
 800992a:	2200      	movs	r2, #0
 800992c:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800992e:	4b15      	ldr	r3, [pc, #84]	@ (8009984 <MX_UART8_Init+0x94>)
 8009930:	2200      	movs	r2, #0
 8009932:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009934:	4b13      	ldr	r3, [pc, #76]	@ (8009984 <MX_UART8_Init+0x94>)
 8009936:	2200      	movs	r2, #0
 8009938:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800993a:	4812      	ldr	r0, [pc, #72]	@ (8009984 <MX_UART8_Init+0x94>)
 800993c:	f008 fabf 	bl	8011ebe <HAL_UART_Init>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 8009946:	f000 f9bd 	bl	8009cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800994a:	2100      	movs	r1, #0
 800994c:	480d      	ldr	r0, [pc, #52]	@ (8009984 <MX_UART8_Init+0x94>)
 800994e:	f009 fbcc 	bl	80130ea <HAL_UARTEx_SetTxFifoThreshold>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8009958:	f000 f9b4 	bl	8009cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800995c:	2100      	movs	r1, #0
 800995e:	4809      	ldr	r0, [pc, #36]	@ (8009984 <MX_UART8_Init+0x94>)
 8009960:	f009 fc01 	bl	8013166 <HAL_UARTEx_SetRxFifoThreshold>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 800996a:	f000 f9ab 	bl	8009cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800996e:	4805      	ldr	r0, [pc, #20]	@ (8009984 <MX_UART8_Init+0x94>)
 8009970:	f009 fb82 	bl	8013078 <HAL_UARTEx_DisableFifoMode>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 800997a:	f000 f9a3 	bl	8009cc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800997e:	bf00      	nop
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	24001794 	.word	0x24001794
 8009988:	40007c00 	.word	0x40007c00

0800998c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8009990:	4b2b      	ldr	r3, [pc, #172]	@ (8009a40 <MX_USART1_Init+0xb4>)
 8009992:	4a2c      	ldr	r2, [pc, #176]	@ (8009a44 <MX_USART1_Init+0xb8>)
 8009994:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8009996:	4b2a      	ldr	r3, [pc, #168]	@ (8009a40 <MX_USART1_Init+0xb4>)
 8009998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800999c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800999e:	4b28      	ldr	r3, [pc, #160]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80099a4:	4b26      	ldr	r3, [pc, #152]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80099aa:	4b25      	ldr	r3, [pc, #148]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80099b0:	4b23      	ldr	r3, [pc, #140]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099b2:	220c      	movs	r2, #12
 80099b4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80099b6:	4b22      	ldr	r3, [pc, #136]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80099bc:	4b20      	ldr	r3, [pc, #128]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099be:	2200      	movs	r2, #0
 80099c0:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80099c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80099c8:	4b1d      	ldr	r3, [pc, #116]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_ENABLE;
 80099ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099d0:	2201      	movs	r2, #1
 80099d2:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80099d4:	481a      	ldr	r0, [pc, #104]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099d6:	f009 fc53 	bl	8013280 <HAL_USART_Init>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80099e0:	f000 f970 	bl	8009cc4 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80099e4:	2100      	movs	r1, #0
 80099e6:	4816      	ldr	r0, [pc, #88]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099e8:	f00a fb7a 	bl	80140e0 <HAL_USARTEx_SetTxFifoThreshold>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80099f2:	f000 f967 	bl	8009cc4 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80099f6:	2100      	movs	r1, #0
 80099f8:	4811      	ldr	r0, [pc, #68]	@ (8009a40 <MX_USART1_Init+0xb4>)
 80099fa:	f00a fbaf 	bl	801415c <HAL_USARTEx_SetRxFifoThreshold>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8009a04:	f000 f95e 	bl	8009cc4 <Error_Handler>
  }
  if (HAL_USARTEx_ConfigNSS(&husart1, USART_NSS_HARD) != HAL_OK)
 8009a08:	2100      	movs	r1, #0
 8009a0a:	480d      	ldr	r0, [pc, #52]	@ (8009a40 <MX_USART1_Init+0xb4>)
 8009a0c:	f00a faf2 	bl	8013ff4 <HAL_USARTEx_ConfigNSS>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <MX_USART1_Init+0x8e>
  {
    Error_Handler();
 8009a16:	f000 f955 	bl	8009cc4 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8009a1a:	4809      	ldr	r0, [pc, #36]	@ (8009a40 <MX_USART1_Init+0xb4>)
 8009a1c:	f00a fb27 	bl	801406e <HAL_USARTEx_DisableFifoMode>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <MX_USART1_Init+0x9e>
  {
    Error_Handler();
 8009a26:	f000 f94d 	bl	8009cc4 <Error_Handler>
  }
  if (HAL_USARTEx_EnableSlaveMode(&husart1) != HAL_OK)
 8009a2a:	4805      	ldr	r0, [pc, #20]	@ (8009a40 <MX_USART1_Init+0xb4>)
 8009a2c:	f00a fa8d 	bl	8013f4a <HAL_USARTEx_EnableSlaveMode>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <MX_USART1_Init+0xae>
  {
    Error_Handler();
 8009a36:	f000 f945 	bl	8009cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009a3a:	bf00      	nop
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	24001828 	.word	0x24001828
 8009a44:	40011000 	.word	0x40011000

08009a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08c      	sub	sp, #48	@ 0x30
 8009a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a4e:	f107 031c 	add.w	r3, r7, #28
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	605a      	str	r2, [r3, #4]
 8009a58:	609a      	str	r2, [r3, #8]
 8009a5a:	60da      	str	r2, [r3, #12]
 8009a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a64:	4a7b      	ldr	r2, [pc, #492]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009a66:	f043 0304 	orr.w	r3, r3, #4
 8009a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009a6e:	4b79      	ldr	r3, [pc, #484]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a74:	f003 0304 	and.w	r3, r3, #4
 8009a78:	61bb      	str	r3, [r7, #24]
 8009a7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a7c:	4b75      	ldr	r3, [pc, #468]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a82:	4a74      	ldr	r2, [pc, #464]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009a84:	f043 0310 	orr.w	r3, r3, #16
 8009a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009a8c:	4b71      	ldr	r3, [pc, #452]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a9a:	4b6e      	ldr	r3, [pc, #440]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009aa0:	4a6c      	ldr	r2, [pc, #432]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009aa2:	f043 0302 	orr.w	r3, r3, #2
 8009aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	613b      	str	r3, [r7, #16]
 8009ab6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ab8:	4b66      	ldr	r3, [pc, #408]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009abe:	4a65      	ldr	r2, [pc, #404]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009ac0:	f043 0301 	orr.w	r3, r3, #1
 8009ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009ac8:	4b62      	ldr	r3, [pc, #392]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009adc:	4a5d      	ldr	r2, [pc, #372]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009ade:	f043 0308 	orr.w	r3, r3, #8
 8009ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009aec:	f003 0308 	and.w	r3, r3, #8
 8009af0:	60bb      	str	r3, [r7, #8]
 8009af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009af4:	4b57      	ldr	r3, [pc, #348]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009afa:	4a56      	ldr	r2, [pc, #344]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009b04:	4b53      	ldr	r3, [pc, #332]	@ (8009c54 <MX_GPIO_Init+0x20c>)
 8009b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b0e:	607b      	str	r3, [r7, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8009b12:	2200      	movs	r2, #0
 8009b14:	2110      	movs	r1, #16
 8009b16:	4850      	ldr	r0, [pc, #320]	@ (8009c58 <MX_GPIO_Init+0x210>)
 8009b18:	f001 faf0 	bl	800b0fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2110      	movs	r1, #16
 8009b20:	484e      	ldr	r0, [pc, #312]	@ (8009c5c <MX_GPIO_Init+0x214>)
 8009b22:	f001 faeb 	bl	800b0fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|SPI2_CSB_Pin, GPIO_PIN_RESET);
 8009b26:	2200      	movs	r2, #0
 8009b28:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8009b2c:	484c      	ldr	r0, [pc, #304]	@ (8009c60 <MX_GPIO_Init+0x218>)
 8009b2e:	f001 fae5 	bl	800b0fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8009b32:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8009b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b40:	f107 031c 	add.w	r3, r7, #28
 8009b44:	4619      	mov	r1, r3
 8009b46:	4847      	ldr	r0, [pc, #284]	@ (8009c64 <MX_GPIO_Init+0x21c>)
 8009b48:	f001 f918 	bl	800ad7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b50:	2301      	movs	r3, #1
 8009b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b54:	2300      	movs	r3, #0
 8009b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8009b5c:	f107 031c 	add.w	r3, r7, #28
 8009b60:	4619      	mov	r1, r3
 8009b62:	483d      	ldr	r0, [pc, #244]	@ (8009c58 <MX_GPIO_Init+0x210>)
 8009b64:	f001 f90a 	bl	800ad7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009b68:	2302      	movs	r3, #2
 8009b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009b74:	f107 031c 	add.w	r3, r7, #28
 8009b78:	4619      	mov	r1, r3
 8009b7a:	483b      	ldr	r0, [pc, #236]	@ (8009c68 <MX_GPIO_Init+0x220>)
 8009b7c:	f001 f8fe 	bl	800ad7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009b80:	2308      	movs	r3, #8
 8009b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009b84:	2303      	movs	r3, #3
 8009b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b8c:	f107 031c 	add.w	r3, r7, #28
 8009b90:	4619      	mov	r1, r3
 8009b92:	4834      	ldr	r0, [pc, #208]	@ (8009c64 <MX_GPIO_Init+0x21c>)
 8009b94:	f001 f8f2 	bl	800ad7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8009b98:	2310      	movs	r3, #16
 8009b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8009ba8:	f107 031c 	add.w	r3, r7, #28
 8009bac:	4619      	mov	r1, r3
 8009bae:	482b      	ldr	r0, [pc, #172]	@ (8009c5c <MX_GPIO_Init+0x214>)
 8009bb0:	f001 f8e4 	bl	800ad7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bc0:	f107 031c 	add.w	r3, r7, #28
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4826      	ldr	r0, [pc, #152]	@ (8009c60 <MX_GPIO_Init+0x218>)
 8009bc8:	f001 f8d8 	bl	800ad7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8009bcc:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8009bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009bda:	f107 031c 	add.w	r3, r7, #28
 8009bde:	4619      	mov	r1, r3
 8009be0:	481d      	ldr	r0, [pc, #116]	@ (8009c58 <MX_GPIO_Init+0x210>)
 8009be2:	f001 f8cb 	bl	800ad7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 SPI2_CSB_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|SPI2_CSB_Pin;
 8009be6:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8009bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bec:	2301      	movs	r3, #1
 8009bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bf8:	f107 031c 	add.w	r3, r7, #28
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4818      	ldr	r0, [pc, #96]	@ (8009c60 <MX_GPIO_Init+0x218>)
 8009c00:	f001 f8bc 	bl	800ad7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009c04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009c12:	f107 031c 	add.w	r3, r7, #28
 8009c16:	4619      	mov	r1, r3
 8009c18:	480f      	ldr	r0, [pc, #60]	@ (8009c58 <MX_GPIO_Init+0x210>)
 8009c1a:	f001 f8af 	bl	800ad7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009c1e:	2308      	movs	r3, #8
 8009c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009c22:	2303      	movs	r3, #3
 8009c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c2a:	f107 031c 	add.w	r3, r7, #28
 8009c2e:	4619      	mov	r1, r3
 8009c30:	480a      	ldr	r0, [pc, #40]	@ (8009c5c <MX_GPIO_Init+0x214>)
 8009c32:	f001 f8a3 	bl	800ad7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Pull SPI2_CSB low to select SPI interface */
  HAL_GPIO_WritePin(SPI2_CSB_GPIO_Port, SPI2_CSB_Pin, GPIO_PIN_RESET);
 8009c36:	2200      	movs	r2, #0
 8009c38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009c3c:	4808      	ldr	r0, [pc, #32]	@ (8009c60 <MX_GPIO_Init+0x218>)
 8009c3e:	f001 fa5d 	bl	800b0fc <HAL_GPIO_WritePin>

  /* Pull SPI1_CSB low to select SPI interface */
    HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8009c42:	2200      	movs	r2, #0
 8009c44:	2110      	movs	r1, #16
 8009c46:	4805      	ldr	r0, [pc, #20]	@ (8009c5c <MX_GPIO_Init+0x214>)
 8009c48:	f001 fa58 	bl	800b0fc <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8009c4c:	bf00      	nop
 8009c4e:	3730      	adds	r7, #48	@ 0x30
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	58024400 	.word	0x58024400
 8009c58:	58021000 	.word	0x58021000
 8009c5c:	58020000 	.word	0x58020000
 8009c60:	58020400 	.word	0x58020400
 8009c64:	58020800 	.word	0x58020800
 8009c68:	58020c00 	.word	0x58020c00

08009c6c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8009c72:	463b      	mov	r3, r7
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	605a      	str	r2, [r3, #4]
 8009c7a:	609a      	str	r2, [r3, #8]
 8009c7c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8009c7e:	f001 f805 	bl	800ac8c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8009c82:	2301      	movs	r3, #1
 8009c84:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8009c8e:	231f      	movs	r3, #31
 8009c90:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8009c92:	2387      	movs	r3, #135	@ 0x87
 8009c94:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8009cae:	463b      	mov	r3, r7
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 f823 	bl	800acfc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8009cb6:	2004      	movs	r0, #4
 8009cb8:	f001 f800 	bl	800acbc <HAL_MPU_Enable>

}
 8009cbc:	bf00      	nop
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009cc8:	b672      	cpsid	i
}
 8009cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009ccc:	bf00      	nop
 8009cce:	e7fd      	b.n	8009ccc <Error_Handler+0x8>

08009cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8009d00 <HAL_MspInit+0x30>)
 8009cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cdc:	4a08      	ldr	r2, [pc, #32]	@ (8009d00 <HAL_MspInit+0x30>)
 8009cde:	f043 0302 	orr.w	r3, r3, #2
 8009ce2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009ce6:	4b06      	ldr	r3, [pc, #24]	@ (8009d00 <HAL_MspInit+0x30>)
 8009ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cec:	f003 0302 	and.w	r3, r3, #2
 8009cf0:	607b      	str	r3, [r7, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	58024400 	.word	0x58024400

08009d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b0bc      	sub	sp, #240	@ 0xf0
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
 8009d14:	605a      	str	r2, [r3, #4]
 8009d16:	609a      	str	r2, [r3, #8]
 8009d18:	60da      	str	r2, [r3, #12]
 8009d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d1c:	f107 0320 	add.w	r3, r7, #32
 8009d20:	22b8      	movs	r2, #184	@ 0xb8
 8009d22:	2100      	movs	r1, #0
 8009d24:	4618      	mov	r0, r3
 8009d26:	f00c fad1 	bl	80162cc <memset>
  if(hi2c->Instance==I2C1)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a74      	ldr	r2, [pc, #464]	@ (8009f00 <HAL_I2C_MspInit+0x1fc>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d147      	bne.n	8009dc4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009d34:	f04f 0208 	mov.w	r2, #8
 8009d38:	f04f 0300 	mov.w	r3, #0
 8009d3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8009d40:	2300      	movs	r3, #0
 8009d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d46:	f107 0320 	add.w	r3, r7, #32
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f002 ff78 	bl	800cc40 <HAL_RCCEx_PeriphCLKConfig>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8009d56:	f7ff ffb5 	bl	8009cc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d60:	4a68      	ldr	r2, [pc, #416]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009d62:	f043 0302 	orr.w	r3, r3, #2
 8009d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009d6a:	4b66      	ldr	r3, [pc, #408]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	61fb      	str	r3, [r7, #28]
 8009d76:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8009d78:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8009d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009d80:	2312      	movs	r3, #18
 8009d82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009d92:	2304      	movs	r3, #4
 8009d94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	485a      	ldr	r0, [pc, #360]	@ (8009f08 <HAL_I2C_MspInit+0x204>)
 8009da0:	f000 ffec 	bl	800ad7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009da4:	4b57      	ldr	r3, [pc, #348]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009daa:	4a56      	ldr	r2, [pc, #344]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009dac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009db0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009db4:	4b53      	ldr	r3, [pc, #332]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009dbe:	61bb      	str	r3, [r7, #24]
 8009dc0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8009dc2:	e098      	b.n	8009ef6 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C2)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a50      	ldr	r2, [pc, #320]	@ (8009f0c <HAL_I2C_MspInit+0x208>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d147      	bne.n	8009e5e <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009dce:	f04f 0208 	mov.w	r2, #8
 8009dd2:	f04f 0300 	mov.w	r3, #0
 8009dd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009de0:	f107 0320 	add.w	r3, r7, #32
 8009de4:	4618      	mov	r0, r3
 8009de6:	f002 ff2b 	bl	800cc40 <HAL_RCCEx_PeriphCLKConfig>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8009df0:	f7ff ff68 	bl	8009cc4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009df4:	4b43      	ldr	r3, [pc, #268]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009dfa:	4a42      	ldr	r2, [pc, #264]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009dfc:	f043 0302 	orr.w	r3, r3, #2
 8009e00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009e04:	4b3f      	ldr	r3, [pc, #252]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	617b      	str	r3, [r7, #20]
 8009e10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009e12:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009e1a:	2312      	movs	r3, #18
 8009e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e20:	2300      	movs	r3, #0
 8009e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e26:	2300      	movs	r3, #0
 8009e28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009e2c:	2304      	movs	r3, #4
 8009e2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e32:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009e36:	4619      	mov	r1, r3
 8009e38:	4833      	ldr	r0, [pc, #204]	@ (8009f08 <HAL_I2C_MspInit+0x204>)
 8009e3a:	f000 ff9f 	bl	800ad7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009e3e:	4b31      	ldr	r3, [pc, #196]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e44:	4a2f      	ldr	r2, [pc, #188]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009e46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009e4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e58:	613b      	str	r3, [r7, #16]
 8009e5a:	693b      	ldr	r3, [r7, #16]
}
 8009e5c:	e04b      	b.n	8009ef6 <HAL_I2C_MspInit+0x1f2>
  else if(hi2c->Instance==I2C4)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a2b      	ldr	r2, [pc, #172]	@ (8009f10 <HAL_I2C_MspInit+0x20c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d146      	bne.n	8009ef6 <HAL_I2C_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8009e68:	f04f 0210 	mov.w	r2, #16
 8009e6c:	f04f 0300 	mov.w	r3, #0
 8009e70:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8009e74:	2300      	movs	r3, #0
 8009e76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e7a:	f107 0320 	add.w	r3, r7, #32
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f002 fede 	bl	800cc40 <HAL_RCCEx_PeriphCLKConfig>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8009e8a:	f7ff ff1b 	bl	8009cc4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e94:	4a1b      	ldr	r2, [pc, #108]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009e96:	f043 0308 	orr.w	r3, r3, #8
 8009e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009e9e:	4b19      	ldr	r3, [pc, #100]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	60fb      	str	r3, [r7, #12]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8009eac:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8009eb0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009eb4:	2312      	movs	r3, #18
 8009eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8009ec6:	2304      	movs	r3, #4
 8009ec8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ecc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4810      	ldr	r0, [pc, #64]	@ (8009f14 <HAL_I2C_MspInit+0x210>)
 8009ed4:	f000 ff52 	bl	800ad7c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8009ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ede:	4a09      	ldr	r2, [pc, #36]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ee4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009ee8:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <HAL_I2C_MspInit+0x200>)
 8009eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ef2:	60bb      	str	r3, [r7, #8]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
}
 8009ef6:	bf00      	nop
 8009ef8:	37f0      	adds	r7, #240	@ 0xf0
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	40005400 	.word	0x40005400
 8009f04:	58024400 	.word	0x58024400
 8009f08:	58020400 	.word	0x58020400
 8009f0c:	40005800 	.word	0x40005800
 8009f10:	58001c00 	.word	0x58001c00
 8009f14:	58020c00 	.word	0x58020c00

08009f18 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b0ba      	sub	sp, #232	@ 0xe8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	605a      	str	r2, [r3, #4]
 8009f2a:	609a      	str	r2, [r3, #8]
 8009f2c:	60da      	str	r2, [r3, #12]
 8009f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f30:	f107 0318 	add.w	r3, r7, #24
 8009f34:	22b8      	movs	r2, #184	@ 0xb8
 8009f36:	2100      	movs	r1, #0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f00c f9c7 	bl	80162cc <memset>
  if(hsd->Instance==SDMMC1)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a38      	ldr	r2, [pc, #224]	@ (800a024 <HAL_SD_MspInit+0x10c>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d169      	bne.n	800a01c <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8009f48:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009f4c:	f04f 0300 	mov.w	r3, #0
 8009f50:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009f58:	f107 0318 	add.w	r3, r7, #24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f002 fe6f 	bl	800cc40 <HAL_RCCEx_PeriphCLKConfig>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8009f68:	f7ff feac 	bl	8009cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8009f6c:	4b2e      	ldr	r3, [pc, #184]	@ (800a028 <HAL_SD_MspInit+0x110>)
 8009f6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009f72:	4a2d      	ldr	r2, [pc, #180]	@ (800a028 <HAL_SD_MspInit+0x110>)
 8009f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f78:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8009f7c:	4b2a      	ldr	r3, [pc, #168]	@ (800a028 <HAL_SD_MspInit+0x110>)
 8009f7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f8a:	4b27      	ldr	r3, [pc, #156]	@ (800a028 <HAL_SD_MspInit+0x110>)
 8009f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f90:	4a25      	ldr	r2, [pc, #148]	@ (800a028 <HAL_SD_MspInit+0x110>)
 8009f92:	f043 0308 	orr.w	r3, r3, #8
 8009f96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009f9a:	4b23      	ldr	r3, [pc, #140]	@ (800a028 <HAL_SD_MspInit+0x110>)
 8009f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fa0:	f003 0308 	and.w	r3, r3, #8
 8009fa4:	613b      	str	r3, [r7, #16]
 8009fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fa8:	4b1f      	ldr	r3, [pc, #124]	@ (800a028 <HAL_SD_MspInit+0x110>)
 8009faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fae:	4a1e      	ldr	r2, [pc, #120]	@ (800a028 <HAL_SD_MspInit+0x110>)
 8009fb0:	f043 0304 	orr.w	r3, r3, #4
 8009fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009fb8:	4b1b      	ldr	r3, [pc, #108]	@ (800a028 <HAL_SD_MspInit+0x110>)
 8009fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fbe:	f003 0304 	and.w	r3, r3, #4
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009fc6:	2304      	movs	r3, #4
 8009fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8009fde:	230c      	movs	r3, #12
 8009fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009fe4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4810      	ldr	r0, [pc, #64]	@ (800a02c <HAL_SD_MspInit+0x114>)
 8009fec:	f000 fec6 	bl	800ad7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8009ff0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8009ff4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a004:	2303      	movs	r3, #3
 800a006:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800a00a:	230c      	movs	r3, #12
 800a00c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a010:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a014:	4619      	mov	r1, r3
 800a016:	4806      	ldr	r0, [pc, #24]	@ (800a030 <HAL_SD_MspInit+0x118>)
 800a018:	f000 feb0 	bl	800ad7c <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800a01c:	bf00      	nop
 800a01e:	37e8      	adds	r7, #232	@ 0xe8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	52007000 	.word	0x52007000
 800a028:	58024400 	.word	0x58024400
 800a02c:	58020c00 	.word	0x58020c00
 800a030:	58020800 	.word	0x58020800

0800a034 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b0be      	sub	sp, #248	@ 0xf8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a03c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	605a      	str	r2, [r3, #4]
 800a046:	609a      	str	r2, [r3, #8]
 800a048:	60da      	str	r2, [r3, #12]
 800a04a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a04c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a050:	22b8      	movs	r2, #184	@ 0xb8
 800a052:	2100      	movs	r1, #0
 800a054:	4618      	mov	r0, r3
 800a056:	f00c f939 	bl	80162cc <memset>
  if(hspi->Instance==SPI1)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a97      	ldr	r2, [pc, #604]	@ (800a2bc <HAL_SPI_MspInit+0x288>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d16a      	bne.n	800a13a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800a064:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a068:	f04f 0300 	mov.w	r3, #0
 800a06c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800a070:	2300      	movs	r3, #0
 800a072:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a07a:	4618      	mov	r0, r3
 800a07c:	f002 fde0 	bl	800cc40 <HAL_RCCEx_PeriphCLKConfig>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800a086:	f7ff fe1d 	bl	8009cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a08a:	4b8d      	ldr	r3, [pc, #564]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a08c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a090:	4a8b      	ldr	r2, [pc, #556]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a092:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a096:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a09a:	4b89      	ldr	r3, [pc, #548]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a09c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0a8:	4b85      	ldr	r3, [pc, #532]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a0aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a0ae:	4a84      	ldr	r2, [pc, #528]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a0b0:	f043 0302 	orr.w	r3, r3, #2
 800a0b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a0b8:	4b81      	ldr	r3, [pc, #516]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a0ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	623b      	str	r3, [r7, #32]
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0c6:	4b7e      	ldr	r3, [pc, #504]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a0c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a0cc:	4a7c      	ldr	r2, [pc, #496]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a0d6:	4b7a      	ldr	r3, [pc, #488]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a0d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB4(NJTRST)     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a0e4:	2310      	movs	r3, #16
 800a0e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a0fc:	2305      	movs	r3, #5
 800a0fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a102:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800a106:	4619      	mov	r1, r3
 800a108:	486e      	ldr	r0, [pc, #440]	@ (800a2c4 <HAL_SPI_MspInit+0x290>)
 800a10a:	f000 fe37 	bl	800ad7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800a10e:	23a0      	movs	r3, #160	@ 0xa0
 800a110:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a114:	2302      	movs	r3, #2
 800a116:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a120:	2300      	movs	r3, #0
 800a122:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a126:	2305      	movs	r3, #5
 800a128:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a12c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800a130:	4619      	mov	r1, r3
 800a132:	4865      	ldr	r0, [pc, #404]	@ (800a2c8 <HAL_SPI_MspInit+0x294>)
 800a134:	f000 fe22 	bl	800ad7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800a138:	e0bb      	b.n	800a2b2 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI2)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a63      	ldr	r2, [pc, #396]	@ (800a2cc <HAL_SPI_MspInit+0x298>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d16b      	bne.n	800a21c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800a144:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a148:	f04f 0300 	mov.w	r3, #0
 800a14c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800a150:	2300      	movs	r3, #0
 800a152:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a156:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a15a:	4618      	mov	r0, r3
 800a15c:	f002 fd70 	bl	800cc40 <HAL_RCCEx_PeriphCLKConfig>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <HAL_SPI_MspInit+0x136>
      Error_Handler();
 800a166:	f7ff fdad 	bl	8009cc4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a16a:	4b55      	ldr	r3, [pc, #340]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a16c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a170:	4a53      	ldr	r2, [pc, #332]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a176:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800a17a:	4b51      	ldr	r3, [pc, #324]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a17c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a180:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a184:	61bb      	str	r3, [r7, #24]
 800a186:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a188:	4b4d      	ldr	r3, [pc, #308]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a18a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a18e:	4a4c      	ldr	r2, [pc, #304]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a190:	f043 0301 	orr.w	r3, r3, #1
 800a194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a198:	4b49      	ldr	r3, [pc, #292]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a19a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1a6:	4b46      	ldr	r3, [pc, #280]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a1a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1ac:	4a44      	ldr	r2, [pc, #272]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a1ae:	f043 0304 	orr.w	r3, r3, #4
 800a1b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a1b6:	4b42      	ldr	r3, [pc, #264]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a1b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	613b      	str	r3, [r7, #16]
 800a1c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a1c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a1de:	2305      	movs	r3, #5
 800a1e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4837      	ldr	r0, [pc, #220]	@ (800a2c8 <HAL_SPI_MspInit+0x294>)
 800a1ec:	f000 fdc6 	bl	800ad7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 800a1f0:	2306      	movs	r3, #6
 800a1f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a202:	2300      	movs	r3, #0
 800a204:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a208:	2305      	movs	r3, #5
 800a20a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a20e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800a212:	4619      	mov	r1, r3
 800a214:	482e      	ldr	r0, [pc, #184]	@ (800a2d0 <HAL_SPI_MspInit+0x29c>)
 800a216:	f000 fdb1 	bl	800ad7c <HAL_GPIO_Init>
}
 800a21a:	e04a      	b.n	800a2b2 <HAL_SPI_MspInit+0x27e>
  else if(hspi->Instance==SPI4)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a2c      	ldr	r2, [pc, #176]	@ (800a2d4 <HAL_SPI_MspInit+0x2a0>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d145      	bne.n	800a2b2 <HAL_SPI_MspInit+0x27e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800a226:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a22a:	f04f 0300 	mov.w	r3, #0
 800a22e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800a232:	2300      	movs	r3, #0
 800a234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a238:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a23c:	4618      	mov	r0, r3
 800a23e:	f002 fcff 	bl	800cc40 <HAL_RCCEx_PeriphCLKConfig>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <HAL_SPI_MspInit+0x218>
      Error_Handler();
 800a248:	f7ff fd3c 	bl	8009cc4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800a24c:	4b1c      	ldr	r3, [pc, #112]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a24e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a252:	4a1b      	ldr	r2, [pc, #108]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a254:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a258:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a25c:	4b18      	ldr	r3, [pc, #96]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a25e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a26a:	4b15      	ldr	r3, [pc, #84]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a26c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a270:	4a13      	ldr	r2, [pc, #76]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a272:	f043 0310 	orr.w	r3, r3, #16
 800a276:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a27a:	4b11      	ldr	r3, [pc, #68]	@ (800a2c0 <HAL_SPI_MspInit+0x28c>)
 800a27c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a280:	f003 0310 	and.w	r3, r3, #16
 800a284:	60bb      	str	r3, [r7, #8]
 800a286:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800a288:	2364      	movs	r3, #100	@ 0x64
 800a28a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a28e:	2302      	movs	r3, #2
 800a290:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a294:	2300      	movs	r3, #0
 800a296:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a29a:	2300      	movs	r3, #0
 800a29c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800a2a0:	2305      	movs	r3, #5
 800a2a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a2a6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	480a      	ldr	r0, [pc, #40]	@ (800a2d8 <HAL_SPI_MspInit+0x2a4>)
 800a2ae:	f000 fd65 	bl	800ad7c <HAL_GPIO_Init>
}
 800a2b2:	bf00      	nop
 800a2b4:	37f8      	adds	r7, #248	@ 0xf8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	40013000 	.word	0x40013000
 800a2c0:	58024400 	.word	0x58024400
 800a2c4:	58020400 	.word	0x58020400
 800a2c8:	58020000 	.word	0x58020000
 800a2cc:	40003800 	.word	0x40003800
 800a2d0:	58020800 	.word	0x58020800
 800a2d4:	40013400 	.word	0x40013400
 800a2d8:	58021000 	.word	0x58021000

0800a2dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b0ba      	sub	sp, #232	@ 0xe8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	605a      	str	r2, [r3, #4]
 800a2ee:	609a      	str	r2, [r3, #8]
 800a2f0:	60da      	str	r2, [r3, #12]
 800a2f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a2f4:	f107 0318 	add.w	r3, r7, #24
 800a2f8:	22b8      	movs	r2, #184	@ 0xb8
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f00b ffe5 	bl	80162cc <memset>
  if(huart->Instance==UART8)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a39      	ldr	r2, [pc, #228]	@ (800a3ec <HAL_UART_MspInit+0x110>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d16a      	bne.n	800a3e2 <HAL_UART_MspInit+0x106>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800a30c:	f04f 0202 	mov.w	r2, #2
 800a310:	f04f 0300 	mov.w	r3, #0
 800a314:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a318:	2300      	movs	r3, #0
 800a31a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a31e:	f107 0318 	add.w	r3, r7, #24
 800a322:	4618      	mov	r0, r3
 800a324:	f002 fc8c 	bl	800cc40 <HAL_RCCEx_PeriphCLKConfig>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800a32e:	f7ff fcc9 	bl	8009cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800a332:	4b2f      	ldr	r3, [pc, #188]	@ (800a3f0 <HAL_UART_MspInit+0x114>)
 800a334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a338:	4a2d      	ldr	r2, [pc, #180]	@ (800a3f0 <HAL_UART_MspInit+0x114>)
 800a33a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a33e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800a342:	4b2b      	ldr	r3, [pc, #172]	@ (800a3f0 <HAL_UART_MspInit+0x114>)
 800a344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a348:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a34c:	617b      	str	r3, [r7, #20]
 800a34e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a350:	4b27      	ldr	r3, [pc, #156]	@ (800a3f0 <HAL_UART_MspInit+0x114>)
 800a352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a356:	4a26      	ldr	r2, [pc, #152]	@ (800a3f0 <HAL_UART_MspInit+0x114>)
 800a358:	f043 0310 	orr.w	r3, r3, #16
 800a35c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a360:	4b23      	ldr	r3, [pc, #140]	@ (800a3f0 <HAL_UART_MspInit+0x114>)
 800a362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a366:	f003 0310 	and.w	r3, r3, #16
 800a36a:	613b      	str	r3, [r7, #16]
 800a36c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a36e:	4b20      	ldr	r3, [pc, #128]	@ (800a3f0 <HAL_UART_MspInit+0x114>)
 800a370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a374:	4a1e      	ldr	r2, [pc, #120]	@ (800a3f0 <HAL_UART_MspInit+0x114>)
 800a376:	f043 0308 	orr.w	r3, r3, #8
 800a37a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a37e:	4b1c      	ldr	r3, [pc, #112]	@ (800a3f0 <HAL_UART_MspInit+0x114>)
 800a380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a384:	f003 0308 	and.w	r3, r3, #8
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    PD15     ------> UART8_RTS
    PD14     ------> UART8_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800a38c:	2303      	movs	r3, #3
 800a38e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a392:	2302      	movs	r3, #2
 800a394:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a398:	2300      	movs	r3, #0
 800a39a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800a3a4:	2308      	movs	r3, #8
 800a3a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a3aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4810      	ldr	r0, [pc, #64]	@ (800a3f4 <HAL_UART_MspInit+0x118>)
 800a3b2:	f000 fce3 	bl	800ad7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 800a3b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800a3ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3be:	2302      	movs	r3, #2
 800a3c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a3d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4806      	ldr	r0, [pc, #24]	@ (800a3f8 <HAL_UART_MspInit+0x11c>)
 800a3de:	f000 fccd 	bl	800ad7c <HAL_GPIO_Init>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 800a3e2:	bf00      	nop
 800a3e4:	37e8      	adds	r7, #232	@ 0xe8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	40007c00 	.word	0x40007c00
 800a3f0:	58024400 	.word	0x58024400
 800a3f4:	58021000 	.word	0x58021000
 800a3f8:	58020c00 	.word	0x58020c00

0800a3fc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b0b8      	sub	sp, #224	@ 0xe0
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a404:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a408:	2200      	movs	r2, #0
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	605a      	str	r2, [r3, #4]
 800a40e:	609a      	str	r2, [r3, #8]
 800a410:	60da      	str	r2, [r3, #12]
 800a412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a414:	f107 0310 	add.w	r3, r7, #16
 800a418:	22b8      	movs	r2, #184	@ 0xb8
 800a41a:	2100      	movs	r1, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f00b ff55 	bl	80162cc <memset>
  if(husart->Instance==USART1)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a27      	ldr	r2, [pc, #156]	@ (800a4c4 <HAL_USART_MspInit+0xc8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d146      	bne.n	800a4ba <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a42c:	f04f 0201 	mov.w	r2, #1
 800a430:	f04f 0300 	mov.w	r3, #0
 800a434:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800a438:	2300      	movs	r3, #0
 800a43a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a43e:	f107 0310 	add.w	r3, r7, #16
 800a442:	4618      	mov	r0, r3
 800a444:	f002 fbfc 	bl	800cc40 <HAL_RCCEx_PeriphCLKConfig>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800a44e:	f7ff fc39 	bl	8009cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a452:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c8 <HAL_USART_MspInit+0xcc>)
 800a454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a458:	4a1b      	ldr	r2, [pc, #108]	@ (800a4c8 <HAL_USART_MspInit+0xcc>)
 800a45a:	f043 0310 	orr.w	r3, r3, #16
 800a45e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a462:	4b19      	ldr	r3, [pc, #100]	@ (800a4c8 <HAL_USART_MspInit+0xcc>)
 800a464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a468:	f003 0310 	and.w	r3, r3, #16
 800a46c:	60fb      	str	r3, [r7, #12]
 800a46e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a470:	4b15      	ldr	r3, [pc, #84]	@ (800a4c8 <HAL_USART_MspInit+0xcc>)
 800a472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a476:	4a14      	ldr	r2, [pc, #80]	@ (800a4c8 <HAL_USART_MspInit+0xcc>)
 800a478:	f043 0301 	orr.w	r3, r3, #1
 800a47c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a480:	4b11      	ldr	r3, [pc, #68]	@ (800a4c8 <HAL_USART_MspInit+0xcc>)
 800a482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	60bb      	str	r3, [r7, #8]
 800a48c:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA11     ------> USART1_NSS
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
 800a48e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800a492:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a496:	2302      	movs	r3, #2
 800a498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a49c:	2300      	movs	r3, #0
 800a49e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a4a8:	2307      	movs	r3, #7
 800a4aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4ae:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4805      	ldr	r0, [pc, #20]	@ (800a4cc <HAL_USART_MspInit+0xd0>)
 800a4b6:	f000 fc61 	bl	800ad7c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800a4ba:	bf00      	nop
 800a4bc:	37e0      	adds	r7, #224	@ 0xe0
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	40011000 	.word	0x40011000
 800a4c8:	58024400 	.word	0x58024400
 800a4cc:	58020000 	.word	0x58020000

0800a4d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <NMI_Handler+0x4>

0800a4d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a4dc:	bf00      	nop
 800a4de:	e7fd      	b.n	800a4dc <HardFault_Handler+0x4>

0800a4e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <MemManage_Handler+0x4>

0800a4e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a4ec:	bf00      	nop
 800a4ee:	e7fd      	b.n	800a4ec <BusFault_Handler+0x4>

0800a4f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a4f4:	bf00      	nop
 800a4f6:	e7fd      	b.n	800a4f4 <UsageFault_Handler+0x4>

0800a4f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a4fc:	bf00      	nop
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a506:	b480      	push	{r7}
 800a508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a50a:	bf00      	nop
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a514:	b480      	push	{r7}
 800a516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a518:	bf00      	nop
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a526:	f000 fa89 	bl	800aa3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a52a:	bf00      	nop
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a52e:	b480      	push	{r7}
 800a530:	af00      	add	r7, sp, #0
  return 1;
 800a532:	2301      	movs	r3, #1
}
 800a534:	4618      	mov	r0, r3
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <_kill>:

int _kill(int pid, int sig)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a548:	f00b ff12 	bl	8016370 <__errno>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2216      	movs	r2, #22
 800a550:	601a      	str	r2, [r3, #0]
  return -1;
 800a552:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <_exit>:

void _exit (int status)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a566:	f04f 31ff 	mov.w	r1, #4294967295
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7ff ffe7 	bl	800a53e <_kill>
  while (1) {}    /* Make sure we hang here */
 800a570:	bf00      	nop
 800a572:	e7fd      	b.n	800a570 <_exit+0x12>

0800a574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a580:	2300      	movs	r3, #0
 800a582:	617b      	str	r3, [r7, #20]
 800a584:	e00a      	b.n	800a59c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a586:	f3af 8000 	nop.w
 800a58a:	4601      	mov	r1, r0
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	1c5a      	adds	r2, r3, #1
 800a590:	60ba      	str	r2, [r7, #8]
 800a592:	b2ca      	uxtb	r2, r1
 800a594:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	3301      	adds	r3, #1
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	dbf0      	blt.n	800a586 <_read+0x12>
  }

  return len;
 800a5a4:	687b      	ldr	r3, [r7, #4]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <_close>:
  }
  return len;
}

int _close(int file)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a5b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a5d6:	605a      	str	r2, [r3, #4]
  return 0;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <_isatty>:

int _isatty(int file)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b083      	sub	sp, #12
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a5ee:	2301      	movs	r3, #1
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
	...

0800a618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a620:	4a14      	ldr	r2, [pc, #80]	@ (800a674 <_sbrk+0x5c>)
 800a622:	4b15      	ldr	r3, [pc, #84]	@ (800a678 <_sbrk+0x60>)
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a62c:	4b13      	ldr	r3, [pc, #76]	@ (800a67c <_sbrk+0x64>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a634:	4b11      	ldr	r3, [pc, #68]	@ (800a67c <_sbrk+0x64>)
 800a636:	4a12      	ldr	r2, [pc, #72]	@ (800a680 <_sbrk+0x68>)
 800a638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a63a:	4b10      	ldr	r3, [pc, #64]	@ (800a67c <_sbrk+0x64>)
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4413      	add	r3, r2
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	429a      	cmp	r2, r3
 800a646:	d207      	bcs.n	800a658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a648:	f00b fe92 	bl	8016370 <__errno>
 800a64c:	4603      	mov	r3, r0
 800a64e:	220c      	movs	r2, #12
 800a650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a652:	f04f 33ff 	mov.w	r3, #4294967295
 800a656:	e009      	b.n	800a66c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a658:	4b08      	ldr	r3, [pc, #32]	@ (800a67c <_sbrk+0x64>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a65e:	4b07      	ldr	r3, [pc, #28]	@ (800a67c <_sbrk+0x64>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4413      	add	r3, r2
 800a666:	4a05      	ldr	r2, [pc, #20]	@ (800a67c <_sbrk+0x64>)
 800a668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a66a:	68fb      	ldr	r3, [r7, #12]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	24050000 	.word	0x24050000
 800a678:	00000400 	.word	0x00000400
 800a67c:	24001888 	.word	0x24001888
 800a680:	24001ae0 	.word	0x24001ae0

0800a684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a684:	b480      	push	{r7}
 800a686:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a688:	4b32      	ldr	r3, [pc, #200]	@ (800a754 <SystemInit+0xd0>)
 800a68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a68e:	4a31      	ldr	r2, [pc, #196]	@ (800a754 <SystemInit+0xd0>)
 800a690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a698:	4b2f      	ldr	r3, [pc, #188]	@ (800a758 <SystemInit+0xd4>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 030f 	and.w	r3, r3, #15
 800a6a0:	2b06      	cmp	r3, #6
 800a6a2:	d807      	bhi.n	800a6b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a6a4:	4b2c      	ldr	r3, [pc, #176]	@ (800a758 <SystemInit+0xd4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f023 030f 	bic.w	r3, r3, #15
 800a6ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a758 <SystemInit+0xd4>)
 800a6ae:	f043 0307 	orr.w	r3, r3, #7
 800a6b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a6b4:	4b29      	ldr	r3, [pc, #164]	@ (800a75c <SystemInit+0xd8>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a28      	ldr	r2, [pc, #160]	@ (800a75c <SystemInit+0xd8>)
 800a6ba:	f043 0301 	orr.w	r3, r3, #1
 800a6be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a6c0:	4b26      	ldr	r3, [pc, #152]	@ (800a75c <SystemInit+0xd8>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a6c6:	4b25      	ldr	r3, [pc, #148]	@ (800a75c <SystemInit+0xd8>)
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	4924      	ldr	r1, [pc, #144]	@ (800a75c <SystemInit+0xd8>)
 800a6cc:	4b24      	ldr	r3, [pc, #144]	@ (800a760 <SystemInit+0xdc>)
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a6d2:	4b21      	ldr	r3, [pc, #132]	@ (800a758 <SystemInit+0xd4>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0308 	and.w	r3, r3, #8
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d007      	beq.n	800a6ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a6de:	4b1e      	ldr	r3, [pc, #120]	@ (800a758 <SystemInit+0xd4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f023 030f 	bic.w	r3, r3, #15
 800a6e6:	4a1c      	ldr	r2, [pc, #112]	@ (800a758 <SystemInit+0xd4>)
 800a6e8:	f043 0307 	orr.w	r3, r3, #7
 800a6ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a6ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a75c <SystemInit+0xd8>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a6f4:	4b19      	ldr	r3, [pc, #100]	@ (800a75c <SystemInit+0xd8>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a6fa:	4b18      	ldr	r3, [pc, #96]	@ (800a75c <SystemInit+0xd8>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a700:	4b16      	ldr	r3, [pc, #88]	@ (800a75c <SystemInit+0xd8>)
 800a702:	4a18      	ldr	r2, [pc, #96]	@ (800a764 <SystemInit+0xe0>)
 800a704:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a706:	4b15      	ldr	r3, [pc, #84]	@ (800a75c <SystemInit+0xd8>)
 800a708:	4a17      	ldr	r2, [pc, #92]	@ (800a768 <SystemInit+0xe4>)
 800a70a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a70c:	4b13      	ldr	r3, [pc, #76]	@ (800a75c <SystemInit+0xd8>)
 800a70e:	4a17      	ldr	r2, [pc, #92]	@ (800a76c <SystemInit+0xe8>)
 800a710:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a712:	4b12      	ldr	r3, [pc, #72]	@ (800a75c <SystemInit+0xd8>)
 800a714:	2200      	movs	r2, #0
 800a716:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a718:	4b10      	ldr	r3, [pc, #64]	@ (800a75c <SystemInit+0xd8>)
 800a71a:	4a14      	ldr	r2, [pc, #80]	@ (800a76c <SystemInit+0xe8>)
 800a71c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a71e:	4b0f      	ldr	r3, [pc, #60]	@ (800a75c <SystemInit+0xd8>)
 800a720:	2200      	movs	r2, #0
 800a722:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a724:	4b0d      	ldr	r3, [pc, #52]	@ (800a75c <SystemInit+0xd8>)
 800a726:	4a11      	ldr	r2, [pc, #68]	@ (800a76c <SystemInit+0xe8>)
 800a728:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a72a:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <SystemInit+0xd8>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a730:	4b0a      	ldr	r3, [pc, #40]	@ (800a75c <SystemInit+0xd8>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a09      	ldr	r2, [pc, #36]	@ (800a75c <SystemInit+0xd8>)
 800a736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a73a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a73c:	4b07      	ldr	r3, [pc, #28]	@ (800a75c <SystemInit+0xd8>)
 800a73e:	2200      	movs	r2, #0
 800a740:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a742:	4b0b      	ldr	r3, [pc, #44]	@ (800a770 <SystemInit+0xec>)
 800a744:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800a748:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800a74a:	bf00      	nop
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	e000ed00 	.word	0xe000ed00
 800a758:	52002000 	.word	0x52002000
 800a75c:	58024400 	.word	0x58024400
 800a760:	eaf6ed7f 	.word	0xeaf6ed7f
 800a764:	02020200 	.word	0x02020200
 800a768:	01ff0000 	.word	0x01ff0000
 800a76c:	01010280 	.word	0x01010280
 800a770:	52004000 	.word	0x52004000

0800a774 <SensorManager_Init>:
	"BNO055",
	"BME680",
	"MS5607",
};

telemetry_init_status SensorManager_Init(void) {
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
	printf("Sensors Initialization routine started. \n");
 800a77a:	4821      	ldr	r0, [pc, #132]	@ (800a800 <SensorManager_Init+0x8c>)
 800a77c:	f00b fca6 	bl	80160cc <puts>

    size_t num_sensors = sizeof(init_functions) / sizeof(init_functions[0]);
 800a780:	2304      	movs	r3, #4
 800a782:	607b      	str	r3, [r7, #4]
    bool all_success = true;
 800a784:	2301      	movs	r3, #1
 800a786:	73fb      	strb	r3, [r7, #15]
    bool any_success = false;
 800a788:	2300      	movs	r3, #0
 800a78a:	73bb      	strb	r3, [r7, #14]

    for (size_t i = 0; i < num_sensors; ++i) {
 800a78c:	2300      	movs	r3, #0
 800a78e:	60bb      	str	r3, [r7, #8]
 800a790:	e01a      	b.n	800a7c8 <SensorManager_Init+0x54>
        int8_t status = init_functions[i]();
 800a792:	4a1c      	ldr	r2, [pc, #112]	@ (800a804 <SensorManager_Init+0x90>)
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a79a:	4798      	blx	r3
 800a79c:	4603      	mov	r3, r0
 800a79e:	70fb      	strb	r3, [r7, #3]
        if (status != 0) {
 800a7a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00a      	beq.n	800a7be <SensorManager_Init+0x4a>
            printf("%s initialization failed.\n", sensor_names[i]);
 800a7a8:	4a17      	ldr	r2, [pc, #92]	@ (800a808 <SensorManager_Init+0x94>)
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4816      	ldr	r0, [pc, #88]	@ (800a80c <SensorManager_Init+0x98>)
 800a7b4:	f00b fc22 	bl	8015ffc <iprintf>
            all_success = false;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
 800a7bc:	e001      	b.n	800a7c2 <SensorManager_Init+0x4e>
        } else {
            any_success = true;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	73bb      	strb	r3, [r7, #14]
    for (size_t i = 0; i < num_sensors; ++i) {
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	60bb      	str	r3, [r7, #8]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d3e0      	bcc.n	800a792 <SensorManager_Init+0x1e>
        }
    }

    if (all_success) {
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <SensorManager_Init+0x6c>
        printf("All sensors initialized successfully.\n");
 800a7d6:	480e      	ldr	r0, [pc, #56]	@ (800a810 <SensorManager_Init+0x9c>)
 800a7d8:	f00b fc78 	bl	80160cc <puts>
        return TELEMETRY_INIT_SUCCESS;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e00b      	b.n	800a7f8 <SensorManager_Init+0x84>
    } else if (any_success) {
 800a7e0:	7bbb      	ldrb	r3, [r7, #14]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d004      	beq.n	800a7f0 <SensorManager_Init+0x7c>
        printf("Partial initialization success.\n");
 800a7e6:	480b      	ldr	r0, [pc, #44]	@ (800a814 <SensorManager_Init+0xa0>)
 800a7e8:	f00b fc70 	bl	80160cc <puts>
        return TELEMETRY_INIT_PARTIAL_SUCCESS;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e003      	b.n	800a7f8 <SensorManager_Init+0x84>
    } else {
        printf("All sensors initialization failed.\n");
 800a7f0:	4809      	ldr	r0, [pc, #36]	@ (800a818 <SensorManager_Init+0xa4>)
 800a7f2:	f00b fc6b 	bl	80160cc <puts>
        return TELEMETRY_INIT_FAILURE;
 800a7f6:	2302      	movs	r3, #2
    }
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	08019dc4 	.word	0x08019dc4
 800a804:	24000160 	.word	0x24000160
 800a808:	24000170 	.word	0x24000170
 800a80c:	08019df0 	.word	0x08019df0
 800a810:	08019e0c 	.word	0x08019e0c
 800a814:	08019e34 	.word	0x08019e34
 800a818:	08019e54 	.word	0x08019e54

0800a81c <SensorManager_UpdateData>:

void SensorManager_UpdateData(TelemetryData *data) {
 800a81c:	b5b0      	push	{r4, r5, r7, lr}
 800a81e:	b0a0      	sub	sp, #128	@ 0x80
 800a820:	af00      	add	r7, sp, #0
 800a822:	67f8      	str	r0, [r7, #124]	@ 0x7c
    // Update data from each sensor
	telemetry.bmi323_data = bmi323_data_poll();
 800a824:	4c1d      	ldr	r4, [pc, #116]	@ (800a89c <SensorManager_UpdateData+0x80>)
 800a826:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fc fe28 	bl	8007480 <bmi323_data_poll>
 800a830:	3428      	adds	r4, #40	@ 0x28
 800a832:	f107 0560 	add.w	r5, r7, #96	@ 0x60
 800a836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a83a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a83e:	e884 0003 	stmia.w	r4, {r0, r1}
	telemetry.bno055_data = bno_read_fusion_data();
 800a842:	4c16      	ldr	r4, [pc, #88]	@ (800a89c <SensorManager_UpdateData+0x80>)
 800a844:	463b      	mov	r3, r7
 800a846:	4618      	mov	r0, r3
 800a848:	f7fd ff78 	bl	800873c <bno_read_fusion_data>
 800a84c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800a850:	4639      	mov	r1, r7
 800a852:	2260      	movs	r2, #96	@ 0x60
 800a854:	4618      	mov	r0, r3
 800a856:	f00b fdb8 	bl	80163ca <memcpy>
	telemetry.bme680_data = bme680_data_poll();
 800a85a:	4c10      	ldr	r4, [pc, #64]	@ (800a89c <SensorManager_UpdateData+0x80>)
 800a85c:	f7f6 fa4e 	bl	8000cfc <bme680_data_poll>
 800a860:	eeb0 6a40 	vmov.f32	s12, s0
 800a864:	eef0 6a60 	vmov.f32	s13, s1
 800a868:	eeb0 7a41 	vmov.f32	s14, s2
 800a86c:	eef0 7a61 	vmov.f32	s15, s3
 800a870:	ed84 6a06 	vstr	s12, [r4, #24]
 800a874:	edc4 6a07 	vstr	s13, [r4, #28]
 800a878:	ed84 7a08 	vstr	s14, [r4, #32]
 800a87c:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
    telemetry.ms5607_data = MS5607_ReadData();
 800a880:	4c06      	ldr	r4, [pc, #24]	@ (800a89c <SensorManager_UpdateData+0x80>)
 800a882:	463b      	mov	r3, r7
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe fd31 	bl	80092ec <MS5607_ReadData>
 800a88a:	34d8      	adds	r4, #216	@ 0xd8
 800a88c:	463b      	mov	r3, r7
 800a88e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//    ASM330LHH_ReadData(&data->asm330lhh_data);
//    GPS_ReadData(&data->gps_data);
//    LIS2MDLTR_ReadData(&data->lis2mdltr_data);

}
 800a894:	bf00      	nop
 800a896:	3780      	adds	r7, #128	@ 0x80
 800a898:	46bd      	mov	sp, r7
 800a89a:	bdb0      	pop	{r4, r5, r7, pc}
 800a89c:	24001890 	.word	0x24001890

0800a8a0 <TestTelemetry>:
//			;
//		}
//	}
//}

void TestTelemetry(){
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 20 ; i++){
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	607b      	str	r3, [r7, #4]
 800a8aa:	e017      	b.n	800a8dc <TestTelemetry+0x3c>

	// Sensor Data Read
	SensorManager_UpdateData(&telemetry);
 800a8ac:	480f      	ldr	r0, [pc, #60]	@ (800a8ec <TestTelemetry+0x4c>)
 800a8ae:	f7ff ffb5 	bl	800a81c <SensorManager_UpdateData>

	// Sensor Data Print
	bmi323_print_sensor_data(&telemetry.bmi323_data);
 800a8b2:	480f      	ldr	r0, [pc, #60]	@ (800a8f0 <TestTelemetry+0x50>)
 800a8b4:	f7fc fe52 	bl	800755c <bmi323_print_sensor_data>
	bno055_print_fusion_data(&telemetry.bno055_data);
 800a8b8:	480e      	ldr	r0, [pc, #56]	@ (800a8f4 <TestTelemetry+0x54>)
 800a8ba:	f7fe f895 	bl	80089e8 <bno055_print_fusion_data>
	ms5607_print_barometer_data(&telemetry.ms5607_data);
 800a8be:	480e      	ldr	r0, [pc, #56]	@ (800a8f8 <TestTelemetry+0x58>)
 800a8c0:	f7fe fd42 	bl	8009348 <ms5607_print_barometer_data>
	bme680_print_barometer_data(&telemetry.bme680_data);
 800a8c4:	480d      	ldr	r0, [pc, #52]	@ (800a8fc <TestTelemetry+0x5c>)
 800a8c6:	f7f6 fa89 	bl	8000ddc <bme680_print_barometer_data>

	printf("// --------------------------------------------- // \n");
 800a8ca:	480d      	ldr	r0, [pc, #52]	@ (800a900 <TestTelemetry+0x60>)
 800a8cc:	f00b fbfe 	bl	80160cc <puts>

    HAL_Delay(150);
 800a8d0:	2096      	movs	r0, #150	@ 0x96
 800a8d2:	f000 f8d3 	bl	800aa7c <HAL_Delay>
	for(int i = 0; i < 20 ; i++){
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	607b      	str	r3, [r7, #4]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b13      	cmp	r3, #19
 800a8e0:	dde4      	ble.n	800a8ac <TestTelemetry+0xc>
    	}
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	24001890 	.word	0x24001890
 800a8f0:	240018b8 	.word	0x240018b8
 800a8f4:	240018d0 	.word	0x240018d0
 800a8f8:	24001968 	.word	0x24001968
 800a8fc:	240018a8 	.word	0x240018a8
 800a900:	08019e78 	.word	0x08019e78

0800a904 <Reset_Handler>:
 800a904:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a93c <LoopFillZerobss+0xe>
 800a908:	f7ff febc 	bl	800a684 <SystemInit>
 800a90c:	480c      	ldr	r0, [pc, #48]	@ (800a940 <LoopFillZerobss+0x12>)
 800a90e:	490d      	ldr	r1, [pc, #52]	@ (800a944 <LoopFillZerobss+0x16>)
 800a910:	4a0d      	ldr	r2, [pc, #52]	@ (800a948 <LoopFillZerobss+0x1a>)
 800a912:	2300      	movs	r3, #0
 800a914:	e002      	b.n	800a91c <LoopCopyDataInit>

0800a916 <CopyDataInit>:
 800a916:	58d4      	ldr	r4, [r2, r3]
 800a918:	50c4      	str	r4, [r0, r3]
 800a91a:	3304      	adds	r3, #4

0800a91c <LoopCopyDataInit>:
 800a91c:	18c4      	adds	r4, r0, r3
 800a91e:	428c      	cmp	r4, r1
 800a920:	d3f9      	bcc.n	800a916 <CopyDataInit>
 800a922:	4a0a      	ldr	r2, [pc, #40]	@ (800a94c <LoopFillZerobss+0x1e>)
 800a924:	4c0a      	ldr	r4, [pc, #40]	@ (800a950 <LoopFillZerobss+0x22>)
 800a926:	2300      	movs	r3, #0
 800a928:	e001      	b.n	800a92e <LoopFillZerobss>

0800a92a <FillZerobss>:
 800a92a:	6013      	str	r3, [r2, #0]
 800a92c:	3204      	adds	r2, #4

0800a92e <LoopFillZerobss>:
 800a92e:	42a2      	cmp	r2, r4
 800a930:	d3fb      	bcc.n	800a92a <FillZerobss>
 800a932:	f00b fd23 	bl	801637c <__libc_init_array>
 800a936:	f7fe fd68 	bl	800940a <main>
 800a93a:	4770      	bx	lr
 800a93c:	24050000 	.word	0x24050000
 800a940:	24000000 	.word	0x24000000
 800a944:	24000350 	.word	0x24000350
 800a948:	0801a348 	.word	0x0801a348
 800a94c:	24000350 	.word	0x24000350
 800a950:	24001adc 	.word	0x24001adc

0800a954 <ADC3_IRQHandler>:
 800a954:	e7fe      	b.n	800a954 <ADC3_IRQHandler>
	...

0800a958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a95e:	2003      	movs	r0, #3
 800a960:	f000 f962 	bl	800ac28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a964:	f001 ff96 	bl	800c894 <HAL_RCC_GetSysClockFreq>
 800a968:	4602      	mov	r2, r0
 800a96a:	4b15      	ldr	r3, [pc, #84]	@ (800a9c0 <HAL_Init+0x68>)
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	0a1b      	lsrs	r3, r3, #8
 800a970:	f003 030f 	and.w	r3, r3, #15
 800a974:	4913      	ldr	r1, [pc, #76]	@ (800a9c4 <HAL_Init+0x6c>)
 800a976:	5ccb      	ldrb	r3, [r1, r3]
 800a978:	f003 031f 	and.w	r3, r3, #31
 800a97c:	fa22 f303 	lsr.w	r3, r2, r3
 800a980:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a982:	4b0f      	ldr	r3, [pc, #60]	@ (800a9c0 <HAL_Init+0x68>)
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	f003 030f 	and.w	r3, r3, #15
 800a98a:	4a0e      	ldr	r2, [pc, #56]	@ (800a9c4 <HAL_Init+0x6c>)
 800a98c:	5cd3      	ldrb	r3, [r2, r3]
 800a98e:	f003 031f 	and.w	r3, r3, #31
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	fa22 f303 	lsr.w	r3, r2, r3
 800a998:	4a0b      	ldr	r2, [pc, #44]	@ (800a9c8 <HAL_Init+0x70>)
 800a99a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a99c:	4a0b      	ldr	r2, [pc, #44]	@ (800a9cc <HAL_Init+0x74>)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	f000 f814 	bl	800a9d0 <HAL_InitTick>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e002      	b.n	800a9b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a9b2:	f7ff f98d 	bl	8009cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	08019eb0 	.word	0x08019eb0
 800a9c8:	2400015c 	.word	0x2400015c
 800a9cc:	24000158 	.word	0x24000158

0800a9d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a9d8:	4b15      	ldr	r3, [pc, #84]	@ (800aa30 <HAL_InitTick+0x60>)
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e021      	b.n	800aa28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a9e4:	4b13      	ldr	r3, [pc, #76]	@ (800aa34 <HAL_InitTick+0x64>)
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	4b11      	ldr	r3, [pc, #68]	@ (800aa30 <HAL_InitTick+0x60>)
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a9f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 f939 	bl	800ac72 <HAL_SYSTICK_Config>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e00e      	b.n	800aa28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b0f      	cmp	r3, #15
 800aa0e:	d80a      	bhi.n	800aa26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aa10:	2200      	movs	r2, #0
 800aa12:	6879      	ldr	r1, [r7, #4]
 800aa14:	f04f 30ff 	mov.w	r0, #4294967295
 800aa18:	f000 f911 	bl	800ac3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800aa1c:	4a06      	ldr	r2, [pc, #24]	@ (800aa38 <HAL_InitTick+0x68>)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	e000      	b.n	800aa28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	24000184 	.word	0x24000184
 800aa34:	24000158 	.word	0x24000158
 800aa38:	24000180 	.word	0x24000180

0800aa3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800aa40:	4b06      	ldr	r3, [pc, #24]	@ (800aa5c <HAL_IncTick+0x20>)
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	461a      	mov	r2, r3
 800aa46:	4b06      	ldr	r3, [pc, #24]	@ (800aa60 <HAL_IncTick+0x24>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	4a04      	ldr	r2, [pc, #16]	@ (800aa60 <HAL_IncTick+0x24>)
 800aa4e:	6013      	str	r3, [r2, #0]
}
 800aa50:	bf00      	nop
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	24000184 	.word	0x24000184
 800aa60:	24001978 	.word	0x24001978

0800aa64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa64:	b480      	push	{r7}
 800aa66:	af00      	add	r7, sp, #0
  return uwTick;
 800aa68:	4b03      	ldr	r3, [pc, #12]	@ (800aa78 <HAL_GetTick+0x14>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	24001978 	.word	0x24001978

0800aa7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aa84:	f7ff ffee 	bl	800aa64 <HAL_GetTick>
 800aa88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa94:	d005      	beq.n	800aaa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aa96:	4b0a      	ldr	r3, [pc, #40]	@ (800aac0 <HAL_Delay+0x44>)
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aaa2:	bf00      	nop
 800aaa4:	f7ff ffde 	bl	800aa64 <HAL_GetTick>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d8f7      	bhi.n	800aaa4 <HAL_Delay+0x28>
  {
  }
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	24000184 	.word	0x24000184

0800aac4 <__NVIC_SetPriorityGrouping>:
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aad4:	4b0b      	ldr	r3, [pc, #44]	@ (800ab04 <__NVIC_SetPriorityGrouping+0x40>)
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800aae0:	4013      	ands	r3, r2
 800aae2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800aaec:	4b06      	ldr	r3, [pc, #24]	@ (800ab08 <__NVIC_SetPriorityGrouping+0x44>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aaf2:	4a04      	ldr	r2, [pc, #16]	@ (800ab04 <__NVIC_SetPriorityGrouping+0x40>)
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	60d3      	str	r3, [r2, #12]
}
 800aaf8:	bf00      	nop
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	e000ed00 	.word	0xe000ed00
 800ab08:	05fa0000 	.word	0x05fa0000

0800ab0c <__NVIC_GetPriorityGrouping>:
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab10:	4b04      	ldr	r3, [pc, #16]	@ (800ab24 <__NVIC_GetPriorityGrouping+0x18>)
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	0a1b      	lsrs	r3, r3, #8
 800ab16:	f003 0307 	and.w	r3, r3, #7
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	e000ed00 	.word	0xe000ed00

0800ab28 <__NVIC_SetPriority>:
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	4603      	mov	r3, r0
 800ab30:	6039      	str	r1, [r7, #0]
 800ab32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ab34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	db0a      	blt.n	800ab52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	490c      	ldr	r1, [pc, #48]	@ (800ab74 <__NVIC_SetPriority+0x4c>)
 800ab42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab46:	0112      	lsls	r2, r2, #4
 800ab48:	b2d2      	uxtb	r2, r2
 800ab4a:	440b      	add	r3, r1
 800ab4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ab50:	e00a      	b.n	800ab68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	4908      	ldr	r1, [pc, #32]	@ (800ab78 <__NVIC_SetPriority+0x50>)
 800ab58:	88fb      	ldrh	r3, [r7, #6]
 800ab5a:	f003 030f 	and.w	r3, r3, #15
 800ab5e:	3b04      	subs	r3, #4
 800ab60:	0112      	lsls	r2, r2, #4
 800ab62:	b2d2      	uxtb	r2, r2
 800ab64:	440b      	add	r3, r1
 800ab66:	761a      	strb	r2, [r3, #24]
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	e000e100 	.word	0xe000e100
 800ab78:	e000ed00 	.word	0xe000ed00

0800ab7c <NVIC_EncodePriority>:
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b089      	sub	sp, #36	@ 0x24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f003 0307 	and.w	r3, r3, #7
 800ab8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	f1c3 0307 	rsb	r3, r3, #7
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	bf28      	it	cs
 800ab9a:	2304      	movcs	r3, #4
 800ab9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	3304      	adds	r3, #4
 800aba2:	2b06      	cmp	r3, #6
 800aba4:	d902      	bls.n	800abac <NVIC_EncodePriority+0x30>
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	3b03      	subs	r3, #3
 800abaa:	e000      	b.n	800abae <NVIC_EncodePriority+0x32>
 800abac:	2300      	movs	r3, #0
 800abae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800abb0:	f04f 32ff 	mov.w	r2, #4294967295
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	fa02 f303 	lsl.w	r3, r2, r3
 800abba:	43da      	mvns	r2, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	401a      	ands	r2, r3
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800abc4:	f04f 31ff 	mov.w	r1, #4294967295
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	fa01 f303 	lsl.w	r3, r1, r3
 800abce:	43d9      	mvns	r1, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800abd4:	4313      	orrs	r3, r2
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3724      	adds	r7, #36	@ 0x24
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
	...

0800abe4 <SysTick_Config>:
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3b01      	subs	r3, #1
 800abf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abf4:	d301      	bcc.n	800abfa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800abf6:	2301      	movs	r3, #1
 800abf8:	e00f      	b.n	800ac1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800abfa:	4a0a      	ldr	r2, [pc, #40]	@ (800ac24 <SysTick_Config+0x40>)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	3b01      	subs	r3, #1
 800ac00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ac02:	210f      	movs	r1, #15
 800ac04:	f04f 30ff 	mov.w	r0, #4294967295
 800ac08:	f7ff ff8e 	bl	800ab28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ac0c:	4b05      	ldr	r3, [pc, #20]	@ (800ac24 <SysTick_Config+0x40>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ac12:	4b04      	ldr	r3, [pc, #16]	@ (800ac24 <SysTick_Config+0x40>)
 800ac14:	2207      	movs	r2, #7
 800ac16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	e000e010 	.word	0xe000e010

0800ac28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff ff47 	bl	800aac4 <__NVIC_SetPriorityGrouping>
}
 800ac36:	bf00      	nop
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b086      	sub	sp, #24
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	4603      	mov	r3, r0
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	607a      	str	r2, [r7, #4]
 800ac4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ac4c:	f7ff ff5e 	bl	800ab0c <__NVIC_GetPriorityGrouping>
 800ac50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	68b9      	ldr	r1, [r7, #8]
 800ac56:	6978      	ldr	r0, [r7, #20]
 800ac58:	f7ff ff90 	bl	800ab7c <NVIC_EncodePriority>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ac62:	4611      	mov	r1, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff ff5f 	bl	800ab28 <__NVIC_SetPriority>
}
 800ac6a:	bf00      	nop
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff ffb2 	bl	800abe4 <SysTick_Config>
 800ac80:	4603      	mov	r3, r0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800ac90:	f3bf 8f5f 	dmb	sy
}
 800ac94:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800ac96:	4b07      	ldr	r3, [pc, #28]	@ (800acb4 <HAL_MPU_Disable+0x28>)
 800ac98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac9a:	4a06      	ldr	r2, [pc, #24]	@ (800acb4 <HAL_MPU_Disable+0x28>)
 800ac9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aca0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800aca2:	4b05      	ldr	r3, [pc, #20]	@ (800acb8 <HAL_MPU_Disable+0x2c>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	605a      	str	r2, [r3, #4]
}
 800aca8:	bf00      	nop
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	e000ed00 	.word	0xe000ed00
 800acb8:	e000ed90 	.word	0xe000ed90

0800acbc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800acc4:	4a0b      	ldr	r2, [pc, #44]	@ (800acf4 <HAL_MPU_Enable+0x38>)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f043 0301 	orr.w	r3, r3, #1
 800accc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800acce:	4b0a      	ldr	r3, [pc, #40]	@ (800acf8 <HAL_MPU_Enable+0x3c>)
 800acd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd2:	4a09      	ldr	r2, [pc, #36]	@ (800acf8 <HAL_MPU_Enable+0x3c>)
 800acd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acd8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800acda:	f3bf 8f4f 	dsb	sy
}
 800acde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ace0:	f3bf 8f6f 	isb	sy
}
 800ace4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800ace6:	bf00      	nop
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	e000ed90 	.word	0xe000ed90
 800acf8:	e000ed00 	.word	0xe000ed00

0800acfc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	785a      	ldrb	r2, [r3, #1]
 800ad08:	4b1b      	ldr	r3, [pc, #108]	@ (800ad78 <HAL_MPU_ConfigRegion+0x7c>)
 800ad0a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800ad0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ad78 <HAL_MPU_ConfigRegion+0x7c>)
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	4a19      	ldr	r2, [pc, #100]	@ (800ad78 <HAL_MPU_ConfigRegion+0x7c>)
 800ad12:	f023 0301 	bic.w	r3, r3, #1
 800ad16:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800ad18:	4a17      	ldr	r2, [pc, #92]	@ (800ad78 <HAL_MPU_ConfigRegion+0x7c>)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7b1b      	ldrb	r3, [r3, #12]
 800ad24:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	7adb      	ldrb	r3, [r3, #11]
 800ad2a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ad2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	7a9b      	ldrb	r3, [r3, #10]
 800ad32:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ad34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7b5b      	ldrb	r3, [r3, #13]
 800ad3a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ad3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	7b9b      	ldrb	r3, [r3, #14]
 800ad42:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ad44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	7bdb      	ldrb	r3, [r3, #15]
 800ad4a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ad4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7a5b      	ldrb	r3, [r3, #9]
 800ad52:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ad54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	7a1b      	ldrb	r3, [r3, #8]
 800ad5a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ad5c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	7812      	ldrb	r2, [r2, #0]
 800ad62:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ad64:	4a04      	ldr	r2, [pc, #16]	@ (800ad78 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ad66:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ad68:	6113      	str	r3, [r2, #16]
}
 800ad6a:	bf00      	nop
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	e000ed90 	.word	0xe000ed90

0800ad7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b089      	sub	sp, #36	@ 0x24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ad8a:	4b86      	ldr	r3, [pc, #536]	@ (800afa4 <HAL_GPIO_Init+0x228>)
 800ad8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ad8e:	e18c      	b.n	800b0aa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	2101      	movs	r1, #1
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	fa01 f303 	lsl.w	r3, r1, r3
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 817e 	beq.w	800b0a4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f003 0303 	and.w	r3, r3, #3
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d005      	beq.n	800adc0 <HAL_GPIO_Init+0x44>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	f003 0303 	and.w	r3, r3, #3
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d130      	bne.n	800ae22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	2203      	movs	r2, #3
 800adcc:	fa02 f303 	lsl.w	r3, r2, r3
 800add0:	43db      	mvns	r3, r3
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	4013      	ands	r3, r2
 800add6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	fa02 f303 	lsl.w	r3, r2, r3
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	69ba      	ldr	r2, [r7, #24]
 800adee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800adf6:	2201      	movs	r2, #1
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	fa02 f303 	lsl.w	r3, r2, r3
 800adfe:	43db      	mvns	r3, r3
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	4013      	ands	r3, r2
 800ae04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	091b      	lsrs	r3, r3, #4
 800ae0c:	f003 0201 	and.w	r2, r3, #1
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	fa02 f303 	lsl.w	r3, r2, r3
 800ae16:	69ba      	ldr	r2, [r7, #24]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	69ba      	ldr	r2, [r7, #24]
 800ae20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f003 0303 	and.w	r3, r3, #3
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d017      	beq.n	800ae5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	005b      	lsls	r3, r3, #1
 800ae38:	2203      	movs	r2, #3
 800ae3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae3e:	43db      	mvns	r3, r3
 800ae40:	69ba      	ldr	r2, [r7, #24]
 800ae42:	4013      	ands	r3, r2
 800ae44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	689a      	ldr	r2, [r3, #8]
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	005b      	lsls	r3, r3, #1
 800ae4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae52:	69ba      	ldr	r2, [r7, #24]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	69ba      	ldr	r2, [r7, #24]
 800ae5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f003 0303 	and.w	r3, r3, #3
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d123      	bne.n	800aeb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	08da      	lsrs	r2, r3, #3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3208      	adds	r2, #8
 800ae72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	f003 0307 	and.w	r3, r3, #7
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	220f      	movs	r2, #15
 800ae82:	fa02 f303 	lsl.w	r3, r2, r3
 800ae86:	43db      	mvns	r3, r3
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	691a      	ldr	r2, [r3, #16]
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	f003 0307 	and.w	r3, r3, #7
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9e:	69ba      	ldr	r2, [r7, #24]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	08da      	lsrs	r2, r3, #3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3208      	adds	r2, #8
 800aeac:	69b9      	ldr	r1, [r7, #24]
 800aeae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	005b      	lsls	r3, r3, #1
 800aebc:	2203      	movs	r2, #3
 800aebe:	fa02 f303 	lsl.w	r3, r2, r3
 800aec2:	43db      	mvns	r3, r3
 800aec4:	69ba      	ldr	r2, [r7, #24]
 800aec6:	4013      	ands	r3, r2
 800aec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	f003 0203 	and.w	r2, r3, #3
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	4313      	orrs	r3, r2
 800aede:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	69ba      	ldr	r2, [r7, #24]
 800aee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f000 80d8 	beq.w	800b0a4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aef4:	4b2c      	ldr	r3, [pc, #176]	@ (800afa8 <HAL_GPIO_Init+0x22c>)
 800aef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aefa:	4a2b      	ldr	r2, [pc, #172]	@ (800afa8 <HAL_GPIO_Init+0x22c>)
 800aefc:	f043 0302 	orr.w	r3, r3, #2
 800af00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800af04:	4b28      	ldr	r3, [pc, #160]	@ (800afa8 <HAL_GPIO_Init+0x22c>)
 800af06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800af12:	4a26      	ldr	r2, [pc, #152]	@ (800afac <HAL_GPIO_Init+0x230>)
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	089b      	lsrs	r3, r3, #2
 800af18:	3302      	adds	r3, #2
 800af1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	f003 0303 	and.w	r3, r3, #3
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	220f      	movs	r2, #15
 800af2a:	fa02 f303 	lsl.w	r3, r2, r3
 800af2e:	43db      	mvns	r3, r3
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	4013      	ands	r3, r2
 800af34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a1d      	ldr	r2, [pc, #116]	@ (800afb0 <HAL_GPIO_Init+0x234>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d04a      	beq.n	800afd4 <HAL_GPIO_Init+0x258>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a1c      	ldr	r2, [pc, #112]	@ (800afb4 <HAL_GPIO_Init+0x238>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d02b      	beq.n	800af9e <HAL_GPIO_Init+0x222>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a1b      	ldr	r2, [pc, #108]	@ (800afb8 <HAL_GPIO_Init+0x23c>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d025      	beq.n	800af9a <HAL_GPIO_Init+0x21e>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a1a      	ldr	r2, [pc, #104]	@ (800afbc <HAL_GPIO_Init+0x240>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d01f      	beq.n	800af96 <HAL_GPIO_Init+0x21a>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a19      	ldr	r2, [pc, #100]	@ (800afc0 <HAL_GPIO_Init+0x244>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d019      	beq.n	800af92 <HAL_GPIO_Init+0x216>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a18      	ldr	r2, [pc, #96]	@ (800afc4 <HAL_GPIO_Init+0x248>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d013      	beq.n	800af8e <HAL_GPIO_Init+0x212>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a17      	ldr	r2, [pc, #92]	@ (800afc8 <HAL_GPIO_Init+0x24c>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d00d      	beq.n	800af8a <HAL_GPIO_Init+0x20e>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a16      	ldr	r2, [pc, #88]	@ (800afcc <HAL_GPIO_Init+0x250>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d007      	beq.n	800af86 <HAL_GPIO_Init+0x20a>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a15      	ldr	r2, [pc, #84]	@ (800afd0 <HAL_GPIO_Init+0x254>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d101      	bne.n	800af82 <HAL_GPIO_Init+0x206>
 800af7e:	2309      	movs	r3, #9
 800af80:	e029      	b.n	800afd6 <HAL_GPIO_Init+0x25a>
 800af82:	230a      	movs	r3, #10
 800af84:	e027      	b.n	800afd6 <HAL_GPIO_Init+0x25a>
 800af86:	2307      	movs	r3, #7
 800af88:	e025      	b.n	800afd6 <HAL_GPIO_Init+0x25a>
 800af8a:	2306      	movs	r3, #6
 800af8c:	e023      	b.n	800afd6 <HAL_GPIO_Init+0x25a>
 800af8e:	2305      	movs	r3, #5
 800af90:	e021      	b.n	800afd6 <HAL_GPIO_Init+0x25a>
 800af92:	2304      	movs	r3, #4
 800af94:	e01f      	b.n	800afd6 <HAL_GPIO_Init+0x25a>
 800af96:	2303      	movs	r3, #3
 800af98:	e01d      	b.n	800afd6 <HAL_GPIO_Init+0x25a>
 800af9a:	2302      	movs	r3, #2
 800af9c:	e01b      	b.n	800afd6 <HAL_GPIO_Init+0x25a>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e019      	b.n	800afd6 <HAL_GPIO_Init+0x25a>
 800afa2:	bf00      	nop
 800afa4:	58000080 	.word	0x58000080
 800afa8:	58024400 	.word	0x58024400
 800afac:	58000400 	.word	0x58000400
 800afb0:	58020000 	.word	0x58020000
 800afb4:	58020400 	.word	0x58020400
 800afb8:	58020800 	.word	0x58020800
 800afbc:	58020c00 	.word	0x58020c00
 800afc0:	58021000 	.word	0x58021000
 800afc4:	58021400 	.word	0x58021400
 800afc8:	58021800 	.word	0x58021800
 800afcc:	58021c00 	.word	0x58021c00
 800afd0:	58022400 	.word	0x58022400
 800afd4:	2300      	movs	r3, #0
 800afd6:	69fa      	ldr	r2, [r7, #28]
 800afd8:	f002 0203 	and.w	r2, r2, #3
 800afdc:	0092      	lsls	r2, r2, #2
 800afde:	4093      	lsls	r3, r2
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800afe6:	4938      	ldr	r1, [pc, #224]	@ (800b0c8 <HAL_GPIO_Init+0x34c>)
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	089b      	lsrs	r3, r3, #2
 800afec:	3302      	adds	r3, #2
 800afee:	69ba      	ldr	r2, [r7, #24]
 800aff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	43db      	mvns	r3, r3
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	4013      	ands	r3, r2
 800b004:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	4313      	orrs	r3, r2
 800b018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b01a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	43db      	mvns	r3, r3
 800b02e:	69ba      	ldr	r2, [r7, #24]
 800b030:	4013      	ands	r3, r2
 800b032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d003      	beq.n	800b048 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	4313      	orrs	r3, r2
 800b046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	43db      	mvns	r3, r3
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	4013      	ands	r3, r2
 800b05e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	4313      	orrs	r3, r2
 800b072:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	43db      	mvns	r3, r3
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	4013      	ands	r3, r2
 800b088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f47f ae6b 	bne.w	800ad90 <HAL_GPIO_Init+0x14>
  }
}
 800b0ba:	bf00      	nop
 800b0bc:	bf00      	nop
 800b0be:	3724      	adds	r7, #36	@ 0x24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	58000400 	.word	0x58000400

0800b0cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	691a      	ldr	r2, [r3, #16]
 800b0dc:	887b      	ldrh	r3, [r7, #2]
 800b0de:	4013      	ands	r3, r2
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	73fb      	strb	r3, [r7, #15]
 800b0e8:	e001      	b.n	800b0ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	807b      	strh	r3, [r7, #2]
 800b108:	4613      	mov	r3, r2
 800b10a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b10c:	787b      	ldrb	r3, [r7, #1]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b112:	887a      	ldrh	r2, [r7, #2]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b118:	e003      	b.n	800b122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b11a:	887b      	ldrh	r3, [r7, #2]
 800b11c:	041a      	lsls	r2, r3, #16
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	619a      	str	r2, [r3, #24]
}
 800b122:	bf00      	nop
 800b124:	370c      	adds	r7, #12
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
	...

0800b130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e08b      	b.n	800b25a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7fe fdd4 	bl	8009d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2224      	movs	r2, #36	@ 0x24
 800b160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f022 0201 	bic.w	r2, r2, #1
 800b172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685a      	ldr	r2, [r3, #4]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b180:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	689a      	ldr	r2, [r3, #8]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b190:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d107      	bne.n	800b1aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	689a      	ldr	r2, [r3, #8]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b1a6:	609a      	str	r2, [r3, #8]
 800b1a8:	e006      	b.n	800b1b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689a      	ldr	r2, [r3, #8]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b1b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d108      	bne.n	800b1d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1ce:	605a      	str	r2, [r3, #4]
 800b1d0:	e007      	b.n	800b1e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b1e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6859      	ldr	r1, [r3, #4]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	4b1d      	ldr	r3, [pc, #116]	@ (800b264 <HAL_I2C_Init+0x134>)
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b200:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	691a      	ldr	r2, [r3, #16]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	430a      	orrs	r2, r1
 800b21a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	69d9      	ldr	r1, [r3, #28]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a1a      	ldr	r2, [r3, #32]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	430a      	orrs	r2, r1
 800b22a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0201 	orr.w	r2, r2, #1
 800b23a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2220      	movs	r2, #32
 800b246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	02008000 	.word	0x02008000

0800b268 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af02      	add	r7, sp, #8
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	607a      	str	r2, [r7, #4]
 800b272:	461a      	mov	r2, r3
 800b274:	460b      	mov	r3, r1
 800b276:	817b      	strh	r3, [r7, #10]
 800b278:	4613      	mov	r3, r2
 800b27a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b20      	cmp	r3, #32
 800b286:	f040 80fd 	bne.w	800b484 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b290:	2b01      	cmp	r3, #1
 800b292:	d101      	bne.n	800b298 <HAL_I2C_Master_Transmit+0x30>
 800b294:	2302      	movs	r3, #2
 800b296:	e0f6      	b.n	800b486 <HAL_I2C_Master_Transmit+0x21e>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b2a0:	f7ff fbe0 	bl	800aa64 <HAL_GetTick>
 800b2a4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	2319      	movs	r3, #25
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 fa0a 	bl	800b6cc <I2C_WaitOnFlagUntilTimeout>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e0e1      	b.n	800b486 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2221      	movs	r2, #33	@ 0x21
 800b2c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2210      	movs	r2, #16
 800b2ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	893a      	ldrh	r2, [r7, #8]
 800b2e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	2bff      	cmp	r3, #255	@ 0xff
 800b2f2:	d906      	bls.n	800b302 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	22ff      	movs	r2, #255	@ 0xff
 800b2f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b2fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b2fe:	617b      	str	r3, [r7, #20]
 800b300:	e007      	b.n	800b312 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b306:	b29a      	uxth	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b30c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b310:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b316:	2b00      	cmp	r3, #0
 800b318:	d024      	beq.n	800b364 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b31e:	781a      	ldrb	r2, [r3, #0]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b334:	b29b      	uxth	r3, r3
 800b336:	3b01      	subs	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b342:	3b01      	subs	r3, #1
 800b344:	b29a      	uxth	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	3301      	adds	r3, #1
 800b352:	b2da      	uxtb	r2, r3
 800b354:	8979      	ldrh	r1, [r7, #10]
 800b356:	4b4e      	ldr	r3, [pc, #312]	@ (800b490 <HAL_I2C_Master_Transmit+0x228>)
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 fc05 	bl	800bb6c <I2C_TransferConfig>
 800b362:	e066      	b.n	800b432 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	8979      	ldrh	r1, [r7, #10]
 800b36c:	4b48      	ldr	r3, [pc, #288]	@ (800b490 <HAL_I2C_Master_Transmit+0x228>)
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f000 fbfa 	bl	800bb6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b378:	e05b      	b.n	800b432 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	6a39      	ldr	r1, [r7, #32]
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f000 f9fd 	bl	800b77e <I2C_WaitOnTXISFlagUntilTimeout>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e07b      	b.n	800b486 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b392:	781a      	ldrb	r2, [r3, #0]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39e:	1c5a      	adds	r2, r3, #1
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d034      	beq.n	800b432 <HAL_I2C_Master_Transmit+0x1ca>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d130      	bne.n	800b432 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	6a3b      	ldr	r3, [r7, #32]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2180      	movs	r1, #128	@ 0x80
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 f976 	bl	800b6cc <I2C_WaitOnFlagUntilTimeout>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e04d      	b.n	800b486 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	2bff      	cmp	r3, #255	@ 0xff
 800b3f2:	d90e      	bls.n	800b412 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	22ff      	movs	r2, #255	@ 0xff
 800b3f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	8979      	ldrh	r1, [r7, #10]
 800b402:	2300      	movs	r3, #0
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f000 fbae 	bl	800bb6c <I2C_TransferConfig>
 800b410:	e00f      	b.n	800b432 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b416:	b29a      	uxth	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b420:	b2da      	uxtb	r2, r3
 800b422:	8979      	ldrh	r1, [r7, #10]
 800b424:	2300      	movs	r3, #0
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f000 fb9d 	bl	800bb6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b436:	b29b      	uxth	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d19e      	bne.n	800b37a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	6a39      	ldr	r1, [r7, #32]
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f000 f9e3 	bl	800b80c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e01a      	b.n	800b486 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2220      	movs	r2, #32
 800b456:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6859      	ldr	r1, [r3, #4]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	4b0c      	ldr	r3, [pc, #48]	@ (800b494 <HAL_I2C_Master_Transmit+0x22c>)
 800b464:	400b      	ands	r3, r1
 800b466:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	e000      	b.n	800b486 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800b484:	2302      	movs	r3, #2
  }
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	80002000 	.word	0x80002000
 800b494:	fe00e800 	.word	0xfe00e800

0800b498 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af02      	add	r7, sp, #8
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	607a      	str	r2, [r7, #4]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	817b      	strh	r3, [r7, #10]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b20      	cmp	r3, #32
 800b4b6:	f040 80db 	bne.w	800b670 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d101      	bne.n	800b4c8 <HAL_I2C_Master_Receive+0x30>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e0d4      	b.n	800b672 <HAL_I2C_Master_Receive+0x1da>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b4d0:	f7ff fac8 	bl	800aa64 <HAL_GetTick>
 800b4d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	2319      	movs	r3, #25
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 f8f2 	bl	800b6cc <I2C_WaitOnFlagUntilTimeout>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d001      	beq.n	800b4f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e0bf      	b.n	800b672 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2222      	movs	r2, #34	@ 0x22
 800b4f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2210      	movs	r2, #16
 800b4fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	893a      	ldrh	r2, [r7, #8]
 800b512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b51e:	b29b      	uxth	r3, r3
 800b520:	2bff      	cmp	r3, #255	@ 0xff
 800b522:	d90e      	bls.n	800b542 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	22ff      	movs	r2, #255	@ 0xff
 800b528:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	8979      	ldrh	r1, [r7, #10]
 800b532:	4b52      	ldr	r3, [pc, #328]	@ (800b67c <HAL_I2C_Master_Receive+0x1e4>)
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f000 fb16 	bl	800bb6c <I2C_TransferConfig>
 800b540:	e06d      	b.n	800b61e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b546:	b29a      	uxth	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b550:	b2da      	uxtb	r2, r3
 800b552:	8979      	ldrh	r1, [r7, #10]
 800b554:	4b49      	ldr	r3, [pc, #292]	@ (800b67c <HAL_I2C_Master_Receive+0x1e4>)
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f000 fb05 	bl	800bb6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800b562:	e05c      	b.n	800b61e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	6a39      	ldr	r1, [r7, #32]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 f993 	bl	800b894 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	e07c      	b.n	800b672 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b582:	b2d2      	uxtb	r2, r2
 800b584:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b594:	3b01      	subs	r3, #1
 800b596:	b29a      	uxth	r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d034      	beq.n	800b61e <HAL_I2C_Master_Receive+0x186>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d130      	bne.n	800b61e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2180      	movs	r1, #128	@ 0x80
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f000 f880 	bl	800b6cc <I2C_WaitOnFlagUntilTimeout>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e04d      	b.n	800b672 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	2bff      	cmp	r3, #255	@ 0xff
 800b5de:	d90e      	bls.n	800b5fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	22ff      	movs	r2, #255	@ 0xff
 800b5e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	8979      	ldrh	r1, [r7, #10]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 fab8 	bl	800bb6c <I2C_TransferConfig>
 800b5fc:	e00f      	b.n	800b61e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b602:	b29a      	uxth	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	8979      	ldrh	r1, [r7, #10]
 800b610:	2300      	movs	r3, #0
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 faa7 	bl	800bb6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b622:	b29b      	uxth	r3, r3
 800b624:	2b00      	cmp	r3, #0
 800b626:	d19d      	bne.n	800b564 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	6a39      	ldr	r1, [r7, #32]
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f000 f8ed 	bl	800b80c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	e01a      	b.n	800b672 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2220      	movs	r2, #32
 800b642:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6859      	ldr	r1, [r3, #4]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	4b0c      	ldr	r3, [pc, #48]	@ (800b680 <HAL_I2C_Master_Receive+0x1e8>)
 800b650:	400b      	ands	r3, r1
 800b652:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2220      	movs	r2, #32
 800b658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	e000      	b.n	800b672 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b670:	2302      	movs	r3, #2
  }
}
 800b672:	4618      	mov	r0, r3
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	80002400 	.word	0x80002400
 800b680:	fe00e800 	.word	0xfe00e800

0800b684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b02      	cmp	r3, #2
 800b698:	d103      	bne.n	800b6a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d007      	beq.n	800b6c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	699a      	ldr	r2, [r3, #24]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f042 0201 	orr.w	r2, r2, #1
 800b6be:	619a      	str	r2, [r3, #24]
  }
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6dc:	e03b      	b.n	800b756 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6de:	69ba      	ldr	r2, [r7, #24]
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f000 f962 	bl	800b9ac <I2C_IsErrorOccurred>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e041      	b.n	800b776 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f8:	d02d      	beq.n	800b756 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6fa:	f7ff f9b3 	bl	800aa64 <HAL_GetTick>
 800b6fe:	4602      	mov	r2, r0
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	429a      	cmp	r2, r3
 800b708:	d302      	bcc.n	800b710 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d122      	bne.n	800b756 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	699a      	ldr	r2, [r3, #24]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	4013      	ands	r3, r2
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	bf0c      	ite	eq
 800b720:	2301      	moveq	r3, #1
 800b722:	2300      	movne	r3, #0
 800b724:	b2db      	uxtb	r3, r3
 800b726:	461a      	mov	r2, r3
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d113      	bne.n	800b756 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b732:	f043 0220 	orr.w	r2, r3, #32
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2220      	movs	r2, #32
 800b73e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	e00f      	b.n	800b776 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	699a      	ldr	r2, [r3, #24]
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	4013      	ands	r3, r2
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	429a      	cmp	r2, r3
 800b764:	bf0c      	ite	eq
 800b766:	2301      	moveq	r3, #1
 800b768:	2300      	movne	r3, #0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	461a      	mov	r2, r3
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	429a      	cmp	r2, r3
 800b772:	d0b4      	beq.n	800b6de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	60b9      	str	r1, [r7, #8]
 800b788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b78a:	e033      	b.n	800b7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	68b9      	ldr	r1, [r7, #8]
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 f90b 	bl	800b9ac <I2C_IsErrorOccurred>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e031      	b.n	800b804 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a6:	d025      	beq.n	800b7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7a8:	f7ff f95c 	bl	800aa64 <HAL_GetTick>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d302      	bcc.n	800b7be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d11a      	bne.n	800b7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	f003 0302 	and.w	r3, r3, #2
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d013      	beq.n	800b7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7d0:	f043 0220 	orr.w	r2, r3, #32
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2220      	movs	r2, #32
 800b7dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e007      	b.n	800b804 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	f003 0302 	and.w	r3, r3, #2
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d1c4      	bne.n	800b78c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b818:	e02f      	b.n	800b87a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	68b9      	ldr	r1, [r7, #8]
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f000 f8c4 	bl	800b9ac <I2C_IsErrorOccurred>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e02d      	b.n	800b88a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b82e:	f7ff f919 	bl	800aa64 <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d302      	bcc.n	800b844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d11a      	bne.n	800b87a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	f003 0320 	and.w	r3, r3, #32
 800b84e:	2b20      	cmp	r3, #32
 800b850:	d013      	beq.n	800b87a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b856:	f043 0220 	orr.w	r2, r3, #32
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2220      	movs	r2, #32
 800b862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e007      	b.n	800b88a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b20      	cmp	r3, #32
 800b886:	d1c8      	bne.n	800b81a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800b8a4:	e071      	b.n	800b98a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	68b9      	ldr	r1, [r7, #8]
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f000 f87e 	bl	800b9ac <I2C_IsErrorOccurred>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	f003 0320 	and.w	r3, r3, #32
 800b8c4:	2b20      	cmp	r3, #32
 800b8c6:	d13b      	bne.n	800b940 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d138      	bne.n	800b940 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	f003 0304 	and.w	r3, r3, #4
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	d105      	bne.n	800b8e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	f003 0310 	and.w	r3, r3, #16
 800b8f2:	2b10      	cmp	r3, #16
 800b8f4:	d121      	bne.n	800b93a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2210      	movs	r2, #16
 800b8fc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2204      	movs	r2, #4
 800b902:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2220      	movs	r2, #32
 800b90a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6859      	ldr	r1, [r3, #4]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	4b24      	ldr	r3, [pc, #144]	@ (800b9a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800b918:	400b      	ands	r3, r1
 800b91a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2220      	movs	r2, #32
 800b920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	75fb      	strb	r3, [r7, #23]
 800b938:	e002      	b.n	800b940 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800b940:	f7ff f890 	bl	800aa64 <HAL_GetTick>
 800b944:	4602      	mov	r2, r0
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d302      	bcc.n	800b956 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d119      	bne.n	800b98a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800b956:	7dfb      	ldrb	r3, [r7, #23]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d116      	bne.n	800b98a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	f003 0304 	and.w	r3, r3, #4
 800b966:	2b04      	cmp	r3, #4
 800b968:	d00f      	beq.n	800b98a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b96e:	f043 0220 	orr.w	r2, r3, #32
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2220      	movs	r2, #32
 800b97a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	f003 0304 	and.w	r3, r3, #4
 800b994:	2b04      	cmp	r3, #4
 800b996:	d002      	beq.n	800b99e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800b998:	7dfb      	ldrb	r3, [r7, #23]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d083      	beq.n	800b8a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	fe00e800 	.word	0xfe00e800

0800b9ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b08a      	sub	sp, #40	@ 0x28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	f003 0310 	and.w	r3, r3, #16
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d068      	beq.n	800baaa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2210      	movs	r2, #16
 800b9de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b9e0:	e049      	b.n	800ba76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e8:	d045      	beq.n	800ba76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b9ea:	f7ff f83b 	bl	800aa64 <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d302      	bcc.n	800ba00 <I2C_IsErrorOccurred+0x54>
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d13a      	bne.n	800ba76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba22:	d121      	bne.n	800ba68 <I2C_IsErrorOccurred+0xbc>
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba2a:	d01d      	beq.n	800ba68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ba2c:	7cfb      	ldrb	r3, [r7, #19]
 800ba2e:	2b20      	cmp	r3, #32
 800ba30:	d01a      	beq.n	800ba68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ba40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ba42:	f7ff f80f 	bl	800aa64 <HAL_GetTick>
 800ba46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba48:	e00e      	b.n	800ba68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ba4a:	f7ff f80b 	bl	800aa64 <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	2b19      	cmp	r3, #25
 800ba56:	d907      	bls.n	800ba68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ba58:	6a3b      	ldr	r3, [r7, #32]
 800ba5a:	f043 0320 	orr.w	r3, r3, #32
 800ba5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ba66:	e006      	b.n	800ba76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	f003 0320 	and.w	r3, r3, #32
 800ba72:	2b20      	cmp	r3, #32
 800ba74:	d1e9      	bne.n	800ba4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	f003 0320 	and.w	r3, r3, #32
 800ba80:	2b20      	cmp	r3, #32
 800ba82:	d003      	beq.n	800ba8c <I2C_IsErrorOccurred+0xe0>
 800ba84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d0aa      	beq.n	800b9e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ba8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d103      	bne.n	800ba9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2220      	movs	r2, #32
 800ba9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	f043 0304 	orr.w	r3, r3, #4
 800baa2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00b      	beq.n	800bad4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800babc:	6a3b      	ldr	r3, [r7, #32]
 800babe:	f043 0301 	orr.w	r3, r3, #1
 800bac2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bacc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00b      	beq.n	800baf6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	f043 0308 	orr.w	r3, r3, #8
 800bae4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800baee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00b      	beq.n	800bb18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bb00:	6a3b      	ldr	r3, [r7, #32]
 800bb02:	f043 0302 	orr.w	r3, r3, #2
 800bb06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800bb18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d01c      	beq.n	800bb5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7ff fdaf 	bl	800b684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6859      	ldr	r1, [r3, #4]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	4b0d      	ldr	r3, [pc, #52]	@ (800bb68 <I2C_IsErrorOccurred+0x1bc>)
 800bb32:	400b      	ands	r3, r1
 800bb34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	431a      	orrs	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2220      	movs	r2, #32
 800bb46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800bb5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3728      	adds	r7, #40	@ 0x28
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	fe00e800 	.word	0xfe00e800

0800bb6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b087      	sub	sp, #28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	607b      	str	r3, [r7, #4]
 800bb76:	460b      	mov	r3, r1
 800bb78:	817b      	strh	r3, [r7, #10]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb7e:	897b      	ldrh	r3, [r7, #10]
 800bb80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bb84:	7a7b      	ldrb	r3, [r7, #9]
 800bb86:	041b      	lsls	r3, r3, #16
 800bb88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb92:	6a3b      	ldr	r3, [r7, #32]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	0d5b      	lsrs	r3, r3, #21
 800bba6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bbaa:	4b08      	ldr	r3, [pc, #32]	@ (800bbcc <I2C_TransferConfig+0x60>)
 800bbac:	430b      	orrs	r3, r1
 800bbae:	43db      	mvns	r3, r3
 800bbb0:	ea02 0103 	and.w	r1, r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	03ff63ff 	.word	0x03ff63ff

0800bbd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	2b20      	cmp	r3, #32
 800bbe4:	d138      	bne.n	800bc58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d101      	bne.n	800bbf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bbf0:	2302      	movs	r3, #2
 800bbf2:	e032      	b.n	800bc5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2224      	movs	r2, #36	@ 0x24
 800bc00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f022 0201 	bic.w	r2, r2, #1
 800bc12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bc22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6819      	ldr	r1, [r3, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	430a      	orrs	r2, r1
 800bc32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f042 0201 	orr.w	r2, r2, #1
 800bc42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2220      	movs	r2, #32
 800bc48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bc54:	2300      	movs	r3, #0
 800bc56:	e000      	b.n	800bc5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bc58:	2302      	movs	r3, #2
  }
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b085      	sub	sp, #20
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	2b20      	cmp	r3, #32
 800bc7a:	d139      	bne.n	800bcf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d101      	bne.n	800bc8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bc86:	2302      	movs	r3, #2
 800bc88:	e033      	b.n	800bcf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2224      	movs	r2, #36	@ 0x24
 800bc96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f022 0201 	bic.w	r2, r2, #1
 800bca8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bcb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	021b      	lsls	r3, r3, #8
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f042 0201 	orr.w	r2, r2, #1
 800bcda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	e000      	b.n	800bcf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bcf0:	2302      	movs	r3, #2
  }
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
	...

0800bd00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bd08:	4b19      	ldr	r3, [pc, #100]	@ (800bd70 <HAL_PWREx_ConfigSupply+0x70>)
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	f003 0304 	and.w	r3, r3, #4
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	d00a      	beq.n	800bd2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bd14:	4b16      	ldr	r3, [pc, #88]	@ (800bd70 <HAL_PWREx_ConfigSupply+0x70>)
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f003 0307 	and.w	r3, r3, #7
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d001      	beq.n	800bd26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e01f      	b.n	800bd66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	e01d      	b.n	800bd66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bd2a:	4b11      	ldr	r3, [pc, #68]	@ (800bd70 <HAL_PWREx_ConfigSupply+0x70>)
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	f023 0207 	bic.w	r2, r3, #7
 800bd32:	490f      	ldr	r1, [pc, #60]	@ (800bd70 <HAL_PWREx_ConfigSupply+0x70>)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bd3a:	f7fe fe93 	bl	800aa64 <HAL_GetTick>
 800bd3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bd40:	e009      	b.n	800bd56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bd42:	f7fe fe8f 	bl	800aa64 <HAL_GetTick>
 800bd46:	4602      	mov	r2, r0
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd50:	d901      	bls.n	800bd56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e007      	b.n	800bd66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bd56:	4b06      	ldr	r3, [pc, #24]	@ (800bd70 <HAL_PWREx_ConfigSupply+0x70>)
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd62:	d1ee      	bne.n	800bd42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	58024800 	.word	0x58024800

0800bd74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08c      	sub	sp, #48	@ 0x30
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e3c8      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 8087 	beq.w	800bea2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd94:	4b88      	ldr	r3, [pc, #544]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd9e:	4b86      	ldr	r3, [pc, #536]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda6:	2b10      	cmp	r3, #16
 800bda8:	d007      	beq.n	800bdba <HAL_RCC_OscConfig+0x46>
 800bdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdac:	2b18      	cmp	r3, #24
 800bdae:	d110      	bne.n	800bdd2 <HAL_RCC_OscConfig+0x5e>
 800bdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb2:	f003 0303 	and.w	r3, r3, #3
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d10b      	bne.n	800bdd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bdba:	4b7f      	ldr	r3, [pc, #508]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d06c      	beq.n	800bea0 <HAL_RCC_OscConfig+0x12c>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d168      	bne.n	800bea0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e3a2      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdda:	d106      	bne.n	800bdea <HAL_RCC_OscConfig+0x76>
 800bddc:	4b76      	ldr	r3, [pc, #472]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a75      	ldr	r2, [pc, #468]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bde2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	e02e      	b.n	800be48 <HAL_RCC_OscConfig+0xd4>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10c      	bne.n	800be0c <HAL_RCC_OscConfig+0x98>
 800bdf2:	4b71      	ldr	r3, [pc, #452]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a70      	ldr	r2, [pc, #448]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bdf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	4b6e      	ldr	r3, [pc, #440]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a6d      	ldr	r2, [pc, #436]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	e01d      	b.n	800be48 <HAL_RCC_OscConfig+0xd4>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be14:	d10c      	bne.n	800be30 <HAL_RCC_OscConfig+0xbc>
 800be16:	4b68      	ldr	r3, [pc, #416]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a67      	ldr	r2, [pc, #412]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	4b65      	ldr	r3, [pc, #404]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a64      	ldr	r2, [pc, #400]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be2c:	6013      	str	r3, [r2, #0]
 800be2e:	e00b      	b.n	800be48 <HAL_RCC_OscConfig+0xd4>
 800be30:	4b61      	ldr	r3, [pc, #388]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a60      	ldr	r2, [pc, #384]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be3a:	6013      	str	r3, [r2, #0]
 800be3c:	4b5e      	ldr	r3, [pc, #376]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a5d      	ldr	r2, [pc, #372]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d013      	beq.n	800be78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be50:	f7fe fe08 	bl	800aa64 <HAL_GetTick>
 800be54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800be56:	e008      	b.n	800be6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be58:	f7fe fe04 	bl	800aa64 <HAL_GetTick>
 800be5c:	4602      	mov	r2, r0
 800be5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	2b64      	cmp	r3, #100	@ 0x64
 800be64:	d901      	bls.n	800be6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800be66:	2303      	movs	r3, #3
 800be68:	e356      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800be6a:	4b53      	ldr	r3, [pc, #332]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0f0      	beq.n	800be58 <HAL_RCC_OscConfig+0xe4>
 800be76:	e014      	b.n	800bea2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be78:	f7fe fdf4 	bl	800aa64 <HAL_GetTick>
 800be7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800be7e:	e008      	b.n	800be92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be80:	f7fe fdf0 	bl	800aa64 <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	2b64      	cmp	r3, #100	@ 0x64
 800be8c:	d901      	bls.n	800be92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e342      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800be92:	4b49      	ldr	r3, [pc, #292]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1f0      	bne.n	800be80 <HAL_RCC_OscConfig+0x10c>
 800be9e:	e000      	b.n	800bea2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 0302 	and.w	r3, r3, #2
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 808c 	beq.w	800bfc8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800beb0:	4b41      	ldr	r3, [pc, #260]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800beb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800beba:	4b3f      	ldr	r3, [pc, #252]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bebe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d007      	beq.n	800bed6 <HAL_RCC_OscConfig+0x162>
 800bec6:	6a3b      	ldr	r3, [r7, #32]
 800bec8:	2b18      	cmp	r3, #24
 800beca:	d137      	bne.n	800bf3c <HAL_RCC_OscConfig+0x1c8>
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	f003 0303 	and.w	r3, r3, #3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d132      	bne.n	800bf3c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bed6:	4b38      	ldr	r3, [pc, #224]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0304 	and.w	r3, r3, #4
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d005      	beq.n	800beee <HAL_RCC_OscConfig+0x17a>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	e314      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800beee:	4b32      	ldr	r3, [pc, #200]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f023 0219 	bic.w	r2, r3, #25
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	492f      	ldr	r1, [pc, #188]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800befc:	4313      	orrs	r3, r2
 800befe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf00:	f7fe fdb0 	bl	800aa64 <HAL_GetTick>
 800bf04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bf06:	e008      	b.n	800bf1a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf08:	f7fe fdac 	bl	800aa64 <HAL_GetTick>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d901      	bls.n	800bf1a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800bf16:	2303      	movs	r3, #3
 800bf18:	e2fe      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bf1a:	4b27      	ldr	r3, [pc, #156]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 0304 	and.w	r3, r3, #4
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0f0      	beq.n	800bf08 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf26:	4b24      	ldr	r3, [pc, #144]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	061b      	lsls	r3, r3, #24
 800bf34:	4920      	ldr	r1, [pc, #128]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf36:	4313      	orrs	r3, r2
 800bf38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bf3a:	e045      	b.n	800bfc8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d026      	beq.n	800bf92 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bf44:	4b1c      	ldr	r3, [pc, #112]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f023 0219 	bic.w	r2, r3, #25
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	4919      	ldr	r1, [pc, #100]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf52:	4313      	orrs	r3, r2
 800bf54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf56:	f7fe fd85 	bl	800aa64 <HAL_GetTick>
 800bf5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bf5c:	e008      	b.n	800bf70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf5e:	f7fe fd81 	bl	800aa64 <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d901      	bls.n	800bf70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	e2d3      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bf70:	4b11      	ldr	r3, [pc, #68]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d0f0      	beq.n	800bf5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	061b      	lsls	r3, r3, #24
 800bf8a:	490b      	ldr	r1, [pc, #44]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	604b      	str	r3, [r1, #4]
 800bf90:	e01a      	b.n	800bfc8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf92:	4b09      	ldr	r3, [pc, #36]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a08      	ldr	r2, [pc, #32]	@ (800bfb8 <HAL_RCC_OscConfig+0x244>)
 800bf98:	f023 0301 	bic.w	r3, r3, #1
 800bf9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf9e:	f7fe fd61 	bl	800aa64 <HAL_GetTick>
 800bfa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bfa4:	e00a      	b.n	800bfbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfa6:	f7fe fd5d 	bl	800aa64 <HAL_GetTick>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d903      	bls.n	800bfbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e2af      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
 800bfb8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bfbc:	4b96      	ldr	r3, [pc, #600]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 0304 	and.w	r3, r3, #4
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1ee      	bne.n	800bfa6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0310 	and.w	r3, r3, #16
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d06a      	beq.n	800c0aa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bfd4:	4b90      	ldr	r3, [pc, #576]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bfdc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bfde:	4b8e      	ldr	r3, [pc, #568]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	2b08      	cmp	r3, #8
 800bfe8:	d007      	beq.n	800bffa <HAL_RCC_OscConfig+0x286>
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	2b18      	cmp	r3, #24
 800bfee:	d11b      	bne.n	800c028 <HAL_RCC_OscConfig+0x2b4>
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	f003 0303 	and.w	r3, r3, #3
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d116      	bne.n	800c028 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bffa:	4b87      	ldr	r3, [pc, #540]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c002:	2b00      	cmp	r3, #0
 800c004:	d005      	beq.n	800c012 <HAL_RCC_OscConfig+0x29e>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	69db      	ldr	r3, [r3, #28]
 800c00a:	2b80      	cmp	r3, #128	@ 0x80
 800c00c:	d001      	beq.n	800c012 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800c00e:	2301      	movs	r3, #1
 800c010:	e282      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c012:	4b81      	ldr	r3, [pc, #516]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	061b      	lsls	r3, r3, #24
 800c020:	497d      	ldr	r1, [pc, #500]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c022:	4313      	orrs	r3, r2
 800c024:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c026:	e040      	b.n	800c0aa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	69db      	ldr	r3, [r3, #28]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d023      	beq.n	800c078 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c030:	4b79      	ldr	r3, [pc, #484]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a78      	ldr	r2, [pc, #480]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c03a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c03c:	f7fe fd12 	bl	800aa64 <HAL_GetTick>
 800c040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c042:	e008      	b.n	800c056 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c044:	f7fe fd0e 	bl	800aa64 <HAL_GetTick>
 800c048:	4602      	mov	r2, r0
 800c04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d901      	bls.n	800c056 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c052:	2303      	movs	r3, #3
 800c054:	e260      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c056:	4b70      	ldr	r3, [pc, #448]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d0f0      	beq.n	800c044 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c062:	4b6d      	ldr	r3, [pc, #436]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	061b      	lsls	r3, r3, #24
 800c070:	4969      	ldr	r1, [pc, #420]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c072:	4313      	orrs	r3, r2
 800c074:	60cb      	str	r3, [r1, #12]
 800c076:	e018      	b.n	800c0aa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c078:	4b67      	ldr	r3, [pc, #412]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a66      	ldr	r2, [pc, #408]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c07e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c084:	f7fe fcee 	bl	800aa64 <HAL_GetTick>
 800c088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c08a:	e008      	b.n	800c09e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c08c:	f7fe fcea 	bl	800aa64 <HAL_GetTick>
 800c090:	4602      	mov	r2, r0
 800c092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	2b02      	cmp	r3, #2
 800c098:	d901      	bls.n	800c09e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800c09a:	2303      	movs	r3, #3
 800c09c:	e23c      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c09e:	4b5e      	ldr	r3, [pc, #376]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1f0      	bne.n	800c08c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 0308 	and.w	r3, r3, #8
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d036      	beq.n	800c124 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d019      	beq.n	800c0f2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c0be:	4b56      	ldr	r3, [pc, #344]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c0c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0c2:	4a55      	ldr	r2, [pc, #340]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c0c4:	f043 0301 	orr.w	r3, r3, #1
 800c0c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0ca:	f7fe fccb 	bl	800aa64 <HAL_GetTick>
 800c0ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c0d0:	e008      	b.n	800c0e4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0d2:	f7fe fcc7 	bl	800aa64 <HAL_GetTick>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d901      	bls.n	800c0e4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e219      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c0e4:	4b4c      	ldr	r3, [pc, #304]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c0e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0e8:	f003 0302 	and.w	r3, r3, #2
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0f0      	beq.n	800c0d2 <HAL_RCC_OscConfig+0x35e>
 800c0f0:	e018      	b.n	800c124 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c0f2:	4b49      	ldr	r3, [pc, #292]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c0f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0f6:	4a48      	ldr	r2, [pc, #288]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c0f8:	f023 0301 	bic.w	r3, r3, #1
 800c0fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0fe:	f7fe fcb1 	bl	800aa64 <HAL_GetTick>
 800c102:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c104:	e008      	b.n	800c118 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c106:	f7fe fcad 	bl	800aa64 <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	2b02      	cmp	r3, #2
 800c112:	d901      	bls.n	800c118 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e1ff      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c118:	4b3f      	ldr	r3, [pc, #252]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c11a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c11c:	f003 0302 	and.w	r3, r3, #2
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1f0      	bne.n	800c106 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f003 0320 	and.w	r3, r3, #32
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d036      	beq.n	800c19e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d019      	beq.n	800c16c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c138:	4b37      	ldr	r3, [pc, #220]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a36      	ldr	r2, [pc, #216]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c13e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c142:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c144:	f7fe fc8e 	bl	800aa64 <HAL_GetTick>
 800c148:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c14a:	e008      	b.n	800c15e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c14c:	f7fe fc8a 	bl	800aa64 <HAL_GetTick>
 800c150:	4602      	mov	r2, r0
 800c152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	2b02      	cmp	r3, #2
 800c158:	d901      	bls.n	800c15e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e1dc      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c15e:	4b2e      	ldr	r3, [pc, #184]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d0f0      	beq.n	800c14c <HAL_RCC_OscConfig+0x3d8>
 800c16a:	e018      	b.n	800c19e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c16c:	4b2a      	ldr	r3, [pc, #168]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a29      	ldr	r2, [pc, #164]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c176:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c178:	f7fe fc74 	bl	800aa64 <HAL_GetTick>
 800c17c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c17e:	e008      	b.n	800c192 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c180:	f7fe fc70 	bl	800aa64 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d901      	bls.n	800c192 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800c18e:	2303      	movs	r3, #3
 800c190:	e1c2      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c192:	4b21      	ldr	r3, [pc, #132]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1f0      	bne.n	800c180 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 0304 	and.w	r3, r3, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 8086 	beq.w	800c2b8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c1ac:	4b1b      	ldr	r3, [pc, #108]	@ (800c21c <HAL_RCC_OscConfig+0x4a8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a1a      	ldr	r2, [pc, #104]	@ (800c21c <HAL_RCC_OscConfig+0x4a8>)
 800c1b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c1b8:	f7fe fc54 	bl	800aa64 <HAL_GetTick>
 800c1bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1be:	e008      	b.n	800c1d2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1c0:	f7fe fc50 	bl	800aa64 <HAL_GetTick>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c8:	1ad3      	subs	r3, r2, r3
 800c1ca:	2b64      	cmp	r3, #100	@ 0x64
 800c1cc:	d901      	bls.n	800c1d2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	e1a2      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1d2:	4b12      	ldr	r3, [pc, #72]	@ (800c21c <HAL_RCC_OscConfig+0x4a8>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d0f0      	beq.n	800c1c0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d106      	bne.n	800c1f4 <HAL_RCC_OscConfig+0x480>
 800c1e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c1e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ea:	4a0b      	ldr	r2, [pc, #44]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c1ec:	f043 0301 	orr.w	r3, r3, #1
 800c1f0:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1f2:	e032      	b.n	800c25a <HAL_RCC_OscConfig+0x4e6>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d111      	bne.n	800c220 <HAL_RCC_OscConfig+0x4ac>
 800c1fc:	4b06      	ldr	r3, [pc, #24]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c1fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c200:	4a05      	ldr	r2, [pc, #20]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c202:	f023 0301 	bic.w	r3, r3, #1
 800c206:	6713      	str	r3, [r2, #112]	@ 0x70
 800c208:	4b03      	ldr	r3, [pc, #12]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c20a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c20c:	4a02      	ldr	r2, [pc, #8]	@ (800c218 <HAL_RCC_OscConfig+0x4a4>)
 800c20e:	f023 0304 	bic.w	r3, r3, #4
 800c212:	6713      	str	r3, [r2, #112]	@ 0x70
 800c214:	e021      	b.n	800c25a <HAL_RCC_OscConfig+0x4e6>
 800c216:	bf00      	nop
 800c218:	58024400 	.word	0x58024400
 800c21c:	58024800 	.word	0x58024800
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	2b05      	cmp	r3, #5
 800c226:	d10c      	bne.n	800c242 <HAL_RCC_OscConfig+0x4ce>
 800c228:	4b83      	ldr	r3, [pc, #524]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c22a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c22c:	4a82      	ldr	r2, [pc, #520]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c22e:	f043 0304 	orr.w	r3, r3, #4
 800c232:	6713      	str	r3, [r2, #112]	@ 0x70
 800c234:	4b80      	ldr	r3, [pc, #512]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c238:	4a7f      	ldr	r2, [pc, #508]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c23a:	f043 0301 	orr.w	r3, r3, #1
 800c23e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c240:	e00b      	b.n	800c25a <HAL_RCC_OscConfig+0x4e6>
 800c242:	4b7d      	ldr	r3, [pc, #500]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c246:	4a7c      	ldr	r2, [pc, #496]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c248:	f023 0301 	bic.w	r3, r3, #1
 800c24c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c24e:	4b7a      	ldr	r3, [pc, #488]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c252:	4a79      	ldr	r2, [pc, #484]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c254:	f023 0304 	bic.w	r3, r3, #4
 800c258:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d015      	beq.n	800c28e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c262:	f7fe fbff 	bl	800aa64 <HAL_GetTick>
 800c266:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c268:	e00a      	b.n	800c280 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c26a:	f7fe fbfb 	bl	800aa64 <HAL_GetTick>
 800c26e:	4602      	mov	r2, r0
 800c270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c278:	4293      	cmp	r3, r2
 800c27a:	d901      	bls.n	800c280 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e14b      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c280:	4b6d      	ldr	r3, [pc, #436]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c284:	f003 0302 	and.w	r3, r3, #2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d0ee      	beq.n	800c26a <HAL_RCC_OscConfig+0x4f6>
 800c28c:	e014      	b.n	800c2b8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c28e:	f7fe fbe9 	bl	800aa64 <HAL_GetTick>
 800c292:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c294:	e00a      	b.n	800c2ac <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c296:	f7fe fbe5 	bl	800aa64 <HAL_GetTick>
 800c29a:	4602      	mov	r2, r0
 800c29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d901      	bls.n	800c2ac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e135      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c2ac:	4b62      	ldr	r3, [pc, #392]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c2ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2b0:	f003 0302 	and.w	r3, r3, #2
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1ee      	bne.n	800c296 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 812a 	beq.w	800c516 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c2c2:	4b5d      	ldr	r3, [pc, #372]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c2ca:	2b18      	cmp	r3, #24
 800c2cc:	f000 80ba 	beq.w	800c444 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	f040 8095 	bne.w	800c404 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2da:	4b57      	ldr	r3, [pc, #348]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a56      	ldr	r2, [pc, #344]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c2e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c2e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2e6:	f7fe fbbd 	bl	800aa64 <HAL_GetTick>
 800c2ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c2ec:	e008      	b.n	800c300 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2ee:	f7fe fbb9 	bl	800aa64 <HAL_GetTick>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d901      	bls.n	800c300 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e10b      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c300:	4b4d      	ldr	r3, [pc, #308]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1f0      	bne.n	800c2ee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c30c:	4b4a      	ldr	r3, [pc, #296]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c30e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c310:	4b4a      	ldr	r3, [pc, #296]	@ (800c43c <HAL_RCC_OscConfig+0x6c8>)
 800c312:	4013      	ands	r3, r2
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c31c:	0112      	lsls	r2, r2, #4
 800c31e:	430a      	orrs	r2, r1
 800c320:	4945      	ldr	r1, [pc, #276]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c322:	4313      	orrs	r3, r2
 800c324:	628b      	str	r3, [r1, #40]	@ 0x28
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c32a:	3b01      	subs	r3, #1
 800c32c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c334:	3b01      	subs	r3, #1
 800c336:	025b      	lsls	r3, r3, #9
 800c338:	b29b      	uxth	r3, r3
 800c33a:	431a      	orrs	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c340:	3b01      	subs	r3, #1
 800c342:	041b      	lsls	r3, r3, #16
 800c344:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c348:	431a      	orrs	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c34e:	3b01      	subs	r3, #1
 800c350:	061b      	lsls	r3, r3, #24
 800c352:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c356:	4938      	ldr	r1, [pc, #224]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c358:	4313      	orrs	r3, r2
 800c35a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c35c:	4b36      	ldr	r3, [pc, #216]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c360:	4a35      	ldr	r2, [pc, #212]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c362:	f023 0301 	bic.w	r3, r3, #1
 800c366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c368:	4b33      	ldr	r3, [pc, #204]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c36a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c36c:	4b34      	ldr	r3, [pc, #208]	@ (800c440 <HAL_RCC_OscConfig+0x6cc>)
 800c36e:	4013      	ands	r3, r2
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c374:	00d2      	lsls	r2, r2, #3
 800c376:	4930      	ldr	r1, [pc, #192]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c37c:	4b2e      	ldr	r3, [pc, #184]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c380:	f023 020c 	bic.w	r2, r3, #12
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c388:	492b      	ldr	r1, [pc, #172]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c38a:	4313      	orrs	r3, r2
 800c38c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c38e:	4b2a      	ldr	r3, [pc, #168]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c392:	f023 0202 	bic.w	r2, r3, #2
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c39a:	4927      	ldr	r1, [pc, #156]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c39c:	4313      	orrs	r3, r2
 800c39e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c3a0:	4b25      	ldr	r3, [pc, #148]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a4:	4a24      	ldr	r2, [pc, #144]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3ac:	4b22      	ldr	r3, [pc, #136]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b0:	4a21      	ldr	r2, [pc, #132]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c3b8:	4b1f      	ldr	r3, [pc, #124]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3bc:	4a1e      	ldr	r2, [pc, #120]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c3c4:	4b1c      	ldr	r3, [pc, #112]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c8:	4a1b      	ldr	r2, [pc, #108]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3ca:	f043 0301 	orr.w	r3, r3, #1
 800c3ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c3d0:	4b19      	ldr	r3, [pc, #100]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a18      	ldr	r2, [pc, #96]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3dc:	f7fe fb42 	bl	800aa64 <HAL_GetTick>
 800c3e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3e2:	e008      	b.n	800c3f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3e4:	f7fe fb3e 	bl	800aa64 <HAL_GetTick>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d901      	bls.n	800c3f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	e090      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3f6:	4b10      	ldr	r3, [pc, #64]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0f0      	beq.n	800c3e4 <HAL_RCC_OscConfig+0x670>
 800c402:	e088      	b.n	800c516 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c404:	4b0c      	ldr	r3, [pc, #48]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a0b      	ldr	r2, [pc, #44]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c40a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c40e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c410:	f7fe fb28 	bl	800aa64 <HAL_GetTick>
 800c414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c416:	e008      	b.n	800c42a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c418:	f7fe fb24 	bl	800aa64 <HAL_GetTick>
 800c41c:	4602      	mov	r2, r0
 800c41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	2b02      	cmp	r3, #2
 800c424:	d901      	bls.n	800c42a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	e076      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c42a:	4b03      	ldr	r3, [pc, #12]	@ (800c438 <HAL_RCC_OscConfig+0x6c4>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1f0      	bne.n	800c418 <HAL_RCC_OscConfig+0x6a4>
 800c436:	e06e      	b.n	800c516 <HAL_RCC_OscConfig+0x7a2>
 800c438:	58024400 	.word	0x58024400
 800c43c:	fffffc0c 	.word	0xfffffc0c
 800c440:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c444:	4b36      	ldr	r3, [pc, #216]	@ (800c520 <HAL_RCC_OscConfig+0x7ac>)
 800c446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c448:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c44a:	4b35      	ldr	r3, [pc, #212]	@ (800c520 <HAL_RCC_OscConfig+0x7ac>)
 800c44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c44e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c454:	2b01      	cmp	r3, #1
 800c456:	d031      	beq.n	800c4bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	f003 0203 	and.w	r2, r3, #3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c462:	429a      	cmp	r2, r3
 800c464:	d12a      	bne.n	800c4bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	091b      	lsrs	r3, r3, #4
 800c46a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c472:	429a      	cmp	r2, r3
 800c474:	d122      	bne.n	800c4bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c480:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c482:	429a      	cmp	r2, r3
 800c484:	d11a      	bne.n	800c4bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	0a5b      	lsrs	r3, r3, #9
 800c48a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c492:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c494:	429a      	cmp	r2, r3
 800c496:	d111      	bne.n	800c4bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	0c1b      	lsrs	r3, r3, #16
 800c49c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d108      	bne.n	800c4bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	0e1b      	lsrs	r3, r3, #24
 800c4ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d001      	beq.n	800c4c0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e02b      	b.n	800c518 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c4c0:	4b17      	ldr	r3, [pc, #92]	@ (800c520 <HAL_RCC_OscConfig+0x7ac>)
 800c4c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4c4:	08db      	lsrs	r3, r3, #3
 800c4c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d01f      	beq.n	800c516 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c4d6:	4b12      	ldr	r3, [pc, #72]	@ (800c520 <HAL_RCC_OscConfig+0x7ac>)
 800c4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4da:	4a11      	ldr	r2, [pc, #68]	@ (800c520 <HAL_RCC_OscConfig+0x7ac>)
 800c4dc:	f023 0301 	bic.w	r3, r3, #1
 800c4e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c4e2:	f7fe fabf 	bl	800aa64 <HAL_GetTick>
 800c4e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c4e8:	bf00      	nop
 800c4ea:	f7fe fabb 	bl	800aa64 <HAL_GetTick>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d0f9      	beq.n	800c4ea <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c520 <HAL_RCC_OscConfig+0x7ac>)
 800c4f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c524 <HAL_RCC_OscConfig+0x7b0>)
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c502:	00d2      	lsls	r2, r2, #3
 800c504:	4906      	ldr	r1, [pc, #24]	@ (800c520 <HAL_RCC_OscConfig+0x7ac>)
 800c506:	4313      	orrs	r3, r2
 800c508:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c50a:	4b05      	ldr	r3, [pc, #20]	@ (800c520 <HAL_RCC_OscConfig+0x7ac>)
 800c50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c50e:	4a04      	ldr	r2, [pc, #16]	@ (800c520 <HAL_RCC_OscConfig+0x7ac>)
 800c510:	f043 0301 	orr.w	r3, r3, #1
 800c514:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3730      	adds	r7, #48	@ 0x30
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	58024400 	.word	0x58024400
 800c524:	ffff0007 	.word	0xffff0007

0800c528 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	e19c      	b.n	800c876 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c53c:	4b8a      	ldr	r3, [pc, #552]	@ (800c768 <HAL_RCC_ClockConfig+0x240>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 030f 	and.w	r3, r3, #15
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d910      	bls.n	800c56c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c54a:	4b87      	ldr	r3, [pc, #540]	@ (800c768 <HAL_RCC_ClockConfig+0x240>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f023 020f 	bic.w	r2, r3, #15
 800c552:	4985      	ldr	r1, [pc, #532]	@ (800c768 <HAL_RCC_ClockConfig+0x240>)
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	4313      	orrs	r3, r2
 800c558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c55a:	4b83      	ldr	r3, [pc, #524]	@ (800c768 <HAL_RCC_ClockConfig+0x240>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 030f 	and.w	r3, r3, #15
 800c562:	683a      	ldr	r2, [r7, #0]
 800c564:	429a      	cmp	r2, r3
 800c566:	d001      	beq.n	800c56c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	e184      	b.n	800c876 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f003 0304 	and.w	r3, r3, #4
 800c574:	2b00      	cmp	r3, #0
 800c576:	d010      	beq.n	800c59a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	691a      	ldr	r2, [r3, #16]
 800c57c:	4b7b      	ldr	r3, [pc, #492]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c584:	429a      	cmp	r2, r3
 800c586:	d908      	bls.n	800c59a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c588:	4b78      	ldr	r3, [pc, #480]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	4975      	ldr	r1, [pc, #468]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c596:	4313      	orrs	r3, r2
 800c598:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 0308 	and.w	r3, r3, #8
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d010      	beq.n	800c5c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	695a      	ldr	r2, [r3, #20]
 800c5aa:	4b70      	ldr	r3, [pc, #448]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c5ac:	69db      	ldr	r3, [r3, #28]
 800c5ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d908      	bls.n	800c5c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c5b6:	4b6d      	ldr	r3, [pc, #436]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c5b8:	69db      	ldr	r3, [r3, #28]
 800c5ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	496a      	ldr	r1, [pc, #424]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 0310 	and.w	r3, r3, #16
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d010      	beq.n	800c5f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	699a      	ldr	r2, [r3, #24]
 800c5d8:	4b64      	ldr	r3, [pc, #400]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c5da:	69db      	ldr	r3, [r3, #28]
 800c5dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d908      	bls.n	800c5f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c5e4:	4b61      	ldr	r3, [pc, #388]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	495e      	ldr	r1, [pc, #376]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f003 0320 	and.w	r3, r3, #32
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d010      	beq.n	800c624 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	69da      	ldr	r2, [r3, #28]
 800c606:	4b59      	ldr	r3, [pc, #356]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c60e:	429a      	cmp	r2, r3
 800c610:	d908      	bls.n	800c624 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c612:	4b56      	ldr	r3, [pc, #344]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	69db      	ldr	r3, [r3, #28]
 800c61e:	4953      	ldr	r1, [pc, #332]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c620:	4313      	orrs	r3, r2
 800c622:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0302 	and.w	r3, r3, #2
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d010      	beq.n	800c652 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68da      	ldr	r2, [r3, #12]
 800c634:	4b4d      	ldr	r3, [pc, #308]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	f003 030f 	and.w	r3, r3, #15
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d908      	bls.n	800c652 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c640:	4b4a      	ldr	r3, [pc, #296]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	f023 020f 	bic.w	r2, r3, #15
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	4947      	ldr	r1, [pc, #284]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c64e:	4313      	orrs	r3, r2
 800c650:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d055      	beq.n	800c70a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c65e:	4b43      	ldr	r3, [pc, #268]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	4940      	ldr	r1, [pc, #256]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c66c:	4313      	orrs	r3, r2
 800c66e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	2b02      	cmp	r3, #2
 800c676:	d107      	bne.n	800c688 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c678:	4b3c      	ldr	r3, [pc, #240]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d121      	bne.n	800c6c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	e0f6      	b.n	800c876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	2b03      	cmp	r3, #3
 800c68e:	d107      	bne.n	800c6a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c690:	4b36      	ldr	r3, [pc, #216]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d115      	bne.n	800c6c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e0ea      	b.n	800c876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d107      	bne.n	800c6b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c6a8:	4b30      	ldr	r3, [pc, #192]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d109      	bne.n	800c6c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e0de      	b.n	800c876 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c6b8:	4b2c      	ldr	r3, [pc, #176]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f003 0304 	and.w	r3, r3, #4
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e0d6      	b.n	800c876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c6c8:	4b28      	ldr	r3, [pc, #160]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	f023 0207 	bic.w	r2, r3, #7
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	4925      	ldr	r1, [pc, #148]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6da:	f7fe f9c3 	bl	800aa64 <HAL_GetTick>
 800c6de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6e0:	e00a      	b.n	800c6f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c6e2:	f7fe f9bf 	bl	800aa64 <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d901      	bls.n	800c6f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c6f4:	2303      	movs	r3, #3
 800c6f6:	e0be      	b.n	800c876 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6f8:	4b1c      	ldr	r3, [pc, #112]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	00db      	lsls	r3, r3, #3
 800c706:	429a      	cmp	r2, r3
 800c708:	d1eb      	bne.n	800c6e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f003 0302 	and.w	r3, r3, #2
 800c712:	2b00      	cmp	r3, #0
 800c714:	d010      	beq.n	800c738 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	68da      	ldr	r2, [r3, #12]
 800c71a:	4b14      	ldr	r3, [pc, #80]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	f003 030f 	and.w	r3, r3, #15
 800c722:	429a      	cmp	r2, r3
 800c724:	d208      	bcs.n	800c738 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c726:	4b11      	ldr	r3, [pc, #68]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	f023 020f 	bic.w	r2, r3, #15
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	490e      	ldr	r1, [pc, #56]	@ (800c76c <HAL_RCC_ClockConfig+0x244>)
 800c734:	4313      	orrs	r3, r2
 800c736:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c738:	4b0b      	ldr	r3, [pc, #44]	@ (800c768 <HAL_RCC_ClockConfig+0x240>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 030f 	and.w	r3, r3, #15
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	429a      	cmp	r2, r3
 800c744:	d214      	bcs.n	800c770 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c746:	4b08      	ldr	r3, [pc, #32]	@ (800c768 <HAL_RCC_ClockConfig+0x240>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f023 020f 	bic.w	r2, r3, #15
 800c74e:	4906      	ldr	r1, [pc, #24]	@ (800c768 <HAL_RCC_ClockConfig+0x240>)
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	4313      	orrs	r3, r2
 800c754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c756:	4b04      	ldr	r3, [pc, #16]	@ (800c768 <HAL_RCC_ClockConfig+0x240>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 030f 	and.w	r3, r3, #15
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	d005      	beq.n	800c770 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	e086      	b.n	800c876 <HAL_RCC_ClockConfig+0x34e>
 800c768:	52002000 	.word	0x52002000
 800c76c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 0304 	and.w	r3, r3, #4
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d010      	beq.n	800c79e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	691a      	ldr	r2, [r3, #16]
 800c780:	4b3f      	ldr	r3, [pc, #252]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c788:	429a      	cmp	r2, r3
 800c78a:	d208      	bcs.n	800c79e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c78c:	4b3c      	ldr	r3, [pc, #240]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	4939      	ldr	r1, [pc, #228]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c79a:	4313      	orrs	r3, r2
 800c79c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 0308 	and.w	r3, r3, #8
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d010      	beq.n	800c7cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	695a      	ldr	r2, [r3, #20]
 800c7ae:	4b34      	ldr	r3, [pc, #208]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d208      	bcs.n	800c7cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c7ba:	4b31      	ldr	r3, [pc, #196]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c7bc:	69db      	ldr	r3, [r3, #28]
 800c7be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	695b      	ldr	r3, [r3, #20]
 800c7c6:	492e      	ldr	r1, [pc, #184]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 0310 	and.w	r3, r3, #16
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d010      	beq.n	800c7fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	699a      	ldr	r2, [r3, #24]
 800c7dc:	4b28      	ldr	r3, [pc, #160]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c7de:	69db      	ldr	r3, [r3, #28]
 800c7e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d208      	bcs.n	800c7fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c7e8:	4b25      	ldr	r3, [pc, #148]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c7ea:	69db      	ldr	r3, [r3, #28]
 800c7ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	699b      	ldr	r3, [r3, #24]
 800c7f4:	4922      	ldr	r1, [pc, #136]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 0320 	and.w	r3, r3, #32
 800c802:	2b00      	cmp	r3, #0
 800c804:	d010      	beq.n	800c828 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	69da      	ldr	r2, [r3, #28]
 800c80a:	4b1d      	ldr	r3, [pc, #116]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c80c:	6a1b      	ldr	r3, [r3, #32]
 800c80e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c812:	429a      	cmp	r2, r3
 800c814:	d208      	bcs.n	800c828 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c816:	4b1a      	ldr	r3, [pc, #104]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	69db      	ldr	r3, [r3, #28]
 800c822:	4917      	ldr	r1, [pc, #92]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c824:	4313      	orrs	r3, r2
 800c826:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c828:	f000 f834 	bl	800c894 <HAL_RCC_GetSysClockFreq>
 800c82c:	4602      	mov	r2, r0
 800c82e:	4b14      	ldr	r3, [pc, #80]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c830:	699b      	ldr	r3, [r3, #24]
 800c832:	0a1b      	lsrs	r3, r3, #8
 800c834:	f003 030f 	and.w	r3, r3, #15
 800c838:	4912      	ldr	r1, [pc, #72]	@ (800c884 <HAL_RCC_ClockConfig+0x35c>)
 800c83a:	5ccb      	ldrb	r3, [r1, r3]
 800c83c:	f003 031f 	and.w	r3, r3, #31
 800c840:	fa22 f303 	lsr.w	r3, r2, r3
 800c844:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c846:	4b0e      	ldr	r3, [pc, #56]	@ (800c880 <HAL_RCC_ClockConfig+0x358>)
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	f003 030f 	and.w	r3, r3, #15
 800c84e:	4a0d      	ldr	r2, [pc, #52]	@ (800c884 <HAL_RCC_ClockConfig+0x35c>)
 800c850:	5cd3      	ldrb	r3, [r2, r3]
 800c852:	f003 031f 	and.w	r3, r3, #31
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	fa22 f303 	lsr.w	r3, r2, r3
 800c85c:	4a0a      	ldr	r2, [pc, #40]	@ (800c888 <HAL_RCC_ClockConfig+0x360>)
 800c85e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c860:	4a0a      	ldr	r2, [pc, #40]	@ (800c88c <HAL_RCC_ClockConfig+0x364>)
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c866:	4b0a      	ldr	r3, [pc, #40]	@ (800c890 <HAL_RCC_ClockConfig+0x368>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fe f8b0 	bl	800a9d0 <HAL_InitTick>
 800c870:	4603      	mov	r3, r0
 800c872:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c874:	7bfb      	ldrb	r3, [r7, #15]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	58024400 	.word	0x58024400
 800c884:	08019eb0 	.word	0x08019eb0
 800c888:	2400015c 	.word	0x2400015c
 800c88c:	24000158 	.word	0x24000158
 800c890:	24000180 	.word	0x24000180

0800c894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c894:	b480      	push	{r7}
 800c896:	b089      	sub	sp, #36	@ 0x24
 800c898:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c89a:	4bb3      	ldr	r3, [pc, #716]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8a2:	2b18      	cmp	r3, #24
 800c8a4:	f200 8155 	bhi.w	800cb52 <HAL_RCC_GetSysClockFreq+0x2be>
 800c8a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c8b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ae:	bf00      	nop
 800c8b0:	0800c915 	.word	0x0800c915
 800c8b4:	0800cb53 	.word	0x0800cb53
 800c8b8:	0800cb53 	.word	0x0800cb53
 800c8bc:	0800cb53 	.word	0x0800cb53
 800c8c0:	0800cb53 	.word	0x0800cb53
 800c8c4:	0800cb53 	.word	0x0800cb53
 800c8c8:	0800cb53 	.word	0x0800cb53
 800c8cc:	0800cb53 	.word	0x0800cb53
 800c8d0:	0800c93b 	.word	0x0800c93b
 800c8d4:	0800cb53 	.word	0x0800cb53
 800c8d8:	0800cb53 	.word	0x0800cb53
 800c8dc:	0800cb53 	.word	0x0800cb53
 800c8e0:	0800cb53 	.word	0x0800cb53
 800c8e4:	0800cb53 	.word	0x0800cb53
 800c8e8:	0800cb53 	.word	0x0800cb53
 800c8ec:	0800cb53 	.word	0x0800cb53
 800c8f0:	0800c941 	.word	0x0800c941
 800c8f4:	0800cb53 	.word	0x0800cb53
 800c8f8:	0800cb53 	.word	0x0800cb53
 800c8fc:	0800cb53 	.word	0x0800cb53
 800c900:	0800cb53 	.word	0x0800cb53
 800c904:	0800cb53 	.word	0x0800cb53
 800c908:	0800cb53 	.word	0x0800cb53
 800c90c:	0800cb53 	.word	0x0800cb53
 800c910:	0800c947 	.word	0x0800c947
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c914:	4b94      	ldr	r3, [pc, #592]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 0320 	and.w	r3, r3, #32
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d009      	beq.n	800c934 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c920:	4b91      	ldr	r3, [pc, #580]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	08db      	lsrs	r3, r3, #3
 800c926:	f003 0303 	and.w	r3, r3, #3
 800c92a:	4a90      	ldr	r2, [pc, #576]	@ (800cb6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c92c:	fa22 f303 	lsr.w	r3, r2, r3
 800c930:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c932:	e111      	b.n	800cb58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c934:	4b8d      	ldr	r3, [pc, #564]	@ (800cb6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c936:	61bb      	str	r3, [r7, #24]
      break;
 800c938:	e10e      	b.n	800cb58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c93a:	4b8d      	ldr	r3, [pc, #564]	@ (800cb70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c93c:	61bb      	str	r3, [r7, #24]
      break;
 800c93e:	e10b      	b.n	800cb58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c940:	4b8c      	ldr	r3, [pc, #560]	@ (800cb74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c942:	61bb      	str	r3, [r7, #24]
      break;
 800c944:	e108      	b.n	800cb58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c946:	4b88      	ldr	r3, [pc, #544]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c94a:	f003 0303 	and.w	r3, r3, #3
 800c94e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c950:	4b85      	ldr	r3, [pc, #532]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c954:	091b      	lsrs	r3, r3, #4
 800c956:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c95a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c95c:	4b82      	ldr	r3, [pc, #520]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c960:	f003 0301 	and.w	r3, r3, #1
 800c964:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c966:	4b80      	ldr	r3, [pc, #512]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c96a:	08db      	lsrs	r3, r3, #3
 800c96c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	fb02 f303 	mul.w	r3, r2, r3
 800c976:	ee07 3a90 	vmov	s15, r3
 800c97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 80e1 	beq.w	800cb4c <HAL_RCC_GetSysClockFreq+0x2b8>
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	f000 8083 	beq.w	800ca98 <HAL_RCC_GetSysClockFreq+0x204>
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	2b02      	cmp	r3, #2
 800c996:	f200 80a1 	bhi.w	800cadc <HAL_RCC_GetSysClockFreq+0x248>
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d003      	beq.n	800c9a8 <HAL_RCC_GetSysClockFreq+0x114>
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d056      	beq.n	800ca54 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c9a6:	e099      	b.n	800cadc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9a8:	4b6f      	ldr	r3, [pc, #444]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f003 0320 	and.w	r3, r3, #32
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d02d      	beq.n	800ca10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9b4:	4b6c      	ldr	r3, [pc, #432]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	08db      	lsrs	r3, r3, #3
 800c9ba:	f003 0303 	and.w	r3, r3, #3
 800c9be:	4a6b      	ldr	r2, [pc, #428]	@ (800cb6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	ee07 3a90 	vmov	s15, r3
 800c9cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	ee07 3a90 	vmov	s15, r3
 800c9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9de:	4b62      	ldr	r3, [pc, #392]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800cb78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ca0e:	e087      	b.n	800cb20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	ee07 3a90 	vmov	s15, r3
 800ca16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800cb7c <HAL_RCC_GetSysClockFreq+0x2e8>
 800ca1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca22:	4b51      	ldr	r3, [pc, #324]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca2a:	ee07 3a90 	vmov	s15, r3
 800ca2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca32:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800cb78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca52:	e065      	b.n	800cb20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800cb80 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ca62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca66:	4b40      	ldr	r3, [pc, #256]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca6e:	ee07 3a90 	vmov	s15, r3
 800ca72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca76:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cb78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca96:	e043      	b.n	800cb20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	ee07 3a90 	vmov	s15, r3
 800ca9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800cb84 <HAL_RCC_GetSysClockFreq+0x2f0>
 800caa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caaa:	4b2f      	ldr	r3, [pc, #188]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800caac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab2:	ee07 3a90 	vmov	s15, r3
 800cab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caba:	ed97 6a02 	vldr	s12, [r7, #8]
 800cabe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800cb78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cada:	e021      	b.n	800cb20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	ee07 3a90 	vmov	s15, r3
 800cae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800cb80 <HAL_RCC_GetSysClockFreq+0x2ec>
 800caea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caee:	4b1e      	ldr	r3, [pc, #120]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800caf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf6:	ee07 3a90 	vmov	s15, r3
 800cafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafe:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb02:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800cb78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cb06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cb1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800cb20:	4b11      	ldr	r3, [pc, #68]	@ (800cb68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb24:	0a5b      	lsrs	r3, r3, #9
 800cb26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	ee07 3a90 	vmov	s15, r3
 800cb34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb38:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb44:	ee17 3a90 	vmov	r3, s15
 800cb48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800cb4a:	e005      	b.n	800cb58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	61bb      	str	r3, [r7, #24]
      break;
 800cb50:	e002      	b.n	800cb58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cb52:	4b07      	ldr	r3, [pc, #28]	@ (800cb70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cb54:	61bb      	str	r3, [r7, #24]
      break;
 800cb56:	bf00      	nop
  }

  return sysclockfreq;
 800cb58:	69bb      	ldr	r3, [r7, #24]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3724      	adds	r7, #36	@ 0x24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	58024400 	.word	0x58024400
 800cb6c:	03d09000 	.word	0x03d09000
 800cb70:	003d0900 	.word	0x003d0900
 800cb74:	02dc6c00 	.word	0x02dc6c00
 800cb78:	46000000 	.word	0x46000000
 800cb7c:	4c742400 	.word	0x4c742400
 800cb80:	4a742400 	.word	0x4a742400
 800cb84:	4c371b00 	.word	0x4c371b00

0800cb88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cb8e:	f7ff fe81 	bl	800c894 <HAL_RCC_GetSysClockFreq>
 800cb92:	4602      	mov	r2, r0
 800cb94:	4b10      	ldr	r3, [pc, #64]	@ (800cbd8 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	0a1b      	lsrs	r3, r3, #8
 800cb9a:	f003 030f 	and.w	r3, r3, #15
 800cb9e:	490f      	ldr	r1, [pc, #60]	@ (800cbdc <HAL_RCC_GetHCLKFreq+0x54>)
 800cba0:	5ccb      	ldrb	r3, [r1, r3]
 800cba2:	f003 031f 	and.w	r3, r3, #31
 800cba6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbaa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cbac:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd8 <HAL_RCC_GetHCLKFreq+0x50>)
 800cbae:	699b      	ldr	r3, [r3, #24]
 800cbb0:	f003 030f 	and.w	r3, r3, #15
 800cbb4:	4a09      	ldr	r2, [pc, #36]	@ (800cbdc <HAL_RCC_GetHCLKFreq+0x54>)
 800cbb6:	5cd3      	ldrb	r3, [r2, r3]
 800cbb8:	f003 031f 	and.w	r3, r3, #31
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	fa22 f303 	lsr.w	r3, r2, r3
 800cbc2:	4a07      	ldr	r2, [pc, #28]	@ (800cbe0 <HAL_RCC_GetHCLKFreq+0x58>)
 800cbc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cbc6:	4a07      	ldr	r2, [pc, #28]	@ (800cbe4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cbcc:	4b04      	ldr	r3, [pc, #16]	@ (800cbe0 <HAL_RCC_GetHCLKFreq+0x58>)
 800cbce:	681b      	ldr	r3, [r3, #0]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	58024400 	.word	0x58024400
 800cbdc:	08019eb0 	.word	0x08019eb0
 800cbe0:	2400015c 	.word	0x2400015c
 800cbe4:	24000158 	.word	0x24000158

0800cbe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cbec:	f7ff ffcc 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	4b06      	ldr	r3, [pc, #24]	@ (800cc0c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cbf4:	69db      	ldr	r3, [r3, #28]
 800cbf6:	091b      	lsrs	r3, r3, #4
 800cbf8:	f003 0307 	and.w	r3, r3, #7
 800cbfc:	4904      	ldr	r1, [pc, #16]	@ (800cc10 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cbfe:	5ccb      	ldrb	r3, [r1, r3]
 800cc00:	f003 031f 	and.w	r3, r3, #31
 800cc04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	58024400 	.word	0x58024400
 800cc10:	08019eb0 	.word	0x08019eb0

0800cc14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800cc18:	f7ff ffb6 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	4b06      	ldr	r3, [pc, #24]	@ (800cc38 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc20:	69db      	ldr	r3, [r3, #28]
 800cc22:	0a1b      	lsrs	r3, r3, #8
 800cc24:	f003 0307 	and.w	r3, r3, #7
 800cc28:	4904      	ldr	r1, [pc, #16]	@ (800cc3c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cc2a:	5ccb      	ldrb	r3, [r1, r3]
 800cc2c:	f003 031f 	and.w	r3, r3, #31
 800cc30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	58024400 	.word	0x58024400
 800cc3c:	08019eb0 	.word	0x08019eb0

0800cc40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cc40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc44:	b0c6      	sub	sp, #280	@ 0x118
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cc52:	2300      	movs	r3, #0
 800cc54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cc58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800cc64:	2500      	movs	r5, #0
 800cc66:	ea54 0305 	orrs.w	r3, r4, r5
 800cc6a:	d049      	beq.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cc6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc76:	d02f      	beq.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cc78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc7c:	d828      	bhi.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc82:	d01a      	beq.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cc84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc88:	d822      	bhi.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cc8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc92:	d007      	beq.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cc94:	e01c      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc96:	4bab      	ldr	r3, [pc, #684]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc9a:	4aaa      	ldr	r2, [pc, #680]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cc9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cca2:	e01a      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca8:	3308      	adds	r3, #8
 800ccaa:	2102      	movs	r1, #2
 800ccac:	4618      	mov	r0, r3
 800ccae:	f002 fa49 	bl	800f144 <RCCEx_PLL2_Config>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ccb8:	e00f      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ccba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccbe:	3328      	adds	r3, #40	@ 0x28
 800ccc0:	2102      	movs	r1, #2
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f002 faf0 	bl	800f2a8 <RCCEx_PLL3_Config>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ccce:	e004      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccd6:	e000      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ccd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10a      	bne.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cce2:	4b98      	ldr	r3, [pc, #608]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cce6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ccea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccf0:	4a94      	ldr	r2, [pc, #592]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ccf2:	430b      	orrs	r3, r1
 800ccf4:	6513      	str	r3, [r2, #80]	@ 0x50
 800ccf6:	e003      	b.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cd00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800cd0c:	f04f 0900 	mov.w	r9, #0
 800cd10:	ea58 0309 	orrs.w	r3, r8, r9
 800cd14:	d047      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800cd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	d82a      	bhi.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cd20:	a201      	add	r2, pc, #4	@ (adr r2, 800cd28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800cd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd26:	bf00      	nop
 800cd28:	0800cd3d 	.word	0x0800cd3d
 800cd2c:	0800cd4b 	.word	0x0800cd4b
 800cd30:	0800cd61 	.word	0x0800cd61
 800cd34:	0800cd7f 	.word	0x0800cd7f
 800cd38:	0800cd7f 	.word	0x0800cd7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd3c:	4b81      	ldr	r3, [pc, #516]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd40:	4a80      	ldr	r2, [pc, #512]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cd42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd48:	e01a      	b.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd4e:	3308      	adds	r3, #8
 800cd50:	2100      	movs	r1, #0
 800cd52:	4618      	mov	r0, r3
 800cd54:	f002 f9f6 	bl	800f144 <RCCEx_PLL2_Config>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd5e:	e00f      	b.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd64:	3328      	adds	r3, #40	@ 0x28
 800cd66:	2100      	movs	r1, #0
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f002 fa9d 	bl	800f2a8 <RCCEx_PLL3_Config>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd74:	e004      	b.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd7c:	e000      	b.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cd7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd88:	4b6e      	ldr	r3, [pc, #440]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cd8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd8c:	f023 0107 	bic.w	r1, r3, #7
 800cd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd96:	4a6b      	ldr	r2, [pc, #428]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cd98:	430b      	orrs	r3, r1
 800cd9a:	6513      	str	r3, [r2, #80]	@ 0x50
 800cd9c:	e003      	b.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cda2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdae:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800cdb2:	f04f 0b00 	mov.w	fp, #0
 800cdb6:	ea5a 030b 	orrs.w	r3, sl, fp
 800cdba:	d05b      	beq.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800cdbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cdc4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cdc8:	d03b      	beq.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800cdca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800cdce:	d834      	bhi.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cdd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cdd4:	d037      	beq.n	800ce46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800cdd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cdda:	d82e      	bhi.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cddc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cde0:	d033      	beq.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800cde2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cde6:	d828      	bhi.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cde8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cdec:	d01a      	beq.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800cdee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cdf2:	d822      	bhi.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d003      	beq.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800cdf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cdfc:	d007      	beq.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800cdfe:	e01c      	b.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce00:	4b50      	ldr	r3, [pc, #320]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ce02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce04:	4a4f      	ldr	r2, [pc, #316]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ce06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce0c:	e01e      	b.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce12:	3308      	adds	r3, #8
 800ce14:	2100      	movs	r1, #0
 800ce16:	4618      	mov	r0, r3
 800ce18:	f002 f994 	bl	800f144 <RCCEx_PLL2_Config>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ce22:	e013      	b.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce28:	3328      	adds	r3, #40	@ 0x28
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f002 fa3b 	bl	800f2a8 <RCCEx_PLL3_Config>
 800ce32:	4603      	mov	r3, r0
 800ce34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce38:	e008      	b.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce40:	e004      	b.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ce42:	bf00      	nop
 800ce44:	e002      	b.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ce46:	bf00      	nop
 800ce48:	e000      	b.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ce4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10b      	bne.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ce54:	4b3b      	ldr	r3, [pc, #236]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ce56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce58:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ce5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ce64:	4a37      	ldr	r2, [pc, #220]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ce66:	430b      	orrs	r3, r1
 800ce68:	6593      	str	r3, [r2, #88]	@ 0x58
 800ce6a:	e003      	b.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ce74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ce80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ce84:	2300      	movs	r3, #0
 800ce86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ce8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ce8e:	460b      	mov	r3, r1
 800ce90:	4313      	orrs	r3, r2
 800ce92:	d05d      	beq.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ce94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ce9c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800cea0:	d03b      	beq.n	800cf1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800cea2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800cea6:	d834      	bhi.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800cea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ceac:	d037      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ceae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ceb2:	d82e      	bhi.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ceb4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ceb8:	d033      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ceba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cebe:	d828      	bhi.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800cec0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cec4:	d01a      	beq.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800cec6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ceca:	d822      	bhi.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d003      	beq.n	800ced8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ced0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ced4:	d007      	beq.n	800cee6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ced6:	e01c      	b.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ced8:	4b1a      	ldr	r3, [pc, #104]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ceda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cedc:	4a19      	ldr	r2, [pc, #100]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cee4:	e01e      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceea:	3308      	adds	r3, #8
 800ceec:	2100      	movs	r1, #0
 800ceee:	4618      	mov	r0, r3
 800cef0:	f002 f928 	bl	800f144 <RCCEx_PLL2_Config>
 800cef4:	4603      	mov	r3, r0
 800cef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cefa:	e013      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cefc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf00:	3328      	adds	r3, #40	@ 0x28
 800cf02:	2100      	movs	r1, #0
 800cf04:	4618      	mov	r0, r3
 800cf06:	f002 f9cf 	bl	800f2a8 <RCCEx_PLL3_Config>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf10:	e008      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf18:	e004      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800cf1a:	bf00      	nop
 800cf1c:	e002      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800cf1e:	bf00      	nop
 800cf20:	e000      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800cf22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10d      	bne.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cf2c:	4b05      	ldr	r3, [pc, #20]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cf2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf30:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800cf34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cf3c:	4a01      	ldr	r2, [pc, #4]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800cf3e:	430b      	orrs	r3, r1
 800cf40:	6593      	str	r3, [r2, #88]	@ 0x58
 800cf42:	e005      	b.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800cf44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800cf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800cf5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800cf60:	2300      	movs	r3, #0
 800cf62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800cf66:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	d03a      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800cf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf76:	2b30      	cmp	r3, #48	@ 0x30
 800cf78:	d01f      	beq.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800cf7a:	2b30      	cmp	r3, #48	@ 0x30
 800cf7c:	d819      	bhi.n	800cfb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800cf7e:	2b20      	cmp	r3, #32
 800cf80:	d00c      	beq.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800cf82:	2b20      	cmp	r3, #32
 800cf84:	d815      	bhi.n	800cfb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d019      	beq.n	800cfbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cf8a:	2b10      	cmp	r3, #16
 800cf8c:	d111      	bne.n	800cfb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf8e:	4baa      	ldr	r3, [pc, #680]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cf90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf92:	4aa9      	ldr	r2, [pc, #676]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cf94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800cf9a:	e011      	b.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cf9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	2102      	movs	r1, #2
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f002 f8cd 	bl	800f144 <RCCEx_PLL2_Config>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800cfb0:	e006      	b.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cfb8:	e002      	b.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800cfba:	bf00      	nop
 800cfbc:	e000      	b.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800cfbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10a      	bne.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800cfc8:	4b9b      	ldr	r3, [pc, #620]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cfca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfcc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800cfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfd6:	4a98      	ldr	r2, [pc, #608]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cfd8:	430b      	orrs	r3, r1
 800cfda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cfdc:	e003      	b.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfe2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800cff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cff6:	2300      	movs	r3, #0
 800cff8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cffc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d000:	460b      	mov	r3, r1
 800d002:	4313      	orrs	r3, r2
 800d004:	d051      	beq.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d00a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d00c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d010:	d035      	beq.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800d012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d016:	d82e      	bhi.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800d018:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d01c:	d031      	beq.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800d01e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d022:	d828      	bhi.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800d024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d028:	d01a      	beq.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800d02a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d02e:	d822      	bhi.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800d030:	2b00      	cmp	r3, #0
 800d032:	d003      	beq.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800d034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d038:	d007      	beq.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800d03a:	e01c      	b.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d03c:	4b7e      	ldr	r3, [pc, #504]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d040:	4a7d      	ldr	r2, [pc, #500]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d048:	e01c      	b.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d04e:	3308      	adds	r3, #8
 800d050:	2100      	movs	r1, #0
 800d052:	4618      	mov	r0, r3
 800d054:	f002 f876 	bl	800f144 <RCCEx_PLL2_Config>
 800d058:	4603      	mov	r3, r0
 800d05a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d05e:	e011      	b.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d064:	3328      	adds	r3, #40	@ 0x28
 800d066:	2100      	movs	r1, #0
 800d068:	4618      	mov	r0, r3
 800d06a:	f002 f91d 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d06e:	4603      	mov	r3, r0
 800d070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d074:	e006      	b.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d07c:	e002      	b.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800d07e:	bf00      	nop
 800d080:	e000      	b.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800d082:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10a      	bne.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d08c:	4b6a      	ldr	r3, [pc, #424]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d08e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d090:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d09a:	4a67      	ldr	r2, [pc, #412]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d09c:	430b      	orrs	r3, r1
 800d09e:	6513      	str	r3, [r2, #80]	@ 0x50
 800d0a0:	e003      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d0b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d0c0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	d053      	beq.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d0d4:	d033      	beq.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800d0d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d0da:	d82c      	bhi.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d0dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d0e0:	d02f      	beq.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800d0e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d0e6:	d826      	bhi.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d0e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d0ec:	d02b      	beq.n	800d146 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800d0ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d0f2:	d820      	bhi.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d0f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0f8:	d012      	beq.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800d0fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0fe:	d81a      	bhi.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800d100:	2b00      	cmp	r3, #0
 800d102:	d022      	beq.n	800d14a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800d104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d108:	d115      	bne.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d10e:	3308      	adds	r3, #8
 800d110:	2101      	movs	r1, #1
 800d112:	4618      	mov	r0, r3
 800d114:	f002 f816 	bl	800f144 <RCCEx_PLL2_Config>
 800d118:	4603      	mov	r3, r0
 800d11a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d11e:	e015      	b.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d124:	3328      	adds	r3, #40	@ 0x28
 800d126:	2101      	movs	r1, #1
 800d128:	4618      	mov	r0, r3
 800d12a:	f002 f8bd 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d12e:	4603      	mov	r3, r0
 800d130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d134:	e00a      	b.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d13c:	e006      	b.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d13e:	bf00      	nop
 800d140:	e004      	b.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d142:	bf00      	nop
 800d144:	e002      	b.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d146:	bf00      	nop
 800d148:	e000      	b.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800d14a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d14c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10a      	bne.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d154:	4b38      	ldr	r3, [pc, #224]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d158:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d162:	4a35      	ldr	r2, [pc, #212]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d164:	430b      	orrs	r3, r1
 800d166:	6513      	str	r3, [r2, #80]	@ 0x50
 800d168:	e003      	b.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d16a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d16e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d17e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d182:	2300      	movs	r3, #0
 800d184:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d188:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d18c:	460b      	mov	r3, r1
 800d18e:	4313      	orrs	r3, r2
 800d190:	d058      	beq.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d196:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d19a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d19e:	d033      	beq.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800d1a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d1a4:	d82c      	bhi.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1aa:	d02f      	beq.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800d1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1b0:	d826      	bhi.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d1b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d1b6:	d02b      	beq.n	800d210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800d1b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d1bc:	d820      	bhi.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d1be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1c2:	d012      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800d1c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1c8:	d81a      	bhi.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d022      	beq.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d1ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1d2:	d115      	bne.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1d8:	3308      	adds	r3, #8
 800d1da:	2101      	movs	r1, #1
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f001 ffb1 	bl	800f144 <RCCEx_PLL2_Config>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d1e8:	e015      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ee:	3328      	adds	r3, #40	@ 0x28
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f002 f858 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d1fe:	e00a      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d206:	e006      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d208:	bf00      	nop
 800d20a:	e004      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d20c:	bf00      	nop
 800d20e:	e002      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d210:	bf00      	nop
 800d212:	e000      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800d214:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10e      	bne.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d21e:	4b06      	ldr	r3, [pc, #24]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d222:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d22a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d22e:	4a02      	ldr	r2, [pc, #8]	@ (800d238 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800d230:	430b      	orrs	r3, r1
 800d232:	6593      	str	r3, [r2, #88]	@ 0x58
 800d234:	e006      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800d236:	bf00      	nop
 800d238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d23c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d240:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d250:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d254:	2300      	movs	r3, #0
 800d256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d25a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d25e:	460b      	mov	r3, r1
 800d260:	4313      	orrs	r3, r2
 800d262:	d037      	beq.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d26a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d26e:	d00e      	beq.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800d270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d274:	d816      	bhi.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800d276:	2b00      	cmp	r3, #0
 800d278:	d018      	beq.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800d27a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d27e:	d111      	bne.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d280:	4bc4      	ldr	r3, [pc, #784]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d284:	4ac3      	ldr	r2, [pc, #780]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d28a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d28c:	e00f      	b.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d292:	3308      	adds	r3, #8
 800d294:	2101      	movs	r1, #1
 800d296:	4618      	mov	r0, r3
 800d298:	f001 ff54 	bl	800f144 <RCCEx_PLL2_Config>
 800d29c:	4603      	mov	r3, r0
 800d29e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d2a2:	e004      	b.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d2aa:	e000      	b.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800d2ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10a      	bne.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d2b6:	4bb7      	ldr	r3, [pc, #732]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d2b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2c4:	4ab3      	ldr	r2, [pc, #716]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d2c6:	430b      	orrs	r3, r1
 800d2c8:	6513      	str	r3, [r2, #80]	@ 0x50
 800d2ca:	e003      	b.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d2e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d2ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	d039      	beq.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2fa:	2b03      	cmp	r3, #3
 800d2fc:	d81c      	bhi.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800d2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d304 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d341 	.word	0x0800d341
 800d308:	0800d315 	.word	0x0800d315
 800d30c:	0800d323 	.word	0x0800d323
 800d310:	0800d341 	.word	0x0800d341
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d314:	4b9f      	ldr	r3, [pc, #636]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d318:	4a9e      	ldr	r2, [pc, #632]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d31a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d31e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d320:	e00f      	b.n	800d342 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d326:	3308      	adds	r3, #8
 800d328:	2102      	movs	r1, #2
 800d32a:	4618      	mov	r0, r3
 800d32c:	f001 ff0a 	bl	800f144 <RCCEx_PLL2_Config>
 800d330:	4603      	mov	r3, r0
 800d332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d336:	e004      	b.n	800d342 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d33e:	e000      	b.n	800d342 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800d340:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10a      	bne.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d34a:	4b92      	ldr	r3, [pc, #584]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d34c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d34e:	f023 0103 	bic.w	r1, r3, #3
 800d352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d358:	4a8e      	ldr	r2, [pc, #568]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d35a:	430b      	orrs	r3, r1
 800d35c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d35e:	e003      	b.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d370:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d378:	2300      	movs	r3, #0
 800d37a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d37e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d382:	460b      	mov	r3, r1
 800d384:	4313      	orrs	r3, r2
 800d386:	f000 8099 	beq.w	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d38a:	4b83      	ldr	r3, [pc, #524]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a82      	ldr	r2, [pc, #520]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d394:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d396:	f7fd fb65 	bl	800aa64 <HAL_GetTick>
 800d39a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d39e:	e00b      	b.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3a0:	f7fd fb60 	bl	800aa64 <HAL_GetTick>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	2b64      	cmp	r3, #100	@ 0x64
 800d3ae:	d903      	bls.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d3b6:	e005      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3b8:	4b77      	ldr	r3, [pc, #476]	@ (800d598 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d0ed      	beq.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800d3c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d173      	bne.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d3cc:	4b71      	ldr	r3, [pc, #452]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d3ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d3d8:	4053      	eors	r3, r2
 800d3da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d015      	beq.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d3e2:	4b6c      	ldr	r3, [pc, #432]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d3e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d3ea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d3ee:	4b69      	ldr	r3, [pc, #420]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3f2:	4a68      	ldr	r2, [pc, #416]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d3f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d3fa:	4b66      	ldr	r3, [pc, #408]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3fe:	4a65      	ldr	r2, [pc, #404]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d404:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d406:	4a63      	ldr	r2, [pc, #396]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d40c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d412:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d41a:	d118      	bne.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d41c:	f7fd fb22 	bl	800aa64 <HAL_GetTick>
 800d420:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d424:	e00d      	b.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d426:	f7fd fb1d 	bl	800aa64 <HAL_GetTick>
 800d42a:	4602      	mov	r2, r0
 800d42c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800d430:	1ad2      	subs	r2, r2, r3
 800d432:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d436:	429a      	cmp	r2, r3
 800d438:	d903      	bls.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800d43a:	2303      	movs	r3, #3
 800d43c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800d440:	e005      	b.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d442:	4b54      	ldr	r3, [pc, #336]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d446:	f003 0302 	and.w	r3, r3, #2
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d0eb      	beq.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800d44e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d452:	2b00      	cmp	r3, #0
 800d454:	d129      	bne.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d45a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d45e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d466:	d10e      	bne.n	800d486 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800d468:	4b4a      	ldr	r3, [pc, #296]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d474:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d478:	091a      	lsrs	r2, r3, #4
 800d47a:	4b48      	ldr	r3, [pc, #288]	@ (800d59c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d47c:	4013      	ands	r3, r2
 800d47e:	4a45      	ldr	r2, [pc, #276]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d480:	430b      	orrs	r3, r1
 800d482:	6113      	str	r3, [r2, #16]
 800d484:	e005      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800d486:	4b43      	ldr	r3, [pc, #268]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	4a42      	ldr	r2, [pc, #264]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d48c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d490:	6113      	str	r3, [r2, #16]
 800d492:	4b40      	ldr	r3, [pc, #256]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d494:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d49a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d49e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4a2:	4a3c      	ldr	r2, [pc, #240]	@ (800d594 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d4a4:	430b      	orrs	r3, r1
 800d4a6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d4a8:	e008      	b.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d4aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800d4b2:	e003      	b.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f002 0301 	and.w	r3, r2, #1
 800d4c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d4d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	f000 808f 	beq.w	800d5fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d4e4:	2b28      	cmp	r3, #40	@ 0x28
 800d4e6:	d871      	bhi.n	800d5cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800d4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800d4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ee:	bf00      	nop
 800d4f0:	0800d5d5 	.word	0x0800d5d5
 800d4f4:	0800d5cd 	.word	0x0800d5cd
 800d4f8:	0800d5cd 	.word	0x0800d5cd
 800d4fc:	0800d5cd 	.word	0x0800d5cd
 800d500:	0800d5cd 	.word	0x0800d5cd
 800d504:	0800d5cd 	.word	0x0800d5cd
 800d508:	0800d5cd 	.word	0x0800d5cd
 800d50c:	0800d5cd 	.word	0x0800d5cd
 800d510:	0800d5a1 	.word	0x0800d5a1
 800d514:	0800d5cd 	.word	0x0800d5cd
 800d518:	0800d5cd 	.word	0x0800d5cd
 800d51c:	0800d5cd 	.word	0x0800d5cd
 800d520:	0800d5cd 	.word	0x0800d5cd
 800d524:	0800d5cd 	.word	0x0800d5cd
 800d528:	0800d5cd 	.word	0x0800d5cd
 800d52c:	0800d5cd 	.word	0x0800d5cd
 800d530:	0800d5b7 	.word	0x0800d5b7
 800d534:	0800d5cd 	.word	0x0800d5cd
 800d538:	0800d5cd 	.word	0x0800d5cd
 800d53c:	0800d5cd 	.word	0x0800d5cd
 800d540:	0800d5cd 	.word	0x0800d5cd
 800d544:	0800d5cd 	.word	0x0800d5cd
 800d548:	0800d5cd 	.word	0x0800d5cd
 800d54c:	0800d5cd 	.word	0x0800d5cd
 800d550:	0800d5d5 	.word	0x0800d5d5
 800d554:	0800d5cd 	.word	0x0800d5cd
 800d558:	0800d5cd 	.word	0x0800d5cd
 800d55c:	0800d5cd 	.word	0x0800d5cd
 800d560:	0800d5cd 	.word	0x0800d5cd
 800d564:	0800d5cd 	.word	0x0800d5cd
 800d568:	0800d5cd 	.word	0x0800d5cd
 800d56c:	0800d5cd 	.word	0x0800d5cd
 800d570:	0800d5d5 	.word	0x0800d5d5
 800d574:	0800d5cd 	.word	0x0800d5cd
 800d578:	0800d5cd 	.word	0x0800d5cd
 800d57c:	0800d5cd 	.word	0x0800d5cd
 800d580:	0800d5cd 	.word	0x0800d5cd
 800d584:	0800d5cd 	.word	0x0800d5cd
 800d588:	0800d5cd 	.word	0x0800d5cd
 800d58c:	0800d5cd 	.word	0x0800d5cd
 800d590:	0800d5d5 	.word	0x0800d5d5
 800d594:	58024400 	.word	0x58024400
 800d598:	58024800 	.word	0x58024800
 800d59c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	2101      	movs	r1, #1
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f001 fdcb 	bl	800f144 <RCCEx_PLL2_Config>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d5b4:	e00f      	b.n	800d5d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ba:	3328      	adds	r3, #40	@ 0x28
 800d5bc:	2101      	movs	r1, #1
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f001 fe72 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d5ca:	e004      	b.n	800d5d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d5d2:	e000      	b.n	800d5d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800d5d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10a      	bne.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d5de:	4bbf      	ldr	r3, [pc, #764]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5ec:	4abb      	ldr	r2, [pc, #748]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d5ee:	430b      	orrs	r3, r1
 800d5f0:	6553      	str	r3, [r2, #84]	@ 0x54
 800d5f2:	e003      	b.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d604:	f002 0302 	and.w	r3, r2, #2
 800d608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d60c:	2300      	movs	r3, #0
 800d60e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d612:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d616:	460b      	mov	r3, r1
 800d618:	4313      	orrs	r3, r2
 800d61a:	d041      	beq.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d622:	2b05      	cmp	r3, #5
 800d624:	d824      	bhi.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800d626:	a201      	add	r2, pc, #4	@ (adr r2, 800d62c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800d628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62c:	0800d679 	.word	0x0800d679
 800d630:	0800d645 	.word	0x0800d645
 800d634:	0800d65b 	.word	0x0800d65b
 800d638:	0800d679 	.word	0x0800d679
 800d63c:	0800d679 	.word	0x0800d679
 800d640:	0800d679 	.word	0x0800d679
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d648:	3308      	adds	r3, #8
 800d64a:	2101      	movs	r1, #1
 800d64c:	4618      	mov	r0, r3
 800d64e:	f001 fd79 	bl	800f144 <RCCEx_PLL2_Config>
 800d652:	4603      	mov	r3, r0
 800d654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d658:	e00f      	b.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d65e:	3328      	adds	r3, #40	@ 0x28
 800d660:	2101      	movs	r1, #1
 800d662:	4618      	mov	r0, r3
 800d664:	f001 fe20 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d668:	4603      	mov	r3, r0
 800d66a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d66e:	e004      	b.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d670:	2301      	movs	r3, #1
 800d672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d676:	e000      	b.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800d678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d67a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10a      	bne.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d682:	4b96      	ldr	r3, [pc, #600]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d686:	f023 0107 	bic.w	r1, r3, #7
 800d68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d68e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d690:	4a92      	ldr	r2, [pc, #584]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d692:	430b      	orrs	r3, r1
 800d694:	6553      	str	r3, [r2, #84]	@ 0x54
 800d696:	e003      	b.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d69c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	f002 0304 	and.w	r3, r2, #4
 800d6ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d6b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	d044      	beq.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6c8:	2b05      	cmp	r3, #5
 800d6ca:	d825      	bhi.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800d6cc:	a201      	add	r2, pc, #4	@ (adr r2, 800d6d4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800d6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d2:	bf00      	nop
 800d6d4:	0800d721 	.word	0x0800d721
 800d6d8:	0800d6ed 	.word	0x0800d6ed
 800d6dc:	0800d703 	.word	0x0800d703
 800d6e0:	0800d721 	.word	0x0800d721
 800d6e4:	0800d721 	.word	0x0800d721
 800d6e8:	0800d721 	.word	0x0800d721
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6f0:	3308      	adds	r3, #8
 800d6f2:	2101      	movs	r1, #1
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f001 fd25 	bl	800f144 <RCCEx_PLL2_Config>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d700:	e00f      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d706:	3328      	adds	r3, #40	@ 0x28
 800d708:	2101      	movs	r1, #1
 800d70a:	4618      	mov	r0, r3
 800d70c:	f001 fdcc 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d710:	4603      	mov	r3, r0
 800d712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d716:	e004      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d718:	2301      	movs	r3, #1
 800d71a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d71e:	e000      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800d720:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d722:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10b      	bne.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d72a:	4b6c      	ldr	r3, [pc, #432]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d72c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d72e:	f023 0107 	bic.w	r1, r3, #7
 800d732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d73a:	4a68      	ldr	r2, [pc, #416]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d73c:	430b      	orrs	r3, r1
 800d73e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d740:	e003      	b.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d742:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d746:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	f002 0320 	and.w	r3, r2, #32
 800d756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d75a:	2300      	movs	r3, #0
 800d75c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d760:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d764:	460b      	mov	r3, r1
 800d766:	4313      	orrs	r3, r2
 800d768:	d055      	beq.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d776:	d033      	beq.n	800d7e0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800d778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d77c:	d82c      	bhi.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d782:	d02f      	beq.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d788:	d826      	bhi.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d78a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d78e:	d02b      	beq.n	800d7e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d790:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d794:	d820      	bhi.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d79a:	d012      	beq.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800d79c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7a0:	d81a      	bhi.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d022      	beq.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d7a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7aa:	d115      	bne.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7b0:	3308      	adds	r3, #8
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f001 fcc5 	bl	800f144 <RCCEx_PLL2_Config>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d7c0:	e015      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7c6:	3328      	adds	r3, #40	@ 0x28
 800d7c8:	2102      	movs	r1, #2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f001 fd6c 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d7d6:	e00a      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d7de:	e006      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d7e0:	bf00      	nop
 800d7e2:	e004      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d7e4:	bf00      	nop
 800d7e6:	e002      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d7e8:	bf00      	nop
 800d7ea:	e000      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d7ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10b      	bne.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d7f6:	4b39      	ldr	r3, [pc, #228]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d7f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d802:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d806:	4a35      	ldr	r2, [pc, #212]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d808:	430b      	orrs	r3, r1
 800d80a:	6553      	str	r3, [r2, #84]	@ 0x54
 800d80c:	e003      	b.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d80e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d812:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d822:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d826:	2300      	movs	r3, #0
 800d828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d82c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d830:	460b      	mov	r3, r1
 800d832:	4313      	orrs	r3, r2
 800d834:	d058      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d83a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d83e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d842:	d033      	beq.n	800d8ac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800d844:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d848:	d82c      	bhi.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d84a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d84e:	d02f      	beq.n	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d854:	d826      	bhi.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d856:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d85a:	d02b      	beq.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d85c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d860:	d820      	bhi.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d866:	d012      	beq.n	800d88e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800d868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d86c:	d81a      	bhi.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d022      	beq.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d876:	d115      	bne.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d87c:	3308      	adds	r3, #8
 800d87e:	2100      	movs	r1, #0
 800d880:	4618      	mov	r0, r3
 800d882:	f001 fc5f 	bl	800f144 <RCCEx_PLL2_Config>
 800d886:	4603      	mov	r3, r0
 800d888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d88c:	e015      	b.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d892:	3328      	adds	r3, #40	@ 0x28
 800d894:	2102      	movs	r1, #2
 800d896:	4618      	mov	r0, r3
 800d898:	f001 fd06 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d89c:	4603      	mov	r3, r0
 800d89e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d8a2:	e00a      	b.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d8aa:	e006      	b.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d8ac:	bf00      	nop
 800d8ae:	e004      	b.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d8b0:	bf00      	nop
 800d8b2:	e002      	b.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d8b4:	bf00      	nop
 800d8b6:	e000      	b.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d8b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10e      	bne.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d8c2:	4b06      	ldr	r3, [pc, #24]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d8c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d8d2:	4a02      	ldr	r2, [pc, #8]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d8d4:	430b      	orrs	r3, r1
 800d8d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d8d8:	e006      	b.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800d8da:	bf00      	nop
 800d8dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d8f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d8fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d902:	460b      	mov	r3, r1
 800d904:	4313      	orrs	r3, r2
 800d906:	d055      	beq.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d90c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d910:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d914:	d033      	beq.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800d916:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d91a:	d82c      	bhi.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d91c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d920:	d02f      	beq.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d926:	d826      	bhi.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d928:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d92c:	d02b      	beq.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d92e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d932:	d820      	bhi.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d938:	d012      	beq.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800d93a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d93e:	d81a      	bhi.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d940:	2b00      	cmp	r3, #0
 800d942:	d022      	beq.n	800d98a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d948:	d115      	bne.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d94e:	3308      	adds	r3, #8
 800d950:	2100      	movs	r1, #0
 800d952:	4618      	mov	r0, r3
 800d954:	f001 fbf6 	bl	800f144 <RCCEx_PLL2_Config>
 800d958:	4603      	mov	r3, r0
 800d95a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d95e:	e015      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d964:	3328      	adds	r3, #40	@ 0x28
 800d966:	2102      	movs	r1, #2
 800d968:	4618      	mov	r0, r3
 800d96a:	f001 fc9d 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d96e:	4603      	mov	r3, r0
 800d970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d974:	e00a      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d976:	2301      	movs	r3, #1
 800d978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d97c:	e006      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d97e:	bf00      	nop
 800d980:	e004      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d982:	bf00      	nop
 800d984:	e002      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d986:	bf00      	nop
 800d988:	e000      	b.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d98a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d98c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10b      	bne.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d994:	4ba0      	ldr	r3, [pc, #640]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d998:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d9a4:	4a9c      	ldr	r2, [pc, #624]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d9a6:	430b      	orrs	r3, r1
 800d9a8:	6593      	str	r3, [r2, #88]	@ 0x58
 800d9aa:	e003      	b.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d9b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	f002 0308 	and.w	r3, r2, #8
 800d9c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d9ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	d01e      	beq.n	800da12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800d9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9e0:	d10c      	bne.n	800d9fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9e6:	3328      	adds	r3, #40	@ 0x28
 800d9e8:	2102      	movs	r1, #2
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f001 fc5c 	bl	800f2a8 <RCCEx_PLL3_Config>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d002      	beq.n	800d9fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d9fc:	4b86      	ldr	r3, [pc, #536]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d9fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800da04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da0c:	4a82      	ldr	r2, [pc, #520]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800da0e:	430b      	orrs	r3, r1
 800da10:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800da12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1a:	f002 0310 	and.w	r3, r2, #16
 800da1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800da22:	2300      	movs	r3, #0
 800da24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800da28:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800da2c:	460b      	mov	r3, r1
 800da2e:	4313      	orrs	r3, r2
 800da30:	d01e      	beq.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800da32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800da3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da3e:	d10c      	bne.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da44:	3328      	adds	r3, #40	@ 0x28
 800da46:	2102      	movs	r1, #2
 800da48:	4618      	mov	r0, r3
 800da4a:	f001 fc2d 	bl	800f2a8 <RCCEx_PLL3_Config>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d002      	beq.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800da54:	2301      	movs	r3, #1
 800da56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800da5a:	4b6f      	ldr	r3, [pc, #444]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800da5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800da62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800da6a:	4a6b      	ldr	r2, [pc, #428]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800da6c:	430b      	orrs	r3, r1
 800da6e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800da70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da78:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800da7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800da7e:	2300      	movs	r3, #0
 800da80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800da82:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800da86:	460b      	mov	r3, r1
 800da88:	4313      	orrs	r3, r2
 800da8a:	d03e      	beq.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800da8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800da94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da98:	d022      	beq.n	800dae0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800da9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da9e:	d81b      	bhi.n	800dad8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d003      	beq.n	800daac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800daa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daa8:	d00b      	beq.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800daaa:	e015      	b.n	800dad8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800daac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dab0:	3308      	adds	r3, #8
 800dab2:	2100      	movs	r1, #0
 800dab4:	4618      	mov	r0, r3
 800dab6:	f001 fb45 	bl	800f144 <RCCEx_PLL2_Config>
 800daba:	4603      	mov	r3, r0
 800dabc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dac0:	e00f      	b.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dac6:	3328      	adds	r3, #40	@ 0x28
 800dac8:	2102      	movs	r1, #2
 800daca:	4618      	mov	r0, r3
 800dacc:	f001 fbec 	bl	800f2a8 <RCCEx_PLL3_Config>
 800dad0:	4603      	mov	r3, r0
 800dad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dad6:	e004      	b.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dad8:	2301      	movs	r3, #1
 800dada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dade:	e000      	b.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800dae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10b      	bne.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800daea:	4b4b      	ldr	r3, [pc, #300]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800daec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800daf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dafa:	4a47      	ldr	r2, [pc, #284]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dafc:	430b      	orrs	r3, r1
 800dafe:	6593      	str	r3, [r2, #88]	@ 0x58
 800db00:	e003      	b.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800db06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800db0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db12:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800db16:	673b      	str	r3, [r7, #112]	@ 0x70
 800db18:	2300      	movs	r3, #0
 800db1a:	677b      	str	r3, [r7, #116]	@ 0x74
 800db1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800db20:	460b      	mov	r3, r1
 800db22:	4313      	orrs	r3, r2
 800db24:	d03b      	beq.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800db26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800db32:	d01f      	beq.n	800db74 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800db34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800db38:	d818      	bhi.n	800db6c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800db3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db3e:	d003      	beq.n	800db48 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800db40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db44:	d007      	beq.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800db46:	e011      	b.n	800db6c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db48:	4b33      	ldr	r3, [pc, #204]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800db4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db4c:	4a32      	ldr	r2, [pc, #200]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800db4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800db54:	e00f      	b.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db5a:	3328      	adds	r3, #40	@ 0x28
 800db5c:	2101      	movs	r1, #1
 800db5e:	4618      	mov	r0, r3
 800db60:	f001 fba2 	bl	800f2a8 <RCCEx_PLL3_Config>
 800db64:	4603      	mov	r3, r0
 800db66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800db6a:	e004      	b.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db6c:	2301      	movs	r3, #1
 800db6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800db72:	e000      	b.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800db74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d10b      	bne.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800db7e:	4b26      	ldr	r3, [pc, #152]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800db80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800db86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800db8e:	4a22      	ldr	r2, [pc, #136]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800db90:	430b      	orrs	r3, r1
 800db92:	6553      	str	r3, [r2, #84]	@ 0x54
 800db94:	e003      	b.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800db9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800db9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800dbaa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dbac:	2300      	movs	r3, #0
 800dbae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dbb0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	d034      	beq.n	800dc24 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dbba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d003      	beq.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800dbc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbc8:	d007      	beq.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800dbca:	e011      	b.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbcc:	4b12      	ldr	r3, [pc, #72]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbd0:	4a11      	ldr	r2, [pc, #68]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dbd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dbd8:	e00e      	b.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dbda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbde:	3308      	adds	r3, #8
 800dbe0:	2102      	movs	r1, #2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f001 faae 	bl	800f144 <RCCEx_PLL2_Config>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dbee:	e003      	b.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dbf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10d      	bne.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dc00:	4b05      	ldr	r3, [pc, #20]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dc02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc0e:	4a02      	ldr	r2, [pc, #8]	@ (800dc18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800dc10:	430b      	orrs	r3, r1
 800dc12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dc14:	e006      	b.n	800dc24 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800dc16:	bf00      	nop
 800dc18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dc20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800dc30:	663b      	str	r3, [r7, #96]	@ 0x60
 800dc32:	2300      	movs	r3, #0
 800dc34:	667b      	str	r3, [r7, #100]	@ 0x64
 800dc36:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	d00c      	beq.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dc40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc44:	3328      	adds	r3, #40	@ 0x28
 800dc46:	2102      	movs	r1, #2
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f001 fb2d 	bl	800f2a8 <RCCEx_PLL3_Config>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc62:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800dc66:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc68:	2300      	movs	r3, #0
 800dc6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dc6c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800dc70:	460b      	mov	r3, r1
 800dc72:	4313      	orrs	r3, r2
 800dc74:	d036      	beq.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800dc76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc80:	d018      	beq.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800dc82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc86:	d811      	bhi.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800dc88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc8c:	d014      	beq.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800dc8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc92:	d80b      	bhi.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d011      	beq.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800dc98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc9c:	d106      	bne.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc9e:	4bb7      	ldr	r3, [pc, #732]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dca2:	4ab6      	ldr	r2, [pc, #728]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dcaa:	e008      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcac:	2301      	movs	r3, #1
 800dcae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dcb2:	e004      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800dcb4:	bf00      	nop
 800dcb6:	e002      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800dcb8:	bf00      	nop
 800dcba:	e000      	b.n	800dcbe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800dcbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10a      	bne.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dcc6:	4bad      	ldr	r3, [pc, #692]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dcc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dcce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dcd4:	4aa9      	ldr	r2, [pc, #676]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dcd6:	430b      	orrs	r3, r1
 800dcd8:	6553      	str	r3, [r2, #84]	@ 0x54
 800dcda:	e003      	b.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dce0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dcf0:	653b      	str	r3, [r7, #80]	@ 0x50
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	657b      	str	r3, [r7, #84]	@ 0x54
 800dcf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	d009      	beq.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dd00:	4b9e      	ldr	r3, [pc, #632]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dd02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd0e:	4a9b      	ldr	r2, [pc, #620]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dd10:	430b      	orrs	r3, r1
 800dd12:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dd14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800dd20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd22:	2300      	movs	r3, #0
 800dd24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd26:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	d009      	beq.n	800dd44 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dd30:	4b92      	ldr	r3, [pc, #584]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dd32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd34:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800dd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd3e:	4a8f      	ldr	r2, [pc, #572]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dd40:	430b      	orrs	r3, r1
 800dd42:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800dd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800dd50:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd52:	2300      	movs	r3, #0
 800dd54:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	d00e      	beq.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dd60:	4b86      	ldr	r3, [pc, #536]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	4a85      	ldr	r2, [pc, #532]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dd66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dd6a:	6113      	str	r3, [r2, #16]
 800dd6c:	4b83      	ldr	r3, [pc, #524]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dd6e:	6919      	ldr	r1, [r3, #16]
 800dd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dd78:	4a80      	ldr	r2, [pc, #512]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dd7a:	430b      	orrs	r3, r1
 800dd7c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800dd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800dd8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800dd94:	460b      	mov	r3, r1
 800dd96:	4313      	orrs	r3, r2
 800dd98:	d009      	beq.n	800ddae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dd9a:	4b78      	ldr	r3, [pc, #480]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dd9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800dda2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dda6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dda8:	4a74      	ldr	r2, [pc, #464]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ddaa:	430b      	orrs	r3, r1
 800ddac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ddae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ddba:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddc0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	d00a      	beq.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ddca:	4b6c      	ldr	r3, [pc, #432]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ddcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ddd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddda:	4a68      	ldr	r2, [pc, #416]	@ (800df7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800dddc:	430b      	orrs	r3, r1
 800ddde:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800dde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde8:	2100      	movs	r1, #0
 800ddea:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ddec:	f003 0301 	and.w	r3, r3, #1
 800ddf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddf2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	d011      	beq.n	800de20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ddfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de00:	3308      	adds	r3, #8
 800de02:	2100      	movs	r1, #0
 800de04:	4618      	mov	r0, r3
 800de06:	f001 f99d 	bl	800f144 <RCCEx_PLL2_Config>
 800de0a:	4603      	mov	r3, r0
 800de0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800de10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de14:	2b00      	cmp	r3, #0
 800de16:	d003      	beq.n	800de20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800de20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	2100      	movs	r1, #0
 800de2a:	6239      	str	r1, [r7, #32]
 800de2c:	f003 0302 	and.w	r3, r3, #2
 800de30:	627b      	str	r3, [r7, #36]	@ 0x24
 800de32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de36:	460b      	mov	r3, r1
 800de38:	4313      	orrs	r3, r2
 800de3a:	d011      	beq.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de40:	3308      	adds	r3, #8
 800de42:	2101      	movs	r1, #1
 800de44:	4618      	mov	r0, r3
 800de46:	f001 f97d 	bl	800f144 <RCCEx_PLL2_Config>
 800de4a:	4603      	mov	r3, r0
 800de4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800de50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de54:	2b00      	cmp	r3, #0
 800de56:	d003      	beq.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800de60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de68:	2100      	movs	r1, #0
 800de6a:	61b9      	str	r1, [r7, #24]
 800de6c:	f003 0304 	and.w	r3, r3, #4
 800de70:	61fb      	str	r3, [r7, #28]
 800de72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800de76:	460b      	mov	r3, r1
 800de78:	4313      	orrs	r3, r2
 800de7a:	d011      	beq.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800de7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de80:	3308      	adds	r3, #8
 800de82:	2102      	movs	r1, #2
 800de84:	4618      	mov	r0, r3
 800de86:	f001 f95d 	bl	800f144 <RCCEx_PLL2_Config>
 800de8a:	4603      	mov	r3, r0
 800de8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800de90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de94:	2b00      	cmp	r3, #0
 800de96:	d003      	beq.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800dea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea8:	2100      	movs	r1, #0
 800deaa:	6139      	str	r1, [r7, #16]
 800deac:	f003 0308 	and.w	r3, r3, #8
 800deb0:	617b      	str	r3, [r7, #20]
 800deb2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800deb6:	460b      	mov	r3, r1
 800deb8:	4313      	orrs	r3, r2
 800deba:	d011      	beq.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800debc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dec0:	3328      	adds	r3, #40	@ 0x28
 800dec2:	2100      	movs	r1, #0
 800dec4:	4618      	mov	r0, r3
 800dec6:	f001 f9ef 	bl	800f2a8 <RCCEx_PLL3_Config>
 800deca:	4603      	mov	r3, r0
 800decc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ded0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d003      	beq.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ded8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dedc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800dee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee8:	2100      	movs	r1, #0
 800deea:	60b9      	str	r1, [r7, #8]
 800deec:	f003 0310 	and.w	r3, r3, #16
 800def0:	60fb      	str	r3, [r7, #12]
 800def2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800def6:	460b      	mov	r3, r1
 800def8:	4313      	orrs	r3, r2
 800defa:	d011      	beq.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800defc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df00:	3328      	adds	r3, #40	@ 0x28
 800df02:	2101      	movs	r1, #1
 800df04:	4618      	mov	r0, r3
 800df06:	f001 f9cf 	bl	800f2a8 <RCCEx_PLL3_Config>
 800df0a:	4603      	mov	r3, r0
 800df0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800df10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df14:	2b00      	cmp	r3, #0
 800df16:	d003      	beq.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800df20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df28:	2100      	movs	r1, #0
 800df2a:	6039      	str	r1, [r7, #0]
 800df2c:	f003 0320 	and.w	r3, r3, #32
 800df30:	607b      	str	r3, [r7, #4]
 800df32:	e9d7 1200 	ldrd	r1, r2, [r7]
 800df36:	460b      	mov	r3, r1
 800df38:	4313      	orrs	r3, r2
 800df3a:	d011      	beq.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800df3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df40:	3328      	adds	r3, #40	@ 0x28
 800df42:	2102      	movs	r1, #2
 800df44:	4618      	mov	r0, r3
 800df46:	f001 f9af 	bl	800f2a8 <RCCEx_PLL3_Config>
 800df4a:	4603      	mov	r3, r0
 800df4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800df50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800df60:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800df64:	2b00      	cmp	r3, #0
 800df66:	d101      	bne.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800df68:	2300      	movs	r3, #0
 800df6a:	e000      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800df6c:	2301      	movs	r3, #1
}
 800df6e:	4618      	mov	r0, r3
 800df70:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800df74:	46bd      	mov	sp, r7
 800df76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df7a:	bf00      	nop
 800df7c:	58024400 	.word	0x58024400

0800df80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b090      	sub	sp, #64	@ 0x40
 800df84:	af00      	add	r7, sp, #0
 800df86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800df8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df8e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800df92:	430b      	orrs	r3, r1
 800df94:	f040 8094 	bne.w	800e0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800df98:	4b9b      	ldr	r3, [pc, #620]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800df9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df9c:	f003 0307 	and.w	r3, r3, #7
 800dfa0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800dfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa4:	2b04      	cmp	r3, #4
 800dfa6:	f200 8087 	bhi.w	800e0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800dfaa:	a201      	add	r2, pc, #4	@ (adr r2, 800dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800dfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb0:	0800dfc5 	.word	0x0800dfc5
 800dfb4:	0800dfed 	.word	0x0800dfed
 800dfb8:	0800e015 	.word	0x0800e015
 800dfbc:	0800e0b1 	.word	0x0800e0b1
 800dfc0:	0800e03d 	.word	0x0800e03d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dfc4:	4b90      	ldr	r3, [pc, #576]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dfd0:	d108      	bne.n	800dfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dfd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f000 ff62 	bl	800eea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfe0:	f000 bc93 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfe8:	f000 bc8f 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dfec:	4b86      	ldr	r3, [pc, #536]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dff8:	d108      	bne.n	800e00c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dffa:	f107 0318 	add.w	r3, r7, #24
 800dffe:	4618      	mov	r0, r3
 800e000:	f000 fca6 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e008:	f000 bc7f 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e00c:	2300      	movs	r3, #0
 800e00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e010:	f000 bc7b 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e014:	4b7c      	ldr	r3, [pc, #496]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e01c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e020:	d108      	bne.n	800e034 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e022:	f107 030c 	add.w	r3, r7, #12
 800e026:	4618      	mov	r0, r3
 800e028:	f000 fde6 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e030:	f000 bc6b 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e038:	f000 bc67 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e03c:	4b72      	ldr	r3, [pc, #456]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e03e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e040:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e044:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e046:	4b70      	ldr	r3, [pc, #448]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f003 0304 	and.w	r3, r3, #4
 800e04e:	2b04      	cmp	r3, #4
 800e050:	d10c      	bne.n	800e06c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e054:	2b00      	cmp	r3, #0
 800e056:	d109      	bne.n	800e06c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e058:	4b6b      	ldr	r3, [pc, #428]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	08db      	lsrs	r3, r3, #3
 800e05e:	f003 0303 	and.w	r3, r3, #3
 800e062:	4a6a      	ldr	r2, [pc, #424]	@ (800e20c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800e064:	fa22 f303 	lsr.w	r3, r2, r3
 800e068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e06a:	e01f      	b.n	800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e06c:	4b66      	ldr	r3, [pc, #408]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e078:	d106      	bne.n	800e088 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e07a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e07c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e080:	d102      	bne.n	800e088 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e082:	4b63      	ldr	r3, [pc, #396]	@ (800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800e084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e086:	e011      	b.n	800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e088:	4b5f      	ldr	r3, [pc, #380]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e094:	d106      	bne.n	800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e09c:	d102      	bne.n	800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e09e:	4b5d      	ldr	r3, [pc, #372]	@ (800e214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0a2:	e003      	b.n	800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e0a8:	f000 bc2f 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e0ac:	f000 bc2d 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e0b0:	4b59      	ldr	r3, [pc, #356]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0b4:	f000 bc29 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0bc:	f000 bc25 	b.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800e0c8:	430b      	orrs	r3, r1
 800e0ca:	f040 80a7 	bne.w	800e21c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e0ce:	4b4e      	ldr	r3, [pc, #312]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0d2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800e0d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e0de:	d054      	beq.n	800e18a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800e0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e0e6:	f200 808b 	bhi.w	800e200 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e0f0:	f000 8083 	beq.w	800e1fa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e0fa:	f200 8081 	bhi.w	800e200 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e104:	d02f      	beq.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e10c:	d878      	bhi.n	800e200 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800e10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e110:	2b00      	cmp	r3, #0
 800e112:	d004      	beq.n	800e11e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800e114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e116:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e11a:	d012      	beq.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800e11c:	e070      	b.n	800e200 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e11e:	4b3a      	ldr	r3, [pc, #232]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e12a:	d107      	bne.n	800e13c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e12c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e130:	4618      	mov	r0, r3
 800e132:	f000 feb5 	bl	800eea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e13a:	e3e6      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e140:	e3e3      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e142:	4b31      	ldr	r3, [pc, #196]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e14a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e14e:	d107      	bne.n	800e160 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e150:	f107 0318 	add.w	r3, r7, #24
 800e154:	4618      	mov	r0, r3
 800e156:	f000 fbfb 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e15e:	e3d4      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e160:	2300      	movs	r3, #0
 800e162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e164:	e3d1      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e166:	4b28      	ldr	r3, [pc, #160]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e16e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e172:	d107      	bne.n	800e184 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e174:	f107 030c 	add.w	r3, r7, #12
 800e178:	4618      	mov	r0, r3
 800e17a:	f000 fd3d 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e182:	e3c2      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e184:	2300      	movs	r3, #0
 800e186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e188:	e3bf      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e18a:	4b1f      	ldr	r3, [pc, #124]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e18c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e18e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e192:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e194:	4b1c      	ldr	r3, [pc, #112]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f003 0304 	and.w	r3, r3, #4
 800e19c:	2b04      	cmp	r3, #4
 800e19e:	d10c      	bne.n	800e1ba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800e1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d109      	bne.n	800e1ba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e1a6:	4b18      	ldr	r3, [pc, #96]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	08db      	lsrs	r3, r3, #3
 800e1ac:	f003 0303 	and.w	r3, r3, #3
 800e1b0:	4a16      	ldr	r2, [pc, #88]	@ (800e20c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800e1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800e1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1b8:	e01e      	b.n	800e1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e1ba:	4b13      	ldr	r3, [pc, #76]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1c6:	d106      	bne.n	800e1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800e1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1ce:	d102      	bne.n	800e1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800e1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1d4:	e010      	b.n	800e1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e208 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e1e2:	d106      	bne.n	800e1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800e1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1ea:	d102      	bne.n	800e1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e1ec:	4b09      	ldr	r3, [pc, #36]	@ (800e214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1f0:	e002      	b.n	800e1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e1f6:	e388      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e1f8:	e387      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e1fa:	4b07      	ldr	r3, [pc, #28]	@ (800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1fe:	e384      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e200:	2300      	movs	r3, #0
 800e202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e204:	e381      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e206:	bf00      	nop
 800e208:	58024400 	.word	0x58024400
 800e20c:	03d09000 	.word	0x03d09000
 800e210:	003d0900 	.word	0x003d0900
 800e214:	02dc6c00 	.word	0x02dc6c00
 800e218:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e21c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e220:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800e224:	430b      	orrs	r3, r1
 800e226:	f040 809c 	bne.w	800e362 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e22a:	4b9e      	ldr	r3, [pc, #632]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e22c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e22e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800e232:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e236:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e23a:	d054      	beq.n	800e2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800e23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e23e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e242:	f200 808b 	bhi.w	800e35c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e248:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e24c:	f000 8083 	beq.w	800e356 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800e250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e252:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e256:	f200 8081 	bhi.w	800e35c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e260:	d02f      	beq.n	800e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800e262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e264:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e268:	d878      	bhi.n	800e35c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800e26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d004      	beq.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800e270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e272:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e276:	d012      	beq.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800e278:	e070      	b.n	800e35c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e27a:	4b8a      	ldr	r3, [pc, #552]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e286:	d107      	bne.n	800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e28c:	4618      	mov	r0, r3
 800e28e:	f000 fe07 	bl	800eea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e296:	e338      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e298:	2300      	movs	r3, #0
 800e29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e29c:	e335      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e29e:	4b81      	ldr	r3, [pc, #516]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e2a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e2aa:	d107      	bne.n	800e2bc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2ac:	f107 0318 	add.w	r3, r7, #24
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f000 fb4d 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2ba:	e326      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2c0:	e323      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e2c2:	4b78      	ldr	r3, [pc, #480]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e2ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e2ce:	d107      	bne.n	800e2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2d0:	f107 030c 	add.w	r3, r7, #12
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f000 fc8f 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2de:	e314      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2e4:	e311      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e2e6:	4b6f      	ldr	r3, [pc, #444]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e2e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e2ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e2f0:	4b6c      	ldr	r3, [pc, #432]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f003 0304 	and.w	r3, r3, #4
 800e2f8:	2b04      	cmp	r3, #4
 800e2fa:	d10c      	bne.n	800e316 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800e2fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d109      	bne.n	800e316 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e302:	4b68      	ldr	r3, [pc, #416]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	08db      	lsrs	r3, r3, #3
 800e308:	f003 0303 	and.w	r3, r3, #3
 800e30c:	4a66      	ldr	r2, [pc, #408]	@ (800e4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800e30e:	fa22 f303 	lsr.w	r3, r2, r3
 800e312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e314:	e01e      	b.n	800e354 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e316:	4b63      	ldr	r3, [pc, #396]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e31e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e322:	d106      	bne.n	800e332 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800e324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e32a:	d102      	bne.n	800e332 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e32c:	4b5f      	ldr	r3, [pc, #380]	@ (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800e32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e330:	e010      	b.n	800e354 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e332:	4b5c      	ldr	r3, [pc, #368]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e33a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e33e:	d106      	bne.n	800e34e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800e340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e342:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e346:	d102      	bne.n	800e34e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e348:	4b59      	ldr	r3, [pc, #356]	@ (800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e34c:	e002      	b.n	800e354 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e34e:	2300      	movs	r3, #0
 800e350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e352:	e2da      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e354:	e2d9      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e356:	4b57      	ldr	r3, [pc, #348]	@ (800e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e35a:	e2d6      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e360:	e2d3      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e362:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e366:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800e36a:	430b      	orrs	r3, r1
 800e36c:	f040 80a7 	bne.w	800e4be <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e370:	4b4c      	ldr	r3, [pc, #304]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e374:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800e378:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e380:	d055      	beq.n	800e42e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800e382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e388:	f200 8096 	bhi.w	800e4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800e38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e392:	f000 8084 	beq.w	800e49e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800e396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e398:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e39c:	f200 808c 	bhi.w	800e4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800e3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3a6:	d030      	beq.n	800e40a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3ae:	f200 8083 	bhi.w	800e4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d004      	beq.n	800e3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3be:	d012      	beq.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800e3c0:	e07a      	b.n	800e4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e3c2:	4b38      	ldr	r3, [pc, #224]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e3ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e3ce:	d107      	bne.n	800e3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e3d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f000 fd63 	bl	800eea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3de:	e294      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3e4:	e291      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e3e6:	4b2f      	ldr	r3, [pc, #188]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e3ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e3f2:	d107      	bne.n	800e404 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3f4:	f107 0318 	add.w	r3, r7, #24
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f000 faa9 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e402:	e282      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e408:	e27f      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e40a:	4b26      	ldr	r3, [pc, #152]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e416:	d107      	bne.n	800e428 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e418:	f107 030c 	add.w	r3, r7, #12
 800e41c:	4618      	mov	r0, r3
 800e41e:	f000 fbeb 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e426:	e270      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e42c:	e26d      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e42e:	4b1d      	ldr	r3, [pc, #116]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e432:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e436:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e438:	4b1a      	ldr	r3, [pc, #104]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f003 0304 	and.w	r3, r3, #4
 800e440:	2b04      	cmp	r3, #4
 800e442:	d10c      	bne.n	800e45e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800e444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e446:	2b00      	cmp	r3, #0
 800e448:	d109      	bne.n	800e45e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e44a:	4b16      	ldr	r3, [pc, #88]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	08db      	lsrs	r3, r3, #3
 800e450:	f003 0303 	and.w	r3, r3, #3
 800e454:	4a14      	ldr	r2, [pc, #80]	@ (800e4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800e456:	fa22 f303 	lsr.w	r3, r2, r3
 800e45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e45c:	e01e      	b.n	800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e45e:	4b11      	ldr	r3, [pc, #68]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e46a:	d106      	bne.n	800e47a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800e46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e46e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e472:	d102      	bne.n	800e47a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e474:	4b0d      	ldr	r3, [pc, #52]	@ (800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800e476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e478:	e010      	b.n	800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e47a:	4b0a      	ldr	r3, [pc, #40]	@ (800e4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e486:	d106      	bne.n	800e496 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800e488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e48a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e48e:	d102      	bne.n	800e496 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e490:	4b07      	ldr	r3, [pc, #28]	@ (800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e494:	e002      	b.n	800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e49a:	e236      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e49c:	e235      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e49e:	4b05      	ldr	r3, [pc, #20]	@ (800e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4a2:	e232      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e4a4:	58024400 	.word	0x58024400
 800e4a8:	03d09000 	.word	0x03d09000
 800e4ac:	003d0900 	.word	0x003d0900
 800e4b0:	02dc6c00 	.word	0x02dc6c00
 800e4b4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4bc:	e225      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e4be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4c2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800e4c6:	430b      	orrs	r3, r1
 800e4c8:	f040 8085 	bne.w	800e5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e4cc:	4b9c      	ldr	r3, [pc, #624]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4d0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e4d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800e4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e4dc:	d06b      	beq.n	800e5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800e4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e4e4:	d874      	bhi.n	800e5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e4ec:	d056      	beq.n	800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800e4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e4f4:	d86c      	bhi.n	800e5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e4fc:	d03b      	beq.n	800e576 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800e4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e500:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e504:	d864      	bhi.n	800e5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e50c:	d021      	beq.n	800e552 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800e50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e514:	d85c      	bhi.n	800e5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800e516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d004      	beq.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800e51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e522:	d004      	beq.n	800e52e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800e524:	e054      	b.n	800e5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e526:	f7fe fb5f 	bl	800cbe8 <HAL_RCC_GetPCLK1Freq>
 800e52a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e52c:	e1ed      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e52e:	4b84      	ldr	r3, [pc, #528]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e53a:	d107      	bne.n	800e54c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e53c:	f107 0318 	add.w	r3, r7, #24
 800e540:	4618      	mov	r0, r3
 800e542:	f000 fa05 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e54a:	e1de      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e550:	e1db      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e552:	4b7b      	ldr	r3, [pc, #492]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e55a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e55e:	d107      	bne.n	800e570 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e560:	f107 030c 	add.w	r3, r7, #12
 800e564:	4618      	mov	r0, r3
 800e566:	f000 fb47 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e56e:	e1cc      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e570:	2300      	movs	r3, #0
 800e572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e574:	e1c9      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e576:	4b72      	ldr	r3, [pc, #456]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f003 0304 	and.w	r3, r3, #4
 800e57e:	2b04      	cmp	r3, #4
 800e580:	d109      	bne.n	800e596 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e582:	4b6f      	ldr	r3, [pc, #444]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	08db      	lsrs	r3, r3, #3
 800e588:	f003 0303 	and.w	r3, r3, #3
 800e58c:	4a6d      	ldr	r2, [pc, #436]	@ (800e744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800e58e:	fa22 f303 	lsr.w	r3, r2, r3
 800e592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e594:	e1b9      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e59a:	e1b6      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e59c:	4b68      	ldr	r3, [pc, #416]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5a8:	d102      	bne.n	800e5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800e5aa:	4b67      	ldr	r3, [pc, #412]	@ (800e748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800e5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5ae:	e1ac      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5b4:	e1a9      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e5b6:	4b62      	ldr	r3, [pc, #392]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e5be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5c2:	d102      	bne.n	800e5ca <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800e5c4:	4b61      	ldr	r3, [pc, #388]	@ (800e74c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800e5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5c8:	e19f      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5ce:	e19c      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5d4:	e199      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e5d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5da:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e5de:	430b      	orrs	r3, r1
 800e5e0:	d173      	bne.n	800e6ca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e5e2:	4b57      	ldr	r3, [pc, #348]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e5e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e5ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5f2:	d02f      	beq.n	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5fa:	d863      	bhi.n	800e6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d004      	beq.n	800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800e602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e608:	d012      	beq.n	800e630 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800e60a:	e05b      	b.n	800e6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e60c:	4b4c      	ldr	r3, [pc, #304]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e618:	d107      	bne.n	800e62a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e61a:	f107 0318 	add.w	r3, r7, #24
 800e61e:	4618      	mov	r0, r3
 800e620:	f000 f996 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e628:	e16f      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e62a:	2300      	movs	r3, #0
 800e62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e62e:	e16c      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e630:	4b43      	ldr	r3, [pc, #268]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e63c:	d107      	bne.n	800e64e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e63e:	f107 030c 	add.w	r3, r7, #12
 800e642:	4618      	mov	r0, r3
 800e644:	f000 fad8 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e64c:	e15d      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e64e:	2300      	movs	r3, #0
 800e650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e652:	e15a      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e654:	4b3a      	ldr	r3, [pc, #232]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e658:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e65c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e65e:	4b38      	ldr	r3, [pc, #224]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f003 0304 	and.w	r3, r3, #4
 800e666:	2b04      	cmp	r3, #4
 800e668:	d10c      	bne.n	800e684 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800e66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d109      	bne.n	800e684 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e670:	4b33      	ldr	r3, [pc, #204]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	08db      	lsrs	r3, r3, #3
 800e676:	f003 0303 	and.w	r3, r3, #3
 800e67a:	4a32      	ldr	r2, [pc, #200]	@ (800e744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800e67c:	fa22 f303 	lsr.w	r3, r2, r3
 800e680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e682:	e01e      	b.n	800e6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e684:	4b2e      	ldr	r3, [pc, #184]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e68c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e690:	d106      	bne.n	800e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800e692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e698:	d102      	bne.n	800e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e69a:	4b2b      	ldr	r3, [pc, #172]	@ (800e748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800e69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e69e:	e010      	b.n	800e6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e6a0:	4b27      	ldr	r3, [pc, #156]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6ac:	d106      	bne.n	800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800e6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e6b4:	d102      	bne.n	800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e6b6:	4b25      	ldr	r3, [pc, #148]	@ (800e74c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800e6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e6ba:	e002      	b.n	800e6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e6c0:	e123      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e6c2:	e122      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6c8:	e11f      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6ce:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800e6d2:	430b      	orrs	r3, r1
 800e6d4:	d13c      	bne.n	800e750 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e6d6:	4b1a      	ldr	r3, [pc, #104]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e6d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e6da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6de:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d004      	beq.n	800e6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6ec:	d012      	beq.n	800e714 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800e6ee:	e023      	b.n	800e738 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e6f0:	4b13      	ldr	r3, [pc, #76]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e6f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e6fc:	d107      	bne.n	800e70e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e6fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e702:	4618      	mov	r0, r3
 800e704:	f000 fbcc 	bl	800eea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e70c:	e0fd      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e70e:	2300      	movs	r3, #0
 800e710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e712:	e0fa      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e714:	4b0a      	ldr	r3, [pc, #40]	@ (800e740 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e71c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e720:	d107      	bne.n	800e732 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e722:	f107 0318 	add.w	r3, r7, #24
 800e726:	4618      	mov	r0, r3
 800e728:	f000 f912 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e72c:	6a3b      	ldr	r3, [r7, #32]
 800e72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e730:	e0eb      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e732:	2300      	movs	r3, #0
 800e734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e736:	e0e8      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800e738:	2300      	movs	r3, #0
 800e73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e73c:	e0e5      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800e73e:	bf00      	nop
 800e740:	58024400 	.word	0x58024400
 800e744:	03d09000 	.word	0x03d09000
 800e748:	003d0900 	.word	0x003d0900
 800e74c:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e750:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e754:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800e758:	430b      	orrs	r3, r1
 800e75a:	f040 8085 	bne.w	800e868 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e75e:	4b6d      	ldr	r3, [pc, #436]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e762:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800e766:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e76a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e76e:	d06b      	beq.n	800e848 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800e770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e776:	d874      	bhi.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e77a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e77e:	d056      	beq.n	800e82e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800e780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e786:	d86c      	bhi.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e78e:	d03b      	beq.n	800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800e790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e796:	d864      	bhi.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e79e:	d021      	beq.n	800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800e7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7a6:	d85c      	bhi.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800e7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d004      	beq.n	800e7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800e7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7b4:	d004      	beq.n	800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800e7b6:	e054      	b.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e7b8:	f000 f8b4 	bl	800e924 <HAL_RCCEx_GetD3PCLK1Freq>
 800e7bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e7be:	e0a4      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e7c0:	4b54      	ldr	r3, [pc, #336]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e7c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e7cc:	d107      	bne.n	800e7de <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7ce:	f107 0318 	add.w	r3, r7, #24
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f000 f8bc 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7dc:	e095      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e7e2:	e092      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e7e4:	4b4b      	ldr	r3, [pc, #300]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e7ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7f0:	d107      	bne.n	800e802 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7f2:	f107 030c 	add.w	r3, r7, #12
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f000 f9fe 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e800:	e083      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e802:	2300      	movs	r3, #0
 800e804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e806:	e080      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e808:	4b42      	ldr	r3, [pc, #264]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f003 0304 	and.w	r3, r3, #4
 800e810:	2b04      	cmp	r3, #4
 800e812:	d109      	bne.n	800e828 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e814:	4b3f      	ldr	r3, [pc, #252]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	08db      	lsrs	r3, r3, #3
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	4a3e      	ldr	r2, [pc, #248]	@ (800e918 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800e820:	fa22 f303 	lsr.w	r3, r2, r3
 800e824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e826:	e070      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e828:	2300      	movs	r3, #0
 800e82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e82c:	e06d      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e82e:	4b39      	ldr	r3, [pc, #228]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e83a:	d102      	bne.n	800e842 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800e83c:	4b37      	ldr	r3, [pc, #220]	@ (800e91c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e840:	e063      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e842:	2300      	movs	r3, #0
 800e844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e846:	e060      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e848:	4b32      	ldr	r3, [pc, #200]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e854:	d102      	bne.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800e856:	4b32      	ldr	r3, [pc, #200]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e85a:	e056      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e860:	e053      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e866:	e050      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e86c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800e870:	430b      	orrs	r3, r1
 800e872:	d148      	bne.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e874:	4b27      	ldr	r3, [pc, #156]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e878:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e87c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e884:	d02a      	beq.n	800e8dc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800e886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e88c:	d838      	bhi.n	800e900 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800e88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e890:	2b00      	cmp	r3, #0
 800e892:	d004      	beq.n	800e89e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800e894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e89a:	d00d      	beq.n	800e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800e89c:	e030      	b.n	800e900 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e89e:	4b1d      	ldr	r3, [pc, #116]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e8aa:	d102      	bne.n	800e8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800e8ac:	4b1c      	ldr	r3, [pc, #112]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8b0:	e02b      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8b6:	e028      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e8b8:	4b16      	ldr	r3, [pc, #88]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e8c4:	d107      	bne.n	800e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e8c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f000 fae8 	bl	800eea0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8d4:	e019      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8da:	e016      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e8dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e8e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e8e8:	d107      	bne.n	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8ea:	f107 0318 	add.w	r3, r7, #24
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 f82e 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8f8:	e007      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8fe:	e004      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800e900:	2300      	movs	r3, #0
 800e902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e904:	e001      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800e906:	2300      	movs	r3, #0
 800e908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800e90a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3740      	adds	r7, #64	@ 0x40
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	58024400 	.word	0x58024400
 800e918:	03d09000 	.word	0x03d09000
 800e91c:	003d0900 	.word	0x003d0900
 800e920:	02dc6c00 	.word	0x02dc6c00

0800e924 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e928:	f7fe f92e 	bl	800cb88 <HAL_RCC_GetHCLKFreq>
 800e92c:	4602      	mov	r2, r0
 800e92e:	4b06      	ldr	r3, [pc, #24]	@ (800e948 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e930:	6a1b      	ldr	r3, [r3, #32]
 800e932:	091b      	lsrs	r3, r3, #4
 800e934:	f003 0307 	and.w	r3, r3, #7
 800e938:	4904      	ldr	r1, [pc, #16]	@ (800e94c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e93a:	5ccb      	ldrb	r3, [r1, r3]
 800e93c:	f003 031f 	and.w	r3, r3, #31
 800e940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e944:	4618      	mov	r0, r3
 800e946:	bd80      	pop	{r7, pc}
 800e948:	58024400 	.word	0x58024400
 800e94c:	08019eb0 	.word	0x08019eb0

0800e950 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e950:	b480      	push	{r7}
 800e952:	b089      	sub	sp, #36	@ 0x24
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e958:	4ba1      	ldr	r3, [pc, #644]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e95c:	f003 0303 	and.w	r3, r3, #3
 800e960:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e962:	4b9f      	ldr	r3, [pc, #636]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e966:	0b1b      	lsrs	r3, r3, #12
 800e968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e96c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e96e:	4b9c      	ldr	r3, [pc, #624]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e972:	091b      	lsrs	r3, r3, #4
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e97a:	4b99      	ldr	r3, [pc, #612]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e97c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e97e:	08db      	lsrs	r3, r3, #3
 800e980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e984:	693a      	ldr	r2, [r7, #16]
 800e986:	fb02 f303 	mul.w	r3, r2, r3
 800e98a:	ee07 3a90 	vmov	s15, r3
 800e98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f000 8111 	beq.w	800ebc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	2b02      	cmp	r3, #2
 800e9a2:	f000 8083 	beq.w	800eaac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	f200 80a1 	bhi.w	800eaf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d003      	beq.n	800e9bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d056      	beq.n	800ea68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e9ba:	e099      	b.n	800eaf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9bc:	4b88      	ldr	r3, [pc, #544]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f003 0320 	and.w	r3, r3, #32
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d02d      	beq.n	800ea24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e9c8:	4b85      	ldr	r3, [pc, #532]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	08db      	lsrs	r3, r3, #3
 800e9ce:	f003 0303 	and.w	r3, r3, #3
 800e9d2:	4a84      	ldr	r2, [pc, #528]	@ (800ebe4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e9d4:	fa22 f303 	lsr.w	r3, r2, r3
 800e9d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	ee07 3a90 	vmov	s15, r3
 800e9e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	ee07 3a90 	vmov	s15, r3
 800e9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9f2:	4b7b      	ldr	r3, [pc, #492]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9fa:	ee07 3a90 	vmov	s15, r3
 800e9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ebe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ea22:	e087      	b.n	800eb34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	ee07 3a90 	vmov	s15, r3
 800ea2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ebec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ea32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea36:	4b6a      	ldr	r3, [pc, #424]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea3e:	ee07 3a90 	vmov	s15, r3
 800ea42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ebe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea66:	e065      	b.n	800eb34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	ee07 3a90 	vmov	s15, r3
 800ea6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ebf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ea76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea7a:	4b59      	ldr	r3, [pc, #356]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea82:	ee07 3a90 	vmov	s15, r3
 800ea86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ebe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eaa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eaaa:	e043      	b.n	800eb34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	ee07 3a90 	vmov	s15, r3
 800eab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eab6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ebf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800eaba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eabe:	4b48      	ldr	r3, [pc, #288]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac6:	ee07 3a90 	vmov	s15, r3
 800eaca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eace:	ed97 6a03 	vldr	s12, [r7, #12]
 800ead2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ebe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ead6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eaee:	e021      	b.n	800eb34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	ee07 3a90 	vmov	s15, r3
 800eaf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eafa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ebf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800eafe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb02:	4b37      	ldr	r3, [pc, #220]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb0a:	ee07 3a90 	vmov	s15, r3
 800eb0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb12:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ebe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800eb1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eb26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800eb34:	4b2a      	ldr	r3, [pc, #168]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb38:	0a5b      	lsrs	r3, r3, #9
 800eb3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb3e:	ee07 3a90 	vmov	s15, r3
 800eb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eb4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb5a:	ee17 2a90 	vmov	r2, s15
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800eb62:	4b1f      	ldr	r3, [pc, #124]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb66:	0c1b      	lsrs	r3, r3, #16
 800eb68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb6c:	ee07 3a90 	vmov	s15, r3
 800eb70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eb78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb88:	ee17 2a90 	vmov	r2, s15
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800eb90:	4b13      	ldr	r3, [pc, #76]	@ (800ebe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb94:	0e1b      	lsrs	r3, r3, #24
 800eb96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb9a:	ee07 3a90 	vmov	s15, r3
 800eb9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ebaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800ebae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebb6:	ee17 2a90 	vmov	r2, s15
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ebbe:	e008      	b.n	800ebd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	609a      	str	r2, [r3, #8]
}
 800ebd2:	bf00      	nop
 800ebd4:	3724      	adds	r7, #36	@ 0x24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop
 800ebe0:	58024400 	.word	0x58024400
 800ebe4:	03d09000 	.word	0x03d09000
 800ebe8:	46000000 	.word	0x46000000
 800ebec:	4c742400 	.word	0x4c742400
 800ebf0:	4a742400 	.word	0x4a742400
 800ebf4:	4c371b00 	.word	0x4c371b00

0800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b089      	sub	sp, #36	@ 0x24
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ec00:	4ba1      	ldr	r3, [pc, #644]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec04:	f003 0303 	and.w	r3, r3, #3
 800ec08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ec0a:	4b9f      	ldr	r3, [pc, #636]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec0e:	0d1b      	lsrs	r3, r3, #20
 800ec10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ec16:	4b9c      	ldr	r3, [pc, #624]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec1a:	0a1b      	lsrs	r3, r3, #8
 800ec1c:	f003 0301 	and.w	r3, r3, #1
 800ec20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ec22:	4b99      	ldr	r3, [pc, #612]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec26:	08db      	lsrs	r3, r3, #3
 800ec28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec2c:	693a      	ldr	r2, [r7, #16]
 800ec2e:	fb02 f303 	mul.w	r3, r2, r3
 800ec32:	ee07 3a90 	vmov	s15, r3
 800ec36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f000 8111 	beq.w	800ee68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	f000 8083 	beq.w	800ed54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	2b02      	cmp	r3, #2
 800ec52:	f200 80a1 	bhi.w	800ed98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d003      	beq.n	800ec64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d056      	beq.n	800ed10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ec62:	e099      	b.n	800ed98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec64:	4b88      	ldr	r3, [pc, #544]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f003 0320 	and.w	r3, r3, #32
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d02d      	beq.n	800eccc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec70:	4b85      	ldr	r3, [pc, #532]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	08db      	lsrs	r3, r3, #3
 800ec76:	f003 0303 	and.w	r3, r3, #3
 800ec7a:	4a84      	ldr	r2, [pc, #528]	@ (800ee8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ec7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ec80:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	ee07 3a90 	vmov	s15, r3
 800ec88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	ee07 3a90 	vmov	s15, r3
 800ec92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec9a:	4b7b      	ldr	r3, [pc, #492]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca2:	ee07 3a90 	vmov	s15, r3
 800eca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ee90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ecb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ecca:	e087      	b.n	800eddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	ee07 3a90 	vmov	s15, r3
 800ecd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ee94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ecda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecde:	4b6a      	ldr	r3, [pc, #424]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ece0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ece2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ece6:	ee07 3a90 	vmov	s15, r3
 800ecea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecee:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecf2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ee90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ecf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed0e:	e065      	b.n	800eddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	ee07 3a90 	vmov	s15, r3
 800ed16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ee98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ed1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed22:	4b59      	ldr	r3, [pc, #356]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed2a:	ee07 3a90 	vmov	s15, r3
 800ed2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ee90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ed3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed52:	e043      	b.n	800eddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	ee07 3a90 	vmov	s15, r3
 800ed5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ee9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ed62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed66:	4b48      	ldr	r3, [pc, #288]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed6e:	ee07 3a90 	vmov	s15, r3
 800ed72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ee90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ed7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed96:	e021      	b.n	800eddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	ee07 3a90 	vmov	s15, r3
 800ed9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eda2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ee98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800eda6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800edaa:	4b37      	ldr	r3, [pc, #220]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edb2:	ee07 3a90 	vmov	s15, r3
 800edb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edba:	ed97 6a03 	vldr	s12, [r7, #12]
 800edbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ee90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800edc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800edc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800edca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800edce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800edda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800eddc:	4b2a      	ldr	r3, [pc, #168]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ede0:	0a5b      	lsrs	r3, r3, #9
 800ede2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ede6:	ee07 3a90 	vmov	s15, r3
 800edea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800edf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800edfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee02:	ee17 2a90 	vmov	r2, s15
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ee0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee0e:	0c1b      	lsrs	r3, r3, #16
 800ee10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee14:	ee07 3a90 	vmov	s15, r3
 800ee18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ee20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ee24:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee30:	ee17 2a90 	vmov	r2, s15
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ee38:	4b13      	ldr	r3, [pc, #76]	@ (800ee88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee3c:	0e1b      	lsrs	r3, r3, #24
 800ee3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee42:	ee07 3a90 	vmov	s15, r3
 800ee46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ee4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ee52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee5e:	ee17 2a90 	vmov	r2, s15
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ee66:	e008      	b.n	800ee7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	609a      	str	r2, [r3, #8]
}
 800ee7a:	bf00      	nop
 800ee7c:	3724      	adds	r7, #36	@ 0x24
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	58024400 	.word	0x58024400
 800ee8c:	03d09000 	.word	0x03d09000
 800ee90:	46000000 	.word	0x46000000
 800ee94:	4c742400 	.word	0x4c742400
 800ee98:	4a742400 	.word	0x4a742400
 800ee9c:	4c371b00 	.word	0x4c371b00

0800eea0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b089      	sub	sp, #36	@ 0x24
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eea8:	4ba0      	ldr	r3, [pc, #640]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eeaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeac:	f003 0303 	and.w	r3, r3, #3
 800eeb0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800eeb2:	4b9e      	ldr	r3, [pc, #632]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eeb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eeb6:	091b      	lsrs	r3, r3, #4
 800eeb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eebc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800eebe:	4b9b      	ldr	r3, [pc, #620]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eec2:	f003 0301 	and.w	r3, r3, #1
 800eec6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800eec8:	4b98      	ldr	r3, [pc, #608]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eeca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eecc:	08db      	lsrs	r3, r3, #3
 800eece:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eed2:	693a      	ldr	r2, [r7, #16]
 800eed4:	fb02 f303 	mul.w	r3, r2, r3
 800eed8:	ee07 3a90 	vmov	s15, r3
 800eedc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eee0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 8111 	beq.w	800f10e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	2b02      	cmp	r3, #2
 800eef0:	f000 8083 	beq.w	800effa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	f200 80a1 	bhi.w	800f03e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d003      	beq.n	800ef0a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d056      	beq.n	800efb6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ef08:	e099      	b.n	800f03e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef0a:	4b88      	ldr	r3, [pc, #544]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f003 0320 	and.w	r3, r3, #32
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d02d      	beq.n	800ef72 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ef16:	4b85      	ldr	r3, [pc, #532]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	08db      	lsrs	r3, r3, #3
 800ef1c:	f003 0303 	and.w	r3, r3, #3
 800ef20:	4a83      	ldr	r2, [pc, #524]	@ (800f130 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ef22:	fa22 f303 	lsr.w	r3, r2, r3
 800ef26:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	ee07 3a90 	vmov	s15, r3
 800ef2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	ee07 3a90 	vmov	s15, r3
 800ef38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef40:	4b7a      	ldr	r3, [pc, #488]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef48:	ee07 3a90 	vmov	s15, r3
 800ef4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef50:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef54:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800f134 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef6c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ef70:	e087      	b.n	800f082 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	ee07 3a90 	vmov	s15, r3
 800ef78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef7c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800f138 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ef80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef84:	4b69      	ldr	r3, [pc, #420]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef8c:	ee07 3a90 	vmov	s15, r3
 800ef90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef94:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef98:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800f134 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efa4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800efa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efb4:	e065      	b.n	800f082 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	ee07 3a90 	vmov	s15, r3
 800efbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efc0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800f13c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800efc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efc8:	4b58      	ldr	r3, [pc, #352]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800efca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efd0:	ee07 3a90 	vmov	s15, r3
 800efd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efd8:	ed97 6a03 	vldr	s12, [r7, #12]
 800efdc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800f134 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800efe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800efec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eff4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eff8:	e043      	b.n	800f082 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	ee07 3a90 	vmov	s15, r3
 800f000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f004:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800f140 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f00c:	4b47      	ldr	r3, [pc, #284]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f014:	ee07 3a90 	vmov	s15, r3
 800f018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f01c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f020:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800f134 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f02c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f034:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f038:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f03c:	e021      	b.n	800f082 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	ee07 3a90 	vmov	s15, r3
 800f044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f048:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800f138 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f04c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f050:	4b36      	ldr	r3, [pc, #216]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f058:	ee07 3a90 	vmov	s15, r3
 800f05c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f060:	ed97 6a03 	vldr	s12, [r7, #12]
 800f064:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f134 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f06c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f07c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f080:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f082:	4b2a      	ldr	r3, [pc, #168]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f086:	0a5b      	lsrs	r3, r3, #9
 800f088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f08c:	ee07 3a90 	vmov	s15, r3
 800f090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f094:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f098:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f09c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0a8:	ee17 2a90 	vmov	r2, s15
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f0b0:	4b1e      	ldr	r3, [pc, #120]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0b4:	0c1b      	lsrs	r3, r3, #16
 800f0b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0ba:	ee07 3a90 	vmov	s15, r3
 800f0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f0c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f0ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0d6:	ee17 2a90 	vmov	r2, s15
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f0de:	4b13      	ldr	r3, [pc, #76]	@ (800f12c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0e2:	0e1b      	lsrs	r3, r3, #24
 800f0e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0e8:	ee07 3a90 	vmov	s15, r3
 800f0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f0f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f0f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f104:	ee17 2a90 	vmov	r2, s15
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f10c:	e008      	b.n	800f120 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	609a      	str	r2, [r3, #8]
}
 800f120:	bf00      	nop
 800f122:	3724      	adds	r7, #36	@ 0x24
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	58024400 	.word	0x58024400
 800f130:	03d09000 	.word	0x03d09000
 800f134:	46000000 	.word	0x46000000
 800f138:	4c742400 	.word	0x4c742400
 800f13c:	4a742400 	.word	0x4a742400
 800f140:	4c371b00 	.word	0x4c371b00

0800f144 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f14e:	2300      	movs	r3, #0
 800f150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f152:	4b53      	ldr	r3, [pc, #332]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f156:	f003 0303 	and.w	r3, r3, #3
 800f15a:	2b03      	cmp	r3, #3
 800f15c:	d101      	bne.n	800f162 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f15e:	2301      	movs	r3, #1
 800f160:	e099      	b.n	800f296 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f162:	4b4f      	ldr	r3, [pc, #316]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	4a4e      	ldr	r2, [pc, #312]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f168:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f16c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f16e:	f7fb fc79 	bl	800aa64 <HAL_GetTick>
 800f172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f174:	e008      	b.n	800f188 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f176:	f7fb fc75 	bl	800aa64 <HAL_GetTick>
 800f17a:	4602      	mov	r2, r0
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	2b02      	cmp	r3, #2
 800f182:	d901      	bls.n	800f188 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f184:	2303      	movs	r3, #3
 800f186:	e086      	b.n	800f296 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f188:	4b45      	ldr	r3, [pc, #276]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1f0      	bne.n	800f176 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f194:	4b42      	ldr	r3, [pc, #264]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f198:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	031b      	lsls	r3, r3, #12
 800f1a2:	493f      	ldr	r1, [pc, #252]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	628b      	str	r3, [r1, #40]	@ 0x28
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	025b      	lsls	r3, r3, #9
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	431a      	orrs	r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	041b      	lsls	r3, r3, #16
 800f1c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f1ca:	431a      	orrs	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	061b      	lsls	r3, r3, #24
 800f1d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f1d8:	4931      	ldr	r1, [pc, #196]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f1da:	4313      	orrs	r3, r2
 800f1dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f1de:	4b30      	ldr	r3, [pc, #192]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	695b      	ldr	r3, [r3, #20]
 800f1ea:	492d      	ldr	r1, [pc, #180]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f1f0:	4b2b      	ldr	r3, [pc, #172]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1f4:	f023 0220 	bic.w	r2, r3, #32
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	699b      	ldr	r3, [r3, #24]
 800f1fc:	4928      	ldr	r1, [pc, #160]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f1fe:	4313      	orrs	r3, r2
 800f200:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f202:	4b27      	ldr	r3, [pc, #156]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f206:	4a26      	ldr	r2, [pc, #152]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f208:	f023 0310 	bic.w	r3, r3, #16
 800f20c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f20e:	4b24      	ldr	r3, [pc, #144]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f212:	4b24      	ldr	r3, [pc, #144]	@ (800f2a4 <RCCEx_PLL2_Config+0x160>)
 800f214:	4013      	ands	r3, r2
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	69d2      	ldr	r2, [r2, #28]
 800f21a:	00d2      	lsls	r2, r2, #3
 800f21c:	4920      	ldr	r1, [pc, #128]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f21e:	4313      	orrs	r3, r2
 800f220:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f222:	4b1f      	ldr	r3, [pc, #124]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f226:	4a1e      	ldr	r2, [pc, #120]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f228:	f043 0310 	orr.w	r3, r3, #16
 800f22c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d106      	bne.n	800f242 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f234:	4b1a      	ldr	r3, [pc, #104]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f238:	4a19      	ldr	r2, [pc, #100]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f23a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f23e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f240:	e00f      	b.n	800f262 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	2b01      	cmp	r3, #1
 800f246:	d106      	bne.n	800f256 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f248:	4b15      	ldr	r3, [pc, #84]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f24c:	4a14      	ldr	r2, [pc, #80]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f24e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f254:	e005      	b.n	800f262 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f256:	4b12      	ldr	r3, [pc, #72]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f25a:	4a11      	ldr	r2, [pc, #68]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f25c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f260:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f262:	4b0f      	ldr	r3, [pc, #60]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a0e      	ldr	r2, [pc, #56]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f268:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f26c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f26e:	f7fb fbf9 	bl	800aa64 <HAL_GetTick>
 800f272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f274:	e008      	b.n	800f288 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f276:	f7fb fbf5 	bl	800aa64 <HAL_GetTick>
 800f27a:	4602      	mov	r2, r0
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	1ad3      	subs	r3, r2, r3
 800f280:	2b02      	cmp	r3, #2
 800f282:	d901      	bls.n	800f288 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f284:	2303      	movs	r3, #3
 800f286:	e006      	b.n	800f296 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f288:	4b05      	ldr	r3, [pc, #20]	@ (800f2a0 <RCCEx_PLL2_Config+0x15c>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f290:	2b00      	cmp	r3, #0
 800f292:	d0f0      	beq.n	800f276 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f294:	7bfb      	ldrb	r3, [r7, #15]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	58024400 	.word	0x58024400
 800f2a4:	ffff0007 	.word	0xffff0007

0800f2a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f2b6:	4b53      	ldr	r3, [pc, #332]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2ba:	f003 0303 	and.w	r3, r3, #3
 800f2be:	2b03      	cmp	r3, #3
 800f2c0:	d101      	bne.n	800f2c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e099      	b.n	800f3fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f2c6:	4b4f      	ldr	r3, [pc, #316]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a4e      	ldr	r2, [pc, #312]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f2cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f2d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2d2:	f7fb fbc7 	bl	800aa64 <HAL_GetTick>
 800f2d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f2d8:	e008      	b.n	800f2ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f2da:	f7fb fbc3 	bl	800aa64 <HAL_GetTick>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	1ad3      	subs	r3, r2, r3
 800f2e4:	2b02      	cmp	r3, #2
 800f2e6:	d901      	bls.n	800f2ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f2e8:	2303      	movs	r3, #3
 800f2ea:	e086      	b.n	800f3fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f2ec:	4b45      	ldr	r3, [pc, #276]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d1f0      	bne.n	800f2da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f2f8:	4b42      	ldr	r3, [pc, #264]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	051b      	lsls	r3, r3, #20
 800f306:	493f      	ldr	r1, [pc, #252]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f308:	4313      	orrs	r3, r2
 800f30a:	628b      	str	r3, [r1, #40]	@ 0x28
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	3b01      	subs	r3, #1
 800f312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	3b01      	subs	r3, #1
 800f31c:	025b      	lsls	r3, r3, #9
 800f31e:	b29b      	uxth	r3, r3
 800f320:	431a      	orrs	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	3b01      	subs	r3, #1
 800f328:	041b      	lsls	r3, r3, #16
 800f32a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f32e:	431a      	orrs	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	3b01      	subs	r3, #1
 800f336:	061b      	lsls	r3, r3, #24
 800f338:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f33c:	4931      	ldr	r1, [pc, #196]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f33e:	4313      	orrs	r3, r2
 800f340:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f342:	4b30      	ldr	r3, [pc, #192]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f346:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	695b      	ldr	r3, [r3, #20]
 800f34e:	492d      	ldr	r1, [pc, #180]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f350:	4313      	orrs	r3, r2
 800f352:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f354:	4b2b      	ldr	r3, [pc, #172]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f358:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	699b      	ldr	r3, [r3, #24]
 800f360:	4928      	ldr	r1, [pc, #160]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f362:	4313      	orrs	r3, r2
 800f364:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f366:	4b27      	ldr	r3, [pc, #156]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f36a:	4a26      	ldr	r2, [pc, #152]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f36c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f372:	4b24      	ldr	r3, [pc, #144]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f376:	4b24      	ldr	r3, [pc, #144]	@ (800f408 <RCCEx_PLL3_Config+0x160>)
 800f378:	4013      	ands	r3, r2
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	69d2      	ldr	r2, [r2, #28]
 800f37e:	00d2      	lsls	r2, r2, #3
 800f380:	4920      	ldr	r1, [pc, #128]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f382:	4313      	orrs	r3, r2
 800f384:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f386:	4b1f      	ldr	r3, [pc, #124]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f38a:	4a1e      	ldr	r2, [pc, #120]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f38c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d106      	bne.n	800f3a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f398:	4b1a      	ldr	r3, [pc, #104]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f39c:	4a19      	ldr	r2, [pc, #100]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f39e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f3a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f3a4:	e00f      	b.n	800f3c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d106      	bne.n	800f3ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f3ac:	4b15      	ldr	r3, [pc, #84]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b0:	4a14      	ldr	r2, [pc, #80]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f3b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f3b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f3b8:	e005      	b.n	800f3c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f3ba:	4b12      	ldr	r3, [pc, #72]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3be:	4a11      	ldr	r2, [pc, #68]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f3c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f3c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f3c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4a0e      	ldr	r2, [pc, #56]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f3cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f3d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3d2:	f7fb fb47 	bl	800aa64 <HAL_GetTick>
 800f3d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f3d8:	e008      	b.n	800f3ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f3da:	f7fb fb43 	bl	800aa64 <HAL_GetTick>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	2b02      	cmp	r3, #2
 800f3e6:	d901      	bls.n	800f3ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f3e8:	2303      	movs	r3, #3
 800f3ea:	e006      	b.n	800f3fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f3ec:	4b05      	ldr	r3, [pc, #20]	@ (800f404 <RCCEx_PLL3_Config+0x15c>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d0f0      	beq.n	800f3da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	58024400 	.word	0x58024400
 800f408:	ffff0007 	.word	0xffff0007

0800f40c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b08a      	sub	sp, #40	@ 0x28
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d101      	bne.n	800f41e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f41a:	2301      	movs	r3, #1
 800f41c:	e075      	b.n	800f50a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f424:	b2db      	uxtb	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d105      	bne.n	800f436 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2200      	movs	r2, #0
 800f42e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7fa fd71 	bl	8009f18 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2204      	movs	r2, #4
 800f43a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 f868 	bl	800f514 <HAL_SD_InitCard>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f44a:	2301      	movs	r3, #1
 800f44c:	e05d      	b.n	800f50a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800f44e:	f107 0308 	add.w	r3, r7, #8
 800f452:	4619      	mov	r1, r3
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 fdb5 	bl	800ffc4 <HAL_SD_GetCardStatus>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800f460:	2301      	movs	r3, #1
 800f462:	e052      	b.n	800f50a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800f464:	7e3b      	ldrb	r3, [r7, #24]
 800f466:	b2db      	uxtb	r3, r3
 800f468:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800f46a:	7e7b      	ldrb	r3, [r7, #25]
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f474:	2b01      	cmp	r3, #1
 800f476:	d10a      	bne.n	800f48e <HAL_SD_Init+0x82>
 800f478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d102      	bne.n	800f484 <HAL_SD_Init+0x78>
 800f47e:	6a3b      	ldr	r3, [r7, #32]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d004      	beq.n	800f48e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f48a:	659a      	str	r2, [r3, #88]	@ 0x58
 800f48c:	e00b      	b.n	800f4a6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f492:	2b01      	cmp	r3, #1
 800f494:	d104      	bne.n	800f4a0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f49c:	659a      	str	r2, [r3, #88]	@ 0x58
 800f49e:	e002      	b.n	800f4a6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 fe73 	bl	8010198 <HAL_SD_ConfigWideBusOperation>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d001      	beq.n	800f4bc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e026      	b.n	800f50a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800f4bc:	f7fb fad2 	bl	800aa64 <HAL_GetTick>
 800f4c0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800f4c2:	e011      	b.n	800f4e8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f4c4:	f7fb face 	bl	800aa64 <HAL_GetTick>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	1ad3      	subs	r3, r2, r3
 800f4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d2:	d109      	bne.n	800f4e8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f4da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800f4e4:	2303      	movs	r3, #3
 800f4e6:	e010      	b.n	800f50a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f000 ff67 	bl	80103bc <HAL_SD_GetCardState>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b04      	cmp	r3, #4
 800f4f2:	d1e7      	bne.n	800f4c4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2201      	movs	r2, #1
 800f504:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800f508:	2300      	movs	r3, #0
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3728      	adds	r7, #40	@ 0x28
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
	...

0800f514 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f514:	b590      	push	{r4, r7, lr}
 800f516:	b08d      	sub	sp, #52	@ 0x34
 800f518:	af02      	add	r7, sp, #8
 800f51a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800f51c:	2300      	movs	r3, #0
 800f51e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800f520:	2300      	movs	r3, #0
 800f522:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800f524:	2300      	movs	r3, #0
 800f526:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800f528:	2300      	movs	r3, #0
 800f52a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800f52c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800f530:	f04f 0100 	mov.w	r1, #0
 800f534:	f7fe fd24 	bl	800df80 <HAL_RCCEx_GetPeriphCLKFreq>
 800f538:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800f53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d109      	bne.n	800f554 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2201      	movs	r2, #1
 800f544:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800f54e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f550:	2301      	movs	r3, #1
 800f552:	e070      	b.n	800f636 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800f554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f556:	0a1b      	lsrs	r3, r3, #8
 800f558:	4a39      	ldr	r2, [pc, #228]	@ (800f640 <HAL_SD_InitCard+0x12c>)
 800f55a:	fba2 2303 	umull	r2, r3, r2, r3
 800f55e:	091b      	lsrs	r3, r3, #4
 800f560:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681c      	ldr	r4, [r3, #0]
 800f566:	466a      	mov	r2, sp
 800f568:	f107 0318 	add.w	r3, r7, #24
 800f56c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f570:	e882 0003 	stmia.w	r2, {r0, r1}
 800f574:	f107 030c 	add.w	r3, r7, #12
 800f578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f57a:	4620      	mov	r0, r4
 800f57c:	f004 fe76 	bl	801426c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4618      	mov	r0, r3
 800f586:	f004 feb9 	bl	80142fc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d005      	beq.n	800f59c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	005b      	lsls	r3, r3, #1
 800f594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f596:	fbb2 f3f3 	udiv	r3, r2, r3
 800f59a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800f59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d007      	beq.n	800f5b2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800f5a2:	4a28      	ldr	r2, [pc, #160]	@ (800f644 <HAL_SD_InitCard+0x130>)
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fb fa65 	bl	800aa7c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fff0 	bl	8010598 <SD_PowerON>
 800f5b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00b      	beq.n	800f5d8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f5cc:	6a3b      	ldr	r3, [r7, #32]
 800f5ce:	431a      	orrs	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e02e      	b.n	800f636 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 ff0f 	bl	80103fc <SD_InitCard>
 800f5de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5e0:	6a3b      	ldr	r3, [r7, #32]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00b      	beq.n	800f5fe <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f5f2:	6a3b      	ldr	r3, [r7, #32]
 800f5f4:	431a      	orrs	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	e01b      	b.n	800f636 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f606:	4618      	mov	r0, r3
 800f608:	f004 ff0e 	bl	8014428 <SDMMC_CmdBlockLength>
 800f60c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f60e:	6a3b      	ldr	r3, [r7, #32]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00f      	beq.n	800f634 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4a0b      	ldr	r2, [pc, #44]	@ (800f648 <HAL_SD_InitCard+0x134>)
 800f61a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f620:	6a3b      	ldr	r3, [r7, #32]
 800f622:	431a      	orrs	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800f630:	2301      	movs	r3, #1
 800f632:	e000      	b.n	800f636 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	372c      	adds	r7, #44	@ 0x2c
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd90      	pop	{r4, r7, pc}
 800f63e:	bf00      	nop
 800f640:	014f8b59 	.word	0x014f8b59
 800f644:	00012110 	.word	0x00012110
 800f648:	1fe00fff 	.word	0x1fe00fff

0800f64c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b092      	sub	sp, #72	@ 0x48
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f65a:	f7fb fa03 	bl	800aa64 <HAL_GetTick>
 800f65e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d107      	bne.n	800f67e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f672:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f67a:	2301      	movs	r3, #1
 800f67c:	e167      	b.n	800f94e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f684:	b2db      	uxtb	r3, r3
 800f686:	2b01      	cmp	r3, #1
 800f688:	f040 815a 	bne.w	800f940 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2200      	movs	r2, #0
 800f690:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f692:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	441a      	add	r2, r3
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d907      	bls.n	800f6b0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6a4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	e14e      	b.n	800f94e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2203      	movs	r2, #3
 800f6b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d002      	beq.n	800f6ce <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800f6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ca:	025b      	lsls	r3, r3, #9
 800f6cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f6d2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	025b      	lsls	r3, r3, #9
 800f6d8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f6da:	2390      	movs	r3, #144	@ 0x90
 800f6dc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6de:	2302      	movs	r3, #2
 800f6e0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f107 0214 	add.w	r2, r7, #20
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f004 fe6b 	bl	80143d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	68da      	ldr	r2, [r3, #12]
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f708:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d90a      	bls.n	800f726 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2202      	movs	r2, #2
 800f714:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f71c:	4618      	mov	r0, r3
 800f71e:	f004 fec9 	bl	80144b4 <SDMMC_CmdReadMultiBlock>
 800f722:	6478      	str	r0, [r7, #68]	@ 0x44
 800f724:	e009      	b.n	800f73a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2201      	movs	r2, #1
 800f72a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f732:	4618      	mov	r0, r3
 800f734:	f004 fe9b 	bl	801446e <SDMMC_CmdReadSingleBlock>
 800f738:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800f73a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d012      	beq.n	800f766 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4a84      	ldr	r2, [pc, #528]	@ (800f958 <HAL_SD_ReadBlocks+0x30c>)
 800f746:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f74e:	431a      	orrs	r2, r3
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2201      	movs	r2, #1
 800f758:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2200      	movs	r2, #0
 800f760:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f762:	2301      	movs	r3, #1
 800f764:	e0f3      	b.n	800f94e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f76a:	e058      	b.n	800f81e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f772:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f776:	2b00      	cmp	r3, #0
 800f778:	d033      	beq.n	800f7e2 <HAL_SD_ReadBlocks+0x196>
 800f77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f77c:	2b1f      	cmp	r3, #31
 800f77e:	d930      	bls.n	800f7e2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800f780:	2300      	movs	r3, #0
 800f782:	643b      	str	r3, [r7, #64]	@ 0x40
 800f784:	e027      	b.n	800f7d6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4618      	mov	r0, r3
 800f78c:	f004 fd98 	bl	80142c0 <SDMMC_ReadFIFO>
 800f790:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800f792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f794:	b2da      	uxtb	r2, r3
 800f796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f798:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f79c:	3301      	adds	r3, #1
 800f79e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800f7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7a2:	0a1b      	lsrs	r3, r3, #8
 800f7a4:	b2da      	uxtb	r2, r3
 800f7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f7aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800f7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7b2:	0c1b      	lsrs	r3, r3, #16
 800f7b4:	b2da      	uxtb	r2, r3
 800f7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7bc:	3301      	adds	r3, #1
 800f7be:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800f7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7c2:	0e1b      	lsrs	r3, r3, #24
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800f7d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f7d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7d8:	2b07      	cmp	r3, #7
 800f7da:	d9d4      	bls.n	800f786 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800f7dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7de:	3b20      	subs	r3, #32
 800f7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800f7e2:	f7fb f93f 	bl	800aa64 <HAL_GetTick>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d902      	bls.n	800f7f8 <HAL_SD_ReadBlocks+0x1ac>
 800f7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d112      	bne.n	800f81e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a56      	ldr	r2, [pc, #344]	@ (800f958 <HAL_SD_ReadBlocks+0x30c>)
 800f7fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f804:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2200      	movs	r2, #0
 800f818:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800f81a:	2303      	movs	r3, #3
 800f81c:	e097      	b.n	800f94e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f824:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d09f      	beq.n	800f76c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	68da      	ldr	r2, [r3, #12]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f83a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f846:	2b00      	cmp	r3, #0
 800f848:	d022      	beq.n	800f890 <HAL_SD_ReadBlocks+0x244>
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d91f      	bls.n	800f890 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f854:	2b03      	cmp	r3, #3
 800f856:	d01b      	beq.n	800f890 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f004 fe93 	bl	8014588 <SDMMC_CmdStopTransfer>
 800f862:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800f864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f866:	2b00      	cmp	r3, #0
 800f868:	d012      	beq.n	800f890 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4a3a      	ldr	r2, [pc, #232]	@ (800f958 <HAL_SD_ReadBlocks+0x30c>)
 800f870:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f878:	431a      	orrs	r2, r3
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2201      	movs	r2, #1
 800f882:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2200      	movs	r2, #0
 800f88a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800f88c:	2301      	movs	r3, #1
 800f88e:	e05e      	b.n	800f94e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f896:	f003 0308 	and.w	r3, r3, #8
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d012      	beq.n	800f8c4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4a2d      	ldr	r2, [pc, #180]	@ (800f958 <HAL_SD_ReadBlocks+0x30c>)
 800f8a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8aa:	f043 0208 	orr.w	r2, r3, #8
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	e044      	b.n	800f94e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8ca:	f003 0302 	and.w	r3, r3, #2
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d012      	beq.n	800f8f8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a20      	ldr	r2, [pc, #128]	@ (800f958 <HAL_SD_ReadBlocks+0x30c>)
 800f8d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8de:	f043 0202 	orr.w	r2, r3, #2
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e02a      	b.n	800f94e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8fe:	f003 0320 	and.w	r3, r3, #32
 800f902:	2b00      	cmp	r3, #0
 800f904:	d012      	beq.n	800f92c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a13      	ldr	r2, [pc, #76]	@ (800f958 <HAL_SD_ReadBlocks+0x30c>)
 800f90c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f912:	f043 0220 	orr.w	r2, r3, #32
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2201      	movs	r2, #1
 800f91e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2200      	movs	r2, #0
 800f926:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800f928:	2301      	movs	r3, #1
 800f92a:	e010      	b.n	800f94e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a0a      	ldr	r2, [pc, #40]	@ (800f95c <HAL_SD_ReadBlocks+0x310>)
 800f932:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2201      	movs	r2, #1
 800f938:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800f93c:	2300      	movs	r3, #0
 800f93e:	e006      	b.n	800f94e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f944:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f94c:	2301      	movs	r3, #1
  }
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3748      	adds	r7, #72	@ 0x48
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	1fe00fff 	.word	0x1fe00fff
 800f95c:	18000f3a 	.word	0x18000f3a

0800f960 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b092      	sub	sp, #72	@ 0x48
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
 800f96c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f96e:	f7fb f879 	bl	800aa64 <HAL_GetTick>
 800f972:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d107      	bne.n	800f992 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f986:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f98e:	2301      	movs	r3, #1
 800f990:	e16b      	b.n	800fc6a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	f040 815e 	bne.w	800fc5c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f9a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	441a      	add	r2, r3
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d907      	bls.n	800f9c4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e152      	b.n	800fc6a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2203      	movs	r2, #3
 800f9c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d002      	beq.n	800f9e2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800f9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9de:	025b      	lsls	r3, r3, #9
 800f9e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	025b      	lsls	r3, r3, #9
 800f9ec:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800f9ee:	2390      	movs	r3, #144	@ 0x90
 800f9f0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f107 0218 	add.w	r2, r7, #24
 800fa06:	4611      	mov	r1, r2
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f004 fce1 	bl	80143d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68da      	ldr	r2, [r3, #12]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa1c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d90a      	bls.n	800fa3a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2220      	movs	r2, #32
 800fa28:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fa30:	4618      	mov	r0, r3
 800fa32:	f004 fd85 	bl	8014540 <SDMMC_CmdWriteMultiBlock>
 800fa36:	6478      	str	r0, [r7, #68]	@ 0x44
 800fa38:	e009      	b.n	800fa4e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2210      	movs	r2, #16
 800fa3e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fa46:	4618      	mov	r0, r3
 800fa48:	f004 fd57 	bl	80144fa <SDMMC_CmdWriteSingleBlock>
 800fa4c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800fa4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d012      	beq.n	800fa7a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4a86      	ldr	r2, [pc, #536]	@ (800fc74 <HAL_SD_WriteBlocks+0x314>)
 800fa5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fa60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa62:	431a      	orrs	r2, r3
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2200      	movs	r2, #0
 800fa74:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800fa76:	2301      	movs	r3, #1
 800fa78:	e0f7      	b.n	800fc6a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800fa7e:	e05c      	b.n	800fb3a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d037      	beq.n	800fafe <HAL_SD_WriteBlocks+0x19e>
 800fa8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa90:	2b1f      	cmp	r3, #31
 800fa92:	d934      	bls.n	800fafe <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 800fa94:	2300      	movs	r3, #0
 800fa96:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa98:	e02b      	b.n	800faf2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800fa9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800faa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faa2:	3301      	adds	r3, #1
 800faa4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800faa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	021a      	lsls	r2, r3, #8
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	4313      	orrs	r3, r2
 800fab0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800fab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fab4:	3301      	adds	r3, #1
 800fab6:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800fab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	041a      	lsls	r2, r3, #16
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	4313      	orrs	r3, r2
 800fac2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800fac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fac6:	3301      	adds	r3, #1
 800fac8:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800faca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	061a      	lsls	r2, r3, #24
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	4313      	orrs	r3, r2
 800fad4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800fad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fad8:	3301      	adds	r3, #1
 800fada:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f107 0214 	add.w	r2, r7, #20
 800fae4:	4611      	mov	r1, r2
 800fae6:	4618      	mov	r0, r3
 800fae8:	f004 fbf7 	bl	80142da <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800faec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faee:	3301      	adds	r3, #1
 800faf0:	643b      	str	r3, [r7, #64]	@ 0x40
 800faf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faf4:	2b07      	cmp	r3, #7
 800faf6:	d9d0      	bls.n	800fa9a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800faf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fafa:	3b20      	subs	r3, #32
 800fafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800fafe:	f7fa ffb1 	bl	800aa64 <HAL_GetTick>
 800fb02:	4602      	mov	r2, r0
 800fb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb06:	1ad3      	subs	r3, r2, r3
 800fb08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d902      	bls.n	800fb14 <HAL_SD_WriteBlocks+0x1b4>
 800fb0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d112      	bne.n	800fb3a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a56      	ldr	r2, [pc, #344]	@ (800fc74 <HAL_SD_WriteBlocks+0x314>)
 800fb1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb22:	431a      	orrs	r2, r3
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2200      	movs	r2, #0
 800fb34:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800fb36:	2303      	movs	r3, #3
 800fb38:	e097      	b.n	800fc6a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb40:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d09b      	beq.n	800fa80 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	68da      	ldr	r2, [r3, #12]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fb56:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d022      	beq.n	800fbac <HAL_SD_WriteBlocks+0x24c>
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d91f      	bls.n	800fbac <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb70:	2b03      	cmp	r3, #3
 800fb72:	d01b      	beq.n	800fbac <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f004 fd05 	bl	8014588 <SDMMC_CmdStopTransfer>
 800fb7e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800fb80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d012      	beq.n	800fbac <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4a3a      	ldr	r2, [pc, #232]	@ (800fc74 <HAL_SD_WriteBlocks+0x314>)
 800fb8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb94:	431a      	orrs	r2, r3
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2200      	movs	r2, #0
 800fba6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	e05e      	b.n	800fc6a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbb2:	f003 0308 	and.w	r3, r3, #8
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d012      	beq.n	800fbe0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4a2d      	ldr	r2, [pc, #180]	@ (800fc74 <HAL_SD_WriteBlocks+0x314>)
 800fbc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbc6:	f043 0208 	orr.w	r2, r3, #8
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	e044      	b.n	800fc6a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbe6:	f003 0302 	and.w	r3, r3, #2
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d012      	beq.n	800fc14 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a20      	ldr	r2, [pc, #128]	@ (800fc74 <HAL_SD_WriteBlocks+0x314>)
 800fbf4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbfa:	f043 0202 	orr.w	r2, r3, #2
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2201      	movs	r2, #1
 800fc06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800fc10:	2301      	movs	r3, #1
 800fc12:	e02a      	b.n	800fc6a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc1a:	f003 0310 	and.w	r3, r3, #16
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d012      	beq.n	800fc48 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4a13      	ldr	r2, [pc, #76]	@ (800fc74 <HAL_SD_WriteBlocks+0x314>)
 800fc28:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc2e:	f043 0210 	orr.w	r2, r3, #16
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800fc44:	2301      	movs	r3, #1
 800fc46:	e010      	b.n	800fc6a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4a0a      	ldr	r2, [pc, #40]	@ (800fc78 <HAL_SD_WriteBlocks+0x318>)
 800fc4e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2201      	movs	r2, #1
 800fc54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	e006      	b.n	800fc6a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc60:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800fc68:	2301      	movs	r3, #1
  }
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3748      	adds	r7, #72	@ 0x48
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	1fe00fff 	.word	0x1fe00fff
 800fc78:	18000f3a 	.word	0x18000f3a

0800fc7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc8a:	0f9b      	lsrs	r3, r3, #30
 800fc8c:	b2da      	uxtb	r2, r3
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc96:	0e9b      	lsrs	r3, r3, #26
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	f003 030f 	and.w	r3, r3, #15
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fca8:	0e1b      	lsrs	r3, r3, #24
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	f003 0303 	and.w	r3, r3, #3
 800fcb0:	b2da      	uxtb	r2, r3
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcba:	0c1b      	lsrs	r3, r3, #16
 800fcbc:	b2da      	uxtb	r2, r3
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcc6:	0a1b      	lsrs	r3, r3, #8
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcd2:	b2da      	uxtb	r2, r3
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fcdc:	0d1b      	lsrs	r3, r3, #20
 800fcde:	b29a      	uxth	r2, r3
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fce8:	0c1b      	lsrs	r3, r3, #16
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	f003 030f 	and.w	r3, r3, #15
 800fcf0:	b2da      	uxtb	r2, r3
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fcfa:	0bdb      	lsrs	r3, r3, #15
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	f003 0301 	and.w	r3, r3, #1
 800fd02:	b2da      	uxtb	r2, r3
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fd0c:	0b9b      	lsrs	r3, r3, #14
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	f003 0301 	and.w	r3, r3, #1
 800fd14:	b2da      	uxtb	r2, r3
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fd1e:	0b5b      	lsrs	r3, r3, #13
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	f003 0301 	and.w	r3, r3, #1
 800fd26:	b2da      	uxtb	r2, r3
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fd30:	0b1b      	lsrs	r3, r3, #12
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	f003 0301 	and.w	r3, r3, #1
 800fd38:	b2da      	uxtb	r2, r3
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	2200      	movs	r2, #0
 800fd42:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d163      	bne.n	800fe14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fd50:	009a      	lsls	r2, r3, #2
 800fd52:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800fd56:	4013      	ands	r3, r2
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800fd5c:	0f92      	lsrs	r2, r2, #30
 800fd5e:	431a      	orrs	r2, r3
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd68:	0edb      	lsrs	r3, r3, #27
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	f003 0307 	and.w	r3, r3, #7
 800fd70:	b2da      	uxtb	r2, r3
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd7a:	0e1b      	lsrs	r3, r3, #24
 800fd7c:	b2db      	uxtb	r3, r3
 800fd7e:	f003 0307 	and.w	r3, r3, #7
 800fd82:	b2da      	uxtb	r2, r3
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd8c:	0d5b      	lsrs	r3, r3, #21
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	f003 0307 	and.w	r3, r3, #7
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd9e:	0c9b      	lsrs	r3, r3, #18
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	f003 0307 	and.w	r3, r3, #7
 800fda6:	b2da      	uxtb	r2, r3
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdb0:	0bdb      	lsrs	r3, r3, #15
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	f003 0307 	and.w	r3, r3, #7
 800fdb8:	b2da      	uxtb	r2, r3
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	691b      	ldr	r3, [r3, #16]
 800fdc2:	1c5a      	adds	r2, r3, #1
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	7e1b      	ldrb	r3, [r3, #24]
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	f003 0307 	and.w	r3, r3, #7
 800fdd2:	3302      	adds	r3, #2
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	fa02 f303 	lsl.w	r3, r2, r3
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800fdde:	fb03 f202 	mul.w	r2, r3, r2
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	7a1b      	ldrb	r3, [r3, #8]
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	f003 030f 	and.w	r3, r3, #15
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	409a      	lsls	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800fe00:	0a52      	lsrs	r2, r2, #9
 800fe02:	fb03 f202 	mul.w	r2, r3, r2
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe10:	655a      	str	r2, [r3, #84]	@ 0x54
 800fe12:	e031      	b.n	800fe78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d11d      	bne.n	800fe58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fe20:	041b      	lsls	r3, r3, #16
 800fe22:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe2a:	0c1b      	lsrs	r3, r3, #16
 800fe2c:	431a      	orrs	r2, r3
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	3301      	adds	r3, #1
 800fe38:	029a      	lsls	r2, r3, #10
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	655a      	str	r2, [r3, #84]	@ 0x54
 800fe56:	e00f      	b.n	800fe78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a58      	ldr	r2, [pc, #352]	@ (800ffc0 <HAL_SD_GetCardCSD+0x344>)
 800fe5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2201      	movs	r2, #1
 800fe70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800fe74:	2301      	movs	r3, #1
 800fe76:	e09d      	b.n	800ffb4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe7c:	0b9b      	lsrs	r3, r3, #14
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	f003 0301 	and.w	r3, r3, #1
 800fe84:	b2da      	uxtb	r2, r3
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe8e:	09db      	lsrs	r3, r3, #7
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800feb0:	0fdb      	lsrs	r3, r3, #31
 800feb2:	b2da      	uxtb	r2, r3
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800febc:	0f5b      	lsrs	r3, r3, #29
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	f003 0303 	and.w	r3, r3, #3
 800fec4:	b2da      	uxtb	r2, r3
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fece:	0e9b      	lsrs	r3, r3, #26
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	f003 0307 	and.w	r3, r3, #7
 800fed6:	b2da      	uxtb	r2, r3
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fee0:	0d9b      	lsrs	r3, r3, #22
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	f003 030f 	and.w	r3, r3, #15
 800fee8:	b2da      	uxtb	r2, r3
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fef2:	0d5b      	lsrs	r3, r3, #21
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	f003 0301 	and.w	r3, r3, #1
 800fefa:	b2da      	uxtb	r2, r3
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	2200      	movs	r2, #0
 800ff06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff0e:	0c1b      	lsrs	r3, r3, #16
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	f003 0301 	and.w	r3, r3, #1
 800ff16:	b2da      	uxtb	r2, r3
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff22:	0bdb      	lsrs	r3, r3, #15
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	f003 0301 	and.w	r3, r3, #1
 800ff2a:	b2da      	uxtb	r2, r3
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff36:	0b9b      	lsrs	r3, r3, #14
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	f003 0301 	and.w	r3, r3, #1
 800ff3e:	b2da      	uxtb	r2, r3
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff4a:	0b5b      	lsrs	r3, r3, #13
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	f003 0301 	and.w	r3, r3, #1
 800ff52:	b2da      	uxtb	r2, r3
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff5e:	0b1b      	lsrs	r3, r3, #12
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	f003 0301 	and.w	r3, r3, #1
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff72:	0a9b      	lsrs	r3, r3, #10
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	f003 0303 	and.w	r3, r3, #3
 800ff7a:	b2da      	uxtb	r2, r3
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff86:	0a1b      	lsrs	r3, r3, #8
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	f003 0303 	and.w	r3, r3, #3
 800ff8e:	b2da      	uxtb	r2, r3
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff9a:	085b      	lsrs	r3, r3, #1
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffa2:	b2da      	uxtb	r2, r3
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	2201      	movs	r2, #1
 800ffae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr
 800ffc0:	1fe00fff 	.word	0x1fe00fff

0800ffc4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b094      	sub	sp, #80	@ 0x50
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	2b03      	cmp	r3, #3
 800ffde:	d101      	bne.n	800ffe4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e0a7      	b.n	8010134 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ffe4:	f107 0308 	add.w	r3, r7, #8
 800ffe8:	4619      	mov	r1, r3
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 fb62 	bl	80106b4 <SD_SendSDStatus>
 800fff0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800fff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d011      	beq.n	801001c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4a4f      	ldr	r2, [pc, #316]	@ (801013c <HAL_SD_GetCardStatus+0x178>)
 800fffe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010006:	431a      	orrs	r2, r3
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2201      	movs	r2, #1
 8010010:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8010014:	2301      	movs	r3, #1
 8010016:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801001a:	e070      	b.n	80100fe <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	099b      	lsrs	r3, r3, #6
 8010020:	b2db      	uxtb	r3, r3
 8010022:	f003 0303 	and.w	r3, r3, #3
 8010026:	b2da      	uxtb	r2, r3
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	095b      	lsrs	r3, r3, #5
 8010030:	b2db      	uxtb	r3, r3
 8010032:	f003 0301 	and.w	r3, r3, #1
 8010036:	b2da      	uxtb	r2, r3
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	0a1b      	lsrs	r3, r3, #8
 8010040:	b29b      	uxth	r3, r3
 8010042:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010046:	b29a      	uxth	r2, r3
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	0e1b      	lsrs	r3, r3, #24
 801004c:	b29b      	uxth	r3, r3
 801004e:	4313      	orrs	r3, r2
 8010050:	b29a      	uxth	r2, r3
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	061a      	lsls	r2, r3, #24
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	021b      	lsls	r3, r3, #8
 801005e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010062:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	0a1b      	lsrs	r3, r3, #8
 8010068:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801006c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	0e1b      	lsrs	r3, r3, #24
 8010072:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	b2da      	uxtb	r2, r3
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	0a1b      	lsrs	r3, r3, #8
 8010084:	b2da      	uxtb	r2, r3
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	0d1b      	lsrs	r3, r3, #20
 801008e:	b2db      	uxtb	r3, r3
 8010090:	f003 030f 	and.w	r3, r3, #15
 8010094:	b2da      	uxtb	r2, r3
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	0c1b      	lsrs	r3, r3, #16
 801009e:	b29b      	uxth	r3, r3
 80100a0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	4313      	orrs	r3, r2
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	0a9b      	lsrs	r3, r3, #10
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80100c0:	b2da      	uxtb	r2, r3
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	0a1b      	lsrs	r3, r3, #8
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	f003 0303 	and.w	r3, r3, #3
 80100d0:	b2da      	uxtb	r2, r3
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	091b      	lsrs	r3, r3, #4
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	f003 030f 	and.w	r3, r3, #15
 80100e0:	b2da      	uxtb	r2, r3
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	f003 030f 	and.w	r3, r3, #15
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	0e1b      	lsrs	r3, r3, #24
 80100f8:	b2da      	uxtb	r2, r3
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010106:	4618      	mov	r0, r3
 8010108:	f004 f98e 	bl	8014428 <SDMMC_CmdBlockLength>
 801010c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 801010e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010110:	2b00      	cmp	r3, #0
 8010112:	d00d      	beq.n	8010130 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4a08      	ldr	r2, [pc, #32]	@ (801013c <HAL_SD_GetCardStatus+0x178>)
 801011a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010120:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2201      	movs	r2, #1
 8010126:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 801012a:	2301      	movs	r3, #1
 801012c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8010130:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8010134:	4618      	mov	r0, r3
 8010136:	3750      	adds	r7, #80	@ 0x50
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	1fe00fff 	.word	0x1fe00fff

08010140 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010198:	b590      	push	{r4, r7, lr}
 801019a:	b08d      	sub	sp, #52	@ 0x34
 801019c:	af02      	add	r7, sp, #8
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80101a2:	2300      	movs	r3, #0
 80101a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2203      	movs	r2, #3
 80101ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101b4:	2b03      	cmp	r3, #3
 80101b6:	d02e      	beq.n	8010216 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80101be:	d106      	bne.n	80101ce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80101cc:	e029      	b.n	8010222 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80101d4:	d10a      	bne.n	80101ec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 fb64 	bl	80108a4 <SD_WideBus_Enable>
 80101dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80101e2:	6a3b      	ldr	r3, [r7, #32]
 80101e4:	431a      	orrs	r2, r3
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80101ea:	e01a      	b.n	8010222 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d10a      	bne.n	8010208 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 fba1 	bl	801093a <SD_WideBus_Disable>
 80101f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80101fe:	6a3b      	ldr	r3, [r7, #32]
 8010200:	431a      	orrs	r2, r3
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	635a      	str	r2, [r3, #52]	@ 0x34
 8010206:	e00c      	b.n	8010222 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801020c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	635a      	str	r2, [r3, #52]	@ 0x34
 8010214:	e005      	b.n	8010222 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801021a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010226:	2b00      	cmp	r3, #0
 8010228:	d007      	beq.n	801023a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4a5f      	ldr	r2, [pc, #380]	@ (80103ac <HAL_SD_ConfigWideBusOperation+0x214>)
 8010230:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8010232:	2301      	movs	r3, #1
 8010234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010238:	e096      	b.n	8010368 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801023a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801023e:	f04f 0100 	mov.w	r1, #0
 8010242:	f7fd fe9d 	bl	800df80 <HAL_RCCEx_GetPeriphCLKFreq>
 8010246:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	2b00      	cmp	r3, #0
 801024c:	f000 8083 	beq.w	8010356 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	689b      	ldr	r3, [r3, #8]
 801025a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	691b      	ldr	r3, [r3, #16]
 8010264:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	695a      	ldr	r2, [r3, #20]
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	4950      	ldr	r1, [pc, #320]	@ (80103b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 801026e:	fba1 1303 	umull	r1, r3, r1, r3
 8010272:	0e1b      	lsrs	r3, r3, #24
 8010274:	429a      	cmp	r2, r3
 8010276:	d303      	bcc.n	8010280 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	695b      	ldr	r3, [r3, #20]
 801027c:	61bb      	str	r3, [r7, #24]
 801027e:	e05a      	b.n	8010336 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010288:	d103      	bne.n	8010292 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	695b      	ldr	r3, [r3, #20]
 801028e:	61bb      	str	r3, [r7, #24]
 8010290:	e051      	b.n	8010336 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801029a:	d126      	bne.n	80102ea <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	695b      	ldr	r3, [r3, #20]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d10e      	bne.n	80102c2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	4a43      	ldr	r2, [pc, #268]	@ (80103b4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d906      	bls.n	80102ba <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	4a40      	ldr	r2, [pc, #256]	@ (80103b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80102b0:	fba2 2303 	umull	r2, r3, r2, r3
 80102b4:	0e5b      	lsrs	r3, r3, #25
 80102b6:	61bb      	str	r3, [r7, #24]
 80102b8:	e03d      	b.n	8010336 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	695b      	ldr	r3, [r3, #20]
 80102be:	61bb      	str	r3, [r7, #24]
 80102c0:	e039      	b.n	8010336 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	695b      	ldr	r3, [r3, #20]
 80102c6:	005b      	lsls	r3, r3, #1
 80102c8:	69fa      	ldr	r2, [r7, #28]
 80102ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80102ce:	4a39      	ldr	r2, [pc, #228]	@ (80103b4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d906      	bls.n	80102e2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	4a36      	ldr	r2, [pc, #216]	@ (80103b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80102d8:	fba2 2303 	umull	r2, r3, r2, r3
 80102dc:	0e5b      	lsrs	r3, r3, #25
 80102de:	61bb      	str	r3, [r7, #24]
 80102e0:	e029      	b.n	8010336 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	695b      	ldr	r3, [r3, #20]
 80102e6:	61bb      	str	r3, [r7, #24]
 80102e8:	e025      	b.n	8010336 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	695b      	ldr	r3, [r3, #20]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d10e      	bne.n	8010310 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80102f2:	69fb      	ldr	r3, [r7, #28]
 80102f4:	4a30      	ldr	r2, [pc, #192]	@ (80103b8 <HAL_SD_ConfigWideBusOperation+0x220>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d906      	bls.n	8010308 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80102fa:	69fb      	ldr	r3, [r7, #28]
 80102fc:	4a2c      	ldr	r2, [pc, #176]	@ (80103b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80102fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010302:	0e1b      	lsrs	r3, r3, #24
 8010304:	61bb      	str	r3, [r7, #24]
 8010306:	e016      	b.n	8010336 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	695b      	ldr	r3, [r3, #20]
 801030c:	61bb      	str	r3, [r7, #24]
 801030e:	e012      	b.n	8010336 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	695b      	ldr	r3, [r3, #20]
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	69fa      	ldr	r2, [r7, #28]
 8010318:	fbb2 f3f3 	udiv	r3, r2, r3
 801031c:	4a26      	ldr	r2, [pc, #152]	@ (80103b8 <HAL_SD_ConfigWideBusOperation+0x220>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d906      	bls.n	8010330 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	4a22      	ldr	r2, [pc, #136]	@ (80103b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010326:	fba2 2303 	umull	r2, r3, r2, r3
 801032a:	0e1b      	lsrs	r3, r3, #24
 801032c:	61bb      	str	r3, [r7, #24]
 801032e:	e002      	b.n	8010336 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	695b      	ldr	r3, [r3, #20]
 8010334:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681c      	ldr	r4, [r3, #0]
 801033a:	466a      	mov	r2, sp
 801033c:	f107 0314 	add.w	r3, r7, #20
 8010340:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010344:	e882 0003 	stmia.w	r2, {r0, r1}
 8010348:	f107 0308 	add.w	r3, r7, #8
 801034c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801034e:	4620      	mov	r0, r4
 8010350:	f003 ff8c 	bl	801426c <SDMMC_Init>
 8010354:	e008      	b.n	8010368 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801035a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8010362:	2301      	movs	r3, #1
 8010364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010370:	4618      	mov	r0, r3
 8010372:	f004 f859 	bl	8014428 <SDMMC_CmdBlockLength>
 8010376:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010378:	6a3b      	ldr	r3, [r7, #32]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00c      	beq.n	8010398 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4a0a      	ldr	r2, [pc, #40]	@ (80103ac <HAL_SD_ConfigWideBusOperation+0x214>)
 8010384:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801038a:	6a3b      	ldr	r3, [r7, #32]
 801038c:	431a      	orrs	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8010392:	2301      	movs	r3, #1
 8010394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80103a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	372c      	adds	r7, #44	@ 0x2c
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd90      	pop	{r4, r7, pc}
 80103ac:	1fe00fff 	.word	0x1fe00fff
 80103b0:	55e63b89 	.word	0x55e63b89
 80103b4:	02faf080 	.word	0x02faf080
 80103b8:	017d7840 	.word	0x017d7840

080103bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80103c8:	f107 030c 	add.w	r3, r7, #12
 80103cc:	4619      	mov	r1, r3
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 fa40 	bl	8010854 <SD_SendStatus>
 80103d4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d005      	beq.n	80103e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	431a      	orrs	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	0a5b      	lsrs	r3, r3, #9
 80103ec:	f003 030f 	and.w	r3, r3, #15
 80103f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80103f2:	693b      	ldr	r3, [r7, #16]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3718      	adds	r7, #24
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b090      	sub	sp, #64	@ 0x40
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8010404:	2300      	movs	r3, #0
 8010406:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8010408:	f7fa fb2c 	bl	800aa64 <HAL_GetTick>
 801040c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	4618      	mov	r0, r3
 8010414:	f003 ff83 	bl	801431e <SDMMC_GetPowerState>
 8010418:	4603      	mov	r3, r0
 801041a:	2b00      	cmp	r3, #0
 801041c:	d102      	bne.n	8010424 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801041e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8010422:	e0b5      	b.n	8010590 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010428:	2b03      	cmp	r3, #3
 801042a:	d02e      	beq.n	801048a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4618      	mov	r0, r3
 8010432:	f004 f9ce 	bl	80147d2 <SDMMC_CmdSendCID>
 8010436:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801043a:	2b00      	cmp	r3, #0
 801043c:	d001      	beq.n	8010442 <SD_InitCard+0x46>
    {
      return errorstate;
 801043e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010440:	e0a6      	b.n	8010590 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2100      	movs	r1, #0
 8010448:	4618      	mov	r0, r3
 801044a:	f003 ffae 	bl	80143aa <SDMMC_GetResponse>
 801044e:	4602      	mov	r2, r0
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2104      	movs	r1, #4
 801045a:	4618      	mov	r0, r3
 801045c:	f003 ffa5 	bl	80143aa <SDMMC_GetResponse>
 8010460:	4602      	mov	r2, r0
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2108      	movs	r1, #8
 801046c:	4618      	mov	r0, r3
 801046e:	f003 ff9c 	bl	80143aa <SDMMC_GetResponse>
 8010472:	4602      	mov	r2, r0
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	210c      	movs	r1, #12
 801047e:	4618      	mov	r0, r3
 8010480:	f003 ff93 	bl	80143aa <SDMMC_GetResponse>
 8010484:	4602      	mov	r2, r0
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801048e:	2b03      	cmp	r3, #3
 8010490:	d01d      	beq.n	80104ce <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8010492:	e019      	b.n	80104c8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f107 020a 	add.w	r2, r7, #10
 801049c:	4611      	mov	r1, r2
 801049e:	4618      	mov	r0, r3
 80104a0:	f004 f9d6 	bl	8014850 <SDMMC_CmdSetRelAdd>
 80104a4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80104a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d001      	beq.n	80104b0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80104ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ae:	e06f      	b.n	8010590 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80104b0:	f7fa fad8 	bl	800aa64 <HAL_GetTick>
 80104b4:	4602      	mov	r2, r0
 80104b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104b8:	1ad3      	subs	r3, r2, r3
 80104ba:	f241 3287 	movw	r2, #4999	@ 0x1387
 80104be:	4293      	cmp	r3, r2
 80104c0:	d902      	bls.n	80104c8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80104c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80104c6:	e063      	b.n	8010590 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80104c8:	897b      	ldrh	r3, [r7, #10]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d0e2      	beq.n	8010494 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104d2:	2b03      	cmp	r3, #3
 80104d4:	d036      	beq.n	8010544 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80104d6:	897b      	ldrh	r3, [r7, #10]
 80104d8:	461a      	mov	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104e6:	041b      	lsls	r3, r3, #16
 80104e8:	4619      	mov	r1, r3
 80104ea:	4610      	mov	r0, r2
 80104ec:	f004 f990 	bl	8014810 <SDMMC_CmdSendCSD>
 80104f0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80104f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d001      	beq.n	80104fc <SD_InitCard+0x100>
    {
      return errorstate;
 80104f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104fa:	e049      	b.n	8010590 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2100      	movs	r1, #0
 8010502:	4618      	mov	r0, r3
 8010504:	f003 ff51 	bl	80143aa <SDMMC_GetResponse>
 8010508:	4602      	mov	r2, r0
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2104      	movs	r1, #4
 8010514:	4618      	mov	r0, r3
 8010516:	f003 ff48 	bl	80143aa <SDMMC_GetResponse>
 801051a:	4602      	mov	r2, r0
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2108      	movs	r1, #8
 8010526:	4618      	mov	r0, r3
 8010528:	f003 ff3f 	bl	80143aa <SDMMC_GetResponse>
 801052c:	4602      	mov	r2, r0
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	210c      	movs	r1, #12
 8010538:	4618      	mov	r0, r3
 801053a:	f003 ff36 	bl	80143aa <SDMMC_GetResponse>
 801053e:	4602      	mov	r2, r0
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2104      	movs	r1, #4
 801054a:	4618      	mov	r0, r3
 801054c:	f003 ff2d 	bl	80143aa <SDMMC_GetResponse>
 8010550:	4603      	mov	r3, r0
 8010552:	0d1a      	lsrs	r2, r3, #20
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010558:	f107 030c 	add.w	r3, r7, #12
 801055c:	4619      	mov	r1, r3
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7ff fb8c 	bl	800fc7c <HAL_SD_GetCardCSD>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d002      	beq.n	8010570 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801056a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801056e:	e00f      	b.n	8010590 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010578:	041b      	lsls	r3, r3, #16
 801057a:	4619      	mov	r1, r3
 801057c:	4610      	mov	r0, r2
 801057e:	f004 f83f 	bl	8014600 <SDMMC_CmdSelDesel>
 8010582:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8010584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010586:	2b00      	cmp	r3, #0
 8010588:	d001      	beq.n	801058e <SD_InitCard+0x192>
  {
    return errorstate;
 801058a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801058c:	e000      	b.n	8010590 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3740      	adds	r7, #64	@ 0x40
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b086      	sub	sp, #24
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80105a0:	2300      	movs	r3, #0
 80105a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80105a4:	2300      	movs	r3, #0
 80105a6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80105a8:	2300      	movs	r3, #0
 80105aa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f004 f848 	bl	8014646 <SDMMC_CmdGoIdleState>
 80105b6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	e072      	b.n	80106a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f004 f85b 	bl	8014682 <SDMMC_CmdOperCond>
 80105cc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80105d4:	d10d      	bne.n	80105f2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2200      	movs	r2, #0
 80105da:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f004 f830 	bl	8014646 <SDMMC_CmdGoIdleState>
 80105e6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d004      	beq.n	80105f8 <SD_PowerON+0x60>
    {
      return errorstate;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	e05a      	b.n	80106a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2201      	movs	r2, #1
 80105f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d137      	bne.n	8010670 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2100      	movs	r1, #0
 8010606:	4618      	mov	r0, r3
 8010608:	f004 f85b 	bl	80146c2 <SDMMC_CmdAppCommand>
 801060c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d02d      	beq.n	8010670 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010614:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8010618:	e046      	b.n	80106a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2100      	movs	r1, #0
 8010620:	4618      	mov	r0, r3
 8010622:	f004 f84e 	bl	80146c2 <SDMMC_CmdAppCommand>
 8010626:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d001      	beq.n	8010632 <SD_PowerON+0x9a>
    {
      return errorstate;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	e03a      	b.n	80106a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	491e      	ldr	r1, [pc, #120]	@ (80106b0 <SD_PowerON+0x118>)
 8010638:	4618      	mov	r0, r3
 801063a:	f004 f865 	bl	8014708 <SDMMC_CmdAppOperCommand>
 801063e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d002      	beq.n	801064c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010646:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801064a:	e02d      	b.n	80106a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	2100      	movs	r1, #0
 8010652:	4618      	mov	r0, r3
 8010654:	f003 fea9 	bl	80143aa <SDMMC_GetResponse>
 8010658:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	0fdb      	lsrs	r3, r3, #31
 801065e:	2b01      	cmp	r3, #1
 8010660:	d101      	bne.n	8010666 <SD_PowerON+0xce>
 8010662:	2301      	movs	r3, #1
 8010664:	e000      	b.n	8010668 <SD_PowerON+0xd0>
 8010666:	2300      	movs	r3, #0
 8010668:	613b      	str	r3, [r7, #16]

    count++;
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	3301      	adds	r3, #1
 801066e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010676:	4293      	cmp	r3, r2
 8010678:	d802      	bhi.n	8010680 <SD_PowerON+0xe8>
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d0cc      	beq.n	801061a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010686:	4293      	cmp	r3, r2
 8010688:	d902      	bls.n	8010690 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801068a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801068e:	e00b      	b.n	80106a8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2200      	movs	r2, #0
 8010694:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801069c:	2b00      	cmp	r3, #0
 801069e:	d002      	beq.n	80106a6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2201      	movs	r2, #1
 80106a4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80106a6:	2300      	movs	r3, #0
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3718      	adds	r7, #24
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	c1100000 	.word	0xc1100000

080106b4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b08c      	sub	sp, #48	@ 0x30
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80106be:	f7fa f9d1 	bl	800aa64 <HAL_GetTick>
 80106c2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2100      	movs	r1, #0
 80106ce:	4618      	mov	r0, r3
 80106d0:	f003 fe6b 	bl	80143aa <SDMMC_GetResponse>
 80106d4:	4603      	mov	r3, r0
 80106d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80106da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80106de:	d102      	bne.n	80106e6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80106e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80106e4:	e0b0      	b.n	8010848 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2140      	movs	r1, #64	@ 0x40
 80106ec:	4618      	mov	r0, r3
 80106ee:	f003 fe9b 	bl	8014428 <SDMMC_CmdBlockLength>
 80106f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80106f4:	6a3b      	ldr	r3, [r7, #32]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d005      	beq.n	8010706 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8010702:	6a3b      	ldr	r3, [r7, #32]
 8010704:	e0a0      	b.n	8010848 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801070e:	041b      	lsls	r3, r3, #16
 8010710:	4619      	mov	r1, r3
 8010712:	4610      	mov	r0, r2
 8010714:	f003 ffd5 	bl	80146c2 <SDMMC_CmdAppCommand>
 8010718:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801071a:	6a3b      	ldr	r3, [r7, #32]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d005      	beq.n	801072c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8010728:	6a3b      	ldr	r3, [r7, #32]
 801072a:	e08d      	b.n	8010848 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801072c:	f04f 33ff 	mov.w	r3, #4294967295
 8010730:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8010732:	2340      	movs	r3, #64	@ 0x40
 8010734:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8010736:	2360      	movs	r3, #96	@ 0x60
 8010738:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801073a:	2302      	movs	r3, #2
 801073c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801073e:	2300      	movs	r3, #0
 8010740:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010742:	2301      	movs	r3, #1
 8010744:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f107 0208 	add.w	r2, r7, #8
 801074e:	4611      	mov	r1, r2
 8010750:	4618      	mov	r0, r3
 8010752:	f003 fe3d 	bl	80143d0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	4618      	mov	r0, r3
 801075c:	f004 f8bd 	bl	80148da <SDMMC_CmdStatusRegister>
 8010760:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d02b      	beq.n	80107c0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8010770:	6a3b      	ldr	r3, [r7, #32]
 8010772:	e069      	b.n	8010848 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801077a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801077e:	2b00      	cmp	r3, #0
 8010780:	d013      	beq.n	80107aa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8010782:	2300      	movs	r3, #0
 8010784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010786:	e00d      	b.n	80107a4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4618      	mov	r0, r3
 801078e:	f003 fd97 	bl	80142c0 <SDMMC_ReadFIFO>
 8010792:	4602      	mov	r2, r0
 8010794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010796:	601a      	str	r2, [r3, #0]
        pData++;
 8010798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801079a:	3304      	adds	r3, #4
 801079c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 801079e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a0:	3301      	adds	r3, #1
 80107a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80107a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a6:	2b07      	cmp	r3, #7
 80107a8:	d9ee      	bls.n	8010788 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80107aa:	f7fa f95b 	bl	800aa64 <HAL_GetTick>
 80107ae:	4602      	mov	r2, r0
 80107b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b8:	d102      	bne.n	80107c0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80107ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107be:	e043      	b.n	8010848 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107c6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d0d2      	beq.n	8010774 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107d4:	f003 0308 	and.w	r3, r3, #8
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d001      	beq.n	80107e0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80107dc:	2308      	movs	r3, #8
 80107de:	e033      	b.n	8010848 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107e6:	f003 0302 	and.w	r3, r3, #2
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80107ee:	2302      	movs	r3, #2
 80107f0:	e02a      	b.n	8010848 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107f8:	f003 0320 	and.w	r3, r3, #32
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d017      	beq.n	8010830 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8010800:	2320      	movs	r3, #32
 8010802:	e021      	b.n	8010848 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4618      	mov	r0, r3
 801080a:	f003 fd59 	bl	80142c0 <SDMMC_ReadFIFO>
 801080e:	4602      	mov	r2, r0
 8010810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010812:	601a      	str	r2, [r3, #0]
    pData++;
 8010814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010816:	3304      	adds	r3, #4
 8010818:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801081a:	f7fa f923 	bl	800aa64 <HAL_GetTick>
 801081e:	4602      	mov	r2, r0
 8010820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010828:	d102      	bne.n	8010830 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801082a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801082e:	e00b      	b.n	8010848 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010836:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801083a:	2b00      	cmp	r3, #0
 801083c:	d1e2      	bne.n	8010804 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	4a03      	ldr	r2, [pc, #12]	@ (8010850 <SD_SendSDStatus+0x19c>)
 8010844:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8010846:	2300      	movs	r3, #0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3730      	adds	r7, #48	@ 0x30
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	18000f3a 	.word	0x18000f3a

08010854 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b084      	sub	sp, #16
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d102      	bne.n	801086a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8010864:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010868:	e018      	b.n	801089c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010872:	041b      	lsls	r3, r3, #16
 8010874:	4619      	mov	r1, r3
 8010876:	4610      	mov	r0, r2
 8010878:	f004 f80c 	bl	8014894 <SDMMC_CmdSendStatus>
 801087c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d001      	beq.n	8010888 <SD_SendStatus+0x34>
  {
    return errorstate;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	e009      	b.n	801089c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	2100      	movs	r1, #0
 801088e:	4618      	mov	r0, r3
 8010890:	f003 fd8b 	bl	80143aa <SDMMC_GetResponse>
 8010894:	4602      	mov	r2, r0
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3710      	adds	r7, #16
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80108ac:	2300      	movs	r3, #0
 80108ae:	60fb      	str	r3, [r7, #12]
 80108b0:	2300      	movs	r3, #0
 80108b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2100      	movs	r1, #0
 80108ba:	4618      	mov	r0, r3
 80108bc:	f003 fd75 	bl	80143aa <SDMMC_GetResponse>
 80108c0:	4603      	mov	r3, r0
 80108c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80108c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80108ca:	d102      	bne.n	80108d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80108cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80108d0:	e02f      	b.n	8010932 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80108d2:	f107 030c 	add.w	r3, r7, #12
 80108d6:	4619      	mov	r1, r3
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 f879 	bl	80109d0 <SD_FindSCR>
 80108de:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	e023      	b.n	8010932 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d01c      	beq.n	801092e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108fc:	041b      	lsls	r3, r3, #16
 80108fe:	4619      	mov	r1, r3
 8010900:	4610      	mov	r0, r2
 8010902:	f003 fede 	bl	80146c2 <SDMMC_CmdAppCommand>
 8010906:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d001      	beq.n	8010912 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	e00f      	b.n	8010932 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	2102      	movs	r1, #2
 8010918:	4618      	mov	r0, r3
 801091a:	f003 ff15 	bl	8014748 <SDMMC_CmdBusWidth>
 801091e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d001      	beq.n	801092a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	e003      	b.n	8010932 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801092a:	2300      	movs	r3, #0
 801092c:	e001      	b.n	8010932 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801092e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8010932:	4618      	mov	r0, r3
 8010934:	3718      	adds	r7, #24
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801093a:	b580      	push	{r7, lr}
 801093c:	b086      	sub	sp, #24
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010942:	2300      	movs	r3, #0
 8010944:	60fb      	str	r3, [r7, #12]
 8010946:	2300      	movs	r3, #0
 8010948:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2100      	movs	r1, #0
 8010950:	4618      	mov	r0, r3
 8010952:	f003 fd2a 	bl	80143aa <SDMMC_GetResponse>
 8010956:	4603      	mov	r3, r0
 8010958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801095c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010960:	d102      	bne.n	8010968 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010962:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010966:	e02f      	b.n	80109c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010968:	f107 030c 	add.w	r3, r7, #12
 801096c:	4619      	mov	r1, r3
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 f82e 	bl	80109d0 <SD_FindSCR>
 8010974:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d001      	beq.n	8010980 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	e023      	b.n	80109c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010986:	2b00      	cmp	r3, #0
 8010988:	d01c      	beq.n	80109c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010992:	041b      	lsls	r3, r3, #16
 8010994:	4619      	mov	r1, r3
 8010996:	4610      	mov	r0, r2
 8010998:	f003 fe93 	bl	80146c2 <SDMMC_CmdAppCommand>
 801099c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d001      	beq.n	80109a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	e00f      	b.n	80109c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	2100      	movs	r1, #0
 80109ae:	4618      	mov	r0, r3
 80109b0:	f003 feca 	bl	8014748 <SDMMC_CmdBusWidth>
 80109b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d001      	beq.n	80109c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	e003      	b.n	80109c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80109c0:	2300      	movs	r3, #0
 80109c2:	e001      	b.n	80109c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80109c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3718      	adds	r7, #24
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b08e      	sub	sp, #56	@ 0x38
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80109da:	f7fa f843 	bl	800aa64 <HAL_GetTick>
 80109de:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80109e0:	2300      	movs	r3, #0
 80109e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80109e4:	2300      	movs	r3, #0
 80109e6:	60bb      	str	r3, [r7, #8]
 80109e8:	2300      	movs	r3, #0
 80109ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2108      	movs	r1, #8
 80109f6:	4618      	mov	r0, r3
 80109f8:	f003 fd16 	bl	8014428 <SDMMC_CmdBlockLength>
 80109fc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80109fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d001      	beq.n	8010a08 <SD_FindSCR+0x38>
  {
    return errorstate;
 8010a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a06:	e0ad      	b.n	8010b64 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a10:	041b      	lsls	r3, r3, #16
 8010a12:	4619      	mov	r1, r3
 8010a14:	4610      	mov	r0, r2
 8010a16:	f003 fe54 	bl	80146c2 <SDMMC_CmdAppCommand>
 8010a1a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d001      	beq.n	8010a26 <SD_FindSCR+0x56>
  {
    return errorstate;
 8010a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a24:	e09e      	b.n	8010b64 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010a26:	f04f 33ff 	mov.w	r3, #4294967295
 8010a2a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8010a2c:	2308      	movs	r3, #8
 8010a2e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010a30:	2330      	movs	r3, #48	@ 0x30
 8010a32:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010a34:	2302      	movs	r3, #2
 8010a36:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f107 0210 	add.w	r2, r7, #16
 8010a48:	4611      	mov	r1, r2
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f003 fcc0 	bl	80143d0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4618      	mov	r0, r3
 8010a56:	f003 fe9a 	bl	801478e <SDMMC_CmdSendSCR>
 8010a5a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8010a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d027      	beq.n	8010ab2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8010a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a64:	e07e      	b.n	8010b64 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d113      	bne.n	8010a9c <SD_FindSCR+0xcc>
 8010a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d110      	bne.n	8010a9c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f003 fc1e 	bl	80142c0 <SDMMC_ReadFIFO>
 8010a84:	4603      	mov	r3, r0
 8010a86:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f003 fc17 	bl	80142c0 <SDMMC_ReadFIFO>
 8010a92:	4603      	mov	r3, r0
 8010a94:	60fb      	str	r3, [r7, #12]
      index++;
 8010a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a98:	3301      	adds	r3, #1
 8010a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010a9c:	f7f9 ffe2 	bl	800aa64 <HAL_GetTick>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aa4:	1ad3      	subs	r3, r2, r3
 8010aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aaa:	d102      	bne.n	8010ab2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010aac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ab0:	e058      	b.n	8010b64 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010ab8:	f240 532a 	movw	r3, #1322	@ 0x52a
 8010abc:	4013      	ands	r3, r2
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d0d1      	beq.n	8010a66 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ac8:	f003 0308 	and.w	r3, r3, #8
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d005      	beq.n	8010adc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2208      	movs	r2, #8
 8010ad6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010ad8:	2308      	movs	r3, #8
 8010ada:	e043      	b.n	8010b64 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ae2:	f003 0302 	and.w	r3, r3, #2
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d005      	beq.n	8010af6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	2202      	movs	r2, #2
 8010af0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010af2:	2302      	movs	r3, #2
 8010af4:	e036      	b.n	8010b64 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010afc:	f003 0320 	and.w	r3, r3, #32
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d005      	beq.n	8010b10 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2220      	movs	r2, #32
 8010b0a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8010b0c:	2320      	movs	r3, #32
 8010b0e:	e029      	b.n	8010b64 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4a15      	ldr	r2, [pc, #84]	@ (8010b6c <SD_FindSCR+0x19c>)
 8010b16:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	061a      	lsls	r2, r3, #24
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	021b      	lsls	r3, r3, #8
 8010b20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010b24:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	0a1b      	lsrs	r3, r3, #8
 8010b2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010b2e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	0e1b      	lsrs	r3, r3, #24
 8010b34:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8010b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b38:	601a      	str	r2, [r3, #0]
    scr++;
 8010b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3c:	3304      	adds	r3, #4
 8010b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	061a      	lsls	r2, r3, #24
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	021b      	lsls	r3, r3, #8
 8010b48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010b4c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	0a1b      	lsrs	r3, r3, #8
 8010b52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010b56:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	0e1b      	lsrs	r3, r3, #24
 8010b5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8010b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b60:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8010b62:	2300      	movs	r3, #0
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3738      	adds	r7, #56	@ 0x38
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	18000f3a 	.word	0x18000f3a

08010b70 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d101      	bne.n	8010b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e10f      	b.n	8010da2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2200      	movs	r2, #0
 8010b86:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4a87      	ldr	r2, [pc, #540]	@ (8010dac <HAL_SPI_Init+0x23c>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d00f      	beq.n	8010bb2 <HAL_SPI_Init+0x42>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4a86      	ldr	r2, [pc, #536]	@ (8010db0 <HAL_SPI_Init+0x240>)
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d00a      	beq.n	8010bb2 <HAL_SPI_Init+0x42>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a84      	ldr	r2, [pc, #528]	@ (8010db4 <HAL_SPI_Init+0x244>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d005      	beq.n	8010bb2 <HAL_SPI_Init+0x42>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	2b0f      	cmp	r3, #15
 8010bac:	d901      	bls.n	8010bb2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e0f7      	b.n	8010da2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f001 f968 	bl	8011e88 <SPI_GetPacketSize>
 8010bb8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4a7b      	ldr	r2, [pc, #492]	@ (8010dac <HAL_SPI_Init+0x23c>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d00c      	beq.n	8010bde <HAL_SPI_Init+0x6e>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4a79      	ldr	r2, [pc, #484]	@ (8010db0 <HAL_SPI_Init+0x240>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d007      	beq.n	8010bde <HAL_SPI_Init+0x6e>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	4a78      	ldr	r2, [pc, #480]	@ (8010db4 <HAL_SPI_Init+0x244>)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d002      	beq.n	8010bde <HAL_SPI_Init+0x6e>
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	2b08      	cmp	r3, #8
 8010bdc:	d811      	bhi.n	8010c02 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010be2:	4a72      	ldr	r2, [pc, #456]	@ (8010dac <HAL_SPI_Init+0x23c>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d009      	beq.n	8010bfc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	4a70      	ldr	r2, [pc, #448]	@ (8010db0 <HAL_SPI_Init+0x240>)
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d004      	beq.n	8010bfc <HAL_SPI_Init+0x8c>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4a6f      	ldr	r2, [pc, #444]	@ (8010db4 <HAL_SPI_Init+0x244>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d104      	bne.n	8010c06 <HAL_SPI_Init+0x96>
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2b10      	cmp	r3, #16
 8010c00:	d901      	bls.n	8010c06 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010c02:	2301      	movs	r3, #1
 8010c04:	e0cd      	b.n	8010da2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d106      	bne.n	8010c20 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2200      	movs	r2, #0
 8010c16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f7f9 fa0a 	bl	800a034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2202      	movs	r2, #2
 8010c24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f022 0201 	bic.w	r2, r2, #1
 8010c36:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	689b      	ldr	r3, [r3, #8]
 8010c3e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8010c42:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	699b      	ldr	r3, [r3, #24]
 8010c48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010c4c:	d119      	bne.n	8010c82 <HAL_SPI_Init+0x112>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010c56:	d103      	bne.n	8010c60 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d008      	beq.n	8010c72 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d10c      	bne.n	8010c82 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010c6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c70:	d107      	bne.n	8010c82 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010c80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d00f      	beq.n	8010cae <HAL_SPI_Init+0x13e>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	2b06      	cmp	r3, #6
 8010c94:	d90b      	bls.n	8010cae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	430a      	orrs	r2, r1
 8010caa:	601a      	str	r2, [r3, #0]
 8010cac:	e007      	b.n	8010cbe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010cbc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	69da      	ldr	r2, [r3, #28]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cc6:	431a      	orrs	r2, r3
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	431a      	orrs	r2, r3
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010cd0:	ea42 0103 	orr.w	r1, r2, r3
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	68da      	ldr	r2, [r3, #12]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	430a      	orrs	r2, r1
 8010cde:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ce8:	431a      	orrs	r2, r3
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cee:	431a      	orrs	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	699b      	ldr	r3, [r3, #24]
 8010cf4:	431a      	orrs	r2, r3
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	691b      	ldr	r3, [r3, #16]
 8010cfa:	431a      	orrs	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	695b      	ldr	r3, [r3, #20]
 8010d00:	431a      	orrs	r2, r3
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6a1b      	ldr	r3, [r3, #32]
 8010d06:	431a      	orrs	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	431a      	orrs	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010d12:	431a      	orrs	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	689b      	ldr	r3, [r3, #8]
 8010d18:	431a      	orrs	r2, r3
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d1e:	ea42 0103 	orr.w	r1, r2, r3
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	430a      	orrs	r2, r1
 8010d2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d113      	bne.n	8010d5e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	689b      	ldr	r3, [r3, #8]
 8010d3c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010d48:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	689b      	ldr	r3, [r3, #8]
 8010d50:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010d5c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f022 0201 	bic.w	r2, r2, #1
 8010d6c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00a      	beq.n	8010d90 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	430a      	orrs	r2, r1
 8010d8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010da0:	2300      	movs	r3, #0
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3710      	adds	r7, #16
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	40013000 	.word	0x40013000
 8010db0:	40003800 	.word	0x40003800
 8010db4:	40003c00 	.word	0x40003c00

08010db8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b088      	sub	sp, #32
 8010dbc:	af02      	add	r7, sp, #8
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	60b9      	str	r1, [r7, #8]
 8010dc2:	603b      	str	r3, [r7, #0]
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3320      	adds	r3, #32
 8010dce:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010dd0:	f7f9 fe48 	bl	800aa64 <HAL_GetTick>
 8010dd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d001      	beq.n	8010de6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010de2:	2302      	movs	r3, #2
 8010de4:	e1d1      	b.n	801118a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <HAL_SPI_Transmit+0x3a>
 8010dec:	88fb      	ldrh	r3, [r7, #6]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d101      	bne.n	8010df6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8010df2:	2301      	movs	r3, #1
 8010df4:	e1c9      	b.n	801118a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d101      	bne.n	8010e04 <HAL_SPI_Transmit+0x4c>
 8010e00:	2302      	movs	r3, #2
 8010e02:	e1c2      	b.n	801118a <HAL_SPI_Transmit+0x3d2>
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2201      	movs	r2, #1
 8010e08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2203      	movs	r2, #3
 8010e10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2200      	movs	r2, #0
 8010e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	68ba      	ldr	r2, [r7, #8]
 8010e20:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	88fa      	ldrh	r2, [r7, #6]
 8010e26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	88fa      	ldrh	r2, [r7, #6]
 8010e2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2200      	movs	r2, #0
 8010e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	2200      	movs	r2, #0
 8010e52:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	689b      	ldr	r3, [r3, #8]
 8010e58:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010e5c:	d108      	bne.n	8010e70 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010e6c:	601a      	str	r2, [r3, #0]
 8010e6e:	e009      	b.n	8010e84 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010e82:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	685a      	ldr	r2, [r3, #4]
 8010e8a:	4b96      	ldr	r3, [pc, #600]	@ (80110e4 <HAL_SPI_Transmit+0x32c>)
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	88f9      	ldrh	r1, [r7, #6]
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	6812      	ldr	r2, [r2, #0]
 8010e94:	430b      	orrs	r3, r1
 8010e96:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f042 0201 	orr.w	r2, r2, #1
 8010ea6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010eb0:	d107      	bne.n	8010ec2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	681a      	ldr	r2, [r3, #0]
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010ec0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	68db      	ldr	r3, [r3, #12]
 8010ec6:	2b0f      	cmp	r3, #15
 8010ec8:	d947      	bls.n	8010f5a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010eca:	e03f      	b.n	8010f4c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	695b      	ldr	r3, [r3, #20]
 8010ed2:	f003 0302 	and.w	r3, r3, #2
 8010ed6:	2b02      	cmp	r3, #2
 8010ed8:	d114      	bne.n	8010f04 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	6812      	ldr	r2, [r2, #0]
 8010ee4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010eea:	1d1a      	adds	r2, r3, #4
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	3b01      	subs	r3, #1
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010f02:	e023      	b.n	8010f4c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f04:	f7f9 fdae 	bl	800aa64 <HAL_GetTick>
 8010f08:	4602      	mov	r2, r0
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	1ad3      	subs	r3, r2, r3
 8010f0e:	683a      	ldr	r2, [r7, #0]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d803      	bhi.n	8010f1c <HAL_SPI_Transmit+0x164>
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f1a:	d102      	bne.n	8010f22 <HAL_SPI_Transmit+0x16a>
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d114      	bne.n	8010f4c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010f22:	68f8      	ldr	r0, [r7, #12]
 8010f24:	f000 fee2 	bl	8011cec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2200      	movs	r2, #0
 8010f44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010f48:	2303      	movs	r3, #3
 8010f4a:	e11e      	b.n	801118a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d1b9      	bne.n	8010ecc <HAL_SPI_Transmit+0x114>
 8010f58:	e0f1      	b.n	801113e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	2b07      	cmp	r3, #7
 8010f60:	f240 80e6 	bls.w	8011130 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010f64:	e05d      	b.n	8011022 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	695b      	ldr	r3, [r3, #20]
 8010f6c:	f003 0302 	and.w	r3, r3, #2
 8010f70:	2b02      	cmp	r3, #2
 8010f72:	d132      	bne.n	8010fda <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d918      	bls.n	8010fb2 <HAL_SPI_Transmit+0x1fa>
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d014      	beq.n	8010fb2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	6812      	ldr	r2, [r2, #0]
 8010f92:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f98:	1d1a      	adds	r2, r3, #4
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	3b02      	subs	r3, #2
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010fb0:	e037      	b.n	8011022 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010fb6:	881a      	ldrh	r2, [r3, #0]
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010fc0:	1c9a      	adds	r2, r3, #2
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	b29a      	uxth	r2, r3
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010fd8:	e023      	b.n	8011022 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010fda:	f7f9 fd43 	bl	800aa64 <HAL_GetTick>
 8010fde:	4602      	mov	r2, r0
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	683a      	ldr	r2, [r7, #0]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d803      	bhi.n	8010ff2 <HAL_SPI_Transmit+0x23a>
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff0:	d102      	bne.n	8010ff8 <HAL_SPI_Transmit+0x240>
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d114      	bne.n	8011022 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f000 fe77 	bl	8011cec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011004:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2201      	movs	r2, #1
 8011012:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	2200      	movs	r2, #0
 801101a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801101e:	2303      	movs	r3, #3
 8011020:	e0b3      	b.n	801118a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011028:	b29b      	uxth	r3, r3
 801102a:	2b00      	cmp	r3, #0
 801102c:	d19b      	bne.n	8010f66 <HAL_SPI_Transmit+0x1ae>
 801102e:	e086      	b.n	801113e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	695b      	ldr	r3, [r3, #20]
 8011036:	f003 0302 	and.w	r3, r3, #2
 801103a:	2b02      	cmp	r3, #2
 801103c:	d154      	bne.n	80110e8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011044:	b29b      	uxth	r3, r3
 8011046:	2b03      	cmp	r3, #3
 8011048:	d918      	bls.n	801107c <HAL_SPI_Transmit+0x2c4>
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801104e:	2b40      	cmp	r3, #64	@ 0x40
 8011050:	d914      	bls.n	801107c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	6812      	ldr	r2, [r2, #0]
 801105c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011062:	1d1a      	adds	r2, r3, #4
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801106e:	b29b      	uxth	r3, r3
 8011070:	3b04      	subs	r3, #4
 8011072:	b29a      	uxth	r2, r3
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801107a:	e059      	b.n	8011130 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011082:	b29b      	uxth	r3, r3
 8011084:	2b01      	cmp	r3, #1
 8011086:	d917      	bls.n	80110b8 <HAL_SPI_Transmit+0x300>
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801108c:	2b00      	cmp	r3, #0
 801108e:	d013      	beq.n	80110b8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011094:	881a      	ldrh	r2, [r3, #0]
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801109e:	1c9a      	adds	r2, r3, #2
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	3b02      	subs	r3, #2
 80110ae:	b29a      	uxth	r2, r3
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80110b6:	e03b      	b.n	8011130 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	3320      	adds	r3, #32
 80110c2:	7812      	ldrb	r2, [r2, #0]
 80110c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80110ca:	1c5a      	adds	r2, r3, #1
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	3b01      	subs	r3, #1
 80110da:	b29a      	uxth	r2, r3
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80110e2:	e025      	b.n	8011130 <HAL_SPI_Transmit+0x378>
 80110e4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80110e8:	f7f9 fcbc 	bl	800aa64 <HAL_GetTick>
 80110ec:	4602      	mov	r2, r0
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	1ad3      	subs	r3, r2, r3
 80110f2:	683a      	ldr	r2, [r7, #0]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d803      	bhi.n	8011100 <HAL_SPI_Transmit+0x348>
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110fe:	d102      	bne.n	8011106 <HAL_SPI_Transmit+0x34e>
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d114      	bne.n	8011130 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f000 fdf0 	bl	8011cec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011112:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2201      	movs	r2, #1
 8011120:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2200      	movs	r2, #0
 8011128:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801112c:	2303      	movs	r3, #3
 801112e:	e02c      	b.n	801118a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011136:	b29b      	uxth	r3, r3
 8011138:	2b00      	cmp	r3, #0
 801113a:	f47f af79 	bne.w	8011030 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	9300      	str	r3, [sp, #0]
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	2200      	movs	r2, #0
 8011146:	2108      	movs	r1, #8
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	f000 fe6f 	bl	8011e2c <SPI_WaitOnFlagUntilTimeout>
 801114e:	4603      	mov	r3, r0
 8011150:	2b00      	cmp	r3, #0
 8011152:	d007      	beq.n	8011164 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801115a:	f043 0220 	orr.w	r2, r3, #32
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011164:	68f8      	ldr	r0, [r7, #12]
 8011166:	f000 fdc1 	bl	8011cec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2201      	movs	r2, #1
 801116e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2200      	movs	r2, #0
 8011176:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011180:	2b00      	cmp	r3, #0
 8011182:	d001      	beq.n	8011188 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8011184:	2301      	movs	r3, #1
 8011186:	e000      	b.n	801118a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8011188:	2300      	movs	r3, #0
  }
}
 801118a:	4618      	mov	r0, r3
 801118c:	3718      	adds	r7, #24
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop

08011194 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b088      	sub	sp, #32
 8011198:	af00      	add	r7, sp, #0
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	60b9      	str	r1, [r7, #8]
 801119e:	603b      	str	r3, [r7, #0]
 80111a0:	4613      	mov	r3, r2
 80111a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111a8:	095b      	lsrs	r3, r3, #5
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	3301      	adds	r3, #1
 80111ae:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	3330      	adds	r3, #48	@ 0x30
 80111b6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80111b8:	f7f9 fc54 	bl	800aa64 <HAL_GetTick>
 80111bc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d001      	beq.n	80111ce <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80111ca:	2302      	movs	r3, #2
 80111cc:	e250      	b.n	8011670 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <HAL_SPI_Receive+0x46>
 80111d4:	88fb      	ldrh	r3, [r7, #6]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d101      	bne.n	80111de <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80111da:	2301      	movs	r3, #1
 80111dc:	e248      	b.n	8011670 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d101      	bne.n	80111ec <HAL_SPI_Receive+0x58>
 80111e8:	2302      	movs	r3, #2
 80111ea:	e241      	b.n	8011670 <HAL_SPI_Receive+0x4dc>
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2201      	movs	r2, #1
 80111f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2204      	movs	r2, #4
 80111f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	2200      	movs	r2, #0
 8011200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	68ba      	ldr	r2, [r7, #8]
 8011208:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	88fa      	ldrh	r2, [r7, #6]
 801120e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	88fa      	ldrh	r2, [r7, #6]
 8011216:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2200      	movs	r2, #0
 801121e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2200      	movs	r2, #0
 8011224:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2200      	movs	r2, #0
 801122c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2200      	movs	r2, #0
 8011234:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2200      	movs	r2, #0
 801123a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	689b      	ldr	r3, [r3, #8]
 8011240:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011244:	d108      	bne.n	8011258 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	681a      	ldr	r2, [r3, #0]
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011254:	601a      	str	r2, [r3, #0]
 8011256:	e009      	b.n	801126c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801126a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	685a      	ldr	r2, [r3, #4]
 8011272:	4b95      	ldr	r3, [pc, #596]	@ (80114c8 <HAL_SPI_Receive+0x334>)
 8011274:	4013      	ands	r3, r2
 8011276:	88f9      	ldrh	r1, [r7, #6]
 8011278:	68fa      	ldr	r2, [r7, #12]
 801127a:	6812      	ldr	r2, [r2, #0]
 801127c:	430b      	orrs	r3, r1
 801127e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	681a      	ldr	r2, [r3, #0]
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f042 0201 	orr.w	r2, r2, #1
 801128e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011298:	d107      	bne.n	80112aa <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80112a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	2b0f      	cmp	r3, #15
 80112b0:	d96c      	bls.n	801138c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80112b2:	e064      	b.n	801137e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	695b      	ldr	r3, [r3, #20]
 80112ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	695b      	ldr	r3, [r3, #20]
 80112c2:	f003 0301 	and.w	r3, r3, #1
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	d114      	bne.n	80112f4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80112d4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112da:	1d1a      	adds	r2, r3, #4
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	3b01      	subs	r3, #1
 80112ea:	b29a      	uxth	r2, r3
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80112f2:	e044      	b.n	801137e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	8bfa      	ldrh	r2, [r7, #30]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d919      	bls.n	8011336 <HAL_SPI_Receive+0x1a2>
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011308:	2b00      	cmp	r3, #0
 801130a:	d014      	beq.n	8011336 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011314:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011316:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801131c:	1d1a      	adds	r2, r3, #4
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011328:	b29b      	uxth	r3, r3
 801132a:	3b01      	subs	r3, #1
 801132c:	b29a      	uxth	r2, r3
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011334:	e023      	b.n	801137e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011336:	f7f9 fb95 	bl	800aa64 <HAL_GetTick>
 801133a:	4602      	mov	r2, r0
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	683a      	ldr	r2, [r7, #0]
 8011342:	429a      	cmp	r2, r3
 8011344:	d803      	bhi.n	801134e <HAL_SPI_Receive+0x1ba>
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801134c:	d102      	bne.n	8011354 <HAL_SPI_Receive+0x1c0>
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d114      	bne.n	801137e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f000 fcc9 	bl	8011cec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011360:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2201      	movs	r2, #1
 801136e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	2200      	movs	r2, #0
 8011376:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801137a:	2303      	movs	r3, #3
 801137c:	e178      	b.n	8011670 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011384:	b29b      	uxth	r3, r3
 8011386:	2b00      	cmp	r3, #0
 8011388:	d194      	bne.n	80112b4 <HAL_SPI_Receive+0x120>
 801138a:	e15e      	b.n	801164a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	2b07      	cmp	r3, #7
 8011392:	f240 8153 	bls.w	801163c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011396:	e08f      	b.n	80114b8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	695b      	ldr	r3, [r3, #20]
 801139e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	695b      	ldr	r3, [r3, #20]
 80113a6:	f003 0301 	and.w	r3, r3, #1
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d114      	bne.n	80113d8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113b2:	69ba      	ldr	r2, [r7, #24]
 80113b4:	8812      	ldrh	r2, [r2, #0]
 80113b6:	b292      	uxth	r2, r2
 80113b8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113be:	1c9a      	adds	r2, r3, #2
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	3b01      	subs	r3, #1
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80113d6:	e06f      	b.n	80114b8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80113de:	b29b      	uxth	r3, r3
 80113e0:	8bfa      	ldrh	r2, [r7, #30]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d924      	bls.n	8011430 <HAL_SPI_Receive+0x29c>
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d01f      	beq.n	8011430 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113f4:	69ba      	ldr	r2, [r7, #24]
 80113f6:	8812      	ldrh	r2, [r2, #0]
 80113f8:	b292      	uxth	r2, r2
 80113fa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011400:	1c9a      	adds	r2, r3, #2
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801140a:	69ba      	ldr	r2, [r7, #24]
 801140c:	8812      	ldrh	r2, [r2, #0]
 801140e:	b292      	uxth	r2, r2
 8011410:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011416:	1c9a      	adds	r2, r3, #2
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011422:	b29b      	uxth	r3, r3
 8011424:	3b02      	subs	r3, #2
 8011426:	b29a      	uxth	r2, r3
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801142e:	e043      	b.n	80114b8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011436:	b29b      	uxth	r3, r3
 8011438:	2b01      	cmp	r3, #1
 801143a:	d119      	bne.n	8011470 <HAL_SPI_Receive+0x2dc>
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011442:	2b00      	cmp	r3, #0
 8011444:	d014      	beq.n	8011470 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801144a:	69ba      	ldr	r2, [r7, #24]
 801144c:	8812      	ldrh	r2, [r2, #0]
 801144e:	b292      	uxth	r2, r2
 8011450:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011456:	1c9a      	adds	r2, r3, #2
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011462:	b29b      	uxth	r3, r3
 8011464:	3b01      	subs	r3, #1
 8011466:	b29a      	uxth	r2, r3
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801146e:	e023      	b.n	80114b8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011470:	f7f9 faf8 	bl	800aa64 <HAL_GetTick>
 8011474:	4602      	mov	r2, r0
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	683a      	ldr	r2, [r7, #0]
 801147c:	429a      	cmp	r2, r3
 801147e:	d803      	bhi.n	8011488 <HAL_SPI_Receive+0x2f4>
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011486:	d102      	bne.n	801148e <HAL_SPI_Receive+0x2fa>
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d114      	bne.n	80114b8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801148e:	68f8      	ldr	r0, [r7, #12]
 8011490:	f000 fc2c 	bl	8011cec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801149a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2201      	movs	r2, #1
 80114a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2200      	movs	r2, #0
 80114b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80114b4:	2303      	movs	r3, #3
 80114b6:	e0db      	b.n	8011670 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80114be:	b29b      	uxth	r3, r3
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	f47f af69 	bne.w	8011398 <HAL_SPI_Receive+0x204>
 80114c6:	e0c0      	b.n	801164a <HAL_SPI_Receive+0x4b6>
 80114c8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	695b      	ldr	r3, [r3, #20]
 80114d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	695b      	ldr	r3, [r3, #20]
 80114da:	f003 0301 	and.w	r3, r3, #1
 80114de:	2b01      	cmp	r3, #1
 80114e0:	d117      	bne.n	8011512 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80114ee:	7812      	ldrb	r2, [r2, #0]
 80114f0:	b2d2      	uxtb	r2, r2
 80114f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80114f8:	1c5a      	adds	r2, r3, #1
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011504:	b29b      	uxth	r3, r3
 8011506:	3b01      	subs	r3, #1
 8011508:	b29a      	uxth	r2, r3
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011510:	e094      	b.n	801163c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011518:	b29b      	uxth	r3, r3
 801151a:	8bfa      	ldrh	r2, [r7, #30]
 801151c:	429a      	cmp	r2, r3
 801151e:	d946      	bls.n	80115ae <HAL_SPI_Receive+0x41a>
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011526:	2b00      	cmp	r3, #0
 8011528:	d041      	beq.n	80115ae <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011536:	7812      	ldrb	r2, [r2, #0]
 8011538:	b2d2      	uxtb	r2, r2
 801153a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011540:	1c5a      	adds	r2, r3, #1
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011552:	7812      	ldrb	r2, [r2, #0]
 8011554:	b2d2      	uxtb	r2, r2
 8011556:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801155c:	1c5a      	adds	r2, r3, #1
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801156e:	7812      	ldrb	r2, [r2, #0]
 8011570:	b2d2      	uxtb	r2, r2
 8011572:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011578:	1c5a      	adds	r2, r3, #1
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801158a:	7812      	ldrb	r2, [r2, #0]
 801158c:	b2d2      	uxtb	r2, r2
 801158e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011594:	1c5a      	adds	r2, r3, #1
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	3b04      	subs	r3, #4
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80115ac:	e046      	b.n	801163c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	d81c      	bhi.n	80115f4 <HAL_SPI_Receive+0x460>
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d017      	beq.n	80115f4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80115d0:	7812      	ldrb	r2, [r2, #0]
 80115d2:	b2d2      	uxtb	r2, r2
 80115d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80115da:	1c5a      	adds	r2, r3, #1
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	3b01      	subs	r3, #1
 80115ea:	b29a      	uxth	r2, r3
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80115f2:	e023      	b.n	801163c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115f4:	f7f9 fa36 	bl	800aa64 <HAL_GetTick>
 80115f8:	4602      	mov	r2, r0
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	1ad3      	subs	r3, r2, r3
 80115fe:	683a      	ldr	r2, [r7, #0]
 8011600:	429a      	cmp	r2, r3
 8011602:	d803      	bhi.n	801160c <HAL_SPI_Receive+0x478>
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801160a:	d102      	bne.n	8011612 <HAL_SPI_Receive+0x47e>
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d114      	bne.n	801163c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011612:	68f8      	ldr	r0, [r7, #12]
 8011614:	f000 fb6a 	bl	8011cec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801161e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2201      	movs	r2, #1
 801162c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2200      	movs	r2, #0
 8011634:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011638:	2303      	movs	r3, #3
 801163a:	e019      	b.n	8011670 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011642:	b29b      	uxth	r3, r3
 8011644:	2b00      	cmp	r3, #0
 8011646:	f47f af41 	bne.w	80114cc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801164a:	68f8      	ldr	r0, [r7, #12]
 801164c:	f000 fb4e 	bl	8011cec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2201      	movs	r2, #1
 8011654:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2200      	movs	r2, #0
 801165c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011666:	2b00      	cmp	r3, #0
 8011668:	d001      	beq.n	801166e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801166a:	2301      	movs	r3, #1
 801166c:	e000      	b.n	8011670 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 801166e:	2300      	movs	r3, #0
  }
}
 8011670:	4618      	mov	r0, r3
 8011672:	3720      	adds	r7, #32
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b08e      	sub	sp, #56	@ 0x38
 801167c:	af02      	add	r7, sp, #8
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	607a      	str	r2, [r7, #4]
 8011684:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	3320      	adds	r3, #32
 801168c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	3330      	adds	r3, #48	@ 0x30
 8011694:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801169a:	095b      	lsrs	r3, r3, #5
 801169c:	b29b      	uxth	r3, r3
 801169e:	3301      	adds	r3, #1
 80116a0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80116a2:	f7f9 f9df 	bl	800aa64 <HAL_GetTick>
 80116a6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80116a8:	887b      	ldrh	r3, [r7, #2]
 80116aa:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80116ac:	887b      	ldrh	r3, [r7, #2]
 80116ae:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d001      	beq.n	80116c0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80116bc:	2302      	movs	r3, #2
 80116be:	e310      	b.n	8011ce2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d005      	beq.n	80116d2 <HAL_SPI_TransmitReceive+0x5a>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d002      	beq.n	80116d2 <HAL_SPI_TransmitReceive+0x5a>
 80116cc:	887b      	ldrh	r3, [r7, #2]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d101      	bne.n	80116d6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80116d2:	2301      	movs	r3, #1
 80116d4:	e305      	b.n	8011ce2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d101      	bne.n	80116e4 <HAL_SPI_TransmitReceive+0x6c>
 80116e0:	2302      	movs	r3, #2
 80116e2:	e2fe      	b.n	8011ce2 <HAL_SPI_TransmitReceive+0x66a>
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2201      	movs	r2, #1
 80116e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2205      	movs	r2, #5
 80116f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2200      	movs	r2, #0
 80116f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	887a      	ldrh	r2, [r7, #2]
 8011706:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	887a      	ldrh	r2, [r7, #2]
 801170e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	68ba      	ldr	r2, [r7, #8]
 8011716:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	887a      	ldrh	r2, [r7, #2]
 801171c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	887a      	ldrh	r2, [r7, #2]
 8011724:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2200      	movs	r2, #0
 801172c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2200      	movs	r2, #0
 8011732:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68da      	ldr	r2, [r3, #12]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8011742:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	4a70      	ldr	r2, [pc, #448]	@ (801190c <HAL_SPI_TransmitReceive+0x294>)
 801174a:	4293      	cmp	r3, r2
 801174c:	d009      	beq.n	8011762 <HAL_SPI_TransmitReceive+0xea>
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	4a6f      	ldr	r2, [pc, #444]	@ (8011910 <HAL_SPI_TransmitReceive+0x298>)
 8011754:	4293      	cmp	r3, r2
 8011756:	d004      	beq.n	8011762 <HAL_SPI_TransmitReceive+0xea>
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	4a6d      	ldr	r2, [pc, #436]	@ (8011914 <HAL_SPI_TransmitReceive+0x29c>)
 801175e:	4293      	cmp	r3, r2
 8011760:	d102      	bne.n	8011768 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8011762:	2310      	movs	r3, #16
 8011764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011766:	e001      	b.n	801176c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8011768:	2308      	movs	r3, #8
 801176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	685a      	ldr	r2, [r3, #4]
 8011772:	4b69      	ldr	r3, [pc, #420]	@ (8011918 <HAL_SPI_TransmitReceive+0x2a0>)
 8011774:	4013      	ands	r3, r2
 8011776:	8879      	ldrh	r1, [r7, #2]
 8011778:	68fa      	ldr	r2, [r7, #12]
 801177a:	6812      	ldr	r2, [r2, #0]
 801177c:	430b      	orrs	r3, r1
 801177e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	f042 0201 	orr.w	r2, r2, #1
 801178e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011798:	d107      	bne.n	80117aa <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80117a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	2b0f      	cmp	r3, #15
 80117b0:	f240 80a2 	bls.w	80118f8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80117b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b6:	089b      	lsrs	r3, r3, #2
 80117b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80117ba:	e094      	b.n	80118e6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	695b      	ldr	r3, [r3, #20]
 80117c2:	f003 0302 	and.w	r3, r3, #2
 80117c6:	2b02      	cmp	r3, #2
 80117c8:	d120      	bne.n	801180c <HAL_SPI_TransmitReceive+0x194>
 80117ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d01d      	beq.n	801180c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80117d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80117d2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80117d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80117d8:	429a      	cmp	r2, r3
 80117da:	d217      	bcs.n	801180c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	6812      	ldr	r2, [r2, #0]
 80117e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80117ec:	1d1a      	adds	r2, r3, #4
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	3b01      	subs	r3, #1
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801180a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	695b      	ldr	r3, [r3, #20]
 8011812:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011814:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011816:	2b00      	cmp	r3, #0
 8011818:	d065      	beq.n	80118e6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	695b      	ldr	r3, [r3, #20]
 8011820:	f003 0301 	and.w	r3, r3, #1
 8011824:	2b01      	cmp	r3, #1
 8011826:	d118      	bne.n	801185a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011830:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011832:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011838:	1d1a      	adds	r2, r3, #4
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011844:	b29b      	uxth	r3, r3
 8011846:	3b01      	subs	r3, #1
 8011848:	b29a      	uxth	r2, r3
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011856:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011858:	e045      	b.n	80118e6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801185a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801185c:	8bfb      	ldrh	r3, [r7, #30]
 801185e:	429a      	cmp	r2, r3
 8011860:	d21d      	bcs.n	801189e <HAL_SPI_TransmitReceive+0x226>
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011868:	2b00      	cmp	r3, #0
 801186a:	d018      	beq.n	801189e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011874:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011876:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801187c:	1d1a      	adds	r2, r3, #4
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011888:	b29b      	uxth	r3, r3
 801188a:	3b01      	subs	r3, #1
 801188c:	b29a      	uxth	r2, r3
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801189a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801189c:	e023      	b.n	80118e6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801189e:	f7f9 f8e1 	bl	800aa64 <HAL_GetTick>
 80118a2:	4602      	mov	r2, r0
 80118a4:	69bb      	ldr	r3, [r7, #24]
 80118a6:	1ad3      	subs	r3, r2, r3
 80118a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d803      	bhi.n	80118b6 <HAL_SPI_TransmitReceive+0x23e>
 80118ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118b4:	d102      	bne.n	80118bc <HAL_SPI_TransmitReceive+0x244>
 80118b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d114      	bne.n	80118e6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	f000 fa15 	bl	8011cec <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	2201      	movs	r2, #1
 80118d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	2200      	movs	r2, #0
 80118de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80118e2:	2303      	movs	r3, #3
 80118e4:	e1fd      	b.n	8011ce2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80118e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	f47f af67 	bne.w	80117bc <HAL_SPI_TransmitReceive+0x144>
 80118ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f47f af63 	bne.w	80117bc <HAL_SPI_TransmitReceive+0x144>
 80118f6:	e1ce      	b.n	8011c96 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	2b07      	cmp	r3, #7
 80118fe:	f240 81c2 	bls.w	8011c86 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8011902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011904:	085b      	lsrs	r3, r3, #1
 8011906:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011908:	e0c9      	b.n	8011a9e <HAL_SPI_TransmitReceive+0x426>
 801190a:	bf00      	nop
 801190c:	40013000 	.word	0x40013000
 8011910:	40003800 	.word	0x40003800
 8011914:	40003c00 	.word	0x40003c00
 8011918:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	695b      	ldr	r3, [r3, #20]
 8011922:	f003 0302 	and.w	r3, r3, #2
 8011926:	2b02      	cmp	r3, #2
 8011928:	d11f      	bne.n	801196a <HAL_SPI_TransmitReceive+0x2f2>
 801192a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801192c:	2b00      	cmp	r3, #0
 801192e:	d01c      	beq.n	801196a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011930:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011932:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011936:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011938:	429a      	cmp	r2, r3
 801193a:	d216      	bcs.n	801196a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011940:	881a      	ldrh	r2, [r3, #0]
 8011942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011944:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801194a:	1c9a      	adds	r2, r3, #2
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011956:	b29b      	uxth	r3, r3
 8011958:	3b01      	subs	r3, #1
 801195a:	b29a      	uxth	r2, r3
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011968:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	695b      	ldr	r3, [r3, #20]
 8011970:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011972:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011974:	2b00      	cmp	r3, #0
 8011976:	f000 8092 	beq.w	8011a9e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	695b      	ldr	r3, [r3, #20]
 8011980:	f003 0301 	and.w	r3, r3, #1
 8011984:	2b01      	cmp	r3, #1
 8011986:	d118      	bne.n	80119ba <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801198c:	6a3a      	ldr	r2, [r7, #32]
 801198e:	8812      	ldrh	r2, [r2, #0]
 8011990:	b292      	uxth	r2, r2
 8011992:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011998:	1c9a      	adds	r2, r3, #2
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	3b01      	subs	r3, #1
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80119b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80119b8:	e071      	b.n	8011a9e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80119ba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80119bc:	8bfb      	ldrh	r3, [r7, #30]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d228      	bcs.n	8011a14 <HAL_SPI_TransmitReceive+0x39c>
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d023      	beq.n	8011a14 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80119d0:	6a3a      	ldr	r2, [r7, #32]
 80119d2:	8812      	ldrh	r2, [r2, #0]
 80119d4:	b292      	uxth	r2, r2
 80119d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80119dc:	1c9a      	adds	r2, r3, #2
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80119e6:	6a3a      	ldr	r2, [r7, #32]
 80119e8:	8812      	ldrh	r2, [r2, #0]
 80119ea:	b292      	uxth	r2, r2
 80119ec:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80119f2:	1c9a      	adds	r2, r3, #2
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	3b02      	subs	r3, #2
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011a10:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011a12:	e044      	b.n	8011a9e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8011a14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d11d      	bne.n	8011a56 <HAL_SPI_TransmitReceive+0x3de>
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d018      	beq.n	8011a56 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a28:	6a3a      	ldr	r2, [r7, #32]
 8011a2a:	8812      	ldrh	r2, [r2, #0]
 8011a2c:	b292      	uxth	r2, r2
 8011a2e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a34:	1c9a      	adds	r2, r3, #2
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	3b01      	subs	r3, #1
 8011a44:	b29a      	uxth	r2, r3
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011a52:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011a54:	e023      	b.n	8011a9e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a56:	f7f9 f805 	bl	800aa64 <HAL_GetTick>
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	1ad3      	subs	r3, r2, r3
 8011a60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d803      	bhi.n	8011a6e <HAL_SPI_TransmitReceive+0x3f6>
 8011a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a6c:	d102      	bne.n	8011a74 <HAL_SPI_TransmitReceive+0x3fc>
 8011a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d114      	bne.n	8011a9e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011a74:	68f8      	ldr	r0, [r7, #12]
 8011a76:	f000 f939 	bl	8011cec <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011a80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2201      	movs	r2, #1
 8011a8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	2200      	movs	r2, #0
 8011a96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011a9a:	2303      	movs	r3, #3
 8011a9c:	e121      	b.n	8011ce2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011a9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f47f af3b 	bne.w	801191c <HAL_SPI_TransmitReceive+0x2a4>
 8011aa6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	f47f af37 	bne.w	801191c <HAL_SPI_TransmitReceive+0x2a4>
 8011aae:	e0f2      	b.n	8011c96 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	695b      	ldr	r3, [r3, #20]
 8011ab6:	f003 0302 	and.w	r3, r3, #2
 8011aba:	2b02      	cmp	r3, #2
 8011abc:	d121      	bne.n	8011b02 <HAL_SPI_TransmitReceive+0x48a>
 8011abe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d01e      	beq.n	8011b02 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011ac4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011ac6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d218      	bcs.n	8011b02 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	3320      	adds	r3, #32
 8011ada:	7812      	ldrb	r2, [r2, #0]
 8011adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011ae2:	1c5a      	adds	r2, r3, #1
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	3b01      	subs	r3, #1
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011b00:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	695b      	ldr	r3, [r3, #20]
 8011b08:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011b0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f000 80ba 	beq.w	8011c86 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	695b      	ldr	r3, [r3, #20]
 8011b18:	f003 0301 	and.w	r3, r3, #1
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d11b      	bne.n	8011b58 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b2c:	7812      	ldrb	r2, [r2, #0]
 8011b2e:	b2d2      	uxtb	r2, r2
 8011b30:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b36:	1c5a      	adds	r2, r3, #1
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	3b01      	subs	r3, #1
 8011b46:	b29a      	uxth	r2, r3
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011b54:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011b56:	e096      	b.n	8011c86 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011b58:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011b5a:	8bfb      	ldrh	r3, [r7, #30]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d24a      	bcs.n	8011bf6 <HAL_SPI_TransmitReceive+0x57e>
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d045      	beq.n	8011bf6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b76:	7812      	ldrb	r2, [r2, #0]
 8011b78:	b2d2      	uxtb	r2, r2
 8011b7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b80:	1c5a      	adds	r2, r3, #1
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b92:	7812      	ldrb	r2, [r2, #0]
 8011b94:	b2d2      	uxtb	r2, r2
 8011b96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b9c:	1c5a      	adds	r2, r3, #1
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011bae:	7812      	ldrb	r2, [r2, #0]
 8011bb0:	b2d2      	uxtb	r2, r2
 8011bb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011bb8:	1c5a      	adds	r2, r3, #1
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011bca:	7812      	ldrb	r2, [r2, #0]
 8011bcc:	b2d2      	uxtb	r2, r2
 8011bce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011bd4:	1c5a      	adds	r2, r3, #1
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	3b04      	subs	r3, #4
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011bf2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011bf4:	e047      	b.n	8011c86 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8011bf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011bf8:	2b03      	cmp	r3, #3
 8011bfa:	d820      	bhi.n	8011c3e <HAL_SPI_TransmitReceive+0x5c6>
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d01b      	beq.n	8011c3e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c12:	7812      	ldrb	r2, [r2, #0]
 8011c14:	b2d2      	uxtb	r2, r2
 8011c16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c1c:	1c5a      	adds	r2, r3, #1
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011c28:	b29b      	uxth	r3, r3
 8011c2a:	3b01      	subs	r3, #1
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011c3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011c3c:	e023      	b.n	8011c86 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011c3e:	f7f8 ff11 	bl	800aa64 <HAL_GetTick>
 8011c42:	4602      	mov	r2, r0
 8011c44:	69bb      	ldr	r3, [r7, #24]
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d803      	bhi.n	8011c56 <HAL_SPI_TransmitReceive+0x5de>
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c54:	d102      	bne.n	8011c5c <HAL_SPI_TransmitReceive+0x5e4>
 8011c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d114      	bne.n	8011c86 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011c5c:	68f8      	ldr	r0, [r7, #12]
 8011c5e:	f000 f845 	bl	8011cec <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2201      	movs	r2, #1
 8011c76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011c82:	2303      	movs	r3, #3
 8011c84:	e02d      	b.n	8011ce2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011c86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f47f af11 	bne.w	8011ab0 <HAL_SPI_TransmitReceive+0x438>
 8011c8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f47f af0d 	bne.w	8011ab0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8011c96:	69bb      	ldr	r3, [r7, #24]
 8011c98:	9300      	str	r3, [sp, #0]
 8011c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	2108      	movs	r1, #8
 8011ca0:	68f8      	ldr	r0, [r7, #12]
 8011ca2:	f000 f8c3 	bl	8011e2c <SPI_WaitOnFlagUntilTimeout>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d007      	beq.n	8011cbc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011cb2:	f043 0220 	orr.w	r2, r3, #32
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011cbc:	68f8      	ldr	r0, [r7, #12]
 8011cbe:	f000 f815 	bl	8011cec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d001      	beq.n	8011ce0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	e000      	b.n	8011ce2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8011ce0:	2300      	movs	r3, #0
  }
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3730      	adds	r7, #48	@ 0x30
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop

08011cec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b085      	sub	sp, #20
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	695b      	ldr	r3, [r3, #20]
 8011cfa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	699a      	ldr	r2, [r3, #24]
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	f042 0208 	orr.w	r2, r2, #8
 8011d0a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	699a      	ldr	r2, [r3, #24]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	f042 0210 	orr.w	r2, r2, #16
 8011d1a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f022 0201 	bic.w	r2, r2, #1
 8011d2a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	6919      	ldr	r1, [r3, #16]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	4b3c      	ldr	r3, [pc, #240]	@ (8011e28 <SPI_CloseTransfer+0x13c>)
 8011d38:	400b      	ands	r3, r1
 8011d3a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	689a      	ldr	r2, [r3, #8]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011d4a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011d52:	b2db      	uxtb	r3, r3
 8011d54:	2b04      	cmp	r3, #4
 8011d56:	d014      	beq.n	8011d82 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f003 0320 	and.w	r3, r3, #32
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00f      	beq.n	8011d82 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011d68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	699a      	ldr	r2, [r3, #24]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f042 0220 	orr.w	r2, r2, #32
 8011d80:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011d88:	b2db      	uxtb	r3, r3
 8011d8a:	2b03      	cmp	r3, #3
 8011d8c:	d014      	beq.n	8011db8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00f      	beq.n	8011db8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011d9e:	f043 0204 	orr.w	r2, r3, #4
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	699a      	ldr	r2, [r3, #24]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011db6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d00f      	beq.n	8011de2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011dc8:	f043 0201 	orr.w	r2, r3, #1
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	699a      	ldr	r2, [r3, #24]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011de0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00f      	beq.n	8011e0c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011df2:	f043 0208 	orr.w	r2, r3, #8
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	699a      	ldr	r2, [r3, #24]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011e0a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2200      	movs	r2, #0
 8011e18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8011e1c:	bf00      	nop
 8011e1e:	3714      	adds	r7, #20
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr
 8011e28:	fffffc90 	.word	0xfffffc90

08011e2c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	603b      	str	r3, [r7, #0]
 8011e38:	4613      	mov	r3, r2
 8011e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011e3c:	e010      	b.n	8011e60 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e3e:	f7f8 fe11 	bl	800aa64 <HAL_GetTick>
 8011e42:	4602      	mov	r2, r0
 8011e44:	69bb      	ldr	r3, [r7, #24]
 8011e46:	1ad3      	subs	r3, r2, r3
 8011e48:	683a      	ldr	r2, [r7, #0]
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d803      	bhi.n	8011e56 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e54:	d102      	bne.n	8011e5c <SPI_WaitOnFlagUntilTimeout+0x30>
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d101      	bne.n	8011e60 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011e5c:	2303      	movs	r3, #3
 8011e5e:	e00f      	b.n	8011e80 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	695a      	ldr	r2, [r3, #20]
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	4013      	ands	r3, r2
 8011e6a:	68ba      	ldr	r2, [r7, #8]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	bf0c      	ite	eq
 8011e70:	2301      	moveq	r3, #1
 8011e72:	2300      	movne	r3, #0
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	461a      	mov	r2, r3
 8011e78:	79fb      	ldrb	r3, [r7, #7]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d0df      	beq.n	8011e3e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011e7e:	2300      	movs	r3, #0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3710      	adds	r7, #16
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e94:	095b      	lsrs	r3, r3, #5
 8011e96:	3301      	adds	r3, #1
 8011e98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	3307      	adds	r3, #7
 8011ea6:	08db      	lsrs	r3, r3, #3
 8011ea8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	fb02 f303 	mul.w	r3, r2, r3
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3714      	adds	r7, #20
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebc:	4770      	bx	lr

08011ebe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011ebe:	b580      	push	{r7, lr}
 8011ec0:	b082      	sub	sp, #8
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d101      	bne.n	8011ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	e042      	b.n	8011f56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d106      	bne.n	8011ee8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2200      	movs	r2, #0
 8011ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f7f8 f9fa 	bl	800a2dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2224      	movs	r2, #36	@ 0x24
 8011eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	681a      	ldr	r2, [r3, #0]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	f022 0201 	bic.w	r2, r2, #1
 8011efe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d002      	beq.n	8011f0e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f000 fe95 	bl	8012c38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 f826 	bl	8011f60 <UART_SetConfig>
 8011f14:	4603      	mov	r3, r0
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d101      	bne.n	8011f1e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	e01b      	b.n	8011f56 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	685a      	ldr	r2, [r3, #4]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011f2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	689a      	ldr	r2, [r3, #8]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011f3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	681a      	ldr	r2, [r3, #0]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f042 0201 	orr.w	r2, r2, #1
 8011f4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f000 ff14 	bl	8012d7c <UART_CheckIdleState>
 8011f54:	4603      	mov	r3, r0
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3708      	adds	r7, #8
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
	...

08011f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011f64:	b092      	sub	sp, #72	@ 0x48
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	689a      	ldr	r2, [r3, #8]
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	691b      	ldr	r3, [r3, #16]
 8011f78:	431a      	orrs	r2, r3
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	695b      	ldr	r3, [r3, #20]
 8011f7e:	431a      	orrs	r2, r3
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	69db      	ldr	r3, [r3, #28]
 8011f84:	4313      	orrs	r3, r2
 8011f86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	4bbe      	ldr	r3, [pc, #760]	@ (8012288 <UART_SetConfig+0x328>)
 8011f90:	4013      	ands	r3, r2
 8011f92:	697a      	ldr	r2, [r7, #20]
 8011f94:	6812      	ldr	r2, [r2, #0]
 8011f96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011f98:	430b      	orrs	r3, r1
 8011f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	68da      	ldr	r2, [r3, #12]
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	430a      	orrs	r2, r1
 8011fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	699b      	ldr	r3, [r3, #24]
 8011fb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	4ab3      	ldr	r2, [pc, #716]	@ (801228c <UART_SetConfig+0x32c>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d004      	beq.n	8011fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	6a1b      	ldr	r3, [r3, #32]
 8011fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	689a      	ldr	r2, [r3, #8]
 8011fd2:	4baf      	ldr	r3, [pc, #700]	@ (8012290 <UART_SetConfig+0x330>)
 8011fd4:	4013      	ands	r3, r2
 8011fd6:	697a      	ldr	r2, [r7, #20]
 8011fd8:	6812      	ldr	r2, [r2, #0]
 8011fda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011fdc:	430b      	orrs	r3, r1
 8011fde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fe6:	f023 010f 	bic.w	r1, r3, #15
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	430a      	orrs	r2, r1
 8011ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	4aa6      	ldr	r2, [pc, #664]	@ (8012294 <UART_SetConfig+0x334>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d177      	bne.n	80120f0 <UART_SetConfig+0x190>
 8012000:	4ba5      	ldr	r3, [pc, #660]	@ (8012298 <UART_SetConfig+0x338>)
 8012002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012008:	2b28      	cmp	r3, #40	@ 0x28
 801200a:	d86d      	bhi.n	80120e8 <UART_SetConfig+0x188>
 801200c:	a201      	add	r2, pc, #4	@ (adr r2, 8012014 <UART_SetConfig+0xb4>)
 801200e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012012:	bf00      	nop
 8012014:	080120b9 	.word	0x080120b9
 8012018:	080120e9 	.word	0x080120e9
 801201c:	080120e9 	.word	0x080120e9
 8012020:	080120e9 	.word	0x080120e9
 8012024:	080120e9 	.word	0x080120e9
 8012028:	080120e9 	.word	0x080120e9
 801202c:	080120e9 	.word	0x080120e9
 8012030:	080120e9 	.word	0x080120e9
 8012034:	080120c1 	.word	0x080120c1
 8012038:	080120e9 	.word	0x080120e9
 801203c:	080120e9 	.word	0x080120e9
 8012040:	080120e9 	.word	0x080120e9
 8012044:	080120e9 	.word	0x080120e9
 8012048:	080120e9 	.word	0x080120e9
 801204c:	080120e9 	.word	0x080120e9
 8012050:	080120e9 	.word	0x080120e9
 8012054:	080120c9 	.word	0x080120c9
 8012058:	080120e9 	.word	0x080120e9
 801205c:	080120e9 	.word	0x080120e9
 8012060:	080120e9 	.word	0x080120e9
 8012064:	080120e9 	.word	0x080120e9
 8012068:	080120e9 	.word	0x080120e9
 801206c:	080120e9 	.word	0x080120e9
 8012070:	080120e9 	.word	0x080120e9
 8012074:	080120d1 	.word	0x080120d1
 8012078:	080120e9 	.word	0x080120e9
 801207c:	080120e9 	.word	0x080120e9
 8012080:	080120e9 	.word	0x080120e9
 8012084:	080120e9 	.word	0x080120e9
 8012088:	080120e9 	.word	0x080120e9
 801208c:	080120e9 	.word	0x080120e9
 8012090:	080120e9 	.word	0x080120e9
 8012094:	080120d9 	.word	0x080120d9
 8012098:	080120e9 	.word	0x080120e9
 801209c:	080120e9 	.word	0x080120e9
 80120a0:	080120e9 	.word	0x080120e9
 80120a4:	080120e9 	.word	0x080120e9
 80120a8:	080120e9 	.word	0x080120e9
 80120ac:	080120e9 	.word	0x080120e9
 80120b0:	080120e9 	.word	0x080120e9
 80120b4:	080120e1 	.word	0x080120e1
 80120b8:	2301      	movs	r3, #1
 80120ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120be:	e326      	b.n	801270e <UART_SetConfig+0x7ae>
 80120c0:	2304      	movs	r3, #4
 80120c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120c6:	e322      	b.n	801270e <UART_SetConfig+0x7ae>
 80120c8:	2308      	movs	r3, #8
 80120ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120ce:	e31e      	b.n	801270e <UART_SetConfig+0x7ae>
 80120d0:	2310      	movs	r3, #16
 80120d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120d6:	e31a      	b.n	801270e <UART_SetConfig+0x7ae>
 80120d8:	2320      	movs	r3, #32
 80120da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120de:	e316      	b.n	801270e <UART_SetConfig+0x7ae>
 80120e0:	2340      	movs	r3, #64	@ 0x40
 80120e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120e6:	e312      	b.n	801270e <UART_SetConfig+0x7ae>
 80120e8:	2380      	movs	r3, #128	@ 0x80
 80120ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120ee:	e30e      	b.n	801270e <UART_SetConfig+0x7ae>
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	4a69      	ldr	r2, [pc, #420]	@ (801229c <UART_SetConfig+0x33c>)
 80120f6:	4293      	cmp	r3, r2
 80120f8:	d130      	bne.n	801215c <UART_SetConfig+0x1fc>
 80120fa:	4b67      	ldr	r3, [pc, #412]	@ (8012298 <UART_SetConfig+0x338>)
 80120fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80120fe:	f003 0307 	and.w	r3, r3, #7
 8012102:	2b05      	cmp	r3, #5
 8012104:	d826      	bhi.n	8012154 <UART_SetConfig+0x1f4>
 8012106:	a201      	add	r2, pc, #4	@ (adr r2, 801210c <UART_SetConfig+0x1ac>)
 8012108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801210c:	08012125 	.word	0x08012125
 8012110:	0801212d 	.word	0x0801212d
 8012114:	08012135 	.word	0x08012135
 8012118:	0801213d 	.word	0x0801213d
 801211c:	08012145 	.word	0x08012145
 8012120:	0801214d 	.word	0x0801214d
 8012124:	2300      	movs	r3, #0
 8012126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801212a:	e2f0      	b.n	801270e <UART_SetConfig+0x7ae>
 801212c:	2304      	movs	r3, #4
 801212e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012132:	e2ec      	b.n	801270e <UART_SetConfig+0x7ae>
 8012134:	2308      	movs	r3, #8
 8012136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801213a:	e2e8      	b.n	801270e <UART_SetConfig+0x7ae>
 801213c:	2310      	movs	r3, #16
 801213e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012142:	e2e4      	b.n	801270e <UART_SetConfig+0x7ae>
 8012144:	2320      	movs	r3, #32
 8012146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801214a:	e2e0      	b.n	801270e <UART_SetConfig+0x7ae>
 801214c:	2340      	movs	r3, #64	@ 0x40
 801214e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012152:	e2dc      	b.n	801270e <UART_SetConfig+0x7ae>
 8012154:	2380      	movs	r3, #128	@ 0x80
 8012156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801215a:	e2d8      	b.n	801270e <UART_SetConfig+0x7ae>
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	4a4f      	ldr	r2, [pc, #316]	@ (80122a0 <UART_SetConfig+0x340>)
 8012162:	4293      	cmp	r3, r2
 8012164:	d130      	bne.n	80121c8 <UART_SetConfig+0x268>
 8012166:	4b4c      	ldr	r3, [pc, #304]	@ (8012298 <UART_SetConfig+0x338>)
 8012168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801216a:	f003 0307 	and.w	r3, r3, #7
 801216e:	2b05      	cmp	r3, #5
 8012170:	d826      	bhi.n	80121c0 <UART_SetConfig+0x260>
 8012172:	a201      	add	r2, pc, #4	@ (adr r2, 8012178 <UART_SetConfig+0x218>)
 8012174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012178:	08012191 	.word	0x08012191
 801217c:	08012199 	.word	0x08012199
 8012180:	080121a1 	.word	0x080121a1
 8012184:	080121a9 	.word	0x080121a9
 8012188:	080121b1 	.word	0x080121b1
 801218c:	080121b9 	.word	0x080121b9
 8012190:	2300      	movs	r3, #0
 8012192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012196:	e2ba      	b.n	801270e <UART_SetConfig+0x7ae>
 8012198:	2304      	movs	r3, #4
 801219a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801219e:	e2b6      	b.n	801270e <UART_SetConfig+0x7ae>
 80121a0:	2308      	movs	r3, #8
 80121a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121a6:	e2b2      	b.n	801270e <UART_SetConfig+0x7ae>
 80121a8:	2310      	movs	r3, #16
 80121aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121ae:	e2ae      	b.n	801270e <UART_SetConfig+0x7ae>
 80121b0:	2320      	movs	r3, #32
 80121b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121b6:	e2aa      	b.n	801270e <UART_SetConfig+0x7ae>
 80121b8:	2340      	movs	r3, #64	@ 0x40
 80121ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121be:	e2a6      	b.n	801270e <UART_SetConfig+0x7ae>
 80121c0:	2380      	movs	r3, #128	@ 0x80
 80121c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121c6:	e2a2      	b.n	801270e <UART_SetConfig+0x7ae>
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	4a35      	ldr	r2, [pc, #212]	@ (80122a4 <UART_SetConfig+0x344>)
 80121ce:	4293      	cmp	r3, r2
 80121d0:	d130      	bne.n	8012234 <UART_SetConfig+0x2d4>
 80121d2:	4b31      	ldr	r3, [pc, #196]	@ (8012298 <UART_SetConfig+0x338>)
 80121d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121d6:	f003 0307 	and.w	r3, r3, #7
 80121da:	2b05      	cmp	r3, #5
 80121dc:	d826      	bhi.n	801222c <UART_SetConfig+0x2cc>
 80121de:	a201      	add	r2, pc, #4	@ (adr r2, 80121e4 <UART_SetConfig+0x284>)
 80121e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e4:	080121fd 	.word	0x080121fd
 80121e8:	08012205 	.word	0x08012205
 80121ec:	0801220d 	.word	0x0801220d
 80121f0:	08012215 	.word	0x08012215
 80121f4:	0801221d 	.word	0x0801221d
 80121f8:	08012225 	.word	0x08012225
 80121fc:	2300      	movs	r3, #0
 80121fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012202:	e284      	b.n	801270e <UART_SetConfig+0x7ae>
 8012204:	2304      	movs	r3, #4
 8012206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801220a:	e280      	b.n	801270e <UART_SetConfig+0x7ae>
 801220c:	2308      	movs	r3, #8
 801220e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012212:	e27c      	b.n	801270e <UART_SetConfig+0x7ae>
 8012214:	2310      	movs	r3, #16
 8012216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801221a:	e278      	b.n	801270e <UART_SetConfig+0x7ae>
 801221c:	2320      	movs	r3, #32
 801221e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012222:	e274      	b.n	801270e <UART_SetConfig+0x7ae>
 8012224:	2340      	movs	r3, #64	@ 0x40
 8012226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801222a:	e270      	b.n	801270e <UART_SetConfig+0x7ae>
 801222c:	2380      	movs	r3, #128	@ 0x80
 801222e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012232:	e26c      	b.n	801270e <UART_SetConfig+0x7ae>
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	4a1b      	ldr	r2, [pc, #108]	@ (80122a8 <UART_SetConfig+0x348>)
 801223a:	4293      	cmp	r3, r2
 801223c:	d142      	bne.n	80122c4 <UART_SetConfig+0x364>
 801223e:	4b16      	ldr	r3, [pc, #88]	@ (8012298 <UART_SetConfig+0x338>)
 8012240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012242:	f003 0307 	and.w	r3, r3, #7
 8012246:	2b05      	cmp	r3, #5
 8012248:	d838      	bhi.n	80122bc <UART_SetConfig+0x35c>
 801224a:	a201      	add	r2, pc, #4	@ (adr r2, 8012250 <UART_SetConfig+0x2f0>)
 801224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012250:	08012269 	.word	0x08012269
 8012254:	08012271 	.word	0x08012271
 8012258:	08012279 	.word	0x08012279
 801225c:	08012281 	.word	0x08012281
 8012260:	080122ad 	.word	0x080122ad
 8012264:	080122b5 	.word	0x080122b5
 8012268:	2300      	movs	r3, #0
 801226a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801226e:	e24e      	b.n	801270e <UART_SetConfig+0x7ae>
 8012270:	2304      	movs	r3, #4
 8012272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012276:	e24a      	b.n	801270e <UART_SetConfig+0x7ae>
 8012278:	2308      	movs	r3, #8
 801227a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801227e:	e246      	b.n	801270e <UART_SetConfig+0x7ae>
 8012280:	2310      	movs	r3, #16
 8012282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012286:	e242      	b.n	801270e <UART_SetConfig+0x7ae>
 8012288:	cfff69f3 	.word	0xcfff69f3
 801228c:	58000c00 	.word	0x58000c00
 8012290:	11fff4ff 	.word	0x11fff4ff
 8012294:	40011000 	.word	0x40011000
 8012298:	58024400 	.word	0x58024400
 801229c:	40004400 	.word	0x40004400
 80122a0:	40004800 	.word	0x40004800
 80122a4:	40004c00 	.word	0x40004c00
 80122a8:	40005000 	.word	0x40005000
 80122ac:	2320      	movs	r3, #32
 80122ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80122b2:	e22c      	b.n	801270e <UART_SetConfig+0x7ae>
 80122b4:	2340      	movs	r3, #64	@ 0x40
 80122b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80122ba:	e228      	b.n	801270e <UART_SetConfig+0x7ae>
 80122bc:	2380      	movs	r3, #128	@ 0x80
 80122be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80122c2:	e224      	b.n	801270e <UART_SetConfig+0x7ae>
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	4ab1      	ldr	r2, [pc, #708]	@ (8012590 <UART_SetConfig+0x630>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d176      	bne.n	80123bc <UART_SetConfig+0x45c>
 80122ce:	4bb1      	ldr	r3, [pc, #708]	@ (8012594 <UART_SetConfig+0x634>)
 80122d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80122d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80122d6:	2b28      	cmp	r3, #40	@ 0x28
 80122d8:	d86c      	bhi.n	80123b4 <UART_SetConfig+0x454>
 80122da:	a201      	add	r2, pc, #4	@ (adr r2, 80122e0 <UART_SetConfig+0x380>)
 80122dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122e0:	08012385 	.word	0x08012385
 80122e4:	080123b5 	.word	0x080123b5
 80122e8:	080123b5 	.word	0x080123b5
 80122ec:	080123b5 	.word	0x080123b5
 80122f0:	080123b5 	.word	0x080123b5
 80122f4:	080123b5 	.word	0x080123b5
 80122f8:	080123b5 	.word	0x080123b5
 80122fc:	080123b5 	.word	0x080123b5
 8012300:	0801238d 	.word	0x0801238d
 8012304:	080123b5 	.word	0x080123b5
 8012308:	080123b5 	.word	0x080123b5
 801230c:	080123b5 	.word	0x080123b5
 8012310:	080123b5 	.word	0x080123b5
 8012314:	080123b5 	.word	0x080123b5
 8012318:	080123b5 	.word	0x080123b5
 801231c:	080123b5 	.word	0x080123b5
 8012320:	08012395 	.word	0x08012395
 8012324:	080123b5 	.word	0x080123b5
 8012328:	080123b5 	.word	0x080123b5
 801232c:	080123b5 	.word	0x080123b5
 8012330:	080123b5 	.word	0x080123b5
 8012334:	080123b5 	.word	0x080123b5
 8012338:	080123b5 	.word	0x080123b5
 801233c:	080123b5 	.word	0x080123b5
 8012340:	0801239d 	.word	0x0801239d
 8012344:	080123b5 	.word	0x080123b5
 8012348:	080123b5 	.word	0x080123b5
 801234c:	080123b5 	.word	0x080123b5
 8012350:	080123b5 	.word	0x080123b5
 8012354:	080123b5 	.word	0x080123b5
 8012358:	080123b5 	.word	0x080123b5
 801235c:	080123b5 	.word	0x080123b5
 8012360:	080123a5 	.word	0x080123a5
 8012364:	080123b5 	.word	0x080123b5
 8012368:	080123b5 	.word	0x080123b5
 801236c:	080123b5 	.word	0x080123b5
 8012370:	080123b5 	.word	0x080123b5
 8012374:	080123b5 	.word	0x080123b5
 8012378:	080123b5 	.word	0x080123b5
 801237c:	080123b5 	.word	0x080123b5
 8012380:	080123ad 	.word	0x080123ad
 8012384:	2301      	movs	r3, #1
 8012386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801238a:	e1c0      	b.n	801270e <UART_SetConfig+0x7ae>
 801238c:	2304      	movs	r3, #4
 801238e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012392:	e1bc      	b.n	801270e <UART_SetConfig+0x7ae>
 8012394:	2308      	movs	r3, #8
 8012396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801239a:	e1b8      	b.n	801270e <UART_SetConfig+0x7ae>
 801239c:	2310      	movs	r3, #16
 801239e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123a2:	e1b4      	b.n	801270e <UART_SetConfig+0x7ae>
 80123a4:	2320      	movs	r3, #32
 80123a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123aa:	e1b0      	b.n	801270e <UART_SetConfig+0x7ae>
 80123ac:	2340      	movs	r3, #64	@ 0x40
 80123ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123b2:	e1ac      	b.n	801270e <UART_SetConfig+0x7ae>
 80123b4:	2380      	movs	r3, #128	@ 0x80
 80123b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123ba:	e1a8      	b.n	801270e <UART_SetConfig+0x7ae>
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a75      	ldr	r2, [pc, #468]	@ (8012598 <UART_SetConfig+0x638>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d130      	bne.n	8012428 <UART_SetConfig+0x4c8>
 80123c6:	4b73      	ldr	r3, [pc, #460]	@ (8012594 <UART_SetConfig+0x634>)
 80123c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80123ca:	f003 0307 	and.w	r3, r3, #7
 80123ce:	2b05      	cmp	r3, #5
 80123d0:	d826      	bhi.n	8012420 <UART_SetConfig+0x4c0>
 80123d2:	a201      	add	r2, pc, #4	@ (adr r2, 80123d8 <UART_SetConfig+0x478>)
 80123d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123d8:	080123f1 	.word	0x080123f1
 80123dc:	080123f9 	.word	0x080123f9
 80123e0:	08012401 	.word	0x08012401
 80123e4:	08012409 	.word	0x08012409
 80123e8:	08012411 	.word	0x08012411
 80123ec:	08012419 	.word	0x08012419
 80123f0:	2300      	movs	r3, #0
 80123f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123f6:	e18a      	b.n	801270e <UART_SetConfig+0x7ae>
 80123f8:	2304      	movs	r3, #4
 80123fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123fe:	e186      	b.n	801270e <UART_SetConfig+0x7ae>
 8012400:	2308      	movs	r3, #8
 8012402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012406:	e182      	b.n	801270e <UART_SetConfig+0x7ae>
 8012408:	2310      	movs	r3, #16
 801240a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801240e:	e17e      	b.n	801270e <UART_SetConfig+0x7ae>
 8012410:	2320      	movs	r3, #32
 8012412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012416:	e17a      	b.n	801270e <UART_SetConfig+0x7ae>
 8012418:	2340      	movs	r3, #64	@ 0x40
 801241a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801241e:	e176      	b.n	801270e <UART_SetConfig+0x7ae>
 8012420:	2380      	movs	r3, #128	@ 0x80
 8012422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012426:	e172      	b.n	801270e <UART_SetConfig+0x7ae>
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	4a5b      	ldr	r2, [pc, #364]	@ (801259c <UART_SetConfig+0x63c>)
 801242e:	4293      	cmp	r3, r2
 8012430:	d130      	bne.n	8012494 <UART_SetConfig+0x534>
 8012432:	4b58      	ldr	r3, [pc, #352]	@ (8012594 <UART_SetConfig+0x634>)
 8012434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012436:	f003 0307 	and.w	r3, r3, #7
 801243a:	2b05      	cmp	r3, #5
 801243c:	d826      	bhi.n	801248c <UART_SetConfig+0x52c>
 801243e:	a201      	add	r2, pc, #4	@ (adr r2, 8012444 <UART_SetConfig+0x4e4>)
 8012440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012444:	0801245d 	.word	0x0801245d
 8012448:	08012465 	.word	0x08012465
 801244c:	0801246d 	.word	0x0801246d
 8012450:	08012475 	.word	0x08012475
 8012454:	0801247d 	.word	0x0801247d
 8012458:	08012485 	.word	0x08012485
 801245c:	2300      	movs	r3, #0
 801245e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012462:	e154      	b.n	801270e <UART_SetConfig+0x7ae>
 8012464:	2304      	movs	r3, #4
 8012466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801246a:	e150      	b.n	801270e <UART_SetConfig+0x7ae>
 801246c:	2308      	movs	r3, #8
 801246e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012472:	e14c      	b.n	801270e <UART_SetConfig+0x7ae>
 8012474:	2310      	movs	r3, #16
 8012476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801247a:	e148      	b.n	801270e <UART_SetConfig+0x7ae>
 801247c:	2320      	movs	r3, #32
 801247e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012482:	e144      	b.n	801270e <UART_SetConfig+0x7ae>
 8012484:	2340      	movs	r3, #64	@ 0x40
 8012486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801248a:	e140      	b.n	801270e <UART_SetConfig+0x7ae>
 801248c:	2380      	movs	r3, #128	@ 0x80
 801248e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012492:	e13c      	b.n	801270e <UART_SetConfig+0x7ae>
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	4a41      	ldr	r2, [pc, #260]	@ (80125a0 <UART_SetConfig+0x640>)
 801249a:	4293      	cmp	r3, r2
 801249c:	f040 8082 	bne.w	80125a4 <UART_SetConfig+0x644>
 80124a0:	4b3c      	ldr	r3, [pc, #240]	@ (8012594 <UART_SetConfig+0x634>)
 80124a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80124a8:	2b28      	cmp	r3, #40	@ 0x28
 80124aa:	d86d      	bhi.n	8012588 <UART_SetConfig+0x628>
 80124ac:	a201      	add	r2, pc, #4	@ (adr r2, 80124b4 <UART_SetConfig+0x554>)
 80124ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124b2:	bf00      	nop
 80124b4:	08012559 	.word	0x08012559
 80124b8:	08012589 	.word	0x08012589
 80124bc:	08012589 	.word	0x08012589
 80124c0:	08012589 	.word	0x08012589
 80124c4:	08012589 	.word	0x08012589
 80124c8:	08012589 	.word	0x08012589
 80124cc:	08012589 	.word	0x08012589
 80124d0:	08012589 	.word	0x08012589
 80124d4:	08012561 	.word	0x08012561
 80124d8:	08012589 	.word	0x08012589
 80124dc:	08012589 	.word	0x08012589
 80124e0:	08012589 	.word	0x08012589
 80124e4:	08012589 	.word	0x08012589
 80124e8:	08012589 	.word	0x08012589
 80124ec:	08012589 	.word	0x08012589
 80124f0:	08012589 	.word	0x08012589
 80124f4:	08012569 	.word	0x08012569
 80124f8:	08012589 	.word	0x08012589
 80124fc:	08012589 	.word	0x08012589
 8012500:	08012589 	.word	0x08012589
 8012504:	08012589 	.word	0x08012589
 8012508:	08012589 	.word	0x08012589
 801250c:	08012589 	.word	0x08012589
 8012510:	08012589 	.word	0x08012589
 8012514:	08012571 	.word	0x08012571
 8012518:	08012589 	.word	0x08012589
 801251c:	08012589 	.word	0x08012589
 8012520:	08012589 	.word	0x08012589
 8012524:	08012589 	.word	0x08012589
 8012528:	08012589 	.word	0x08012589
 801252c:	08012589 	.word	0x08012589
 8012530:	08012589 	.word	0x08012589
 8012534:	08012579 	.word	0x08012579
 8012538:	08012589 	.word	0x08012589
 801253c:	08012589 	.word	0x08012589
 8012540:	08012589 	.word	0x08012589
 8012544:	08012589 	.word	0x08012589
 8012548:	08012589 	.word	0x08012589
 801254c:	08012589 	.word	0x08012589
 8012550:	08012589 	.word	0x08012589
 8012554:	08012581 	.word	0x08012581
 8012558:	2301      	movs	r3, #1
 801255a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801255e:	e0d6      	b.n	801270e <UART_SetConfig+0x7ae>
 8012560:	2304      	movs	r3, #4
 8012562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012566:	e0d2      	b.n	801270e <UART_SetConfig+0x7ae>
 8012568:	2308      	movs	r3, #8
 801256a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801256e:	e0ce      	b.n	801270e <UART_SetConfig+0x7ae>
 8012570:	2310      	movs	r3, #16
 8012572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012576:	e0ca      	b.n	801270e <UART_SetConfig+0x7ae>
 8012578:	2320      	movs	r3, #32
 801257a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801257e:	e0c6      	b.n	801270e <UART_SetConfig+0x7ae>
 8012580:	2340      	movs	r3, #64	@ 0x40
 8012582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012586:	e0c2      	b.n	801270e <UART_SetConfig+0x7ae>
 8012588:	2380      	movs	r3, #128	@ 0x80
 801258a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801258e:	e0be      	b.n	801270e <UART_SetConfig+0x7ae>
 8012590:	40011400 	.word	0x40011400
 8012594:	58024400 	.word	0x58024400
 8012598:	40007800 	.word	0x40007800
 801259c:	40007c00 	.word	0x40007c00
 80125a0:	40011800 	.word	0x40011800
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	4aad      	ldr	r2, [pc, #692]	@ (8012860 <UART_SetConfig+0x900>)
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d176      	bne.n	801269c <UART_SetConfig+0x73c>
 80125ae:	4bad      	ldr	r3, [pc, #692]	@ (8012864 <UART_SetConfig+0x904>)
 80125b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80125b6:	2b28      	cmp	r3, #40	@ 0x28
 80125b8:	d86c      	bhi.n	8012694 <UART_SetConfig+0x734>
 80125ba:	a201      	add	r2, pc, #4	@ (adr r2, 80125c0 <UART_SetConfig+0x660>)
 80125bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125c0:	08012665 	.word	0x08012665
 80125c4:	08012695 	.word	0x08012695
 80125c8:	08012695 	.word	0x08012695
 80125cc:	08012695 	.word	0x08012695
 80125d0:	08012695 	.word	0x08012695
 80125d4:	08012695 	.word	0x08012695
 80125d8:	08012695 	.word	0x08012695
 80125dc:	08012695 	.word	0x08012695
 80125e0:	0801266d 	.word	0x0801266d
 80125e4:	08012695 	.word	0x08012695
 80125e8:	08012695 	.word	0x08012695
 80125ec:	08012695 	.word	0x08012695
 80125f0:	08012695 	.word	0x08012695
 80125f4:	08012695 	.word	0x08012695
 80125f8:	08012695 	.word	0x08012695
 80125fc:	08012695 	.word	0x08012695
 8012600:	08012675 	.word	0x08012675
 8012604:	08012695 	.word	0x08012695
 8012608:	08012695 	.word	0x08012695
 801260c:	08012695 	.word	0x08012695
 8012610:	08012695 	.word	0x08012695
 8012614:	08012695 	.word	0x08012695
 8012618:	08012695 	.word	0x08012695
 801261c:	08012695 	.word	0x08012695
 8012620:	0801267d 	.word	0x0801267d
 8012624:	08012695 	.word	0x08012695
 8012628:	08012695 	.word	0x08012695
 801262c:	08012695 	.word	0x08012695
 8012630:	08012695 	.word	0x08012695
 8012634:	08012695 	.word	0x08012695
 8012638:	08012695 	.word	0x08012695
 801263c:	08012695 	.word	0x08012695
 8012640:	08012685 	.word	0x08012685
 8012644:	08012695 	.word	0x08012695
 8012648:	08012695 	.word	0x08012695
 801264c:	08012695 	.word	0x08012695
 8012650:	08012695 	.word	0x08012695
 8012654:	08012695 	.word	0x08012695
 8012658:	08012695 	.word	0x08012695
 801265c:	08012695 	.word	0x08012695
 8012660:	0801268d 	.word	0x0801268d
 8012664:	2301      	movs	r3, #1
 8012666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801266a:	e050      	b.n	801270e <UART_SetConfig+0x7ae>
 801266c:	2304      	movs	r3, #4
 801266e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012672:	e04c      	b.n	801270e <UART_SetConfig+0x7ae>
 8012674:	2308      	movs	r3, #8
 8012676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801267a:	e048      	b.n	801270e <UART_SetConfig+0x7ae>
 801267c:	2310      	movs	r3, #16
 801267e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012682:	e044      	b.n	801270e <UART_SetConfig+0x7ae>
 8012684:	2320      	movs	r3, #32
 8012686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801268a:	e040      	b.n	801270e <UART_SetConfig+0x7ae>
 801268c:	2340      	movs	r3, #64	@ 0x40
 801268e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012692:	e03c      	b.n	801270e <UART_SetConfig+0x7ae>
 8012694:	2380      	movs	r3, #128	@ 0x80
 8012696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801269a:	e038      	b.n	801270e <UART_SetConfig+0x7ae>
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	4a71      	ldr	r2, [pc, #452]	@ (8012868 <UART_SetConfig+0x908>)
 80126a2:	4293      	cmp	r3, r2
 80126a4:	d130      	bne.n	8012708 <UART_SetConfig+0x7a8>
 80126a6:	4b6f      	ldr	r3, [pc, #444]	@ (8012864 <UART_SetConfig+0x904>)
 80126a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80126aa:	f003 0307 	and.w	r3, r3, #7
 80126ae:	2b05      	cmp	r3, #5
 80126b0:	d826      	bhi.n	8012700 <UART_SetConfig+0x7a0>
 80126b2:	a201      	add	r2, pc, #4	@ (adr r2, 80126b8 <UART_SetConfig+0x758>)
 80126b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126b8:	080126d1 	.word	0x080126d1
 80126bc:	080126d9 	.word	0x080126d9
 80126c0:	080126e1 	.word	0x080126e1
 80126c4:	080126e9 	.word	0x080126e9
 80126c8:	080126f1 	.word	0x080126f1
 80126cc:	080126f9 	.word	0x080126f9
 80126d0:	2302      	movs	r3, #2
 80126d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126d6:	e01a      	b.n	801270e <UART_SetConfig+0x7ae>
 80126d8:	2304      	movs	r3, #4
 80126da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126de:	e016      	b.n	801270e <UART_SetConfig+0x7ae>
 80126e0:	2308      	movs	r3, #8
 80126e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126e6:	e012      	b.n	801270e <UART_SetConfig+0x7ae>
 80126e8:	2310      	movs	r3, #16
 80126ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126ee:	e00e      	b.n	801270e <UART_SetConfig+0x7ae>
 80126f0:	2320      	movs	r3, #32
 80126f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126f6:	e00a      	b.n	801270e <UART_SetConfig+0x7ae>
 80126f8:	2340      	movs	r3, #64	@ 0x40
 80126fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80126fe:	e006      	b.n	801270e <UART_SetConfig+0x7ae>
 8012700:	2380      	movs	r3, #128	@ 0x80
 8012702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012706:	e002      	b.n	801270e <UART_SetConfig+0x7ae>
 8012708:	2380      	movs	r3, #128	@ 0x80
 801270a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4a55      	ldr	r2, [pc, #340]	@ (8012868 <UART_SetConfig+0x908>)
 8012714:	4293      	cmp	r3, r2
 8012716:	f040 80f8 	bne.w	801290a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801271a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801271e:	2b20      	cmp	r3, #32
 8012720:	dc46      	bgt.n	80127b0 <UART_SetConfig+0x850>
 8012722:	2b02      	cmp	r3, #2
 8012724:	db75      	blt.n	8012812 <UART_SetConfig+0x8b2>
 8012726:	3b02      	subs	r3, #2
 8012728:	2b1e      	cmp	r3, #30
 801272a:	d872      	bhi.n	8012812 <UART_SetConfig+0x8b2>
 801272c:	a201      	add	r2, pc, #4	@ (adr r2, 8012734 <UART_SetConfig+0x7d4>)
 801272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012732:	bf00      	nop
 8012734:	080127b7 	.word	0x080127b7
 8012738:	08012813 	.word	0x08012813
 801273c:	080127bf 	.word	0x080127bf
 8012740:	08012813 	.word	0x08012813
 8012744:	08012813 	.word	0x08012813
 8012748:	08012813 	.word	0x08012813
 801274c:	080127cf 	.word	0x080127cf
 8012750:	08012813 	.word	0x08012813
 8012754:	08012813 	.word	0x08012813
 8012758:	08012813 	.word	0x08012813
 801275c:	08012813 	.word	0x08012813
 8012760:	08012813 	.word	0x08012813
 8012764:	08012813 	.word	0x08012813
 8012768:	08012813 	.word	0x08012813
 801276c:	080127df 	.word	0x080127df
 8012770:	08012813 	.word	0x08012813
 8012774:	08012813 	.word	0x08012813
 8012778:	08012813 	.word	0x08012813
 801277c:	08012813 	.word	0x08012813
 8012780:	08012813 	.word	0x08012813
 8012784:	08012813 	.word	0x08012813
 8012788:	08012813 	.word	0x08012813
 801278c:	08012813 	.word	0x08012813
 8012790:	08012813 	.word	0x08012813
 8012794:	08012813 	.word	0x08012813
 8012798:	08012813 	.word	0x08012813
 801279c:	08012813 	.word	0x08012813
 80127a0:	08012813 	.word	0x08012813
 80127a4:	08012813 	.word	0x08012813
 80127a8:	08012813 	.word	0x08012813
 80127ac:	08012805 	.word	0x08012805
 80127b0:	2b40      	cmp	r3, #64	@ 0x40
 80127b2:	d02a      	beq.n	801280a <UART_SetConfig+0x8aa>
 80127b4:	e02d      	b.n	8012812 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80127b6:	f7fc f8b5 	bl	800e924 <HAL_RCCEx_GetD3PCLK1Freq>
 80127ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80127bc:	e02f      	b.n	801281e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80127be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fc f8c4 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80127c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127cc:	e027      	b.n	801281e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80127ce:	f107 0318 	add.w	r3, r7, #24
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fc fa10 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80127d8:	69fb      	ldr	r3, [r7, #28]
 80127da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127dc:	e01f      	b.n	801281e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80127de:	4b21      	ldr	r3, [pc, #132]	@ (8012864 <UART_SetConfig+0x904>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f003 0320 	and.w	r3, r3, #32
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d009      	beq.n	80127fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80127ea:	4b1e      	ldr	r3, [pc, #120]	@ (8012864 <UART_SetConfig+0x904>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	08db      	lsrs	r3, r3, #3
 80127f0:	f003 0303 	and.w	r3, r3, #3
 80127f4:	4a1d      	ldr	r2, [pc, #116]	@ (801286c <UART_SetConfig+0x90c>)
 80127f6:	fa22 f303 	lsr.w	r3, r2, r3
 80127fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80127fc:	e00f      	b.n	801281e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80127fe:	4b1b      	ldr	r3, [pc, #108]	@ (801286c <UART_SetConfig+0x90c>)
 8012800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012802:	e00c      	b.n	801281e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012804:	4b1a      	ldr	r3, [pc, #104]	@ (8012870 <UART_SetConfig+0x910>)
 8012806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012808:	e009      	b.n	801281e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801280a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801280e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012810:	e005      	b.n	801281e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012812:	2300      	movs	r3, #0
 8012814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012816:	2301      	movs	r3, #1
 8012818:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801281c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801281e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012820:	2b00      	cmp	r3, #0
 8012822:	f000 81ee 	beq.w	8012c02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801282a:	4a12      	ldr	r2, [pc, #72]	@ (8012874 <UART_SetConfig+0x914>)
 801282c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012830:	461a      	mov	r2, r3
 8012832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012834:	fbb3 f3f2 	udiv	r3, r3, r2
 8012838:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	685a      	ldr	r2, [r3, #4]
 801283e:	4613      	mov	r3, r2
 8012840:	005b      	lsls	r3, r3, #1
 8012842:	4413      	add	r3, r2
 8012844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012846:	429a      	cmp	r2, r3
 8012848:	d305      	bcc.n	8012856 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	685b      	ldr	r3, [r3, #4]
 801284e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012852:	429a      	cmp	r2, r3
 8012854:	d910      	bls.n	8012878 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012856:	2301      	movs	r3, #1
 8012858:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801285c:	e1d1      	b.n	8012c02 <UART_SetConfig+0xca2>
 801285e:	bf00      	nop
 8012860:	40011c00 	.word	0x40011c00
 8012864:	58024400 	.word	0x58024400
 8012868:	58000c00 	.word	0x58000c00
 801286c:	03d09000 	.word	0x03d09000
 8012870:	003d0900 	.word	0x003d0900
 8012874:	08019ec0 	.word	0x08019ec0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801287a:	2200      	movs	r2, #0
 801287c:	60bb      	str	r3, [r7, #8]
 801287e:	60fa      	str	r2, [r7, #12]
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012884:	4ac0      	ldr	r2, [pc, #768]	@ (8012b88 <UART_SetConfig+0xc28>)
 8012886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801288a:	b29b      	uxth	r3, r3
 801288c:	2200      	movs	r2, #0
 801288e:	603b      	str	r3, [r7, #0]
 8012890:	607a      	str	r2, [r7, #4]
 8012892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801289a:	f7ed ff4d 	bl	8000738 <__aeabi_uldivmod>
 801289e:	4602      	mov	r2, r0
 80128a0:	460b      	mov	r3, r1
 80128a2:	4610      	mov	r0, r2
 80128a4:	4619      	mov	r1, r3
 80128a6:	f04f 0200 	mov.w	r2, #0
 80128aa:	f04f 0300 	mov.w	r3, #0
 80128ae:	020b      	lsls	r3, r1, #8
 80128b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80128b4:	0202      	lsls	r2, r0, #8
 80128b6:	6979      	ldr	r1, [r7, #20]
 80128b8:	6849      	ldr	r1, [r1, #4]
 80128ba:	0849      	lsrs	r1, r1, #1
 80128bc:	2000      	movs	r0, #0
 80128be:	460c      	mov	r4, r1
 80128c0:	4605      	mov	r5, r0
 80128c2:	eb12 0804 	adds.w	r8, r2, r4
 80128c6:	eb43 0905 	adc.w	r9, r3, r5
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	2200      	movs	r2, #0
 80128d0:	469a      	mov	sl, r3
 80128d2:	4693      	mov	fp, r2
 80128d4:	4652      	mov	r2, sl
 80128d6:	465b      	mov	r3, fp
 80128d8:	4640      	mov	r0, r8
 80128da:	4649      	mov	r1, r9
 80128dc:	f7ed ff2c 	bl	8000738 <__aeabi_uldivmod>
 80128e0:	4602      	mov	r2, r0
 80128e2:	460b      	mov	r3, r1
 80128e4:	4613      	mov	r3, r2
 80128e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80128e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128ee:	d308      	bcc.n	8012902 <UART_SetConfig+0x9a2>
 80128f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80128f6:	d204      	bcs.n	8012902 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128fe:	60da      	str	r2, [r3, #12]
 8012900:	e17f      	b.n	8012c02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012902:	2301      	movs	r3, #1
 8012904:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012908:	e17b      	b.n	8012c02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	69db      	ldr	r3, [r3, #28]
 801290e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012912:	f040 80bd 	bne.w	8012a90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012916:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801291a:	2b20      	cmp	r3, #32
 801291c:	dc48      	bgt.n	80129b0 <UART_SetConfig+0xa50>
 801291e:	2b00      	cmp	r3, #0
 8012920:	db7b      	blt.n	8012a1a <UART_SetConfig+0xaba>
 8012922:	2b20      	cmp	r3, #32
 8012924:	d879      	bhi.n	8012a1a <UART_SetConfig+0xaba>
 8012926:	a201      	add	r2, pc, #4	@ (adr r2, 801292c <UART_SetConfig+0x9cc>)
 8012928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801292c:	080129b7 	.word	0x080129b7
 8012930:	080129bf 	.word	0x080129bf
 8012934:	08012a1b 	.word	0x08012a1b
 8012938:	08012a1b 	.word	0x08012a1b
 801293c:	080129c7 	.word	0x080129c7
 8012940:	08012a1b 	.word	0x08012a1b
 8012944:	08012a1b 	.word	0x08012a1b
 8012948:	08012a1b 	.word	0x08012a1b
 801294c:	080129d7 	.word	0x080129d7
 8012950:	08012a1b 	.word	0x08012a1b
 8012954:	08012a1b 	.word	0x08012a1b
 8012958:	08012a1b 	.word	0x08012a1b
 801295c:	08012a1b 	.word	0x08012a1b
 8012960:	08012a1b 	.word	0x08012a1b
 8012964:	08012a1b 	.word	0x08012a1b
 8012968:	08012a1b 	.word	0x08012a1b
 801296c:	080129e7 	.word	0x080129e7
 8012970:	08012a1b 	.word	0x08012a1b
 8012974:	08012a1b 	.word	0x08012a1b
 8012978:	08012a1b 	.word	0x08012a1b
 801297c:	08012a1b 	.word	0x08012a1b
 8012980:	08012a1b 	.word	0x08012a1b
 8012984:	08012a1b 	.word	0x08012a1b
 8012988:	08012a1b 	.word	0x08012a1b
 801298c:	08012a1b 	.word	0x08012a1b
 8012990:	08012a1b 	.word	0x08012a1b
 8012994:	08012a1b 	.word	0x08012a1b
 8012998:	08012a1b 	.word	0x08012a1b
 801299c:	08012a1b 	.word	0x08012a1b
 80129a0:	08012a1b 	.word	0x08012a1b
 80129a4:	08012a1b 	.word	0x08012a1b
 80129a8:	08012a1b 	.word	0x08012a1b
 80129ac:	08012a0d 	.word	0x08012a0d
 80129b0:	2b40      	cmp	r3, #64	@ 0x40
 80129b2:	d02e      	beq.n	8012a12 <UART_SetConfig+0xab2>
 80129b4:	e031      	b.n	8012a1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80129b6:	f7fa f917 	bl	800cbe8 <HAL_RCC_GetPCLK1Freq>
 80129ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80129bc:	e033      	b.n	8012a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80129be:	f7fa f929 	bl	800cc14 <HAL_RCC_GetPCLK2Freq>
 80129c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80129c4:	e02f      	b.n	8012a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80129c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fb ffc0 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80129d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129d4:	e027      	b.n	8012a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80129d6:	f107 0318 	add.w	r3, r7, #24
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fc f90c 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80129e0:	69fb      	ldr	r3, [r7, #28]
 80129e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80129e4:	e01f      	b.n	8012a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80129e6:	4b69      	ldr	r3, [pc, #420]	@ (8012b8c <UART_SetConfig+0xc2c>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f003 0320 	and.w	r3, r3, #32
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d009      	beq.n	8012a06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80129f2:	4b66      	ldr	r3, [pc, #408]	@ (8012b8c <UART_SetConfig+0xc2c>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	08db      	lsrs	r3, r3, #3
 80129f8:	f003 0303 	and.w	r3, r3, #3
 80129fc:	4a64      	ldr	r2, [pc, #400]	@ (8012b90 <UART_SetConfig+0xc30>)
 80129fe:	fa22 f303 	lsr.w	r3, r2, r3
 8012a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012a04:	e00f      	b.n	8012a26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012a06:	4b62      	ldr	r3, [pc, #392]	@ (8012b90 <UART_SetConfig+0xc30>)
 8012a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a0a:	e00c      	b.n	8012a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012a0c:	4b61      	ldr	r3, [pc, #388]	@ (8012b94 <UART_SetConfig+0xc34>)
 8012a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a10:	e009      	b.n	8012a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012a12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012a18:	e005      	b.n	8012a26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f000 80ea 	beq.w	8012c02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a32:	4a55      	ldr	r2, [pc, #340]	@ (8012b88 <UART_SetConfig+0xc28>)
 8012a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a38:	461a      	mov	r2, r3
 8012a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a40:	005a      	lsls	r2, r3, #1
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	685b      	ldr	r3, [r3, #4]
 8012a46:	085b      	lsrs	r3, r3, #1
 8012a48:	441a      	add	r2, r3
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a56:	2b0f      	cmp	r3, #15
 8012a58:	d916      	bls.n	8012a88 <UART_SetConfig+0xb28>
 8012a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a60:	d212      	bcs.n	8012a88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a64:	b29b      	uxth	r3, r3
 8012a66:	f023 030f 	bic.w	r3, r3, #15
 8012a6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a6e:	085b      	lsrs	r3, r3, #1
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	f003 0307 	and.w	r3, r3, #7
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012a7a:	4313      	orrs	r3, r2
 8012a7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012a84:	60da      	str	r2, [r3, #12]
 8012a86:	e0bc      	b.n	8012c02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012a8e:	e0b8      	b.n	8012c02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012a90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012a94:	2b20      	cmp	r3, #32
 8012a96:	dc4b      	bgt.n	8012b30 <UART_SetConfig+0xbd0>
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f2c0 8087 	blt.w	8012bac <UART_SetConfig+0xc4c>
 8012a9e:	2b20      	cmp	r3, #32
 8012aa0:	f200 8084 	bhi.w	8012bac <UART_SetConfig+0xc4c>
 8012aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8012aac <UART_SetConfig+0xb4c>)
 8012aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aaa:	bf00      	nop
 8012aac:	08012b37 	.word	0x08012b37
 8012ab0:	08012b3f 	.word	0x08012b3f
 8012ab4:	08012bad 	.word	0x08012bad
 8012ab8:	08012bad 	.word	0x08012bad
 8012abc:	08012b47 	.word	0x08012b47
 8012ac0:	08012bad 	.word	0x08012bad
 8012ac4:	08012bad 	.word	0x08012bad
 8012ac8:	08012bad 	.word	0x08012bad
 8012acc:	08012b57 	.word	0x08012b57
 8012ad0:	08012bad 	.word	0x08012bad
 8012ad4:	08012bad 	.word	0x08012bad
 8012ad8:	08012bad 	.word	0x08012bad
 8012adc:	08012bad 	.word	0x08012bad
 8012ae0:	08012bad 	.word	0x08012bad
 8012ae4:	08012bad 	.word	0x08012bad
 8012ae8:	08012bad 	.word	0x08012bad
 8012aec:	08012b67 	.word	0x08012b67
 8012af0:	08012bad 	.word	0x08012bad
 8012af4:	08012bad 	.word	0x08012bad
 8012af8:	08012bad 	.word	0x08012bad
 8012afc:	08012bad 	.word	0x08012bad
 8012b00:	08012bad 	.word	0x08012bad
 8012b04:	08012bad 	.word	0x08012bad
 8012b08:	08012bad 	.word	0x08012bad
 8012b0c:	08012bad 	.word	0x08012bad
 8012b10:	08012bad 	.word	0x08012bad
 8012b14:	08012bad 	.word	0x08012bad
 8012b18:	08012bad 	.word	0x08012bad
 8012b1c:	08012bad 	.word	0x08012bad
 8012b20:	08012bad 	.word	0x08012bad
 8012b24:	08012bad 	.word	0x08012bad
 8012b28:	08012bad 	.word	0x08012bad
 8012b2c:	08012b9f 	.word	0x08012b9f
 8012b30:	2b40      	cmp	r3, #64	@ 0x40
 8012b32:	d037      	beq.n	8012ba4 <UART_SetConfig+0xc44>
 8012b34:	e03a      	b.n	8012bac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012b36:	f7fa f857 	bl	800cbe8 <HAL_RCC_GetPCLK1Freq>
 8012b3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012b3c:	e03c      	b.n	8012bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012b3e:	f7fa f869 	bl	800cc14 <HAL_RCC_GetPCLK2Freq>
 8012b42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012b44:	e038      	b.n	8012bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7fb ff00 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b54:	e030      	b.n	8012bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012b56:	f107 0318 	add.w	r3, r7, #24
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7fc f84c 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b64:	e028      	b.n	8012bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b66:	4b09      	ldr	r3, [pc, #36]	@ (8012b8c <UART_SetConfig+0xc2c>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f003 0320 	and.w	r3, r3, #32
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d012      	beq.n	8012b98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012b72:	4b06      	ldr	r3, [pc, #24]	@ (8012b8c <UART_SetConfig+0xc2c>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	08db      	lsrs	r3, r3, #3
 8012b78:	f003 0303 	and.w	r3, r3, #3
 8012b7c:	4a04      	ldr	r2, [pc, #16]	@ (8012b90 <UART_SetConfig+0xc30>)
 8012b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8012b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012b84:	e018      	b.n	8012bb8 <UART_SetConfig+0xc58>
 8012b86:	bf00      	nop
 8012b88:	08019ec0 	.word	0x08019ec0
 8012b8c:	58024400 	.word	0x58024400
 8012b90:	03d09000 	.word	0x03d09000
 8012b94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012b98:	4b24      	ldr	r3, [pc, #144]	@ (8012c2c <UART_SetConfig+0xccc>)
 8012b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012b9c:	e00c      	b.n	8012bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012b9e:	4b24      	ldr	r3, [pc, #144]	@ (8012c30 <UART_SetConfig+0xcd0>)
 8012ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ba2:	e009      	b.n	8012bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012ba4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012baa:	e005      	b.n	8012bb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012bac:	2300      	movs	r3, #0
 8012bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012bb6:	bf00      	nop
    }

    if (pclk != 0U)
 8012bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d021      	beq.n	8012c02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8012c34 <UART_SetConfig+0xcd4>)
 8012bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012bc8:	461a      	mov	r2, r3
 8012bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012bcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	085b      	lsrs	r3, r3, #1
 8012bd6:	441a      	add	r2, r3
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012be0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012be4:	2b0f      	cmp	r3, #15
 8012be6:	d909      	bls.n	8012bfc <UART_SetConfig+0xc9c>
 8012be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bee:	d205      	bcs.n	8012bfc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	60da      	str	r2, [r3, #12]
 8012bfa:	e002      	b.n	8012c02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012c02:	697b      	ldr	r3, [r7, #20]
 8012c04:	2201      	movs	r2, #1
 8012c06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	2200      	movs	r2, #0
 8012c16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8012c1e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3748      	adds	r7, #72	@ 0x48
 8012c26:	46bd      	mov	sp, r7
 8012c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012c2c:	03d09000 	.word	0x03d09000
 8012c30:	003d0900 	.word	0x003d0900
 8012c34:	08019ec0 	.word	0x08019ec0

08012c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b083      	sub	sp, #12
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c44:	f003 0308 	and.w	r3, r3, #8
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d00a      	beq.n	8012c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	685b      	ldr	r3, [r3, #4]
 8012c52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	430a      	orrs	r2, r1
 8012c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c66:	f003 0301 	and.w	r3, r3, #1
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d00a      	beq.n	8012c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	430a      	orrs	r2, r1
 8012c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c88:	f003 0302 	and.w	r3, r3, #2
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d00a      	beq.n	8012ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	430a      	orrs	r2, r1
 8012ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012caa:	f003 0304 	and.w	r3, r3, #4
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d00a      	beq.n	8012cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	430a      	orrs	r2, r1
 8012cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ccc:	f003 0310 	and.w	r3, r3, #16
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d00a      	beq.n	8012cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	689b      	ldr	r3, [r3, #8]
 8012cda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	430a      	orrs	r2, r1
 8012ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cee:	f003 0320 	and.w	r3, r3, #32
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d00a      	beq.n	8012d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	689b      	ldr	r3, [r3, #8]
 8012cfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	430a      	orrs	r2, r1
 8012d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d01a      	beq.n	8012d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	430a      	orrs	r2, r1
 8012d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012d36:	d10a      	bne.n	8012d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	685b      	ldr	r3, [r3, #4]
 8012d3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	430a      	orrs	r2, r1
 8012d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d00a      	beq.n	8012d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	430a      	orrs	r2, r1
 8012d6e:	605a      	str	r2, [r3, #4]
  }
}
 8012d70:	bf00      	nop
 8012d72:	370c      	adds	r7, #12
 8012d74:	46bd      	mov	sp, r7
 8012d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7a:	4770      	bx	lr

08012d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b098      	sub	sp, #96	@ 0x60
 8012d80:	af02      	add	r7, sp, #8
 8012d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012d8c:	f7f7 fe6a 	bl	800aa64 <HAL_GetTick>
 8012d90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f003 0308 	and.w	r3, r3, #8
 8012d9c:	2b08      	cmp	r3, #8
 8012d9e:	d12f      	bne.n	8012e00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012da0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012da4:	9300      	str	r3, [sp, #0]
 8012da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012da8:	2200      	movs	r2, #0
 8012daa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f000 f88e 	bl	8012ed0 <UART_WaitOnFlagUntilTimeout>
 8012db4:	4603      	mov	r3, r0
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d022      	beq.n	8012e00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc2:	e853 3f00 	ldrex	r3, [r3]
 8012dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8012dda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ddc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012de0:	e841 2300 	strex	r3, r2, [r1]
 8012de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d1e6      	bne.n	8012dba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2220      	movs	r2, #32
 8012df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2200      	movs	r2, #0
 8012df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	e063      	b.n	8012ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f003 0304 	and.w	r3, r3, #4
 8012e0a:	2b04      	cmp	r3, #4
 8012e0c:	d149      	bne.n	8012ea2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012e0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012e12:	9300      	str	r3, [sp, #0]
 8012e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e16:	2200      	movs	r2, #0
 8012e18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f000 f857 	bl	8012ed0 <UART_WaitOnFlagUntilTimeout>
 8012e22:	4603      	mov	r3, r0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d03c      	beq.n	8012ea2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e30:	e853 3f00 	ldrex	r3, [r3]
 8012e34:	623b      	str	r3, [r7, #32]
   return(result);
 8012e36:	6a3b      	ldr	r3, [r7, #32]
 8012e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	461a      	mov	r2, r3
 8012e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e46:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e4e:	e841 2300 	strex	r3, r2, [r1]
 8012e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d1e6      	bne.n	8012e28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	3308      	adds	r3, #8
 8012e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	e853 3f00 	ldrex	r3, [r3]
 8012e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	f023 0301 	bic.w	r3, r3, #1
 8012e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	3308      	adds	r3, #8
 8012e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012e7a:	61fa      	str	r2, [r7, #28]
 8012e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e7e:	69b9      	ldr	r1, [r7, #24]
 8012e80:	69fa      	ldr	r2, [r7, #28]
 8012e82:	e841 2300 	strex	r3, r2, [r1]
 8012e86:	617b      	str	r3, [r7, #20]
   return(result);
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d1e5      	bne.n	8012e5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2220      	movs	r2, #32
 8012e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012e9e:	2303      	movs	r3, #3
 8012ea0:	e012      	b.n	8012ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2220      	movs	r2, #32
 8012ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2220      	movs	r2, #32
 8012eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012ec6:	2300      	movs	r3, #0
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3758      	adds	r7, #88	@ 0x58
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b084      	sub	sp, #16
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	60f8      	str	r0, [r7, #12]
 8012ed8:	60b9      	str	r1, [r7, #8]
 8012eda:	603b      	str	r3, [r7, #0]
 8012edc:	4613      	mov	r3, r2
 8012ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ee0:	e04f      	b.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee8:	d04b      	beq.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012eea:	f7f7 fdbb 	bl	800aa64 <HAL_GetTick>
 8012eee:	4602      	mov	r2, r0
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	1ad3      	subs	r3, r2, r3
 8012ef4:	69ba      	ldr	r2, [r7, #24]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d302      	bcc.n	8012f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8012efa:	69bb      	ldr	r3, [r7, #24]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d101      	bne.n	8012f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012f00:	2303      	movs	r3, #3
 8012f02:	e04e      	b.n	8012fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	f003 0304 	and.w	r3, r3, #4
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d037      	beq.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	2b80      	cmp	r3, #128	@ 0x80
 8012f16:	d034      	beq.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	2b40      	cmp	r3, #64	@ 0x40
 8012f1c:	d031      	beq.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	69db      	ldr	r3, [r3, #28]
 8012f24:	f003 0308 	and.w	r3, r3, #8
 8012f28:	2b08      	cmp	r3, #8
 8012f2a:	d110      	bne.n	8012f4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2208      	movs	r2, #8
 8012f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	f000 f839 	bl	8012fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	2208      	movs	r2, #8
 8012f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	2200      	movs	r2, #0
 8012f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	e029      	b.n	8012fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	69db      	ldr	r3, [r3, #28]
 8012f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012f5c:	d111      	bne.n	8012f82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012f68:	68f8      	ldr	r0, [r7, #12]
 8012f6a:	f000 f81f 	bl	8012fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2220      	movs	r2, #32
 8012f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8012f7e:	2303      	movs	r3, #3
 8012f80:	e00f      	b.n	8012fa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	69da      	ldr	r2, [r3, #28]
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	4013      	ands	r3, r2
 8012f8c:	68ba      	ldr	r2, [r7, #8]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	bf0c      	ite	eq
 8012f92:	2301      	moveq	r3, #1
 8012f94:	2300      	movne	r3, #0
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	461a      	mov	r2, r3
 8012f9a:	79fb      	ldrb	r3, [r7, #7]
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d0a0      	beq.n	8012ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012fa0:	2300      	movs	r3, #0
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3710      	adds	r7, #16
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}
	...

08012fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b095      	sub	sp, #84	@ 0x54
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fbc:	e853 3f00 	ldrex	r3, [r3]
 8012fc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8012fd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012fd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012fda:	e841 2300 	strex	r3, r2, [r1]
 8012fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d1e6      	bne.n	8012fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	3308      	adds	r3, #8
 8012fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fee:	6a3b      	ldr	r3, [r7, #32]
 8012ff0:	e853 3f00 	ldrex	r3, [r3]
 8012ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8012ff6:	69fa      	ldr	r2, [r7, #28]
 8012ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8013074 <UART_EndRxTransfer+0xc8>)
 8012ffa:	4013      	ands	r3, r2
 8012ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	3308      	adds	r3, #8
 8013004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013008:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801300a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801300c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801300e:	e841 2300 	strex	r3, r2, [r1]
 8013012:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013016:	2b00      	cmp	r3, #0
 8013018:	d1e5      	bne.n	8012fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801301e:	2b01      	cmp	r3, #1
 8013020:	d118      	bne.n	8013054 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	e853 3f00 	ldrex	r3, [r3]
 801302e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	f023 0310 	bic.w	r3, r3, #16
 8013036:	647b      	str	r3, [r7, #68]	@ 0x44
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	461a      	mov	r2, r3
 801303e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013040:	61bb      	str	r3, [r7, #24]
 8013042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013044:	6979      	ldr	r1, [r7, #20]
 8013046:	69ba      	ldr	r2, [r7, #24]
 8013048:	e841 2300 	strex	r3, r2, [r1]
 801304c:	613b      	str	r3, [r7, #16]
   return(result);
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d1e6      	bne.n	8013022 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2220      	movs	r2, #32
 8013058:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2200      	movs	r2, #0
 8013060:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2200      	movs	r2, #0
 8013066:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013068:	bf00      	nop
 801306a:	3754      	adds	r7, #84	@ 0x54
 801306c:	46bd      	mov	sp, r7
 801306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013072:	4770      	bx	lr
 8013074:	effffffe 	.word	0xeffffffe

08013078 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013078:	b480      	push	{r7}
 801307a:	b085      	sub	sp, #20
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013086:	2b01      	cmp	r3, #1
 8013088:	d101      	bne.n	801308e <HAL_UARTEx_DisableFifoMode+0x16>
 801308a:	2302      	movs	r3, #2
 801308c:	e027      	b.n	80130de <HAL_UARTEx_DisableFifoMode+0x66>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2201      	movs	r2, #1
 8013092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2224      	movs	r2, #36	@ 0x24
 801309a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	f022 0201 	bic.w	r2, r2, #1
 80130b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80130bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2200      	movs	r2, #0
 80130c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2220      	movs	r2, #32
 80130d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80130dc:	2300      	movs	r3, #0
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3714      	adds	r7, #20
 80130e2:	46bd      	mov	sp, r7
 80130e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e8:	4770      	bx	lr

080130ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80130ea:	b580      	push	{r7, lr}
 80130ec:	b084      	sub	sp, #16
 80130ee:	af00      	add	r7, sp, #0
 80130f0:	6078      	str	r0, [r7, #4]
 80130f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80130fa:	2b01      	cmp	r3, #1
 80130fc:	d101      	bne.n	8013102 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80130fe:	2302      	movs	r3, #2
 8013100:	e02d      	b.n	801315e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2201      	movs	r2, #1
 8013106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2224      	movs	r2, #36	@ 0x24
 801310e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f022 0201 	bic.w	r2, r2, #1
 8013128:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	683a      	ldr	r2, [r7, #0]
 801313a:	430a      	orrs	r2, r1
 801313c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 f850 	bl	80131e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2220      	movs	r2, #32
 8013150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2200      	movs	r2, #0
 8013158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801315c:	2300      	movs	r3, #0
}
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013176:	2b01      	cmp	r3, #1
 8013178:	d101      	bne.n	801317e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801317a:	2302      	movs	r3, #2
 801317c:	e02d      	b.n	80131da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2201      	movs	r2, #1
 8013182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2224      	movs	r2, #36	@ 0x24
 801318a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f022 0201 	bic.w	r2, r2, #1
 80131a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	683a      	ldr	r2, [r7, #0]
 80131b6:	430a      	orrs	r2, r1
 80131b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f000 f812 	bl	80131e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	68fa      	ldr	r2, [r7, #12]
 80131c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2220      	movs	r2, #32
 80131cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2200      	movs	r2, #0
 80131d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80131d8:	2300      	movs	r3, #0
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3710      	adds	r7, #16
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
	...

080131e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b085      	sub	sp, #20
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d108      	bne.n	8013206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2201      	movs	r2, #1
 80131f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2201      	movs	r2, #1
 8013200:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013204:	e031      	b.n	801326a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013206:	2310      	movs	r3, #16
 8013208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801320a:	2310      	movs	r3, #16
 801320c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	689b      	ldr	r3, [r3, #8]
 8013214:	0e5b      	lsrs	r3, r3, #25
 8013216:	b2db      	uxtb	r3, r3
 8013218:	f003 0307 	and.w	r3, r3, #7
 801321c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	0f5b      	lsrs	r3, r3, #29
 8013226:	b2db      	uxtb	r3, r3
 8013228:	f003 0307 	and.w	r3, r3, #7
 801322c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801322e:	7bbb      	ldrb	r3, [r7, #14]
 8013230:	7b3a      	ldrb	r2, [r7, #12]
 8013232:	4911      	ldr	r1, [pc, #68]	@ (8013278 <UARTEx_SetNbDataToProcess+0x94>)
 8013234:	5c8a      	ldrb	r2, [r1, r2]
 8013236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801323a:	7b3a      	ldrb	r2, [r7, #12]
 801323c:	490f      	ldr	r1, [pc, #60]	@ (801327c <UARTEx_SetNbDataToProcess+0x98>)
 801323e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013240:	fb93 f3f2 	sdiv	r3, r3, r2
 8013244:	b29a      	uxth	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801324c:	7bfb      	ldrb	r3, [r7, #15]
 801324e:	7b7a      	ldrb	r2, [r7, #13]
 8013250:	4909      	ldr	r1, [pc, #36]	@ (8013278 <UARTEx_SetNbDataToProcess+0x94>)
 8013252:	5c8a      	ldrb	r2, [r1, r2]
 8013254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013258:	7b7a      	ldrb	r2, [r7, #13]
 801325a:	4908      	ldr	r1, [pc, #32]	@ (801327c <UARTEx_SetNbDataToProcess+0x98>)
 801325c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801325e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013262:	b29a      	uxth	r2, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801326a:	bf00      	nop
 801326c:	3714      	adds	r7, #20
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	08019ed8 	.word	0x08019ed8
 801327c:	08019ee0 	.word	0x08019ee0

08013280 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d101      	bne.n	8013292 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 801328e:	2301      	movs	r3, #1
 8013290:	e03c      	b.n	801330c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8013298:	b2db      	uxtb	r3, r3
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2200      	movs	r2, #0
 80132a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f7f7 f8a8 	bl	800a3fc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2202      	movs	r2, #2
 80132b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f022 0201 	bic.w	r2, r2, #1
 80132c2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 f85b 	bl	8013380 <USART_SetConfig>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d101      	bne.n	80132d4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
 80132d2:	e01b      	b.n	801330c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	685a      	ldr	r2, [r3, #4]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80132e2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	689a      	ldr	r2, [r3, #8]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80132f2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	f042 0201 	orr.w	r2, r2, #1
 8013302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f000 fddd 	bl	8013ec4 <USART_CheckIdleState>
 801330a:	4603      	mov	r3, r0
}
 801330c:	4618      	mov	r0, r3
 801330e:	3708      	adds	r7, #8
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}

08013314 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	af00      	add	r7, sp, #0
 801331a:	60f8      	str	r0, [r7, #12]
 801331c:	60b9      	str	r1, [r7, #8]
 801331e:	603b      	str	r3, [r7, #0]
 8013320:	4613      	mov	r3, r2
 8013322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8013324:	e018      	b.n	8013358 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013326:	69bb      	ldr	r3, [r7, #24]
 8013328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801332c:	d014      	beq.n	8013358 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801332e:	f7f7 fb99 	bl	800aa64 <HAL_GetTick>
 8013332:	4602      	mov	r2, r0
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	69ba      	ldr	r2, [r7, #24]
 801333a:	429a      	cmp	r2, r3
 801333c:	d302      	bcc.n	8013344 <USART_WaitOnFlagUntilTimeout+0x30>
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d109      	bne.n	8013358 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	2201      	movs	r2, #1
 8013348:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2200      	movs	r2, #0
 8013350:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8013354:	2303      	movs	r3, #3
 8013356:	e00f      	b.n	8013378 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	69da      	ldr	r2, [r3, #28]
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	4013      	ands	r3, r2
 8013362:	68ba      	ldr	r2, [r7, #8]
 8013364:	429a      	cmp	r2, r3
 8013366:	bf0c      	ite	eq
 8013368:	2301      	moveq	r3, #1
 801336a:	2300      	movne	r3, #0
 801336c:	b2db      	uxtb	r3, r3
 801336e:	461a      	mov	r2, r3
 8013370:	79fb      	ldrb	r3, [r7, #7]
 8013372:	429a      	cmp	r2, r3
 8013374:	d0d7      	beq.n	8013326 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013376:	2300      	movs	r3, #0
}
 8013378:	4618      	mov	r0, r3
 801337a:	3710      	adds	r7, #16
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}

08013380 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b08e      	sub	sp, #56	@ 0x38
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8013388:	2300      	movs	r3, #0
 801338a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 801338e:	2300      	movs	r3, #0
 8013390:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	689a      	ldr	r2, [r3, #8]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	691b      	ldr	r3, [r3, #16]
 801339a:	431a      	orrs	r2, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	695b      	ldr	r3, [r3, #20]
 80133a0:	4313      	orrs	r3, r2
 80133a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80133a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	4bc9      	ldr	r3, [pc, #804]	@ (80136d4 <USART_SetConfig+0x354>)
 80133b0:	4013      	ands	r3, r2
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	6812      	ldr	r2, [r2, #0]
 80133b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80133b8:	430b      	orrs	r3, r1
 80133ba:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80133bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80133c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6a1b      	ldr	r3, [r3, #32]
 80133c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133c8:	4313      	orrs	r3, r2
 80133ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	699a      	ldr	r2, [r3, #24]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	69db      	ldr	r3, [r3, #28]
 80133d4:	4313      	orrs	r3, r2
 80133d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133d8:	4313      	orrs	r3, r2
 80133da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133e2:	4313      	orrs	r3, r2
 80133e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	685a      	ldr	r2, [r3, #4]
 80133ec:	4bba      	ldr	r3, [pc, #744]	@ (80136d8 <USART_SetConfig+0x358>)
 80133ee:	4013      	ands	r3, r2
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	6812      	ldr	r2, [r2, #0]
 80133f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80133f6:	430b      	orrs	r3, r1
 80133f8:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013400:	f023 010f 	bic.w	r1, r3, #15
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	430a      	orrs	r2, r1
 801340e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	4ab1      	ldr	r2, [pc, #708]	@ (80136dc <USART_SetConfig+0x35c>)
 8013416:	4293      	cmp	r3, r2
 8013418:	d176      	bne.n	8013508 <USART_SetConfig+0x188>
 801341a:	4bb1      	ldr	r3, [pc, #708]	@ (80136e0 <USART_SetConfig+0x360>)
 801341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801341e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013422:	2b28      	cmp	r3, #40	@ 0x28
 8013424:	d86c      	bhi.n	8013500 <USART_SetConfig+0x180>
 8013426:	a201      	add	r2, pc, #4	@ (adr r2, 801342c <USART_SetConfig+0xac>)
 8013428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801342c:	080134d1 	.word	0x080134d1
 8013430:	08013501 	.word	0x08013501
 8013434:	08013501 	.word	0x08013501
 8013438:	08013501 	.word	0x08013501
 801343c:	08013501 	.word	0x08013501
 8013440:	08013501 	.word	0x08013501
 8013444:	08013501 	.word	0x08013501
 8013448:	08013501 	.word	0x08013501
 801344c:	080134d9 	.word	0x080134d9
 8013450:	08013501 	.word	0x08013501
 8013454:	08013501 	.word	0x08013501
 8013458:	08013501 	.word	0x08013501
 801345c:	08013501 	.word	0x08013501
 8013460:	08013501 	.word	0x08013501
 8013464:	08013501 	.word	0x08013501
 8013468:	08013501 	.word	0x08013501
 801346c:	080134e1 	.word	0x080134e1
 8013470:	08013501 	.word	0x08013501
 8013474:	08013501 	.word	0x08013501
 8013478:	08013501 	.word	0x08013501
 801347c:	08013501 	.word	0x08013501
 8013480:	08013501 	.word	0x08013501
 8013484:	08013501 	.word	0x08013501
 8013488:	08013501 	.word	0x08013501
 801348c:	080134e9 	.word	0x080134e9
 8013490:	08013501 	.word	0x08013501
 8013494:	08013501 	.word	0x08013501
 8013498:	08013501 	.word	0x08013501
 801349c:	08013501 	.word	0x08013501
 80134a0:	08013501 	.word	0x08013501
 80134a4:	08013501 	.word	0x08013501
 80134a8:	08013501 	.word	0x08013501
 80134ac:	080134f1 	.word	0x080134f1
 80134b0:	08013501 	.word	0x08013501
 80134b4:	08013501 	.word	0x08013501
 80134b8:	08013501 	.word	0x08013501
 80134bc:	08013501 	.word	0x08013501
 80134c0:	08013501 	.word	0x08013501
 80134c4:	08013501 	.word	0x08013501
 80134c8:	08013501 	.word	0x08013501
 80134cc:	080134f9 	.word	0x080134f9
 80134d0:	2301      	movs	r3, #1
 80134d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80134d6:	e18e      	b.n	80137f6 <USART_SetConfig+0x476>
 80134d8:	2302      	movs	r3, #2
 80134da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80134de:	e18a      	b.n	80137f6 <USART_SetConfig+0x476>
 80134e0:	2304      	movs	r3, #4
 80134e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80134e6:	e186      	b.n	80137f6 <USART_SetConfig+0x476>
 80134e8:	2308      	movs	r3, #8
 80134ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80134ee:	e182      	b.n	80137f6 <USART_SetConfig+0x476>
 80134f0:	2310      	movs	r3, #16
 80134f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80134f6:	e17e      	b.n	80137f6 <USART_SetConfig+0x476>
 80134f8:	2320      	movs	r3, #32
 80134fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80134fe:	e17a      	b.n	80137f6 <USART_SetConfig+0x476>
 8013500:	2340      	movs	r3, #64	@ 0x40
 8013502:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013506:	e176      	b.n	80137f6 <USART_SetConfig+0x476>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	4a75      	ldr	r2, [pc, #468]	@ (80136e4 <USART_SetConfig+0x364>)
 801350e:	4293      	cmp	r3, r2
 8013510:	d130      	bne.n	8013574 <USART_SetConfig+0x1f4>
 8013512:	4b73      	ldr	r3, [pc, #460]	@ (80136e0 <USART_SetConfig+0x360>)
 8013514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013516:	f003 0307 	and.w	r3, r3, #7
 801351a:	2b05      	cmp	r3, #5
 801351c:	d826      	bhi.n	801356c <USART_SetConfig+0x1ec>
 801351e:	a201      	add	r2, pc, #4	@ (adr r2, 8013524 <USART_SetConfig+0x1a4>)
 8013520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013524:	0801353d 	.word	0x0801353d
 8013528:	08013545 	.word	0x08013545
 801352c:	0801354d 	.word	0x0801354d
 8013530:	08013555 	.word	0x08013555
 8013534:	0801355d 	.word	0x0801355d
 8013538:	08013565 	.word	0x08013565
 801353c:	2300      	movs	r3, #0
 801353e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013542:	e158      	b.n	80137f6 <USART_SetConfig+0x476>
 8013544:	2302      	movs	r3, #2
 8013546:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801354a:	e154      	b.n	80137f6 <USART_SetConfig+0x476>
 801354c:	2304      	movs	r3, #4
 801354e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013552:	e150      	b.n	80137f6 <USART_SetConfig+0x476>
 8013554:	2308      	movs	r3, #8
 8013556:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801355a:	e14c      	b.n	80137f6 <USART_SetConfig+0x476>
 801355c:	2310      	movs	r3, #16
 801355e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013562:	e148      	b.n	80137f6 <USART_SetConfig+0x476>
 8013564:	2320      	movs	r3, #32
 8013566:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801356a:	e144      	b.n	80137f6 <USART_SetConfig+0x476>
 801356c:	2340      	movs	r3, #64	@ 0x40
 801356e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013572:	e140      	b.n	80137f6 <USART_SetConfig+0x476>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	4a5b      	ldr	r2, [pc, #364]	@ (80136e8 <USART_SetConfig+0x368>)
 801357a:	4293      	cmp	r3, r2
 801357c:	d130      	bne.n	80135e0 <USART_SetConfig+0x260>
 801357e:	4b58      	ldr	r3, [pc, #352]	@ (80136e0 <USART_SetConfig+0x360>)
 8013580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013582:	f003 0307 	and.w	r3, r3, #7
 8013586:	2b05      	cmp	r3, #5
 8013588:	d826      	bhi.n	80135d8 <USART_SetConfig+0x258>
 801358a:	a201      	add	r2, pc, #4	@ (adr r2, 8013590 <USART_SetConfig+0x210>)
 801358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013590:	080135a9 	.word	0x080135a9
 8013594:	080135b1 	.word	0x080135b1
 8013598:	080135b9 	.word	0x080135b9
 801359c:	080135c1 	.word	0x080135c1
 80135a0:	080135c9 	.word	0x080135c9
 80135a4:	080135d1 	.word	0x080135d1
 80135a8:	2300      	movs	r3, #0
 80135aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80135ae:	e122      	b.n	80137f6 <USART_SetConfig+0x476>
 80135b0:	2302      	movs	r3, #2
 80135b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80135b6:	e11e      	b.n	80137f6 <USART_SetConfig+0x476>
 80135b8:	2304      	movs	r3, #4
 80135ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80135be:	e11a      	b.n	80137f6 <USART_SetConfig+0x476>
 80135c0:	2308      	movs	r3, #8
 80135c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80135c6:	e116      	b.n	80137f6 <USART_SetConfig+0x476>
 80135c8:	2310      	movs	r3, #16
 80135ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80135ce:	e112      	b.n	80137f6 <USART_SetConfig+0x476>
 80135d0:	2320      	movs	r3, #32
 80135d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80135d6:	e10e      	b.n	80137f6 <USART_SetConfig+0x476>
 80135d8:	2340      	movs	r3, #64	@ 0x40
 80135da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80135de:	e10a      	b.n	80137f6 <USART_SetConfig+0x476>
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	4a41      	ldr	r2, [pc, #260]	@ (80136ec <USART_SetConfig+0x36c>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	f040 8086 	bne.w	80136f8 <USART_SetConfig+0x378>
 80135ec:	4b3c      	ldr	r3, [pc, #240]	@ (80136e0 <USART_SetConfig+0x360>)
 80135ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80135f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80135f4:	2b28      	cmp	r3, #40	@ 0x28
 80135f6:	d87b      	bhi.n	80136f0 <USART_SetConfig+0x370>
 80135f8:	a201      	add	r2, pc, #4	@ (adr r2, 8013600 <USART_SetConfig+0x280>)
 80135fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135fe:	bf00      	nop
 8013600:	080136a5 	.word	0x080136a5
 8013604:	080136f1 	.word	0x080136f1
 8013608:	080136f1 	.word	0x080136f1
 801360c:	080136f1 	.word	0x080136f1
 8013610:	080136f1 	.word	0x080136f1
 8013614:	080136f1 	.word	0x080136f1
 8013618:	080136f1 	.word	0x080136f1
 801361c:	080136f1 	.word	0x080136f1
 8013620:	080136ad 	.word	0x080136ad
 8013624:	080136f1 	.word	0x080136f1
 8013628:	080136f1 	.word	0x080136f1
 801362c:	080136f1 	.word	0x080136f1
 8013630:	080136f1 	.word	0x080136f1
 8013634:	080136f1 	.word	0x080136f1
 8013638:	080136f1 	.word	0x080136f1
 801363c:	080136f1 	.word	0x080136f1
 8013640:	080136b5 	.word	0x080136b5
 8013644:	080136f1 	.word	0x080136f1
 8013648:	080136f1 	.word	0x080136f1
 801364c:	080136f1 	.word	0x080136f1
 8013650:	080136f1 	.word	0x080136f1
 8013654:	080136f1 	.word	0x080136f1
 8013658:	080136f1 	.word	0x080136f1
 801365c:	080136f1 	.word	0x080136f1
 8013660:	080136bd 	.word	0x080136bd
 8013664:	080136f1 	.word	0x080136f1
 8013668:	080136f1 	.word	0x080136f1
 801366c:	080136f1 	.word	0x080136f1
 8013670:	080136f1 	.word	0x080136f1
 8013674:	080136f1 	.word	0x080136f1
 8013678:	080136f1 	.word	0x080136f1
 801367c:	080136f1 	.word	0x080136f1
 8013680:	080136c5 	.word	0x080136c5
 8013684:	080136f1 	.word	0x080136f1
 8013688:	080136f1 	.word	0x080136f1
 801368c:	080136f1 	.word	0x080136f1
 8013690:	080136f1 	.word	0x080136f1
 8013694:	080136f1 	.word	0x080136f1
 8013698:	080136f1 	.word	0x080136f1
 801369c:	080136f1 	.word	0x080136f1
 80136a0:	080136cd 	.word	0x080136cd
 80136a4:	2301      	movs	r3, #1
 80136a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80136aa:	e0a4      	b.n	80137f6 <USART_SetConfig+0x476>
 80136ac:	2302      	movs	r3, #2
 80136ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80136b2:	e0a0      	b.n	80137f6 <USART_SetConfig+0x476>
 80136b4:	2304      	movs	r3, #4
 80136b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80136ba:	e09c      	b.n	80137f6 <USART_SetConfig+0x476>
 80136bc:	2308      	movs	r3, #8
 80136be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80136c2:	e098      	b.n	80137f6 <USART_SetConfig+0x476>
 80136c4:	2310      	movs	r3, #16
 80136c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80136ca:	e094      	b.n	80137f6 <USART_SetConfig+0x476>
 80136cc:	2320      	movs	r3, #32
 80136ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80136d2:	e090      	b.n	80137f6 <USART_SetConfig+0x476>
 80136d4:	cfff69f3 	.word	0xcfff69f3
 80136d8:	ffffc0f6 	.word	0xffffc0f6
 80136dc:	40011000 	.word	0x40011000
 80136e0:	58024400 	.word	0x58024400
 80136e4:	40004400 	.word	0x40004400
 80136e8:	40004800 	.word	0x40004800
 80136ec:	40011400 	.word	0x40011400
 80136f0:	2340      	movs	r3, #64	@ 0x40
 80136f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80136f6:	e07e      	b.n	80137f6 <USART_SetConfig+0x476>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	4ab5      	ldr	r2, [pc, #724]	@ (80139d4 <USART_SetConfig+0x654>)
 80136fe:	4293      	cmp	r3, r2
 8013700:	d176      	bne.n	80137f0 <USART_SetConfig+0x470>
 8013702:	4bb5      	ldr	r3, [pc, #724]	@ (80139d8 <USART_SetConfig+0x658>)
 8013704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801370a:	2b28      	cmp	r3, #40	@ 0x28
 801370c:	d86c      	bhi.n	80137e8 <USART_SetConfig+0x468>
 801370e:	a201      	add	r2, pc, #4	@ (adr r2, 8013714 <USART_SetConfig+0x394>)
 8013710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013714:	080137b9 	.word	0x080137b9
 8013718:	080137e9 	.word	0x080137e9
 801371c:	080137e9 	.word	0x080137e9
 8013720:	080137e9 	.word	0x080137e9
 8013724:	080137e9 	.word	0x080137e9
 8013728:	080137e9 	.word	0x080137e9
 801372c:	080137e9 	.word	0x080137e9
 8013730:	080137e9 	.word	0x080137e9
 8013734:	080137c1 	.word	0x080137c1
 8013738:	080137e9 	.word	0x080137e9
 801373c:	080137e9 	.word	0x080137e9
 8013740:	080137e9 	.word	0x080137e9
 8013744:	080137e9 	.word	0x080137e9
 8013748:	080137e9 	.word	0x080137e9
 801374c:	080137e9 	.word	0x080137e9
 8013750:	080137e9 	.word	0x080137e9
 8013754:	080137c9 	.word	0x080137c9
 8013758:	080137e9 	.word	0x080137e9
 801375c:	080137e9 	.word	0x080137e9
 8013760:	080137e9 	.word	0x080137e9
 8013764:	080137e9 	.word	0x080137e9
 8013768:	080137e9 	.word	0x080137e9
 801376c:	080137e9 	.word	0x080137e9
 8013770:	080137e9 	.word	0x080137e9
 8013774:	080137d1 	.word	0x080137d1
 8013778:	080137e9 	.word	0x080137e9
 801377c:	080137e9 	.word	0x080137e9
 8013780:	080137e9 	.word	0x080137e9
 8013784:	080137e9 	.word	0x080137e9
 8013788:	080137e9 	.word	0x080137e9
 801378c:	080137e9 	.word	0x080137e9
 8013790:	080137e9 	.word	0x080137e9
 8013794:	080137d9 	.word	0x080137d9
 8013798:	080137e9 	.word	0x080137e9
 801379c:	080137e9 	.word	0x080137e9
 80137a0:	080137e9 	.word	0x080137e9
 80137a4:	080137e9 	.word	0x080137e9
 80137a8:	080137e9 	.word	0x080137e9
 80137ac:	080137e9 	.word	0x080137e9
 80137b0:	080137e9 	.word	0x080137e9
 80137b4:	080137e1 	.word	0x080137e1
 80137b8:	2301      	movs	r3, #1
 80137ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80137be:	e01a      	b.n	80137f6 <USART_SetConfig+0x476>
 80137c0:	2302      	movs	r3, #2
 80137c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80137c6:	e016      	b.n	80137f6 <USART_SetConfig+0x476>
 80137c8:	2304      	movs	r3, #4
 80137ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80137ce:	e012      	b.n	80137f6 <USART_SetConfig+0x476>
 80137d0:	2308      	movs	r3, #8
 80137d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80137d6:	e00e      	b.n	80137f6 <USART_SetConfig+0x476>
 80137d8:	2310      	movs	r3, #16
 80137da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80137de:	e00a      	b.n	80137f6 <USART_SetConfig+0x476>
 80137e0:	2320      	movs	r3, #32
 80137e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80137e6:	e006      	b.n	80137f6 <USART_SetConfig+0x476>
 80137e8:	2340      	movs	r3, #64	@ 0x40
 80137ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80137ee:	e002      	b.n	80137f6 <USART_SetConfig+0x476>
 80137f0:	2340      	movs	r3, #64	@ 0x40
 80137f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 80137f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80137fa:	2b20      	cmp	r3, #32
 80137fc:	f200 832f 	bhi.w	8013e5e <USART_SetConfig+0xade>
 8013800:	a201      	add	r2, pc, #4	@ (adr r2, 8013808 <USART_SetConfig+0x488>)
 8013802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013806:	bf00      	nop
 8013808:	0801388d 	.word	0x0801388d
 801380c:	08013943 	.word	0x08013943
 8013810:	08013a03 	.word	0x08013a03
 8013814:	08013e5f 	.word	0x08013e5f
 8013818:	08013abd 	.word	0x08013abd
 801381c:	08013e5f 	.word	0x08013e5f
 8013820:	08013e5f 	.word	0x08013e5f
 8013824:	08013e5f 	.word	0x08013e5f
 8013828:	08013b77 	.word	0x08013b77
 801382c:	08013e5f 	.word	0x08013e5f
 8013830:	08013e5f 	.word	0x08013e5f
 8013834:	08013e5f 	.word	0x08013e5f
 8013838:	08013e5f 	.word	0x08013e5f
 801383c:	08013e5f 	.word	0x08013e5f
 8013840:	08013e5f 	.word	0x08013e5f
 8013844:	08013e5f 	.word	0x08013e5f
 8013848:	08013cef 	.word	0x08013cef
 801384c:	08013e5f 	.word	0x08013e5f
 8013850:	08013e5f 	.word	0x08013e5f
 8013854:	08013e5f 	.word	0x08013e5f
 8013858:	08013e5f 	.word	0x08013e5f
 801385c:	08013e5f 	.word	0x08013e5f
 8013860:	08013e5f 	.word	0x08013e5f
 8013864:	08013e5f 	.word	0x08013e5f
 8013868:	08013e5f 	.word	0x08013e5f
 801386c:	08013e5f 	.word	0x08013e5f
 8013870:	08013e5f 	.word	0x08013e5f
 8013874:	08013e5f 	.word	0x08013e5f
 8013878:	08013e5f 	.word	0x08013e5f
 801387c:	08013e5f 	.word	0x08013e5f
 8013880:	08013e5f 	.word	0x08013e5f
 8013884:	08013e5f 	.word	0x08013e5f
 8013888:	08013dad 	.word	0x08013dad
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 801388c:	f7f9 f9ac 	bl	800cbe8 <HAL_RCC_GetPCLK1Freq>
 8013890:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013896:	2b00      	cmp	r3, #0
 8013898:	d044      	beq.n	8013924 <USART_SetConfig+0x5a4>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801389e:	2b01      	cmp	r3, #1
 80138a0:	d03e      	beq.n	8013920 <USART_SetConfig+0x5a0>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138a6:	2b02      	cmp	r3, #2
 80138a8:	d038      	beq.n	801391c <USART_SetConfig+0x59c>
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138ae:	2b03      	cmp	r3, #3
 80138b0:	d032      	beq.n	8013918 <USART_SetConfig+0x598>
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138b6:	2b04      	cmp	r3, #4
 80138b8:	d02c      	beq.n	8013914 <USART_SetConfig+0x594>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138be:	2b05      	cmp	r3, #5
 80138c0:	d026      	beq.n	8013910 <USART_SetConfig+0x590>
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138c6:	2b06      	cmp	r3, #6
 80138c8:	d020      	beq.n	801390c <USART_SetConfig+0x58c>
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138ce:	2b07      	cmp	r3, #7
 80138d0:	d01a      	beq.n	8013908 <USART_SetConfig+0x588>
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138d6:	2b08      	cmp	r3, #8
 80138d8:	d014      	beq.n	8013904 <USART_SetConfig+0x584>
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138de:	2b09      	cmp	r3, #9
 80138e0:	d00e      	beq.n	8013900 <USART_SetConfig+0x580>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138e6:	2b0a      	cmp	r3, #10
 80138e8:	d008      	beq.n	80138fc <USART_SetConfig+0x57c>
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138ee:	2b0b      	cmp	r3, #11
 80138f0:	d102      	bne.n	80138f8 <USART_SetConfig+0x578>
 80138f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80138f6:	e016      	b.n	8013926 <USART_SetConfig+0x5a6>
 80138f8:	2301      	movs	r3, #1
 80138fa:	e014      	b.n	8013926 <USART_SetConfig+0x5a6>
 80138fc:	2380      	movs	r3, #128	@ 0x80
 80138fe:	e012      	b.n	8013926 <USART_SetConfig+0x5a6>
 8013900:	2340      	movs	r3, #64	@ 0x40
 8013902:	e010      	b.n	8013926 <USART_SetConfig+0x5a6>
 8013904:	2320      	movs	r3, #32
 8013906:	e00e      	b.n	8013926 <USART_SetConfig+0x5a6>
 8013908:	2310      	movs	r3, #16
 801390a:	e00c      	b.n	8013926 <USART_SetConfig+0x5a6>
 801390c:	230c      	movs	r3, #12
 801390e:	e00a      	b.n	8013926 <USART_SetConfig+0x5a6>
 8013910:	230a      	movs	r3, #10
 8013912:	e008      	b.n	8013926 <USART_SetConfig+0x5a6>
 8013914:	2308      	movs	r3, #8
 8013916:	e006      	b.n	8013926 <USART_SetConfig+0x5a6>
 8013918:	2306      	movs	r3, #6
 801391a:	e004      	b.n	8013926 <USART_SetConfig+0x5a6>
 801391c:	2304      	movs	r3, #4
 801391e:	e002      	b.n	8013926 <USART_SetConfig+0x5a6>
 8013920:	2302      	movs	r3, #2
 8013922:	e000      	b.n	8013926 <USART_SetConfig+0x5a6>
 8013924:	2301      	movs	r3, #1
 8013926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013928:	fbb2 f3f3 	udiv	r3, r2, r3
 801392c:	005a      	lsls	r2, r3, #1
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	085b      	lsrs	r3, r3, #1
 8013934:	441a      	add	r2, r3
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	fbb2 f3f3 	udiv	r3, r2, r3
 801393e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8013940:	e291      	b.n	8013e66 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8013942:	f7f9 f967 	bl	800cc14 <HAL_RCC_GetPCLK2Freq>
 8013946:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801394c:	2b00      	cmp	r3, #0
 801394e:	d049      	beq.n	80139e4 <USART_SetConfig+0x664>
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013954:	2b01      	cmp	r3, #1
 8013956:	d043      	beq.n	80139e0 <USART_SetConfig+0x660>
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801395c:	2b02      	cmp	r3, #2
 801395e:	d03d      	beq.n	80139dc <USART_SetConfig+0x65c>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013964:	2b03      	cmp	r3, #3
 8013966:	d032      	beq.n	80139ce <USART_SetConfig+0x64e>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801396c:	2b04      	cmp	r3, #4
 801396e:	d02c      	beq.n	80139ca <USART_SetConfig+0x64a>
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013974:	2b05      	cmp	r3, #5
 8013976:	d026      	beq.n	80139c6 <USART_SetConfig+0x646>
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801397c:	2b06      	cmp	r3, #6
 801397e:	d020      	beq.n	80139c2 <USART_SetConfig+0x642>
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013984:	2b07      	cmp	r3, #7
 8013986:	d01a      	beq.n	80139be <USART_SetConfig+0x63e>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801398c:	2b08      	cmp	r3, #8
 801398e:	d014      	beq.n	80139ba <USART_SetConfig+0x63a>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013994:	2b09      	cmp	r3, #9
 8013996:	d00e      	beq.n	80139b6 <USART_SetConfig+0x636>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801399c:	2b0a      	cmp	r3, #10
 801399e:	d008      	beq.n	80139b2 <USART_SetConfig+0x632>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139a4:	2b0b      	cmp	r3, #11
 80139a6:	d102      	bne.n	80139ae <USART_SetConfig+0x62e>
 80139a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80139ac:	e01b      	b.n	80139e6 <USART_SetConfig+0x666>
 80139ae:	2301      	movs	r3, #1
 80139b0:	e019      	b.n	80139e6 <USART_SetConfig+0x666>
 80139b2:	2380      	movs	r3, #128	@ 0x80
 80139b4:	e017      	b.n	80139e6 <USART_SetConfig+0x666>
 80139b6:	2340      	movs	r3, #64	@ 0x40
 80139b8:	e015      	b.n	80139e6 <USART_SetConfig+0x666>
 80139ba:	2320      	movs	r3, #32
 80139bc:	e013      	b.n	80139e6 <USART_SetConfig+0x666>
 80139be:	2310      	movs	r3, #16
 80139c0:	e011      	b.n	80139e6 <USART_SetConfig+0x666>
 80139c2:	230c      	movs	r3, #12
 80139c4:	e00f      	b.n	80139e6 <USART_SetConfig+0x666>
 80139c6:	230a      	movs	r3, #10
 80139c8:	e00d      	b.n	80139e6 <USART_SetConfig+0x666>
 80139ca:	2308      	movs	r3, #8
 80139cc:	e00b      	b.n	80139e6 <USART_SetConfig+0x666>
 80139ce:	2306      	movs	r3, #6
 80139d0:	e009      	b.n	80139e6 <USART_SetConfig+0x666>
 80139d2:	bf00      	nop
 80139d4:	40011c00 	.word	0x40011c00
 80139d8:	58024400 	.word	0x58024400
 80139dc:	2304      	movs	r3, #4
 80139de:	e002      	b.n	80139e6 <USART_SetConfig+0x666>
 80139e0:	2302      	movs	r3, #2
 80139e2:	e000      	b.n	80139e6 <USART_SetConfig+0x666>
 80139e4:	2301      	movs	r3, #1
 80139e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80139e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80139ec:	005a      	lsls	r2, r3, #1
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	085b      	lsrs	r3, r3, #1
 80139f4:	441a      	add	r2, r3
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80139fe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8013a00:	e231      	b.n	8013e66 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a02:	f107 0318 	add.w	r3, r7, #24
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fa ffa2 	bl	800e950 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8013a0c:	69fa      	ldr	r2, [r7, #28]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d044      	beq.n	8013aa0 <USART_SetConfig+0x720>
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d03e      	beq.n	8013a9c <USART_SetConfig+0x71c>
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a22:	2b02      	cmp	r3, #2
 8013a24:	d038      	beq.n	8013a98 <USART_SetConfig+0x718>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a2a:	2b03      	cmp	r3, #3
 8013a2c:	d032      	beq.n	8013a94 <USART_SetConfig+0x714>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a32:	2b04      	cmp	r3, #4
 8013a34:	d02c      	beq.n	8013a90 <USART_SetConfig+0x710>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a3a:	2b05      	cmp	r3, #5
 8013a3c:	d026      	beq.n	8013a8c <USART_SetConfig+0x70c>
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a42:	2b06      	cmp	r3, #6
 8013a44:	d020      	beq.n	8013a88 <USART_SetConfig+0x708>
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a4a:	2b07      	cmp	r3, #7
 8013a4c:	d01a      	beq.n	8013a84 <USART_SetConfig+0x704>
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a52:	2b08      	cmp	r3, #8
 8013a54:	d014      	beq.n	8013a80 <USART_SetConfig+0x700>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a5a:	2b09      	cmp	r3, #9
 8013a5c:	d00e      	beq.n	8013a7c <USART_SetConfig+0x6fc>
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a62:	2b0a      	cmp	r3, #10
 8013a64:	d008      	beq.n	8013a78 <USART_SetConfig+0x6f8>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a6a:	2b0b      	cmp	r3, #11
 8013a6c:	d102      	bne.n	8013a74 <USART_SetConfig+0x6f4>
 8013a6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013a72:	e016      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a74:	2301      	movs	r3, #1
 8013a76:	e014      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a78:	2380      	movs	r3, #128	@ 0x80
 8013a7a:	e012      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a7c:	2340      	movs	r3, #64	@ 0x40
 8013a7e:	e010      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a80:	2320      	movs	r3, #32
 8013a82:	e00e      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a84:	2310      	movs	r3, #16
 8013a86:	e00c      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a88:	230c      	movs	r3, #12
 8013a8a:	e00a      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a8c:	230a      	movs	r3, #10
 8013a8e:	e008      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a90:	2308      	movs	r3, #8
 8013a92:	e006      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a94:	2306      	movs	r3, #6
 8013a96:	e004      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a98:	2304      	movs	r3, #4
 8013a9a:	e002      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013a9c:	2302      	movs	r3, #2
 8013a9e:	e000      	b.n	8013aa2 <USART_SetConfig+0x722>
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8013aa6:	005a      	lsls	r2, r3, #1
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	085b      	lsrs	r3, r3, #1
 8013aae:	441a      	add	r2, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ab8:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8013aba:	e1d4      	b.n	8013e66 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013abc:	f107 030c 	add.w	r3, r7, #12
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7fb f899 	bl	800ebf8 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8013ac6:	693a      	ldr	r2, [r7, #16]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d044      	beq.n	8013b5a <USART_SetConfig+0x7da>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ad4:	2b01      	cmp	r3, #1
 8013ad6:	d03e      	beq.n	8013b56 <USART_SetConfig+0x7d6>
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013adc:	2b02      	cmp	r3, #2
 8013ade:	d038      	beq.n	8013b52 <USART_SetConfig+0x7d2>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ae4:	2b03      	cmp	r3, #3
 8013ae6:	d032      	beq.n	8013b4e <USART_SetConfig+0x7ce>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013aec:	2b04      	cmp	r3, #4
 8013aee:	d02c      	beq.n	8013b4a <USART_SetConfig+0x7ca>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013af4:	2b05      	cmp	r3, #5
 8013af6:	d026      	beq.n	8013b46 <USART_SetConfig+0x7c6>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013afc:	2b06      	cmp	r3, #6
 8013afe:	d020      	beq.n	8013b42 <USART_SetConfig+0x7c2>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b04:	2b07      	cmp	r3, #7
 8013b06:	d01a      	beq.n	8013b3e <USART_SetConfig+0x7be>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b0c:	2b08      	cmp	r3, #8
 8013b0e:	d014      	beq.n	8013b3a <USART_SetConfig+0x7ba>
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b14:	2b09      	cmp	r3, #9
 8013b16:	d00e      	beq.n	8013b36 <USART_SetConfig+0x7b6>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b1c:	2b0a      	cmp	r3, #10
 8013b1e:	d008      	beq.n	8013b32 <USART_SetConfig+0x7b2>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b24:	2b0b      	cmp	r3, #11
 8013b26:	d102      	bne.n	8013b2e <USART_SetConfig+0x7ae>
 8013b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013b2c:	e016      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e014      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b32:	2380      	movs	r3, #128	@ 0x80
 8013b34:	e012      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b36:	2340      	movs	r3, #64	@ 0x40
 8013b38:	e010      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b3a:	2320      	movs	r3, #32
 8013b3c:	e00e      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b3e:	2310      	movs	r3, #16
 8013b40:	e00c      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b42:	230c      	movs	r3, #12
 8013b44:	e00a      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b46:	230a      	movs	r3, #10
 8013b48:	e008      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b4a:	2308      	movs	r3, #8
 8013b4c:	e006      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b4e:	2306      	movs	r3, #6
 8013b50:	e004      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b52:	2304      	movs	r3, #4
 8013b54:	e002      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b56:	2302      	movs	r3, #2
 8013b58:	e000      	b.n	8013b5c <USART_SetConfig+0x7dc>
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b60:	005a      	lsls	r2, r3, #1
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	085b      	lsrs	r3, r3, #1
 8013b68:	441a      	add	r2, r3
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b72:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8013b74:	e177      	b.n	8013e66 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013b76:	4b8a      	ldr	r3, [pc, #552]	@ (8013da0 <USART_SetConfig+0xa20>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	f003 0320 	and.w	r3, r3, #32
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d05d      	beq.n	8013c3e <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 8013b82:	4b87      	ldr	r3, [pc, #540]	@ (8013da0 <USART_SetConfig+0xa20>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	08db      	lsrs	r3, r3, #3
 8013b88:	f003 0303 	and.w	r3, r3, #3
 8013b8c:	4a85      	ldr	r2, [pc, #532]	@ (8013da4 <USART_SetConfig+0xa24>)
 8013b8e:	40da      	lsrs	r2, r3
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d044      	beq.n	8013c22 <USART_SetConfig+0x8a2>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b9c:	2b01      	cmp	r3, #1
 8013b9e:	d03e      	beq.n	8013c1e <USART_SetConfig+0x89e>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ba4:	2b02      	cmp	r3, #2
 8013ba6:	d038      	beq.n	8013c1a <USART_SetConfig+0x89a>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bac:	2b03      	cmp	r3, #3
 8013bae:	d032      	beq.n	8013c16 <USART_SetConfig+0x896>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bb4:	2b04      	cmp	r3, #4
 8013bb6:	d02c      	beq.n	8013c12 <USART_SetConfig+0x892>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bbc:	2b05      	cmp	r3, #5
 8013bbe:	d026      	beq.n	8013c0e <USART_SetConfig+0x88e>
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bc4:	2b06      	cmp	r3, #6
 8013bc6:	d020      	beq.n	8013c0a <USART_SetConfig+0x88a>
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bcc:	2b07      	cmp	r3, #7
 8013bce:	d01a      	beq.n	8013c06 <USART_SetConfig+0x886>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bd4:	2b08      	cmp	r3, #8
 8013bd6:	d014      	beq.n	8013c02 <USART_SetConfig+0x882>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bdc:	2b09      	cmp	r3, #9
 8013bde:	d00e      	beq.n	8013bfe <USART_SetConfig+0x87e>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013be4:	2b0a      	cmp	r3, #10
 8013be6:	d008      	beq.n	8013bfa <USART_SetConfig+0x87a>
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bec:	2b0b      	cmp	r3, #11
 8013bee:	d102      	bne.n	8013bf6 <USART_SetConfig+0x876>
 8013bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013bf4:	e016      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013bf6:	2301      	movs	r3, #1
 8013bf8:	e014      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013bfa:	2380      	movs	r3, #128	@ 0x80
 8013bfc:	e012      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013bfe:	2340      	movs	r3, #64	@ 0x40
 8013c00:	e010      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013c02:	2320      	movs	r3, #32
 8013c04:	e00e      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013c06:	2310      	movs	r3, #16
 8013c08:	e00c      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013c0a:	230c      	movs	r3, #12
 8013c0c:	e00a      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013c0e:	230a      	movs	r3, #10
 8013c10:	e008      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013c12:	2308      	movs	r3, #8
 8013c14:	e006      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013c16:	2306      	movs	r3, #6
 8013c18:	e004      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013c1a:	2304      	movs	r3, #4
 8013c1c:	e002      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013c1e:	2302      	movs	r3, #2
 8013c20:	e000      	b.n	8013c24 <USART_SetConfig+0x8a4>
 8013c22:	2301      	movs	r3, #1
 8013c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c28:	005a      	lsls	r2, r3, #1
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	085b      	lsrs	r3, r3, #1
 8013c30:	441a      	add	r2, r3
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	685b      	ldr	r3, [r3, #4]
 8013c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c3a:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8013c3c:	e113      	b.n	8013e66 <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d044      	beq.n	8013cd0 <USART_SetConfig+0x950>
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c4a:	2b01      	cmp	r3, #1
 8013c4c:	d03e      	beq.n	8013ccc <USART_SetConfig+0x94c>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c52:	2b02      	cmp	r3, #2
 8013c54:	d038      	beq.n	8013cc8 <USART_SetConfig+0x948>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c5a:	2b03      	cmp	r3, #3
 8013c5c:	d032      	beq.n	8013cc4 <USART_SetConfig+0x944>
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c62:	2b04      	cmp	r3, #4
 8013c64:	d02c      	beq.n	8013cc0 <USART_SetConfig+0x940>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c6a:	2b05      	cmp	r3, #5
 8013c6c:	d026      	beq.n	8013cbc <USART_SetConfig+0x93c>
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c72:	2b06      	cmp	r3, #6
 8013c74:	d020      	beq.n	8013cb8 <USART_SetConfig+0x938>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c7a:	2b07      	cmp	r3, #7
 8013c7c:	d01a      	beq.n	8013cb4 <USART_SetConfig+0x934>
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c82:	2b08      	cmp	r3, #8
 8013c84:	d014      	beq.n	8013cb0 <USART_SetConfig+0x930>
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c8a:	2b09      	cmp	r3, #9
 8013c8c:	d00e      	beq.n	8013cac <USART_SetConfig+0x92c>
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c92:	2b0a      	cmp	r3, #10
 8013c94:	d008      	beq.n	8013ca8 <USART_SetConfig+0x928>
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c9a:	2b0b      	cmp	r3, #11
 8013c9c:	d102      	bne.n	8013ca4 <USART_SetConfig+0x924>
 8013c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013ca2:	e016      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	e014      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013ca8:	2380      	movs	r3, #128	@ 0x80
 8013caa:	e012      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013cac:	2340      	movs	r3, #64	@ 0x40
 8013cae:	e010      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013cb0:	2320      	movs	r3, #32
 8013cb2:	e00e      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013cb4:	2310      	movs	r3, #16
 8013cb6:	e00c      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013cb8:	230c      	movs	r3, #12
 8013cba:	e00a      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013cbc:	230a      	movs	r3, #10
 8013cbe:	e008      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013cc0:	2308      	movs	r3, #8
 8013cc2:	e006      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013cc4:	2306      	movs	r3, #6
 8013cc6:	e004      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013cc8:	2304      	movs	r3, #4
 8013cca:	e002      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013ccc:	2302      	movs	r3, #2
 8013cce:	e000      	b.n	8013cd2 <USART_SetConfig+0x952>
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	4a34      	ldr	r2, [pc, #208]	@ (8013da4 <USART_SetConfig+0xa24>)
 8013cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013cd8:	005a      	lsls	r2, r3, #1
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	085b      	lsrs	r3, r3, #1
 8013ce0:	441a      	add	r2, r3
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8013cea:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8013cec:	e0bb      	b.n	8013e66 <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d044      	beq.n	8013d80 <USART_SetConfig+0xa00>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cfa:	2b01      	cmp	r3, #1
 8013cfc:	d03e      	beq.n	8013d7c <USART_SetConfig+0x9fc>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d02:	2b02      	cmp	r3, #2
 8013d04:	d038      	beq.n	8013d78 <USART_SetConfig+0x9f8>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d0a:	2b03      	cmp	r3, #3
 8013d0c:	d032      	beq.n	8013d74 <USART_SetConfig+0x9f4>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d12:	2b04      	cmp	r3, #4
 8013d14:	d02c      	beq.n	8013d70 <USART_SetConfig+0x9f0>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d1a:	2b05      	cmp	r3, #5
 8013d1c:	d026      	beq.n	8013d6c <USART_SetConfig+0x9ec>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d22:	2b06      	cmp	r3, #6
 8013d24:	d020      	beq.n	8013d68 <USART_SetConfig+0x9e8>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d2a:	2b07      	cmp	r3, #7
 8013d2c:	d01a      	beq.n	8013d64 <USART_SetConfig+0x9e4>
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d32:	2b08      	cmp	r3, #8
 8013d34:	d014      	beq.n	8013d60 <USART_SetConfig+0x9e0>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d3a:	2b09      	cmp	r3, #9
 8013d3c:	d00e      	beq.n	8013d5c <USART_SetConfig+0x9dc>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d42:	2b0a      	cmp	r3, #10
 8013d44:	d008      	beq.n	8013d58 <USART_SetConfig+0x9d8>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d4a:	2b0b      	cmp	r3, #11
 8013d4c:	d102      	bne.n	8013d54 <USART_SetConfig+0x9d4>
 8013d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013d52:	e016      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d54:	2301      	movs	r3, #1
 8013d56:	e014      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d58:	2380      	movs	r3, #128	@ 0x80
 8013d5a:	e012      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d5c:	2340      	movs	r3, #64	@ 0x40
 8013d5e:	e010      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d60:	2320      	movs	r3, #32
 8013d62:	e00e      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d64:	2310      	movs	r3, #16
 8013d66:	e00c      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d68:	230c      	movs	r3, #12
 8013d6a:	e00a      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d6c:	230a      	movs	r3, #10
 8013d6e:	e008      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d70:	2308      	movs	r3, #8
 8013d72:	e006      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d74:	2306      	movs	r3, #6
 8013d76:	e004      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d78:	2304      	movs	r3, #4
 8013d7a:	e002      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d7c:	2302      	movs	r3, #2
 8013d7e:	e000      	b.n	8013d82 <USART_SetConfig+0xa02>
 8013d80:	2301      	movs	r3, #1
 8013d82:	4a09      	ldr	r2, [pc, #36]	@ (8013da8 <USART_SetConfig+0xa28>)
 8013d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d88:	005a      	lsls	r2, r3, #1
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	085b      	lsrs	r3, r3, #1
 8013d90:	441a      	add	r2, r3
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d9a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8013d9c:	e063      	b.n	8013e66 <USART_SetConfig+0xae6>
 8013d9e:	bf00      	nop
 8013da0:	58024400 	.word	0x58024400
 8013da4:	03d09000 	.word	0x03d09000
 8013da8:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d044      	beq.n	8013e3e <USART_SetConfig+0xabe>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d03e      	beq.n	8013e3a <USART_SetConfig+0xaba>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dc0:	2b02      	cmp	r3, #2
 8013dc2:	d038      	beq.n	8013e36 <USART_SetConfig+0xab6>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dc8:	2b03      	cmp	r3, #3
 8013dca:	d032      	beq.n	8013e32 <USART_SetConfig+0xab2>
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dd0:	2b04      	cmp	r3, #4
 8013dd2:	d02c      	beq.n	8013e2e <USART_SetConfig+0xaae>
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dd8:	2b05      	cmp	r3, #5
 8013dda:	d026      	beq.n	8013e2a <USART_SetConfig+0xaaa>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013de0:	2b06      	cmp	r3, #6
 8013de2:	d020      	beq.n	8013e26 <USART_SetConfig+0xaa6>
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013de8:	2b07      	cmp	r3, #7
 8013dea:	d01a      	beq.n	8013e22 <USART_SetConfig+0xaa2>
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013df0:	2b08      	cmp	r3, #8
 8013df2:	d014      	beq.n	8013e1e <USART_SetConfig+0xa9e>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013df8:	2b09      	cmp	r3, #9
 8013dfa:	d00e      	beq.n	8013e1a <USART_SetConfig+0xa9a>
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e00:	2b0a      	cmp	r3, #10
 8013e02:	d008      	beq.n	8013e16 <USART_SetConfig+0xa96>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e08:	2b0b      	cmp	r3, #11
 8013e0a:	d102      	bne.n	8013e12 <USART_SetConfig+0xa92>
 8013e0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013e10:	e016      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e12:	2301      	movs	r3, #1
 8013e14:	e014      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e16:	2380      	movs	r3, #128	@ 0x80
 8013e18:	e012      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e1a:	2340      	movs	r3, #64	@ 0x40
 8013e1c:	e010      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e1e:	2320      	movs	r3, #32
 8013e20:	e00e      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e22:	2310      	movs	r3, #16
 8013e24:	e00c      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e26:	230c      	movs	r3, #12
 8013e28:	e00a      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e2a:	230a      	movs	r3, #10
 8013e2c:	e008      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e2e:	2308      	movs	r3, #8
 8013e30:	e006      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e32:	2306      	movs	r3, #6
 8013e34:	e004      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e36:	2304      	movs	r3, #4
 8013e38:	e002      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e3a:	2302      	movs	r3, #2
 8013e3c:	e000      	b.n	8013e40 <USART_SetConfig+0xac0>
 8013e3e:	2301      	movs	r3, #1
 8013e40:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8013e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e48:	005a      	lsls	r2, r3, #1
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	085b      	lsrs	r3, r3, #1
 8013e50:	441a      	add	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e5a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8013e5c:	e003      	b.n	8013e66 <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 8013e5e:	2301      	movs	r3, #1
 8013e60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 8013e64:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8013e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e68:	2b0f      	cmp	r3, #15
 8013e6a:	d916      	bls.n	8013e9a <USART_SetConfig+0xb1a>
 8013e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e72:	d212      	bcs.n	8013e9a <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	f023 030f 	bic.w	r3, r3, #15
 8013e7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e80:	085b      	lsrs	r3, r3, #1
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	f003 0307 	and.w	r3, r3, #7
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013e8c:	4313      	orrs	r3, r2
 8013e8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013e96:	60da      	str	r2, [r3, #12]
 8013e98:	e002      	b.n	8013ea0 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2200      	movs	r2, #0
 8013eb0:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8013eb8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3738      	adds	r7, #56	@ 0x38
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b086      	sub	sp, #24
 8013ec8:	af02      	add	r7, sp, #8
 8013eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013ed2:	f7f6 fdc7 	bl	800aa64 <HAL_GetTick>
 8013ed6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	f003 0308 	and.w	r3, r3, #8
 8013ee2:	2b08      	cmp	r3, #8
 8013ee4:	d10e      	bne.n	8013f04 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013eea:	9300      	str	r3, [sp, #0]
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	2200      	movs	r2, #0
 8013ef0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f7ff fa0d 	bl	8013314 <USART_WaitOnFlagUntilTimeout>
 8013efa:	4603      	mov	r3, r0
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d001      	beq.n	8013f04 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013f00:	2303      	movs	r3, #3
 8013f02:	e01e      	b.n	8013f42 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	f003 0304 	and.w	r3, r3, #4
 8013f0e:	2b04      	cmp	r3, #4
 8013f10:	d10e      	bne.n	8013f30 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013f16:	9300      	str	r3, [sp, #0]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f7ff f9f7 	bl	8013314 <USART_WaitOnFlagUntilTimeout>
 8013f26:	4603      	mov	r3, r0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d001      	beq.n	8013f30 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013f2c:	2303      	movs	r3, #3
 8013f2e:	e008      	b.n	8013f42 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2201      	movs	r2, #1
 8013f34:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8013f40:	2300      	movs	r3, #0
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3710      	adds	r7, #16
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}

08013f4a <HAL_USARTEx_EnableSlaveMode>:
  *       otherwise the SPI slave will transmit zeros.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart)
{
 8013f4a:	b480      	push	{r7}
 8013f4c:	b085      	sub	sp, #20
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8013f58:	2b01      	cmp	r3, #1
 8013f5a:	d101      	bne.n	8013f60 <HAL_USARTEx_EnableSlaveMode+0x16>
 8013f5c:	2302      	movs	r3, #2
 8013f5e:	e043      	b.n	8013fe8 <HAL_USARTEx_EnableSlaveMode+0x9e>
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2201      	movs	r2, #1
 8013f64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2202      	movs	r2, #2
 8013f6c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	681a      	ldr	r2, [r3, #0]
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	f022 0201 	bic.w	r2, r2, #1
 8013f86:	601a      	str	r2, [r3, #0]

  /* In SPI slave mode mode, the following bits must be kept cleared:
  - LINEN and CLKEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(husart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	685a      	ldr	r2, [r3, #4]
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	689a      	ldr	r2, [r3, #8]
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013fa6:	609a      	str	r2, [r3, #8]

  /* Enable SPI slave mode */
  SET_BIT(husart->Instance->CR2, USART_CR2_SLVEN);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	685a      	ldr	r2, [r3, #4]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f042 0201 	orr.w	r2, r2, #1
 8013fb6:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	68fa      	ldr	r2, [r7, #12]
 8013fbe:	601a      	str	r2, [r3, #0]

  husart->SlaveMode = USART_SLAVEMODE_ENABLE;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	641a      	str	r2, [r3, #64]	@ 0x40

  husart->State = HAL_USART_STATE_READY;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2201      	movs	r2, #1
 8013fca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Enable USART */
  __HAL_USART_ENABLE(husart);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	f042 0201 	orr.w	r2, r2, #1
 8013fdc:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8013fe6:	2300      	movs	r3, #0
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3714      	adds	r7, #20
 8013fec:	46bd      	mov	sp, r7
 8013fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff2:	4770      	bx	lr

08013ff4 <HAL_USARTEx_ConfigNSS>:
  *            @arg @ref USART_NSS_HARD
  *            @arg @ref USART_NSS_SOFT
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig)
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b085      	sub	sp, #20
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_SPI_SLAVE_INSTANCE(husart->Instance));
  assert_param(IS_USART_NSS(NSSConfig));

  /* Process Locked */
  __HAL_LOCK(husart);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8014004:	2b01      	cmp	r3, #1
 8014006:	d101      	bne.n	801400c <HAL_USARTEx_ConfigNSS+0x18>
 8014008:	2302      	movs	r3, #2
 801400a:	e02a      	b.n	8014062 <HAL_USARTEx_ConfigNSS+0x6e>
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2201      	movs	r2, #1
 8014010:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2202      	movs	r2, #2
 8014018:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	f022 0201 	bic.w	r2, r2, #1
 8014032:	601a      	str	r2, [r3, #0]

  /* Program DIS_NSS bit in the USART_CR2 register */
  MODIFY_REG(husart->Instance->CR2, USART_CR2_DIS_NSS, NSSConfig);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	f023 0108 	bic.w	r1, r3, #8
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	683a      	ldr	r2, [r7, #0]
 8014044:	430a      	orrs	r2, r1
 8014046:	605a      	str	r2, [r3, #4]

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	68fa      	ldr	r2, [r7, #12]
 801404e:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2201      	movs	r2, #1
 8014054:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2200      	movs	r2, #0
 801405c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8014060:	2300      	movs	r3, #0
}
 8014062:	4618      	mov	r0, r3
 8014064:	3714      	adds	r7, #20
 8014066:	46bd      	mov	sp, r7
 8014068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406c:	4770      	bx	lr

0801406e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 801406e:	b480      	push	{r7}
 8014070:	b085      	sub	sp, #20
 8014072:	af00      	add	r7, sp, #0
 8014074:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801407c:	2b01      	cmp	r3, #1
 801407e:	d101      	bne.n	8014084 <HAL_USARTEx_DisableFifoMode+0x16>
 8014080:	2302      	movs	r3, #2
 8014082:	e027      	b.n	80140d4 <HAL_USARTEx_DisableFifoMode+0x66>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2201      	movs	r2, #1
 8014088:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2202      	movs	r2, #2
 8014090:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	f022 0201 	bic.w	r2, r2, #1
 80140aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80140b2:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2200      	movs	r2, #0
 80140b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	68fa      	ldr	r2, [r7, #12]
 80140c0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2201      	movs	r2, #1
 80140c6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2200      	movs	r2, #0
 80140ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80140d2:	2300      	movs	r3, #0
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3714      	adds	r7, #20
 80140d8:	46bd      	mov	sp, r7
 80140da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140de:	4770      	bx	lr

080140e0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b084      	sub	sp, #16
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	d101      	bne.n	80140f8 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80140f4:	2302      	movs	r3, #2
 80140f6:	e02d      	b.n	8014154 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2201      	movs	r2, #1
 80140fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2202      	movs	r2, #2
 8014104:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	681a      	ldr	r2, [r3, #0]
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	f022 0201 	bic.w	r2, r2, #1
 801411e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	689b      	ldr	r3, [r3, #8]
 8014126:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	683a      	ldr	r2, [r7, #0]
 8014130:	430a      	orrs	r2, r1
 8014132:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f000 f84f 	bl	80141d8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	68fa      	ldr	r2, [r7, #12]
 8014140:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2201      	movs	r2, #1
 8014146:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2200      	movs	r2, #0
 801414e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8014152:	2300      	movs	r3, #0
}
 8014154:	4618      	mov	r0, r3
 8014156:	3710      	adds	r7, #16
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801416c:	2b01      	cmp	r3, #1
 801416e:	d101      	bne.n	8014174 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8014170:	2302      	movs	r3, #2
 8014172:	e02d      	b.n	80141d0 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2201      	movs	r2, #1
 8014178:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2202      	movs	r2, #2
 8014180:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f022 0201 	bic.w	r2, r2, #1
 801419a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	689b      	ldr	r3, [r3, #8]
 80141a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	683a      	ldr	r2, [r7, #0]
 80141ac:	430a      	orrs	r2, r1
 80141ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f000 f811 	bl	80141d8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	68fa      	ldr	r2, [r7, #12]
 80141bc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2201      	movs	r2, #1
 80141c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2200      	movs	r2, #0
 80141ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80141ce:	2300      	movs	r3, #0
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3710      	adds	r7, #16
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}

080141d8 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80141d8:	b480      	push	{r7}
 80141da:	b085      	sub	sp, #20
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d106      	bne.n	80141f6 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2201      	movs	r2, #1
 80141ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2201      	movs	r2, #1
 80141f2:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80141f4:	e02f      	b.n	8014256 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80141f6:	2310      	movs	r3, #16
 80141f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80141fa:	2310      	movs	r3, #16
 80141fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8014204:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8014206:	b2db      	uxtb	r3, r3
 8014208:	f003 0307 	and.w	r3, r3, #7
 801420c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8014214:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8014216:	b2db      	uxtb	r3, r3
 8014218:	f003 0307 	and.w	r3, r3, #7
 801421c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801421e:	7bbb      	ldrb	r3, [r7, #14]
 8014220:	7b3a      	ldrb	r2, [r7, #12]
 8014222:	4910      	ldr	r1, [pc, #64]	@ (8014264 <USARTEx_SetNbDataToProcess+0x8c>)
 8014224:	5c8a      	ldrb	r2, [r1, r2]
 8014226:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 801422a:	7b3a      	ldrb	r2, [r7, #12]
 801422c:	490e      	ldr	r1, [pc, #56]	@ (8014268 <USARTEx_SetNbDataToProcess+0x90>)
 801422e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014230:	fb93 f3f2 	sdiv	r3, r3, r2
 8014234:	b29a      	uxth	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801423a:	7bfb      	ldrb	r3, [r7, #15]
 801423c:	7b7a      	ldrb	r2, [r7, #13]
 801423e:	4909      	ldr	r1, [pc, #36]	@ (8014264 <USARTEx_SetNbDataToProcess+0x8c>)
 8014240:	5c8a      	ldrb	r2, [r1, r2]
 8014242:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8014246:	7b7a      	ldrb	r2, [r7, #13]
 8014248:	4907      	ldr	r1, [pc, #28]	@ (8014268 <USARTEx_SetNbDataToProcess+0x90>)
 801424a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801424c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014250:	b29a      	uxth	r2, r3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 8014256:	bf00      	nop
 8014258:	3714      	adds	r7, #20
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr
 8014262:	bf00      	nop
 8014264:	08019ee8 	.word	0x08019ee8
 8014268:	08019ef0 	.word	0x08019ef0

0801426c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801426c:	b084      	sub	sp, #16
 801426e:	b480      	push	{r7}
 8014270:	b085      	sub	sp, #20
 8014272:	af00      	add	r7, sp, #0
 8014274:	6078      	str	r0, [r7, #4]
 8014276:	f107 001c 	add.w	r0, r7, #28
 801427a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801427e:	2300      	movs	r3, #0
 8014280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8014282:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8014284:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8014286:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8014288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 801428a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 801428e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8014290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8014292:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8014294:	68fa      	ldr	r2, [r7, #12]
 8014296:	4313      	orrs	r3, r2
 8014298:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	685a      	ldr	r2, [r3, #4]
 801429e:	4b07      	ldr	r3, [pc, #28]	@ (80142bc <SDMMC_Init+0x50>)
 80142a0:	4013      	ands	r3, r2
 80142a2:	68fa      	ldr	r2, [r7, #12]
 80142a4:	431a      	orrs	r2, r3
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80142aa:	2300      	movs	r3, #0
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3714      	adds	r7, #20
 80142b0:	46bd      	mov	sp, r7
 80142b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b6:	b004      	add	sp, #16
 80142b8:	4770      	bx	lr
 80142ba:	bf00      	nop
 80142bc:	ffc02c00 	.word	0xffc02c00

080142c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	370c      	adds	r7, #12
 80142d2:	46bd      	mov	sp, r7
 80142d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d8:	4770      	bx	lr

080142da <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80142da:	b480      	push	{r7}
 80142dc:	b083      	sub	sp, #12
 80142de:	af00      	add	r7, sp, #0
 80142e0:	6078      	str	r0, [r7, #4]
 80142e2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	681a      	ldr	r2, [r3, #0]
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80142ee:	2300      	movs	r3, #0
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	370c      	adds	r7, #12
 80142f4:	46bd      	mov	sp, r7
 80142f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fa:	4770      	bx	lr

080142fc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80142fc:	b480      	push	{r7}
 80142fe:	b083      	sub	sp, #12
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	f043 0203 	orr.w	r2, r3, #3
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8014310:	2300      	movs	r3, #0
}
 8014312:	4618      	mov	r0, r3
 8014314:	370c      	adds	r7, #12
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr

0801431e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801431e:	b480      	push	{r7}
 8014320:	b083      	sub	sp, #12
 8014322:	af00      	add	r7, sp, #0
 8014324:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	f003 0303 	and.w	r3, r3, #3
}
 801432e:	4618      	mov	r0, r3
 8014330:	370c      	adds	r7, #12
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr
	...

0801433c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801433c:	b480      	push	{r7}
 801433e:	b085      	sub	sp, #20
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014346:	2300      	movs	r3, #0
 8014348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	681a      	ldr	r2, [r3, #0]
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801435a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8014360:	431a      	orrs	r2, r3
                       Command->CPSM);
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8014366:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8014368:	68fa      	ldr	r2, [r7, #12]
 801436a:	4313      	orrs	r3, r2
 801436c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	68da      	ldr	r2, [r3, #12]
 8014372:	4b06      	ldr	r3, [pc, #24]	@ (801438c <SDMMC_SendCommand+0x50>)
 8014374:	4013      	ands	r3, r2
 8014376:	68fa      	ldr	r2, [r7, #12]
 8014378:	431a      	orrs	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801437e:	2300      	movs	r3, #0
}
 8014380:	4618      	mov	r0, r3
 8014382:	3714      	adds	r7, #20
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr
 801438c:	fffee0c0 	.word	0xfffee0c0

08014390 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	691b      	ldr	r3, [r3, #16]
 801439c:	b2db      	uxtb	r3, r3
}
 801439e:	4618      	mov	r0, r3
 80143a0:	370c      	adds	r7, #12
 80143a2:	46bd      	mov	sp, r7
 80143a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a8:	4770      	bx	lr

080143aa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80143aa:	b480      	push	{r7}
 80143ac:	b085      	sub	sp, #20
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	6078      	str	r0, [r7, #4]
 80143b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	3314      	adds	r3, #20
 80143b8:	461a      	mov	r2, r3
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	4413      	add	r3, r2
 80143be:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	681b      	ldr	r3, [r3, #0]
}
 80143c4:	4618      	mov	r0, r3
 80143c6:	3714      	adds	r7, #20
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr

080143d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80143d0:	b480      	push	{r7}
 80143d2:	b085      	sub	sp, #20
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80143da:	2300      	movs	r3, #0
 80143dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	681a      	ldr	r2, [r3, #0]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	685a      	ldr	r2, [r3, #4]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80143f6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80143fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8014402:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8014404:	68fa      	ldr	r2, [r7, #12]
 8014406:	4313      	orrs	r3, r2
 8014408:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801440e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	431a      	orrs	r2, r3
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801441a:	2300      	movs	r3, #0

}
 801441c:	4618      	mov	r0, r3
 801441e:	3714      	adds	r7, #20
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr

08014428 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b088      	sub	sp, #32
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8014436:	2310      	movs	r3, #16
 8014438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801443a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801443e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014440:	2300      	movs	r3, #0
 8014442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801444a:	f107 0308 	add.w	r3, r7, #8
 801444e:	4619      	mov	r1, r3
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f7ff ff73 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8014456:	f241 3288 	movw	r2, #5000	@ 0x1388
 801445a:	2110      	movs	r1, #16
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f000 fa5f 	bl	8014920 <SDMMC_GetCmdResp1>
 8014462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014464:	69fb      	ldr	r3, [r7, #28]
}
 8014466:	4618      	mov	r0, r3
 8014468:	3720      	adds	r7, #32
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801446e:	b580      	push	{r7, lr}
 8014470:	b088      	sub	sp, #32
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
 8014476:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801447c:	2311      	movs	r3, #17
 801447e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014486:	2300      	movs	r3, #0
 8014488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801448a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801448e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014490:	f107 0308 	add.w	r3, r7, #8
 8014494:	4619      	mov	r1, r3
 8014496:	6878      	ldr	r0, [r7, #4]
 8014498:	f7ff ff50 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801449c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80144a0:	2111      	movs	r1, #17
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f000 fa3c 	bl	8014920 <SDMMC_GetCmdResp1>
 80144a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80144aa:	69fb      	ldr	r3, [r7, #28]
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	3720      	adds	r7, #32
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b088      	sub	sp, #32
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80144c2:	2312      	movs	r3, #18
 80144c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80144ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80144cc:	2300      	movs	r3, #0
 80144ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80144d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80144d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144d6:	f107 0308 	add.w	r3, r7, #8
 80144da:	4619      	mov	r1, r3
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f7ff ff2d 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80144e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80144e6:	2112      	movs	r1, #18
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f000 fa19 	bl	8014920 <SDMMC_GetCmdResp1>
 80144ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80144f0:	69fb      	ldr	r3, [r7, #28]
}
 80144f2:	4618      	mov	r0, r3
 80144f4:	3720      	adds	r7, #32
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}

080144fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80144fa:	b580      	push	{r7, lr}
 80144fc:	b088      	sub	sp, #32
 80144fe:	af00      	add	r7, sp, #0
 8014500:	6078      	str	r0, [r7, #4]
 8014502:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8014508:	2318      	movs	r3, #24
 801450a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801450c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014512:	2300      	movs	r3, #0
 8014514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801451a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801451c:	f107 0308 	add.w	r3, r7, #8
 8014520:	4619      	mov	r1, r3
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f7ff ff0a 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014528:	f241 3288 	movw	r2, #5000	@ 0x1388
 801452c:	2118      	movs	r1, #24
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f000 f9f6 	bl	8014920 <SDMMC_GetCmdResp1>
 8014534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014536:	69fb      	ldr	r3, [r7, #28]
}
 8014538:	4618      	mov	r0, r3
 801453a:	3720      	adds	r7, #32
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}

08014540 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b088      	sub	sp, #32
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801454e:	2319      	movs	r3, #25
 8014550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014552:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014558:	2300      	movs	r3, #0
 801455a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801455c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014560:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014562:	f107 0308 	add.w	r3, r7, #8
 8014566:	4619      	mov	r1, r3
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f7ff fee7 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801456e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014572:	2119      	movs	r1, #25
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 f9d3 	bl	8014920 <SDMMC_GetCmdResp1>
 801457a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801457c:	69fb      	ldr	r3, [r7, #28]
}
 801457e:	4618      	mov	r0, r3
 8014580:	3720      	adds	r7, #32
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
	...

08014588 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b088      	sub	sp, #32
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8014590:	2300      	movs	r3, #0
 8014592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8014594:	230c      	movs	r3, #12
 8014596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801459c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801459e:	2300      	movs	r3, #0
 80145a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80145a6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	68db      	ldr	r3, [r3, #12]
 80145ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	68db      	ldr	r3, [r3, #12]
 80145b8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80145c0:	f107 0308 	add.w	r3, r7, #8
 80145c4:	4619      	mov	r1, r3
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f7ff feb8 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80145cc:	4a0b      	ldr	r2, [pc, #44]	@ (80145fc <SDMMC_CmdStopTransfer+0x74>)
 80145ce:	210c      	movs	r1, #12
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	f000 f9a5 	bl	8014920 <SDMMC_GetCmdResp1>
 80145d6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	68db      	ldr	r3, [r3, #12]
 80145dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80145e4:	69fb      	ldr	r3, [r7, #28]
 80145e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80145ea:	d101      	bne.n	80145f0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80145ec:	2300      	movs	r3, #0
 80145ee:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80145f0:	69fb      	ldr	r3, [r7, #28]
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3720      	adds	r7, #32
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}
 80145fa:	bf00      	nop
 80145fc:	05f5e100 	.word	0x05f5e100

08014600 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b088      	sub	sp, #32
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801460a:	683b      	ldr	r3, [r7, #0]
 801460c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801460e:	2307      	movs	r3, #7
 8014610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014618:	2300      	movs	r3, #0
 801461a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801461c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014620:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014622:	f107 0308 	add.w	r3, r7, #8
 8014626:	4619      	mov	r1, r3
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f7ff fe87 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014632:	2107      	movs	r1, #7
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f000 f973 	bl	8014920 <SDMMC_GetCmdResp1>
 801463a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801463c:	69fb      	ldr	r3, [r7, #28]
}
 801463e:	4618      	mov	r0, r3
 8014640:	3720      	adds	r7, #32
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}

08014646 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8014646:	b580      	push	{r7, lr}
 8014648:	b088      	sub	sp, #32
 801464a:	af00      	add	r7, sp, #0
 801464c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801464e:	2300      	movs	r3, #0
 8014650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8014652:	2300      	movs	r3, #0
 8014654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8014656:	2300      	movs	r3, #0
 8014658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801465a:	2300      	movs	r3, #0
 801465c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801465e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014662:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014664:	f107 0308 	add.w	r3, r7, #8
 8014668:	4619      	mov	r1, r3
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f7ff fe66 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f000 fb97 	bl	8014da4 <SDMMC_GetCmdError>
 8014676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014678:	69fb      	ldr	r3, [r7, #28]
}
 801467a:	4618      	mov	r0, r3
 801467c:	3720      	adds	r7, #32
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}

08014682 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8014682:	b580      	push	{r7, lr}
 8014684:	b088      	sub	sp, #32
 8014686:	af00      	add	r7, sp, #0
 8014688:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801468a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801468e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014690:	2308      	movs	r3, #8
 8014692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801469a:	2300      	movs	r3, #0
 801469c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801469e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80146a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80146a4:	f107 0308 	add.w	r3, r7, #8
 80146a8:	4619      	mov	r1, r3
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7ff fe46 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f000 fb29 	bl	8014d08 <SDMMC_GetCmdResp7>
 80146b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146b8:	69fb      	ldr	r3, [r7, #28]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3720      	adds	r7, #32
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}

080146c2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80146c2:	b580      	push	{r7, lr}
 80146c4:	b088      	sub	sp, #32
 80146c6:	af00      	add	r7, sp, #0
 80146c8:	6078      	str	r0, [r7, #4]
 80146ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80146d0:	2337      	movs	r3, #55	@ 0x37
 80146d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80146d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80146d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80146da:	2300      	movs	r3, #0
 80146dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80146de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80146e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80146e4:	f107 0308 	add.w	r3, r7, #8
 80146e8:	4619      	mov	r1, r3
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f7ff fe26 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80146f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80146f4:	2137      	movs	r1, #55	@ 0x37
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f000 f912 	bl	8014920 <SDMMC_GetCmdResp1>
 80146fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146fe:	69fb      	ldr	r3, [r7, #28]
}
 8014700:	4618      	mov	r0, r3
 8014702:	3720      	adds	r7, #32
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b088      	sub	sp, #32
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8014716:	2329      	movs	r3, #41	@ 0x29
 8014718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801471a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801471e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014720:	2300      	movs	r3, #0
 8014722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014728:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801472a:	f107 0308 	add.w	r3, r7, #8
 801472e:	4619      	mov	r1, r3
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7ff fe03 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 fa2e 	bl	8014b98 <SDMMC_GetCmdResp3>
 801473c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801473e:	69fb      	ldr	r3, [r7, #28]
}
 8014740:	4618      	mov	r0, r3
 8014742:	3720      	adds	r7, #32
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}

08014748 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b088      	sub	sp, #32
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
 8014750:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8014756:	2306      	movs	r3, #6
 8014758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801475a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801475e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014760:	2300      	movs	r3, #0
 8014762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014768:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801476a:	f107 0308 	add.w	r3, r7, #8
 801476e:	4619      	mov	r1, r3
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7ff fde3 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8014776:	f241 3288 	movw	r2, #5000	@ 0x1388
 801477a:	2106      	movs	r1, #6
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 f8cf 	bl	8014920 <SDMMC_GetCmdResp1>
 8014782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014784:	69fb      	ldr	r3, [r7, #28]
}
 8014786:	4618      	mov	r0, r3
 8014788:	3720      	adds	r7, #32
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}

0801478e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801478e:	b580      	push	{r7, lr}
 8014790:	b088      	sub	sp, #32
 8014792:	af00      	add	r7, sp, #0
 8014794:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8014796:	2300      	movs	r3, #0
 8014798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801479a:	2333      	movs	r3, #51	@ 0x33
 801479c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801479e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80147a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80147a4:	2300      	movs	r3, #0
 80147a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80147a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80147ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80147ae:	f107 0308 	add.w	r3, r7, #8
 80147b2:	4619      	mov	r1, r3
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f7ff fdc1 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80147ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80147be:	2133      	movs	r1, #51	@ 0x33
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f000 f8ad 	bl	8014920 <SDMMC_GetCmdResp1>
 80147c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80147c8:	69fb      	ldr	r3, [r7, #28]
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3720      	adds	r7, #32
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b088      	sub	sp, #32
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80147da:	2300      	movs	r3, #0
 80147dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80147de:	2302      	movs	r3, #2
 80147e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80147e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80147e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80147e8:	2300      	movs	r3, #0
 80147ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80147ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80147f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80147f2:	f107 0308 	add.w	r3, r7, #8
 80147f6:	4619      	mov	r1, r3
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f7ff fd9f 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f000 f980 	bl	8014b04 <SDMMC_GetCmdResp2>
 8014804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014806:	69fb      	ldr	r3, [r7, #28]
}
 8014808:	4618      	mov	r0, r3
 801480a:	3720      	adds	r7, #32
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}

08014810 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b088      	sub	sp, #32
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801481e:	2309      	movs	r3, #9
 8014820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014822:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8014826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014828:	2300      	movs	r3, #0
 801482a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801482c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014830:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014832:	f107 0308 	add.w	r3, r7, #8
 8014836:	4619      	mov	r1, r3
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f7ff fd7f 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f000 f960 	bl	8014b04 <SDMMC_GetCmdResp2>
 8014844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014846:	69fb      	ldr	r3, [r7, #28]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3720      	adds	r7, #32
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}

08014850 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b088      	sub	sp, #32
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
 8014858:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801485a:	2300      	movs	r3, #0
 801485c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801485e:	2303      	movs	r3, #3
 8014860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014868:	2300      	movs	r3, #0
 801486a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801486c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014870:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014872:	f107 0308 	add.w	r3, r7, #8
 8014876:	4619      	mov	r1, r3
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f7ff fd5f 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801487e:	683a      	ldr	r2, [r7, #0]
 8014880:	2103      	movs	r1, #3
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f000 f9c8 	bl	8014c18 <SDMMC_GetCmdResp6>
 8014888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801488a:	69fb      	ldr	r3, [r7, #28]
}
 801488c:	4618      	mov	r0, r3
 801488e:	3720      	adds	r7, #32
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b088      	sub	sp, #32
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80148a2:	230d      	movs	r3, #13
 80148a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80148a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80148aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80148ac:	2300      	movs	r3, #0
 80148ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80148b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80148b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80148b6:	f107 0308 	add.w	r3, r7, #8
 80148ba:	4619      	mov	r1, r3
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f7ff fd3d 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80148c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80148c6:	210d      	movs	r1, #13
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f000 f829 	bl	8014920 <SDMMC_GetCmdResp1>
 80148ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80148d0:	69fb      	ldr	r3, [r7, #28]
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3720      	adds	r7, #32
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}

080148da <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80148da:	b580      	push	{r7, lr}
 80148dc:	b088      	sub	sp, #32
 80148de:	af00      	add	r7, sp, #0
 80148e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80148e2:	2300      	movs	r3, #0
 80148e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80148e6:	230d      	movs	r3, #13
 80148e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80148ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80148ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80148f0:	2300      	movs	r3, #0
 80148f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80148f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80148f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80148fa:	f107 0308 	add.w	r3, r7, #8
 80148fe:	4619      	mov	r1, r3
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	f7ff fd1b 	bl	801433c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8014906:	f241 3288 	movw	r2, #5000	@ 0x1388
 801490a:	210d      	movs	r1, #13
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f000 f807 	bl	8014920 <SDMMC_GetCmdResp1>
 8014912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014914:	69fb      	ldr	r3, [r7, #28]
}
 8014916:	4618      	mov	r0, r3
 8014918:	3720      	adds	r7, #32
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
	...

08014920 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b088      	sub	sp, #32
 8014924:	af00      	add	r7, sp, #0
 8014926:	60f8      	str	r0, [r7, #12]
 8014928:	460b      	mov	r3, r1
 801492a:	607a      	str	r2, [r7, #4]
 801492c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801492e:	4b70      	ldr	r3, [pc, #448]	@ (8014af0 <SDMMC_GetCmdResp1+0x1d0>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	4a70      	ldr	r2, [pc, #448]	@ (8014af4 <SDMMC_GetCmdResp1+0x1d4>)
 8014934:	fba2 2303 	umull	r2, r3, r2, r3
 8014938:	0a5a      	lsrs	r2, r3, #9
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	fb02 f303 	mul.w	r3, r2, r3
 8014940:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	1e5a      	subs	r2, r3, #1
 8014946:	61fa      	str	r2, [r7, #28]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d102      	bne.n	8014952 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801494c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014950:	e0c9      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014956:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8014958:	69ba      	ldr	r2, [r7, #24]
 801495a:	4b67      	ldr	r3, [pc, #412]	@ (8014af8 <SDMMC_GetCmdResp1+0x1d8>)
 801495c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801495e:	2b00      	cmp	r3, #0
 8014960:	d0ef      	beq.n	8014942 <SDMMC_GetCmdResp1+0x22>
 8014962:	69bb      	ldr	r3, [r7, #24]
 8014964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014968:	2b00      	cmp	r3, #0
 801496a:	d1ea      	bne.n	8014942 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014970:	f003 0304 	and.w	r3, r3, #4
 8014974:	2b00      	cmp	r3, #0
 8014976:	d004      	beq.n	8014982 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	2204      	movs	r2, #4
 801497c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801497e:	2304      	movs	r3, #4
 8014980:	e0b1      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014986:	f003 0301 	and.w	r3, r3, #1
 801498a:	2b00      	cmp	r3, #0
 801498c:	d004      	beq.n	8014998 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	2201      	movs	r2, #1
 8014992:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014994:	2301      	movs	r3, #1
 8014996:	e0a6      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	4a58      	ldr	r2, [pc, #352]	@ (8014afc <SDMMC_GetCmdResp1+0x1dc>)
 801499c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801499e:	68f8      	ldr	r0, [r7, #12]
 80149a0:	f7ff fcf6 	bl	8014390 <SDMMC_GetCommandResponse>
 80149a4:	4603      	mov	r3, r0
 80149a6:	461a      	mov	r2, r3
 80149a8:	7afb      	ldrb	r3, [r7, #11]
 80149aa:	4293      	cmp	r3, r2
 80149ac:	d001      	beq.n	80149b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80149ae:	2301      	movs	r3, #1
 80149b0:	e099      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80149b2:	2100      	movs	r1, #0
 80149b4:	68f8      	ldr	r0, [r7, #12]
 80149b6:	f7ff fcf8 	bl	80143aa <SDMMC_GetResponse>
 80149ba:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80149bc:	697a      	ldr	r2, [r7, #20]
 80149be:	4b50      	ldr	r3, [pc, #320]	@ (8014b00 <SDMMC_GetCmdResp1+0x1e0>)
 80149c0:	4013      	ands	r3, r2
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d101      	bne.n	80149ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80149c6:	2300      	movs	r3, #0
 80149c8:	e08d      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	da02      	bge.n	80149d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80149d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80149d4:	e087      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80149d6:	697b      	ldr	r3, [r7, #20]
 80149d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d001      	beq.n	80149e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80149e0:	2340      	movs	r3, #64	@ 0x40
 80149e2:	e080      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d001      	beq.n	80149f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80149ee:	2380      	movs	r3, #128	@ 0x80
 80149f0:	e079      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d002      	beq.n	8014a02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80149fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014a00:	e071      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d002      	beq.n	8014a12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014a10:	e069      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d002      	beq.n	8014a22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014a20:	e061      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d002      	beq.n	8014a32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014a2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014a30:	e059      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014a40:	e051      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d002      	beq.n	8014a52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8014a50:	e049      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d002      	beq.n	8014a62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014a5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8014a60:	e041      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d002      	beq.n	8014a72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014a70:	e039      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014a72:	697b      	ldr	r3, [r7, #20]
 8014a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d002      	beq.n	8014a82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014a7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014a80:	e031      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d002      	beq.n	8014a92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8014a90:	e029      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d002      	beq.n	8014aa2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014a9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014aa0:	e021      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d002      	beq.n	8014ab2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014aac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014ab0:	e019      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d002      	beq.n	8014ac2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014abc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8014ac0:	e011      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d002      	beq.n	8014ad2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014acc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8014ad0:	e009      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	f003 0308 	and.w	r3, r3, #8
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d002      	beq.n	8014ae2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014adc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8014ae0:	e001      	b.n	8014ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014ae2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3720      	adds	r7, #32
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	24000158 	.word	0x24000158
 8014af4:	10624dd3 	.word	0x10624dd3
 8014af8:	00200045 	.word	0x00200045
 8014afc:	002000c5 	.word	0x002000c5
 8014b00:	fdffe008 	.word	0xfdffe008

08014b04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8014b04:	b480      	push	{r7}
 8014b06:	b085      	sub	sp, #20
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8014b8c <SDMMC_GetCmdResp2+0x88>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	4a1f      	ldr	r2, [pc, #124]	@ (8014b90 <SDMMC_GetCmdResp2+0x8c>)
 8014b12:	fba2 2303 	umull	r2, r3, r2, r3
 8014b16:	0a5b      	lsrs	r3, r3, #9
 8014b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014b1c:	fb02 f303 	mul.w	r3, r2, r3
 8014b20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	1e5a      	subs	r2, r3, #1
 8014b26:	60fa      	str	r2, [r7, #12]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d102      	bne.n	8014b32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014b30:	e026      	b.n	8014b80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b36:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d0ef      	beq.n	8014b22 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d1ea      	bne.n	8014b22 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b50:	f003 0304 	and.w	r3, r3, #4
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d004      	beq.n	8014b62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2204      	movs	r2, #4
 8014b5c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014b5e:	2304      	movs	r3, #4
 8014b60:	e00e      	b.n	8014b80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b66:	f003 0301 	and.w	r3, r3, #1
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d004      	beq.n	8014b78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	2201      	movs	r2, #1
 8014b72:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014b74:	2301      	movs	r3, #1
 8014b76:	e003      	b.n	8014b80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	4a06      	ldr	r2, [pc, #24]	@ (8014b94 <SDMMC_GetCmdResp2+0x90>)
 8014b7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8014b7e:	2300      	movs	r3, #0
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3714      	adds	r7, #20
 8014b84:	46bd      	mov	sp, r7
 8014b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8a:	4770      	bx	lr
 8014b8c:	24000158 	.word	0x24000158
 8014b90:	10624dd3 	.word	0x10624dd3
 8014b94:	002000c5 	.word	0x002000c5

08014b98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014b98:	b480      	push	{r7}
 8014b9a:	b085      	sub	sp, #20
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8014c0c <SDMMC_GetCmdResp3+0x74>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8014c10 <SDMMC_GetCmdResp3+0x78>)
 8014ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8014baa:	0a5b      	lsrs	r3, r3, #9
 8014bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014bb0:	fb02 f303 	mul.w	r3, r2, r3
 8014bb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	1e5a      	subs	r2, r3, #1
 8014bba:	60fa      	str	r2, [r7, #12]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d102      	bne.n	8014bc6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014bc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014bc4:	e01b      	b.n	8014bfe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d0ef      	beq.n	8014bb6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d1ea      	bne.n	8014bb6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014be4:	f003 0304 	and.w	r3, r3, #4
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d004      	beq.n	8014bf6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2204      	movs	r2, #4
 8014bf0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014bf2:	2304      	movs	r3, #4
 8014bf4:	e003      	b.n	8014bfe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	4a06      	ldr	r2, [pc, #24]	@ (8014c14 <SDMMC_GetCmdResp3+0x7c>)
 8014bfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8014bfc:	2300      	movs	r3, #0
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3714      	adds	r7, #20
 8014c02:	46bd      	mov	sp, r7
 8014c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop
 8014c0c:	24000158 	.word	0x24000158
 8014c10:	10624dd3 	.word	0x10624dd3
 8014c14:	002000c5 	.word	0x002000c5

08014c18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b088      	sub	sp, #32
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	460b      	mov	r3, r1
 8014c22:	607a      	str	r2, [r7, #4]
 8014c24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014c26:	4b35      	ldr	r3, [pc, #212]	@ (8014cfc <SDMMC_GetCmdResp6+0xe4>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	4a35      	ldr	r2, [pc, #212]	@ (8014d00 <SDMMC_GetCmdResp6+0xe8>)
 8014c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8014c30:	0a5b      	lsrs	r3, r3, #9
 8014c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014c36:	fb02 f303 	mul.w	r3, r2, r3
 8014c3a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014c3c:	69fb      	ldr	r3, [r7, #28]
 8014c3e:	1e5a      	subs	r2, r3, #1
 8014c40:	61fa      	str	r2, [r7, #28]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d102      	bne.n	8014c4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014c46:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014c4a:	e052      	b.n	8014cf2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c50:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d0ef      	beq.n	8014c3c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014c5c:	69bb      	ldr	r3, [r7, #24]
 8014c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d1ea      	bne.n	8014c3c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c6a:	f003 0304 	and.w	r3, r3, #4
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d004      	beq.n	8014c7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	2204      	movs	r2, #4
 8014c76:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014c78:	2304      	movs	r3, #4
 8014c7a:	e03a      	b.n	8014cf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c80:	f003 0301 	and.w	r3, r3, #1
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d004      	beq.n	8014c92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014c8e:	2301      	movs	r3, #1
 8014c90:	e02f      	b.n	8014cf2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014c92:	68f8      	ldr	r0, [r7, #12]
 8014c94:	f7ff fb7c 	bl	8014390 <SDMMC_GetCommandResponse>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	461a      	mov	r2, r3
 8014c9c:	7afb      	ldrb	r3, [r7, #11]
 8014c9e:	4293      	cmp	r3, r2
 8014ca0:	d001      	beq.n	8014ca6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	e025      	b.n	8014cf2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	4a16      	ldr	r2, [pc, #88]	@ (8014d04 <SDMMC_GetCmdResp6+0xec>)
 8014caa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014cac:	2100      	movs	r1, #0
 8014cae:	68f8      	ldr	r0, [r7, #12]
 8014cb0:	f7ff fb7b 	bl	80143aa <SDMMC_GetResponse>
 8014cb4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d106      	bne.n	8014cce <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	0c1b      	lsrs	r3, r3, #16
 8014cc4:	b29a      	uxth	r2, r3
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014cca:	2300      	movs	r3, #0
 8014ccc:	e011      	b.n	8014cf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014cce:	697b      	ldr	r3, [r7, #20]
 8014cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d002      	beq.n	8014cde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014cd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8014cdc:	e009      	b.n	8014cf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d002      	beq.n	8014cee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014cec:	e001      	b.n	8014cf2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014cee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3720      	adds	r7, #32
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	24000158 	.word	0x24000158
 8014d00:	10624dd3 	.word	0x10624dd3
 8014d04:	002000c5 	.word	0x002000c5

08014d08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b085      	sub	sp, #20
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014d10:	4b22      	ldr	r3, [pc, #136]	@ (8014d9c <SDMMC_GetCmdResp7+0x94>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	4a22      	ldr	r2, [pc, #136]	@ (8014da0 <SDMMC_GetCmdResp7+0x98>)
 8014d16:	fba2 2303 	umull	r2, r3, r2, r3
 8014d1a:	0a5b      	lsrs	r3, r3, #9
 8014d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014d20:	fb02 f303 	mul.w	r3, r2, r3
 8014d24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	1e5a      	subs	r2, r3, #1
 8014d2a:	60fa      	str	r2, [r7, #12]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d102      	bne.n	8014d36 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014d30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014d34:	e02c      	b.n	8014d90 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d3a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d0ef      	beq.n	8014d26 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014d46:	68bb      	ldr	r3, [r7, #8]
 8014d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d1ea      	bne.n	8014d26 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d54:	f003 0304 	and.w	r3, r3, #4
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d004      	beq.n	8014d66 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2204      	movs	r2, #4
 8014d60:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014d62:	2304      	movs	r3, #4
 8014d64:	e014      	b.n	8014d90 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d6a:	f003 0301 	and.w	r3, r3, #1
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d004      	beq.n	8014d7c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2201      	movs	r2, #1
 8014d76:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014d78:	2301      	movs	r3, #1
 8014d7a:	e009      	b.n	8014d90 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d002      	beq.n	8014d8e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2240      	movs	r2, #64	@ 0x40
 8014d8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8014d8e:	2300      	movs	r3, #0

}
 8014d90:	4618      	mov	r0, r3
 8014d92:	3714      	adds	r7, #20
 8014d94:	46bd      	mov	sp, r7
 8014d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9a:	4770      	bx	lr
 8014d9c:	24000158 	.word	0x24000158
 8014da0:	10624dd3 	.word	0x10624dd3

08014da4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b085      	sub	sp, #20
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014dac:	4b11      	ldr	r3, [pc, #68]	@ (8014df4 <SDMMC_GetCmdError+0x50>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	4a11      	ldr	r2, [pc, #68]	@ (8014df8 <SDMMC_GetCmdError+0x54>)
 8014db2:	fba2 2303 	umull	r2, r3, r2, r3
 8014db6:	0a5b      	lsrs	r3, r3, #9
 8014db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014dbc:	fb02 f303 	mul.w	r3, r2, r3
 8014dc0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	1e5a      	subs	r2, r3, #1
 8014dc6:	60fa      	str	r2, [r7, #12]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d102      	bne.n	8014dd2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014dcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8014dd0:	e009      	b.n	8014de6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d0f1      	beq.n	8014dc2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	4a06      	ldr	r2, [pc, #24]	@ (8014dfc <SDMMC_GetCmdError+0x58>)
 8014de2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8014de4:	2300      	movs	r3, #0
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3714      	adds	r7, #20
 8014dea:	46bd      	mov	sp, r7
 8014dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df0:	4770      	bx	lr
 8014df2:	bf00      	nop
 8014df4:	24000158 	.word	0x24000158
 8014df8:	10624dd3 	.word	0x10624dd3
 8014dfc:	002000c5 	.word	0x002000c5

08014e00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014e04:	4904      	ldr	r1, [pc, #16]	@ (8014e18 <MX_FATFS_Init+0x18>)
 8014e06:	4805      	ldr	r0, [pc, #20]	@ (8014e1c <MX_FATFS_Init+0x1c>)
 8014e08:	f000 f9e4 	bl	80151d4 <FATFS_LinkDriver>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	461a      	mov	r2, r3
 8014e10:	4b03      	ldr	r3, [pc, #12]	@ (8014e20 <MX_FATFS_Init+0x20>)
 8014e12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014e14:	bf00      	nop
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	24001980 	.word	0x24001980
 8014e1c:	08019ef8 	.word	0x08019ef8
 8014e20:	2400197c 	.word	0x2400197c

08014e24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014e2e:	f000 f879 	bl	8014f24 <BSP_SD_IsDetected>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	d001      	beq.n	8014e3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014e38:	2302      	movs	r3, #2
 8014e3a:	e012      	b.n	8014e62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8014e3c:	480b      	ldr	r0, [pc, #44]	@ (8014e6c <BSP_SD_Init+0x48>)
 8014e3e:	f7fa fae5 	bl	800f40c <HAL_SD_Init>
 8014e42:	4603      	mov	r3, r0
 8014e44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014e46:	79fb      	ldrb	r3, [r7, #7]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d109      	bne.n	8014e60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014e4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8014e50:	4806      	ldr	r0, [pc, #24]	@ (8014e6c <BSP_SD_Init+0x48>)
 8014e52:	f7fb f9a1 	bl	8010198 <HAL_SD_ConfigWideBusOperation>
 8014e56:	4603      	mov	r3, r0
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d001      	beq.n	8014e60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014e60:	79fb      	ldrb	r3, [r7, #7]
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3708      	adds	r7, #8
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	24001580 	.word	0x24001580

08014e70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b088      	sub	sp, #32
 8014e74:	af02      	add	r7, sp, #8
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	60b9      	str	r1, [r7, #8]
 8014e7a:	607a      	str	r2, [r7, #4]
 8014e7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	9300      	str	r3, [sp, #0]
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	68ba      	ldr	r2, [r7, #8]
 8014e8a:	68f9      	ldr	r1, [r7, #12]
 8014e8c:	4806      	ldr	r0, [pc, #24]	@ (8014ea8 <BSP_SD_ReadBlocks+0x38>)
 8014e8e:	f7fa fbdd 	bl	800f64c <HAL_SD_ReadBlocks>
 8014e92:	4603      	mov	r3, r0
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d001      	beq.n	8014e9c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8014e98:	2301      	movs	r3, #1
 8014e9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3718      	adds	r7, #24
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}
 8014ea6:	bf00      	nop
 8014ea8:	24001580 	.word	0x24001580

08014eac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b088      	sub	sp, #32
 8014eb0:	af02      	add	r7, sp, #8
 8014eb2:	60f8      	str	r0, [r7, #12]
 8014eb4:	60b9      	str	r1, [r7, #8]
 8014eb6:	607a      	str	r2, [r7, #4]
 8014eb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	68ba      	ldr	r2, [r7, #8]
 8014ec6:	68f9      	ldr	r1, [r7, #12]
 8014ec8:	4806      	ldr	r0, [pc, #24]	@ (8014ee4 <BSP_SD_WriteBlocks+0x38>)
 8014eca:	f7fa fd49 	bl	800f960 <HAL_SD_WriteBlocks>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d001      	beq.n	8014ed8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3718      	adds	r7, #24
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	24001580 	.word	0x24001580

08014ee8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014eec:	4805      	ldr	r0, [pc, #20]	@ (8014f04 <BSP_SD_GetCardState+0x1c>)
 8014eee:	f7fb fa65 	bl	80103bc <HAL_SD_GetCardState>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	2b04      	cmp	r3, #4
 8014ef6:	bf14      	ite	ne
 8014ef8:	2301      	movne	r3, #1
 8014efa:	2300      	moveq	r3, #0
 8014efc:	b2db      	uxtb	r3, r3
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	24001580 	.word	0x24001580

08014f08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8014f10:	6879      	ldr	r1, [r7, #4]
 8014f12:	4803      	ldr	r0, [pc, #12]	@ (8014f20 <BSP_SD_GetCardInfo+0x18>)
 8014f14:	f7fb f914 	bl	8010140 <HAL_SD_GetCardInfo>
}
 8014f18:	bf00      	nop
 8014f1a:	3708      	adds	r7, #8
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}
 8014f20:	24001580 	.word	0x24001580

08014f24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b082      	sub	sp, #8
 8014f28:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014f2e:	f000 f80b 	bl	8014f48 <BSP_PlatformIsDetected>
 8014f32:	4603      	mov	r3, r0
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d101      	bne.n	8014f3c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014f3c:	79fb      	ldrb	r3, [r7, #7]
 8014f3e:	b2db      	uxtb	r3, r3
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3708      	adds	r7, #8
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b082      	sub	sp, #8
 8014f4c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014f4e:	2301      	movs	r3, #1
 8014f50:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014f52:	2180      	movs	r1, #128	@ 0x80
 8014f54:	4806      	ldr	r0, [pc, #24]	@ (8014f70 <BSP_PlatformIsDetected+0x28>)
 8014f56:	f7f6 f8b9 	bl	800b0cc <HAL_GPIO_ReadPin>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d001      	beq.n	8014f64 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014f60:	2300      	movs	r3, #0
 8014f62:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014f64:	79fb      	ldrb	r3, [r7, #7]
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3708      	adds	r7, #8
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	58020800 	.word	0x58020800

08014f74 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b082      	sub	sp, #8
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8014fac <SD_CheckStatus+0x38>)
 8014f80:	2201      	movs	r2, #1
 8014f82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014f84:	f7ff ffb0 	bl	8014ee8 <BSP_SD_GetCardState>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d107      	bne.n	8014f9e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014f8e:	4b07      	ldr	r3, [pc, #28]	@ (8014fac <SD_CheckStatus+0x38>)
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	b2db      	uxtb	r3, r3
 8014f94:	f023 0301 	bic.w	r3, r3, #1
 8014f98:	b2da      	uxtb	r2, r3
 8014f9a:	4b04      	ldr	r3, [pc, #16]	@ (8014fac <SD_CheckStatus+0x38>)
 8014f9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014f9e:	4b03      	ldr	r3, [pc, #12]	@ (8014fac <SD_CheckStatus+0x38>)
 8014fa0:	781b      	ldrb	r3, [r3, #0]
 8014fa2:	b2db      	uxtb	r3, r3
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3708      	adds	r7, #8
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	24000185 	.word	0x24000185

08014fb0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b082      	sub	sp, #8
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8014fba:	4b0b      	ldr	r3, [pc, #44]	@ (8014fe8 <SD_initialize+0x38>)
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014fc0:	f7ff ff30 	bl	8014e24 <BSP_SD_Init>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d107      	bne.n	8014fda <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8014fca:	79fb      	ldrb	r3, [r7, #7]
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7ff ffd1 	bl	8014f74 <SD_CheckStatus>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	461a      	mov	r2, r3
 8014fd6:	4b04      	ldr	r3, [pc, #16]	@ (8014fe8 <SD_initialize+0x38>)
 8014fd8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014fda:	4b03      	ldr	r3, [pc, #12]	@ (8014fe8 <SD_initialize+0x38>)
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	b2db      	uxtb	r3, r3
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3708      	adds	r7, #8
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	24000185 	.word	0x24000185

08014fec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014ff6:	79fb      	ldrb	r3, [r7, #7]
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7ff ffbb 	bl	8014f74 <SD_CheckStatus>
 8014ffe:	4603      	mov	r3, r0
}
 8015000:	4618      	mov	r0, r3
 8015002:	3708      	adds	r7, #8
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b086      	sub	sp, #24
 801500c:	af00      	add	r7, sp, #0
 801500e:	60b9      	str	r1, [r7, #8]
 8015010:	607a      	str	r2, [r7, #4]
 8015012:	603b      	str	r3, [r7, #0]
 8015014:	4603      	mov	r3, r0
 8015016:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015018:	2301      	movs	r3, #1
 801501a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 801501c:	f04f 33ff 	mov.w	r3, #4294967295
 8015020:	683a      	ldr	r2, [r7, #0]
 8015022:	6879      	ldr	r1, [r7, #4]
 8015024:	68b8      	ldr	r0, [r7, #8]
 8015026:	f7ff ff23 	bl	8014e70 <BSP_SD_ReadBlocks>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d107      	bne.n	8015040 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8015030:	bf00      	nop
 8015032:	f7ff ff59 	bl	8014ee8 <BSP_SD_GetCardState>
 8015036:	4603      	mov	r3, r0
 8015038:	2b00      	cmp	r3, #0
 801503a:	d1fa      	bne.n	8015032 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 801503c:	2300      	movs	r3, #0
 801503e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8015040:	7dfb      	ldrb	r3, [r7, #23]
}
 8015042:	4618      	mov	r0, r3
 8015044:	3718      	adds	r7, #24
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}

0801504a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801504a:	b580      	push	{r7, lr}
 801504c:	b086      	sub	sp, #24
 801504e:	af00      	add	r7, sp, #0
 8015050:	60b9      	str	r1, [r7, #8]
 8015052:	607a      	str	r2, [r7, #4]
 8015054:	603b      	str	r3, [r7, #0]
 8015056:	4603      	mov	r3, r0
 8015058:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801505a:	2301      	movs	r3, #1
 801505c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801505e:	f04f 33ff 	mov.w	r3, #4294967295
 8015062:	683a      	ldr	r2, [r7, #0]
 8015064:	6879      	ldr	r1, [r7, #4]
 8015066:	68b8      	ldr	r0, [r7, #8]
 8015068:	f7ff ff20 	bl	8014eac <BSP_SD_WriteBlocks>
 801506c:	4603      	mov	r3, r0
 801506e:	2b00      	cmp	r3, #0
 8015070:	d107      	bne.n	8015082 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8015072:	bf00      	nop
 8015074:	f7ff ff38 	bl	8014ee8 <BSP_SD_GetCardState>
 8015078:	4603      	mov	r3, r0
 801507a:	2b00      	cmp	r3, #0
 801507c:	d1fa      	bne.n	8015074 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801507e:	2300      	movs	r3, #0
 8015080:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8015082:	7dfb      	ldrb	r3, [r7, #23]
}
 8015084:	4618      	mov	r0, r3
 8015086:	3718      	adds	r7, #24
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b08c      	sub	sp, #48	@ 0x30
 8015090:	af00      	add	r7, sp, #0
 8015092:	4603      	mov	r3, r0
 8015094:	603a      	str	r2, [r7, #0]
 8015096:	71fb      	strb	r3, [r7, #7]
 8015098:	460b      	mov	r3, r1
 801509a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801509c:	2301      	movs	r3, #1
 801509e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80150a2:	4b25      	ldr	r3, [pc, #148]	@ (8015138 <SD_ioctl+0xac>)
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	b2db      	uxtb	r3, r3
 80150a8:	f003 0301 	and.w	r3, r3, #1
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d001      	beq.n	80150b4 <SD_ioctl+0x28>
 80150b0:	2303      	movs	r3, #3
 80150b2:	e03c      	b.n	801512e <SD_ioctl+0xa2>

  switch (cmd)
 80150b4:	79bb      	ldrb	r3, [r7, #6]
 80150b6:	2b03      	cmp	r3, #3
 80150b8:	d834      	bhi.n	8015124 <SD_ioctl+0x98>
 80150ba:	a201      	add	r2, pc, #4	@ (adr r2, 80150c0 <SD_ioctl+0x34>)
 80150bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150c0:	080150d1 	.word	0x080150d1
 80150c4:	080150d9 	.word	0x080150d9
 80150c8:	080150f1 	.word	0x080150f1
 80150cc:	0801510b 	.word	0x0801510b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80150d0:	2300      	movs	r3, #0
 80150d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80150d6:	e028      	b.n	801512a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80150d8:	f107 0308 	add.w	r3, r7, #8
 80150dc:	4618      	mov	r0, r3
 80150de:	f7ff ff13 	bl	8014f08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80150e2:	6a3a      	ldr	r2, [r7, #32]
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80150e8:	2300      	movs	r3, #0
 80150ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80150ee:	e01c      	b.n	801512a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80150f0:	f107 0308 	add.w	r3, r7, #8
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7ff ff07 	bl	8014f08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80150fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150fc:	b29a      	uxth	r2, r3
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015102:	2300      	movs	r3, #0
 8015104:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8015108:	e00f      	b.n	801512a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801510a:	f107 0308 	add.w	r3, r7, #8
 801510e:	4618      	mov	r0, r3
 8015110:	f7ff fefa 	bl	8014f08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015116:	0a5a      	lsrs	r2, r3, #9
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801511c:	2300      	movs	r3, #0
 801511e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8015122:	e002      	b.n	801512a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015124:	2304      	movs	r3, #4
 8015126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801512a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801512e:	4618      	mov	r0, r3
 8015130:	3730      	adds	r7, #48	@ 0x30
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}
 8015136:	bf00      	nop
 8015138:	24000185 	.word	0x24000185

0801513c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801513c:	b480      	push	{r7}
 801513e:	b087      	sub	sp, #28
 8015140:	af00      	add	r7, sp, #0
 8015142:	60f8      	str	r0, [r7, #12]
 8015144:	60b9      	str	r1, [r7, #8]
 8015146:	4613      	mov	r3, r2
 8015148:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801514a:	2301      	movs	r3, #1
 801514c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801514e:	2300      	movs	r3, #0
 8015150:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015152:	4b1f      	ldr	r3, [pc, #124]	@ (80151d0 <FATFS_LinkDriverEx+0x94>)
 8015154:	7a5b      	ldrb	r3, [r3, #9]
 8015156:	b2db      	uxtb	r3, r3
 8015158:	2b00      	cmp	r3, #0
 801515a:	d131      	bne.n	80151c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801515c:	4b1c      	ldr	r3, [pc, #112]	@ (80151d0 <FATFS_LinkDriverEx+0x94>)
 801515e:	7a5b      	ldrb	r3, [r3, #9]
 8015160:	b2db      	uxtb	r3, r3
 8015162:	461a      	mov	r2, r3
 8015164:	4b1a      	ldr	r3, [pc, #104]	@ (80151d0 <FATFS_LinkDriverEx+0x94>)
 8015166:	2100      	movs	r1, #0
 8015168:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801516a:	4b19      	ldr	r3, [pc, #100]	@ (80151d0 <FATFS_LinkDriverEx+0x94>)
 801516c:	7a5b      	ldrb	r3, [r3, #9]
 801516e:	b2db      	uxtb	r3, r3
 8015170:	4a17      	ldr	r2, [pc, #92]	@ (80151d0 <FATFS_LinkDriverEx+0x94>)
 8015172:	009b      	lsls	r3, r3, #2
 8015174:	4413      	add	r3, r2
 8015176:	68fa      	ldr	r2, [r7, #12]
 8015178:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801517a:	4b15      	ldr	r3, [pc, #84]	@ (80151d0 <FATFS_LinkDriverEx+0x94>)
 801517c:	7a5b      	ldrb	r3, [r3, #9]
 801517e:	b2db      	uxtb	r3, r3
 8015180:	461a      	mov	r2, r3
 8015182:	4b13      	ldr	r3, [pc, #76]	@ (80151d0 <FATFS_LinkDriverEx+0x94>)
 8015184:	4413      	add	r3, r2
 8015186:	79fa      	ldrb	r2, [r7, #7]
 8015188:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801518a:	4b11      	ldr	r3, [pc, #68]	@ (80151d0 <FATFS_LinkDriverEx+0x94>)
 801518c:	7a5b      	ldrb	r3, [r3, #9]
 801518e:	b2db      	uxtb	r3, r3
 8015190:	1c5a      	adds	r2, r3, #1
 8015192:	b2d1      	uxtb	r1, r2
 8015194:	4a0e      	ldr	r2, [pc, #56]	@ (80151d0 <FATFS_LinkDriverEx+0x94>)
 8015196:	7251      	strb	r1, [r2, #9]
 8015198:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801519a:	7dbb      	ldrb	r3, [r7, #22]
 801519c:	3330      	adds	r3, #48	@ 0x30
 801519e:	b2da      	uxtb	r2, r3
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	3301      	adds	r3, #1
 80151a8:	223a      	movs	r2, #58	@ 0x3a
 80151aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	3302      	adds	r3, #2
 80151b0:	222f      	movs	r2, #47	@ 0x2f
 80151b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	3303      	adds	r3, #3
 80151b8:	2200      	movs	r2, #0
 80151ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80151bc:	2300      	movs	r3, #0
 80151be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80151c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	371c      	adds	r7, #28
 80151c6:	46bd      	mov	sp, r7
 80151c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151cc:	4770      	bx	lr
 80151ce:	bf00      	nop
 80151d0:	24001984 	.word	0x24001984

080151d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b082      	sub	sp, #8
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80151de:	2200      	movs	r2, #0
 80151e0:	6839      	ldr	r1, [r7, #0]
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f7ff ffaa 	bl	801513c <FATFS_LinkDriverEx>
 80151e8:	4603      	mov	r3, r0
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3708      	adds	r7, #8
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}

080151f2 <__cvt>:
 80151f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151f4:	ed2d 8b02 	vpush	{d8}
 80151f8:	eeb0 8b40 	vmov.f64	d8, d0
 80151fc:	b085      	sub	sp, #20
 80151fe:	4617      	mov	r7, r2
 8015200:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015202:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015204:	ee18 2a90 	vmov	r2, s17
 8015208:	f025 0520 	bic.w	r5, r5, #32
 801520c:	2a00      	cmp	r2, #0
 801520e:	bfb6      	itet	lt
 8015210:	222d      	movlt	r2, #45	@ 0x2d
 8015212:	2200      	movge	r2, #0
 8015214:	eeb1 8b40 	vneglt.f64	d8, d0
 8015218:	2d46      	cmp	r5, #70	@ 0x46
 801521a:	460c      	mov	r4, r1
 801521c:	701a      	strb	r2, [r3, #0]
 801521e:	d004      	beq.n	801522a <__cvt+0x38>
 8015220:	2d45      	cmp	r5, #69	@ 0x45
 8015222:	d100      	bne.n	8015226 <__cvt+0x34>
 8015224:	3401      	adds	r4, #1
 8015226:	2102      	movs	r1, #2
 8015228:	e000      	b.n	801522c <__cvt+0x3a>
 801522a:	2103      	movs	r1, #3
 801522c:	ab03      	add	r3, sp, #12
 801522e:	9301      	str	r3, [sp, #4]
 8015230:	ab02      	add	r3, sp, #8
 8015232:	9300      	str	r3, [sp, #0]
 8015234:	4622      	mov	r2, r4
 8015236:	4633      	mov	r3, r6
 8015238:	eeb0 0b48 	vmov.f64	d0, d8
 801523c:	f001 f964 	bl	8016508 <_dtoa_r>
 8015240:	2d47      	cmp	r5, #71	@ 0x47
 8015242:	d114      	bne.n	801526e <__cvt+0x7c>
 8015244:	07fb      	lsls	r3, r7, #31
 8015246:	d50a      	bpl.n	801525e <__cvt+0x6c>
 8015248:	1902      	adds	r2, r0, r4
 801524a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015252:	bf08      	it	eq
 8015254:	9203      	streq	r2, [sp, #12]
 8015256:	2130      	movs	r1, #48	@ 0x30
 8015258:	9b03      	ldr	r3, [sp, #12]
 801525a:	4293      	cmp	r3, r2
 801525c:	d319      	bcc.n	8015292 <__cvt+0xa0>
 801525e:	9b03      	ldr	r3, [sp, #12]
 8015260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015262:	1a1b      	subs	r3, r3, r0
 8015264:	6013      	str	r3, [r2, #0]
 8015266:	b005      	add	sp, #20
 8015268:	ecbd 8b02 	vpop	{d8}
 801526c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801526e:	2d46      	cmp	r5, #70	@ 0x46
 8015270:	eb00 0204 	add.w	r2, r0, r4
 8015274:	d1e9      	bne.n	801524a <__cvt+0x58>
 8015276:	7803      	ldrb	r3, [r0, #0]
 8015278:	2b30      	cmp	r3, #48	@ 0x30
 801527a:	d107      	bne.n	801528c <__cvt+0x9a>
 801527c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015284:	bf1c      	itt	ne
 8015286:	f1c4 0401 	rsbne	r4, r4, #1
 801528a:	6034      	strne	r4, [r6, #0]
 801528c:	6833      	ldr	r3, [r6, #0]
 801528e:	441a      	add	r2, r3
 8015290:	e7db      	b.n	801524a <__cvt+0x58>
 8015292:	1c5c      	adds	r4, r3, #1
 8015294:	9403      	str	r4, [sp, #12]
 8015296:	7019      	strb	r1, [r3, #0]
 8015298:	e7de      	b.n	8015258 <__cvt+0x66>

0801529a <__exponent>:
 801529a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801529c:	2900      	cmp	r1, #0
 801529e:	bfba      	itte	lt
 80152a0:	4249      	neglt	r1, r1
 80152a2:	232d      	movlt	r3, #45	@ 0x2d
 80152a4:	232b      	movge	r3, #43	@ 0x2b
 80152a6:	2909      	cmp	r1, #9
 80152a8:	7002      	strb	r2, [r0, #0]
 80152aa:	7043      	strb	r3, [r0, #1]
 80152ac:	dd29      	ble.n	8015302 <__exponent+0x68>
 80152ae:	f10d 0307 	add.w	r3, sp, #7
 80152b2:	461d      	mov	r5, r3
 80152b4:	270a      	movs	r7, #10
 80152b6:	461a      	mov	r2, r3
 80152b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80152bc:	fb07 1416 	mls	r4, r7, r6, r1
 80152c0:	3430      	adds	r4, #48	@ 0x30
 80152c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80152c6:	460c      	mov	r4, r1
 80152c8:	2c63      	cmp	r4, #99	@ 0x63
 80152ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80152ce:	4631      	mov	r1, r6
 80152d0:	dcf1      	bgt.n	80152b6 <__exponent+0x1c>
 80152d2:	3130      	adds	r1, #48	@ 0x30
 80152d4:	1e94      	subs	r4, r2, #2
 80152d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80152da:	1c41      	adds	r1, r0, #1
 80152dc:	4623      	mov	r3, r4
 80152de:	42ab      	cmp	r3, r5
 80152e0:	d30a      	bcc.n	80152f8 <__exponent+0x5e>
 80152e2:	f10d 0309 	add.w	r3, sp, #9
 80152e6:	1a9b      	subs	r3, r3, r2
 80152e8:	42ac      	cmp	r4, r5
 80152ea:	bf88      	it	hi
 80152ec:	2300      	movhi	r3, #0
 80152ee:	3302      	adds	r3, #2
 80152f0:	4403      	add	r3, r0
 80152f2:	1a18      	subs	r0, r3, r0
 80152f4:	b003      	add	sp, #12
 80152f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80152fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015300:	e7ed      	b.n	80152de <__exponent+0x44>
 8015302:	2330      	movs	r3, #48	@ 0x30
 8015304:	3130      	adds	r1, #48	@ 0x30
 8015306:	7083      	strb	r3, [r0, #2]
 8015308:	70c1      	strb	r1, [r0, #3]
 801530a:	1d03      	adds	r3, r0, #4
 801530c:	e7f1      	b.n	80152f2 <__exponent+0x58>
	...

08015310 <_printf_float>:
 8015310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015314:	b08d      	sub	sp, #52	@ 0x34
 8015316:	460c      	mov	r4, r1
 8015318:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801531c:	4616      	mov	r6, r2
 801531e:	461f      	mov	r7, r3
 8015320:	4605      	mov	r5, r0
 8015322:	f000 ffdb 	bl	80162dc <_localeconv_r>
 8015326:	f8d0 b000 	ldr.w	fp, [r0]
 801532a:	4658      	mov	r0, fp
 801532c:	f7eb f840 	bl	80003b0 <strlen>
 8015330:	2300      	movs	r3, #0
 8015332:	930a      	str	r3, [sp, #40]	@ 0x28
 8015334:	f8d8 3000 	ldr.w	r3, [r8]
 8015338:	f894 9018 	ldrb.w	r9, [r4, #24]
 801533c:	6822      	ldr	r2, [r4, #0]
 801533e:	9005      	str	r0, [sp, #20]
 8015340:	3307      	adds	r3, #7
 8015342:	f023 0307 	bic.w	r3, r3, #7
 8015346:	f103 0108 	add.w	r1, r3, #8
 801534a:	f8c8 1000 	str.w	r1, [r8]
 801534e:	ed93 0b00 	vldr	d0, [r3]
 8015352:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80155b0 <_printf_float+0x2a0>
 8015356:	eeb0 7bc0 	vabs.f64	d7, d0
 801535a:	eeb4 7b46 	vcmp.f64	d7, d6
 801535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015362:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8015366:	dd24      	ble.n	80153b2 <_printf_float+0xa2>
 8015368:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015370:	d502      	bpl.n	8015378 <_printf_float+0x68>
 8015372:	232d      	movs	r3, #45	@ 0x2d
 8015374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015378:	498f      	ldr	r1, [pc, #572]	@ (80155b8 <_printf_float+0x2a8>)
 801537a:	4b90      	ldr	r3, [pc, #576]	@ (80155bc <_printf_float+0x2ac>)
 801537c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8015380:	bf94      	ite	ls
 8015382:	4688      	movls	r8, r1
 8015384:	4698      	movhi	r8, r3
 8015386:	f022 0204 	bic.w	r2, r2, #4
 801538a:	2303      	movs	r3, #3
 801538c:	6123      	str	r3, [r4, #16]
 801538e:	6022      	str	r2, [r4, #0]
 8015390:	f04f 0a00 	mov.w	sl, #0
 8015394:	9700      	str	r7, [sp, #0]
 8015396:	4633      	mov	r3, r6
 8015398:	aa0b      	add	r2, sp, #44	@ 0x2c
 801539a:	4621      	mov	r1, r4
 801539c:	4628      	mov	r0, r5
 801539e:	f000 f9d1 	bl	8015744 <_printf_common>
 80153a2:	3001      	adds	r0, #1
 80153a4:	f040 8089 	bne.w	80154ba <_printf_float+0x1aa>
 80153a8:	f04f 30ff 	mov.w	r0, #4294967295
 80153ac:	b00d      	add	sp, #52	@ 0x34
 80153ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80153b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ba:	d709      	bvc.n	80153d0 <_printf_float+0xc0>
 80153bc:	ee10 3a90 	vmov	r3, s1
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	bfbc      	itt	lt
 80153c4:	232d      	movlt	r3, #45	@ 0x2d
 80153c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80153ca:	497d      	ldr	r1, [pc, #500]	@ (80155c0 <_printf_float+0x2b0>)
 80153cc:	4b7d      	ldr	r3, [pc, #500]	@ (80155c4 <_printf_float+0x2b4>)
 80153ce:	e7d5      	b.n	801537c <_printf_float+0x6c>
 80153d0:	6863      	ldr	r3, [r4, #4]
 80153d2:	1c59      	adds	r1, r3, #1
 80153d4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80153d8:	d139      	bne.n	801544e <_printf_float+0x13e>
 80153da:	2306      	movs	r3, #6
 80153dc:	6063      	str	r3, [r4, #4]
 80153de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80153e2:	2300      	movs	r3, #0
 80153e4:	6022      	str	r2, [r4, #0]
 80153e6:	9303      	str	r3, [sp, #12]
 80153e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80153ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80153ee:	ab09      	add	r3, sp, #36	@ 0x24
 80153f0:	9300      	str	r3, [sp, #0]
 80153f2:	6861      	ldr	r1, [r4, #4]
 80153f4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80153f8:	4628      	mov	r0, r5
 80153fa:	f7ff fefa 	bl	80151f2 <__cvt>
 80153fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015402:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015404:	4680      	mov	r8, r0
 8015406:	d129      	bne.n	801545c <_printf_float+0x14c>
 8015408:	1cc8      	adds	r0, r1, #3
 801540a:	db02      	blt.n	8015412 <_printf_float+0x102>
 801540c:	6863      	ldr	r3, [r4, #4]
 801540e:	4299      	cmp	r1, r3
 8015410:	dd41      	ble.n	8015496 <_printf_float+0x186>
 8015412:	f1a9 0902 	sub.w	r9, r9, #2
 8015416:	fa5f f989 	uxtb.w	r9, r9
 801541a:	3901      	subs	r1, #1
 801541c:	464a      	mov	r2, r9
 801541e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015422:	9109      	str	r1, [sp, #36]	@ 0x24
 8015424:	f7ff ff39 	bl	801529a <__exponent>
 8015428:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801542a:	1813      	adds	r3, r2, r0
 801542c:	2a01      	cmp	r2, #1
 801542e:	4682      	mov	sl, r0
 8015430:	6123      	str	r3, [r4, #16]
 8015432:	dc02      	bgt.n	801543a <_printf_float+0x12a>
 8015434:	6822      	ldr	r2, [r4, #0]
 8015436:	07d2      	lsls	r2, r2, #31
 8015438:	d501      	bpl.n	801543e <_printf_float+0x12e>
 801543a:	3301      	adds	r3, #1
 801543c:	6123      	str	r3, [r4, #16]
 801543e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8015442:	2b00      	cmp	r3, #0
 8015444:	d0a6      	beq.n	8015394 <_printf_float+0x84>
 8015446:	232d      	movs	r3, #45	@ 0x2d
 8015448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801544c:	e7a2      	b.n	8015394 <_printf_float+0x84>
 801544e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015452:	d1c4      	bne.n	80153de <_printf_float+0xce>
 8015454:	2b00      	cmp	r3, #0
 8015456:	d1c2      	bne.n	80153de <_printf_float+0xce>
 8015458:	2301      	movs	r3, #1
 801545a:	e7bf      	b.n	80153dc <_printf_float+0xcc>
 801545c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015460:	d9db      	bls.n	801541a <_printf_float+0x10a>
 8015462:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8015466:	d118      	bne.n	801549a <_printf_float+0x18a>
 8015468:	2900      	cmp	r1, #0
 801546a:	6863      	ldr	r3, [r4, #4]
 801546c:	dd0b      	ble.n	8015486 <_printf_float+0x176>
 801546e:	6121      	str	r1, [r4, #16]
 8015470:	b913      	cbnz	r3, 8015478 <_printf_float+0x168>
 8015472:	6822      	ldr	r2, [r4, #0]
 8015474:	07d0      	lsls	r0, r2, #31
 8015476:	d502      	bpl.n	801547e <_printf_float+0x16e>
 8015478:	3301      	adds	r3, #1
 801547a:	440b      	add	r3, r1
 801547c:	6123      	str	r3, [r4, #16]
 801547e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015480:	f04f 0a00 	mov.w	sl, #0
 8015484:	e7db      	b.n	801543e <_printf_float+0x12e>
 8015486:	b913      	cbnz	r3, 801548e <_printf_float+0x17e>
 8015488:	6822      	ldr	r2, [r4, #0]
 801548a:	07d2      	lsls	r2, r2, #31
 801548c:	d501      	bpl.n	8015492 <_printf_float+0x182>
 801548e:	3302      	adds	r3, #2
 8015490:	e7f4      	b.n	801547c <_printf_float+0x16c>
 8015492:	2301      	movs	r3, #1
 8015494:	e7f2      	b.n	801547c <_printf_float+0x16c>
 8015496:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801549a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801549c:	4299      	cmp	r1, r3
 801549e:	db05      	blt.n	80154ac <_printf_float+0x19c>
 80154a0:	6823      	ldr	r3, [r4, #0]
 80154a2:	6121      	str	r1, [r4, #16]
 80154a4:	07d8      	lsls	r0, r3, #31
 80154a6:	d5ea      	bpl.n	801547e <_printf_float+0x16e>
 80154a8:	1c4b      	adds	r3, r1, #1
 80154aa:	e7e7      	b.n	801547c <_printf_float+0x16c>
 80154ac:	2900      	cmp	r1, #0
 80154ae:	bfd4      	ite	le
 80154b0:	f1c1 0202 	rsble	r2, r1, #2
 80154b4:	2201      	movgt	r2, #1
 80154b6:	4413      	add	r3, r2
 80154b8:	e7e0      	b.n	801547c <_printf_float+0x16c>
 80154ba:	6823      	ldr	r3, [r4, #0]
 80154bc:	055a      	lsls	r2, r3, #21
 80154be:	d407      	bmi.n	80154d0 <_printf_float+0x1c0>
 80154c0:	6923      	ldr	r3, [r4, #16]
 80154c2:	4642      	mov	r2, r8
 80154c4:	4631      	mov	r1, r6
 80154c6:	4628      	mov	r0, r5
 80154c8:	47b8      	blx	r7
 80154ca:	3001      	adds	r0, #1
 80154cc:	d12a      	bne.n	8015524 <_printf_float+0x214>
 80154ce:	e76b      	b.n	80153a8 <_printf_float+0x98>
 80154d0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80154d4:	f240 80e0 	bls.w	8015698 <_printf_float+0x388>
 80154d8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80154dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80154e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e4:	d133      	bne.n	801554e <_printf_float+0x23e>
 80154e6:	4a38      	ldr	r2, [pc, #224]	@ (80155c8 <_printf_float+0x2b8>)
 80154e8:	2301      	movs	r3, #1
 80154ea:	4631      	mov	r1, r6
 80154ec:	4628      	mov	r0, r5
 80154ee:	47b8      	blx	r7
 80154f0:	3001      	adds	r0, #1
 80154f2:	f43f af59 	beq.w	80153a8 <_printf_float+0x98>
 80154f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80154fa:	4543      	cmp	r3, r8
 80154fc:	db02      	blt.n	8015504 <_printf_float+0x1f4>
 80154fe:	6823      	ldr	r3, [r4, #0]
 8015500:	07d8      	lsls	r0, r3, #31
 8015502:	d50f      	bpl.n	8015524 <_printf_float+0x214>
 8015504:	9b05      	ldr	r3, [sp, #20]
 8015506:	465a      	mov	r2, fp
 8015508:	4631      	mov	r1, r6
 801550a:	4628      	mov	r0, r5
 801550c:	47b8      	blx	r7
 801550e:	3001      	adds	r0, #1
 8015510:	f43f af4a 	beq.w	80153a8 <_printf_float+0x98>
 8015514:	f04f 0900 	mov.w	r9, #0
 8015518:	f108 38ff 	add.w	r8, r8, #4294967295
 801551c:	f104 0a1a 	add.w	sl, r4, #26
 8015520:	45c8      	cmp	r8, r9
 8015522:	dc09      	bgt.n	8015538 <_printf_float+0x228>
 8015524:	6823      	ldr	r3, [r4, #0]
 8015526:	079b      	lsls	r3, r3, #30
 8015528:	f100 8107 	bmi.w	801573a <_printf_float+0x42a>
 801552c:	68e0      	ldr	r0, [r4, #12]
 801552e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015530:	4298      	cmp	r0, r3
 8015532:	bfb8      	it	lt
 8015534:	4618      	movlt	r0, r3
 8015536:	e739      	b.n	80153ac <_printf_float+0x9c>
 8015538:	2301      	movs	r3, #1
 801553a:	4652      	mov	r2, sl
 801553c:	4631      	mov	r1, r6
 801553e:	4628      	mov	r0, r5
 8015540:	47b8      	blx	r7
 8015542:	3001      	adds	r0, #1
 8015544:	f43f af30 	beq.w	80153a8 <_printf_float+0x98>
 8015548:	f109 0901 	add.w	r9, r9, #1
 801554c:	e7e8      	b.n	8015520 <_printf_float+0x210>
 801554e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015550:	2b00      	cmp	r3, #0
 8015552:	dc3b      	bgt.n	80155cc <_printf_float+0x2bc>
 8015554:	4a1c      	ldr	r2, [pc, #112]	@ (80155c8 <_printf_float+0x2b8>)
 8015556:	2301      	movs	r3, #1
 8015558:	4631      	mov	r1, r6
 801555a:	4628      	mov	r0, r5
 801555c:	47b8      	blx	r7
 801555e:	3001      	adds	r0, #1
 8015560:	f43f af22 	beq.w	80153a8 <_printf_float+0x98>
 8015564:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015568:	ea59 0303 	orrs.w	r3, r9, r3
 801556c:	d102      	bne.n	8015574 <_printf_float+0x264>
 801556e:	6823      	ldr	r3, [r4, #0]
 8015570:	07d9      	lsls	r1, r3, #31
 8015572:	d5d7      	bpl.n	8015524 <_printf_float+0x214>
 8015574:	9b05      	ldr	r3, [sp, #20]
 8015576:	465a      	mov	r2, fp
 8015578:	4631      	mov	r1, r6
 801557a:	4628      	mov	r0, r5
 801557c:	47b8      	blx	r7
 801557e:	3001      	adds	r0, #1
 8015580:	f43f af12 	beq.w	80153a8 <_printf_float+0x98>
 8015584:	f04f 0a00 	mov.w	sl, #0
 8015588:	f104 0b1a 	add.w	fp, r4, #26
 801558c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801558e:	425b      	negs	r3, r3
 8015590:	4553      	cmp	r3, sl
 8015592:	dc01      	bgt.n	8015598 <_printf_float+0x288>
 8015594:	464b      	mov	r3, r9
 8015596:	e794      	b.n	80154c2 <_printf_float+0x1b2>
 8015598:	2301      	movs	r3, #1
 801559a:	465a      	mov	r2, fp
 801559c:	4631      	mov	r1, r6
 801559e:	4628      	mov	r0, r5
 80155a0:	47b8      	blx	r7
 80155a2:	3001      	adds	r0, #1
 80155a4:	f43f af00 	beq.w	80153a8 <_printf_float+0x98>
 80155a8:	f10a 0a01 	add.w	sl, sl, #1
 80155ac:	e7ee      	b.n	801558c <_printf_float+0x27c>
 80155ae:	bf00      	nop
 80155b0:	ffffffff 	.word	0xffffffff
 80155b4:	7fefffff 	.word	0x7fefffff
 80155b8:	08019f0c 	.word	0x08019f0c
 80155bc:	08019f10 	.word	0x08019f10
 80155c0:	08019f14 	.word	0x08019f14
 80155c4:	08019f18 	.word	0x08019f18
 80155c8:	08019f1c 	.word	0x08019f1c
 80155cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80155ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80155d2:	4553      	cmp	r3, sl
 80155d4:	bfa8      	it	ge
 80155d6:	4653      	movge	r3, sl
 80155d8:	2b00      	cmp	r3, #0
 80155da:	4699      	mov	r9, r3
 80155dc:	dc37      	bgt.n	801564e <_printf_float+0x33e>
 80155de:	2300      	movs	r3, #0
 80155e0:	9307      	str	r3, [sp, #28]
 80155e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80155e6:	f104 021a 	add.w	r2, r4, #26
 80155ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80155ec:	9907      	ldr	r1, [sp, #28]
 80155ee:	9306      	str	r3, [sp, #24]
 80155f0:	eba3 0309 	sub.w	r3, r3, r9
 80155f4:	428b      	cmp	r3, r1
 80155f6:	dc31      	bgt.n	801565c <_printf_float+0x34c>
 80155f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155fa:	459a      	cmp	sl, r3
 80155fc:	dc3b      	bgt.n	8015676 <_printf_float+0x366>
 80155fe:	6823      	ldr	r3, [r4, #0]
 8015600:	07da      	lsls	r2, r3, #31
 8015602:	d438      	bmi.n	8015676 <_printf_float+0x366>
 8015604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015606:	ebaa 0903 	sub.w	r9, sl, r3
 801560a:	9b06      	ldr	r3, [sp, #24]
 801560c:	ebaa 0303 	sub.w	r3, sl, r3
 8015610:	4599      	cmp	r9, r3
 8015612:	bfa8      	it	ge
 8015614:	4699      	movge	r9, r3
 8015616:	f1b9 0f00 	cmp.w	r9, #0
 801561a:	dc34      	bgt.n	8015686 <_printf_float+0x376>
 801561c:	f04f 0800 	mov.w	r8, #0
 8015620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015624:	f104 0b1a 	add.w	fp, r4, #26
 8015628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801562a:	ebaa 0303 	sub.w	r3, sl, r3
 801562e:	eba3 0309 	sub.w	r3, r3, r9
 8015632:	4543      	cmp	r3, r8
 8015634:	f77f af76 	ble.w	8015524 <_printf_float+0x214>
 8015638:	2301      	movs	r3, #1
 801563a:	465a      	mov	r2, fp
 801563c:	4631      	mov	r1, r6
 801563e:	4628      	mov	r0, r5
 8015640:	47b8      	blx	r7
 8015642:	3001      	adds	r0, #1
 8015644:	f43f aeb0 	beq.w	80153a8 <_printf_float+0x98>
 8015648:	f108 0801 	add.w	r8, r8, #1
 801564c:	e7ec      	b.n	8015628 <_printf_float+0x318>
 801564e:	4642      	mov	r2, r8
 8015650:	4631      	mov	r1, r6
 8015652:	4628      	mov	r0, r5
 8015654:	47b8      	blx	r7
 8015656:	3001      	adds	r0, #1
 8015658:	d1c1      	bne.n	80155de <_printf_float+0x2ce>
 801565a:	e6a5      	b.n	80153a8 <_printf_float+0x98>
 801565c:	2301      	movs	r3, #1
 801565e:	4631      	mov	r1, r6
 8015660:	4628      	mov	r0, r5
 8015662:	9206      	str	r2, [sp, #24]
 8015664:	47b8      	blx	r7
 8015666:	3001      	adds	r0, #1
 8015668:	f43f ae9e 	beq.w	80153a8 <_printf_float+0x98>
 801566c:	9b07      	ldr	r3, [sp, #28]
 801566e:	9a06      	ldr	r2, [sp, #24]
 8015670:	3301      	adds	r3, #1
 8015672:	9307      	str	r3, [sp, #28]
 8015674:	e7b9      	b.n	80155ea <_printf_float+0x2da>
 8015676:	9b05      	ldr	r3, [sp, #20]
 8015678:	465a      	mov	r2, fp
 801567a:	4631      	mov	r1, r6
 801567c:	4628      	mov	r0, r5
 801567e:	47b8      	blx	r7
 8015680:	3001      	adds	r0, #1
 8015682:	d1bf      	bne.n	8015604 <_printf_float+0x2f4>
 8015684:	e690      	b.n	80153a8 <_printf_float+0x98>
 8015686:	9a06      	ldr	r2, [sp, #24]
 8015688:	464b      	mov	r3, r9
 801568a:	4442      	add	r2, r8
 801568c:	4631      	mov	r1, r6
 801568e:	4628      	mov	r0, r5
 8015690:	47b8      	blx	r7
 8015692:	3001      	adds	r0, #1
 8015694:	d1c2      	bne.n	801561c <_printf_float+0x30c>
 8015696:	e687      	b.n	80153a8 <_printf_float+0x98>
 8015698:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801569c:	f1b9 0f01 	cmp.w	r9, #1
 80156a0:	dc01      	bgt.n	80156a6 <_printf_float+0x396>
 80156a2:	07db      	lsls	r3, r3, #31
 80156a4:	d536      	bpl.n	8015714 <_printf_float+0x404>
 80156a6:	2301      	movs	r3, #1
 80156a8:	4642      	mov	r2, r8
 80156aa:	4631      	mov	r1, r6
 80156ac:	4628      	mov	r0, r5
 80156ae:	47b8      	blx	r7
 80156b0:	3001      	adds	r0, #1
 80156b2:	f43f ae79 	beq.w	80153a8 <_printf_float+0x98>
 80156b6:	9b05      	ldr	r3, [sp, #20]
 80156b8:	465a      	mov	r2, fp
 80156ba:	4631      	mov	r1, r6
 80156bc:	4628      	mov	r0, r5
 80156be:	47b8      	blx	r7
 80156c0:	3001      	adds	r0, #1
 80156c2:	f43f ae71 	beq.w	80153a8 <_printf_float+0x98>
 80156c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80156ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80156ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80156d6:	d018      	beq.n	801570a <_printf_float+0x3fa>
 80156d8:	464b      	mov	r3, r9
 80156da:	f108 0201 	add.w	r2, r8, #1
 80156de:	4631      	mov	r1, r6
 80156e0:	4628      	mov	r0, r5
 80156e2:	47b8      	blx	r7
 80156e4:	3001      	adds	r0, #1
 80156e6:	d10c      	bne.n	8015702 <_printf_float+0x3f2>
 80156e8:	e65e      	b.n	80153a8 <_printf_float+0x98>
 80156ea:	2301      	movs	r3, #1
 80156ec:	465a      	mov	r2, fp
 80156ee:	4631      	mov	r1, r6
 80156f0:	4628      	mov	r0, r5
 80156f2:	47b8      	blx	r7
 80156f4:	3001      	adds	r0, #1
 80156f6:	f43f ae57 	beq.w	80153a8 <_printf_float+0x98>
 80156fa:	f108 0801 	add.w	r8, r8, #1
 80156fe:	45c8      	cmp	r8, r9
 8015700:	dbf3      	blt.n	80156ea <_printf_float+0x3da>
 8015702:	4653      	mov	r3, sl
 8015704:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015708:	e6dc      	b.n	80154c4 <_printf_float+0x1b4>
 801570a:	f04f 0800 	mov.w	r8, #0
 801570e:	f104 0b1a 	add.w	fp, r4, #26
 8015712:	e7f4      	b.n	80156fe <_printf_float+0x3ee>
 8015714:	2301      	movs	r3, #1
 8015716:	4642      	mov	r2, r8
 8015718:	e7e1      	b.n	80156de <_printf_float+0x3ce>
 801571a:	2301      	movs	r3, #1
 801571c:	464a      	mov	r2, r9
 801571e:	4631      	mov	r1, r6
 8015720:	4628      	mov	r0, r5
 8015722:	47b8      	blx	r7
 8015724:	3001      	adds	r0, #1
 8015726:	f43f ae3f 	beq.w	80153a8 <_printf_float+0x98>
 801572a:	f108 0801 	add.w	r8, r8, #1
 801572e:	68e3      	ldr	r3, [r4, #12]
 8015730:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015732:	1a5b      	subs	r3, r3, r1
 8015734:	4543      	cmp	r3, r8
 8015736:	dcf0      	bgt.n	801571a <_printf_float+0x40a>
 8015738:	e6f8      	b.n	801552c <_printf_float+0x21c>
 801573a:	f04f 0800 	mov.w	r8, #0
 801573e:	f104 0919 	add.w	r9, r4, #25
 8015742:	e7f4      	b.n	801572e <_printf_float+0x41e>

08015744 <_printf_common>:
 8015744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015748:	4616      	mov	r6, r2
 801574a:	4698      	mov	r8, r3
 801574c:	688a      	ldr	r2, [r1, #8]
 801574e:	690b      	ldr	r3, [r1, #16]
 8015750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015754:	4293      	cmp	r3, r2
 8015756:	bfb8      	it	lt
 8015758:	4613      	movlt	r3, r2
 801575a:	6033      	str	r3, [r6, #0]
 801575c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015760:	4607      	mov	r7, r0
 8015762:	460c      	mov	r4, r1
 8015764:	b10a      	cbz	r2, 801576a <_printf_common+0x26>
 8015766:	3301      	adds	r3, #1
 8015768:	6033      	str	r3, [r6, #0]
 801576a:	6823      	ldr	r3, [r4, #0]
 801576c:	0699      	lsls	r1, r3, #26
 801576e:	bf42      	ittt	mi
 8015770:	6833      	ldrmi	r3, [r6, #0]
 8015772:	3302      	addmi	r3, #2
 8015774:	6033      	strmi	r3, [r6, #0]
 8015776:	6825      	ldr	r5, [r4, #0]
 8015778:	f015 0506 	ands.w	r5, r5, #6
 801577c:	d106      	bne.n	801578c <_printf_common+0x48>
 801577e:	f104 0a19 	add.w	sl, r4, #25
 8015782:	68e3      	ldr	r3, [r4, #12]
 8015784:	6832      	ldr	r2, [r6, #0]
 8015786:	1a9b      	subs	r3, r3, r2
 8015788:	42ab      	cmp	r3, r5
 801578a:	dc26      	bgt.n	80157da <_printf_common+0x96>
 801578c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015790:	6822      	ldr	r2, [r4, #0]
 8015792:	3b00      	subs	r3, #0
 8015794:	bf18      	it	ne
 8015796:	2301      	movne	r3, #1
 8015798:	0692      	lsls	r2, r2, #26
 801579a:	d42b      	bmi.n	80157f4 <_printf_common+0xb0>
 801579c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80157a0:	4641      	mov	r1, r8
 80157a2:	4638      	mov	r0, r7
 80157a4:	47c8      	blx	r9
 80157a6:	3001      	adds	r0, #1
 80157a8:	d01e      	beq.n	80157e8 <_printf_common+0xa4>
 80157aa:	6823      	ldr	r3, [r4, #0]
 80157ac:	6922      	ldr	r2, [r4, #16]
 80157ae:	f003 0306 	and.w	r3, r3, #6
 80157b2:	2b04      	cmp	r3, #4
 80157b4:	bf02      	ittt	eq
 80157b6:	68e5      	ldreq	r5, [r4, #12]
 80157b8:	6833      	ldreq	r3, [r6, #0]
 80157ba:	1aed      	subeq	r5, r5, r3
 80157bc:	68a3      	ldr	r3, [r4, #8]
 80157be:	bf0c      	ite	eq
 80157c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80157c4:	2500      	movne	r5, #0
 80157c6:	4293      	cmp	r3, r2
 80157c8:	bfc4      	itt	gt
 80157ca:	1a9b      	subgt	r3, r3, r2
 80157cc:	18ed      	addgt	r5, r5, r3
 80157ce:	2600      	movs	r6, #0
 80157d0:	341a      	adds	r4, #26
 80157d2:	42b5      	cmp	r5, r6
 80157d4:	d11a      	bne.n	801580c <_printf_common+0xc8>
 80157d6:	2000      	movs	r0, #0
 80157d8:	e008      	b.n	80157ec <_printf_common+0xa8>
 80157da:	2301      	movs	r3, #1
 80157dc:	4652      	mov	r2, sl
 80157de:	4641      	mov	r1, r8
 80157e0:	4638      	mov	r0, r7
 80157e2:	47c8      	blx	r9
 80157e4:	3001      	adds	r0, #1
 80157e6:	d103      	bne.n	80157f0 <_printf_common+0xac>
 80157e8:	f04f 30ff 	mov.w	r0, #4294967295
 80157ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157f0:	3501      	adds	r5, #1
 80157f2:	e7c6      	b.n	8015782 <_printf_common+0x3e>
 80157f4:	18e1      	adds	r1, r4, r3
 80157f6:	1c5a      	adds	r2, r3, #1
 80157f8:	2030      	movs	r0, #48	@ 0x30
 80157fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80157fe:	4422      	add	r2, r4
 8015800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015808:	3302      	adds	r3, #2
 801580a:	e7c7      	b.n	801579c <_printf_common+0x58>
 801580c:	2301      	movs	r3, #1
 801580e:	4622      	mov	r2, r4
 8015810:	4641      	mov	r1, r8
 8015812:	4638      	mov	r0, r7
 8015814:	47c8      	blx	r9
 8015816:	3001      	adds	r0, #1
 8015818:	d0e6      	beq.n	80157e8 <_printf_common+0xa4>
 801581a:	3601      	adds	r6, #1
 801581c:	e7d9      	b.n	80157d2 <_printf_common+0x8e>
	...

08015820 <_printf_i>:
 8015820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015824:	7e0f      	ldrb	r7, [r1, #24]
 8015826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015828:	2f78      	cmp	r7, #120	@ 0x78
 801582a:	4691      	mov	r9, r2
 801582c:	4680      	mov	r8, r0
 801582e:	460c      	mov	r4, r1
 8015830:	469a      	mov	sl, r3
 8015832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015836:	d807      	bhi.n	8015848 <_printf_i+0x28>
 8015838:	2f62      	cmp	r7, #98	@ 0x62
 801583a:	d80a      	bhi.n	8015852 <_printf_i+0x32>
 801583c:	2f00      	cmp	r7, #0
 801583e:	f000 80d2 	beq.w	80159e6 <_printf_i+0x1c6>
 8015842:	2f58      	cmp	r7, #88	@ 0x58
 8015844:	f000 80b9 	beq.w	80159ba <_printf_i+0x19a>
 8015848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801584c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015850:	e03a      	b.n	80158c8 <_printf_i+0xa8>
 8015852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015856:	2b15      	cmp	r3, #21
 8015858:	d8f6      	bhi.n	8015848 <_printf_i+0x28>
 801585a:	a101      	add	r1, pc, #4	@ (adr r1, 8015860 <_printf_i+0x40>)
 801585c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015860:	080158b9 	.word	0x080158b9
 8015864:	080158cd 	.word	0x080158cd
 8015868:	08015849 	.word	0x08015849
 801586c:	08015849 	.word	0x08015849
 8015870:	08015849 	.word	0x08015849
 8015874:	08015849 	.word	0x08015849
 8015878:	080158cd 	.word	0x080158cd
 801587c:	08015849 	.word	0x08015849
 8015880:	08015849 	.word	0x08015849
 8015884:	08015849 	.word	0x08015849
 8015888:	08015849 	.word	0x08015849
 801588c:	080159cd 	.word	0x080159cd
 8015890:	080158f7 	.word	0x080158f7
 8015894:	08015987 	.word	0x08015987
 8015898:	08015849 	.word	0x08015849
 801589c:	08015849 	.word	0x08015849
 80158a0:	080159ef 	.word	0x080159ef
 80158a4:	08015849 	.word	0x08015849
 80158a8:	080158f7 	.word	0x080158f7
 80158ac:	08015849 	.word	0x08015849
 80158b0:	08015849 	.word	0x08015849
 80158b4:	0801598f 	.word	0x0801598f
 80158b8:	6833      	ldr	r3, [r6, #0]
 80158ba:	1d1a      	adds	r2, r3, #4
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	6032      	str	r2, [r6, #0]
 80158c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80158c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80158c8:	2301      	movs	r3, #1
 80158ca:	e09d      	b.n	8015a08 <_printf_i+0x1e8>
 80158cc:	6833      	ldr	r3, [r6, #0]
 80158ce:	6820      	ldr	r0, [r4, #0]
 80158d0:	1d19      	adds	r1, r3, #4
 80158d2:	6031      	str	r1, [r6, #0]
 80158d4:	0606      	lsls	r6, r0, #24
 80158d6:	d501      	bpl.n	80158dc <_printf_i+0xbc>
 80158d8:	681d      	ldr	r5, [r3, #0]
 80158da:	e003      	b.n	80158e4 <_printf_i+0xc4>
 80158dc:	0645      	lsls	r5, r0, #25
 80158de:	d5fb      	bpl.n	80158d8 <_printf_i+0xb8>
 80158e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80158e4:	2d00      	cmp	r5, #0
 80158e6:	da03      	bge.n	80158f0 <_printf_i+0xd0>
 80158e8:	232d      	movs	r3, #45	@ 0x2d
 80158ea:	426d      	negs	r5, r5
 80158ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80158f0:	4859      	ldr	r0, [pc, #356]	@ (8015a58 <_printf_i+0x238>)
 80158f2:	230a      	movs	r3, #10
 80158f4:	e011      	b.n	801591a <_printf_i+0xfa>
 80158f6:	6821      	ldr	r1, [r4, #0]
 80158f8:	6833      	ldr	r3, [r6, #0]
 80158fa:	0608      	lsls	r0, r1, #24
 80158fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8015900:	d402      	bmi.n	8015908 <_printf_i+0xe8>
 8015902:	0649      	lsls	r1, r1, #25
 8015904:	bf48      	it	mi
 8015906:	b2ad      	uxthmi	r5, r5
 8015908:	2f6f      	cmp	r7, #111	@ 0x6f
 801590a:	4853      	ldr	r0, [pc, #332]	@ (8015a58 <_printf_i+0x238>)
 801590c:	6033      	str	r3, [r6, #0]
 801590e:	bf14      	ite	ne
 8015910:	230a      	movne	r3, #10
 8015912:	2308      	moveq	r3, #8
 8015914:	2100      	movs	r1, #0
 8015916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801591a:	6866      	ldr	r6, [r4, #4]
 801591c:	60a6      	str	r6, [r4, #8]
 801591e:	2e00      	cmp	r6, #0
 8015920:	bfa2      	ittt	ge
 8015922:	6821      	ldrge	r1, [r4, #0]
 8015924:	f021 0104 	bicge.w	r1, r1, #4
 8015928:	6021      	strge	r1, [r4, #0]
 801592a:	b90d      	cbnz	r5, 8015930 <_printf_i+0x110>
 801592c:	2e00      	cmp	r6, #0
 801592e:	d04b      	beq.n	80159c8 <_printf_i+0x1a8>
 8015930:	4616      	mov	r6, r2
 8015932:	fbb5 f1f3 	udiv	r1, r5, r3
 8015936:	fb03 5711 	mls	r7, r3, r1, r5
 801593a:	5dc7      	ldrb	r7, [r0, r7]
 801593c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015940:	462f      	mov	r7, r5
 8015942:	42bb      	cmp	r3, r7
 8015944:	460d      	mov	r5, r1
 8015946:	d9f4      	bls.n	8015932 <_printf_i+0x112>
 8015948:	2b08      	cmp	r3, #8
 801594a:	d10b      	bne.n	8015964 <_printf_i+0x144>
 801594c:	6823      	ldr	r3, [r4, #0]
 801594e:	07df      	lsls	r7, r3, #31
 8015950:	d508      	bpl.n	8015964 <_printf_i+0x144>
 8015952:	6923      	ldr	r3, [r4, #16]
 8015954:	6861      	ldr	r1, [r4, #4]
 8015956:	4299      	cmp	r1, r3
 8015958:	bfde      	ittt	le
 801595a:	2330      	movle	r3, #48	@ 0x30
 801595c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015960:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015964:	1b92      	subs	r2, r2, r6
 8015966:	6122      	str	r2, [r4, #16]
 8015968:	f8cd a000 	str.w	sl, [sp]
 801596c:	464b      	mov	r3, r9
 801596e:	aa03      	add	r2, sp, #12
 8015970:	4621      	mov	r1, r4
 8015972:	4640      	mov	r0, r8
 8015974:	f7ff fee6 	bl	8015744 <_printf_common>
 8015978:	3001      	adds	r0, #1
 801597a:	d14a      	bne.n	8015a12 <_printf_i+0x1f2>
 801597c:	f04f 30ff 	mov.w	r0, #4294967295
 8015980:	b004      	add	sp, #16
 8015982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015986:	6823      	ldr	r3, [r4, #0]
 8015988:	f043 0320 	orr.w	r3, r3, #32
 801598c:	6023      	str	r3, [r4, #0]
 801598e:	4833      	ldr	r0, [pc, #204]	@ (8015a5c <_printf_i+0x23c>)
 8015990:	2778      	movs	r7, #120	@ 0x78
 8015992:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015996:	6823      	ldr	r3, [r4, #0]
 8015998:	6831      	ldr	r1, [r6, #0]
 801599a:	061f      	lsls	r7, r3, #24
 801599c:	f851 5b04 	ldr.w	r5, [r1], #4
 80159a0:	d402      	bmi.n	80159a8 <_printf_i+0x188>
 80159a2:	065f      	lsls	r7, r3, #25
 80159a4:	bf48      	it	mi
 80159a6:	b2ad      	uxthmi	r5, r5
 80159a8:	6031      	str	r1, [r6, #0]
 80159aa:	07d9      	lsls	r1, r3, #31
 80159ac:	bf44      	itt	mi
 80159ae:	f043 0320 	orrmi.w	r3, r3, #32
 80159b2:	6023      	strmi	r3, [r4, #0]
 80159b4:	b11d      	cbz	r5, 80159be <_printf_i+0x19e>
 80159b6:	2310      	movs	r3, #16
 80159b8:	e7ac      	b.n	8015914 <_printf_i+0xf4>
 80159ba:	4827      	ldr	r0, [pc, #156]	@ (8015a58 <_printf_i+0x238>)
 80159bc:	e7e9      	b.n	8015992 <_printf_i+0x172>
 80159be:	6823      	ldr	r3, [r4, #0]
 80159c0:	f023 0320 	bic.w	r3, r3, #32
 80159c4:	6023      	str	r3, [r4, #0]
 80159c6:	e7f6      	b.n	80159b6 <_printf_i+0x196>
 80159c8:	4616      	mov	r6, r2
 80159ca:	e7bd      	b.n	8015948 <_printf_i+0x128>
 80159cc:	6833      	ldr	r3, [r6, #0]
 80159ce:	6825      	ldr	r5, [r4, #0]
 80159d0:	6961      	ldr	r1, [r4, #20]
 80159d2:	1d18      	adds	r0, r3, #4
 80159d4:	6030      	str	r0, [r6, #0]
 80159d6:	062e      	lsls	r6, r5, #24
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	d501      	bpl.n	80159e0 <_printf_i+0x1c0>
 80159dc:	6019      	str	r1, [r3, #0]
 80159de:	e002      	b.n	80159e6 <_printf_i+0x1c6>
 80159e0:	0668      	lsls	r0, r5, #25
 80159e2:	d5fb      	bpl.n	80159dc <_printf_i+0x1bc>
 80159e4:	8019      	strh	r1, [r3, #0]
 80159e6:	2300      	movs	r3, #0
 80159e8:	6123      	str	r3, [r4, #16]
 80159ea:	4616      	mov	r6, r2
 80159ec:	e7bc      	b.n	8015968 <_printf_i+0x148>
 80159ee:	6833      	ldr	r3, [r6, #0]
 80159f0:	1d1a      	adds	r2, r3, #4
 80159f2:	6032      	str	r2, [r6, #0]
 80159f4:	681e      	ldr	r6, [r3, #0]
 80159f6:	6862      	ldr	r2, [r4, #4]
 80159f8:	2100      	movs	r1, #0
 80159fa:	4630      	mov	r0, r6
 80159fc:	f7ea fc88 	bl	8000310 <memchr>
 8015a00:	b108      	cbz	r0, 8015a06 <_printf_i+0x1e6>
 8015a02:	1b80      	subs	r0, r0, r6
 8015a04:	6060      	str	r0, [r4, #4]
 8015a06:	6863      	ldr	r3, [r4, #4]
 8015a08:	6123      	str	r3, [r4, #16]
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015a10:	e7aa      	b.n	8015968 <_printf_i+0x148>
 8015a12:	6923      	ldr	r3, [r4, #16]
 8015a14:	4632      	mov	r2, r6
 8015a16:	4649      	mov	r1, r9
 8015a18:	4640      	mov	r0, r8
 8015a1a:	47d0      	blx	sl
 8015a1c:	3001      	adds	r0, #1
 8015a1e:	d0ad      	beq.n	801597c <_printf_i+0x15c>
 8015a20:	6823      	ldr	r3, [r4, #0]
 8015a22:	079b      	lsls	r3, r3, #30
 8015a24:	d413      	bmi.n	8015a4e <_printf_i+0x22e>
 8015a26:	68e0      	ldr	r0, [r4, #12]
 8015a28:	9b03      	ldr	r3, [sp, #12]
 8015a2a:	4298      	cmp	r0, r3
 8015a2c:	bfb8      	it	lt
 8015a2e:	4618      	movlt	r0, r3
 8015a30:	e7a6      	b.n	8015980 <_printf_i+0x160>
 8015a32:	2301      	movs	r3, #1
 8015a34:	4632      	mov	r2, r6
 8015a36:	4649      	mov	r1, r9
 8015a38:	4640      	mov	r0, r8
 8015a3a:	47d0      	blx	sl
 8015a3c:	3001      	adds	r0, #1
 8015a3e:	d09d      	beq.n	801597c <_printf_i+0x15c>
 8015a40:	3501      	adds	r5, #1
 8015a42:	68e3      	ldr	r3, [r4, #12]
 8015a44:	9903      	ldr	r1, [sp, #12]
 8015a46:	1a5b      	subs	r3, r3, r1
 8015a48:	42ab      	cmp	r3, r5
 8015a4a:	dcf2      	bgt.n	8015a32 <_printf_i+0x212>
 8015a4c:	e7eb      	b.n	8015a26 <_printf_i+0x206>
 8015a4e:	2500      	movs	r5, #0
 8015a50:	f104 0619 	add.w	r6, r4, #25
 8015a54:	e7f5      	b.n	8015a42 <_printf_i+0x222>
 8015a56:	bf00      	nop
 8015a58:	08019f1e 	.word	0x08019f1e
 8015a5c:	08019f2f 	.word	0x08019f2f

08015a60 <_scanf_float>:
 8015a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a64:	b087      	sub	sp, #28
 8015a66:	4617      	mov	r7, r2
 8015a68:	9303      	str	r3, [sp, #12]
 8015a6a:	688b      	ldr	r3, [r1, #8]
 8015a6c:	1e5a      	subs	r2, r3, #1
 8015a6e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8015a72:	bf81      	itttt	hi
 8015a74:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8015a78:	eb03 0b05 	addhi.w	fp, r3, r5
 8015a7c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8015a80:	608b      	strhi	r3, [r1, #8]
 8015a82:	680b      	ldr	r3, [r1, #0]
 8015a84:	460a      	mov	r2, r1
 8015a86:	f04f 0500 	mov.w	r5, #0
 8015a8a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8015a8e:	f842 3b1c 	str.w	r3, [r2], #28
 8015a92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015a96:	4680      	mov	r8, r0
 8015a98:	460c      	mov	r4, r1
 8015a9a:	bf98      	it	ls
 8015a9c:	f04f 0b00 	movls.w	fp, #0
 8015aa0:	9201      	str	r2, [sp, #4]
 8015aa2:	4616      	mov	r6, r2
 8015aa4:	46aa      	mov	sl, r5
 8015aa6:	46a9      	mov	r9, r5
 8015aa8:	9502      	str	r5, [sp, #8]
 8015aaa:	68a2      	ldr	r2, [r4, #8]
 8015aac:	b152      	cbz	r2, 8015ac4 <_scanf_float+0x64>
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	2b4e      	cmp	r3, #78	@ 0x4e
 8015ab4:	d864      	bhi.n	8015b80 <_scanf_float+0x120>
 8015ab6:	2b40      	cmp	r3, #64	@ 0x40
 8015ab8:	d83c      	bhi.n	8015b34 <_scanf_float+0xd4>
 8015aba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8015abe:	b2c8      	uxtb	r0, r1
 8015ac0:	280e      	cmp	r0, #14
 8015ac2:	d93a      	bls.n	8015b3a <_scanf_float+0xda>
 8015ac4:	f1b9 0f00 	cmp.w	r9, #0
 8015ac8:	d003      	beq.n	8015ad2 <_scanf_float+0x72>
 8015aca:	6823      	ldr	r3, [r4, #0]
 8015acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015ad0:	6023      	str	r3, [r4, #0]
 8015ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015ad6:	f1ba 0f01 	cmp.w	sl, #1
 8015ada:	f200 8117 	bhi.w	8015d0c <_scanf_float+0x2ac>
 8015ade:	9b01      	ldr	r3, [sp, #4]
 8015ae0:	429e      	cmp	r6, r3
 8015ae2:	f200 8108 	bhi.w	8015cf6 <_scanf_float+0x296>
 8015ae6:	2001      	movs	r0, #1
 8015ae8:	b007      	add	sp, #28
 8015aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8015af2:	2a0d      	cmp	r2, #13
 8015af4:	d8e6      	bhi.n	8015ac4 <_scanf_float+0x64>
 8015af6:	a101      	add	r1, pc, #4	@ (adr r1, 8015afc <_scanf_float+0x9c>)
 8015af8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015afc:	08015c43 	.word	0x08015c43
 8015b00:	08015ac5 	.word	0x08015ac5
 8015b04:	08015ac5 	.word	0x08015ac5
 8015b08:	08015ac5 	.word	0x08015ac5
 8015b0c:	08015ca3 	.word	0x08015ca3
 8015b10:	08015c7b 	.word	0x08015c7b
 8015b14:	08015ac5 	.word	0x08015ac5
 8015b18:	08015ac5 	.word	0x08015ac5
 8015b1c:	08015c51 	.word	0x08015c51
 8015b20:	08015ac5 	.word	0x08015ac5
 8015b24:	08015ac5 	.word	0x08015ac5
 8015b28:	08015ac5 	.word	0x08015ac5
 8015b2c:	08015ac5 	.word	0x08015ac5
 8015b30:	08015c09 	.word	0x08015c09
 8015b34:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8015b38:	e7db      	b.n	8015af2 <_scanf_float+0x92>
 8015b3a:	290e      	cmp	r1, #14
 8015b3c:	d8c2      	bhi.n	8015ac4 <_scanf_float+0x64>
 8015b3e:	a001      	add	r0, pc, #4	@ (adr r0, 8015b44 <_scanf_float+0xe4>)
 8015b40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015b44:	08015bf9 	.word	0x08015bf9
 8015b48:	08015ac5 	.word	0x08015ac5
 8015b4c:	08015bf9 	.word	0x08015bf9
 8015b50:	08015c8f 	.word	0x08015c8f
 8015b54:	08015ac5 	.word	0x08015ac5
 8015b58:	08015ba1 	.word	0x08015ba1
 8015b5c:	08015bdf 	.word	0x08015bdf
 8015b60:	08015bdf 	.word	0x08015bdf
 8015b64:	08015bdf 	.word	0x08015bdf
 8015b68:	08015bdf 	.word	0x08015bdf
 8015b6c:	08015bdf 	.word	0x08015bdf
 8015b70:	08015bdf 	.word	0x08015bdf
 8015b74:	08015bdf 	.word	0x08015bdf
 8015b78:	08015bdf 	.word	0x08015bdf
 8015b7c:	08015bdf 	.word	0x08015bdf
 8015b80:	2b6e      	cmp	r3, #110	@ 0x6e
 8015b82:	d809      	bhi.n	8015b98 <_scanf_float+0x138>
 8015b84:	2b60      	cmp	r3, #96	@ 0x60
 8015b86:	d8b2      	bhi.n	8015aee <_scanf_float+0x8e>
 8015b88:	2b54      	cmp	r3, #84	@ 0x54
 8015b8a:	d07b      	beq.n	8015c84 <_scanf_float+0x224>
 8015b8c:	2b59      	cmp	r3, #89	@ 0x59
 8015b8e:	d199      	bne.n	8015ac4 <_scanf_float+0x64>
 8015b90:	2d07      	cmp	r5, #7
 8015b92:	d197      	bne.n	8015ac4 <_scanf_float+0x64>
 8015b94:	2508      	movs	r5, #8
 8015b96:	e02c      	b.n	8015bf2 <_scanf_float+0x192>
 8015b98:	2b74      	cmp	r3, #116	@ 0x74
 8015b9a:	d073      	beq.n	8015c84 <_scanf_float+0x224>
 8015b9c:	2b79      	cmp	r3, #121	@ 0x79
 8015b9e:	e7f6      	b.n	8015b8e <_scanf_float+0x12e>
 8015ba0:	6821      	ldr	r1, [r4, #0]
 8015ba2:	05c8      	lsls	r0, r1, #23
 8015ba4:	d51b      	bpl.n	8015bde <_scanf_float+0x17e>
 8015ba6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8015baa:	6021      	str	r1, [r4, #0]
 8015bac:	f109 0901 	add.w	r9, r9, #1
 8015bb0:	f1bb 0f00 	cmp.w	fp, #0
 8015bb4:	d003      	beq.n	8015bbe <_scanf_float+0x15e>
 8015bb6:	3201      	adds	r2, #1
 8015bb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015bbc:	60a2      	str	r2, [r4, #8]
 8015bbe:	68a3      	ldr	r3, [r4, #8]
 8015bc0:	3b01      	subs	r3, #1
 8015bc2:	60a3      	str	r3, [r4, #8]
 8015bc4:	6923      	ldr	r3, [r4, #16]
 8015bc6:	3301      	adds	r3, #1
 8015bc8:	6123      	str	r3, [r4, #16]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	3b01      	subs	r3, #1
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	607b      	str	r3, [r7, #4]
 8015bd2:	f340 8087 	ble.w	8015ce4 <_scanf_float+0x284>
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	3301      	adds	r3, #1
 8015bda:	603b      	str	r3, [r7, #0]
 8015bdc:	e765      	b.n	8015aaa <_scanf_float+0x4a>
 8015bde:	eb1a 0105 	adds.w	r1, sl, r5
 8015be2:	f47f af6f 	bne.w	8015ac4 <_scanf_float+0x64>
 8015be6:	6822      	ldr	r2, [r4, #0]
 8015be8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8015bec:	6022      	str	r2, [r4, #0]
 8015bee:	460d      	mov	r5, r1
 8015bf0:	468a      	mov	sl, r1
 8015bf2:	f806 3b01 	strb.w	r3, [r6], #1
 8015bf6:	e7e2      	b.n	8015bbe <_scanf_float+0x15e>
 8015bf8:	6822      	ldr	r2, [r4, #0]
 8015bfa:	0610      	lsls	r0, r2, #24
 8015bfc:	f57f af62 	bpl.w	8015ac4 <_scanf_float+0x64>
 8015c00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8015c04:	6022      	str	r2, [r4, #0]
 8015c06:	e7f4      	b.n	8015bf2 <_scanf_float+0x192>
 8015c08:	f1ba 0f00 	cmp.w	sl, #0
 8015c0c:	d10e      	bne.n	8015c2c <_scanf_float+0x1cc>
 8015c0e:	f1b9 0f00 	cmp.w	r9, #0
 8015c12:	d10e      	bne.n	8015c32 <_scanf_float+0x1d2>
 8015c14:	6822      	ldr	r2, [r4, #0]
 8015c16:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8015c1a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8015c1e:	d108      	bne.n	8015c32 <_scanf_float+0x1d2>
 8015c20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015c24:	6022      	str	r2, [r4, #0]
 8015c26:	f04f 0a01 	mov.w	sl, #1
 8015c2a:	e7e2      	b.n	8015bf2 <_scanf_float+0x192>
 8015c2c:	f1ba 0f02 	cmp.w	sl, #2
 8015c30:	d055      	beq.n	8015cde <_scanf_float+0x27e>
 8015c32:	2d01      	cmp	r5, #1
 8015c34:	d002      	beq.n	8015c3c <_scanf_float+0x1dc>
 8015c36:	2d04      	cmp	r5, #4
 8015c38:	f47f af44 	bne.w	8015ac4 <_scanf_float+0x64>
 8015c3c:	3501      	adds	r5, #1
 8015c3e:	b2ed      	uxtb	r5, r5
 8015c40:	e7d7      	b.n	8015bf2 <_scanf_float+0x192>
 8015c42:	f1ba 0f01 	cmp.w	sl, #1
 8015c46:	f47f af3d 	bne.w	8015ac4 <_scanf_float+0x64>
 8015c4a:	f04f 0a02 	mov.w	sl, #2
 8015c4e:	e7d0      	b.n	8015bf2 <_scanf_float+0x192>
 8015c50:	b97d      	cbnz	r5, 8015c72 <_scanf_float+0x212>
 8015c52:	f1b9 0f00 	cmp.w	r9, #0
 8015c56:	f47f af38 	bne.w	8015aca <_scanf_float+0x6a>
 8015c5a:	6822      	ldr	r2, [r4, #0]
 8015c5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8015c60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8015c64:	f040 8101 	bne.w	8015e6a <_scanf_float+0x40a>
 8015c68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015c6c:	6022      	str	r2, [r4, #0]
 8015c6e:	2501      	movs	r5, #1
 8015c70:	e7bf      	b.n	8015bf2 <_scanf_float+0x192>
 8015c72:	2d03      	cmp	r5, #3
 8015c74:	d0e2      	beq.n	8015c3c <_scanf_float+0x1dc>
 8015c76:	2d05      	cmp	r5, #5
 8015c78:	e7de      	b.n	8015c38 <_scanf_float+0x1d8>
 8015c7a:	2d02      	cmp	r5, #2
 8015c7c:	f47f af22 	bne.w	8015ac4 <_scanf_float+0x64>
 8015c80:	2503      	movs	r5, #3
 8015c82:	e7b6      	b.n	8015bf2 <_scanf_float+0x192>
 8015c84:	2d06      	cmp	r5, #6
 8015c86:	f47f af1d 	bne.w	8015ac4 <_scanf_float+0x64>
 8015c8a:	2507      	movs	r5, #7
 8015c8c:	e7b1      	b.n	8015bf2 <_scanf_float+0x192>
 8015c8e:	6822      	ldr	r2, [r4, #0]
 8015c90:	0591      	lsls	r1, r2, #22
 8015c92:	f57f af17 	bpl.w	8015ac4 <_scanf_float+0x64>
 8015c96:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8015c9a:	6022      	str	r2, [r4, #0]
 8015c9c:	f8cd 9008 	str.w	r9, [sp, #8]
 8015ca0:	e7a7      	b.n	8015bf2 <_scanf_float+0x192>
 8015ca2:	6822      	ldr	r2, [r4, #0]
 8015ca4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8015ca8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015cac:	d006      	beq.n	8015cbc <_scanf_float+0x25c>
 8015cae:	0550      	lsls	r0, r2, #21
 8015cb0:	f57f af08 	bpl.w	8015ac4 <_scanf_float+0x64>
 8015cb4:	f1b9 0f00 	cmp.w	r9, #0
 8015cb8:	f000 80d7 	beq.w	8015e6a <_scanf_float+0x40a>
 8015cbc:	0591      	lsls	r1, r2, #22
 8015cbe:	bf58      	it	pl
 8015cc0:	9902      	ldrpl	r1, [sp, #8]
 8015cc2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8015cc6:	bf58      	it	pl
 8015cc8:	eba9 0101 	subpl.w	r1, r9, r1
 8015ccc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8015cd0:	bf58      	it	pl
 8015cd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015cd6:	6022      	str	r2, [r4, #0]
 8015cd8:	f04f 0900 	mov.w	r9, #0
 8015cdc:	e789      	b.n	8015bf2 <_scanf_float+0x192>
 8015cde:	f04f 0a03 	mov.w	sl, #3
 8015ce2:	e786      	b.n	8015bf2 <_scanf_float+0x192>
 8015ce4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015ce8:	4639      	mov	r1, r7
 8015cea:	4640      	mov	r0, r8
 8015cec:	4798      	blx	r3
 8015cee:	2800      	cmp	r0, #0
 8015cf0:	f43f aedb 	beq.w	8015aaa <_scanf_float+0x4a>
 8015cf4:	e6e6      	b.n	8015ac4 <_scanf_float+0x64>
 8015cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015cfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015cfe:	463a      	mov	r2, r7
 8015d00:	4640      	mov	r0, r8
 8015d02:	4798      	blx	r3
 8015d04:	6923      	ldr	r3, [r4, #16]
 8015d06:	3b01      	subs	r3, #1
 8015d08:	6123      	str	r3, [r4, #16]
 8015d0a:	e6e8      	b.n	8015ade <_scanf_float+0x7e>
 8015d0c:	1e6b      	subs	r3, r5, #1
 8015d0e:	2b06      	cmp	r3, #6
 8015d10:	d824      	bhi.n	8015d5c <_scanf_float+0x2fc>
 8015d12:	2d02      	cmp	r5, #2
 8015d14:	d836      	bhi.n	8015d84 <_scanf_float+0x324>
 8015d16:	9b01      	ldr	r3, [sp, #4]
 8015d18:	429e      	cmp	r6, r3
 8015d1a:	f67f aee4 	bls.w	8015ae6 <_scanf_float+0x86>
 8015d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015d22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015d26:	463a      	mov	r2, r7
 8015d28:	4640      	mov	r0, r8
 8015d2a:	4798      	blx	r3
 8015d2c:	6923      	ldr	r3, [r4, #16]
 8015d2e:	3b01      	subs	r3, #1
 8015d30:	6123      	str	r3, [r4, #16]
 8015d32:	e7f0      	b.n	8015d16 <_scanf_float+0x2b6>
 8015d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015d38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8015d3c:	463a      	mov	r2, r7
 8015d3e:	4640      	mov	r0, r8
 8015d40:	4798      	blx	r3
 8015d42:	6923      	ldr	r3, [r4, #16]
 8015d44:	3b01      	subs	r3, #1
 8015d46:	6123      	str	r3, [r4, #16]
 8015d48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015d4c:	fa5f fa8a 	uxtb.w	sl, sl
 8015d50:	f1ba 0f02 	cmp.w	sl, #2
 8015d54:	d1ee      	bne.n	8015d34 <_scanf_float+0x2d4>
 8015d56:	3d03      	subs	r5, #3
 8015d58:	b2ed      	uxtb	r5, r5
 8015d5a:	1b76      	subs	r6, r6, r5
 8015d5c:	6823      	ldr	r3, [r4, #0]
 8015d5e:	05da      	lsls	r2, r3, #23
 8015d60:	d530      	bpl.n	8015dc4 <_scanf_float+0x364>
 8015d62:	055b      	lsls	r3, r3, #21
 8015d64:	d511      	bpl.n	8015d8a <_scanf_float+0x32a>
 8015d66:	9b01      	ldr	r3, [sp, #4]
 8015d68:	429e      	cmp	r6, r3
 8015d6a:	f67f aebc 	bls.w	8015ae6 <_scanf_float+0x86>
 8015d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015d72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015d76:	463a      	mov	r2, r7
 8015d78:	4640      	mov	r0, r8
 8015d7a:	4798      	blx	r3
 8015d7c:	6923      	ldr	r3, [r4, #16]
 8015d7e:	3b01      	subs	r3, #1
 8015d80:	6123      	str	r3, [r4, #16]
 8015d82:	e7f0      	b.n	8015d66 <_scanf_float+0x306>
 8015d84:	46aa      	mov	sl, r5
 8015d86:	46b3      	mov	fp, r6
 8015d88:	e7de      	b.n	8015d48 <_scanf_float+0x2e8>
 8015d8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015d8e:	6923      	ldr	r3, [r4, #16]
 8015d90:	2965      	cmp	r1, #101	@ 0x65
 8015d92:	f103 33ff 	add.w	r3, r3, #4294967295
 8015d96:	f106 35ff 	add.w	r5, r6, #4294967295
 8015d9a:	6123      	str	r3, [r4, #16]
 8015d9c:	d00c      	beq.n	8015db8 <_scanf_float+0x358>
 8015d9e:	2945      	cmp	r1, #69	@ 0x45
 8015da0:	d00a      	beq.n	8015db8 <_scanf_float+0x358>
 8015da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015da6:	463a      	mov	r2, r7
 8015da8:	4640      	mov	r0, r8
 8015daa:	4798      	blx	r3
 8015dac:	6923      	ldr	r3, [r4, #16]
 8015dae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015db2:	3b01      	subs	r3, #1
 8015db4:	1eb5      	subs	r5, r6, #2
 8015db6:	6123      	str	r3, [r4, #16]
 8015db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8015dbc:	463a      	mov	r2, r7
 8015dbe:	4640      	mov	r0, r8
 8015dc0:	4798      	blx	r3
 8015dc2:	462e      	mov	r6, r5
 8015dc4:	6822      	ldr	r2, [r4, #0]
 8015dc6:	f012 0210 	ands.w	r2, r2, #16
 8015dca:	d001      	beq.n	8015dd0 <_scanf_float+0x370>
 8015dcc:	2000      	movs	r0, #0
 8015dce:	e68b      	b.n	8015ae8 <_scanf_float+0x88>
 8015dd0:	7032      	strb	r2, [r6, #0]
 8015dd2:	6823      	ldr	r3, [r4, #0]
 8015dd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8015dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015ddc:	d11a      	bne.n	8015e14 <_scanf_float+0x3b4>
 8015dde:	9b02      	ldr	r3, [sp, #8]
 8015de0:	454b      	cmp	r3, r9
 8015de2:	eba3 0209 	sub.w	r2, r3, r9
 8015de6:	d121      	bne.n	8015e2c <_scanf_float+0x3cc>
 8015de8:	9901      	ldr	r1, [sp, #4]
 8015dea:	2200      	movs	r2, #0
 8015dec:	4640      	mov	r0, r8
 8015dee:	f002 fc41 	bl	8018674 <_strtod_r>
 8015df2:	9b03      	ldr	r3, [sp, #12]
 8015df4:	6821      	ldr	r1, [r4, #0]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	f011 0f02 	tst.w	r1, #2
 8015dfc:	f103 0204 	add.w	r2, r3, #4
 8015e00:	d01f      	beq.n	8015e42 <_scanf_float+0x3e2>
 8015e02:	9903      	ldr	r1, [sp, #12]
 8015e04:	600a      	str	r2, [r1, #0]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	ed83 0b00 	vstr	d0, [r3]
 8015e0c:	68e3      	ldr	r3, [r4, #12]
 8015e0e:	3301      	adds	r3, #1
 8015e10:	60e3      	str	r3, [r4, #12]
 8015e12:	e7db      	b.n	8015dcc <_scanf_float+0x36c>
 8015e14:	9b04      	ldr	r3, [sp, #16]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d0e6      	beq.n	8015de8 <_scanf_float+0x388>
 8015e1a:	9905      	ldr	r1, [sp, #20]
 8015e1c:	230a      	movs	r3, #10
 8015e1e:	3101      	adds	r1, #1
 8015e20:	4640      	mov	r0, r8
 8015e22:	f002 fca7 	bl	8018774 <_strtol_r>
 8015e26:	9b04      	ldr	r3, [sp, #16]
 8015e28:	9e05      	ldr	r6, [sp, #20]
 8015e2a:	1ac2      	subs	r2, r0, r3
 8015e2c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8015e30:	429e      	cmp	r6, r3
 8015e32:	bf28      	it	cs
 8015e34:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8015e38:	490d      	ldr	r1, [pc, #52]	@ (8015e70 <_scanf_float+0x410>)
 8015e3a:	4630      	mov	r0, r6
 8015e3c:	f000 f94e 	bl	80160dc <siprintf>
 8015e40:	e7d2      	b.n	8015de8 <_scanf_float+0x388>
 8015e42:	f011 0f04 	tst.w	r1, #4
 8015e46:	9903      	ldr	r1, [sp, #12]
 8015e48:	600a      	str	r2, [r1, #0]
 8015e4a:	d1dc      	bne.n	8015e06 <_scanf_float+0x3a6>
 8015e4c:	eeb4 0b40 	vcmp.f64	d0, d0
 8015e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e54:	681d      	ldr	r5, [r3, #0]
 8015e56:	d705      	bvc.n	8015e64 <_scanf_float+0x404>
 8015e58:	4806      	ldr	r0, [pc, #24]	@ (8015e74 <_scanf_float+0x414>)
 8015e5a:	f000 fac5 	bl	80163e8 <nanf>
 8015e5e:	ed85 0a00 	vstr	s0, [r5]
 8015e62:	e7d3      	b.n	8015e0c <_scanf_float+0x3ac>
 8015e64:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015e68:	e7f9      	b.n	8015e5e <_scanf_float+0x3fe>
 8015e6a:	f04f 0900 	mov.w	r9, #0
 8015e6e:	e630      	b.n	8015ad2 <_scanf_float+0x72>
 8015e70:	08019f40 	.word	0x08019f40
 8015e74:	0801a2d5 	.word	0x0801a2d5

08015e78 <std>:
 8015e78:	2300      	movs	r3, #0
 8015e7a:	b510      	push	{r4, lr}
 8015e7c:	4604      	mov	r4, r0
 8015e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8015e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e86:	6083      	str	r3, [r0, #8]
 8015e88:	8181      	strh	r1, [r0, #12]
 8015e8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8015e8c:	81c2      	strh	r2, [r0, #14]
 8015e8e:	6183      	str	r3, [r0, #24]
 8015e90:	4619      	mov	r1, r3
 8015e92:	2208      	movs	r2, #8
 8015e94:	305c      	adds	r0, #92	@ 0x5c
 8015e96:	f000 fa19 	bl	80162cc <memset>
 8015e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8015ed0 <std+0x58>)
 8015e9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8015e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8015ed4 <std+0x5c>)
 8015ea0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8015ed8 <std+0x60>)
 8015ea4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8015edc <std+0x64>)
 8015ea8:	6323      	str	r3, [r4, #48]	@ 0x30
 8015eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8015ee0 <std+0x68>)
 8015eac:	6224      	str	r4, [r4, #32]
 8015eae:	429c      	cmp	r4, r3
 8015eb0:	d006      	beq.n	8015ec0 <std+0x48>
 8015eb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015eb6:	4294      	cmp	r4, r2
 8015eb8:	d002      	beq.n	8015ec0 <std+0x48>
 8015eba:	33d0      	adds	r3, #208	@ 0xd0
 8015ebc:	429c      	cmp	r4, r3
 8015ebe:	d105      	bne.n	8015ecc <std+0x54>
 8015ec0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ec8:	f000 ba7c 	b.w	80163c4 <__retarget_lock_init_recursive>
 8015ecc:	bd10      	pop	{r4, pc}
 8015ece:	bf00      	nop
 8015ed0:	0801611d 	.word	0x0801611d
 8015ed4:	0801613f 	.word	0x0801613f
 8015ed8:	08016177 	.word	0x08016177
 8015edc:	0801619b 	.word	0x0801619b
 8015ee0:	24001990 	.word	0x24001990

08015ee4 <stdio_exit_handler>:
 8015ee4:	4a02      	ldr	r2, [pc, #8]	@ (8015ef0 <stdio_exit_handler+0xc>)
 8015ee6:	4903      	ldr	r1, [pc, #12]	@ (8015ef4 <stdio_exit_handler+0x10>)
 8015ee8:	4803      	ldr	r0, [pc, #12]	@ (8015ef8 <stdio_exit_handler+0x14>)
 8015eea:	f000 b869 	b.w	8015fc0 <_fwalk_sglue>
 8015eee:	bf00      	nop
 8015ef0:	24000188 	.word	0x24000188
 8015ef4:	08018db5 	.word	0x08018db5
 8015ef8:	24000198 	.word	0x24000198

08015efc <cleanup_stdio>:
 8015efc:	6841      	ldr	r1, [r0, #4]
 8015efe:	4b0c      	ldr	r3, [pc, #48]	@ (8015f30 <cleanup_stdio+0x34>)
 8015f00:	4299      	cmp	r1, r3
 8015f02:	b510      	push	{r4, lr}
 8015f04:	4604      	mov	r4, r0
 8015f06:	d001      	beq.n	8015f0c <cleanup_stdio+0x10>
 8015f08:	f002 ff54 	bl	8018db4 <_fflush_r>
 8015f0c:	68a1      	ldr	r1, [r4, #8]
 8015f0e:	4b09      	ldr	r3, [pc, #36]	@ (8015f34 <cleanup_stdio+0x38>)
 8015f10:	4299      	cmp	r1, r3
 8015f12:	d002      	beq.n	8015f1a <cleanup_stdio+0x1e>
 8015f14:	4620      	mov	r0, r4
 8015f16:	f002 ff4d 	bl	8018db4 <_fflush_r>
 8015f1a:	68e1      	ldr	r1, [r4, #12]
 8015f1c:	4b06      	ldr	r3, [pc, #24]	@ (8015f38 <cleanup_stdio+0x3c>)
 8015f1e:	4299      	cmp	r1, r3
 8015f20:	d004      	beq.n	8015f2c <cleanup_stdio+0x30>
 8015f22:	4620      	mov	r0, r4
 8015f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f28:	f002 bf44 	b.w	8018db4 <_fflush_r>
 8015f2c:	bd10      	pop	{r4, pc}
 8015f2e:	bf00      	nop
 8015f30:	24001990 	.word	0x24001990
 8015f34:	240019f8 	.word	0x240019f8
 8015f38:	24001a60 	.word	0x24001a60

08015f3c <global_stdio_init.part.0>:
 8015f3c:	b510      	push	{r4, lr}
 8015f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8015f6c <global_stdio_init.part.0+0x30>)
 8015f40:	4c0b      	ldr	r4, [pc, #44]	@ (8015f70 <global_stdio_init.part.0+0x34>)
 8015f42:	4a0c      	ldr	r2, [pc, #48]	@ (8015f74 <global_stdio_init.part.0+0x38>)
 8015f44:	601a      	str	r2, [r3, #0]
 8015f46:	4620      	mov	r0, r4
 8015f48:	2200      	movs	r2, #0
 8015f4a:	2104      	movs	r1, #4
 8015f4c:	f7ff ff94 	bl	8015e78 <std>
 8015f50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015f54:	2201      	movs	r2, #1
 8015f56:	2109      	movs	r1, #9
 8015f58:	f7ff ff8e 	bl	8015e78 <std>
 8015f5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015f60:	2202      	movs	r2, #2
 8015f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f66:	2112      	movs	r1, #18
 8015f68:	f7ff bf86 	b.w	8015e78 <std>
 8015f6c:	24001ac8 	.word	0x24001ac8
 8015f70:	24001990 	.word	0x24001990
 8015f74:	08015ee5 	.word	0x08015ee5

08015f78 <__sfp_lock_acquire>:
 8015f78:	4801      	ldr	r0, [pc, #4]	@ (8015f80 <__sfp_lock_acquire+0x8>)
 8015f7a:	f000 ba24 	b.w	80163c6 <__retarget_lock_acquire_recursive>
 8015f7e:	bf00      	nop
 8015f80:	24001ad1 	.word	0x24001ad1

08015f84 <__sfp_lock_release>:
 8015f84:	4801      	ldr	r0, [pc, #4]	@ (8015f8c <__sfp_lock_release+0x8>)
 8015f86:	f000 ba1f 	b.w	80163c8 <__retarget_lock_release_recursive>
 8015f8a:	bf00      	nop
 8015f8c:	24001ad1 	.word	0x24001ad1

08015f90 <__sinit>:
 8015f90:	b510      	push	{r4, lr}
 8015f92:	4604      	mov	r4, r0
 8015f94:	f7ff fff0 	bl	8015f78 <__sfp_lock_acquire>
 8015f98:	6a23      	ldr	r3, [r4, #32]
 8015f9a:	b11b      	cbz	r3, 8015fa4 <__sinit+0x14>
 8015f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fa0:	f7ff bff0 	b.w	8015f84 <__sfp_lock_release>
 8015fa4:	4b04      	ldr	r3, [pc, #16]	@ (8015fb8 <__sinit+0x28>)
 8015fa6:	6223      	str	r3, [r4, #32]
 8015fa8:	4b04      	ldr	r3, [pc, #16]	@ (8015fbc <__sinit+0x2c>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d1f5      	bne.n	8015f9c <__sinit+0xc>
 8015fb0:	f7ff ffc4 	bl	8015f3c <global_stdio_init.part.0>
 8015fb4:	e7f2      	b.n	8015f9c <__sinit+0xc>
 8015fb6:	bf00      	nop
 8015fb8:	08015efd 	.word	0x08015efd
 8015fbc:	24001ac8 	.word	0x24001ac8

08015fc0 <_fwalk_sglue>:
 8015fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fc4:	4607      	mov	r7, r0
 8015fc6:	4688      	mov	r8, r1
 8015fc8:	4614      	mov	r4, r2
 8015fca:	2600      	movs	r6, #0
 8015fcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015fd0:	f1b9 0901 	subs.w	r9, r9, #1
 8015fd4:	d505      	bpl.n	8015fe2 <_fwalk_sglue+0x22>
 8015fd6:	6824      	ldr	r4, [r4, #0]
 8015fd8:	2c00      	cmp	r4, #0
 8015fda:	d1f7      	bne.n	8015fcc <_fwalk_sglue+0xc>
 8015fdc:	4630      	mov	r0, r6
 8015fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fe2:	89ab      	ldrh	r3, [r5, #12]
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d907      	bls.n	8015ff8 <_fwalk_sglue+0x38>
 8015fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015fec:	3301      	adds	r3, #1
 8015fee:	d003      	beq.n	8015ff8 <_fwalk_sglue+0x38>
 8015ff0:	4629      	mov	r1, r5
 8015ff2:	4638      	mov	r0, r7
 8015ff4:	47c0      	blx	r8
 8015ff6:	4306      	orrs	r6, r0
 8015ff8:	3568      	adds	r5, #104	@ 0x68
 8015ffa:	e7e9      	b.n	8015fd0 <_fwalk_sglue+0x10>

08015ffc <iprintf>:
 8015ffc:	b40f      	push	{r0, r1, r2, r3}
 8015ffe:	b507      	push	{r0, r1, r2, lr}
 8016000:	4906      	ldr	r1, [pc, #24]	@ (801601c <iprintf+0x20>)
 8016002:	ab04      	add	r3, sp, #16
 8016004:	6808      	ldr	r0, [r1, #0]
 8016006:	f853 2b04 	ldr.w	r2, [r3], #4
 801600a:	6881      	ldr	r1, [r0, #8]
 801600c:	9301      	str	r3, [sp, #4]
 801600e:	f002 fd35 	bl	8018a7c <_vfiprintf_r>
 8016012:	b003      	add	sp, #12
 8016014:	f85d eb04 	ldr.w	lr, [sp], #4
 8016018:	b004      	add	sp, #16
 801601a:	4770      	bx	lr
 801601c:	24000194 	.word	0x24000194

08016020 <_puts_r>:
 8016020:	6a03      	ldr	r3, [r0, #32]
 8016022:	b570      	push	{r4, r5, r6, lr}
 8016024:	6884      	ldr	r4, [r0, #8]
 8016026:	4605      	mov	r5, r0
 8016028:	460e      	mov	r6, r1
 801602a:	b90b      	cbnz	r3, 8016030 <_puts_r+0x10>
 801602c:	f7ff ffb0 	bl	8015f90 <__sinit>
 8016030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016032:	07db      	lsls	r3, r3, #31
 8016034:	d405      	bmi.n	8016042 <_puts_r+0x22>
 8016036:	89a3      	ldrh	r3, [r4, #12]
 8016038:	0598      	lsls	r0, r3, #22
 801603a:	d402      	bmi.n	8016042 <_puts_r+0x22>
 801603c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801603e:	f000 f9c2 	bl	80163c6 <__retarget_lock_acquire_recursive>
 8016042:	89a3      	ldrh	r3, [r4, #12]
 8016044:	0719      	lsls	r1, r3, #28
 8016046:	d502      	bpl.n	801604e <_puts_r+0x2e>
 8016048:	6923      	ldr	r3, [r4, #16]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d135      	bne.n	80160ba <_puts_r+0x9a>
 801604e:	4621      	mov	r1, r4
 8016050:	4628      	mov	r0, r5
 8016052:	f000 f8e5 	bl	8016220 <__swsetup_r>
 8016056:	b380      	cbz	r0, 80160ba <_puts_r+0x9a>
 8016058:	f04f 35ff 	mov.w	r5, #4294967295
 801605c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801605e:	07da      	lsls	r2, r3, #31
 8016060:	d405      	bmi.n	801606e <_puts_r+0x4e>
 8016062:	89a3      	ldrh	r3, [r4, #12]
 8016064:	059b      	lsls	r3, r3, #22
 8016066:	d402      	bmi.n	801606e <_puts_r+0x4e>
 8016068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801606a:	f000 f9ad 	bl	80163c8 <__retarget_lock_release_recursive>
 801606e:	4628      	mov	r0, r5
 8016070:	bd70      	pop	{r4, r5, r6, pc}
 8016072:	2b00      	cmp	r3, #0
 8016074:	da04      	bge.n	8016080 <_puts_r+0x60>
 8016076:	69a2      	ldr	r2, [r4, #24]
 8016078:	429a      	cmp	r2, r3
 801607a:	dc17      	bgt.n	80160ac <_puts_r+0x8c>
 801607c:	290a      	cmp	r1, #10
 801607e:	d015      	beq.n	80160ac <_puts_r+0x8c>
 8016080:	6823      	ldr	r3, [r4, #0]
 8016082:	1c5a      	adds	r2, r3, #1
 8016084:	6022      	str	r2, [r4, #0]
 8016086:	7019      	strb	r1, [r3, #0]
 8016088:	68a3      	ldr	r3, [r4, #8]
 801608a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801608e:	3b01      	subs	r3, #1
 8016090:	60a3      	str	r3, [r4, #8]
 8016092:	2900      	cmp	r1, #0
 8016094:	d1ed      	bne.n	8016072 <_puts_r+0x52>
 8016096:	2b00      	cmp	r3, #0
 8016098:	da11      	bge.n	80160be <_puts_r+0x9e>
 801609a:	4622      	mov	r2, r4
 801609c:	210a      	movs	r1, #10
 801609e:	4628      	mov	r0, r5
 80160a0:	f000 f87f 	bl	80161a2 <__swbuf_r>
 80160a4:	3001      	adds	r0, #1
 80160a6:	d0d7      	beq.n	8016058 <_puts_r+0x38>
 80160a8:	250a      	movs	r5, #10
 80160aa:	e7d7      	b.n	801605c <_puts_r+0x3c>
 80160ac:	4622      	mov	r2, r4
 80160ae:	4628      	mov	r0, r5
 80160b0:	f000 f877 	bl	80161a2 <__swbuf_r>
 80160b4:	3001      	adds	r0, #1
 80160b6:	d1e7      	bne.n	8016088 <_puts_r+0x68>
 80160b8:	e7ce      	b.n	8016058 <_puts_r+0x38>
 80160ba:	3e01      	subs	r6, #1
 80160bc:	e7e4      	b.n	8016088 <_puts_r+0x68>
 80160be:	6823      	ldr	r3, [r4, #0]
 80160c0:	1c5a      	adds	r2, r3, #1
 80160c2:	6022      	str	r2, [r4, #0]
 80160c4:	220a      	movs	r2, #10
 80160c6:	701a      	strb	r2, [r3, #0]
 80160c8:	e7ee      	b.n	80160a8 <_puts_r+0x88>
	...

080160cc <puts>:
 80160cc:	4b02      	ldr	r3, [pc, #8]	@ (80160d8 <puts+0xc>)
 80160ce:	4601      	mov	r1, r0
 80160d0:	6818      	ldr	r0, [r3, #0]
 80160d2:	f7ff bfa5 	b.w	8016020 <_puts_r>
 80160d6:	bf00      	nop
 80160d8:	24000194 	.word	0x24000194

080160dc <siprintf>:
 80160dc:	b40e      	push	{r1, r2, r3}
 80160de:	b500      	push	{lr}
 80160e0:	b09c      	sub	sp, #112	@ 0x70
 80160e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80160e4:	9002      	str	r0, [sp, #8]
 80160e6:	9006      	str	r0, [sp, #24]
 80160e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80160ec:	4809      	ldr	r0, [pc, #36]	@ (8016114 <siprintf+0x38>)
 80160ee:	9107      	str	r1, [sp, #28]
 80160f0:	9104      	str	r1, [sp, #16]
 80160f2:	4909      	ldr	r1, [pc, #36]	@ (8016118 <siprintf+0x3c>)
 80160f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80160f8:	9105      	str	r1, [sp, #20]
 80160fa:	6800      	ldr	r0, [r0, #0]
 80160fc:	9301      	str	r3, [sp, #4]
 80160fe:	a902      	add	r1, sp, #8
 8016100:	f002 fb96 	bl	8018830 <_svfiprintf_r>
 8016104:	9b02      	ldr	r3, [sp, #8]
 8016106:	2200      	movs	r2, #0
 8016108:	701a      	strb	r2, [r3, #0]
 801610a:	b01c      	add	sp, #112	@ 0x70
 801610c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016110:	b003      	add	sp, #12
 8016112:	4770      	bx	lr
 8016114:	24000194 	.word	0x24000194
 8016118:	ffff0208 	.word	0xffff0208

0801611c <__sread>:
 801611c:	b510      	push	{r4, lr}
 801611e:	460c      	mov	r4, r1
 8016120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016124:	f000 f900 	bl	8016328 <_read_r>
 8016128:	2800      	cmp	r0, #0
 801612a:	bfab      	itete	ge
 801612c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801612e:	89a3      	ldrhlt	r3, [r4, #12]
 8016130:	181b      	addge	r3, r3, r0
 8016132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016136:	bfac      	ite	ge
 8016138:	6563      	strge	r3, [r4, #84]	@ 0x54
 801613a:	81a3      	strhlt	r3, [r4, #12]
 801613c:	bd10      	pop	{r4, pc}

0801613e <__swrite>:
 801613e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016142:	461f      	mov	r7, r3
 8016144:	898b      	ldrh	r3, [r1, #12]
 8016146:	05db      	lsls	r3, r3, #23
 8016148:	4605      	mov	r5, r0
 801614a:	460c      	mov	r4, r1
 801614c:	4616      	mov	r6, r2
 801614e:	d505      	bpl.n	801615c <__swrite+0x1e>
 8016150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016154:	2302      	movs	r3, #2
 8016156:	2200      	movs	r2, #0
 8016158:	f000 f8d4 	bl	8016304 <_lseek_r>
 801615c:	89a3      	ldrh	r3, [r4, #12]
 801615e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016166:	81a3      	strh	r3, [r4, #12]
 8016168:	4632      	mov	r2, r6
 801616a:	463b      	mov	r3, r7
 801616c:	4628      	mov	r0, r5
 801616e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016172:	f000 b8eb 	b.w	801634c <_write_r>

08016176 <__sseek>:
 8016176:	b510      	push	{r4, lr}
 8016178:	460c      	mov	r4, r1
 801617a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801617e:	f000 f8c1 	bl	8016304 <_lseek_r>
 8016182:	1c43      	adds	r3, r0, #1
 8016184:	89a3      	ldrh	r3, [r4, #12]
 8016186:	bf15      	itete	ne
 8016188:	6560      	strne	r0, [r4, #84]	@ 0x54
 801618a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801618e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016192:	81a3      	strheq	r3, [r4, #12]
 8016194:	bf18      	it	ne
 8016196:	81a3      	strhne	r3, [r4, #12]
 8016198:	bd10      	pop	{r4, pc}

0801619a <__sclose>:
 801619a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801619e:	f000 b8a1 	b.w	80162e4 <_close_r>

080161a2 <__swbuf_r>:
 80161a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161a4:	460e      	mov	r6, r1
 80161a6:	4614      	mov	r4, r2
 80161a8:	4605      	mov	r5, r0
 80161aa:	b118      	cbz	r0, 80161b4 <__swbuf_r+0x12>
 80161ac:	6a03      	ldr	r3, [r0, #32]
 80161ae:	b90b      	cbnz	r3, 80161b4 <__swbuf_r+0x12>
 80161b0:	f7ff feee 	bl	8015f90 <__sinit>
 80161b4:	69a3      	ldr	r3, [r4, #24]
 80161b6:	60a3      	str	r3, [r4, #8]
 80161b8:	89a3      	ldrh	r3, [r4, #12]
 80161ba:	071a      	lsls	r2, r3, #28
 80161bc:	d501      	bpl.n	80161c2 <__swbuf_r+0x20>
 80161be:	6923      	ldr	r3, [r4, #16]
 80161c0:	b943      	cbnz	r3, 80161d4 <__swbuf_r+0x32>
 80161c2:	4621      	mov	r1, r4
 80161c4:	4628      	mov	r0, r5
 80161c6:	f000 f82b 	bl	8016220 <__swsetup_r>
 80161ca:	b118      	cbz	r0, 80161d4 <__swbuf_r+0x32>
 80161cc:	f04f 37ff 	mov.w	r7, #4294967295
 80161d0:	4638      	mov	r0, r7
 80161d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161d4:	6823      	ldr	r3, [r4, #0]
 80161d6:	6922      	ldr	r2, [r4, #16]
 80161d8:	1a98      	subs	r0, r3, r2
 80161da:	6963      	ldr	r3, [r4, #20]
 80161dc:	b2f6      	uxtb	r6, r6
 80161de:	4283      	cmp	r3, r0
 80161e0:	4637      	mov	r7, r6
 80161e2:	dc05      	bgt.n	80161f0 <__swbuf_r+0x4e>
 80161e4:	4621      	mov	r1, r4
 80161e6:	4628      	mov	r0, r5
 80161e8:	f002 fde4 	bl	8018db4 <_fflush_r>
 80161ec:	2800      	cmp	r0, #0
 80161ee:	d1ed      	bne.n	80161cc <__swbuf_r+0x2a>
 80161f0:	68a3      	ldr	r3, [r4, #8]
 80161f2:	3b01      	subs	r3, #1
 80161f4:	60a3      	str	r3, [r4, #8]
 80161f6:	6823      	ldr	r3, [r4, #0]
 80161f8:	1c5a      	adds	r2, r3, #1
 80161fa:	6022      	str	r2, [r4, #0]
 80161fc:	701e      	strb	r6, [r3, #0]
 80161fe:	6962      	ldr	r2, [r4, #20]
 8016200:	1c43      	adds	r3, r0, #1
 8016202:	429a      	cmp	r2, r3
 8016204:	d004      	beq.n	8016210 <__swbuf_r+0x6e>
 8016206:	89a3      	ldrh	r3, [r4, #12]
 8016208:	07db      	lsls	r3, r3, #31
 801620a:	d5e1      	bpl.n	80161d0 <__swbuf_r+0x2e>
 801620c:	2e0a      	cmp	r6, #10
 801620e:	d1df      	bne.n	80161d0 <__swbuf_r+0x2e>
 8016210:	4621      	mov	r1, r4
 8016212:	4628      	mov	r0, r5
 8016214:	f002 fdce 	bl	8018db4 <_fflush_r>
 8016218:	2800      	cmp	r0, #0
 801621a:	d0d9      	beq.n	80161d0 <__swbuf_r+0x2e>
 801621c:	e7d6      	b.n	80161cc <__swbuf_r+0x2a>
	...

08016220 <__swsetup_r>:
 8016220:	b538      	push	{r3, r4, r5, lr}
 8016222:	4b29      	ldr	r3, [pc, #164]	@ (80162c8 <__swsetup_r+0xa8>)
 8016224:	4605      	mov	r5, r0
 8016226:	6818      	ldr	r0, [r3, #0]
 8016228:	460c      	mov	r4, r1
 801622a:	b118      	cbz	r0, 8016234 <__swsetup_r+0x14>
 801622c:	6a03      	ldr	r3, [r0, #32]
 801622e:	b90b      	cbnz	r3, 8016234 <__swsetup_r+0x14>
 8016230:	f7ff feae 	bl	8015f90 <__sinit>
 8016234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016238:	0719      	lsls	r1, r3, #28
 801623a:	d422      	bmi.n	8016282 <__swsetup_r+0x62>
 801623c:	06da      	lsls	r2, r3, #27
 801623e:	d407      	bmi.n	8016250 <__swsetup_r+0x30>
 8016240:	2209      	movs	r2, #9
 8016242:	602a      	str	r2, [r5, #0]
 8016244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016248:	81a3      	strh	r3, [r4, #12]
 801624a:	f04f 30ff 	mov.w	r0, #4294967295
 801624e:	e033      	b.n	80162b8 <__swsetup_r+0x98>
 8016250:	0758      	lsls	r0, r3, #29
 8016252:	d512      	bpl.n	801627a <__swsetup_r+0x5a>
 8016254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016256:	b141      	cbz	r1, 801626a <__swsetup_r+0x4a>
 8016258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801625c:	4299      	cmp	r1, r3
 801625e:	d002      	beq.n	8016266 <__swsetup_r+0x46>
 8016260:	4628      	mov	r0, r5
 8016262:	f000 fea7 	bl	8016fb4 <_free_r>
 8016266:	2300      	movs	r3, #0
 8016268:	6363      	str	r3, [r4, #52]	@ 0x34
 801626a:	89a3      	ldrh	r3, [r4, #12]
 801626c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016270:	81a3      	strh	r3, [r4, #12]
 8016272:	2300      	movs	r3, #0
 8016274:	6063      	str	r3, [r4, #4]
 8016276:	6923      	ldr	r3, [r4, #16]
 8016278:	6023      	str	r3, [r4, #0]
 801627a:	89a3      	ldrh	r3, [r4, #12]
 801627c:	f043 0308 	orr.w	r3, r3, #8
 8016280:	81a3      	strh	r3, [r4, #12]
 8016282:	6923      	ldr	r3, [r4, #16]
 8016284:	b94b      	cbnz	r3, 801629a <__swsetup_r+0x7a>
 8016286:	89a3      	ldrh	r3, [r4, #12]
 8016288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801628c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016290:	d003      	beq.n	801629a <__swsetup_r+0x7a>
 8016292:	4621      	mov	r1, r4
 8016294:	4628      	mov	r0, r5
 8016296:	f002 fddb 	bl	8018e50 <__smakebuf_r>
 801629a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801629e:	f013 0201 	ands.w	r2, r3, #1
 80162a2:	d00a      	beq.n	80162ba <__swsetup_r+0x9a>
 80162a4:	2200      	movs	r2, #0
 80162a6:	60a2      	str	r2, [r4, #8]
 80162a8:	6962      	ldr	r2, [r4, #20]
 80162aa:	4252      	negs	r2, r2
 80162ac:	61a2      	str	r2, [r4, #24]
 80162ae:	6922      	ldr	r2, [r4, #16]
 80162b0:	b942      	cbnz	r2, 80162c4 <__swsetup_r+0xa4>
 80162b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80162b6:	d1c5      	bne.n	8016244 <__swsetup_r+0x24>
 80162b8:	bd38      	pop	{r3, r4, r5, pc}
 80162ba:	0799      	lsls	r1, r3, #30
 80162bc:	bf58      	it	pl
 80162be:	6962      	ldrpl	r2, [r4, #20]
 80162c0:	60a2      	str	r2, [r4, #8]
 80162c2:	e7f4      	b.n	80162ae <__swsetup_r+0x8e>
 80162c4:	2000      	movs	r0, #0
 80162c6:	e7f7      	b.n	80162b8 <__swsetup_r+0x98>
 80162c8:	24000194 	.word	0x24000194

080162cc <memset>:
 80162cc:	4402      	add	r2, r0
 80162ce:	4603      	mov	r3, r0
 80162d0:	4293      	cmp	r3, r2
 80162d2:	d100      	bne.n	80162d6 <memset+0xa>
 80162d4:	4770      	bx	lr
 80162d6:	f803 1b01 	strb.w	r1, [r3], #1
 80162da:	e7f9      	b.n	80162d0 <memset+0x4>

080162dc <_localeconv_r>:
 80162dc:	4800      	ldr	r0, [pc, #0]	@ (80162e0 <_localeconv_r+0x4>)
 80162de:	4770      	bx	lr
 80162e0:	240002d4 	.word	0x240002d4

080162e4 <_close_r>:
 80162e4:	b538      	push	{r3, r4, r5, lr}
 80162e6:	4d06      	ldr	r5, [pc, #24]	@ (8016300 <_close_r+0x1c>)
 80162e8:	2300      	movs	r3, #0
 80162ea:	4604      	mov	r4, r0
 80162ec:	4608      	mov	r0, r1
 80162ee:	602b      	str	r3, [r5, #0]
 80162f0:	f7f4 f95d 	bl	800a5ae <_close>
 80162f4:	1c43      	adds	r3, r0, #1
 80162f6:	d102      	bne.n	80162fe <_close_r+0x1a>
 80162f8:	682b      	ldr	r3, [r5, #0]
 80162fa:	b103      	cbz	r3, 80162fe <_close_r+0x1a>
 80162fc:	6023      	str	r3, [r4, #0]
 80162fe:	bd38      	pop	{r3, r4, r5, pc}
 8016300:	24001acc 	.word	0x24001acc

08016304 <_lseek_r>:
 8016304:	b538      	push	{r3, r4, r5, lr}
 8016306:	4d07      	ldr	r5, [pc, #28]	@ (8016324 <_lseek_r+0x20>)
 8016308:	4604      	mov	r4, r0
 801630a:	4608      	mov	r0, r1
 801630c:	4611      	mov	r1, r2
 801630e:	2200      	movs	r2, #0
 8016310:	602a      	str	r2, [r5, #0]
 8016312:	461a      	mov	r2, r3
 8016314:	f7f4 f972 	bl	800a5fc <_lseek>
 8016318:	1c43      	adds	r3, r0, #1
 801631a:	d102      	bne.n	8016322 <_lseek_r+0x1e>
 801631c:	682b      	ldr	r3, [r5, #0]
 801631e:	b103      	cbz	r3, 8016322 <_lseek_r+0x1e>
 8016320:	6023      	str	r3, [r4, #0]
 8016322:	bd38      	pop	{r3, r4, r5, pc}
 8016324:	24001acc 	.word	0x24001acc

08016328 <_read_r>:
 8016328:	b538      	push	{r3, r4, r5, lr}
 801632a:	4d07      	ldr	r5, [pc, #28]	@ (8016348 <_read_r+0x20>)
 801632c:	4604      	mov	r4, r0
 801632e:	4608      	mov	r0, r1
 8016330:	4611      	mov	r1, r2
 8016332:	2200      	movs	r2, #0
 8016334:	602a      	str	r2, [r5, #0]
 8016336:	461a      	mov	r2, r3
 8016338:	f7f4 f91c 	bl	800a574 <_read>
 801633c:	1c43      	adds	r3, r0, #1
 801633e:	d102      	bne.n	8016346 <_read_r+0x1e>
 8016340:	682b      	ldr	r3, [r5, #0]
 8016342:	b103      	cbz	r3, 8016346 <_read_r+0x1e>
 8016344:	6023      	str	r3, [r4, #0]
 8016346:	bd38      	pop	{r3, r4, r5, pc}
 8016348:	24001acc 	.word	0x24001acc

0801634c <_write_r>:
 801634c:	b538      	push	{r3, r4, r5, lr}
 801634e:	4d07      	ldr	r5, [pc, #28]	@ (801636c <_write_r+0x20>)
 8016350:	4604      	mov	r4, r0
 8016352:	4608      	mov	r0, r1
 8016354:	4611      	mov	r1, r2
 8016356:	2200      	movs	r2, #0
 8016358:	602a      	str	r2, [r5, #0]
 801635a:	461a      	mov	r2, r3
 801635c:	f7f3 f837 	bl	80093ce <_write>
 8016360:	1c43      	adds	r3, r0, #1
 8016362:	d102      	bne.n	801636a <_write_r+0x1e>
 8016364:	682b      	ldr	r3, [r5, #0]
 8016366:	b103      	cbz	r3, 801636a <_write_r+0x1e>
 8016368:	6023      	str	r3, [r4, #0]
 801636a:	bd38      	pop	{r3, r4, r5, pc}
 801636c:	24001acc 	.word	0x24001acc

08016370 <__errno>:
 8016370:	4b01      	ldr	r3, [pc, #4]	@ (8016378 <__errno+0x8>)
 8016372:	6818      	ldr	r0, [r3, #0]
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop
 8016378:	24000194 	.word	0x24000194

0801637c <__libc_init_array>:
 801637c:	b570      	push	{r4, r5, r6, lr}
 801637e:	4d0d      	ldr	r5, [pc, #52]	@ (80163b4 <__libc_init_array+0x38>)
 8016380:	4c0d      	ldr	r4, [pc, #52]	@ (80163b8 <__libc_init_array+0x3c>)
 8016382:	1b64      	subs	r4, r4, r5
 8016384:	10a4      	asrs	r4, r4, #2
 8016386:	2600      	movs	r6, #0
 8016388:	42a6      	cmp	r6, r4
 801638a:	d109      	bne.n	80163a0 <__libc_init_array+0x24>
 801638c:	4d0b      	ldr	r5, [pc, #44]	@ (80163bc <__libc_init_array+0x40>)
 801638e:	4c0c      	ldr	r4, [pc, #48]	@ (80163c0 <__libc_init_array+0x44>)
 8016390:	f003 fa20 	bl	80197d4 <_init>
 8016394:	1b64      	subs	r4, r4, r5
 8016396:	10a4      	asrs	r4, r4, #2
 8016398:	2600      	movs	r6, #0
 801639a:	42a6      	cmp	r6, r4
 801639c:	d105      	bne.n	80163aa <__libc_init_array+0x2e>
 801639e:	bd70      	pop	{r4, r5, r6, pc}
 80163a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80163a4:	4798      	blx	r3
 80163a6:	3601      	adds	r6, #1
 80163a8:	e7ee      	b.n	8016388 <__libc_init_array+0xc>
 80163aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80163ae:	4798      	blx	r3
 80163b0:	3601      	adds	r6, #1
 80163b2:	e7f2      	b.n	801639a <__libc_init_array+0x1e>
 80163b4:	0801a340 	.word	0x0801a340
 80163b8:	0801a340 	.word	0x0801a340
 80163bc:	0801a340 	.word	0x0801a340
 80163c0:	0801a344 	.word	0x0801a344

080163c4 <__retarget_lock_init_recursive>:
 80163c4:	4770      	bx	lr

080163c6 <__retarget_lock_acquire_recursive>:
 80163c6:	4770      	bx	lr

080163c8 <__retarget_lock_release_recursive>:
 80163c8:	4770      	bx	lr

080163ca <memcpy>:
 80163ca:	440a      	add	r2, r1
 80163cc:	4291      	cmp	r1, r2
 80163ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80163d2:	d100      	bne.n	80163d6 <memcpy+0xc>
 80163d4:	4770      	bx	lr
 80163d6:	b510      	push	{r4, lr}
 80163d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80163e0:	4291      	cmp	r1, r2
 80163e2:	d1f9      	bne.n	80163d8 <memcpy+0xe>
 80163e4:	bd10      	pop	{r4, pc}
	...

080163e8 <nanf>:
 80163e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80163f0 <nanf+0x8>
 80163ec:	4770      	bx	lr
 80163ee:	bf00      	nop
 80163f0:	7fc00000 	.word	0x7fc00000

080163f4 <quorem>:
 80163f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	6903      	ldr	r3, [r0, #16]
 80163fa:	690c      	ldr	r4, [r1, #16]
 80163fc:	42a3      	cmp	r3, r4
 80163fe:	4607      	mov	r7, r0
 8016400:	db7e      	blt.n	8016500 <quorem+0x10c>
 8016402:	3c01      	subs	r4, #1
 8016404:	f101 0814 	add.w	r8, r1, #20
 8016408:	00a3      	lsls	r3, r4, #2
 801640a:	f100 0514 	add.w	r5, r0, #20
 801640e:	9300      	str	r3, [sp, #0]
 8016410:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016414:	9301      	str	r3, [sp, #4]
 8016416:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801641a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801641e:	3301      	adds	r3, #1
 8016420:	429a      	cmp	r2, r3
 8016422:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016426:	fbb2 f6f3 	udiv	r6, r2, r3
 801642a:	d32e      	bcc.n	801648a <quorem+0x96>
 801642c:	f04f 0a00 	mov.w	sl, #0
 8016430:	46c4      	mov	ip, r8
 8016432:	46ae      	mov	lr, r5
 8016434:	46d3      	mov	fp, sl
 8016436:	f85c 3b04 	ldr.w	r3, [ip], #4
 801643a:	b298      	uxth	r0, r3
 801643c:	fb06 a000 	mla	r0, r6, r0, sl
 8016440:	0c02      	lsrs	r2, r0, #16
 8016442:	0c1b      	lsrs	r3, r3, #16
 8016444:	fb06 2303 	mla	r3, r6, r3, r2
 8016448:	f8de 2000 	ldr.w	r2, [lr]
 801644c:	b280      	uxth	r0, r0
 801644e:	b292      	uxth	r2, r2
 8016450:	1a12      	subs	r2, r2, r0
 8016452:	445a      	add	r2, fp
 8016454:	f8de 0000 	ldr.w	r0, [lr]
 8016458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801645c:	b29b      	uxth	r3, r3
 801645e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8016462:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016466:	b292      	uxth	r2, r2
 8016468:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801646c:	45e1      	cmp	r9, ip
 801646e:	f84e 2b04 	str.w	r2, [lr], #4
 8016472:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016476:	d2de      	bcs.n	8016436 <quorem+0x42>
 8016478:	9b00      	ldr	r3, [sp, #0]
 801647a:	58eb      	ldr	r3, [r5, r3]
 801647c:	b92b      	cbnz	r3, 801648a <quorem+0x96>
 801647e:	9b01      	ldr	r3, [sp, #4]
 8016480:	3b04      	subs	r3, #4
 8016482:	429d      	cmp	r5, r3
 8016484:	461a      	mov	r2, r3
 8016486:	d32f      	bcc.n	80164e8 <quorem+0xf4>
 8016488:	613c      	str	r4, [r7, #16]
 801648a:	4638      	mov	r0, r7
 801648c:	f001 f956 	bl	801773c <__mcmp>
 8016490:	2800      	cmp	r0, #0
 8016492:	db25      	blt.n	80164e0 <quorem+0xec>
 8016494:	4629      	mov	r1, r5
 8016496:	2000      	movs	r0, #0
 8016498:	f858 2b04 	ldr.w	r2, [r8], #4
 801649c:	f8d1 c000 	ldr.w	ip, [r1]
 80164a0:	fa1f fe82 	uxth.w	lr, r2
 80164a4:	fa1f f38c 	uxth.w	r3, ip
 80164a8:	eba3 030e 	sub.w	r3, r3, lr
 80164ac:	4403      	add	r3, r0
 80164ae:	0c12      	lsrs	r2, r2, #16
 80164b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80164b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80164b8:	b29b      	uxth	r3, r3
 80164ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80164be:	45c1      	cmp	r9, r8
 80164c0:	f841 3b04 	str.w	r3, [r1], #4
 80164c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80164c8:	d2e6      	bcs.n	8016498 <quorem+0xa4>
 80164ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80164ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80164d2:	b922      	cbnz	r2, 80164de <quorem+0xea>
 80164d4:	3b04      	subs	r3, #4
 80164d6:	429d      	cmp	r5, r3
 80164d8:	461a      	mov	r2, r3
 80164da:	d30b      	bcc.n	80164f4 <quorem+0x100>
 80164dc:	613c      	str	r4, [r7, #16]
 80164de:	3601      	adds	r6, #1
 80164e0:	4630      	mov	r0, r6
 80164e2:	b003      	add	sp, #12
 80164e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164e8:	6812      	ldr	r2, [r2, #0]
 80164ea:	3b04      	subs	r3, #4
 80164ec:	2a00      	cmp	r2, #0
 80164ee:	d1cb      	bne.n	8016488 <quorem+0x94>
 80164f0:	3c01      	subs	r4, #1
 80164f2:	e7c6      	b.n	8016482 <quorem+0x8e>
 80164f4:	6812      	ldr	r2, [r2, #0]
 80164f6:	3b04      	subs	r3, #4
 80164f8:	2a00      	cmp	r2, #0
 80164fa:	d1ef      	bne.n	80164dc <quorem+0xe8>
 80164fc:	3c01      	subs	r4, #1
 80164fe:	e7ea      	b.n	80164d6 <quorem+0xe2>
 8016500:	2000      	movs	r0, #0
 8016502:	e7ee      	b.n	80164e2 <quorem+0xee>
 8016504:	0000      	movs	r0, r0
	...

08016508 <_dtoa_r>:
 8016508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801650c:	ed2d 8b02 	vpush	{d8}
 8016510:	69c7      	ldr	r7, [r0, #28]
 8016512:	b091      	sub	sp, #68	@ 0x44
 8016514:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016518:	ec55 4b10 	vmov	r4, r5, d0
 801651c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801651e:	9107      	str	r1, [sp, #28]
 8016520:	4681      	mov	r9, r0
 8016522:	9209      	str	r2, [sp, #36]	@ 0x24
 8016524:	930d      	str	r3, [sp, #52]	@ 0x34
 8016526:	b97f      	cbnz	r7, 8016548 <_dtoa_r+0x40>
 8016528:	2010      	movs	r0, #16
 801652a:	f000 fd8d 	bl	8017048 <malloc>
 801652e:	4602      	mov	r2, r0
 8016530:	f8c9 001c 	str.w	r0, [r9, #28]
 8016534:	b920      	cbnz	r0, 8016540 <_dtoa_r+0x38>
 8016536:	4ba0      	ldr	r3, [pc, #640]	@ (80167b8 <_dtoa_r+0x2b0>)
 8016538:	21ef      	movs	r1, #239	@ 0xef
 801653a:	48a0      	ldr	r0, [pc, #640]	@ (80167bc <_dtoa_r+0x2b4>)
 801653c:	f002 fd2c 	bl	8018f98 <__assert_func>
 8016540:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016544:	6007      	str	r7, [r0, #0]
 8016546:	60c7      	str	r7, [r0, #12]
 8016548:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801654c:	6819      	ldr	r1, [r3, #0]
 801654e:	b159      	cbz	r1, 8016568 <_dtoa_r+0x60>
 8016550:	685a      	ldr	r2, [r3, #4]
 8016552:	604a      	str	r2, [r1, #4]
 8016554:	2301      	movs	r3, #1
 8016556:	4093      	lsls	r3, r2
 8016558:	608b      	str	r3, [r1, #8]
 801655a:	4648      	mov	r0, r9
 801655c:	f000 fe6a 	bl	8017234 <_Bfree>
 8016560:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8016564:	2200      	movs	r2, #0
 8016566:	601a      	str	r2, [r3, #0]
 8016568:	1e2b      	subs	r3, r5, #0
 801656a:	bfbb      	ittet	lt
 801656c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016570:	9303      	strlt	r3, [sp, #12]
 8016572:	2300      	movge	r3, #0
 8016574:	2201      	movlt	r2, #1
 8016576:	bfac      	ite	ge
 8016578:	6033      	strge	r3, [r6, #0]
 801657a:	6032      	strlt	r2, [r6, #0]
 801657c:	4b90      	ldr	r3, [pc, #576]	@ (80167c0 <_dtoa_r+0x2b8>)
 801657e:	9e03      	ldr	r6, [sp, #12]
 8016580:	43b3      	bics	r3, r6
 8016582:	d110      	bne.n	80165a6 <_dtoa_r+0x9e>
 8016584:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016586:	f242 730f 	movw	r3, #9999	@ 0x270f
 801658a:	6013      	str	r3, [r2, #0]
 801658c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8016590:	4323      	orrs	r3, r4
 8016592:	f000 84de 	beq.w	8016f52 <_dtoa_r+0xa4a>
 8016596:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016598:	4f8a      	ldr	r7, [pc, #552]	@ (80167c4 <_dtoa_r+0x2bc>)
 801659a:	2b00      	cmp	r3, #0
 801659c:	f000 84e0 	beq.w	8016f60 <_dtoa_r+0xa58>
 80165a0:	1cfb      	adds	r3, r7, #3
 80165a2:	f000 bcdb 	b.w	8016f5c <_dtoa_r+0xa54>
 80165a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80165aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80165ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165b2:	d10a      	bne.n	80165ca <_dtoa_r+0xc2>
 80165b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80165b6:	2301      	movs	r3, #1
 80165b8:	6013      	str	r3, [r2, #0]
 80165ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80165bc:	b113      	cbz	r3, 80165c4 <_dtoa_r+0xbc>
 80165be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80165c0:	4b81      	ldr	r3, [pc, #516]	@ (80167c8 <_dtoa_r+0x2c0>)
 80165c2:	6013      	str	r3, [r2, #0]
 80165c4:	4f81      	ldr	r7, [pc, #516]	@ (80167cc <_dtoa_r+0x2c4>)
 80165c6:	f000 bccb 	b.w	8016f60 <_dtoa_r+0xa58>
 80165ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80165cc:	a90f      	add	r1, sp, #60	@ 0x3c
 80165ce:	4648      	mov	r0, r9
 80165d0:	eeb0 0b48 	vmov.f64	d0, d8
 80165d4:	f001 f9d2 	bl	801797c <__d2b>
 80165d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80165dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80165de:	9001      	str	r0, [sp, #4]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d045      	beq.n	8016670 <_dtoa_r+0x168>
 80165e4:	eeb0 7b48 	vmov.f64	d7, d8
 80165e8:	ee18 1a90 	vmov	r1, s17
 80165ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80165f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80165f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80165f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80165fc:	2500      	movs	r5, #0
 80165fe:	ee07 1a90 	vmov	s15, r1
 8016602:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8016606:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80167a0 <_dtoa_r+0x298>
 801660a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801660e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80167a8 <_dtoa_r+0x2a0>
 8016612:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016616:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80167b0 <_dtoa_r+0x2a8>
 801661a:	ee07 3a90 	vmov	s15, r3
 801661e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8016622:	eeb0 7b46 	vmov.f64	d7, d6
 8016626:	eea4 7b05 	vfma.f64	d7, d4, d5
 801662a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801662e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016636:	ee16 8a90 	vmov	r8, s13
 801663a:	d508      	bpl.n	801664e <_dtoa_r+0x146>
 801663c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016640:	eeb4 6b47 	vcmp.f64	d6, d7
 8016644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016648:	bf18      	it	ne
 801664a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801664e:	f1b8 0f16 	cmp.w	r8, #22
 8016652:	d82b      	bhi.n	80166ac <_dtoa_r+0x1a4>
 8016654:	495e      	ldr	r1, [pc, #376]	@ (80167d0 <_dtoa_r+0x2c8>)
 8016656:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801665a:	ed91 7b00 	vldr	d7, [r1]
 801665e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016666:	d501      	bpl.n	801666c <_dtoa_r+0x164>
 8016668:	f108 38ff 	add.w	r8, r8, #4294967295
 801666c:	2100      	movs	r1, #0
 801666e:	e01e      	b.n	80166ae <_dtoa_r+0x1a6>
 8016670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016672:	4413      	add	r3, r2
 8016674:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8016678:	2920      	cmp	r1, #32
 801667a:	bfc1      	itttt	gt
 801667c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8016680:	408e      	lslgt	r6, r1
 8016682:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8016686:	fa24 f101 	lsrgt.w	r1, r4, r1
 801668a:	bfd6      	itet	le
 801668c:	f1c1 0120 	rsble	r1, r1, #32
 8016690:	4331      	orrgt	r1, r6
 8016692:	fa04 f101 	lslle.w	r1, r4, r1
 8016696:	ee07 1a90 	vmov	s15, r1
 801669a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801669e:	3b01      	subs	r3, #1
 80166a0:	ee17 1a90 	vmov	r1, s15
 80166a4:	2501      	movs	r5, #1
 80166a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80166aa:	e7a8      	b.n	80165fe <_dtoa_r+0xf6>
 80166ac:	2101      	movs	r1, #1
 80166ae:	1ad2      	subs	r2, r2, r3
 80166b0:	1e53      	subs	r3, r2, #1
 80166b2:	9306      	str	r3, [sp, #24]
 80166b4:	bf45      	ittet	mi
 80166b6:	f1c2 0301 	rsbmi	r3, r2, #1
 80166ba:	9305      	strmi	r3, [sp, #20]
 80166bc:	2300      	movpl	r3, #0
 80166be:	2300      	movmi	r3, #0
 80166c0:	bf4c      	ite	mi
 80166c2:	9306      	strmi	r3, [sp, #24]
 80166c4:	9305      	strpl	r3, [sp, #20]
 80166c6:	f1b8 0f00 	cmp.w	r8, #0
 80166ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80166cc:	db18      	blt.n	8016700 <_dtoa_r+0x1f8>
 80166ce:	9b06      	ldr	r3, [sp, #24]
 80166d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80166d4:	4443      	add	r3, r8
 80166d6:	9306      	str	r3, [sp, #24]
 80166d8:	2300      	movs	r3, #0
 80166da:	9a07      	ldr	r2, [sp, #28]
 80166dc:	2a09      	cmp	r2, #9
 80166de:	d849      	bhi.n	8016774 <_dtoa_r+0x26c>
 80166e0:	2a05      	cmp	r2, #5
 80166e2:	bfc4      	itt	gt
 80166e4:	3a04      	subgt	r2, #4
 80166e6:	9207      	strgt	r2, [sp, #28]
 80166e8:	9a07      	ldr	r2, [sp, #28]
 80166ea:	f1a2 0202 	sub.w	r2, r2, #2
 80166ee:	bfcc      	ite	gt
 80166f0:	2400      	movgt	r4, #0
 80166f2:	2401      	movle	r4, #1
 80166f4:	2a03      	cmp	r2, #3
 80166f6:	d848      	bhi.n	801678a <_dtoa_r+0x282>
 80166f8:	e8df f002 	tbb	[pc, r2]
 80166fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8016700:	9b05      	ldr	r3, [sp, #20]
 8016702:	2200      	movs	r2, #0
 8016704:	eba3 0308 	sub.w	r3, r3, r8
 8016708:	9305      	str	r3, [sp, #20]
 801670a:	920a      	str	r2, [sp, #40]	@ 0x28
 801670c:	f1c8 0300 	rsb	r3, r8, #0
 8016710:	e7e3      	b.n	80166da <_dtoa_r+0x1d2>
 8016712:	2200      	movs	r2, #0
 8016714:	9208      	str	r2, [sp, #32]
 8016716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016718:	2a00      	cmp	r2, #0
 801671a:	dc39      	bgt.n	8016790 <_dtoa_r+0x288>
 801671c:	f04f 0b01 	mov.w	fp, #1
 8016720:	46da      	mov	sl, fp
 8016722:	465a      	mov	r2, fp
 8016724:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016728:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801672c:	2100      	movs	r1, #0
 801672e:	2004      	movs	r0, #4
 8016730:	f100 0614 	add.w	r6, r0, #20
 8016734:	4296      	cmp	r6, r2
 8016736:	d930      	bls.n	801679a <_dtoa_r+0x292>
 8016738:	6079      	str	r1, [r7, #4]
 801673a:	4648      	mov	r0, r9
 801673c:	9304      	str	r3, [sp, #16]
 801673e:	f000 fd39 	bl	80171b4 <_Balloc>
 8016742:	9b04      	ldr	r3, [sp, #16]
 8016744:	4607      	mov	r7, r0
 8016746:	2800      	cmp	r0, #0
 8016748:	d146      	bne.n	80167d8 <_dtoa_r+0x2d0>
 801674a:	4b22      	ldr	r3, [pc, #136]	@ (80167d4 <_dtoa_r+0x2cc>)
 801674c:	4602      	mov	r2, r0
 801674e:	f240 11af 	movw	r1, #431	@ 0x1af
 8016752:	e6f2      	b.n	801653a <_dtoa_r+0x32>
 8016754:	2201      	movs	r2, #1
 8016756:	e7dd      	b.n	8016714 <_dtoa_r+0x20c>
 8016758:	2200      	movs	r2, #0
 801675a:	9208      	str	r2, [sp, #32]
 801675c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801675e:	eb08 0b02 	add.w	fp, r8, r2
 8016762:	f10b 0a01 	add.w	sl, fp, #1
 8016766:	4652      	mov	r2, sl
 8016768:	2a01      	cmp	r2, #1
 801676a:	bfb8      	it	lt
 801676c:	2201      	movlt	r2, #1
 801676e:	e7db      	b.n	8016728 <_dtoa_r+0x220>
 8016770:	2201      	movs	r2, #1
 8016772:	e7f2      	b.n	801675a <_dtoa_r+0x252>
 8016774:	2401      	movs	r4, #1
 8016776:	2200      	movs	r2, #0
 8016778:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801677c:	f04f 3bff 	mov.w	fp, #4294967295
 8016780:	2100      	movs	r1, #0
 8016782:	46da      	mov	sl, fp
 8016784:	2212      	movs	r2, #18
 8016786:	9109      	str	r1, [sp, #36]	@ 0x24
 8016788:	e7ce      	b.n	8016728 <_dtoa_r+0x220>
 801678a:	2201      	movs	r2, #1
 801678c:	9208      	str	r2, [sp, #32]
 801678e:	e7f5      	b.n	801677c <_dtoa_r+0x274>
 8016790:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8016794:	46da      	mov	sl, fp
 8016796:	465a      	mov	r2, fp
 8016798:	e7c6      	b.n	8016728 <_dtoa_r+0x220>
 801679a:	3101      	adds	r1, #1
 801679c:	0040      	lsls	r0, r0, #1
 801679e:	e7c7      	b.n	8016730 <_dtoa_r+0x228>
 80167a0:	636f4361 	.word	0x636f4361
 80167a4:	3fd287a7 	.word	0x3fd287a7
 80167a8:	8b60c8b3 	.word	0x8b60c8b3
 80167ac:	3fc68a28 	.word	0x3fc68a28
 80167b0:	509f79fb 	.word	0x509f79fb
 80167b4:	3fd34413 	.word	0x3fd34413
 80167b8:	08019f52 	.word	0x08019f52
 80167bc:	08019f69 	.word	0x08019f69
 80167c0:	7ff00000 	.word	0x7ff00000
 80167c4:	08019f4e 	.word	0x08019f4e
 80167c8:	08019f1d 	.word	0x08019f1d
 80167cc:	08019f1c 	.word	0x08019f1c
 80167d0:	0801a060 	.word	0x0801a060
 80167d4:	08019fc1 	.word	0x08019fc1
 80167d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80167dc:	f1ba 0f0e 	cmp.w	sl, #14
 80167e0:	6010      	str	r0, [r2, #0]
 80167e2:	d86f      	bhi.n	80168c4 <_dtoa_r+0x3bc>
 80167e4:	2c00      	cmp	r4, #0
 80167e6:	d06d      	beq.n	80168c4 <_dtoa_r+0x3bc>
 80167e8:	f1b8 0f00 	cmp.w	r8, #0
 80167ec:	f340 80c2 	ble.w	8016974 <_dtoa_r+0x46c>
 80167f0:	4aca      	ldr	r2, [pc, #808]	@ (8016b1c <_dtoa_r+0x614>)
 80167f2:	f008 010f 	and.w	r1, r8, #15
 80167f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80167fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80167fe:	ed92 7b00 	vldr	d7, [r2]
 8016802:	ea4f 1128 	mov.w	r1, r8, asr #4
 8016806:	f000 80a9 	beq.w	801695c <_dtoa_r+0x454>
 801680a:	4ac5      	ldr	r2, [pc, #788]	@ (8016b20 <_dtoa_r+0x618>)
 801680c:	ed92 6b08 	vldr	d6, [r2, #32]
 8016810:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8016814:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016818:	f001 010f 	and.w	r1, r1, #15
 801681c:	2203      	movs	r2, #3
 801681e:	48c0      	ldr	r0, [pc, #768]	@ (8016b20 <_dtoa_r+0x618>)
 8016820:	2900      	cmp	r1, #0
 8016822:	f040 809d 	bne.w	8016960 <_dtoa_r+0x458>
 8016826:	ed9d 6b02 	vldr	d6, [sp, #8]
 801682a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801682e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016832:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016834:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016838:	2900      	cmp	r1, #0
 801683a:	f000 80c1 	beq.w	80169c0 <_dtoa_r+0x4b8>
 801683e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8016842:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801684a:	f140 80b9 	bpl.w	80169c0 <_dtoa_r+0x4b8>
 801684e:	f1ba 0f00 	cmp.w	sl, #0
 8016852:	f000 80b5 	beq.w	80169c0 <_dtoa_r+0x4b8>
 8016856:	f1bb 0f00 	cmp.w	fp, #0
 801685a:	dd31      	ble.n	80168c0 <_dtoa_r+0x3b8>
 801685c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8016860:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016864:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016868:	f108 31ff 	add.w	r1, r8, #4294967295
 801686c:	9104      	str	r1, [sp, #16]
 801686e:	3201      	adds	r2, #1
 8016870:	465c      	mov	r4, fp
 8016872:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016876:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801687a:	ee07 2a90 	vmov	s15, r2
 801687e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016882:	eea7 5b06 	vfma.f64	d5, d7, d6
 8016886:	ee15 2a90 	vmov	r2, s11
 801688a:	ec51 0b15 	vmov	r0, r1, d5
 801688e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8016892:	2c00      	cmp	r4, #0
 8016894:	f040 8098 	bne.w	80169c8 <_dtoa_r+0x4c0>
 8016898:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801689c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80168a0:	ec41 0b17 	vmov	d7, r0, r1
 80168a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80168a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ac:	f300 8261 	bgt.w	8016d72 <_dtoa_r+0x86a>
 80168b0:	eeb1 7b47 	vneg.f64	d7, d7
 80168b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80168b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168bc:	f100 80f5 	bmi.w	8016aaa <_dtoa_r+0x5a2>
 80168c0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80168c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80168c6:	2a00      	cmp	r2, #0
 80168c8:	f2c0 812c 	blt.w	8016b24 <_dtoa_r+0x61c>
 80168cc:	f1b8 0f0e 	cmp.w	r8, #14
 80168d0:	f300 8128 	bgt.w	8016b24 <_dtoa_r+0x61c>
 80168d4:	4b91      	ldr	r3, [pc, #580]	@ (8016b1c <_dtoa_r+0x614>)
 80168d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80168da:	ed93 6b00 	vldr	d6, [r3]
 80168de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	da03      	bge.n	80168ec <_dtoa_r+0x3e4>
 80168e4:	f1ba 0f00 	cmp.w	sl, #0
 80168e8:	f340 80d2 	ble.w	8016a90 <_dtoa_r+0x588>
 80168ec:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80168f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80168f4:	463e      	mov	r6, r7
 80168f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80168fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80168fe:	ee15 3a10 	vmov	r3, s10
 8016902:	3330      	adds	r3, #48	@ 0x30
 8016904:	f806 3b01 	strb.w	r3, [r6], #1
 8016908:	1bf3      	subs	r3, r6, r7
 801690a:	459a      	cmp	sl, r3
 801690c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016910:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016914:	f040 80f8 	bne.w	8016b08 <_dtoa_r+0x600>
 8016918:	ee37 7b07 	vadd.f64	d7, d7, d7
 801691c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016924:	f300 80dd 	bgt.w	8016ae2 <_dtoa_r+0x5da>
 8016928:	eeb4 7b46 	vcmp.f64	d7, d6
 801692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016930:	d104      	bne.n	801693c <_dtoa_r+0x434>
 8016932:	ee15 3a10 	vmov	r3, s10
 8016936:	07db      	lsls	r3, r3, #31
 8016938:	f100 80d3 	bmi.w	8016ae2 <_dtoa_r+0x5da>
 801693c:	9901      	ldr	r1, [sp, #4]
 801693e:	4648      	mov	r0, r9
 8016940:	f000 fc78 	bl	8017234 <_Bfree>
 8016944:	2300      	movs	r3, #0
 8016946:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016948:	7033      	strb	r3, [r6, #0]
 801694a:	f108 0301 	add.w	r3, r8, #1
 801694e:	6013      	str	r3, [r2, #0]
 8016950:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016952:	2b00      	cmp	r3, #0
 8016954:	f000 8304 	beq.w	8016f60 <_dtoa_r+0xa58>
 8016958:	601e      	str	r6, [r3, #0]
 801695a:	e301      	b.n	8016f60 <_dtoa_r+0xa58>
 801695c:	2202      	movs	r2, #2
 801695e:	e75e      	b.n	801681e <_dtoa_r+0x316>
 8016960:	07cc      	lsls	r4, r1, #31
 8016962:	d504      	bpl.n	801696e <_dtoa_r+0x466>
 8016964:	ed90 6b00 	vldr	d6, [r0]
 8016968:	3201      	adds	r2, #1
 801696a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801696e:	1049      	asrs	r1, r1, #1
 8016970:	3008      	adds	r0, #8
 8016972:	e755      	b.n	8016820 <_dtoa_r+0x318>
 8016974:	d022      	beq.n	80169bc <_dtoa_r+0x4b4>
 8016976:	f1c8 0100 	rsb	r1, r8, #0
 801697a:	4a68      	ldr	r2, [pc, #416]	@ (8016b1c <_dtoa_r+0x614>)
 801697c:	f001 000f 	and.w	r0, r1, #15
 8016980:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016984:	ed92 7b00 	vldr	d7, [r2]
 8016988:	ee28 7b07 	vmul.f64	d7, d8, d7
 801698c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016990:	4863      	ldr	r0, [pc, #396]	@ (8016b20 <_dtoa_r+0x618>)
 8016992:	1109      	asrs	r1, r1, #4
 8016994:	2400      	movs	r4, #0
 8016996:	2202      	movs	r2, #2
 8016998:	b929      	cbnz	r1, 80169a6 <_dtoa_r+0x49e>
 801699a:	2c00      	cmp	r4, #0
 801699c:	f43f af49 	beq.w	8016832 <_dtoa_r+0x32a>
 80169a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80169a4:	e745      	b.n	8016832 <_dtoa_r+0x32a>
 80169a6:	07ce      	lsls	r6, r1, #31
 80169a8:	d505      	bpl.n	80169b6 <_dtoa_r+0x4ae>
 80169aa:	ed90 6b00 	vldr	d6, [r0]
 80169ae:	3201      	adds	r2, #1
 80169b0:	2401      	movs	r4, #1
 80169b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80169b6:	1049      	asrs	r1, r1, #1
 80169b8:	3008      	adds	r0, #8
 80169ba:	e7ed      	b.n	8016998 <_dtoa_r+0x490>
 80169bc:	2202      	movs	r2, #2
 80169be:	e738      	b.n	8016832 <_dtoa_r+0x32a>
 80169c0:	f8cd 8010 	str.w	r8, [sp, #16]
 80169c4:	4654      	mov	r4, sl
 80169c6:	e754      	b.n	8016872 <_dtoa_r+0x36a>
 80169c8:	4a54      	ldr	r2, [pc, #336]	@ (8016b1c <_dtoa_r+0x614>)
 80169ca:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80169ce:	ed12 4b02 	vldr	d4, [r2, #-8]
 80169d2:	9a08      	ldr	r2, [sp, #32]
 80169d4:	ec41 0b17 	vmov	d7, r0, r1
 80169d8:	443c      	add	r4, r7
 80169da:	b34a      	cbz	r2, 8016a30 <_dtoa_r+0x528>
 80169dc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80169e0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80169e4:	463e      	mov	r6, r7
 80169e6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80169ea:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80169ee:	ee35 7b47 	vsub.f64	d7, d5, d7
 80169f2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80169f6:	ee14 2a90 	vmov	r2, s9
 80169fa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80169fe:	3230      	adds	r2, #48	@ 0x30
 8016a00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016a04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0c:	f806 2b01 	strb.w	r2, [r6], #1
 8016a10:	d438      	bmi.n	8016a84 <_dtoa_r+0x57c>
 8016a12:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016a16:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a1e:	d462      	bmi.n	8016ae6 <_dtoa_r+0x5de>
 8016a20:	42a6      	cmp	r6, r4
 8016a22:	f43f af4d 	beq.w	80168c0 <_dtoa_r+0x3b8>
 8016a26:	ee27 7b03 	vmul.f64	d7, d7, d3
 8016a2a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016a2e:	e7e0      	b.n	80169f2 <_dtoa_r+0x4ea>
 8016a30:	4621      	mov	r1, r4
 8016a32:	463e      	mov	r6, r7
 8016a34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016a38:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8016a3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016a40:	ee14 2a90 	vmov	r2, s9
 8016a44:	3230      	adds	r2, #48	@ 0x30
 8016a46:	f806 2b01 	strb.w	r2, [r6], #1
 8016a4a:	42a6      	cmp	r6, r4
 8016a4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016a50:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016a54:	d119      	bne.n	8016a8a <_dtoa_r+0x582>
 8016a56:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8016a5a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016a5e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a66:	dc3e      	bgt.n	8016ae6 <_dtoa_r+0x5de>
 8016a68:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016a6c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8016a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a74:	f57f af24 	bpl.w	80168c0 <_dtoa_r+0x3b8>
 8016a78:	460e      	mov	r6, r1
 8016a7a:	3901      	subs	r1, #1
 8016a7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016a80:	2b30      	cmp	r3, #48	@ 0x30
 8016a82:	d0f9      	beq.n	8016a78 <_dtoa_r+0x570>
 8016a84:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016a88:	e758      	b.n	801693c <_dtoa_r+0x434>
 8016a8a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016a8e:	e7d5      	b.n	8016a3c <_dtoa_r+0x534>
 8016a90:	d10b      	bne.n	8016aaa <_dtoa_r+0x5a2>
 8016a92:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016a96:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016a9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016a9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa6:	f2c0 8161 	blt.w	8016d6c <_dtoa_r+0x864>
 8016aaa:	2400      	movs	r4, #0
 8016aac:	4625      	mov	r5, r4
 8016aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ab0:	43db      	mvns	r3, r3
 8016ab2:	9304      	str	r3, [sp, #16]
 8016ab4:	463e      	mov	r6, r7
 8016ab6:	f04f 0800 	mov.w	r8, #0
 8016aba:	4621      	mov	r1, r4
 8016abc:	4648      	mov	r0, r9
 8016abe:	f000 fbb9 	bl	8017234 <_Bfree>
 8016ac2:	2d00      	cmp	r5, #0
 8016ac4:	d0de      	beq.n	8016a84 <_dtoa_r+0x57c>
 8016ac6:	f1b8 0f00 	cmp.w	r8, #0
 8016aca:	d005      	beq.n	8016ad8 <_dtoa_r+0x5d0>
 8016acc:	45a8      	cmp	r8, r5
 8016ace:	d003      	beq.n	8016ad8 <_dtoa_r+0x5d0>
 8016ad0:	4641      	mov	r1, r8
 8016ad2:	4648      	mov	r0, r9
 8016ad4:	f000 fbae 	bl	8017234 <_Bfree>
 8016ad8:	4629      	mov	r1, r5
 8016ada:	4648      	mov	r0, r9
 8016adc:	f000 fbaa 	bl	8017234 <_Bfree>
 8016ae0:	e7d0      	b.n	8016a84 <_dtoa_r+0x57c>
 8016ae2:	f8cd 8010 	str.w	r8, [sp, #16]
 8016ae6:	4633      	mov	r3, r6
 8016ae8:	461e      	mov	r6, r3
 8016aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016aee:	2a39      	cmp	r2, #57	@ 0x39
 8016af0:	d106      	bne.n	8016b00 <_dtoa_r+0x5f8>
 8016af2:	429f      	cmp	r7, r3
 8016af4:	d1f8      	bne.n	8016ae8 <_dtoa_r+0x5e0>
 8016af6:	9a04      	ldr	r2, [sp, #16]
 8016af8:	3201      	adds	r2, #1
 8016afa:	9204      	str	r2, [sp, #16]
 8016afc:	2230      	movs	r2, #48	@ 0x30
 8016afe:	703a      	strb	r2, [r7, #0]
 8016b00:	781a      	ldrb	r2, [r3, #0]
 8016b02:	3201      	adds	r2, #1
 8016b04:	701a      	strb	r2, [r3, #0]
 8016b06:	e7bd      	b.n	8016a84 <_dtoa_r+0x57c>
 8016b08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016b0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b14:	f47f aeef 	bne.w	80168f6 <_dtoa_r+0x3ee>
 8016b18:	e710      	b.n	801693c <_dtoa_r+0x434>
 8016b1a:	bf00      	nop
 8016b1c:	0801a060 	.word	0x0801a060
 8016b20:	0801a038 	.word	0x0801a038
 8016b24:	9908      	ldr	r1, [sp, #32]
 8016b26:	2900      	cmp	r1, #0
 8016b28:	f000 80e3 	beq.w	8016cf2 <_dtoa_r+0x7ea>
 8016b2c:	9907      	ldr	r1, [sp, #28]
 8016b2e:	2901      	cmp	r1, #1
 8016b30:	f300 80c8 	bgt.w	8016cc4 <_dtoa_r+0x7bc>
 8016b34:	2d00      	cmp	r5, #0
 8016b36:	f000 80c1 	beq.w	8016cbc <_dtoa_r+0x7b4>
 8016b3a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016b3e:	9e05      	ldr	r6, [sp, #20]
 8016b40:	461c      	mov	r4, r3
 8016b42:	9304      	str	r3, [sp, #16]
 8016b44:	9b05      	ldr	r3, [sp, #20]
 8016b46:	4413      	add	r3, r2
 8016b48:	9305      	str	r3, [sp, #20]
 8016b4a:	9b06      	ldr	r3, [sp, #24]
 8016b4c:	2101      	movs	r1, #1
 8016b4e:	4413      	add	r3, r2
 8016b50:	4648      	mov	r0, r9
 8016b52:	9306      	str	r3, [sp, #24]
 8016b54:	f000 fc6c 	bl	8017430 <__i2b>
 8016b58:	9b04      	ldr	r3, [sp, #16]
 8016b5a:	4605      	mov	r5, r0
 8016b5c:	b166      	cbz	r6, 8016b78 <_dtoa_r+0x670>
 8016b5e:	9a06      	ldr	r2, [sp, #24]
 8016b60:	2a00      	cmp	r2, #0
 8016b62:	dd09      	ble.n	8016b78 <_dtoa_r+0x670>
 8016b64:	42b2      	cmp	r2, r6
 8016b66:	9905      	ldr	r1, [sp, #20]
 8016b68:	bfa8      	it	ge
 8016b6a:	4632      	movge	r2, r6
 8016b6c:	1a89      	subs	r1, r1, r2
 8016b6e:	9105      	str	r1, [sp, #20]
 8016b70:	9906      	ldr	r1, [sp, #24]
 8016b72:	1ab6      	subs	r6, r6, r2
 8016b74:	1a8a      	subs	r2, r1, r2
 8016b76:	9206      	str	r2, [sp, #24]
 8016b78:	b1fb      	cbz	r3, 8016bba <_dtoa_r+0x6b2>
 8016b7a:	9a08      	ldr	r2, [sp, #32]
 8016b7c:	2a00      	cmp	r2, #0
 8016b7e:	f000 80bc 	beq.w	8016cfa <_dtoa_r+0x7f2>
 8016b82:	b19c      	cbz	r4, 8016bac <_dtoa_r+0x6a4>
 8016b84:	4629      	mov	r1, r5
 8016b86:	4622      	mov	r2, r4
 8016b88:	4648      	mov	r0, r9
 8016b8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016b8c:	f000 fd10 	bl	80175b0 <__pow5mult>
 8016b90:	9a01      	ldr	r2, [sp, #4]
 8016b92:	4601      	mov	r1, r0
 8016b94:	4605      	mov	r5, r0
 8016b96:	4648      	mov	r0, r9
 8016b98:	f000 fc60 	bl	801745c <__multiply>
 8016b9c:	9901      	ldr	r1, [sp, #4]
 8016b9e:	9004      	str	r0, [sp, #16]
 8016ba0:	4648      	mov	r0, r9
 8016ba2:	f000 fb47 	bl	8017234 <_Bfree>
 8016ba6:	9a04      	ldr	r2, [sp, #16]
 8016ba8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016baa:	9201      	str	r2, [sp, #4]
 8016bac:	1b1a      	subs	r2, r3, r4
 8016bae:	d004      	beq.n	8016bba <_dtoa_r+0x6b2>
 8016bb0:	9901      	ldr	r1, [sp, #4]
 8016bb2:	4648      	mov	r0, r9
 8016bb4:	f000 fcfc 	bl	80175b0 <__pow5mult>
 8016bb8:	9001      	str	r0, [sp, #4]
 8016bba:	2101      	movs	r1, #1
 8016bbc:	4648      	mov	r0, r9
 8016bbe:	f000 fc37 	bl	8017430 <__i2b>
 8016bc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016bc4:	4604      	mov	r4, r0
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	f000 81d0 	beq.w	8016f6c <_dtoa_r+0xa64>
 8016bcc:	461a      	mov	r2, r3
 8016bce:	4601      	mov	r1, r0
 8016bd0:	4648      	mov	r0, r9
 8016bd2:	f000 fced 	bl	80175b0 <__pow5mult>
 8016bd6:	9b07      	ldr	r3, [sp, #28]
 8016bd8:	2b01      	cmp	r3, #1
 8016bda:	4604      	mov	r4, r0
 8016bdc:	f300 8095 	bgt.w	8016d0a <_dtoa_r+0x802>
 8016be0:	9b02      	ldr	r3, [sp, #8]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	f040 808b 	bne.w	8016cfe <_dtoa_r+0x7f6>
 8016be8:	9b03      	ldr	r3, [sp, #12]
 8016bea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016bee:	2a00      	cmp	r2, #0
 8016bf0:	f040 8087 	bne.w	8016d02 <_dtoa_r+0x7fa>
 8016bf4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016bf8:	0d12      	lsrs	r2, r2, #20
 8016bfa:	0512      	lsls	r2, r2, #20
 8016bfc:	2a00      	cmp	r2, #0
 8016bfe:	f000 8082 	beq.w	8016d06 <_dtoa_r+0x7fe>
 8016c02:	9b05      	ldr	r3, [sp, #20]
 8016c04:	3301      	adds	r3, #1
 8016c06:	9305      	str	r3, [sp, #20]
 8016c08:	9b06      	ldr	r3, [sp, #24]
 8016c0a:	3301      	adds	r3, #1
 8016c0c:	9306      	str	r3, [sp, #24]
 8016c0e:	2301      	movs	r3, #1
 8016c10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	f000 81af 	beq.w	8016f78 <_dtoa_r+0xa70>
 8016c1a:	6922      	ldr	r2, [r4, #16]
 8016c1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016c20:	6910      	ldr	r0, [r2, #16]
 8016c22:	f000 fbb9 	bl	8017398 <__hi0bits>
 8016c26:	f1c0 0020 	rsb	r0, r0, #32
 8016c2a:	9b06      	ldr	r3, [sp, #24]
 8016c2c:	4418      	add	r0, r3
 8016c2e:	f010 001f 	ands.w	r0, r0, #31
 8016c32:	d076      	beq.n	8016d22 <_dtoa_r+0x81a>
 8016c34:	f1c0 0220 	rsb	r2, r0, #32
 8016c38:	2a04      	cmp	r2, #4
 8016c3a:	dd69      	ble.n	8016d10 <_dtoa_r+0x808>
 8016c3c:	9b05      	ldr	r3, [sp, #20]
 8016c3e:	f1c0 001c 	rsb	r0, r0, #28
 8016c42:	4403      	add	r3, r0
 8016c44:	9305      	str	r3, [sp, #20]
 8016c46:	9b06      	ldr	r3, [sp, #24]
 8016c48:	4406      	add	r6, r0
 8016c4a:	4403      	add	r3, r0
 8016c4c:	9306      	str	r3, [sp, #24]
 8016c4e:	9b05      	ldr	r3, [sp, #20]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	dd05      	ble.n	8016c60 <_dtoa_r+0x758>
 8016c54:	9901      	ldr	r1, [sp, #4]
 8016c56:	461a      	mov	r2, r3
 8016c58:	4648      	mov	r0, r9
 8016c5a:	f000 fd03 	bl	8017664 <__lshift>
 8016c5e:	9001      	str	r0, [sp, #4]
 8016c60:	9b06      	ldr	r3, [sp, #24]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	dd05      	ble.n	8016c72 <_dtoa_r+0x76a>
 8016c66:	4621      	mov	r1, r4
 8016c68:	461a      	mov	r2, r3
 8016c6a:	4648      	mov	r0, r9
 8016c6c:	f000 fcfa 	bl	8017664 <__lshift>
 8016c70:	4604      	mov	r4, r0
 8016c72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d056      	beq.n	8016d26 <_dtoa_r+0x81e>
 8016c78:	9801      	ldr	r0, [sp, #4]
 8016c7a:	4621      	mov	r1, r4
 8016c7c:	f000 fd5e 	bl	801773c <__mcmp>
 8016c80:	2800      	cmp	r0, #0
 8016c82:	da50      	bge.n	8016d26 <_dtoa_r+0x81e>
 8016c84:	f108 33ff 	add.w	r3, r8, #4294967295
 8016c88:	9304      	str	r3, [sp, #16]
 8016c8a:	9901      	ldr	r1, [sp, #4]
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	220a      	movs	r2, #10
 8016c90:	4648      	mov	r0, r9
 8016c92:	f000 faf1 	bl	8017278 <__multadd>
 8016c96:	9b08      	ldr	r3, [sp, #32]
 8016c98:	9001      	str	r0, [sp, #4]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	f000 816e 	beq.w	8016f7c <_dtoa_r+0xa74>
 8016ca0:	4629      	mov	r1, r5
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	220a      	movs	r2, #10
 8016ca6:	4648      	mov	r0, r9
 8016ca8:	f000 fae6 	bl	8017278 <__multadd>
 8016cac:	f1bb 0f00 	cmp.w	fp, #0
 8016cb0:	4605      	mov	r5, r0
 8016cb2:	dc64      	bgt.n	8016d7e <_dtoa_r+0x876>
 8016cb4:	9b07      	ldr	r3, [sp, #28]
 8016cb6:	2b02      	cmp	r3, #2
 8016cb8:	dc3e      	bgt.n	8016d38 <_dtoa_r+0x830>
 8016cba:	e060      	b.n	8016d7e <_dtoa_r+0x876>
 8016cbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016cbe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016cc2:	e73c      	b.n	8016b3e <_dtoa_r+0x636>
 8016cc4:	f10a 34ff 	add.w	r4, sl, #4294967295
 8016cc8:	42a3      	cmp	r3, r4
 8016cca:	bfbf      	itttt	lt
 8016ccc:	1ae2      	sublt	r2, r4, r3
 8016cce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016cd0:	189b      	addlt	r3, r3, r2
 8016cd2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8016cd4:	bfae      	itee	ge
 8016cd6:	1b1c      	subge	r4, r3, r4
 8016cd8:	4623      	movlt	r3, r4
 8016cda:	2400      	movlt	r4, #0
 8016cdc:	f1ba 0f00 	cmp.w	sl, #0
 8016ce0:	bfb5      	itete	lt
 8016ce2:	9a05      	ldrlt	r2, [sp, #20]
 8016ce4:	9e05      	ldrge	r6, [sp, #20]
 8016ce6:	eba2 060a 	sublt.w	r6, r2, sl
 8016cea:	4652      	movge	r2, sl
 8016cec:	bfb8      	it	lt
 8016cee:	2200      	movlt	r2, #0
 8016cf0:	e727      	b.n	8016b42 <_dtoa_r+0x63a>
 8016cf2:	9e05      	ldr	r6, [sp, #20]
 8016cf4:	9d08      	ldr	r5, [sp, #32]
 8016cf6:	461c      	mov	r4, r3
 8016cf8:	e730      	b.n	8016b5c <_dtoa_r+0x654>
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	e758      	b.n	8016bb0 <_dtoa_r+0x6a8>
 8016cfe:	2300      	movs	r3, #0
 8016d00:	e786      	b.n	8016c10 <_dtoa_r+0x708>
 8016d02:	9b02      	ldr	r3, [sp, #8]
 8016d04:	e784      	b.n	8016c10 <_dtoa_r+0x708>
 8016d06:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016d08:	e783      	b.n	8016c12 <_dtoa_r+0x70a>
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016d0e:	e784      	b.n	8016c1a <_dtoa_r+0x712>
 8016d10:	d09d      	beq.n	8016c4e <_dtoa_r+0x746>
 8016d12:	9b05      	ldr	r3, [sp, #20]
 8016d14:	321c      	adds	r2, #28
 8016d16:	4413      	add	r3, r2
 8016d18:	9305      	str	r3, [sp, #20]
 8016d1a:	9b06      	ldr	r3, [sp, #24]
 8016d1c:	4416      	add	r6, r2
 8016d1e:	4413      	add	r3, r2
 8016d20:	e794      	b.n	8016c4c <_dtoa_r+0x744>
 8016d22:	4602      	mov	r2, r0
 8016d24:	e7f5      	b.n	8016d12 <_dtoa_r+0x80a>
 8016d26:	f1ba 0f00 	cmp.w	sl, #0
 8016d2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8016d2e:	46d3      	mov	fp, sl
 8016d30:	dc21      	bgt.n	8016d76 <_dtoa_r+0x86e>
 8016d32:	9b07      	ldr	r3, [sp, #28]
 8016d34:	2b02      	cmp	r3, #2
 8016d36:	dd1e      	ble.n	8016d76 <_dtoa_r+0x86e>
 8016d38:	f1bb 0f00 	cmp.w	fp, #0
 8016d3c:	f47f aeb7 	bne.w	8016aae <_dtoa_r+0x5a6>
 8016d40:	4621      	mov	r1, r4
 8016d42:	465b      	mov	r3, fp
 8016d44:	2205      	movs	r2, #5
 8016d46:	4648      	mov	r0, r9
 8016d48:	f000 fa96 	bl	8017278 <__multadd>
 8016d4c:	4601      	mov	r1, r0
 8016d4e:	4604      	mov	r4, r0
 8016d50:	9801      	ldr	r0, [sp, #4]
 8016d52:	f000 fcf3 	bl	801773c <__mcmp>
 8016d56:	2800      	cmp	r0, #0
 8016d58:	f77f aea9 	ble.w	8016aae <_dtoa_r+0x5a6>
 8016d5c:	463e      	mov	r6, r7
 8016d5e:	2331      	movs	r3, #49	@ 0x31
 8016d60:	f806 3b01 	strb.w	r3, [r6], #1
 8016d64:	9b04      	ldr	r3, [sp, #16]
 8016d66:	3301      	adds	r3, #1
 8016d68:	9304      	str	r3, [sp, #16]
 8016d6a:	e6a4      	b.n	8016ab6 <_dtoa_r+0x5ae>
 8016d6c:	f8cd 8010 	str.w	r8, [sp, #16]
 8016d70:	4654      	mov	r4, sl
 8016d72:	4625      	mov	r5, r4
 8016d74:	e7f2      	b.n	8016d5c <_dtoa_r+0x854>
 8016d76:	9b08      	ldr	r3, [sp, #32]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	f000 8103 	beq.w	8016f84 <_dtoa_r+0xa7c>
 8016d7e:	2e00      	cmp	r6, #0
 8016d80:	dd05      	ble.n	8016d8e <_dtoa_r+0x886>
 8016d82:	4629      	mov	r1, r5
 8016d84:	4632      	mov	r2, r6
 8016d86:	4648      	mov	r0, r9
 8016d88:	f000 fc6c 	bl	8017664 <__lshift>
 8016d8c:	4605      	mov	r5, r0
 8016d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d058      	beq.n	8016e46 <_dtoa_r+0x93e>
 8016d94:	6869      	ldr	r1, [r5, #4]
 8016d96:	4648      	mov	r0, r9
 8016d98:	f000 fa0c 	bl	80171b4 <_Balloc>
 8016d9c:	4606      	mov	r6, r0
 8016d9e:	b928      	cbnz	r0, 8016dac <_dtoa_r+0x8a4>
 8016da0:	4b82      	ldr	r3, [pc, #520]	@ (8016fac <_dtoa_r+0xaa4>)
 8016da2:	4602      	mov	r2, r0
 8016da4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016da8:	f7ff bbc7 	b.w	801653a <_dtoa_r+0x32>
 8016dac:	692a      	ldr	r2, [r5, #16]
 8016dae:	3202      	adds	r2, #2
 8016db0:	0092      	lsls	r2, r2, #2
 8016db2:	f105 010c 	add.w	r1, r5, #12
 8016db6:	300c      	adds	r0, #12
 8016db8:	f7ff fb07 	bl	80163ca <memcpy>
 8016dbc:	2201      	movs	r2, #1
 8016dbe:	4631      	mov	r1, r6
 8016dc0:	4648      	mov	r0, r9
 8016dc2:	f000 fc4f 	bl	8017664 <__lshift>
 8016dc6:	1c7b      	adds	r3, r7, #1
 8016dc8:	9305      	str	r3, [sp, #20]
 8016dca:	eb07 030b 	add.w	r3, r7, fp
 8016dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8016dd0:	9b02      	ldr	r3, [sp, #8]
 8016dd2:	f003 0301 	and.w	r3, r3, #1
 8016dd6:	46a8      	mov	r8, r5
 8016dd8:	9308      	str	r3, [sp, #32]
 8016dda:	4605      	mov	r5, r0
 8016ddc:	9b05      	ldr	r3, [sp, #20]
 8016dde:	9801      	ldr	r0, [sp, #4]
 8016de0:	4621      	mov	r1, r4
 8016de2:	f103 3bff 	add.w	fp, r3, #4294967295
 8016de6:	f7ff fb05 	bl	80163f4 <quorem>
 8016dea:	4641      	mov	r1, r8
 8016dec:	9002      	str	r0, [sp, #8]
 8016dee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016df2:	9801      	ldr	r0, [sp, #4]
 8016df4:	f000 fca2 	bl	801773c <__mcmp>
 8016df8:	462a      	mov	r2, r5
 8016dfa:	9006      	str	r0, [sp, #24]
 8016dfc:	4621      	mov	r1, r4
 8016dfe:	4648      	mov	r0, r9
 8016e00:	f000 fcb8 	bl	8017774 <__mdiff>
 8016e04:	68c2      	ldr	r2, [r0, #12]
 8016e06:	4606      	mov	r6, r0
 8016e08:	b9fa      	cbnz	r2, 8016e4a <_dtoa_r+0x942>
 8016e0a:	4601      	mov	r1, r0
 8016e0c:	9801      	ldr	r0, [sp, #4]
 8016e0e:	f000 fc95 	bl	801773c <__mcmp>
 8016e12:	4602      	mov	r2, r0
 8016e14:	4631      	mov	r1, r6
 8016e16:	4648      	mov	r0, r9
 8016e18:	920a      	str	r2, [sp, #40]	@ 0x28
 8016e1a:	f000 fa0b 	bl	8017234 <_Bfree>
 8016e1e:	9b07      	ldr	r3, [sp, #28]
 8016e20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016e22:	9e05      	ldr	r6, [sp, #20]
 8016e24:	ea43 0102 	orr.w	r1, r3, r2
 8016e28:	9b08      	ldr	r3, [sp, #32]
 8016e2a:	4319      	orrs	r1, r3
 8016e2c:	d10f      	bne.n	8016e4e <_dtoa_r+0x946>
 8016e2e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016e32:	d028      	beq.n	8016e86 <_dtoa_r+0x97e>
 8016e34:	9b06      	ldr	r3, [sp, #24]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	dd02      	ble.n	8016e40 <_dtoa_r+0x938>
 8016e3a:	9b02      	ldr	r3, [sp, #8]
 8016e3c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8016e40:	f88b a000 	strb.w	sl, [fp]
 8016e44:	e639      	b.n	8016aba <_dtoa_r+0x5b2>
 8016e46:	4628      	mov	r0, r5
 8016e48:	e7bd      	b.n	8016dc6 <_dtoa_r+0x8be>
 8016e4a:	2201      	movs	r2, #1
 8016e4c:	e7e2      	b.n	8016e14 <_dtoa_r+0x90c>
 8016e4e:	9b06      	ldr	r3, [sp, #24]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	db04      	blt.n	8016e5e <_dtoa_r+0x956>
 8016e54:	9907      	ldr	r1, [sp, #28]
 8016e56:	430b      	orrs	r3, r1
 8016e58:	9908      	ldr	r1, [sp, #32]
 8016e5a:	430b      	orrs	r3, r1
 8016e5c:	d120      	bne.n	8016ea0 <_dtoa_r+0x998>
 8016e5e:	2a00      	cmp	r2, #0
 8016e60:	ddee      	ble.n	8016e40 <_dtoa_r+0x938>
 8016e62:	9901      	ldr	r1, [sp, #4]
 8016e64:	2201      	movs	r2, #1
 8016e66:	4648      	mov	r0, r9
 8016e68:	f000 fbfc 	bl	8017664 <__lshift>
 8016e6c:	4621      	mov	r1, r4
 8016e6e:	9001      	str	r0, [sp, #4]
 8016e70:	f000 fc64 	bl	801773c <__mcmp>
 8016e74:	2800      	cmp	r0, #0
 8016e76:	dc03      	bgt.n	8016e80 <_dtoa_r+0x978>
 8016e78:	d1e2      	bne.n	8016e40 <_dtoa_r+0x938>
 8016e7a:	f01a 0f01 	tst.w	sl, #1
 8016e7e:	d0df      	beq.n	8016e40 <_dtoa_r+0x938>
 8016e80:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016e84:	d1d9      	bne.n	8016e3a <_dtoa_r+0x932>
 8016e86:	2339      	movs	r3, #57	@ 0x39
 8016e88:	f88b 3000 	strb.w	r3, [fp]
 8016e8c:	4633      	mov	r3, r6
 8016e8e:	461e      	mov	r6, r3
 8016e90:	3b01      	subs	r3, #1
 8016e92:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016e96:	2a39      	cmp	r2, #57	@ 0x39
 8016e98:	d053      	beq.n	8016f42 <_dtoa_r+0xa3a>
 8016e9a:	3201      	adds	r2, #1
 8016e9c:	701a      	strb	r2, [r3, #0]
 8016e9e:	e60c      	b.n	8016aba <_dtoa_r+0x5b2>
 8016ea0:	2a00      	cmp	r2, #0
 8016ea2:	dd07      	ble.n	8016eb4 <_dtoa_r+0x9ac>
 8016ea4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016ea8:	d0ed      	beq.n	8016e86 <_dtoa_r+0x97e>
 8016eaa:	f10a 0301 	add.w	r3, sl, #1
 8016eae:	f88b 3000 	strb.w	r3, [fp]
 8016eb2:	e602      	b.n	8016aba <_dtoa_r+0x5b2>
 8016eb4:	9b05      	ldr	r3, [sp, #20]
 8016eb6:	9a05      	ldr	r2, [sp, #20]
 8016eb8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8016ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ebe:	4293      	cmp	r3, r2
 8016ec0:	d029      	beq.n	8016f16 <_dtoa_r+0xa0e>
 8016ec2:	9901      	ldr	r1, [sp, #4]
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	220a      	movs	r2, #10
 8016ec8:	4648      	mov	r0, r9
 8016eca:	f000 f9d5 	bl	8017278 <__multadd>
 8016ece:	45a8      	cmp	r8, r5
 8016ed0:	9001      	str	r0, [sp, #4]
 8016ed2:	f04f 0300 	mov.w	r3, #0
 8016ed6:	f04f 020a 	mov.w	r2, #10
 8016eda:	4641      	mov	r1, r8
 8016edc:	4648      	mov	r0, r9
 8016ede:	d107      	bne.n	8016ef0 <_dtoa_r+0x9e8>
 8016ee0:	f000 f9ca 	bl	8017278 <__multadd>
 8016ee4:	4680      	mov	r8, r0
 8016ee6:	4605      	mov	r5, r0
 8016ee8:	9b05      	ldr	r3, [sp, #20]
 8016eea:	3301      	adds	r3, #1
 8016eec:	9305      	str	r3, [sp, #20]
 8016eee:	e775      	b.n	8016ddc <_dtoa_r+0x8d4>
 8016ef0:	f000 f9c2 	bl	8017278 <__multadd>
 8016ef4:	4629      	mov	r1, r5
 8016ef6:	4680      	mov	r8, r0
 8016ef8:	2300      	movs	r3, #0
 8016efa:	220a      	movs	r2, #10
 8016efc:	4648      	mov	r0, r9
 8016efe:	f000 f9bb 	bl	8017278 <__multadd>
 8016f02:	4605      	mov	r5, r0
 8016f04:	e7f0      	b.n	8016ee8 <_dtoa_r+0x9e0>
 8016f06:	f1bb 0f00 	cmp.w	fp, #0
 8016f0a:	bfcc      	ite	gt
 8016f0c:	465e      	movgt	r6, fp
 8016f0e:	2601      	movle	r6, #1
 8016f10:	443e      	add	r6, r7
 8016f12:	f04f 0800 	mov.w	r8, #0
 8016f16:	9901      	ldr	r1, [sp, #4]
 8016f18:	2201      	movs	r2, #1
 8016f1a:	4648      	mov	r0, r9
 8016f1c:	f000 fba2 	bl	8017664 <__lshift>
 8016f20:	4621      	mov	r1, r4
 8016f22:	9001      	str	r0, [sp, #4]
 8016f24:	f000 fc0a 	bl	801773c <__mcmp>
 8016f28:	2800      	cmp	r0, #0
 8016f2a:	dcaf      	bgt.n	8016e8c <_dtoa_r+0x984>
 8016f2c:	d102      	bne.n	8016f34 <_dtoa_r+0xa2c>
 8016f2e:	f01a 0f01 	tst.w	sl, #1
 8016f32:	d1ab      	bne.n	8016e8c <_dtoa_r+0x984>
 8016f34:	4633      	mov	r3, r6
 8016f36:	461e      	mov	r6, r3
 8016f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016f3c:	2a30      	cmp	r2, #48	@ 0x30
 8016f3e:	d0fa      	beq.n	8016f36 <_dtoa_r+0xa2e>
 8016f40:	e5bb      	b.n	8016aba <_dtoa_r+0x5b2>
 8016f42:	429f      	cmp	r7, r3
 8016f44:	d1a3      	bne.n	8016e8e <_dtoa_r+0x986>
 8016f46:	9b04      	ldr	r3, [sp, #16]
 8016f48:	3301      	adds	r3, #1
 8016f4a:	9304      	str	r3, [sp, #16]
 8016f4c:	2331      	movs	r3, #49	@ 0x31
 8016f4e:	703b      	strb	r3, [r7, #0]
 8016f50:	e5b3      	b.n	8016aba <_dtoa_r+0x5b2>
 8016f52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016f54:	4f16      	ldr	r7, [pc, #88]	@ (8016fb0 <_dtoa_r+0xaa8>)
 8016f56:	b11b      	cbz	r3, 8016f60 <_dtoa_r+0xa58>
 8016f58:	f107 0308 	add.w	r3, r7, #8
 8016f5c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016f5e:	6013      	str	r3, [r2, #0]
 8016f60:	4638      	mov	r0, r7
 8016f62:	b011      	add	sp, #68	@ 0x44
 8016f64:	ecbd 8b02 	vpop	{d8}
 8016f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f6c:	9b07      	ldr	r3, [sp, #28]
 8016f6e:	2b01      	cmp	r3, #1
 8016f70:	f77f ae36 	ble.w	8016be0 <_dtoa_r+0x6d8>
 8016f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016f78:	2001      	movs	r0, #1
 8016f7a:	e656      	b.n	8016c2a <_dtoa_r+0x722>
 8016f7c:	f1bb 0f00 	cmp.w	fp, #0
 8016f80:	f77f aed7 	ble.w	8016d32 <_dtoa_r+0x82a>
 8016f84:	463e      	mov	r6, r7
 8016f86:	9801      	ldr	r0, [sp, #4]
 8016f88:	4621      	mov	r1, r4
 8016f8a:	f7ff fa33 	bl	80163f4 <quorem>
 8016f8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016f92:	f806 ab01 	strb.w	sl, [r6], #1
 8016f96:	1bf2      	subs	r2, r6, r7
 8016f98:	4593      	cmp	fp, r2
 8016f9a:	ddb4      	ble.n	8016f06 <_dtoa_r+0x9fe>
 8016f9c:	9901      	ldr	r1, [sp, #4]
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	220a      	movs	r2, #10
 8016fa2:	4648      	mov	r0, r9
 8016fa4:	f000 f968 	bl	8017278 <__multadd>
 8016fa8:	9001      	str	r0, [sp, #4]
 8016faa:	e7ec      	b.n	8016f86 <_dtoa_r+0xa7e>
 8016fac:	08019fc1 	.word	0x08019fc1
 8016fb0:	08019f45 	.word	0x08019f45

08016fb4 <_free_r>:
 8016fb4:	b538      	push	{r3, r4, r5, lr}
 8016fb6:	4605      	mov	r5, r0
 8016fb8:	2900      	cmp	r1, #0
 8016fba:	d041      	beq.n	8017040 <_free_r+0x8c>
 8016fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fc0:	1f0c      	subs	r4, r1, #4
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	bfb8      	it	lt
 8016fc6:	18e4      	addlt	r4, r4, r3
 8016fc8:	f000 f8e8 	bl	801719c <__malloc_lock>
 8016fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8017044 <_free_r+0x90>)
 8016fce:	6813      	ldr	r3, [r2, #0]
 8016fd0:	b933      	cbnz	r3, 8016fe0 <_free_r+0x2c>
 8016fd2:	6063      	str	r3, [r4, #4]
 8016fd4:	6014      	str	r4, [r2, #0]
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fdc:	f000 b8e4 	b.w	80171a8 <__malloc_unlock>
 8016fe0:	42a3      	cmp	r3, r4
 8016fe2:	d908      	bls.n	8016ff6 <_free_r+0x42>
 8016fe4:	6820      	ldr	r0, [r4, #0]
 8016fe6:	1821      	adds	r1, r4, r0
 8016fe8:	428b      	cmp	r3, r1
 8016fea:	bf01      	itttt	eq
 8016fec:	6819      	ldreq	r1, [r3, #0]
 8016fee:	685b      	ldreq	r3, [r3, #4]
 8016ff0:	1809      	addeq	r1, r1, r0
 8016ff2:	6021      	streq	r1, [r4, #0]
 8016ff4:	e7ed      	b.n	8016fd2 <_free_r+0x1e>
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	685b      	ldr	r3, [r3, #4]
 8016ffa:	b10b      	cbz	r3, 8017000 <_free_r+0x4c>
 8016ffc:	42a3      	cmp	r3, r4
 8016ffe:	d9fa      	bls.n	8016ff6 <_free_r+0x42>
 8017000:	6811      	ldr	r1, [r2, #0]
 8017002:	1850      	adds	r0, r2, r1
 8017004:	42a0      	cmp	r0, r4
 8017006:	d10b      	bne.n	8017020 <_free_r+0x6c>
 8017008:	6820      	ldr	r0, [r4, #0]
 801700a:	4401      	add	r1, r0
 801700c:	1850      	adds	r0, r2, r1
 801700e:	4283      	cmp	r3, r0
 8017010:	6011      	str	r1, [r2, #0]
 8017012:	d1e0      	bne.n	8016fd6 <_free_r+0x22>
 8017014:	6818      	ldr	r0, [r3, #0]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	6053      	str	r3, [r2, #4]
 801701a:	4408      	add	r0, r1
 801701c:	6010      	str	r0, [r2, #0]
 801701e:	e7da      	b.n	8016fd6 <_free_r+0x22>
 8017020:	d902      	bls.n	8017028 <_free_r+0x74>
 8017022:	230c      	movs	r3, #12
 8017024:	602b      	str	r3, [r5, #0]
 8017026:	e7d6      	b.n	8016fd6 <_free_r+0x22>
 8017028:	6820      	ldr	r0, [r4, #0]
 801702a:	1821      	adds	r1, r4, r0
 801702c:	428b      	cmp	r3, r1
 801702e:	bf04      	itt	eq
 8017030:	6819      	ldreq	r1, [r3, #0]
 8017032:	685b      	ldreq	r3, [r3, #4]
 8017034:	6063      	str	r3, [r4, #4]
 8017036:	bf04      	itt	eq
 8017038:	1809      	addeq	r1, r1, r0
 801703a:	6021      	streq	r1, [r4, #0]
 801703c:	6054      	str	r4, [r2, #4]
 801703e:	e7ca      	b.n	8016fd6 <_free_r+0x22>
 8017040:	bd38      	pop	{r3, r4, r5, pc}
 8017042:	bf00      	nop
 8017044:	24001ad8 	.word	0x24001ad8

08017048 <malloc>:
 8017048:	4b02      	ldr	r3, [pc, #8]	@ (8017054 <malloc+0xc>)
 801704a:	4601      	mov	r1, r0
 801704c:	6818      	ldr	r0, [r3, #0]
 801704e:	f000 b825 	b.w	801709c <_malloc_r>
 8017052:	bf00      	nop
 8017054:	24000194 	.word	0x24000194

08017058 <sbrk_aligned>:
 8017058:	b570      	push	{r4, r5, r6, lr}
 801705a:	4e0f      	ldr	r6, [pc, #60]	@ (8017098 <sbrk_aligned+0x40>)
 801705c:	460c      	mov	r4, r1
 801705e:	6831      	ldr	r1, [r6, #0]
 8017060:	4605      	mov	r5, r0
 8017062:	b911      	cbnz	r1, 801706a <sbrk_aligned+0x12>
 8017064:	f001 ff7e 	bl	8018f64 <_sbrk_r>
 8017068:	6030      	str	r0, [r6, #0]
 801706a:	4621      	mov	r1, r4
 801706c:	4628      	mov	r0, r5
 801706e:	f001 ff79 	bl	8018f64 <_sbrk_r>
 8017072:	1c43      	adds	r3, r0, #1
 8017074:	d103      	bne.n	801707e <sbrk_aligned+0x26>
 8017076:	f04f 34ff 	mov.w	r4, #4294967295
 801707a:	4620      	mov	r0, r4
 801707c:	bd70      	pop	{r4, r5, r6, pc}
 801707e:	1cc4      	adds	r4, r0, #3
 8017080:	f024 0403 	bic.w	r4, r4, #3
 8017084:	42a0      	cmp	r0, r4
 8017086:	d0f8      	beq.n	801707a <sbrk_aligned+0x22>
 8017088:	1a21      	subs	r1, r4, r0
 801708a:	4628      	mov	r0, r5
 801708c:	f001 ff6a 	bl	8018f64 <_sbrk_r>
 8017090:	3001      	adds	r0, #1
 8017092:	d1f2      	bne.n	801707a <sbrk_aligned+0x22>
 8017094:	e7ef      	b.n	8017076 <sbrk_aligned+0x1e>
 8017096:	bf00      	nop
 8017098:	24001ad4 	.word	0x24001ad4

0801709c <_malloc_r>:
 801709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170a0:	1ccd      	adds	r5, r1, #3
 80170a2:	f025 0503 	bic.w	r5, r5, #3
 80170a6:	3508      	adds	r5, #8
 80170a8:	2d0c      	cmp	r5, #12
 80170aa:	bf38      	it	cc
 80170ac:	250c      	movcc	r5, #12
 80170ae:	2d00      	cmp	r5, #0
 80170b0:	4606      	mov	r6, r0
 80170b2:	db01      	blt.n	80170b8 <_malloc_r+0x1c>
 80170b4:	42a9      	cmp	r1, r5
 80170b6:	d904      	bls.n	80170c2 <_malloc_r+0x26>
 80170b8:	230c      	movs	r3, #12
 80170ba:	6033      	str	r3, [r6, #0]
 80170bc:	2000      	movs	r0, #0
 80170be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017198 <_malloc_r+0xfc>
 80170c6:	f000 f869 	bl	801719c <__malloc_lock>
 80170ca:	f8d8 3000 	ldr.w	r3, [r8]
 80170ce:	461c      	mov	r4, r3
 80170d0:	bb44      	cbnz	r4, 8017124 <_malloc_r+0x88>
 80170d2:	4629      	mov	r1, r5
 80170d4:	4630      	mov	r0, r6
 80170d6:	f7ff ffbf 	bl	8017058 <sbrk_aligned>
 80170da:	1c43      	adds	r3, r0, #1
 80170dc:	4604      	mov	r4, r0
 80170de:	d158      	bne.n	8017192 <_malloc_r+0xf6>
 80170e0:	f8d8 4000 	ldr.w	r4, [r8]
 80170e4:	4627      	mov	r7, r4
 80170e6:	2f00      	cmp	r7, #0
 80170e8:	d143      	bne.n	8017172 <_malloc_r+0xd6>
 80170ea:	2c00      	cmp	r4, #0
 80170ec:	d04b      	beq.n	8017186 <_malloc_r+0xea>
 80170ee:	6823      	ldr	r3, [r4, #0]
 80170f0:	4639      	mov	r1, r7
 80170f2:	4630      	mov	r0, r6
 80170f4:	eb04 0903 	add.w	r9, r4, r3
 80170f8:	f001 ff34 	bl	8018f64 <_sbrk_r>
 80170fc:	4581      	cmp	r9, r0
 80170fe:	d142      	bne.n	8017186 <_malloc_r+0xea>
 8017100:	6821      	ldr	r1, [r4, #0]
 8017102:	1a6d      	subs	r5, r5, r1
 8017104:	4629      	mov	r1, r5
 8017106:	4630      	mov	r0, r6
 8017108:	f7ff ffa6 	bl	8017058 <sbrk_aligned>
 801710c:	3001      	adds	r0, #1
 801710e:	d03a      	beq.n	8017186 <_malloc_r+0xea>
 8017110:	6823      	ldr	r3, [r4, #0]
 8017112:	442b      	add	r3, r5
 8017114:	6023      	str	r3, [r4, #0]
 8017116:	f8d8 3000 	ldr.w	r3, [r8]
 801711a:	685a      	ldr	r2, [r3, #4]
 801711c:	bb62      	cbnz	r2, 8017178 <_malloc_r+0xdc>
 801711e:	f8c8 7000 	str.w	r7, [r8]
 8017122:	e00f      	b.n	8017144 <_malloc_r+0xa8>
 8017124:	6822      	ldr	r2, [r4, #0]
 8017126:	1b52      	subs	r2, r2, r5
 8017128:	d420      	bmi.n	801716c <_malloc_r+0xd0>
 801712a:	2a0b      	cmp	r2, #11
 801712c:	d917      	bls.n	801715e <_malloc_r+0xc2>
 801712e:	1961      	adds	r1, r4, r5
 8017130:	42a3      	cmp	r3, r4
 8017132:	6025      	str	r5, [r4, #0]
 8017134:	bf18      	it	ne
 8017136:	6059      	strne	r1, [r3, #4]
 8017138:	6863      	ldr	r3, [r4, #4]
 801713a:	bf08      	it	eq
 801713c:	f8c8 1000 	streq.w	r1, [r8]
 8017140:	5162      	str	r2, [r4, r5]
 8017142:	604b      	str	r3, [r1, #4]
 8017144:	4630      	mov	r0, r6
 8017146:	f000 f82f 	bl	80171a8 <__malloc_unlock>
 801714a:	f104 000b 	add.w	r0, r4, #11
 801714e:	1d23      	adds	r3, r4, #4
 8017150:	f020 0007 	bic.w	r0, r0, #7
 8017154:	1ac2      	subs	r2, r0, r3
 8017156:	bf1c      	itt	ne
 8017158:	1a1b      	subne	r3, r3, r0
 801715a:	50a3      	strne	r3, [r4, r2]
 801715c:	e7af      	b.n	80170be <_malloc_r+0x22>
 801715e:	6862      	ldr	r2, [r4, #4]
 8017160:	42a3      	cmp	r3, r4
 8017162:	bf0c      	ite	eq
 8017164:	f8c8 2000 	streq.w	r2, [r8]
 8017168:	605a      	strne	r2, [r3, #4]
 801716a:	e7eb      	b.n	8017144 <_malloc_r+0xa8>
 801716c:	4623      	mov	r3, r4
 801716e:	6864      	ldr	r4, [r4, #4]
 8017170:	e7ae      	b.n	80170d0 <_malloc_r+0x34>
 8017172:	463c      	mov	r4, r7
 8017174:	687f      	ldr	r7, [r7, #4]
 8017176:	e7b6      	b.n	80170e6 <_malloc_r+0x4a>
 8017178:	461a      	mov	r2, r3
 801717a:	685b      	ldr	r3, [r3, #4]
 801717c:	42a3      	cmp	r3, r4
 801717e:	d1fb      	bne.n	8017178 <_malloc_r+0xdc>
 8017180:	2300      	movs	r3, #0
 8017182:	6053      	str	r3, [r2, #4]
 8017184:	e7de      	b.n	8017144 <_malloc_r+0xa8>
 8017186:	230c      	movs	r3, #12
 8017188:	6033      	str	r3, [r6, #0]
 801718a:	4630      	mov	r0, r6
 801718c:	f000 f80c 	bl	80171a8 <__malloc_unlock>
 8017190:	e794      	b.n	80170bc <_malloc_r+0x20>
 8017192:	6005      	str	r5, [r0, #0]
 8017194:	e7d6      	b.n	8017144 <_malloc_r+0xa8>
 8017196:	bf00      	nop
 8017198:	24001ad8 	.word	0x24001ad8

0801719c <__malloc_lock>:
 801719c:	4801      	ldr	r0, [pc, #4]	@ (80171a4 <__malloc_lock+0x8>)
 801719e:	f7ff b912 	b.w	80163c6 <__retarget_lock_acquire_recursive>
 80171a2:	bf00      	nop
 80171a4:	24001ad0 	.word	0x24001ad0

080171a8 <__malloc_unlock>:
 80171a8:	4801      	ldr	r0, [pc, #4]	@ (80171b0 <__malloc_unlock+0x8>)
 80171aa:	f7ff b90d 	b.w	80163c8 <__retarget_lock_release_recursive>
 80171ae:	bf00      	nop
 80171b0:	24001ad0 	.word	0x24001ad0

080171b4 <_Balloc>:
 80171b4:	b570      	push	{r4, r5, r6, lr}
 80171b6:	69c6      	ldr	r6, [r0, #28]
 80171b8:	4604      	mov	r4, r0
 80171ba:	460d      	mov	r5, r1
 80171bc:	b976      	cbnz	r6, 80171dc <_Balloc+0x28>
 80171be:	2010      	movs	r0, #16
 80171c0:	f7ff ff42 	bl	8017048 <malloc>
 80171c4:	4602      	mov	r2, r0
 80171c6:	61e0      	str	r0, [r4, #28]
 80171c8:	b920      	cbnz	r0, 80171d4 <_Balloc+0x20>
 80171ca:	4b18      	ldr	r3, [pc, #96]	@ (801722c <_Balloc+0x78>)
 80171cc:	4818      	ldr	r0, [pc, #96]	@ (8017230 <_Balloc+0x7c>)
 80171ce:	216b      	movs	r1, #107	@ 0x6b
 80171d0:	f001 fee2 	bl	8018f98 <__assert_func>
 80171d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80171d8:	6006      	str	r6, [r0, #0]
 80171da:	60c6      	str	r6, [r0, #12]
 80171dc:	69e6      	ldr	r6, [r4, #28]
 80171de:	68f3      	ldr	r3, [r6, #12]
 80171e0:	b183      	cbz	r3, 8017204 <_Balloc+0x50>
 80171e2:	69e3      	ldr	r3, [r4, #28]
 80171e4:	68db      	ldr	r3, [r3, #12]
 80171e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80171ea:	b9b8      	cbnz	r0, 801721c <_Balloc+0x68>
 80171ec:	2101      	movs	r1, #1
 80171ee:	fa01 f605 	lsl.w	r6, r1, r5
 80171f2:	1d72      	adds	r2, r6, #5
 80171f4:	0092      	lsls	r2, r2, #2
 80171f6:	4620      	mov	r0, r4
 80171f8:	f001 feec 	bl	8018fd4 <_calloc_r>
 80171fc:	b160      	cbz	r0, 8017218 <_Balloc+0x64>
 80171fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017202:	e00e      	b.n	8017222 <_Balloc+0x6e>
 8017204:	2221      	movs	r2, #33	@ 0x21
 8017206:	2104      	movs	r1, #4
 8017208:	4620      	mov	r0, r4
 801720a:	f001 fee3 	bl	8018fd4 <_calloc_r>
 801720e:	69e3      	ldr	r3, [r4, #28]
 8017210:	60f0      	str	r0, [r6, #12]
 8017212:	68db      	ldr	r3, [r3, #12]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d1e4      	bne.n	80171e2 <_Balloc+0x2e>
 8017218:	2000      	movs	r0, #0
 801721a:	bd70      	pop	{r4, r5, r6, pc}
 801721c:	6802      	ldr	r2, [r0, #0]
 801721e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017222:	2300      	movs	r3, #0
 8017224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017228:	e7f7      	b.n	801721a <_Balloc+0x66>
 801722a:	bf00      	nop
 801722c:	08019f52 	.word	0x08019f52
 8017230:	08019fd2 	.word	0x08019fd2

08017234 <_Bfree>:
 8017234:	b570      	push	{r4, r5, r6, lr}
 8017236:	69c6      	ldr	r6, [r0, #28]
 8017238:	4605      	mov	r5, r0
 801723a:	460c      	mov	r4, r1
 801723c:	b976      	cbnz	r6, 801725c <_Bfree+0x28>
 801723e:	2010      	movs	r0, #16
 8017240:	f7ff ff02 	bl	8017048 <malloc>
 8017244:	4602      	mov	r2, r0
 8017246:	61e8      	str	r0, [r5, #28]
 8017248:	b920      	cbnz	r0, 8017254 <_Bfree+0x20>
 801724a:	4b09      	ldr	r3, [pc, #36]	@ (8017270 <_Bfree+0x3c>)
 801724c:	4809      	ldr	r0, [pc, #36]	@ (8017274 <_Bfree+0x40>)
 801724e:	218f      	movs	r1, #143	@ 0x8f
 8017250:	f001 fea2 	bl	8018f98 <__assert_func>
 8017254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017258:	6006      	str	r6, [r0, #0]
 801725a:	60c6      	str	r6, [r0, #12]
 801725c:	b13c      	cbz	r4, 801726e <_Bfree+0x3a>
 801725e:	69eb      	ldr	r3, [r5, #28]
 8017260:	6862      	ldr	r2, [r4, #4]
 8017262:	68db      	ldr	r3, [r3, #12]
 8017264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017268:	6021      	str	r1, [r4, #0]
 801726a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801726e:	bd70      	pop	{r4, r5, r6, pc}
 8017270:	08019f52 	.word	0x08019f52
 8017274:	08019fd2 	.word	0x08019fd2

08017278 <__multadd>:
 8017278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727c:	690d      	ldr	r5, [r1, #16]
 801727e:	4607      	mov	r7, r0
 8017280:	460c      	mov	r4, r1
 8017282:	461e      	mov	r6, r3
 8017284:	f101 0c14 	add.w	ip, r1, #20
 8017288:	2000      	movs	r0, #0
 801728a:	f8dc 3000 	ldr.w	r3, [ip]
 801728e:	b299      	uxth	r1, r3
 8017290:	fb02 6101 	mla	r1, r2, r1, r6
 8017294:	0c1e      	lsrs	r6, r3, #16
 8017296:	0c0b      	lsrs	r3, r1, #16
 8017298:	fb02 3306 	mla	r3, r2, r6, r3
 801729c:	b289      	uxth	r1, r1
 801729e:	3001      	adds	r0, #1
 80172a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80172a4:	4285      	cmp	r5, r0
 80172a6:	f84c 1b04 	str.w	r1, [ip], #4
 80172aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80172ae:	dcec      	bgt.n	801728a <__multadd+0x12>
 80172b0:	b30e      	cbz	r6, 80172f6 <__multadd+0x7e>
 80172b2:	68a3      	ldr	r3, [r4, #8]
 80172b4:	42ab      	cmp	r3, r5
 80172b6:	dc19      	bgt.n	80172ec <__multadd+0x74>
 80172b8:	6861      	ldr	r1, [r4, #4]
 80172ba:	4638      	mov	r0, r7
 80172bc:	3101      	adds	r1, #1
 80172be:	f7ff ff79 	bl	80171b4 <_Balloc>
 80172c2:	4680      	mov	r8, r0
 80172c4:	b928      	cbnz	r0, 80172d2 <__multadd+0x5a>
 80172c6:	4602      	mov	r2, r0
 80172c8:	4b0c      	ldr	r3, [pc, #48]	@ (80172fc <__multadd+0x84>)
 80172ca:	480d      	ldr	r0, [pc, #52]	@ (8017300 <__multadd+0x88>)
 80172cc:	21ba      	movs	r1, #186	@ 0xba
 80172ce:	f001 fe63 	bl	8018f98 <__assert_func>
 80172d2:	6922      	ldr	r2, [r4, #16]
 80172d4:	3202      	adds	r2, #2
 80172d6:	f104 010c 	add.w	r1, r4, #12
 80172da:	0092      	lsls	r2, r2, #2
 80172dc:	300c      	adds	r0, #12
 80172de:	f7ff f874 	bl	80163ca <memcpy>
 80172e2:	4621      	mov	r1, r4
 80172e4:	4638      	mov	r0, r7
 80172e6:	f7ff ffa5 	bl	8017234 <_Bfree>
 80172ea:	4644      	mov	r4, r8
 80172ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80172f0:	3501      	adds	r5, #1
 80172f2:	615e      	str	r6, [r3, #20]
 80172f4:	6125      	str	r5, [r4, #16]
 80172f6:	4620      	mov	r0, r4
 80172f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172fc:	08019fc1 	.word	0x08019fc1
 8017300:	08019fd2 	.word	0x08019fd2

08017304 <__s2b>:
 8017304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017308:	460c      	mov	r4, r1
 801730a:	4615      	mov	r5, r2
 801730c:	461f      	mov	r7, r3
 801730e:	2209      	movs	r2, #9
 8017310:	3308      	adds	r3, #8
 8017312:	4606      	mov	r6, r0
 8017314:	fb93 f3f2 	sdiv	r3, r3, r2
 8017318:	2100      	movs	r1, #0
 801731a:	2201      	movs	r2, #1
 801731c:	429a      	cmp	r2, r3
 801731e:	db09      	blt.n	8017334 <__s2b+0x30>
 8017320:	4630      	mov	r0, r6
 8017322:	f7ff ff47 	bl	80171b4 <_Balloc>
 8017326:	b940      	cbnz	r0, 801733a <__s2b+0x36>
 8017328:	4602      	mov	r2, r0
 801732a:	4b19      	ldr	r3, [pc, #100]	@ (8017390 <__s2b+0x8c>)
 801732c:	4819      	ldr	r0, [pc, #100]	@ (8017394 <__s2b+0x90>)
 801732e:	21d3      	movs	r1, #211	@ 0xd3
 8017330:	f001 fe32 	bl	8018f98 <__assert_func>
 8017334:	0052      	lsls	r2, r2, #1
 8017336:	3101      	adds	r1, #1
 8017338:	e7f0      	b.n	801731c <__s2b+0x18>
 801733a:	9b08      	ldr	r3, [sp, #32]
 801733c:	6143      	str	r3, [r0, #20]
 801733e:	2d09      	cmp	r5, #9
 8017340:	f04f 0301 	mov.w	r3, #1
 8017344:	6103      	str	r3, [r0, #16]
 8017346:	dd16      	ble.n	8017376 <__s2b+0x72>
 8017348:	f104 0909 	add.w	r9, r4, #9
 801734c:	46c8      	mov	r8, r9
 801734e:	442c      	add	r4, r5
 8017350:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017354:	4601      	mov	r1, r0
 8017356:	3b30      	subs	r3, #48	@ 0x30
 8017358:	220a      	movs	r2, #10
 801735a:	4630      	mov	r0, r6
 801735c:	f7ff ff8c 	bl	8017278 <__multadd>
 8017360:	45a0      	cmp	r8, r4
 8017362:	d1f5      	bne.n	8017350 <__s2b+0x4c>
 8017364:	f1a5 0408 	sub.w	r4, r5, #8
 8017368:	444c      	add	r4, r9
 801736a:	1b2d      	subs	r5, r5, r4
 801736c:	1963      	adds	r3, r4, r5
 801736e:	42bb      	cmp	r3, r7
 8017370:	db04      	blt.n	801737c <__s2b+0x78>
 8017372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017376:	340a      	adds	r4, #10
 8017378:	2509      	movs	r5, #9
 801737a:	e7f6      	b.n	801736a <__s2b+0x66>
 801737c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017380:	4601      	mov	r1, r0
 8017382:	3b30      	subs	r3, #48	@ 0x30
 8017384:	220a      	movs	r2, #10
 8017386:	4630      	mov	r0, r6
 8017388:	f7ff ff76 	bl	8017278 <__multadd>
 801738c:	e7ee      	b.n	801736c <__s2b+0x68>
 801738e:	bf00      	nop
 8017390:	08019fc1 	.word	0x08019fc1
 8017394:	08019fd2 	.word	0x08019fd2

08017398 <__hi0bits>:
 8017398:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801739c:	4603      	mov	r3, r0
 801739e:	bf36      	itet	cc
 80173a0:	0403      	lslcc	r3, r0, #16
 80173a2:	2000      	movcs	r0, #0
 80173a4:	2010      	movcc	r0, #16
 80173a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80173aa:	bf3c      	itt	cc
 80173ac:	021b      	lslcc	r3, r3, #8
 80173ae:	3008      	addcc	r0, #8
 80173b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80173b4:	bf3c      	itt	cc
 80173b6:	011b      	lslcc	r3, r3, #4
 80173b8:	3004      	addcc	r0, #4
 80173ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80173be:	bf3c      	itt	cc
 80173c0:	009b      	lslcc	r3, r3, #2
 80173c2:	3002      	addcc	r0, #2
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	db05      	blt.n	80173d4 <__hi0bits+0x3c>
 80173c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80173cc:	f100 0001 	add.w	r0, r0, #1
 80173d0:	bf08      	it	eq
 80173d2:	2020      	moveq	r0, #32
 80173d4:	4770      	bx	lr

080173d6 <__lo0bits>:
 80173d6:	6803      	ldr	r3, [r0, #0]
 80173d8:	4602      	mov	r2, r0
 80173da:	f013 0007 	ands.w	r0, r3, #7
 80173de:	d00b      	beq.n	80173f8 <__lo0bits+0x22>
 80173e0:	07d9      	lsls	r1, r3, #31
 80173e2:	d421      	bmi.n	8017428 <__lo0bits+0x52>
 80173e4:	0798      	lsls	r0, r3, #30
 80173e6:	bf49      	itett	mi
 80173e8:	085b      	lsrmi	r3, r3, #1
 80173ea:	089b      	lsrpl	r3, r3, #2
 80173ec:	2001      	movmi	r0, #1
 80173ee:	6013      	strmi	r3, [r2, #0]
 80173f0:	bf5c      	itt	pl
 80173f2:	6013      	strpl	r3, [r2, #0]
 80173f4:	2002      	movpl	r0, #2
 80173f6:	4770      	bx	lr
 80173f8:	b299      	uxth	r1, r3
 80173fa:	b909      	cbnz	r1, 8017400 <__lo0bits+0x2a>
 80173fc:	0c1b      	lsrs	r3, r3, #16
 80173fe:	2010      	movs	r0, #16
 8017400:	b2d9      	uxtb	r1, r3
 8017402:	b909      	cbnz	r1, 8017408 <__lo0bits+0x32>
 8017404:	3008      	adds	r0, #8
 8017406:	0a1b      	lsrs	r3, r3, #8
 8017408:	0719      	lsls	r1, r3, #28
 801740a:	bf04      	itt	eq
 801740c:	091b      	lsreq	r3, r3, #4
 801740e:	3004      	addeq	r0, #4
 8017410:	0799      	lsls	r1, r3, #30
 8017412:	bf04      	itt	eq
 8017414:	089b      	lsreq	r3, r3, #2
 8017416:	3002      	addeq	r0, #2
 8017418:	07d9      	lsls	r1, r3, #31
 801741a:	d403      	bmi.n	8017424 <__lo0bits+0x4e>
 801741c:	085b      	lsrs	r3, r3, #1
 801741e:	f100 0001 	add.w	r0, r0, #1
 8017422:	d003      	beq.n	801742c <__lo0bits+0x56>
 8017424:	6013      	str	r3, [r2, #0]
 8017426:	4770      	bx	lr
 8017428:	2000      	movs	r0, #0
 801742a:	4770      	bx	lr
 801742c:	2020      	movs	r0, #32
 801742e:	4770      	bx	lr

08017430 <__i2b>:
 8017430:	b510      	push	{r4, lr}
 8017432:	460c      	mov	r4, r1
 8017434:	2101      	movs	r1, #1
 8017436:	f7ff febd 	bl	80171b4 <_Balloc>
 801743a:	4602      	mov	r2, r0
 801743c:	b928      	cbnz	r0, 801744a <__i2b+0x1a>
 801743e:	4b05      	ldr	r3, [pc, #20]	@ (8017454 <__i2b+0x24>)
 8017440:	4805      	ldr	r0, [pc, #20]	@ (8017458 <__i2b+0x28>)
 8017442:	f240 1145 	movw	r1, #325	@ 0x145
 8017446:	f001 fda7 	bl	8018f98 <__assert_func>
 801744a:	2301      	movs	r3, #1
 801744c:	6144      	str	r4, [r0, #20]
 801744e:	6103      	str	r3, [r0, #16]
 8017450:	bd10      	pop	{r4, pc}
 8017452:	bf00      	nop
 8017454:	08019fc1 	.word	0x08019fc1
 8017458:	08019fd2 	.word	0x08019fd2

0801745c <__multiply>:
 801745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017460:	4614      	mov	r4, r2
 8017462:	690a      	ldr	r2, [r1, #16]
 8017464:	6923      	ldr	r3, [r4, #16]
 8017466:	429a      	cmp	r2, r3
 8017468:	bfa8      	it	ge
 801746a:	4623      	movge	r3, r4
 801746c:	460f      	mov	r7, r1
 801746e:	bfa4      	itt	ge
 8017470:	460c      	movge	r4, r1
 8017472:	461f      	movge	r7, r3
 8017474:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017478:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801747c:	68a3      	ldr	r3, [r4, #8]
 801747e:	6861      	ldr	r1, [r4, #4]
 8017480:	eb0a 0609 	add.w	r6, sl, r9
 8017484:	42b3      	cmp	r3, r6
 8017486:	b085      	sub	sp, #20
 8017488:	bfb8      	it	lt
 801748a:	3101      	addlt	r1, #1
 801748c:	f7ff fe92 	bl	80171b4 <_Balloc>
 8017490:	b930      	cbnz	r0, 80174a0 <__multiply+0x44>
 8017492:	4602      	mov	r2, r0
 8017494:	4b44      	ldr	r3, [pc, #272]	@ (80175a8 <__multiply+0x14c>)
 8017496:	4845      	ldr	r0, [pc, #276]	@ (80175ac <__multiply+0x150>)
 8017498:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801749c:	f001 fd7c 	bl	8018f98 <__assert_func>
 80174a0:	f100 0514 	add.w	r5, r0, #20
 80174a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80174a8:	462b      	mov	r3, r5
 80174aa:	2200      	movs	r2, #0
 80174ac:	4543      	cmp	r3, r8
 80174ae:	d321      	bcc.n	80174f4 <__multiply+0x98>
 80174b0:	f107 0114 	add.w	r1, r7, #20
 80174b4:	f104 0214 	add.w	r2, r4, #20
 80174b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80174bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80174c0:	9302      	str	r3, [sp, #8]
 80174c2:	1b13      	subs	r3, r2, r4
 80174c4:	3b15      	subs	r3, #21
 80174c6:	f023 0303 	bic.w	r3, r3, #3
 80174ca:	3304      	adds	r3, #4
 80174cc:	f104 0715 	add.w	r7, r4, #21
 80174d0:	42ba      	cmp	r2, r7
 80174d2:	bf38      	it	cc
 80174d4:	2304      	movcc	r3, #4
 80174d6:	9301      	str	r3, [sp, #4]
 80174d8:	9b02      	ldr	r3, [sp, #8]
 80174da:	9103      	str	r1, [sp, #12]
 80174dc:	428b      	cmp	r3, r1
 80174de:	d80c      	bhi.n	80174fa <__multiply+0x9e>
 80174e0:	2e00      	cmp	r6, #0
 80174e2:	dd03      	ble.n	80174ec <__multiply+0x90>
 80174e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d05b      	beq.n	80175a4 <__multiply+0x148>
 80174ec:	6106      	str	r6, [r0, #16]
 80174ee:	b005      	add	sp, #20
 80174f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f4:	f843 2b04 	str.w	r2, [r3], #4
 80174f8:	e7d8      	b.n	80174ac <__multiply+0x50>
 80174fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80174fe:	f1ba 0f00 	cmp.w	sl, #0
 8017502:	d024      	beq.n	801754e <__multiply+0xf2>
 8017504:	f104 0e14 	add.w	lr, r4, #20
 8017508:	46a9      	mov	r9, r5
 801750a:	f04f 0c00 	mov.w	ip, #0
 801750e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017512:	f8d9 3000 	ldr.w	r3, [r9]
 8017516:	fa1f fb87 	uxth.w	fp, r7
 801751a:	b29b      	uxth	r3, r3
 801751c:	fb0a 330b 	mla	r3, sl, fp, r3
 8017520:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017524:	f8d9 7000 	ldr.w	r7, [r9]
 8017528:	4463      	add	r3, ip
 801752a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801752e:	fb0a c70b 	mla	r7, sl, fp, ip
 8017532:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017536:	b29b      	uxth	r3, r3
 8017538:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801753c:	4572      	cmp	r2, lr
 801753e:	f849 3b04 	str.w	r3, [r9], #4
 8017542:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017546:	d8e2      	bhi.n	801750e <__multiply+0xb2>
 8017548:	9b01      	ldr	r3, [sp, #4]
 801754a:	f845 c003 	str.w	ip, [r5, r3]
 801754e:	9b03      	ldr	r3, [sp, #12]
 8017550:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017554:	3104      	adds	r1, #4
 8017556:	f1b9 0f00 	cmp.w	r9, #0
 801755a:	d021      	beq.n	80175a0 <__multiply+0x144>
 801755c:	682b      	ldr	r3, [r5, #0]
 801755e:	f104 0c14 	add.w	ip, r4, #20
 8017562:	46ae      	mov	lr, r5
 8017564:	f04f 0a00 	mov.w	sl, #0
 8017568:	f8bc b000 	ldrh.w	fp, [ip]
 801756c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017570:	fb09 770b 	mla	r7, r9, fp, r7
 8017574:	4457      	add	r7, sl
 8017576:	b29b      	uxth	r3, r3
 8017578:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801757c:	f84e 3b04 	str.w	r3, [lr], #4
 8017580:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017584:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017588:	f8be 3000 	ldrh.w	r3, [lr]
 801758c:	fb09 330a 	mla	r3, r9, sl, r3
 8017590:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017594:	4562      	cmp	r2, ip
 8017596:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801759a:	d8e5      	bhi.n	8017568 <__multiply+0x10c>
 801759c:	9f01      	ldr	r7, [sp, #4]
 801759e:	51eb      	str	r3, [r5, r7]
 80175a0:	3504      	adds	r5, #4
 80175a2:	e799      	b.n	80174d8 <__multiply+0x7c>
 80175a4:	3e01      	subs	r6, #1
 80175a6:	e79b      	b.n	80174e0 <__multiply+0x84>
 80175a8:	08019fc1 	.word	0x08019fc1
 80175ac:	08019fd2 	.word	0x08019fd2

080175b0 <__pow5mult>:
 80175b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175b4:	4615      	mov	r5, r2
 80175b6:	f012 0203 	ands.w	r2, r2, #3
 80175ba:	4607      	mov	r7, r0
 80175bc:	460e      	mov	r6, r1
 80175be:	d007      	beq.n	80175d0 <__pow5mult+0x20>
 80175c0:	4c25      	ldr	r4, [pc, #148]	@ (8017658 <__pow5mult+0xa8>)
 80175c2:	3a01      	subs	r2, #1
 80175c4:	2300      	movs	r3, #0
 80175c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80175ca:	f7ff fe55 	bl	8017278 <__multadd>
 80175ce:	4606      	mov	r6, r0
 80175d0:	10ad      	asrs	r5, r5, #2
 80175d2:	d03d      	beq.n	8017650 <__pow5mult+0xa0>
 80175d4:	69fc      	ldr	r4, [r7, #28]
 80175d6:	b97c      	cbnz	r4, 80175f8 <__pow5mult+0x48>
 80175d8:	2010      	movs	r0, #16
 80175da:	f7ff fd35 	bl	8017048 <malloc>
 80175de:	4602      	mov	r2, r0
 80175e0:	61f8      	str	r0, [r7, #28]
 80175e2:	b928      	cbnz	r0, 80175f0 <__pow5mult+0x40>
 80175e4:	4b1d      	ldr	r3, [pc, #116]	@ (801765c <__pow5mult+0xac>)
 80175e6:	481e      	ldr	r0, [pc, #120]	@ (8017660 <__pow5mult+0xb0>)
 80175e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80175ec:	f001 fcd4 	bl	8018f98 <__assert_func>
 80175f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80175f4:	6004      	str	r4, [r0, #0]
 80175f6:	60c4      	str	r4, [r0, #12]
 80175f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80175fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017600:	b94c      	cbnz	r4, 8017616 <__pow5mult+0x66>
 8017602:	f240 2171 	movw	r1, #625	@ 0x271
 8017606:	4638      	mov	r0, r7
 8017608:	f7ff ff12 	bl	8017430 <__i2b>
 801760c:	2300      	movs	r3, #0
 801760e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017612:	4604      	mov	r4, r0
 8017614:	6003      	str	r3, [r0, #0]
 8017616:	f04f 0900 	mov.w	r9, #0
 801761a:	07eb      	lsls	r3, r5, #31
 801761c:	d50a      	bpl.n	8017634 <__pow5mult+0x84>
 801761e:	4631      	mov	r1, r6
 8017620:	4622      	mov	r2, r4
 8017622:	4638      	mov	r0, r7
 8017624:	f7ff ff1a 	bl	801745c <__multiply>
 8017628:	4631      	mov	r1, r6
 801762a:	4680      	mov	r8, r0
 801762c:	4638      	mov	r0, r7
 801762e:	f7ff fe01 	bl	8017234 <_Bfree>
 8017632:	4646      	mov	r6, r8
 8017634:	106d      	asrs	r5, r5, #1
 8017636:	d00b      	beq.n	8017650 <__pow5mult+0xa0>
 8017638:	6820      	ldr	r0, [r4, #0]
 801763a:	b938      	cbnz	r0, 801764c <__pow5mult+0x9c>
 801763c:	4622      	mov	r2, r4
 801763e:	4621      	mov	r1, r4
 8017640:	4638      	mov	r0, r7
 8017642:	f7ff ff0b 	bl	801745c <__multiply>
 8017646:	6020      	str	r0, [r4, #0]
 8017648:	f8c0 9000 	str.w	r9, [r0]
 801764c:	4604      	mov	r4, r0
 801764e:	e7e4      	b.n	801761a <__pow5mult+0x6a>
 8017650:	4630      	mov	r0, r6
 8017652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017656:	bf00      	nop
 8017658:	0801a02c 	.word	0x0801a02c
 801765c:	08019f52 	.word	0x08019f52
 8017660:	08019fd2 	.word	0x08019fd2

08017664 <__lshift>:
 8017664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017668:	460c      	mov	r4, r1
 801766a:	6849      	ldr	r1, [r1, #4]
 801766c:	6923      	ldr	r3, [r4, #16]
 801766e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017672:	68a3      	ldr	r3, [r4, #8]
 8017674:	4607      	mov	r7, r0
 8017676:	4691      	mov	r9, r2
 8017678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801767c:	f108 0601 	add.w	r6, r8, #1
 8017680:	42b3      	cmp	r3, r6
 8017682:	db0b      	blt.n	801769c <__lshift+0x38>
 8017684:	4638      	mov	r0, r7
 8017686:	f7ff fd95 	bl	80171b4 <_Balloc>
 801768a:	4605      	mov	r5, r0
 801768c:	b948      	cbnz	r0, 80176a2 <__lshift+0x3e>
 801768e:	4602      	mov	r2, r0
 8017690:	4b28      	ldr	r3, [pc, #160]	@ (8017734 <__lshift+0xd0>)
 8017692:	4829      	ldr	r0, [pc, #164]	@ (8017738 <__lshift+0xd4>)
 8017694:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017698:	f001 fc7e 	bl	8018f98 <__assert_func>
 801769c:	3101      	adds	r1, #1
 801769e:	005b      	lsls	r3, r3, #1
 80176a0:	e7ee      	b.n	8017680 <__lshift+0x1c>
 80176a2:	2300      	movs	r3, #0
 80176a4:	f100 0114 	add.w	r1, r0, #20
 80176a8:	f100 0210 	add.w	r2, r0, #16
 80176ac:	4618      	mov	r0, r3
 80176ae:	4553      	cmp	r3, sl
 80176b0:	db33      	blt.n	801771a <__lshift+0xb6>
 80176b2:	6920      	ldr	r0, [r4, #16]
 80176b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80176b8:	f104 0314 	add.w	r3, r4, #20
 80176bc:	f019 091f 	ands.w	r9, r9, #31
 80176c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80176c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80176c8:	d02b      	beq.n	8017722 <__lshift+0xbe>
 80176ca:	f1c9 0e20 	rsb	lr, r9, #32
 80176ce:	468a      	mov	sl, r1
 80176d0:	2200      	movs	r2, #0
 80176d2:	6818      	ldr	r0, [r3, #0]
 80176d4:	fa00 f009 	lsl.w	r0, r0, r9
 80176d8:	4310      	orrs	r0, r2
 80176da:	f84a 0b04 	str.w	r0, [sl], #4
 80176de:	f853 2b04 	ldr.w	r2, [r3], #4
 80176e2:	459c      	cmp	ip, r3
 80176e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80176e8:	d8f3      	bhi.n	80176d2 <__lshift+0x6e>
 80176ea:	ebac 0304 	sub.w	r3, ip, r4
 80176ee:	3b15      	subs	r3, #21
 80176f0:	f023 0303 	bic.w	r3, r3, #3
 80176f4:	3304      	adds	r3, #4
 80176f6:	f104 0015 	add.w	r0, r4, #21
 80176fa:	4584      	cmp	ip, r0
 80176fc:	bf38      	it	cc
 80176fe:	2304      	movcc	r3, #4
 8017700:	50ca      	str	r2, [r1, r3]
 8017702:	b10a      	cbz	r2, 8017708 <__lshift+0xa4>
 8017704:	f108 0602 	add.w	r6, r8, #2
 8017708:	3e01      	subs	r6, #1
 801770a:	4638      	mov	r0, r7
 801770c:	612e      	str	r6, [r5, #16]
 801770e:	4621      	mov	r1, r4
 8017710:	f7ff fd90 	bl	8017234 <_Bfree>
 8017714:	4628      	mov	r0, r5
 8017716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801771a:	f842 0f04 	str.w	r0, [r2, #4]!
 801771e:	3301      	adds	r3, #1
 8017720:	e7c5      	b.n	80176ae <__lshift+0x4a>
 8017722:	3904      	subs	r1, #4
 8017724:	f853 2b04 	ldr.w	r2, [r3], #4
 8017728:	f841 2f04 	str.w	r2, [r1, #4]!
 801772c:	459c      	cmp	ip, r3
 801772e:	d8f9      	bhi.n	8017724 <__lshift+0xc0>
 8017730:	e7ea      	b.n	8017708 <__lshift+0xa4>
 8017732:	bf00      	nop
 8017734:	08019fc1 	.word	0x08019fc1
 8017738:	08019fd2 	.word	0x08019fd2

0801773c <__mcmp>:
 801773c:	690a      	ldr	r2, [r1, #16]
 801773e:	4603      	mov	r3, r0
 8017740:	6900      	ldr	r0, [r0, #16]
 8017742:	1a80      	subs	r0, r0, r2
 8017744:	b530      	push	{r4, r5, lr}
 8017746:	d10e      	bne.n	8017766 <__mcmp+0x2a>
 8017748:	3314      	adds	r3, #20
 801774a:	3114      	adds	r1, #20
 801774c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017750:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017754:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017758:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801775c:	4295      	cmp	r5, r2
 801775e:	d003      	beq.n	8017768 <__mcmp+0x2c>
 8017760:	d205      	bcs.n	801776e <__mcmp+0x32>
 8017762:	f04f 30ff 	mov.w	r0, #4294967295
 8017766:	bd30      	pop	{r4, r5, pc}
 8017768:	42a3      	cmp	r3, r4
 801776a:	d3f3      	bcc.n	8017754 <__mcmp+0x18>
 801776c:	e7fb      	b.n	8017766 <__mcmp+0x2a>
 801776e:	2001      	movs	r0, #1
 8017770:	e7f9      	b.n	8017766 <__mcmp+0x2a>
	...

08017774 <__mdiff>:
 8017774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017778:	4689      	mov	r9, r1
 801777a:	4606      	mov	r6, r0
 801777c:	4611      	mov	r1, r2
 801777e:	4648      	mov	r0, r9
 8017780:	4614      	mov	r4, r2
 8017782:	f7ff ffdb 	bl	801773c <__mcmp>
 8017786:	1e05      	subs	r5, r0, #0
 8017788:	d112      	bne.n	80177b0 <__mdiff+0x3c>
 801778a:	4629      	mov	r1, r5
 801778c:	4630      	mov	r0, r6
 801778e:	f7ff fd11 	bl	80171b4 <_Balloc>
 8017792:	4602      	mov	r2, r0
 8017794:	b928      	cbnz	r0, 80177a2 <__mdiff+0x2e>
 8017796:	4b3f      	ldr	r3, [pc, #252]	@ (8017894 <__mdiff+0x120>)
 8017798:	f240 2137 	movw	r1, #567	@ 0x237
 801779c:	483e      	ldr	r0, [pc, #248]	@ (8017898 <__mdiff+0x124>)
 801779e:	f001 fbfb 	bl	8018f98 <__assert_func>
 80177a2:	2301      	movs	r3, #1
 80177a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80177a8:	4610      	mov	r0, r2
 80177aa:	b003      	add	sp, #12
 80177ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177b0:	bfbc      	itt	lt
 80177b2:	464b      	movlt	r3, r9
 80177b4:	46a1      	movlt	r9, r4
 80177b6:	4630      	mov	r0, r6
 80177b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80177bc:	bfba      	itte	lt
 80177be:	461c      	movlt	r4, r3
 80177c0:	2501      	movlt	r5, #1
 80177c2:	2500      	movge	r5, #0
 80177c4:	f7ff fcf6 	bl	80171b4 <_Balloc>
 80177c8:	4602      	mov	r2, r0
 80177ca:	b918      	cbnz	r0, 80177d4 <__mdiff+0x60>
 80177cc:	4b31      	ldr	r3, [pc, #196]	@ (8017894 <__mdiff+0x120>)
 80177ce:	f240 2145 	movw	r1, #581	@ 0x245
 80177d2:	e7e3      	b.n	801779c <__mdiff+0x28>
 80177d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80177d8:	6926      	ldr	r6, [r4, #16]
 80177da:	60c5      	str	r5, [r0, #12]
 80177dc:	f109 0310 	add.w	r3, r9, #16
 80177e0:	f109 0514 	add.w	r5, r9, #20
 80177e4:	f104 0e14 	add.w	lr, r4, #20
 80177e8:	f100 0b14 	add.w	fp, r0, #20
 80177ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80177f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80177f4:	9301      	str	r3, [sp, #4]
 80177f6:	46d9      	mov	r9, fp
 80177f8:	f04f 0c00 	mov.w	ip, #0
 80177fc:	9b01      	ldr	r3, [sp, #4]
 80177fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017802:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017806:	9301      	str	r3, [sp, #4]
 8017808:	fa1f f38a 	uxth.w	r3, sl
 801780c:	4619      	mov	r1, r3
 801780e:	b283      	uxth	r3, r0
 8017810:	1acb      	subs	r3, r1, r3
 8017812:	0c00      	lsrs	r0, r0, #16
 8017814:	4463      	add	r3, ip
 8017816:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801781a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801781e:	b29b      	uxth	r3, r3
 8017820:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017824:	4576      	cmp	r6, lr
 8017826:	f849 3b04 	str.w	r3, [r9], #4
 801782a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801782e:	d8e5      	bhi.n	80177fc <__mdiff+0x88>
 8017830:	1b33      	subs	r3, r6, r4
 8017832:	3b15      	subs	r3, #21
 8017834:	f023 0303 	bic.w	r3, r3, #3
 8017838:	3415      	adds	r4, #21
 801783a:	3304      	adds	r3, #4
 801783c:	42a6      	cmp	r6, r4
 801783e:	bf38      	it	cc
 8017840:	2304      	movcc	r3, #4
 8017842:	441d      	add	r5, r3
 8017844:	445b      	add	r3, fp
 8017846:	461e      	mov	r6, r3
 8017848:	462c      	mov	r4, r5
 801784a:	4544      	cmp	r4, r8
 801784c:	d30e      	bcc.n	801786c <__mdiff+0xf8>
 801784e:	f108 0103 	add.w	r1, r8, #3
 8017852:	1b49      	subs	r1, r1, r5
 8017854:	f021 0103 	bic.w	r1, r1, #3
 8017858:	3d03      	subs	r5, #3
 801785a:	45a8      	cmp	r8, r5
 801785c:	bf38      	it	cc
 801785e:	2100      	movcc	r1, #0
 8017860:	440b      	add	r3, r1
 8017862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017866:	b191      	cbz	r1, 801788e <__mdiff+0x11a>
 8017868:	6117      	str	r7, [r2, #16]
 801786a:	e79d      	b.n	80177a8 <__mdiff+0x34>
 801786c:	f854 1b04 	ldr.w	r1, [r4], #4
 8017870:	46e6      	mov	lr, ip
 8017872:	0c08      	lsrs	r0, r1, #16
 8017874:	fa1c fc81 	uxtah	ip, ip, r1
 8017878:	4471      	add	r1, lr
 801787a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801787e:	b289      	uxth	r1, r1
 8017880:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017884:	f846 1b04 	str.w	r1, [r6], #4
 8017888:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801788c:	e7dd      	b.n	801784a <__mdiff+0xd6>
 801788e:	3f01      	subs	r7, #1
 8017890:	e7e7      	b.n	8017862 <__mdiff+0xee>
 8017892:	bf00      	nop
 8017894:	08019fc1 	.word	0x08019fc1
 8017898:	08019fd2 	.word	0x08019fd2

0801789c <__ulp>:
 801789c:	b082      	sub	sp, #8
 801789e:	ed8d 0b00 	vstr	d0, [sp]
 80178a2:	9a01      	ldr	r2, [sp, #4]
 80178a4:	4b0f      	ldr	r3, [pc, #60]	@ (80178e4 <__ulp+0x48>)
 80178a6:	4013      	ands	r3, r2
 80178a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	dc08      	bgt.n	80178c2 <__ulp+0x26>
 80178b0:	425b      	negs	r3, r3
 80178b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80178b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80178ba:	da04      	bge.n	80178c6 <__ulp+0x2a>
 80178bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80178c0:	4113      	asrs	r3, r2
 80178c2:	2200      	movs	r2, #0
 80178c4:	e008      	b.n	80178d8 <__ulp+0x3c>
 80178c6:	f1a2 0314 	sub.w	r3, r2, #20
 80178ca:	2b1e      	cmp	r3, #30
 80178cc:	bfda      	itte	le
 80178ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80178d2:	40da      	lsrle	r2, r3
 80178d4:	2201      	movgt	r2, #1
 80178d6:	2300      	movs	r3, #0
 80178d8:	4619      	mov	r1, r3
 80178da:	4610      	mov	r0, r2
 80178dc:	ec41 0b10 	vmov	d0, r0, r1
 80178e0:	b002      	add	sp, #8
 80178e2:	4770      	bx	lr
 80178e4:	7ff00000 	.word	0x7ff00000

080178e8 <__b2d>:
 80178e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178ec:	6906      	ldr	r6, [r0, #16]
 80178ee:	f100 0814 	add.w	r8, r0, #20
 80178f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80178f6:	1f37      	subs	r7, r6, #4
 80178f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80178fc:	4610      	mov	r0, r2
 80178fe:	f7ff fd4b 	bl	8017398 <__hi0bits>
 8017902:	f1c0 0320 	rsb	r3, r0, #32
 8017906:	280a      	cmp	r0, #10
 8017908:	600b      	str	r3, [r1, #0]
 801790a:	491b      	ldr	r1, [pc, #108]	@ (8017978 <__b2d+0x90>)
 801790c:	dc15      	bgt.n	801793a <__b2d+0x52>
 801790e:	f1c0 0c0b 	rsb	ip, r0, #11
 8017912:	fa22 f30c 	lsr.w	r3, r2, ip
 8017916:	45b8      	cmp	r8, r7
 8017918:	ea43 0501 	orr.w	r5, r3, r1
 801791c:	bf34      	ite	cc
 801791e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017922:	2300      	movcs	r3, #0
 8017924:	3015      	adds	r0, #21
 8017926:	fa02 f000 	lsl.w	r0, r2, r0
 801792a:	fa23 f30c 	lsr.w	r3, r3, ip
 801792e:	4303      	orrs	r3, r0
 8017930:	461c      	mov	r4, r3
 8017932:	ec45 4b10 	vmov	d0, r4, r5
 8017936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801793a:	45b8      	cmp	r8, r7
 801793c:	bf3a      	itte	cc
 801793e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017942:	f1a6 0708 	subcc.w	r7, r6, #8
 8017946:	2300      	movcs	r3, #0
 8017948:	380b      	subs	r0, #11
 801794a:	d012      	beq.n	8017972 <__b2d+0x8a>
 801794c:	f1c0 0120 	rsb	r1, r0, #32
 8017950:	fa23 f401 	lsr.w	r4, r3, r1
 8017954:	4082      	lsls	r2, r0
 8017956:	4322      	orrs	r2, r4
 8017958:	4547      	cmp	r7, r8
 801795a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801795e:	bf8c      	ite	hi
 8017960:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017964:	2200      	movls	r2, #0
 8017966:	4083      	lsls	r3, r0
 8017968:	40ca      	lsrs	r2, r1
 801796a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801796e:	4313      	orrs	r3, r2
 8017970:	e7de      	b.n	8017930 <__b2d+0x48>
 8017972:	ea42 0501 	orr.w	r5, r2, r1
 8017976:	e7db      	b.n	8017930 <__b2d+0x48>
 8017978:	3ff00000 	.word	0x3ff00000

0801797c <__d2b>:
 801797c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017980:	460f      	mov	r7, r1
 8017982:	2101      	movs	r1, #1
 8017984:	ec59 8b10 	vmov	r8, r9, d0
 8017988:	4616      	mov	r6, r2
 801798a:	f7ff fc13 	bl	80171b4 <_Balloc>
 801798e:	4604      	mov	r4, r0
 8017990:	b930      	cbnz	r0, 80179a0 <__d2b+0x24>
 8017992:	4602      	mov	r2, r0
 8017994:	4b23      	ldr	r3, [pc, #140]	@ (8017a24 <__d2b+0xa8>)
 8017996:	4824      	ldr	r0, [pc, #144]	@ (8017a28 <__d2b+0xac>)
 8017998:	f240 310f 	movw	r1, #783	@ 0x30f
 801799c:	f001 fafc 	bl	8018f98 <__assert_func>
 80179a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80179a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80179a8:	b10d      	cbz	r5, 80179ae <__d2b+0x32>
 80179aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80179ae:	9301      	str	r3, [sp, #4]
 80179b0:	f1b8 0300 	subs.w	r3, r8, #0
 80179b4:	d023      	beq.n	80179fe <__d2b+0x82>
 80179b6:	4668      	mov	r0, sp
 80179b8:	9300      	str	r3, [sp, #0]
 80179ba:	f7ff fd0c 	bl	80173d6 <__lo0bits>
 80179be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80179c2:	b1d0      	cbz	r0, 80179fa <__d2b+0x7e>
 80179c4:	f1c0 0320 	rsb	r3, r0, #32
 80179c8:	fa02 f303 	lsl.w	r3, r2, r3
 80179cc:	430b      	orrs	r3, r1
 80179ce:	40c2      	lsrs	r2, r0
 80179d0:	6163      	str	r3, [r4, #20]
 80179d2:	9201      	str	r2, [sp, #4]
 80179d4:	9b01      	ldr	r3, [sp, #4]
 80179d6:	61a3      	str	r3, [r4, #24]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	bf0c      	ite	eq
 80179dc:	2201      	moveq	r2, #1
 80179de:	2202      	movne	r2, #2
 80179e0:	6122      	str	r2, [r4, #16]
 80179e2:	b1a5      	cbz	r5, 8017a0e <__d2b+0x92>
 80179e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80179e8:	4405      	add	r5, r0
 80179ea:	603d      	str	r5, [r7, #0]
 80179ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80179f0:	6030      	str	r0, [r6, #0]
 80179f2:	4620      	mov	r0, r4
 80179f4:	b003      	add	sp, #12
 80179f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179fa:	6161      	str	r1, [r4, #20]
 80179fc:	e7ea      	b.n	80179d4 <__d2b+0x58>
 80179fe:	a801      	add	r0, sp, #4
 8017a00:	f7ff fce9 	bl	80173d6 <__lo0bits>
 8017a04:	9b01      	ldr	r3, [sp, #4]
 8017a06:	6163      	str	r3, [r4, #20]
 8017a08:	3020      	adds	r0, #32
 8017a0a:	2201      	movs	r2, #1
 8017a0c:	e7e8      	b.n	80179e0 <__d2b+0x64>
 8017a0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017a12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017a16:	6038      	str	r0, [r7, #0]
 8017a18:	6918      	ldr	r0, [r3, #16]
 8017a1a:	f7ff fcbd 	bl	8017398 <__hi0bits>
 8017a1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017a22:	e7e5      	b.n	80179f0 <__d2b+0x74>
 8017a24:	08019fc1 	.word	0x08019fc1
 8017a28:	08019fd2 	.word	0x08019fd2

08017a2c <__ratio>:
 8017a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a30:	4688      	mov	r8, r1
 8017a32:	4669      	mov	r1, sp
 8017a34:	4681      	mov	r9, r0
 8017a36:	f7ff ff57 	bl	80178e8 <__b2d>
 8017a3a:	a901      	add	r1, sp, #4
 8017a3c:	4640      	mov	r0, r8
 8017a3e:	ec55 4b10 	vmov	r4, r5, d0
 8017a42:	f7ff ff51 	bl	80178e8 <__b2d>
 8017a46:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017a4a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017a4e:	1ad2      	subs	r2, r2, r3
 8017a50:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017a54:	1a5b      	subs	r3, r3, r1
 8017a56:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017a5a:	ec57 6b10 	vmov	r6, r7, d0
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	bfd6      	itet	le
 8017a62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017a66:	462a      	movgt	r2, r5
 8017a68:	463a      	movle	r2, r7
 8017a6a:	46ab      	mov	fp, r5
 8017a6c:	46a2      	mov	sl, r4
 8017a6e:	bfce      	itee	gt
 8017a70:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017a74:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017a78:	ee00 3a90 	vmovle	s1, r3
 8017a7c:	ec4b ab17 	vmov	d7, sl, fp
 8017a80:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017a84:	b003      	add	sp, #12
 8017a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a8a <__copybits>:
 8017a8a:	3901      	subs	r1, #1
 8017a8c:	b570      	push	{r4, r5, r6, lr}
 8017a8e:	1149      	asrs	r1, r1, #5
 8017a90:	6914      	ldr	r4, [r2, #16]
 8017a92:	3101      	adds	r1, #1
 8017a94:	f102 0314 	add.w	r3, r2, #20
 8017a98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017a9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017aa0:	1f05      	subs	r5, r0, #4
 8017aa2:	42a3      	cmp	r3, r4
 8017aa4:	d30c      	bcc.n	8017ac0 <__copybits+0x36>
 8017aa6:	1aa3      	subs	r3, r4, r2
 8017aa8:	3b11      	subs	r3, #17
 8017aaa:	f023 0303 	bic.w	r3, r3, #3
 8017aae:	3211      	adds	r2, #17
 8017ab0:	42a2      	cmp	r2, r4
 8017ab2:	bf88      	it	hi
 8017ab4:	2300      	movhi	r3, #0
 8017ab6:	4418      	add	r0, r3
 8017ab8:	2300      	movs	r3, #0
 8017aba:	4288      	cmp	r0, r1
 8017abc:	d305      	bcc.n	8017aca <__copybits+0x40>
 8017abe:	bd70      	pop	{r4, r5, r6, pc}
 8017ac0:	f853 6b04 	ldr.w	r6, [r3], #4
 8017ac4:	f845 6f04 	str.w	r6, [r5, #4]!
 8017ac8:	e7eb      	b.n	8017aa2 <__copybits+0x18>
 8017aca:	f840 3b04 	str.w	r3, [r0], #4
 8017ace:	e7f4      	b.n	8017aba <__copybits+0x30>

08017ad0 <__any_on>:
 8017ad0:	f100 0214 	add.w	r2, r0, #20
 8017ad4:	6900      	ldr	r0, [r0, #16]
 8017ad6:	114b      	asrs	r3, r1, #5
 8017ad8:	4298      	cmp	r0, r3
 8017ada:	b510      	push	{r4, lr}
 8017adc:	db11      	blt.n	8017b02 <__any_on+0x32>
 8017ade:	dd0a      	ble.n	8017af6 <__any_on+0x26>
 8017ae0:	f011 011f 	ands.w	r1, r1, #31
 8017ae4:	d007      	beq.n	8017af6 <__any_on+0x26>
 8017ae6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017aea:	fa24 f001 	lsr.w	r0, r4, r1
 8017aee:	fa00 f101 	lsl.w	r1, r0, r1
 8017af2:	428c      	cmp	r4, r1
 8017af4:	d10b      	bne.n	8017b0e <__any_on+0x3e>
 8017af6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017afa:	4293      	cmp	r3, r2
 8017afc:	d803      	bhi.n	8017b06 <__any_on+0x36>
 8017afe:	2000      	movs	r0, #0
 8017b00:	bd10      	pop	{r4, pc}
 8017b02:	4603      	mov	r3, r0
 8017b04:	e7f7      	b.n	8017af6 <__any_on+0x26>
 8017b06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017b0a:	2900      	cmp	r1, #0
 8017b0c:	d0f5      	beq.n	8017afa <__any_on+0x2a>
 8017b0e:	2001      	movs	r0, #1
 8017b10:	e7f6      	b.n	8017b00 <__any_on+0x30>

08017b12 <sulp>:
 8017b12:	b570      	push	{r4, r5, r6, lr}
 8017b14:	4604      	mov	r4, r0
 8017b16:	460d      	mov	r5, r1
 8017b18:	4616      	mov	r6, r2
 8017b1a:	ec45 4b10 	vmov	d0, r4, r5
 8017b1e:	f7ff febd 	bl	801789c <__ulp>
 8017b22:	b17e      	cbz	r6, 8017b44 <sulp+0x32>
 8017b24:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017b28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	dd09      	ble.n	8017b44 <sulp+0x32>
 8017b30:	051b      	lsls	r3, r3, #20
 8017b32:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8017b36:	2000      	movs	r0, #0
 8017b38:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8017b3c:	ec41 0b17 	vmov	d7, r0, r1
 8017b40:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017b44:	bd70      	pop	{r4, r5, r6, pc}
	...

08017b48 <_strtod_l>:
 8017b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b4c:	ed2d 8b0a 	vpush	{d8-d12}
 8017b50:	b097      	sub	sp, #92	@ 0x5c
 8017b52:	4688      	mov	r8, r1
 8017b54:	920e      	str	r2, [sp, #56]	@ 0x38
 8017b56:	2200      	movs	r2, #0
 8017b58:	9212      	str	r2, [sp, #72]	@ 0x48
 8017b5a:	9005      	str	r0, [sp, #20]
 8017b5c:	f04f 0a00 	mov.w	sl, #0
 8017b60:	f04f 0b00 	mov.w	fp, #0
 8017b64:	460a      	mov	r2, r1
 8017b66:	9211      	str	r2, [sp, #68]	@ 0x44
 8017b68:	7811      	ldrb	r1, [r2, #0]
 8017b6a:	292b      	cmp	r1, #43	@ 0x2b
 8017b6c:	d04c      	beq.n	8017c08 <_strtod_l+0xc0>
 8017b6e:	d839      	bhi.n	8017be4 <_strtod_l+0x9c>
 8017b70:	290d      	cmp	r1, #13
 8017b72:	d833      	bhi.n	8017bdc <_strtod_l+0x94>
 8017b74:	2908      	cmp	r1, #8
 8017b76:	d833      	bhi.n	8017be0 <_strtod_l+0x98>
 8017b78:	2900      	cmp	r1, #0
 8017b7a:	d03c      	beq.n	8017bf6 <_strtod_l+0xae>
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	9208      	str	r2, [sp, #32]
 8017b80:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8017b82:	782a      	ldrb	r2, [r5, #0]
 8017b84:	2a30      	cmp	r2, #48	@ 0x30
 8017b86:	f040 80b5 	bne.w	8017cf4 <_strtod_l+0x1ac>
 8017b8a:	786a      	ldrb	r2, [r5, #1]
 8017b8c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017b90:	2a58      	cmp	r2, #88	@ 0x58
 8017b92:	d170      	bne.n	8017c76 <_strtod_l+0x12e>
 8017b94:	9302      	str	r3, [sp, #8]
 8017b96:	9b08      	ldr	r3, [sp, #32]
 8017b98:	9301      	str	r3, [sp, #4]
 8017b9a:	ab12      	add	r3, sp, #72	@ 0x48
 8017b9c:	9300      	str	r3, [sp, #0]
 8017b9e:	4a8b      	ldr	r2, [pc, #556]	@ (8017dcc <_strtod_l+0x284>)
 8017ba0:	9805      	ldr	r0, [sp, #20]
 8017ba2:	ab13      	add	r3, sp, #76	@ 0x4c
 8017ba4:	a911      	add	r1, sp, #68	@ 0x44
 8017ba6:	f001 fa91 	bl	80190cc <__gethex>
 8017baa:	f010 060f 	ands.w	r6, r0, #15
 8017bae:	4604      	mov	r4, r0
 8017bb0:	d005      	beq.n	8017bbe <_strtod_l+0x76>
 8017bb2:	2e06      	cmp	r6, #6
 8017bb4:	d12a      	bne.n	8017c0c <_strtod_l+0xc4>
 8017bb6:	3501      	adds	r5, #1
 8017bb8:	2300      	movs	r3, #0
 8017bba:	9511      	str	r5, [sp, #68]	@ 0x44
 8017bbc:	9308      	str	r3, [sp, #32]
 8017bbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	f040 852f 	bne.w	8018624 <_strtod_l+0xadc>
 8017bc6:	9b08      	ldr	r3, [sp, #32]
 8017bc8:	ec4b ab10 	vmov	d0, sl, fp
 8017bcc:	b1cb      	cbz	r3, 8017c02 <_strtod_l+0xba>
 8017bce:	eeb1 0b40 	vneg.f64	d0, d0
 8017bd2:	b017      	add	sp, #92	@ 0x5c
 8017bd4:	ecbd 8b0a 	vpop	{d8-d12}
 8017bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bdc:	2920      	cmp	r1, #32
 8017bde:	d1cd      	bne.n	8017b7c <_strtod_l+0x34>
 8017be0:	3201      	adds	r2, #1
 8017be2:	e7c0      	b.n	8017b66 <_strtod_l+0x1e>
 8017be4:	292d      	cmp	r1, #45	@ 0x2d
 8017be6:	d1c9      	bne.n	8017b7c <_strtod_l+0x34>
 8017be8:	2101      	movs	r1, #1
 8017bea:	9108      	str	r1, [sp, #32]
 8017bec:	1c51      	adds	r1, r2, #1
 8017bee:	9111      	str	r1, [sp, #68]	@ 0x44
 8017bf0:	7852      	ldrb	r2, [r2, #1]
 8017bf2:	2a00      	cmp	r2, #0
 8017bf4:	d1c4      	bne.n	8017b80 <_strtod_l+0x38>
 8017bf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017bf8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	f040 850f 	bne.w	8018620 <_strtod_l+0xad8>
 8017c02:	ec4b ab10 	vmov	d0, sl, fp
 8017c06:	e7e4      	b.n	8017bd2 <_strtod_l+0x8a>
 8017c08:	2100      	movs	r1, #0
 8017c0a:	e7ee      	b.n	8017bea <_strtod_l+0xa2>
 8017c0c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017c0e:	b13a      	cbz	r2, 8017c20 <_strtod_l+0xd8>
 8017c10:	2135      	movs	r1, #53	@ 0x35
 8017c12:	a814      	add	r0, sp, #80	@ 0x50
 8017c14:	f7ff ff39 	bl	8017a8a <__copybits>
 8017c18:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017c1a:	9805      	ldr	r0, [sp, #20]
 8017c1c:	f7ff fb0a 	bl	8017234 <_Bfree>
 8017c20:	1e73      	subs	r3, r6, #1
 8017c22:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017c24:	2b04      	cmp	r3, #4
 8017c26:	d806      	bhi.n	8017c36 <_strtod_l+0xee>
 8017c28:	e8df f003 	tbb	[pc, r3]
 8017c2c:	201d0314 	.word	0x201d0314
 8017c30:	14          	.byte	0x14
 8017c31:	00          	.byte	0x00
 8017c32:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8017c36:	05e3      	lsls	r3, r4, #23
 8017c38:	bf48      	it	mi
 8017c3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8017c3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017c42:	0d1b      	lsrs	r3, r3, #20
 8017c44:	051b      	lsls	r3, r3, #20
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d1b9      	bne.n	8017bbe <_strtod_l+0x76>
 8017c4a:	f7fe fb91 	bl	8016370 <__errno>
 8017c4e:	2322      	movs	r3, #34	@ 0x22
 8017c50:	6003      	str	r3, [r0, #0]
 8017c52:	e7b4      	b.n	8017bbe <_strtod_l+0x76>
 8017c54:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8017c58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8017c5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8017c60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017c64:	e7e7      	b.n	8017c36 <_strtod_l+0xee>
 8017c66:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8017dd4 <_strtod_l+0x28c>
 8017c6a:	e7e4      	b.n	8017c36 <_strtod_l+0xee>
 8017c6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8017c70:	f04f 3aff 	mov.w	sl, #4294967295
 8017c74:	e7df      	b.n	8017c36 <_strtod_l+0xee>
 8017c76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017c78:	1c5a      	adds	r2, r3, #1
 8017c7a:	9211      	str	r2, [sp, #68]	@ 0x44
 8017c7c:	785b      	ldrb	r3, [r3, #1]
 8017c7e:	2b30      	cmp	r3, #48	@ 0x30
 8017c80:	d0f9      	beq.n	8017c76 <_strtod_l+0x12e>
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d09b      	beq.n	8017bbe <_strtod_l+0x76>
 8017c86:	2301      	movs	r3, #1
 8017c88:	2600      	movs	r6, #0
 8017c8a:	9307      	str	r3, [sp, #28]
 8017c8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c90:	46b1      	mov	r9, r6
 8017c92:	4635      	mov	r5, r6
 8017c94:	220a      	movs	r2, #10
 8017c96:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017c98:	7804      	ldrb	r4, [r0, #0]
 8017c9a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017c9e:	b2d9      	uxtb	r1, r3
 8017ca0:	2909      	cmp	r1, #9
 8017ca2:	d929      	bls.n	8017cf8 <_strtod_l+0x1b0>
 8017ca4:	494a      	ldr	r1, [pc, #296]	@ (8017dd0 <_strtod_l+0x288>)
 8017ca6:	2201      	movs	r2, #1
 8017ca8:	f001 f928 	bl	8018efc <strncmp>
 8017cac:	b378      	cbz	r0, 8017d0e <_strtod_l+0x1c6>
 8017cae:	2000      	movs	r0, #0
 8017cb0:	4622      	mov	r2, r4
 8017cb2:	462b      	mov	r3, r5
 8017cb4:	4607      	mov	r7, r0
 8017cb6:	9006      	str	r0, [sp, #24]
 8017cb8:	2a65      	cmp	r2, #101	@ 0x65
 8017cba:	d001      	beq.n	8017cc0 <_strtod_l+0x178>
 8017cbc:	2a45      	cmp	r2, #69	@ 0x45
 8017cbe:	d117      	bne.n	8017cf0 <_strtod_l+0x1a8>
 8017cc0:	b91b      	cbnz	r3, 8017cca <_strtod_l+0x182>
 8017cc2:	9b07      	ldr	r3, [sp, #28]
 8017cc4:	4303      	orrs	r3, r0
 8017cc6:	d096      	beq.n	8017bf6 <_strtod_l+0xae>
 8017cc8:	2300      	movs	r3, #0
 8017cca:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8017cce:	f108 0201 	add.w	r2, r8, #1
 8017cd2:	9211      	str	r2, [sp, #68]	@ 0x44
 8017cd4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017cd8:	2a2b      	cmp	r2, #43	@ 0x2b
 8017cda:	d06b      	beq.n	8017db4 <_strtod_l+0x26c>
 8017cdc:	2a2d      	cmp	r2, #45	@ 0x2d
 8017cde:	d071      	beq.n	8017dc4 <_strtod_l+0x27c>
 8017ce0:	f04f 0e00 	mov.w	lr, #0
 8017ce4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8017ce8:	2c09      	cmp	r4, #9
 8017cea:	d979      	bls.n	8017de0 <_strtod_l+0x298>
 8017cec:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8017cf0:	2400      	movs	r4, #0
 8017cf2:	e094      	b.n	8017e1e <_strtod_l+0x2d6>
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	e7c7      	b.n	8017c88 <_strtod_l+0x140>
 8017cf8:	2d08      	cmp	r5, #8
 8017cfa:	f100 0001 	add.w	r0, r0, #1
 8017cfe:	bfd4      	ite	le
 8017d00:	fb02 3909 	mlale	r9, r2, r9, r3
 8017d04:	fb02 3606 	mlagt	r6, r2, r6, r3
 8017d08:	3501      	adds	r5, #1
 8017d0a:	9011      	str	r0, [sp, #68]	@ 0x44
 8017d0c:	e7c3      	b.n	8017c96 <_strtod_l+0x14e>
 8017d0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017d10:	1c5a      	adds	r2, r3, #1
 8017d12:	9211      	str	r2, [sp, #68]	@ 0x44
 8017d14:	785a      	ldrb	r2, [r3, #1]
 8017d16:	b375      	cbz	r5, 8017d76 <_strtod_l+0x22e>
 8017d18:	4607      	mov	r7, r0
 8017d1a:	462b      	mov	r3, r5
 8017d1c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017d20:	2909      	cmp	r1, #9
 8017d22:	d913      	bls.n	8017d4c <_strtod_l+0x204>
 8017d24:	2101      	movs	r1, #1
 8017d26:	9106      	str	r1, [sp, #24]
 8017d28:	e7c6      	b.n	8017cb8 <_strtod_l+0x170>
 8017d2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017d2c:	1c5a      	adds	r2, r3, #1
 8017d2e:	9211      	str	r2, [sp, #68]	@ 0x44
 8017d30:	785a      	ldrb	r2, [r3, #1]
 8017d32:	3001      	adds	r0, #1
 8017d34:	2a30      	cmp	r2, #48	@ 0x30
 8017d36:	d0f8      	beq.n	8017d2a <_strtod_l+0x1e2>
 8017d38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8017d3c:	2b08      	cmp	r3, #8
 8017d3e:	f200 8476 	bhi.w	801862e <_strtod_l+0xae6>
 8017d42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017d44:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d46:	4607      	mov	r7, r0
 8017d48:	2000      	movs	r0, #0
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	3a30      	subs	r2, #48	@ 0x30
 8017d4e:	f100 0101 	add.w	r1, r0, #1
 8017d52:	d023      	beq.n	8017d9c <_strtod_l+0x254>
 8017d54:	440f      	add	r7, r1
 8017d56:	eb00 0c03 	add.w	ip, r0, r3
 8017d5a:	4619      	mov	r1, r3
 8017d5c:	240a      	movs	r4, #10
 8017d5e:	4561      	cmp	r1, ip
 8017d60:	d10b      	bne.n	8017d7a <_strtod_l+0x232>
 8017d62:	1c5c      	adds	r4, r3, #1
 8017d64:	4403      	add	r3, r0
 8017d66:	2b08      	cmp	r3, #8
 8017d68:	4404      	add	r4, r0
 8017d6a:	dc11      	bgt.n	8017d90 <_strtod_l+0x248>
 8017d6c:	230a      	movs	r3, #10
 8017d6e:	fb03 2909 	mla	r9, r3, r9, r2
 8017d72:	2100      	movs	r1, #0
 8017d74:	e013      	b.n	8017d9e <_strtod_l+0x256>
 8017d76:	4628      	mov	r0, r5
 8017d78:	e7dc      	b.n	8017d34 <_strtod_l+0x1ec>
 8017d7a:	2908      	cmp	r1, #8
 8017d7c:	f101 0101 	add.w	r1, r1, #1
 8017d80:	dc02      	bgt.n	8017d88 <_strtod_l+0x240>
 8017d82:	fb04 f909 	mul.w	r9, r4, r9
 8017d86:	e7ea      	b.n	8017d5e <_strtod_l+0x216>
 8017d88:	2910      	cmp	r1, #16
 8017d8a:	bfd8      	it	le
 8017d8c:	4366      	mulle	r6, r4
 8017d8e:	e7e6      	b.n	8017d5e <_strtod_l+0x216>
 8017d90:	2b0f      	cmp	r3, #15
 8017d92:	dcee      	bgt.n	8017d72 <_strtod_l+0x22a>
 8017d94:	230a      	movs	r3, #10
 8017d96:	fb03 2606 	mla	r6, r3, r6, r2
 8017d9a:	e7ea      	b.n	8017d72 <_strtod_l+0x22a>
 8017d9c:	461c      	mov	r4, r3
 8017d9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017da0:	1c5a      	adds	r2, r3, #1
 8017da2:	9211      	str	r2, [sp, #68]	@ 0x44
 8017da4:	785a      	ldrb	r2, [r3, #1]
 8017da6:	4608      	mov	r0, r1
 8017da8:	4623      	mov	r3, r4
 8017daa:	e7b7      	b.n	8017d1c <_strtod_l+0x1d4>
 8017dac:	2301      	movs	r3, #1
 8017dae:	2700      	movs	r7, #0
 8017db0:	9306      	str	r3, [sp, #24]
 8017db2:	e786      	b.n	8017cc2 <_strtod_l+0x17a>
 8017db4:	f04f 0e00 	mov.w	lr, #0
 8017db8:	f108 0202 	add.w	r2, r8, #2
 8017dbc:	9211      	str	r2, [sp, #68]	@ 0x44
 8017dbe:	f898 2002 	ldrb.w	r2, [r8, #2]
 8017dc2:	e78f      	b.n	8017ce4 <_strtod_l+0x19c>
 8017dc4:	f04f 0e01 	mov.w	lr, #1
 8017dc8:	e7f6      	b.n	8017db8 <_strtod_l+0x270>
 8017dca:	bf00      	nop
 8017dcc:	0801a140 	.word	0x0801a140
 8017dd0:	0801a128 	.word	0x0801a128
 8017dd4:	7ff00000 	.word	0x7ff00000
 8017dd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017dda:	1c54      	adds	r4, r2, #1
 8017ddc:	9411      	str	r4, [sp, #68]	@ 0x44
 8017dde:	7852      	ldrb	r2, [r2, #1]
 8017de0:	2a30      	cmp	r2, #48	@ 0x30
 8017de2:	d0f9      	beq.n	8017dd8 <_strtod_l+0x290>
 8017de4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8017de8:	2c08      	cmp	r4, #8
 8017dea:	d881      	bhi.n	8017cf0 <_strtod_l+0x1a8>
 8017dec:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8017df0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8017df4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017df6:	1c51      	adds	r1, r2, #1
 8017df8:	9111      	str	r1, [sp, #68]	@ 0x44
 8017dfa:	7852      	ldrb	r2, [r2, #1]
 8017dfc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8017e00:	2c09      	cmp	r4, #9
 8017e02:	d938      	bls.n	8017e76 <_strtod_l+0x32e>
 8017e04:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017e06:	1b0c      	subs	r4, r1, r4
 8017e08:	2c08      	cmp	r4, #8
 8017e0a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8017e0e:	dc02      	bgt.n	8017e16 <_strtod_l+0x2ce>
 8017e10:	4564      	cmp	r4, ip
 8017e12:	bfa8      	it	ge
 8017e14:	4664      	movge	r4, ip
 8017e16:	f1be 0f00 	cmp.w	lr, #0
 8017e1a:	d000      	beq.n	8017e1e <_strtod_l+0x2d6>
 8017e1c:	4264      	negs	r4, r4
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d14e      	bne.n	8017ec0 <_strtod_l+0x378>
 8017e22:	9b07      	ldr	r3, [sp, #28]
 8017e24:	4318      	orrs	r0, r3
 8017e26:	f47f aeca 	bne.w	8017bbe <_strtod_l+0x76>
 8017e2a:	9b06      	ldr	r3, [sp, #24]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f47f aee2 	bne.w	8017bf6 <_strtod_l+0xae>
 8017e32:	2a69      	cmp	r2, #105	@ 0x69
 8017e34:	d027      	beq.n	8017e86 <_strtod_l+0x33e>
 8017e36:	dc24      	bgt.n	8017e82 <_strtod_l+0x33a>
 8017e38:	2a49      	cmp	r2, #73	@ 0x49
 8017e3a:	d024      	beq.n	8017e86 <_strtod_l+0x33e>
 8017e3c:	2a4e      	cmp	r2, #78	@ 0x4e
 8017e3e:	f47f aeda 	bne.w	8017bf6 <_strtod_l+0xae>
 8017e42:	4997      	ldr	r1, [pc, #604]	@ (80180a0 <_strtod_l+0x558>)
 8017e44:	a811      	add	r0, sp, #68	@ 0x44
 8017e46:	f001 fb63 	bl	8019510 <__match>
 8017e4a:	2800      	cmp	r0, #0
 8017e4c:	f43f aed3 	beq.w	8017bf6 <_strtod_l+0xae>
 8017e50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017e52:	781b      	ldrb	r3, [r3, #0]
 8017e54:	2b28      	cmp	r3, #40	@ 0x28
 8017e56:	d12d      	bne.n	8017eb4 <_strtod_l+0x36c>
 8017e58:	4992      	ldr	r1, [pc, #584]	@ (80180a4 <_strtod_l+0x55c>)
 8017e5a:	aa14      	add	r2, sp, #80	@ 0x50
 8017e5c:	a811      	add	r0, sp, #68	@ 0x44
 8017e5e:	f001 fb6b 	bl	8019538 <__hexnan>
 8017e62:	2805      	cmp	r0, #5
 8017e64:	d126      	bne.n	8017eb4 <_strtod_l+0x36c>
 8017e66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017e68:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8017e6c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017e70:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8017e74:	e6a3      	b.n	8017bbe <_strtod_l+0x76>
 8017e76:	240a      	movs	r4, #10
 8017e78:	fb04 2c0c 	mla	ip, r4, ip, r2
 8017e7c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8017e80:	e7b8      	b.n	8017df4 <_strtod_l+0x2ac>
 8017e82:	2a6e      	cmp	r2, #110	@ 0x6e
 8017e84:	e7db      	b.n	8017e3e <_strtod_l+0x2f6>
 8017e86:	4988      	ldr	r1, [pc, #544]	@ (80180a8 <_strtod_l+0x560>)
 8017e88:	a811      	add	r0, sp, #68	@ 0x44
 8017e8a:	f001 fb41 	bl	8019510 <__match>
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	f43f aeb1 	beq.w	8017bf6 <_strtod_l+0xae>
 8017e94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017e96:	4985      	ldr	r1, [pc, #532]	@ (80180ac <_strtod_l+0x564>)
 8017e98:	3b01      	subs	r3, #1
 8017e9a:	a811      	add	r0, sp, #68	@ 0x44
 8017e9c:	9311      	str	r3, [sp, #68]	@ 0x44
 8017e9e:	f001 fb37 	bl	8019510 <__match>
 8017ea2:	b910      	cbnz	r0, 8017eaa <_strtod_l+0x362>
 8017ea4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	9311      	str	r3, [sp, #68]	@ 0x44
 8017eaa:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80180c0 <_strtod_l+0x578>
 8017eae:	f04f 0a00 	mov.w	sl, #0
 8017eb2:	e684      	b.n	8017bbe <_strtod_l+0x76>
 8017eb4:	487e      	ldr	r0, [pc, #504]	@ (80180b0 <_strtod_l+0x568>)
 8017eb6:	f001 f867 	bl	8018f88 <nan>
 8017eba:	ec5b ab10 	vmov	sl, fp, d0
 8017ebe:	e67e      	b.n	8017bbe <_strtod_l+0x76>
 8017ec0:	ee07 9a90 	vmov	s15, r9
 8017ec4:	1be2      	subs	r2, r4, r7
 8017ec6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017eca:	2d00      	cmp	r5, #0
 8017ecc:	bf08      	it	eq
 8017ece:	461d      	moveq	r5, r3
 8017ed0:	2b10      	cmp	r3, #16
 8017ed2:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	bfa8      	it	ge
 8017ed8:	2210      	movge	r2, #16
 8017eda:	2b09      	cmp	r3, #9
 8017edc:	ec5b ab17 	vmov	sl, fp, d7
 8017ee0:	dc15      	bgt.n	8017f0e <_strtod_l+0x3c6>
 8017ee2:	1be1      	subs	r1, r4, r7
 8017ee4:	2900      	cmp	r1, #0
 8017ee6:	f43f ae6a 	beq.w	8017bbe <_strtod_l+0x76>
 8017eea:	eba4 0107 	sub.w	r1, r4, r7
 8017eee:	dd72      	ble.n	8017fd6 <_strtod_l+0x48e>
 8017ef0:	2916      	cmp	r1, #22
 8017ef2:	dc59      	bgt.n	8017fa8 <_strtod_l+0x460>
 8017ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80180b4 <_strtod_l+0x56c>)
 8017ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017efc:	ed93 7b00 	vldr	d7, [r3]
 8017f00:	ec4b ab16 	vmov	d6, sl, fp
 8017f04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017f08:	ec5b ab17 	vmov	sl, fp, d7
 8017f0c:	e657      	b.n	8017bbe <_strtod_l+0x76>
 8017f0e:	4969      	ldr	r1, [pc, #420]	@ (80180b4 <_strtod_l+0x56c>)
 8017f10:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017f14:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8017f18:	ee06 6a90 	vmov	s13, r6
 8017f1c:	2b0f      	cmp	r3, #15
 8017f1e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8017f22:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017f26:	ec5b ab16 	vmov	sl, fp, d6
 8017f2a:	ddda      	ble.n	8017ee2 <_strtod_l+0x39a>
 8017f2c:	1a9a      	subs	r2, r3, r2
 8017f2e:	1be1      	subs	r1, r4, r7
 8017f30:	440a      	add	r2, r1
 8017f32:	2a00      	cmp	r2, #0
 8017f34:	f340 8094 	ble.w	8018060 <_strtod_l+0x518>
 8017f38:	f012 000f 	ands.w	r0, r2, #15
 8017f3c:	d00a      	beq.n	8017f54 <_strtod_l+0x40c>
 8017f3e:	495d      	ldr	r1, [pc, #372]	@ (80180b4 <_strtod_l+0x56c>)
 8017f40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017f44:	ed91 7b00 	vldr	d7, [r1]
 8017f48:	ec4b ab16 	vmov	d6, sl, fp
 8017f4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017f50:	ec5b ab17 	vmov	sl, fp, d7
 8017f54:	f032 020f 	bics.w	r2, r2, #15
 8017f58:	d073      	beq.n	8018042 <_strtod_l+0x4fa>
 8017f5a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8017f5e:	dd47      	ble.n	8017ff0 <_strtod_l+0x4a8>
 8017f60:	2400      	movs	r4, #0
 8017f62:	4625      	mov	r5, r4
 8017f64:	9407      	str	r4, [sp, #28]
 8017f66:	4626      	mov	r6, r4
 8017f68:	9a05      	ldr	r2, [sp, #20]
 8017f6a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80180c0 <_strtod_l+0x578>
 8017f6e:	2322      	movs	r3, #34	@ 0x22
 8017f70:	6013      	str	r3, [r2, #0]
 8017f72:	f04f 0a00 	mov.w	sl, #0
 8017f76:	9b07      	ldr	r3, [sp, #28]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	f43f ae20 	beq.w	8017bbe <_strtod_l+0x76>
 8017f7e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017f80:	9805      	ldr	r0, [sp, #20]
 8017f82:	f7ff f957 	bl	8017234 <_Bfree>
 8017f86:	9805      	ldr	r0, [sp, #20]
 8017f88:	4631      	mov	r1, r6
 8017f8a:	f7ff f953 	bl	8017234 <_Bfree>
 8017f8e:	9805      	ldr	r0, [sp, #20]
 8017f90:	4629      	mov	r1, r5
 8017f92:	f7ff f94f 	bl	8017234 <_Bfree>
 8017f96:	9907      	ldr	r1, [sp, #28]
 8017f98:	9805      	ldr	r0, [sp, #20]
 8017f9a:	f7ff f94b 	bl	8017234 <_Bfree>
 8017f9e:	9805      	ldr	r0, [sp, #20]
 8017fa0:	4621      	mov	r1, r4
 8017fa2:	f7ff f947 	bl	8017234 <_Bfree>
 8017fa6:	e60a      	b.n	8017bbe <_strtod_l+0x76>
 8017fa8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8017fac:	1be0      	subs	r0, r4, r7
 8017fae:	4281      	cmp	r1, r0
 8017fb0:	dbbc      	blt.n	8017f2c <_strtod_l+0x3e4>
 8017fb2:	4a40      	ldr	r2, [pc, #256]	@ (80180b4 <_strtod_l+0x56c>)
 8017fb4:	f1c3 030f 	rsb	r3, r3, #15
 8017fb8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017fbc:	ed91 7b00 	vldr	d7, [r1]
 8017fc0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017fc2:	ec4b ab16 	vmov	d6, sl, fp
 8017fc6:	1acb      	subs	r3, r1, r3
 8017fc8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017fcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017fd0:	ed92 6b00 	vldr	d6, [r2]
 8017fd4:	e796      	b.n	8017f04 <_strtod_l+0x3bc>
 8017fd6:	3116      	adds	r1, #22
 8017fd8:	dba8      	blt.n	8017f2c <_strtod_l+0x3e4>
 8017fda:	4b36      	ldr	r3, [pc, #216]	@ (80180b4 <_strtod_l+0x56c>)
 8017fdc:	1b3c      	subs	r4, r7, r4
 8017fde:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8017fe2:	ed94 7b00 	vldr	d7, [r4]
 8017fe6:	ec4b ab16 	vmov	d6, sl, fp
 8017fea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017fee:	e78b      	b.n	8017f08 <_strtod_l+0x3c0>
 8017ff0:	2000      	movs	r0, #0
 8017ff2:	ec4b ab17 	vmov	d7, sl, fp
 8017ff6:	4e30      	ldr	r6, [pc, #192]	@ (80180b8 <_strtod_l+0x570>)
 8017ff8:	1112      	asrs	r2, r2, #4
 8017ffa:	4601      	mov	r1, r0
 8017ffc:	2a01      	cmp	r2, #1
 8017ffe:	dc23      	bgt.n	8018048 <_strtod_l+0x500>
 8018000:	b108      	cbz	r0, 8018006 <_strtod_l+0x4be>
 8018002:	ec5b ab17 	vmov	sl, fp, d7
 8018006:	4a2c      	ldr	r2, [pc, #176]	@ (80180b8 <_strtod_l+0x570>)
 8018008:	482c      	ldr	r0, [pc, #176]	@ (80180bc <_strtod_l+0x574>)
 801800a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801800e:	ed92 7b00 	vldr	d7, [r2]
 8018012:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8018016:	ec4b ab16 	vmov	d6, sl, fp
 801801a:	4a29      	ldr	r2, [pc, #164]	@ (80180c0 <_strtod_l+0x578>)
 801801c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018020:	ee17 1a90 	vmov	r1, s15
 8018024:	400a      	ands	r2, r1
 8018026:	4282      	cmp	r2, r0
 8018028:	ec5b ab17 	vmov	sl, fp, d7
 801802c:	d898      	bhi.n	8017f60 <_strtod_l+0x418>
 801802e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8018032:	4282      	cmp	r2, r0
 8018034:	bf86      	itte	hi
 8018036:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80180c4 <_strtod_l+0x57c>
 801803a:	f04f 3aff 	movhi.w	sl, #4294967295
 801803e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8018042:	2200      	movs	r2, #0
 8018044:	9206      	str	r2, [sp, #24]
 8018046:	e076      	b.n	8018136 <_strtod_l+0x5ee>
 8018048:	f012 0f01 	tst.w	r2, #1
 801804c:	d004      	beq.n	8018058 <_strtod_l+0x510>
 801804e:	ed96 6b00 	vldr	d6, [r6]
 8018052:	2001      	movs	r0, #1
 8018054:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018058:	3101      	adds	r1, #1
 801805a:	1052      	asrs	r2, r2, #1
 801805c:	3608      	adds	r6, #8
 801805e:	e7cd      	b.n	8017ffc <_strtod_l+0x4b4>
 8018060:	d0ef      	beq.n	8018042 <_strtod_l+0x4fa>
 8018062:	4252      	negs	r2, r2
 8018064:	f012 000f 	ands.w	r0, r2, #15
 8018068:	d00a      	beq.n	8018080 <_strtod_l+0x538>
 801806a:	4912      	ldr	r1, [pc, #72]	@ (80180b4 <_strtod_l+0x56c>)
 801806c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018070:	ed91 7b00 	vldr	d7, [r1]
 8018074:	ec4b ab16 	vmov	d6, sl, fp
 8018078:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801807c:	ec5b ab17 	vmov	sl, fp, d7
 8018080:	1112      	asrs	r2, r2, #4
 8018082:	d0de      	beq.n	8018042 <_strtod_l+0x4fa>
 8018084:	2a1f      	cmp	r2, #31
 8018086:	dd1f      	ble.n	80180c8 <_strtod_l+0x580>
 8018088:	2400      	movs	r4, #0
 801808a:	4625      	mov	r5, r4
 801808c:	9407      	str	r4, [sp, #28]
 801808e:	4626      	mov	r6, r4
 8018090:	9a05      	ldr	r2, [sp, #20]
 8018092:	2322      	movs	r3, #34	@ 0x22
 8018094:	f04f 0a00 	mov.w	sl, #0
 8018098:	f04f 0b00 	mov.w	fp, #0
 801809c:	6013      	str	r3, [r2, #0]
 801809e:	e76a      	b.n	8017f76 <_strtod_l+0x42e>
 80180a0:	08019f19 	.word	0x08019f19
 80180a4:	0801a12c 	.word	0x0801a12c
 80180a8:	08019f11 	.word	0x08019f11
 80180ac:	08019f48 	.word	0x08019f48
 80180b0:	0801a2d5 	.word	0x0801a2d5
 80180b4:	0801a060 	.word	0x0801a060
 80180b8:	0801a038 	.word	0x0801a038
 80180bc:	7ca00000 	.word	0x7ca00000
 80180c0:	7ff00000 	.word	0x7ff00000
 80180c4:	7fefffff 	.word	0x7fefffff
 80180c8:	f012 0110 	ands.w	r1, r2, #16
 80180cc:	bf18      	it	ne
 80180ce:	216a      	movne	r1, #106	@ 0x6a
 80180d0:	9106      	str	r1, [sp, #24]
 80180d2:	ec4b ab17 	vmov	d7, sl, fp
 80180d6:	49b0      	ldr	r1, [pc, #704]	@ (8018398 <_strtod_l+0x850>)
 80180d8:	2000      	movs	r0, #0
 80180da:	07d6      	lsls	r6, r2, #31
 80180dc:	d504      	bpl.n	80180e8 <_strtod_l+0x5a0>
 80180de:	ed91 6b00 	vldr	d6, [r1]
 80180e2:	2001      	movs	r0, #1
 80180e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80180e8:	1052      	asrs	r2, r2, #1
 80180ea:	f101 0108 	add.w	r1, r1, #8
 80180ee:	d1f4      	bne.n	80180da <_strtod_l+0x592>
 80180f0:	b108      	cbz	r0, 80180f6 <_strtod_l+0x5ae>
 80180f2:	ec5b ab17 	vmov	sl, fp, d7
 80180f6:	9a06      	ldr	r2, [sp, #24]
 80180f8:	b1b2      	cbz	r2, 8018128 <_strtod_l+0x5e0>
 80180fa:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80180fe:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8018102:	2a00      	cmp	r2, #0
 8018104:	4658      	mov	r0, fp
 8018106:	dd0f      	ble.n	8018128 <_strtod_l+0x5e0>
 8018108:	2a1f      	cmp	r2, #31
 801810a:	dd55      	ble.n	80181b8 <_strtod_l+0x670>
 801810c:	2a34      	cmp	r2, #52	@ 0x34
 801810e:	bfde      	ittt	le
 8018110:	f04f 32ff 	movle.w	r2, #4294967295
 8018114:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8018118:	408a      	lslle	r2, r1
 801811a:	f04f 0a00 	mov.w	sl, #0
 801811e:	bfcc      	ite	gt
 8018120:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018124:	ea02 0b00 	andle.w	fp, r2, r0
 8018128:	ec4b ab17 	vmov	d7, sl, fp
 801812c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018134:	d0a8      	beq.n	8018088 <_strtod_l+0x540>
 8018136:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018138:	9805      	ldr	r0, [sp, #20]
 801813a:	f8cd 9000 	str.w	r9, [sp]
 801813e:	462a      	mov	r2, r5
 8018140:	f7ff f8e0 	bl	8017304 <__s2b>
 8018144:	9007      	str	r0, [sp, #28]
 8018146:	2800      	cmp	r0, #0
 8018148:	f43f af0a 	beq.w	8017f60 <_strtod_l+0x418>
 801814c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801814e:	1b3f      	subs	r7, r7, r4
 8018150:	2b00      	cmp	r3, #0
 8018152:	bfb4      	ite	lt
 8018154:	463b      	movlt	r3, r7
 8018156:	2300      	movge	r3, #0
 8018158:	930a      	str	r3, [sp, #40]	@ 0x28
 801815a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801815c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8018388 <_strtod_l+0x840>
 8018160:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018164:	2400      	movs	r4, #0
 8018166:	930d      	str	r3, [sp, #52]	@ 0x34
 8018168:	4625      	mov	r5, r4
 801816a:	9b07      	ldr	r3, [sp, #28]
 801816c:	9805      	ldr	r0, [sp, #20]
 801816e:	6859      	ldr	r1, [r3, #4]
 8018170:	f7ff f820 	bl	80171b4 <_Balloc>
 8018174:	4606      	mov	r6, r0
 8018176:	2800      	cmp	r0, #0
 8018178:	f43f aef6 	beq.w	8017f68 <_strtod_l+0x420>
 801817c:	9b07      	ldr	r3, [sp, #28]
 801817e:	691a      	ldr	r2, [r3, #16]
 8018180:	ec4b ab19 	vmov	d9, sl, fp
 8018184:	3202      	adds	r2, #2
 8018186:	f103 010c 	add.w	r1, r3, #12
 801818a:	0092      	lsls	r2, r2, #2
 801818c:	300c      	adds	r0, #12
 801818e:	f7fe f91c 	bl	80163ca <memcpy>
 8018192:	eeb0 0b49 	vmov.f64	d0, d9
 8018196:	9805      	ldr	r0, [sp, #20]
 8018198:	aa14      	add	r2, sp, #80	@ 0x50
 801819a:	a913      	add	r1, sp, #76	@ 0x4c
 801819c:	f7ff fbee 	bl	801797c <__d2b>
 80181a0:	9012      	str	r0, [sp, #72]	@ 0x48
 80181a2:	2800      	cmp	r0, #0
 80181a4:	f43f aee0 	beq.w	8017f68 <_strtod_l+0x420>
 80181a8:	9805      	ldr	r0, [sp, #20]
 80181aa:	2101      	movs	r1, #1
 80181ac:	f7ff f940 	bl	8017430 <__i2b>
 80181b0:	4605      	mov	r5, r0
 80181b2:	b940      	cbnz	r0, 80181c6 <_strtod_l+0x67e>
 80181b4:	2500      	movs	r5, #0
 80181b6:	e6d7      	b.n	8017f68 <_strtod_l+0x420>
 80181b8:	f04f 31ff 	mov.w	r1, #4294967295
 80181bc:	fa01 f202 	lsl.w	r2, r1, r2
 80181c0:	ea02 0a0a 	and.w	sl, r2, sl
 80181c4:	e7b0      	b.n	8018128 <_strtod_l+0x5e0>
 80181c6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80181c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80181ca:	2f00      	cmp	r7, #0
 80181cc:	bfab      	itete	ge
 80181ce:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80181d0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80181d2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80181d6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80181da:	bfac      	ite	ge
 80181dc:	eb07 0903 	addge.w	r9, r7, r3
 80181e0:	eba3 0807 	sublt.w	r8, r3, r7
 80181e4:	9b06      	ldr	r3, [sp, #24]
 80181e6:	1aff      	subs	r7, r7, r3
 80181e8:	4417      	add	r7, r2
 80181ea:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80181ee:	4a6b      	ldr	r2, [pc, #428]	@ (801839c <_strtod_l+0x854>)
 80181f0:	3f01      	subs	r7, #1
 80181f2:	4297      	cmp	r7, r2
 80181f4:	da51      	bge.n	801829a <_strtod_l+0x752>
 80181f6:	1bd1      	subs	r1, r2, r7
 80181f8:	291f      	cmp	r1, #31
 80181fa:	eba3 0301 	sub.w	r3, r3, r1
 80181fe:	f04f 0201 	mov.w	r2, #1
 8018202:	dc3e      	bgt.n	8018282 <_strtod_l+0x73a>
 8018204:	408a      	lsls	r2, r1
 8018206:	920c      	str	r2, [sp, #48]	@ 0x30
 8018208:	2200      	movs	r2, #0
 801820a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801820c:	eb09 0703 	add.w	r7, r9, r3
 8018210:	4498      	add	r8, r3
 8018212:	9b06      	ldr	r3, [sp, #24]
 8018214:	45b9      	cmp	r9, r7
 8018216:	4498      	add	r8, r3
 8018218:	464b      	mov	r3, r9
 801821a:	bfa8      	it	ge
 801821c:	463b      	movge	r3, r7
 801821e:	4543      	cmp	r3, r8
 8018220:	bfa8      	it	ge
 8018222:	4643      	movge	r3, r8
 8018224:	2b00      	cmp	r3, #0
 8018226:	bfc2      	ittt	gt
 8018228:	1aff      	subgt	r7, r7, r3
 801822a:	eba8 0803 	subgt.w	r8, r8, r3
 801822e:	eba9 0903 	subgt.w	r9, r9, r3
 8018232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018234:	2b00      	cmp	r3, #0
 8018236:	dd16      	ble.n	8018266 <_strtod_l+0x71e>
 8018238:	4629      	mov	r1, r5
 801823a:	9805      	ldr	r0, [sp, #20]
 801823c:	461a      	mov	r2, r3
 801823e:	f7ff f9b7 	bl	80175b0 <__pow5mult>
 8018242:	4605      	mov	r5, r0
 8018244:	2800      	cmp	r0, #0
 8018246:	d0b5      	beq.n	80181b4 <_strtod_l+0x66c>
 8018248:	4601      	mov	r1, r0
 801824a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801824c:	9805      	ldr	r0, [sp, #20]
 801824e:	f7ff f905 	bl	801745c <__multiply>
 8018252:	900f      	str	r0, [sp, #60]	@ 0x3c
 8018254:	2800      	cmp	r0, #0
 8018256:	f43f ae87 	beq.w	8017f68 <_strtod_l+0x420>
 801825a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801825c:	9805      	ldr	r0, [sp, #20]
 801825e:	f7fe ffe9 	bl	8017234 <_Bfree>
 8018262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018264:	9312      	str	r3, [sp, #72]	@ 0x48
 8018266:	2f00      	cmp	r7, #0
 8018268:	dc1b      	bgt.n	80182a2 <_strtod_l+0x75a>
 801826a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801826c:	2b00      	cmp	r3, #0
 801826e:	dd21      	ble.n	80182b4 <_strtod_l+0x76c>
 8018270:	4631      	mov	r1, r6
 8018272:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018274:	9805      	ldr	r0, [sp, #20]
 8018276:	f7ff f99b 	bl	80175b0 <__pow5mult>
 801827a:	4606      	mov	r6, r0
 801827c:	b9d0      	cbnz	r0, 80182b4 <_strtod_l+0x76c>
 801827e:	2600      	movs	r6, #0
 8018280:	e672      	b.n	8017f68 <_strtod_l+0x420>
 8018282:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8018286:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801828a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801828e:	37e2      	adds	r7, #226	@ 0xe2
 8018290:	fa02 f107 	lsl.w	r1, r2, r7
 8018294:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018296:	920c      	str	r2, [sp, #48]	@ 0x30
 8018298:	e7b8      	b.n	801820c <_strtod_l+0x6c4>
 801829a:	2200      	movs	r2, #0
 801829c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801829e:	2201      	movs	r2, #1
 80182a0:	e7f9      	b.n	8018296 <_strtod_l+0x74e>
 80182a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80182a4:	9805      	ldr	r0, [sp, #20]
 80182a6:	463a      	mov	r2, r7
 80182a8:	f7ff f9dc 	bl	8017664 <__lshift>
 80182ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80182ae:	2800      	cmp	r0, #0
 80182b0:	d1db      	bne.n	801826a <_strtod_l+0x722>
 80182b2:	e659      	b.n	8017f68 <_strtod_l+0x420>
 80182b4:	f1b8 0f00 	cmp.w	r8, #0
 80182b8:	dd07      	ble.n	80182ca <_strtod_l+0x782>
 80182ba:	4631      	mov	r1, r6
 80182bc:	9805      	ldr	r0, [sp, #20]
 80182be:	4642      	mov	r2, r8
 80182c0:	f7ff f9d0 	bl	8017664 <__lshift>
 80182c4:	4606      	mov	r6, r0
 80182c6:	2800      	cmp	r0, #0
 80182c8:	d0d9      	beq.n	801827e <_strtod_l+0x736>
 80182ca:	f1b9 0f00 	cmp.w	r9, #0
 80182ce:	dd08      	ble.n	80182e2 <_strtod_l+0x79a>
 80182d0:	4629      	mov	r1, r5
 80182d2:	9805      	ldr	r0, [sp, #20]
 80182d4:	464a      	mov	r2, r9
 80182d6:	f7ff f9c5 	bl	8017664 <__lshift>
 80182da:	4605      	mov	r5, r0
 80182dc:	2800      	cmp	r0, #0
 80182de:	f43f ae43 	beq.w	8017f68 <_strtod_l+0x420>
 80182e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80182e4:	9805      	ldr	r0, [sp, #20]
 80182e6:	4632      	mov	r2, r6
 80182e8:	f7ff fa44 	bl	8017774 <__mdiff>
 80182ec:	4604      	mov	r4, r0
 80182ee:	2800      	cmp	r0, #0
 80182f0:	f43f ae3a 	beq.w	8017f68 <_strtod_l+0x420>
 80182f4:	2300      	movs	r3, #0
 80182f6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80182fa:	60c3      	str	r3, [r0, #12]
 80182fc:	4629      	mov	r1, r5
 80182fe:	f7ff fa1d 	bl	801773c <__mcmp>
 8018302:	2800      	cmp	r0, #0
 8018304:	da4e      	bge.n	80183a4 <_strtod_l+0x85c>
 8018306:	ea58 080a 	orrs.w	r8, r8, sl
 801830a:	d174      	bne.n	80183f6 <_strtod_l+0x8ae>
 801830c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018310:	2b00      	cmp	r3, #0
 8018312:	d170      	bne.n	80183f6 <_strtod_l+0x8ae>
 8018314:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018318:	0d1b      	lsrs	r3, r3, #20
 801831a:	051b      	lsls	r3, r3, #20
 801831c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018320:	d969      	bls.n	80183f6 <_strtod_l+0x8ae>
 8018322:	6963      	ldr	r3, [r4, #20]
 8018324:	b913      	cbnz	r3, 801832c <_strtod_l+0x7e4>
 8018326:	6923      	ldr	r3, [r4, #16]
 8018328:	2b01      	cmp	r3, #1
 801832a:	dd64      	ble.n	80183f6 <_strtod_l+0x8ae>
 801832c:	4621      	mov	r1, r4
 801832e:	2201      	movs	r2, #1
 8018330:	9805      	ldr	r0, [sp, #20]
 8018332:	f7ff f997 	bl	8017664 <__lshift>
 8018336:	4629      	mov	r1, r5
 8018338:	4604      	mov	r4, r0
 801833a:	f7ff f9ff 	bl	801773c <__mcmp>
 801833e:	2800      	cmp	r0, #0
 8018340:	dd59      	ble.n	80183f6 <_strtod_l+0x8ae>
 8018342:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018346:	9a06      	ldr	r2, [sp, #24]
 8018348:	0d1b      	lsrs	r3, r3, #20
 801834a:	051b      	lsls	r3, r3, #20
 801834c:	2a00      	cmp	r2, #0
 801834e:	d070      	beq.n	8018432 <_strtod_l+0x8ea>
 8018350:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018354:	d86d      	bhi.n	8018432 <_strtod_l+0x8ea>
 8018356:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801835a:	f67f ae99 	bls.w	8018090 <_strtod_l+0x548>
 801835e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8018390 <_strtod_l+0x848>
 8018362:	ec4b ab16 	vmov	d6, sl, fp
 8018366:	4b0e      	ldr	r3, [pc, #56]	@ (80183a0 <_strtod_l+0x858>)
 8018368:	ee26 7b07 	vmul.f64	d7, d6, d7
 801836c:	ee17 2a90 	vmov	r2, s15
 8018370:	4013      	ands	r3, r2
 8018372:	ec5b ab17 	vmov	sl, fp, d7
 8018376:	2b00      	cmp	r3, #0
 8018378:	f47f ae01 	bne.w	8017f7e <_strtod_l+0x436>
 801837c:	9a05      	ldr	r2, [sp, #20]
 801837e:	2322      	movs	r3, #34	@ 0x22
 8018380:	6013      	str	r3, [r2, #0]
 8018382:	e5fc      	b.n	8017f7e <_strtod_l+0x436>
 8018384:	f3af 8000 	nop.w
 8018388:	ffc00000 	.word	0xffc00000
 801838c:	41dfffff 	.word	0x41dfffff
 8018390:	00000000 	.word	0x00000000
 8018394:	39500000 	.word	0x39500000
 8018398:	0801a158 	.word	0x0801a158
 801839c:	fffffc02 	.word	0xfffffc02
 80183a0:	7ff00000 	.word	0x7ff00000
 80183a4:	46d9      	mov	r9, fp
 80183a6:	d15d      	bne.n	8018464 <_strtod_l+0x91c>
 80183a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80183ac:	f1b8 0f00 	cmp.w	r8, #0
 80183b0:	d02a      	beq.n	8018408 <_strtod_l+0x8c0>
 80183b2:	4aab      	ldr	r2, [pc, #684]	@ (8018660 <_strtod_l+0xb18>)
 80183b4:	4293      	cmp	r3, r2
 80183b6:	d12a      	bne.n	801840e <_strtod_l+0x8c6>
 80183b8:	9b06      	ldr	r3, [sp, #24]
 80183ba:	4652      	mov	r2, sl
 80183bc:	b1fb      	cbz	r3, 80183fe <_strtod_l+0x8b6>
 80183be:	4ba9      	ldr	r3, [pc, #676]	@ (8018664 <_strtod_l+0xb1c>)
 80183c0:	ea0b 0303 	and.w	r3, fp, r3
 80183c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80183c8:	f04f 31ff 	mov.w	r1, #4294967295
 80183cc:	d81a      	bhi.n	8018404 <_strtod_l+0x8bc>
 80183ce:	0d1b      	lsrs	r3, r3, #20
 80183d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80183d4:	fa01 f303 	lsl.w	r3, r1, r3
 80183d8:	429a      	cmp	r2, r3
 80183da:	d118      	bne.n	801840e <_strtod_l+0x8c6>
 80183dc:	4ba2      	ldr	r3, [pc, #648]	@ (8018668 <_strtod_l+0xb20>)
 80183de:	4599      	cmp	r9, r3
 80183e0:	d102      	bne.n	80183e8 <_strtod_l+0x8a0>
 80183e2:	3201      	adds	r2, #1
 80183e4:	f43f adc0 	beq.w	8017f68 <_strtod_l+0x420>
 80183e8:	4b9e      	ldr	r3, [pc, #632]	@ (8018664 <_strtod_l+0xb1c>)
 80183ea:	ea09 0303 	and.w	r3, r9, r3
 80183ee:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80183f2:	f04f 0a00 	mov.w	sl, #0
 80183f6:	9b06      	ldr	r3, [sp, #24]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d1b0      	bne.n	801835e <_strtod_l+0x816>
 80183fc:	e5bf      	b.n	8017f7e <_strtod_l+0x436>
 80183fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018402:	e7e9      	b.n	80183d8 <_strtod_l+0x890>
 8018404:	460b      	mov	r3, r1
 8018406:	e7e7      	b.n	80183d8 <_strtod_l+0x890>
 8018408:	ea53 030a 	orrs.w	r3, r3, sl
 801840c:	d099      	beq.n	8018342 <_strtod_l+0x7fa>
 801840e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018410:	b1c3      	cbz	r3, 8018444 <_strtod_l+0x8fc>
 8018412:	ea13 0f09 	tst.w	r3, r9
 8018416:	d0ee      	beq.n	80183f6 <_strtod_l+0x8ae>
 8018418:	9a06      	ldr	r2, [sp, #24]
 801841a:	4650      	mov	r0, sl
 801841c:	4659      	mov	r1, fp
 801841e:	f1b8 0f00 	cmp.w	r8, #0
 8018422:	d013      	beq.n	801844c <_strtod_l+0x904>
 8018424:	f7ff fb75 	bl	8017b12 <sulp>
 8018428:	ee39 7b00 	vadd.f64	d7, d9, d0
 801842c:	ec5b ab17 	vmov	sl, fp, d7
 8018430:	e7e1      	b.n	80183f6 <_strtod_l+0x8ae>
 8018432:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8018436:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801843a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801843e:	f04f 3aff 	mov.w	sl, #4294967295
 8018442:	e7d8      	b.n	80183f6 <_strtod_l+0x8ae>
 8018444:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018446:	ea13 0f0a 	tst.w	r3, sl
 801844a:	e7e4      	b.n	8018416 <_strtod_l+0x8ce>
 801844c:	f7ff fb61 	bl	8017b12 <sulp>
 8018450:	ee39 0b40 	vsub.f64	d0, d9, d0
 8018454:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801845c:	ec5b ab10 	vmov	sl, fp, d0
 8018460:	d1c9      	bne.n	80183f6 <_strtod_l+0x8ae>
 8018462:	e615      	b.n	8018090 <_strtod_l+0x548>
 8018464:	4629      	mov	r1, r5
 8018466:	4620      	mov	r0, r4
 8018468:	f7ff fae0 	bl	8017a2c <__ratio>
 801846c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8018470:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018478:	d85d      	bhi.n	8018536 <_strtod_l+0x9ee>
 801847a:	f1b8 0f00 	cmp.w	r8, #0
 801847e:	d164      	bne.n	801854a <_strtod_l+0xa02>
 8018480:	f1ba 0f00 	cmp.w	sl, #0
 8018484:	d14b      	bne.n	801851e <_strtod_l+0x9d6>
 8018486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801848a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801848e:	2b00      	cmp	r3, #0
 8018490:	d160      	bne.n	8018554 <_strtod_l+0xa0c>
 8018492:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8018496:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801849a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801849e:	d401      	bmi.n	80184a4 <_strtod_l+0x95c>
 80184a0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80184a4:	eeb1 ab48 	vneg.f64	d10, d8
 80184a8:	486e      	ldr	r0, [pc, #440]	@ (8018664 <_strtod_l+0xb1c>)
 80184aa:	4970      	ldr	r1, [pc, #448]	@ (801866c <_strtod_l+0xb24>)
 80184ac:	ea09 0700 	and.w	r7, r9, r0
 80184b0:	428f      	cmp	r7, r1
 80184b2:	ec53 2b1a 	vmov	r2, r3, d10
 80184b6:	d17d      	bne.n	80185b4 <_strtod_l+0xa6c>
 80184b8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80184bc:	ec4b ab1c 	vmov	d12, sl, fp
 80184c0:	eeb0 0b4c 	vmov.f64	d0, d12
 80184c4:	f7ff f9ea 	bl	801789c <__ulp>
 80184c8:	4866      	ldr	r0, [pc, #408]	@ (8018664 <_strtod_l+0xb1c>)
 80184ca:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80184ce:	ee1c 3a90 	vmov	r3, s25
 80184d2:	4a67      	ldr	r2, [pc, #412]	@ (8018670 <_strtod_l+0xb28>)
 80184d4:	ea03 0100 	and.w	r1, r3, r0
 80184d8:	4291      	cmp	r1, r2
 80184da:	ec5b ab1c 	vmov	sl, fp, d12
 80184de:	d93c      	bls.n	801855a <_strtod_l+0xa12>
 80184e0:	ee19 2a90 	vmov	r2, s19
 80184e4:	4b60      	ldr	r3, [pc, #384]	@ (8018668 <_strtod_l+0xb20>)
 80184e6:	429a      	cmp	r2, r3
 80184e8:	d104      	bne.n	80184f4 <_strtod_l+0x9ac>
 80184ea:	ee19 3a10 	vmov	r3, s18
 80184ee:	3301      	adds	r3, #1
 80184f0:	f43f ad3a 	beq.w	8017f68 <_strtod_l+0x420>
 80184f4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8018668 <_strtod_l+0xb20>
 80184f8:	f04f 3aff 	mov.w	sl, #4294967295
 80184fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80184fe:	9805      	ldr	r0, [sp, #20]
 8018500:	f7fe fe98 	bl	8017234 <_Bfree>
 8018504:	9805      	ldr	r0, [sp, #20]
 8018506:	4631      	mov	r1, r6
 8018508:	f7fe fe94 	bl	8017234 <_Bfree>
 801850c:	9805      	ldr	r0, [sp, #20]
 801850e:	4629      	mov	r1, r5
 8018510:	f7fe fe90 	bl	8017234 <_Bfree>
 8018514:	9805      	ldr	r0, [sp, #20]
 8018516:	4621      	mov	r1, r4
 8018518:	f7fe fe8c 	bl	8017234 <_Bfree>
 801851c:	e625      	b.n	801816a <_strtod_l+0x622>
 801851e:	f1ba 0f01 	cmp.w	sl, #1
 8018522:	d103      	bne.n	801852c <_strtod_l+0x9e4>
 8018524:	f1bb 0f00 	cmp.w	fp, #0
 8018528:	f43f adb2 	beq.w	8018090 <_strtod_l+0x548>
 801852c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018530:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018534:	e7b8      	b.n	80184a8 <_strtod_l+0x960>
 8018536:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801853a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801853e:	f1b8 0f00 	cmp.w	r8, #0
 8018542:	d0af      	beq.n	80184a4 <_strtod_l+0x95c>
 8018544:	eeb0 ab48 	vmov.f64	d10, d8
 8018548:	e7ae      	b.n	80184a8 <_strtod_l+0x960>
 801854a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801854e:	eeb0 8b4a 	vmov.f64	d8, d10
 8018552:	e7a9      	b.n	80184a8 <_strtod_l+0x960>
 8018554:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018558:	e7a6      	b.n	80184a8 <_strtod_l+0x960>
 801855a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801855e:	9b06      	ldr	r3, [sp, #24]
 8018560:	46d9      	mov	r9, fp
 8018562:	2b00      	cmp	r3, #0
 8018564:	d1ca      	bne.n	80184fc <_strtod_l+0x9b4>
 8018566:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801856a:	0d1b      	lsrs	r3, r3, #20
 801856c:	051b      	lsls	r3, r3, #20
 801856e:	429f      	cmp	r7, r3
 8018570:	d1c4      	bne.n	80184fc <_strtod_l+0x9b4>
 8018572:	ec51 0b18 	vmov	r0, r1, d8
 8018576:	f7e8 f8f7 	bl	8000768 <__aeabi_d2lz>
 801857a:	f7e8 f8af 	bl	80006dc <__aeabi_l2d>
 801857e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8018582:	ec41 0b17 	vmov	d7, r0, r1
 8018586:	ea49 090a 	orr.w	r9, r9, sl
 801858a:	ea59 0908 	orrs.w	r9, r9, r8
 801858e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8018592:	d03c      	beq.n	801860e <_strtod_l+0xac6>
 8018594:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8018648 <_strtod_l+0xb00>
 8018598:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801859c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185a0:	f53f aced 	bmi.w	8017f7e <_strtod_l+0x436>
 80185a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018650 <_strtod_l+0xb08>
 80185a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80185ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185b0:	dda4      	ble.n	80184fc <_strtod_l+0x9b4>
 80185b2:	e4e4      	b.n	8017f7e <_strtod_l+0x436>
 80185b4:	9906      	ldr	r1, [sp, #24]
 80185b6:	b1e1      	cbz	r1, 80185f2 <_strtod_l+0xaaa>
 80185b8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80185bc:	d819      	bhi.n	80185f2 <_strtod_l+0xaaa>
 80185be:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80185c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c6:	d811      	bhi.n	80185ec <_strtod_l+0xaa4>
 80185c8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80185cc:	ee18 3a10 	vmov	r3, s16
 80185d0:	2b01      	cmp	r3, #1
 80185d2:	bf38      	it	cc
 80185d4:	2301      	movcc	r3, #1
 80185d6:	ee08 3a10 	vmov	s16, r3
 80185da:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80185de:	f1b8 0f00 	cmp.w	r8, #0
 80185e2:	d111      	bne.n	8018608 <_strtod_l+0xac0>
 80185e4:	eeb1 7b48 	vneg.f64	d7, d8
 80185e8:	ec53 2b17 	vmov	r2, r3, d7
 80185ec:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80185f0:	1bcb      	subs	r3, r1, r7
 80185f2:	eeb0 0b49 	vmov.f64	d0, d9
 80185f6:	ec43 2b1a 	vmov	d10, r2, r3
 80185fa:	f7ff f94f 	bl	801789c <__ulp>
 80185fe:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8018602:	ec5b ab19 	vmov	sl, fp, d9
 8018606:	e7aa      	b.n	801855e <_strtod_l+0xa16>
 8018608:	eeb0 7b48 	vmov.f64	d7, d8
 801860c:	e7ec      	b.n	80185e8 <_strtod_l+0xaa0>
 801860e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8018658 <_strtod_l+0xb10>
 8018612:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801861a:	f57f af6f 	bpl.w	80184fc <_strtod_l+0x9b4>
 801861e:	e4ae      	b.n	8017f7e <_strtod_l+0x436>
 8018620:	2300      	movs	r3, #0
 8018622:	9308      	str	r3, [sp, #32]
 8018624:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018626:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018628:	6013      	str	r3, [r2, #0]
 801862a:	f7ff bacc 	b.w	8017bc6 <_strtod_l+0x7e>
 801862e:	2a65      	cmp	r2, #101	@ 0x65
 8018630:	f43f abbc 	beq.w	8017dac <_strtod_l+0x264>
 8018634:	2a45      	cmp	r2, #69	@ 0x45
 8018636:	f43f abb9 	beq.w	8017dac <_strtod_l+0x264>
 801863a:	2301      	movs	r3, #1
 801863c:	9306      	str	r3, [sp, #24]
 801863e:	f7ff bbf0 	b.w	8017e22 <_strtod_l+0x2da>
 8018642:	bf00      	nop
 8018644:	f3af 8000 	nop.w
 8018648:	94a03595 	.word	0x94a03595
 801864c:	3fdfffff 	.word	0x3fdfffff
 8018650:	35afe535 	.word	0x35afe535
 8018654:	3fe00000 	.word	0x3fe00000
 8018658:	94a03595 	.word	0x94a03595
 801865c:	3fcfffff 	.word	0x3fcfffff
 8018660:	000fffff 	.word	0x000fffff
 8018664:	7ff00000 	.word	0x7ff00000
 8018668:	7fefffff 	.word	0x7fefffff
 801866c:	7fe00000 	.word	0x7fe00000
 8018670:	7c9fffff 	.word	0x7c9fffff

08018674 <_strtod_r>:
 8018674:	4b01      	ldr	r3, [pc, #4]	@ (801867c <_strtod_r+0x8>)
 8018676:	f7ff ba67 	b.w	8017b48 <_strtod_l>
 801867a:	bf00      	nop
 801867c:	240001e4 	.word	0x240001e4

08018680 <_strtol_l.constprop.0>:
 8018680:	2b24      	cmp	r3, #36	@ 0x24
 8018682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018686:	4686      	mov	lr, r0
 8018688:	4690      	mov	r8, r2
 801868a:	d801      	bhi.n	8018690 <_strtol_l.constprop.0+0x10>
 801868c:	2b01      	cmp	r3, #1
 801868e:	d106      	bne.n	801869e <_strtol_l.constprop.0+0x1e>
 8018690:	f7fd fe6e 	bl	8016370 <__errno>
 8018694:	2316      	movs	r3, #22
 8018696:	6003      	str	r3, [r0, #0]
 8018698:	2000      	movs	r0, #0
 801869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801869e:	4834      	ldr	r0, [pc, #208]	@ (8018770 <_strtol_l.constprop.0+0xf0>)
 80186a0:	460d      	mov	r5, r1
 80186a2:	462a      	mov	r2, r5
 80186a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80186a8:	5d06      	ldrb	r6, [r0, r4]
 80186aa:	f016 0608 	ands.w	r6, r6, #8
 80186ae:	d1f8      	bne.n	80186a2 <_strtol_l.constprop.0+0x22>
 80186b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80186b2:	d12d      	bne.n	8018710 <_strtol_l.constprop.0+0x90>
 80186b4:	782c      	ldrb	r4, [r5, #0]
 80186b6:	2601      	movs	r6, #1
 80186b8:	1c95      	adds	r5, r2, #2
 80186ba:	f033 0210 	bics.w	r2, r3, #16
 80186be:	d109      	bne.n	80186d4 <_strtol_l.constprop.0+0x54>
 80186c0:	2c30      	cmp	r4, #48	@ 0x30
 80186c2:	d12a      	bne.n	801871a <_strtol_l.constprop.0+0x9a>
 80186c4:	782a      	ldrb	r2, [r5, #0]
 80186c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80186ca:	2a58      	cmp	r2, #88	@ 0x58
 80186cc:	d125      	bne.n	801871a <_strtol_l.constprop.0+0x9a>
 80186ce:	786c      	ldrb	r4, [r5, #1]
 80186d0:	2310      	movs	r3, #16
 80186d2:	3502      	adds	r5, #2
 80186d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80186d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80186dc:	2200      	movs	r2, #0
 80186de:	fbbc f9f3 	udiv	r9, ip, r3
 80186e2:	4610      	mov	r0, r2
 80186e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80186e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80186ec:	2f09      	cmp	r7, #9
 80186ee:	d81b      	bhi.n	8018728 <_strtol_l.constprop.0+0xa8>
 80186f0:	463c      	mov	r4, r7
 80186f2:	42a3      	cmp	r3, r4
 80186f4:	dd27      	ble.n	8018746 <_strtol_l.constprop.0+0xc6>
 80186f6:	1c57      	adds	r7, r2, #1
 80186f8:	d007      	beq.n	801870a <_strtol_l.constprop.0+0x8a>
 80186fa:	4581      	cmp	r9, r0
 80186fc:	d320      	bcc.n	8018740 <_strtol_l.constprop.0+0xc0>
 80186fe:	d101      	bne.n	8018704 <_strtol_l.constprop.0+0x84>
 8018700:	45a2      	cmp	sl, r4
 8018702:	db1d      	blt.n	8018740 <_strtol_l.constprop.0+0xc0>
 8018704:	fb00 4003 	mla	r0, r0, r3, r4
 8018708:	2201      	movs	r2, #1
 801870a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801870e:	e7eb      	b.n	80186e8 <_strtol_l.constprop.0+0x68>
 8018710:	2c2b      	cmp	r4, #43	@ 0x2b
 8018712:	bf04      	itt	eq
 8018714:	782c      	ldrbeq	r4, [r5, #0]
 8018716:	1c95      	addeq	r5, r2, #2
 8018718:	e7cf      	b.n	80186ba <_strtol_l.constprop.0+0x3a>
 801871a:	2b00      	cmp	r3, #0
 801871c:	d1da      	bne.n	80186d4 <_strtol_l.constprop.0+0x54>
 801871e:	2c30      	cmp	r4, #48	@ 0x30
 8018720:	bf0c      	ite	eq
 8018722:	2308      	moveq	r3, #8
 8018724:	230a      	movne	r3, #10
 8018726:	e7d5      	b.n	80186d4 <_strtol_l.constprop.0+0x54>
 8018728:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801872c:	2f19      	cmp	r7, #25
 801872e:	d801      	bhi.n	8018734 <_strtol_l.constprop.0+0xb4>
 8018730:	3c37      	subs	r4, #55	@ 0x37
 8018732:	e7de      	b.n	80186f2 <_strtol_l.constprop.0+0x72>
 8018734:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018738:	2f19      	cmp	r7, #25
 801873a:	d804      	bhi.n	8018746 <_strtol_l.constprop.0+0xc6>
 801873c:	3c57      	subs	r4, #87	@ 0x57
 801873e:	e7d8      	b.n	80186f2 <_strtol_l.constprop.0+0x72>
 8018740:	f04f 32ff 	mov.w	r2, #4294967295
 8018744:	e7e1      	b.n	801870a <_strtol_l.constprop.0+0x8a>
 8018746:	1c53      	adds	r3, r2, #1
 8018748:	d108      	bne.n	801875c <_strtol_l.constprop.0+0xdc>
 801874a:	2322      	movs	r3, #34	@ 0x22
 801874c:	f8ce 3000 	str.w	r3, [lr]
 8018750:	4660      	mov	r0, ip
 8018752:	f1b8 0f00 	cmp.w	r8, #0
 8018756:	d0a0      	beq.n	801869a <_strtol_l.constprop.0+0x1a>
 8018758:	1e69      	subs	r1, r5, #1
 801875a:	e006      	b.n	801876a <_strtol_l.constprop.0+0xea>
 801875c:	b106      	cbz	r6, 8018760 <_strtol_l.constprop.0+0xe0>
 801875e:	4240      	negs	r0, r0
 8018760:	f1b8 0f00 	cmp.w	r8, #0
 8018764:	d099      	beq.n	801869a <_strtol_l.constprop.0+0x1a>
 8018766:	2a00      	cmp	r2, #0
 8018768:	d1f6      	bne.n	8018758 <_strtol_l.constprop.0+0xd8>
 801876a:	f8c8 1000 	str.w	r1, [r8]
 801876e:	e794      	b.n	801869a <_strtol_l.constprop.0+0x1a>
 8018770:	0801a181 	.word	0x0801a181

08018774 <_strtol_r>:
 8018774:	f7ff bf84 	b.w	8018680 <_strtol_l.constprop.0>

08018778 <__ssputs_r>:
 8018778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801877c:	688e      	ldr	r6, [r1, #8]
 801877e:	461f      	mov	r7, r3
 8018780:	42be      	cmp	r6, r7
 8018782:	680b      	ldr	r3, [r1, #0]
 8018784:	4682      	mov	sl, r0
 8018786:	460c      	mov	r4, r1
 8018788:	4690      	mov	r8, r2
 801878a:	d82d      	bhi.n	80187e8 <__ssputs_r+0x70>
 801878c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018794:	d026      	beq.n	80187e4 <__ssputs_r+0x6c>
 8018796:	6965      	ldr	r5, [r4, #20]
 8018798:	6909      	ldr	r1, [r1, #16]
 801879a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801879e:	eba3 0901 	sub.w	r9, r3, r1
 80187a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80187a6:	1c7b      	adds	r3, r7, #1
 80187a8:	444b      	add	r3, r9
 80187aa:	106d      	asrs	r5, r5, #1
 80187ac:	429d      	cmp	r5, r3
 80187ae:	bf38      	it	cc
 80187b0:	461d      	movcc	r5, r3
 80187b2:	0553      	lsls	r3, r2, #21
 80187b4:	d527      	bpl.n	8018806 <__ssputs_r+0x8e>
 80187b6:	4629      	mov	r1, r5
 80187b8:	f7fe fc70 	bl	801709c <_malloc_r>
 80187bc:	4606      	mov	r6, r0
 80187be:	b360      	cbz	r0, 801881a <__ssputs_r+0xa2>
 80187c0:	6921      	ldr	r1, [r4, #16]
 80187c2:	464a      	mov	r2, r9
 80187c4:	f7fd fe01 	bl	80163ca <memcpy>
 80187c8:	89a3      	ldrh	r3, [r4, #12]
 80187ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80187ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80187d2:	81a3      	strh	r3, [r4, #12]
 80187d4:	6126      	str	r6, [r4, #16]
 80187d6:	6165      	str	r5, [r4, #20]
 80187d8:	444e      	add	r6, r9
 80187da:	eba5 0509 	sub.w	r5, r5, r9
 80187de:	6026      	str	r6, [r4, #0]
 80187e0:	60a5      	str	r5, [r4, #8]
 80187e2:	463e      	mov	r6, r7
 80187e4:	42be      	cmp	r6, r7
 80187e6:	d900      	bls.n	80187ea <__ssputs_r+0x72>
 80187e8:	463e      	mov	r6, r7
 80187ea:	6820      	ldr	r0, [r4, #0]
 80187ec:	4632      	mov	r2, r6
 80187ee:	4641      	mov	r1, r8
 80187f0:	f000 fb6a 	bl	8018ec8 <memmove>
 80187f4:	68a3      	ldr	r3, [r4, #8]
 80187f6:	1b9b      	subs	r3, r3, r6
 80187f8:	60a3      	str	r3, [r4, #8]
 80187fa:	6823      	ldr	r3, [r4, #0]
 80187fc:	4433      	add	r3, r6
 80187fe:	6023      	str	r3, [r4, #0]
 8018800:	2000      	movs	r0, #0
 8018802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018806:	462a      	mov	r2, r5
 8018808:	f000 ff43 	bl	8019692 <_realloc_r>
 801880c:	4606      	mov	r6, r0
 801880e:	2800      	cmp	r0, #0
 8018810:	d1e0      	bne.n	80187d4 <__ssputs_r+0x5c>
 8018812:	6921      	ldr	r1, [r4, #16]
 8018814:	4650      	mov	r0, sl
 8018816:	f7fe fbcd 	bl	8016fb4 <_free_r>
 801881a:	230c      	movs	r3, #12
 801881c:	f8ca 3000 	str.w	r3, [sl]
 8018820:	89a3      	ldrh	r3, [r4, #12]
 8018822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018826:	81a3      	strh	r3, [r4, #12]
 8018828:	f04f 30ff 	mov.w	r0, #4294967295
 801882c:	e7e9      	b.n	8018802 <__ssputs_r+0x8a>
	...

08018830 <_svfiprintf_r>:
 8018830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018834:	4698      	mov	r8, r3
 8018836:	898b      	ldrh	r3, [r1, #12]
 8018838:	061b      	lsls	r3, r3, #24
 801883a:	b09d      	sub	sp, #116	@ 0x74
 801883c:	4607      	mov	r7, r0
 801883e:	460d      	mov	r5, r1
 8018840:	4614      	mov	r4, r2
 8018842:	d510      	bpl.n	8018866 <_svfiprintf_r+0x36>
 8018844:	690b      	ldr	r3, [r1, #16]
 8018846:	b973      	cbnz	r3, 8018866 <_svfiprintf_r+0x36>
 8018848:	2140      	movs	r1, #64	@ 0x40
 801884a:	f7fe fc27 	bl	801709c <_malloc_r>
 801884e:	6028      	str	r0, [r5, #0]
 8018850:	6128      	str	r0, [r5, #16]
 8018852:	b930      	cbnz	r0, 8018862 <_svfiprintf_r+0x32>
 8018854:	230c      	movs	r3, #12
 8018856:	603b      	str	r3, [r7, #0]
 8018858:	f04f 30ff 	mov.w	r0, #4294967295
 801885c:	b01d      	add	sp, #116	@ 0x74
 801885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018862:	2340      	movs	r3, #64	@ 0x40
 8018864:	616b      	str	r3, [r5, #20]
 8018866:	2300      	movs	r3, #0
 8018868:	9309      	str	r3, [sp, #36]	@ 0x24
 801886a:	2320      	movs	r3, #32
 801886c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018870:	f8cd 800c 	str.w	r8, [sp, #12]
 8018874:	2330      	movs	r3, #48	@ 0x30
 8018876:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018a14 <_svfiprintf_r+0x1e4>
 801887a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801887e:	f04f 0901 	mov.w	r9, #1
 8018882:	4623      	mov	r3, r4
 8018884:	469a      	mov	sl, r3
 8018886:	f813 2b01 	ldrb.w	r2, [r3], #1
 801888a:	b10a      	cbz	r2, 8018890 <_svfiprintf_r+0x60>
 801888c:	2a25      	cmp	r2, #37	@ 0x25
 801888e:	d1f9      	bne.n	8018884 <_svfiprintf_r+0x54>
 8018890:	ebba 0b04 	subs.w	fp, sl, r4
 8018894:	d00b      	beq.n	80188ae <_svfiprintf_r+0x7e>
 8018896:	465b      	mov	r3, fp
 8018898:	4622      	mov	r2, r4
 801889a:	4629      	mov	r1, r5
 801889c:	4638      	mov	r0, r7
 801889e:	f7ff ff6b 	bl	8018778 <__ssputs_r>
 80188a2:	3001      	adds	r0, #1
 80188a4:	f000 80a7 	beq.w	80189f6 <_svfiprintf_r+0x1c6>
 80188a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80188aa:	445a      	add	r2, fp
 80188ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80188ae:	f89a 3000 	ldrb.w	r3, [sl]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	f000 809f 	beq.w	80189f6 <_svfiprintf_r+0x1c6>
 80188b8:	2300      	movs	r3, #0
 80188ba:	f04f 32ff 	mov.w	r2, #4294967295
 80188be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188c2:	f10a 0a01 	add.w	sl, sl, #1
 80188c6:	9304      	str	r3, [sp, #16]
 80188c8:	9307      	str	r3, [sp, #28]
 80188ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80188ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80188d0:	4654      	mov	r4, sl
 80188d2:	2205      	movs	r2, #5
 80188d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188d8:	484e      	ldr	r0, [pc, #312]	@ (8018a14 <_svfiprintf_r+0x1e4>)
 80188da:	f7e7 fd19 	bl	8000310 <memchr>
 80188de:	9a04      	ldr	r2, [sp, #16]
 80188e0:	b9d8      	cbnz	r0, 801891a <_svfiprintf_r+0xea>
 80188e2:	06d0      	lsls	r0, r2, #27
 80188e4:	bf44      	itt	mi
 80188e6:	2320      	movmi	r3, #32
 80188e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80188ec:	0711      	lsls	r1, r2, #28
 80188ee:	bf44      	itt	mi
 80188f0:	232b      	movmi	r3, #43	@ 0x2b
 80188f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80188f6:	f89a 3000 	ldrb.w	r3, [sl]
 80188fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80188fc:	d015      	beq.n	801892a <_svfiprintf_r+0xfa>
 80188fe:	9a07      	ldr	r2, [sp, #28]
 8018900:	4654      	mov	r4, sl
 8018902:	2000      	movs	r0, #0
 8018904:	f04f 0c0a 	mov.w	ip, #10
 8018908:	4621      	mov	r1, r4
 801890a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801890e:	3b30      	subs	r3, #48	@ 0x30
 8018910:	2b09      	cmp	r3, #9
 8018912:	d94b      	bls.n	80189ac <_svfiprintf_r+0x17c>
 8018914:	b1b0      	cbz	r0, 8018944 <_svfiprintf_r+0x114>
 8018916:	9207      	str	r2, [sp, #28]
 8018918:	e014      	b.n	8018944 <_svfiprintf_r+0x114>
 801891a:	eba0 0308 	sub.w	r3, r0, r8
 801891e:	fa09 f303 	lsl.w	r3, r9, r3
 8018922:	4313      	orrs	r3, r2
 8018924:	9304      	str	r3, [sp, #16]
 8018926:	46a2      	mov	sl, r4
 8018928:	e7d2      	b.n	80188d0 <_svfiprintf_r+0xa0>
 801892a:	9b03      	ldr	r3, [sp, #12]
 801892c:	1d19      	adds	r1, r3, #4
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	9103      	str	r1, [sp, #12]
 8018932:	2b00      	cmp	r3, #0
 8018934:	bfbb      	ittet	lt
 8018936:	425b      	neglt	r3, r3
 8018938:	f042 0202 	orrlt.w	r2, r2, #2
 801893c:	9307      	strge	r3, [sp, #28]
 801893e:	9307      	strlt	r3, [sp, #28]
 8018940:	bfb8      	it	lt
 8018942:	9204      	strlt	r2, [sp, #16]
 8018944:	7823      	ldrb	r3, [r4, #0]
 8018946:	2b2e      	cmp	r3, #46	@ 0x2e
 8018948:	d10a      	bne.n	8018960 <_svfiprintf_r+0x130>
 801894a:	7863      	ldrb	r3, [r4, #1]
 801894c:	2b2a      	cmp	r3, #42	@ 0x2a
 801894e:	d132      	bne.n	80189b6 <_svfiprintf_r+0x186>
 8018950:	9b03      	ldr	r3, [sp, #12]
 8018952:	1d1a      	adds	r2, r3, #4
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	9203      	str	r2, [sp, #12]
 8018958:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801895c:	3402      	adds	r4, #2
 801895e:	9305      	str	r3, [sp, #20]
 8018960:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018a24 <_svfiprintf_r+0x1f4>
 8018964:	7821      	ldrb	r1, [r4, #0]
 8018966:	2203      	movs	r2, #3
 8018968:	4650      	mov	r0, sl
 801896a:	f7e7 fcd1 	bl	8000310 <memchr>
 801896e:	b138      	cbz	r0, 8018980 <_svfiprintf_r+0x150>
 8018970:	9b04      	ldr	r3, [sp, #16]
 8018972:	eba0 000a 	sub.w	r0, r0, sl
 8018976:	2240      	movs	r2, #64	@ 0x40
 8018978:	4082      	lsls	r2, r0
 801897a:	4313      	orrs	r3, r2
 801897c:	3401      	adds	r4, #1
 801897e:	9304      	str	r3, [sp, #16]
 8018980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018984:	4824      	ldr	r0, [pc, #144]	@ (8018a18 <_svfiprintf_r+0x1e8>)
 8018986:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801898a:	2206      	movs	r2, #6
 801898c:	f7e7 fcc0 	bl	8000310 <memchr>
 8018990:	2800      	cmp	r0, #0
 8018992:	d036      	beq.n	8018a02 <_svfiprintf_r+0x1d2>
 8018994:	4b21      	ldr	r3, [pc, #132]	@ (8018a1c <_svfiprintf_r+0x1ec>)
 8018996:	bb1b      	cbnz	r3, 80189e0 <_svfiprintf_r+0x1b0>
 8018998:	9b03      	ldr	r3, [sp, #12]
 801899a:	3307      	adds	r3, #7
 801899c:	f023 0307 	bic.w	r3, r3, #7
 80189a0:	3308      	adds	r3, #8
 80189a2:	9303      	str	r3, [sp, #12]
 80189a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189a6:	4433      	add	r3, r6
 80189a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80189aa:	e76a      	b.n	8018882 <_svfiprintf_r+0x52>
 80189ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80189b0:	460c      	mov	r4, r1
 80189b2:	2001      	movs	r0, #1
 80189b4:	e7a8      	b.n	8018908 <_svfiprintf_r+0xd8>
 80189b6:	2300      	movs	r3, #0
 80189b8:	3401      	adds	r4, #1
 80189ba:	9305      	str	r3, [sp, #20]
 80189bc:	4619      	mov	r1, r3
 80189be:	f04f 0c0a 	mov.w	ip, #10
 80189c2:	4620      	mov	r0, r4
 80189c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189c8:	3a30      	subs	r2, #48	@ 0x30
 80189ca:	2a09      	cmp	r2, #9
 80189cc:	d903      	bls.n	80189d6 <_svfiprintf_r+0x1a6>
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d0c6      	beq.n	8018960 <_svfiprintf_r+0x130>
 80189d2:	9105      	str	r1, [sp, #20]
 80189d4:	e7c4      	b.n	8018960 <_svfiprintf_r+0x130>
 80189d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80189da:	4604      	mov	r4, r0
 80189dc:	2301      	movs	r3, #1
 80189de:	e7f0      	b.n	80189c2 <_svfiprintf_r+0x192>
 80189e0:	ab03      	add	r3, sp, #12
 80189e2:	9300      	str	r3, [sp, #0]
 80189e4:	462a      	mov	r2, r5
 80189e6:	4b0e      	ldr	r3, [pc, #56]	@ (8018a20 <_svfiprintf_r+0x1f0>)
 80189e8:	a904      	add	r1, sp, #16
 80189ea:	4638      	mov	r0, r7
 80189ec:	f7fc fc90 	bl	8015310 <_printf_float>
 80189f0:	1c42      	adds	r2, r0, #1
 80189f2:	4606      	mov	r6, r0
 80189f4:	d1d6      	bne.n	80189a4 <_svfiprintf_r+0x174>
 80189f6:	89ab      	ldrh	r3, [r5, #12]
 80189f8:	065b      	lsls	r3, r3, #25
 80189fa:	f53f af2d 	bmi.w	8018858 <_svfiprintf_r+0x28>
 80189fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018a00:	e72c      	b.n	801885c <_svfiprintf_r+0x2c>
 8018a02:	ab03      	add	r3, sp, #12
 8018a04:	9300      	str	r3, [sp, #0]
 8018a06:	462a      	mov	r2, r5
 8018a08:	4b05      	ldr	r3, [pc, #20]	@ (8018a20 <_svfiprintf_r+0x1f0>)
 8018a0a:	a904      	add	r1, sp, #16
 8018a0c:	4638      	mov	r0, r7
 8018a0e:	f7fc ff07 	bl	8015820 <_printf_i>
 8018a12:	e7ed      	b.n	80189f0 <_svfiprintf_r+0x1c0>
 8018a14:	0801a281 	.word	0x0801a281
 8018a18:	0801a28b 	.word	0x0801a28b
 8018a1c:	08015311 	.word	0x08015311
 8018a20:	08018779 	.word	0x08018779
 8018a24:	0801a287 	.word	0x0801a287

08018a28 <__sfputc_r>:
 8018a28:	6893      	ldr	r3, [r2, #8]
 8018a2a:	3b01      	subs	r3, #1
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	b410      	push	{r4}
 8018a30:	6093      	str	r3, [r2, #8]
 8018a32:	da08      	bge.n	8018a46 <__sfputc_r+0x1e>
 8018a34:	6994      	ldr	r4, [r2, #24]
 8018a36:	42a3      	cmp	r3, r4
 8018a38:	db01      	blt.n	8018a3e <__sfputc_r+0x16>
 8018a3a:	290a      	cmp	r1, #10
 8018a3c:	d103      	bne.n	8018a46 <__sfputc_r+0x1e>
 8018a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a42:	f7fd bbae 	b.w	80161a2 <__swbuf_r>
 8018a46:	6813      	ldr	r3, [r2, #0]
 8018a48:	1c58      	adds	r0, r3, #1
 8018a4a:	6010      	str	r0, [r2, #0]
 8018a4c:	7019      	strb	r1, [r3, #0]
 8018a4e:	4608      	mov	r0, r1
 8018a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a54:	4770      	bx	lr

08018a56 <__sfputs_r>:
 8018a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a58:	4606      	mov	r6, r0
 8018a5a:	460f      	mov	r7, r1
 8018a5c:	4614      	mov	r4, r2
 8018a5e:	18d5      	adds	r5, r2, r3
 8018a60:	42ac      	cmp	r4, r5
 8018a62:	d101      	bne.n	8018a68 <__sfputs_r+0x12>
 8018a64:	2000      	movs	r0, #0
 8018a66:	e007      	b.n	8018a78 <__sfputs_r+0x22>
 8018a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a6c:	463a      	mov	r2, r7
 8018a6e:	4630      	mov	r0, r6
 8018a70:	f7ff ffda 	bl	8018a28 <__sfputc_r>
 8018a74:	1c43      	adds	r3, r0, #1
 8018a76:	d1f3      	bne.n	8018a60 <__sfputs_r+0xa>
 8018a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018a7c <_vfiprintf_r>:
 8018a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a80:	460d      	mov	r5, r1
 8018a82:	b09d      	sub	sp, #116	@ 0x74
 8018a84:	4614      	mov	r4, r2
 8018a86:	4698      	mov	r8, r3
 8018a88:	4606      	mov	r6, r0
 8018a8a:	b118      	cbz	r0, 8018a94 <_vfiprintf_r+0x18>
 8018a8c:	6a03      	ldr	r3, [r0, #32]
 8018a8e:	b90b      	cbnz	r3, 8018a94 <_vfiprintf_r+0x18>
 8018a90:	f7fd fa7e 	bl	8015f90 <__sinit>
 8018a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018a96:	07d9      	lsls	r1, r3, #31
 8018a98:	d405      	bmi.n	8018aa6 <_vfiprintf_r+0x2a>
 8018a9a:	89ab      	ldrh	r3, [r5, #12]
 8018a9c:	059a      	lsls	r2, r3, #22
 8018a9e:	d402      	bmi.n	8018aa6 <_vfiprintf_r+0x2a>
 8018aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018aa2:	f7fd fc90 	bl	80163c6 <__retarget_lock_acquire_recursive>
 8018aa6:	89ab      	ldrh	r3, [r5, #12]
 8018aa8:	071b      	lsls	r3, r3, #28
 8018aaa:	d501      	bpl.n	8018ab0 <_vfiprintf_r+0x34>
 8018aac:	692b      	ldr	r3, [r5, #16]
 8018aae:	b99b      	cbnz	r3, 8018ad8 <_vfiprintf_r+0x5c>
 8018ab0:	4629      	mov	r1, r5
 8018ab2:	4630      	mov	r0, r6
 8018ab4:	f7fd fbb4 	bl	8016220 <__swsetup_r>
 8018ab8:	b170      	cbz	r0, 8018ad8 <_vfiprintf_r+0x5c>
 8018aba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018abc:	07dc      	lsls	r4, r3, #31
 8018abe:	d504      	bpl.n	8018aca <_vfiprintf_r+0x4e>
 8018ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ac4:	b01d      	add	sp, #116	@ 0x74
 8018ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aca:	89ab      	ldrh	r3, [r5, #12]
 8018acc:	0598      	lsls	r0, r3, #22
 8018ace:	d4f7      	bmi.n	8018ac0 <_vfiprintf_r+0x44>
 8018ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ad2:	f7fd fc79 	bl	80163c8 <__retarget_lock_release_recursive>
 8018ad6:	e7f3      	b.n	8018ac0 <_vfiprintf_r+0x44>
 8018ad8:	2300      	movs	r3, #0
 8018ada:	9309      	str	r3, [sp, #36]	@ 0x24
 8018adc:	2320      	movs	r3, #32
 8018ade:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ae6:	2330      	movs	r3, #48	@ 0x30
 8018ae8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018c98 <_vfiprintf_r+0x21c>
 8018aec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018af0:	f04f 0901 	mov.w	r9, #1
 8018af4:	4623      	mov	r3, r4
 8018af6:	469a      	mov	sl, r3
 8018af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018afc:	b10a      	cbz	r2, 8018b02 <_vfiprintf_r+0x86>
 8018afe:	2a25      	cmp	r2, #37	@ 0x25
 8018b00:	d1f9      	bne.n	8018af6 <_vfiprintf_r+0x7a>
 8018b02:	ebba 0b04 	subs.w	fp, sl, r4
 8018b06:	d00b      	beq.n	8018b20 <_vfiprintf_r+0xa4>
 8018b08:	465b      	mov	r3, fp
 8018b0a:	4622      	mov	r2, r4
 8018b0c:	4629      	mov	r1, r5
 8018b0e:	4630      	mov	r0, r6
 8018b10:	f7ff ffa1 	bl	8018a56 <__sfputs_r>
 8018b14:	3001      	adds	r0, #1
 8018b16:	f000 80a7 	beq.w	8018c68 <_vfiprintf_r+0x1ec>
 8018b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b1c:	445a      	add	r2, fp
 8018b1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018b20:	f89a 3000 	ldrb.w	r3, [sl]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	f000 809f 	beq.w	8018c68 <_vfiprintf_r+0x1ec>
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8018b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b34:	f10a 0a01 	add.w	sl, sl, #1
 8018b38:	9304      	str	r3, [sp, #16]
 8018b3a:	9307      	str	r3, [sp, #28]
 8018b3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018b40:	931a      	str	r3, [sp, #104]	@ 0x68
 8018b42:	4654      	mov	r4, sl
 8018b44:	2205      	movs	r2, #5
 8018b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b4a:	4853      	ldr	r0, [pc, #332]	@ (8018c98 <_vfiprintf_r+0x21c>)
 8018b4c:	f7e7 fbe0 	bl	8000310 <memchr>
 8018b50:	9a04      	ldr	r2, [sp, #16]
 8018b52:	b9d8      	cbnz	r0, 8018b8c <_vfiprintf_r+0x110>
 8018b54:	06d1      	lsls	r1, r2, #27
 8018b56:	bf44      	itt	mi
 8018b58:	2320      	movmi	r3, #32
 8018b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b5e:	0713      	lsls	r3, r2, #28
 8018b60:	bf44      	itt	mi
 8018b62:	232b      	movmi	r3, #43	@ 0x2b
 8018b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b68:	f89a 3000 	ldrb.w	r3, [sl]
 8018b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b6e:	d015      	beq.n	8018b9c <_vfiprintf_r+0x120>
 8018b70:	9a07      	ldr	r2, [sp, #28]
 8018b72:	4654      	mov	r4, sl
 8018b74:	2000      	movs	r0, #0
 8018b76:	f04f 0c0a 	mov.w	ip, #10
 8018b7a:	4621      	mov	r1, r4
 8018b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b80:	3b30      	subs	r3, #48	@ 0x30
 8018b82:	2b09      	cmp	r3, #9
 8018b84:	d94b      	bls.n	8018c1e <_vfiprintf_r+0x1a2>
 8018b86:	b1b0      	cbz	r0, 8018bb6 <_vfiprintf_r+0x13a>
 8018b88:	9207      	str	r2, [sp, #28]
 8018b8a:	e014      	b.n	8018bb6 <_vfiprintf_r+0x13a>
 8018b8c:	eba0 0308 	sub.w	r3, r0, r8
 8018b90:	fa09 f303 	lsl.w	r3, r9, r3
 8018b94:	4313      	orrs	r3, r2
 8018b96:	9304      	str	r3, [sp, #16]
 8018b98:	46a2      	mov	sl, r4
 8018b9a:	e7d2      	b.n	8018b42 <_vfiprintf_r+0xc6>
 8018b9c:	9b03      	ldr	r3, [sp, #12]
 8018b9e:	1d19      	adds	r1, r3, #4
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	9103      	str	r1, [sp, #12]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	bfbb      	ittet	lt
 8018ba8:	425b      	neglt	r3, r3
 8018baa:	f042 0202 	orrlt.w	r2, r2, #2
 8018bae:	9307      	strge	r3, [sp, #28]
 8018bb0:	9307      	strlt	r3, [sp, #28]
 8018bb2:	bfb8      	it	lt
 8018bb4:	9204      	strlt	r2, [sp, #16]
 8018bb6:	7823      	ldrb	r3, [r4, #0]
 8018bb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8018bba:	d10a      	bne.n	8018bd2 <_vfiprintf_r+0x156>
 8018bbc:	7863      	ldrb	r3, [r4, #1]
 8018bbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8018bc0:	d132      	bne.n	8018c28 <_vfiprintf_r+0x1ac>
 8018bc2:	9b03      	ldr	r3, [sp, #12]
 8018bc4:	1d1a      	adds	r2, r3, #4
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	9203      	str	r2, [sp, #12]
 8018bca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018bce:	3402      	adds	r4, #2
 8018bd0:	9305      	str	r3, [sp, #20]
 8018bd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018ca8 <_vfiprintf_r+0x22c>
 8018bd6:	7821      	ldrb	r1, [r4, #0]
 8018bd8:	2203      	movs	r2, #3
 8018bda:	4650      	mov	r0, sl
 8018bdc:	f7e7 fb98 	bl	8000310 <memchr>
 8018be0:	b138      	cbz	r0, 8018bf2 <_vfiprintf_r+0x176>
 8018be2:	9b04      	ldr	r3, [sp, #16]
 8018be4:	eba0 000a 	sub.w	r0, r0, sl
 8018be8:	2240      	movs	r2, #64	@ 0x40
 8018bea:	4082      	lsls	r2, r0
 8018bec:	4313      	orrs	r3, r2
 8018bee:	3401      	adds	r4, #1
 8018bf0:	9304      	str	r3, [sp, #16]
 8018bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bf6:	4829      	ldr	r0, [pc, #164]	@ (8018c9c <_vfiprintf_r+0x220>)
 8018bf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018bfc:	2206      	movs	r2, #6
 8018bfe:	f7e7 fb87 	bl	8000310 <memchr>
 8018c02:	2800      	cmp	r0, #0
 8018c04:	d03f      	beq.n	8018c86 <_vfiprintf_r+0x20a>
 8018c06:	4b26      	ldr	r3, [pc, #152]	@ (8018ca0 <_vfiprintf_r+0x224>)
 8018c08:	bb1b      	cbnz	r3, 8018c52 <_vfiprintf_r+0x1d6>
 8018c0a:	9b03      	ldr	r3, [sp, #12]
 8018c0c:	3307      	adds	r3, #7
 8018c0e:	f023 0307 	bic.w	r3, r3, #7
 8018c12:	3308      	adds	r3, #8
 8018c14:	9303      	str	r3, [sp, #12]
 8018c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c18:	443b      	add	r3, r7
 8018c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c1c:	e76a      	b.n	8018af4 <_vfiprintf_r+0x78>
 8018c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c22:	460c      	mov	r4, r1
 8018c24:	2001      	movs	r0, #1
 8018c26:	e7a8      	b.n	8018b7a <_vfiprintf_r+0xfe>
 8018c28:	2300      	movs	r3, #0
 8018c2a:	3401      	adds	r4, #1
 8018c2c:	9305      	str	r3, [sp, #20]
 8018c2e:	4619      	mov	r1, r3
 8018c30:	f04f 0c0a 	mov.w	ip, #10
 8018c34:	4620      	mov	r0, r4
 8018c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c3a:	3a30      	subs	r2, #48	@ 0x30
 8018c3c:	2a09      	cmp	r2, #9
 8018c3e:	d903      	bls.n	8018c48 <_vfiprintf_r+0x1cc>
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d0c6      	beq.n	8018bd2 <_vfiprintf_r+0x156>
 8018c44:	9105      	str	r1, [sp, #20]
 8018c46:	e7c4      	b.n	8018bd2 <_vfiprintf_r+0x156>
 8018c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c4c:	4604      	mov	r4, r0
 8018c4e:	2301      	movs	r3, #1
 8018c50:	e7f0      	b.n	8018c34 <_vfiprintf_r+0x1b8>
 8018c52:	ab03      	add	r3, sp, #12
 8018c54:	9300      	str	r3, [sp, #0]
 8018c56:	462a      	mov	r2, r5
 8018c58:	4b12      	ldr	r3, [pc, #72]	@ (8018ca4 <_vfiprintf_r+0x228>)
 8018c5a:	a904      	add	r1, sp, #16
 8018c5c:	4630      	mov	r0, r6
 8018c5e:	f7fc fb57 	bl	8015310 <_printf_float>
 8018c62:	4607      	mov	r7, r0
 8018c64:	1c78      	adds	r0, r7, #1
 8018c66:	d1d6      	bne.n	8018c16 <_vfiprintf_r+0x19a>
 8018c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018c6a:	07d9      	lsls	r1, r3, #31
 8018c6c:	d405      	bmi.n	8018c7a <_vfiprintf_r+0x1fe>
 8018c6e:	89ab      	ldrh	r3, [r5, #12]
 8018c70:	059a      	lsls	r2, r3, #22
 8018c72:	d402      	bmi.n	8018c7a <_vfiprintf_r+0x1fe>
 8018c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018c76:	f7fd fba7 	bl	80163c8 <__retarget_lock_release_recursive>
 8018c7a:	89ab      	ldrh	r3, [r5, #12]
 8018c7c:	065b      	lsls	r3, r3, #25
 8018c7e:	f53f af1f 	bmi.w	8018ac0 <_vfiprintf_r+0x44>
 8018c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018c84:	e71e      	b.n	8018ac4 <_vfiprintf_r+0x48>
 8018c86:	ab03      	add	r3, sp, #12
 8018c88:	9300      	str	r3, [sp, #0]
 8018c8a:	462a      	mov	r2, r5
 8018c8c:	4b05      	ldr	r3, [pc, #20]	@ (8018ca4 <_vfiprintf_r+0x228>)
 8018c8e:	a904      	add	r1, sp, #16
 8018c90:	4630      	mov	r0, r6
 8018c92:	f7fc fdc5 	bl	8015820 <_printf_i>
 8018c96:	e7e4      	b.n	8018c62 <_vfiprintf_r+0x1e6>
 8018c98:	0801a281 	.word	0x0801a281
 8018c9c:	0801a28b 	.word	0x0801a28b
 8018ca0:	08015311 	.word	0x08015311
 8018ca4:	08018a57 	.word	0x08018a57
 8018ca8:	0801a287 	.word	0x0801a287

08018cac <__sflush_r>:
 8018cac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cb4:	0716      	lsls	r6, r2, #28
 8018cb6:	4605      	mov	r5, r0
 8018cb8:	460c      	mov	r4, r1
 8018cba:	d454      	bmi.n	8018d66 <__sflush_r+0xba>
 8018cbc:	684b      	ldr	r3, [r1, #4]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	dc02      	bgt.n	8018cc8 <__sflush_r+0x1c>
 8018cc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	dd48      	ble.n	8018d5a <__sflush_r+0xae>
 8018cc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018cca:	2e00      	cmp	r6, #0
 8018ccc:	d045      	beq.n	8018d5a <__sflush_r+0xae>
 8018cce:	2300      	movs	r3, #0
 8018cd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018cd4:	682f      	ldr	r7, [r5, #0]
 8018cd6:	6a21      	ldr	r1, [r4, #32]
 8018cd8:	602b      	str	r3, [r5, #0]
 8018cda:	d030      	beq.n	8018d3e <__sflush_r+0x92>
 8018cdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018cde:	89a3      	ldrh	r3, [r4, #12]
 8018ce0:	0759      	lsls	r1, r3, #29
 8018ce2:	d505      	bpl.n	8018cf0 <__sflush_r+0x44>
 8018ce4:	6863      	ldr	r3, [r4, #4]
 8018ce6:	1ad2      	subs	r2, r2, r3
 8018ce8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018cea:	b10b      	cbz	r3, 8018cf0 <__sflush_r+0x44>
 8018cec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018cee:	1ad2      	subs	r2, r2, r3
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018cf4:	6a21      	ldr	r1, [r4, #32]
 8018cf6:	4628      	mov	r0, r5
 8018cf8:	47b0      	blx	r6
 8018cfa:	1c43      	adds	r3, r0, #1
 8018cfc:	89a3      	ldrh	r3, [r4, #12]
 8018cfe:	d106      	bne.n	8018d0e <__sflush_r+0x62>
 8018d00:	6829      	ldr	r1, [r5, #0]
 8018d02:	291d      	cmp	r1, #29
 8018d04:	d82b      	bhi.n	8018d5e <__sflush_r+0xb2>
 8018d06:	4a2a      	ldr	r2, [pc, #168]	@ (8018db0 <__sflush_r+0x104>)
 8018d08:	410a      	asrs	r2, r1
 8018d0a:	07d6      	lsls	r6, r2, #31
 8018d0c:	d427      	bmi.n	8018d5e <__sflush_r+0xb2>
 8018d0e:	2200      	movs	r2, #0
 8018d10:	6062      	str	r2, [r4, #4]
 8018d12:	04d9      	lsls	r1, r3, #19
 8018d14:	6922      	ldr	r2, [r4, #16]
 8018d16:	6022      	str	r2, [r4, #0]
 8018d18:	d504      	bpl.n	8018d24 <__sflush_r+0x78>
 8018d1a:	1c42      	adds	r2, r0, #1
 8018d1c:	d101      	bne.n	8018d22 <__sflush_r+0x76>
 8018d1e:	682b      	ldr	r3, [r5, #0]
 8018d20:	b903      	cbnz	r3, 8018d24 <__sflush_r+0x78>
 8018d22:	6560      	str	r0, [r4, #84]	@ 0x54
 8018d24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018d26:	602f      	str	r7, [r5, #0]
 8018d28:	b1b9      	cbz	r1, 8018d5a <__sflush_r+0xae>
 8018d2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018d2e:	4299      	cmp	r1, r3
 8018d30:	d002      	beq.n	8018d38 <__sflush_r+0x8c>
 8018d32:	4628      	mov	r0, r5
 8018d34:	f7fe f93e 	bl	8016fb4 <_free_r>
 8018d38:	2300      	movs	r3, #0
 8018d3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8018d3c:	e00d      	b.n	8018d5a <__sflush_r+0xae>
 8018d3e:	2301      	movs	r3, #1
 8018d40:	4628      	mov	r0, r5
 8018d42:	47b0      	blx	r6
 8018d44:	4602      	mov	r2, r0
 8018d46:	1c50      	adds	r0, r2, #1
 8018d48:	d1c9      	bne.n	8018cde <__sflush_r+0x32>
 8018d4a:	682b      	ldr	r3, [r5, #0]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d0c6      	beq.n	8018cde <__sflush_r+0x32>
 8018d50:	2b1d      	cmp	r3, #29
 8018d52:	d001      	beq.n	8018d58 <__sflush_r+0xac>
 8018d54:	2b16      	cmp	r3, #22
 8018d56:	d11e      	bne.n	8018d96 <__sflush_r+0xea>
 8018d58:	602f      	str	r7, [r5, #0]
 8018d5a:	2000      	movs	r0, #0
 8018d5c:	e022      	b.n	8018da4 <__sflush_r+0xf8>
 8018d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d62:	b21b      	sxth	r3, r3
 8018d64:	e01b      	b.n	8018d9e <__sflush_r+0xf2>
 8018d66:	690f      	ldr	r7, [r1, #16]
 8018d68:	2f00      	cmp	r7, #0
 8018d6a:	d0f6      	beq.n	8018d5a <__sflush_r+0xae>
 8018d6c:	0793      	lsls	r3, r2, #30
 8018d6e:	680e      	ldr	r6, [r1, #0]
 8018d70:	bf08      	it	eq
 8018d72:	694b      	ldreq	r3, [r1, #20]
 8018d74:	600f      	str	r7, [r1, #0]
 8018d76:	bf18      	it	ne
 8018d78:	2300      	movne	r3, #0
 8018d7a:	eba6 0807 	sub.w	r8, r6, r7
 8018d7e:	608b      	str	r3, [r1, #8]
 8018d80:	f1b8 0f00 	cmp.w	r8, #0
 8018d84:	dde9      	ble.n	8018d5a <__sflush_r+0xae>
 8018d86:	6a21      	ldr	r1, [r4, #32]
 8018d88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018d8a:	4643      	mov	r3, r8
 8018d8c:	463a      	mov	r2, r7
 8018d8e:	4628      	mov	r0, r5
 8018d90:	47b0      	blx	r6
 8018d92:	2800      	cmp	r0, #0
 8018d94:	dc08      	bgt.n	8018da8 <__sflush_r+0xfc>
 8018d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d9e:	81a3      	strh	r3, [r4, #12]
 8018da0:	f04f 30ff 	mov.w	r0, #4294967295
 8018da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018da8:	4407      	add	r7, r0
 8018daa:	eba8 0800 	sub.w	r8, r8, r0
 8018dae:	e7e7      	b.n	8018d80 <__sflush_r+0xd4>
 8018db0:	dfbffffe 	.word	0xdfbffffe

08018db4 <_fflush_r>:
 8018db4:	b538      	push	{r3, r4, r5, lr}
 8018db6:	690b      	ldr	r3, [r1, #16]
 8018db8:	4605      	mov	r5, r0
 8018dba:	460c      	mov	r4, r1
 8018dbc:	b913      	cbnz	r3, 8018dc4 <_fflush_r+0x10>
 8018dbe:	2500      	movs	r5, #0
 8018dc0:	4628      	mov	r0, r5
 8018dc2:	bd38      	pop	{r3, r4, r5, pc}
 8018dc4:	b118      	cbz	r0, 8018dce <_fflush_r+0x1a>
 8018dc6:	6a03      	ldr	r3, [r0, #32]
 8018dc8:	b90b      	cbnz	r3, 8018dce <_fflush_r+0x1a>
 8018dca:	f7fd f8e1 	bl	8015f90 <__sinit>
 8018dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d0f3      	beq.n	8018dbe <_fflush_r+0xa>
 8018dd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018dd8:	07d0      	lsls	r0, r2, #31
 8018dda:	d404      	bmi.n	8018de6 <_fflush_r+0x32>
 8018ddc:	0599      	lsls	r1, r3, #22
 8018dde:	d402      	bmi.n	8018de6 <_fflush_r+0x32>
 8018de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018de2:	f7fd faf0 	bl	80163c6 <__retarget_lock_acquire_recursive>
 8018de6:	4628      	mov	r0, r5
 8018de8:	4621      	mov	r1, r4
 8018dea:	f7ff ff5f 	bl	8018cac <__sflush_r>
 8018dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018df0:	07da      	lsls	r2, r3, #31
 8018df2:	4605      	mov	r5, r0
 8018df4:	d4e4      	bmi.n	8018dc0 <_fflush_r+0xc>
 8018df6:	89a3      	ldrh	r3, [r4, #12]
 8018df8:	059b      	lsls	r3, r3, #22
 8018dfa:	d4e1      	bmi.n	8018dc0 <_fflush_r+0xc>
 8018dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018dfe:	f7fd fae3 	bl	80163c8 <__retarget_lock_release_recursive>
 8018e02:	e7dd      	b.n	8018dc0 <_fflush_r+0xc>

08018e04 <__swhatbuf_r>:
 8018e04:	b570      	push	{r4, r5, r6, lr}
 8018e06:	460c      	mov	r4, r1
 8018e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e0c:	2900      	cmp	r1, #0
 8018e0e:	b096      	sub	sp, #88	@ 0x58
 8018e10:	4615      	mov	r5, r2
 8018e12:	461e      	mov	r6, r3
 8018e14:	da0d      	bge.n	8018e32 <__swhatbuf_r+0x2e>
 8018e16:	89a3      	ldrh	r3, [r4, #12]
 8018e18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018e1c:	f04f 0100 	mov.w	r1, #0
 8018e20:	bf14      	ite	ne
 8018e22:	2340      	movne	r3, #64	@ 0x40
 8018e24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018e28:	2000      	movs	r0, #0
 8018e2a:	6031      	str	r1, [r6, #0]
 8018e2c:	602b      	str	r3, [r5, #0]
 8018e2e:	b016      	add	sp, #88	@ 0x58
 8018e30:	bd70      	pop	{r4, r5, r6, pc}
 8018e32:	466a      	mov	r2, sp
 8018e34:	f000 f874 	bl	8018f20 <_fstat_r>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	dbec      	blt.n	8018e16 <__swhatbuf_r+0x12>
 8018e3c:	9901      	ldr	r1, [sp, #4]
 8018e3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018e42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018e46:	4259      	negs	r1, r3
 8018e48:	4159      	adcs	r1, r3
 8018e4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018e4e:	e7eb      	b.n	8018e28 <__swhatbuf_r+0x24>

08018e50 <__smakebuf_r>:
 8018e50:	898b      	ldrh	r3, [r1, #12]
 8018e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018e54:	079d      	lsls	r5, r3, #30
 8018e56:	4606      	mov	r6, r0
 8018e58:	460c      	mov	r4, r1
 8018e5a:	d507      	bpl.n	8018e6c <__smakebuf_r+0x1c>
 8018e5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018e60:	6023      	str	r3, [r4, #0]
 8018e62:	6123      	str	r3, [r4, #16]
 8018e64:	2301      	movs	r3, #1
 8018e66:	6163      	str	r3, [r4, #20]
 8018e68:	b003      	add	sp, #12
 8018e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e6c:	ab01      	add	r3, sp, #4
 8018e6e:	466a      	mov	r2, sp
 8018e70:	f7ff ffc8 	bl	8018e04 <__swhatbuf_r>
 8018e74:	9f00      	ldr	r7, [sp, #0]
 8018e76:	4605      	mov	r5, r0
 8018e78:	4639      	mov	r1, r7
 8018e7a:	4630      	mov	r0, r6
 8018e7c:	f7fe f90e 	bl	801709c <_malloc_r>
 8018e80:	b948      	cbnz	r0, 8018e96 <__smakebuf_r+0x46>
 8018e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e86:	059a      	lsls	r2, r3, #22
 8018e88:	d4ee      	bmi.n	8018e68 <__smakebuf_r+0x18>
 8018e8a:	f023 0303 	bic.w	r3, r3, #3
 8018e8e:	f043 0302 	orr.w	r3, r3, #2
 8018e92:	81a3      	strh	r3, [r4, #12]
 8018e94:	e7e2      	b.n	8018e5c <__smakebuf_r+0xc>
 8018e96:	89a3      	ldrh	r3, [r4, #12]
 8018e98:	6020      	str	r0, [r4, #0]
 8018e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018e9e:	81a3      	strh	r3, [r4, #12]
 8018ea0:	9b01      	ldr	r3, [sp, #4]
 8018ea2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018ea6:	b15b      	cbz	r3, 8018ec0 <__smakebuf_r+0x70>
 8018ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018eac:	4630      	mov	r0, r6
 8018eae:	f000 f849 	bl	8018f44 <_isatty_r>
 8018eb2:	b128      	cbz	r0, 8018ec0 <__smakebuf_r+0x70>
 8018eb4:	89a3      	ldrh	r3, [r4, #12]
 8018eb6:	f023 0303 	bic.w	r3, r3, #3
 8018eba:	f043 0301 	orr.w	r3, r3, #1
 8018ebe:	81a3      	strh	r3, [r4, #12]
 8018ec0:	89a3      	ldrh	r3, [r4, #12]
 8018ec2:	431d      	orrs	r5, r3
 8018ec4:	81a5      	strh	r5, [r4, #12]
 8018ec6:	e7cf      	b.n	8018e68 <__smakebuf_r+0x18>

08018ec8 <memmove>:
 8018ec8:	4288      	cmp	r0, r1
 8018eca:	b510      	push	{r4, lr}
 8018ecc:	eb01 0402 	add.w	r4, r1, r2
 8018ed0:	d902      	bls.n	8018ed8 <memmove+0x10>
 8018ed2:	4284      	cmp	r4, r0
 8018ed4:	4623      	mov	r3, r4
 8018ed6:	d807      	bhi.n	8018ee8 <memmove+0x20>
 8018ed8:	1e43      	subs	r3, r0, #1
 8018eda:	42a1      	cmp	r1, r4
 8018edc:	d008      	beq.n	8018ef0 <memmove+0x28>
 8018ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018ee6:	e7f8      	b.n	8018eda <memmove+0x12>
 8018ee8:	4402      	add	r2, r0
 8018eea:	4601      	mov	r1, r0
 8018eec:	428a      	cmp	r2, r1
 8018eee:	d100      	bne.n	8018ef2 <memmove+0x2a>
 8018ef0:	bd10      	pop	{r4, pc}
 8018ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018efa:	e7f7      	b.n	8018eec <memmove+0x24>

08018efc <strncmp>:
 8018efc:	b510      	push	{r4, lr}
 8018efe:	b16a      	cbz	r2, 8018f1c <strncmp+0x20>
 8018f00:	3901      	subs	r1, #1
 8018f02:	1884      	adds	r4, r0, r2
 8018f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018f0c:	429a      	cmp	r2, r3
 8018f0e:	d103      	bne.n	8018f18 <strncmp+0x1c>
 8018f10:	42a0      	cmp	r0, r4
 8018f12:	d001      	beq.n	8018f18 <strncmp+0x1c>
 8018f14:	2a00      	cmp	r2, #0
 8018f16:	d1f5      	bne.n	8018f04 <strncmp+0x8>
 8018f18:	1ad0      	subs	r0, r2, r3
 8018f1a:	bd10      	pop	{r4, pc}
 8018f1c:	4610      	mov	r0, r2
 8018f1e:	e7fc      	b.n	8018f1a <strncmp+0x1e>

08018f20 <_fstat_r>:
 8018f20:	b538      	push	{r3, r4, r5, lr}
 8018f22:	4d07      	ldr	r5, [pc, #28]	@ (8018f40 <_fstat_r+0x20>)
 8018f24:	2300      	movs	r3, #0
 8018f26:	4604      	mov	r4, r0
 8018f28:	4608      	mov	r0, r1
 8018f2a:	4611      	mov	r1, r2
 8018f2c:	602b      	str	r3, [r5, #0]
 8018f2e:	f7f1 fb4a 	bl	800a5c6 <_fstat>
 8018f32:	1c43      	adds	r3, r0, #1
 8018f34:	d102      	bne.n	8018f3c <_fstat_r+0x1c>
 8018f36:	682b      	ldr	r3, [r5, #0]
 8018f38:	b103      	cbz	r3, 8018f3c <_fstat_r+0x1c>
 8018f3a:	6023      	str	r3, [r4, #0]
 8018f3c:	bd38      	pop	{r3, r4, r5, pc}
 8018f3e:	bf00      	nop
 8018f40:	24001acc 	.word	0x24001acc

08018f44 <_isatty_r>:
 8018f44:	b538      	push	{r3, r4, r5, lr}
 8018f46:	4d06      	ldr	r5, [pc, #24]	@ (8018f60 <_isatty_r+0x1c>)
 8018f48:	2300      	movs	r3, #0
 8018f4a:	4604      	mov	r4, r0
 8018f4c:	4608      	mov	r0, r1
 8018f4e:	602b      	str	r3, [r5, #0]
 8018f50:	f7f1 fb49 	bl	800a5e6 <_isatty>
 8018f54:	1c43      	adds	r3, r0, #1
 8018f56:	d102      	bne.n	8018f5e <_isatty_r+0x1a>
 8018f58:	682b      	ldr	r3, [r5, #0]
 8018f5a:	b103      	cbz	r3, 8018f5e <_isatty_r+0x1a>
 8018f5c:	6023      	str	r3, [r4, #0]
 8018f5e:	bd38      	pop	{r3, r4, r5, pc}
 8018f60:	24001acc 	.word	0x24001acc

08018f64 <_sbrk_r>:
 8018f64:	b538      	push	{r3, r4, r5, lr}
 8018f66:	4d06      	ldr	r5, [pc, #24]	@ (8018f80 <_sbrk_r+0x1c>)
 8018f68:	2300      	movs	r3, #0
 8018f6a:	4604      	mov	r4, r0
 8018f6c:	4608      	mov	r0, r1
 8018f6e:	602b      	str	r3, [r5, #0]
 8018f70:	f7f1 fb52 	bl	800a618 <_sbrk>
 8018f74:	1c43      	adds	r3, r0, #1
 8018f76:	d102      	bne.n	8018f7e <_sbrk_r+0x1a>
 8018f78:	682b      	ldr	r3, [r5, #0]
 8018f7a:	b103      	cbz	r3, 8018f7e <_sbrk_r+0x1a>
 8018f7c:	6023      	str	r3, [r4, #0]
 8018f7e:	bd38      	pop	{r3, r4, r5, pc}
 8018f80:	24001acc 	.word	0x24001acc
 8018f84:	00000000 	.word	0x00000000

08018f88 <nan>:
 8018f88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018f90 <nan+0x8>
 8018f8c:	4770      	bx	lr
 8018f8e:	bf00      	nop
 8018f90:	00000000 	.word	0x00000000
 8018f94:	7ff80000 	.word	0x7ff80000

08018f98 <__assert_func>:
 8018f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018f9a:	4614      	mov	r4, r2
 8018f9c:	461a      	mov	r2, r3
 8018f9e:	4b09      	ldr	r3, [pc, #36]	@ (8018fc4 <__assert_func+0x2c>)
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	4605      	mov	r5, r0
 8018fa4:	68d8      	ldr	r0, [r3, #12]
 8018fa6:	b954      	cbnz	r4, 8018fbe <__assert_func+0x26>
 8018fa8:	4b07      	ldr	r3, [pc, #28]	@ (8018fc8 <__assert_func+0x30>)
 8018faa:	461c      	mov	r4, r3
 8018fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018fb0:	9100      	str	r1, [sp, #0]
 8018fb2:	462b      	mov	r3, r5
 8018fb4:	4905      	ldr	r1, [pc, #20]	@ (8018fcc <__assert_func+0x34>)
 8018fb6:	f000 fba7 	bl	8019708 <fiprintf>
 8018fba:	f000 fbb7 	bl	801972c <abort>
 8018fbe:	4b04      	ldr	r3, [pc, #16]	@ (8018fd0 <__assert_func+0x38>)
 8018fc0:	e7f4      	b.n	8018fac <__assert_func+0x14>
 8018fc2:	bf00      	nop
 8018fc4:	24000194 	.word	0x24000194
 8018fc8:	0801a2d5 	.word	0x0801a2d5
 8018fcc:	0801a2a7 	.word	0x0801a2a7
 8018fd0:	0801a29a 	.word	0x0801a29a

08018fd4 <_calloc_r>:
 8018fd4:	b570      	push	{r4, r5, r6, lr}
 8018fd6:	fba1 5402 	umull	r5, r4, r1, r2
 8018fda:	b93c      	cbnz	r4, 8018fec <_calloc_r+0x18>
 8018fdc:	4629      	mov	r1, r5
 8018fde:	f7fe f85d 	bl	801709c <_malloc_r>
 8018fe2:	4606      	mov	r6, r0
 8018fe4:	b928      	cbnz	r0, 8018ff2 <_calloc_r+0x1e>
 8018fe6:	2600      	movs	r6, #0
 8018fe8:	4630      	mov	r0, r6
 8018fea:	bd70      	pop	{r4, r5, r6, pc}
 8018fec:	220c      	movs	r2, #12
 8018fee:	6002      	str	r2, [r0, #0]
 8018ff0:	e7f9      	b.n	8018fe6 <_calloc_r+0x12>
 8018ff2:	462a      	mov	r2, r5
 8018ff4:	4621      	mov	r1, r4
 8018ff6:	f7fd f969 	bl	80162cc <memset>
 8018ffa:	e7f5      	b.n	8018fe8 <_calloc_r+0x14>

08018ffc <rshift>:
 8018ffc:	6903      	ldr	r3, [r0, #16]
 8018ffe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019002:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019006:	ea4f 1261 	mov.w	r2, r1, asr #5
 801900a:	f100 0414 	add.w	r4, r0, #20
 801900e:	dd45      	ble.n	801909c <rshift+0xa0>
 8019010:	f011 011f 	ands.w	r1, r1, #31
 8019014:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019018:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801901c:	d10c      	bne.n	8019038 <rshift+0x3c>
 801901e:	f100 0710 	add.w	r7, r0, #16
 8019022:	4629      	mov	r1, r5
 8019024:	42b1      	cmp	r1, r6
 8019026:	d334      	bcc.n	8019092 <rshift+0x96>
 8019028:	1a9b      	subs	r3, r3, r2
 801902a:	009b      	lsls	r3, r3, #2
 801902c:	1eea      	subs	r2, r5, #3
 801902e:	4296      	cmp	r6, r2
 8019030:	bf38      	it	cc
 8019032:	2300      	movcc	r3, #0
 8019034:	4423      	add	r3, r4
 8019036:	e015      	b.n	8019064 <rshift+0x68>
 8019038:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801903c:	f1c1 0820 	rsb	r8, r1, #32
 8019040:	40cf      	lsrs	r7, r1
 8019042:	f105 0e04 	add.w	lr, r5, #4
 8019046:	46a1      	mov	r9, r4
 8019048:	4576      	cmp	r6, lr
 801904a:	46f4      	mov	ip, lr
 801904c:	d815      	bhi.n	801907a <rshift+0x7e>
 801904e:	1a9a      	subs	r2, r3, r2
 8019050:	0092      	lsls	r2, r2, #2
 8019052:	3a04      	subs	r2, #4
 8019054:	3501      	adds	r5, #1
 8019056:	42ae      	cmp	r6, r5
 8019058:	bf38      	it	cc
 801905a:	2200      	movcc	r2, #0
 801905c:	18a3      	adds	r3, r4, r2
 801905e:	50a7      	str	r7, [r4, r2]
 8019060:	b107      	cbz	r7, 8019064 <rshift+0x68>
 8019062:	3304      	adds	r3, #4
 8019064:	1b1a      	subs	r2, r3, r4
 8019066:	42a3      	cmp	r3, r4
 8019068:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801906c:	bf08      	it	eq
 801906e:	2300      	moveq	r3, #0
 8019070:	6102      	str	r2, [r0, #16]
 8019072:	bf08      	it	eq
 8019074:	6143      	streq	r3, [r0, #20]
 8019076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801907a:	f8dc c000 	ldr.w	ip, [ip]
 801907e:	fa0c fc08 	lsl.w	ip, ip, r8
 8019082:	ea4c 0707 	orr.w	r7, ip, r7
 8019086:	f849 7b04 	str.w	r7, [r9], #4
 801908a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801908e:	40cf      	lsrs	r7, r1
 8019090:	e7da      	b.n	8019048 <rshift+0x4c>
 8019092:	f851 cb04 	ldr.w	ip, [r1], #4
 8019096:	f847 cf04 	str.w	ip, [r7, #4]!
 801909a:	e7c3      	b.n	8019024 <rshift+0x28>
 801909c:	4623      	mov	r3, r4
 801909e:	e7e1      	b.n	8019064 <rshift+0x68>

080190a0 <__hexdig_fun>:
 80190a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80190a4:	2b09      	cmp	r3, #9
 80190a6:	d802      	bhi.n	80190ae <__hexdig_fun+0xe>
 80190a8:	3820      	subs	r0, #32
 80190aa:	b2c0      	uxtb	r0, r0
 80190ac:	4770      	bx	lr
 80190ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80190b2:	2b05      	cmp	r3, #5
 80190b4:	d801      	bhi.n	80190ba <__hexdig_fun+0x1a>
 80190b6:	3847      	subs	r0, #71	@ 0x47
 80190b8:	e7f7      	b.n	80190aa <__hexdig_fun+0xa>
 80190ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80190be:	2b05      	cmp	r3, #5
 80190c0:	d801      	bhi.n	80190c6 <__hexdig_fun+0x26>
 80190c2:	3827      	subs	r0, #39	@ 0x27
 80190c4:	e7f1      	b.n	80190aa <__hexdig_fun+0xa>
 80190c6:	2000      	movs	r0, #0
 80190c8:	4770      	bx	lr
	...

080190cc <__gethex>:
 80190cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190d0:	b085      	sub	sp, #20
 80190d2:	468a      	mov	sl, r1
 80190d4:	9302      	str	r3, [sp, #8]
 80190d6:	680b      	ldr	r3, [r1, #0]
 80190d8:	9001      	str	r0, [sp, #4]
 80190da:	4690      	mov	r8, r2
 80190dc:	1c9c      	adds	r4, r3, #2
 80190de:	46a1      	mov	r9, r4
 80190e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80190e4:	2830      	cmp	r0, #48	@ 0x30
 80190e6:	d0fa      	beq.n	80190de <__gethex+0x12>
 80190e8:	eba9 0303 	sub.w	r3, r9, r3
 80190ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80190f0:	f7ff ffd6 	bl	80190a0 <__hexdig_fun>
 80190f4:	4605      	mov	r5, r0
 80190f6:	2800      	cmp	r0, #0
 80190f8:	d168      	bne.n	80191cc <__gethex+0x100>
 80190fa:	49a0      	ldr	r1, [pc, #640]	@ (801937c <__gethex+0x2b0>)
 80190fc:	2201      	movs	r2, #1
 80190fe:	4648      	mov	r0, r9
 8019100:	f7ff fefc 	bl	8018efc <strncmp>
 8019104:	4607      	mov	r7, r0
 8019106:	2800      	cmp	r0, #0
 8019108:	d167      	bne.n	80191da <__gethex+0x10e>
 801910a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801910e:	4626      	mov	r6, r4
 8019110:	f7ff ffc6 	bl	80190a0 <__hexdig_fun>
 8019114:	2800      	cmp	r0, #0
 8019116:	d062      	beq.n	80191de <__gethex+0x112>
 8019118:	4623      	mov	r3, r4
 801911a:	7818      	ldrb	r0, [r3, #0]
 801911c:	2830      	cmp	r0, #48	@ 0x30
 801911e:	4699      	mov	r9, r3
 8019120:	f103 0301 	add.w	r3, r3, #1
 8019124:	d0f9      	beq.n	801911a <__gethex+0x4e>
 8019126:	f7ff ffbb 	bl	80190a0 <__hexdig_fun>
 801912a:	fab0 f580 	clz	r5, r0
 801912e:	096d      	lsrs	r5, r5, #5
 8019130:	f04f 0b01 	mov.w	fp, #1
 8019134:	464a      	mov	r2, r9
 8019136:	4616      	mov	r6, r2
 8019138:	3201      	adds	r2, #1
 801913a:	7830      	ldrb	r0, [r6, #0]
 801913c:	f7ff ffb0 	bl	80190a0 <__hexdig_fun>
 8019140:	2800      	cmp	r0, #0
 8019142:	d1f8      	bne.n	8019136 <__gethex+0x6a>
 8019144:	498d      	ldr	r1, [pc, #564]	@ (801937c <__gethex+0x2b0>)
 8019146:	2201      	movs	r2, #1
 8019148:	4630      	mov	r0, r6
 801914a:	f7ff fed7 	bl	8018efc <strncmp>
 801914e:	2800      	cmp	r0, #0
 8019150:	d13f      	bne.n	80191d2 <__gethex+0x106>
 8019152:	b944      	cbnz	r4, 8019166 <__gethex+0x9a>
 8019154:	1c74      	adds	r4, r6, #1
 8019156:	4622      	mov	r2, r4
 8019158:	4616      	mov	r6, r2
 801915a:	3201      	adds	r2, #1
 801915c:	7830      	ldrb	r0, [r6, #0]
 801915e:	f7ff ff9f 	bl	80190a0 <__hexdig_fun>
 8019162:	2800      	cmp	r0, #0
 8019164:	d1f8      	bne.n	8019158 <__gethex+0x8c>
 8019166:	1ba4      	subs	r4, r4, r6
 8019168:	00a7      	lsls	r7, r4, #2
 801916a:	7833      	ldrb	r3, [r6, #0]
 801916c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8019170:	2b50      	cmp	r3, #80	@ 0x50
 8019172:	d13e      	bne.n	80191f2 <__gethex+0x126>
 8019174:	7873      	ldrb	r3, [r6, #1]
 8019176:	2b2b      	cmp	r3, #43	@ 0x2b
 8019178:	d033      	beq.n	80191e2 <__gethex+0x116>
 801917a:	2b2d      	cmp	r3, #45	@ 0x2d
 801917c:	d034      	beq.n	80191e8 <__gethex+0x11c>
 801917e:	1c71      	adds	r1, r6, #1
 8019180:	2400      	movs	r4, #0
 8019182:	7808      	ldrb	r0, [r1, #0]
 8019184:	f7ff ff8c 	bl	80190a0 <__hexdig_fun>
 8019188:	1e43      	subs	r3, r0, #1
 801918a:	b2db      	uxtb	r3, r3
 801918c:	2b18      	cmp	r3, #24
 801918e:	d830      	bhi.n	80191f2 <__gethex+0x126>
 8019190:	f1a0 0210 	sub.w	r2, r0, #16
 8019194:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019198:	f7ff ff82 	bl	80190a0 <__hexdig_fun>
 801919c:	f100 3cff 	add.w	ip, r0, #4294967295
 80191a0:	fa5f fc8c 	uxtb.w	ip, ip
 80191a4:	f1bc 0f18 	cmp.w	ip, #24
 80191a8:	f04f 030a 	mov.w	r3, #10
 80191ac:	d91e      	bls.n	80191ec <__gethex+0x120>
 80191ae:	b104      	cbz	r4, 80191b2 <__gethex+0xe6>
 80191b0:	4252      	negs	r2, r2
 80191b2:	4417      	add	r7, r2
 80191b4:	f8ca 1000 	str.w	r1, [sl]
 80191b8:	b1ed      	cbz	r5, 80191f6 <__gethex+0x12a>
 80191ba:	f1bb 0f00 	cmp.w	fp, #0
 80191be:	bf0c      	ite	eq
 80191c0:	2506      	moveq	r5, #6
 80191c2:	2500      	movne	r5, #0
 80191c4:	4628      	mov	r0, r5
 80191c6:	b005      	add	sp, #20
 80191c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191cc:	2500      	movs	r5, #0
 80191ce:	462c      	mov	r4, r5
 80191d0:	e7b0      	b.n	8019134 <__gethex+0x68>
 80191d2:	2c00      	cmp	r4, #0
 80191d4:	d1c7      	bne.n	8019166 <__gethex+0x9a>
 80191d6:	4627      	mov	r7, r4
 80191d8:	e7c7      	b.n	801916a <__gethex+0x9e>
 80191da:	464e      	mov	r6, r9
 80191dc:	462f      	mov	r7, r5
 80191de:	2501      	movs	r5, #1
 80191e0:	e7c3      	b.n	801916a <__gethex+0x9e>
 80191e2:	2400      	movs	r4, #0
 80191e4:	1cb1      	adds	r1, r6, #2
 80191e6:	e7cc      	b.n	8019182 <__gethex+0xb6>
 80191e8:	2401      	movs	r4, #1
 80191ea:	e7fb      	b.n	80191e4 <__gethex+0x118>
 80191ec:	fb03 0002 	mla	r0, r3, r2, r0
 80191f0:	e7ce      	b.n	8019190 <__gethex+0xc4>
 80191f2:	4631      	mov	r1, r6
 80191f4:	e7de      	b.n	80191b4 <__gethex+0xe8>
 80191f6:	eba6 0309 	sub.w	r3, r6, r9
 80191fa:	3b01      	subs	r3, #1
 80191fc:	4629      	mov	r1, r5
 80191fe:	2b07      	cmp	r3, #7
 8019200:	dc0a      	bgt.n	8019218 <__gethex+0x14c>
 8019202:	9801      	ldr	r0, [sp, #4]
 8019204:	f7fd ffd6 	bl	80171b4 <_Balloc>
 8019208:	4604      	mov	r4, r0
 801920a:	b940      	cbnz	r0, 801921e <__gethex+0x152>
 801920c:	4b5c      	ldr	r3, [pc, #368]	@ (8019380 <__gethex+0x2b4>)
 801920e:	4602      	mov	r2, r0
 8019210:	21e4      	movs	r1, #228	@ 0xe4
 8019212:	485c      	ldr	r0, [pc, #368]	@ (8019384 <__gethex+0x2b8>)
 8019214:	f7ff fec0 	bl	8018f98 <__assert_func>
 8019218:	3101      	adds	r1, #1
 801921a:	105b      	asrs	r3, r3, #1
 801921c:	e7ef      	b.n	80191fe <__gethex+0x132>
 801921e:	f100 0a14 	add.w	sl, r0, #20
 8019222:	2300      	movs	r3, #0
 8019224:	4655      	mov	r5, sl
 8019226:	469b      	mov	fp, r3
 8019228:	45b1      	cmp	r9, r6
 801922a:	d337      	bcc.n	801929c <__gethex+0x1d0>
 801922c:	f845 bb04 	str.w	fp, [r5], #4
 8019230:	eba5 050a 	sub.w	r5, r5, sl
 8019234:	10ad      	asrs	r5, r5, #2
 8019236:	6125      	str	r5, [r4, #16]
 8019238:	4658      	mov	r0, fp
 801923a:	f7fe f8ad 	bl	8017398 <__hi0bits>
 801923e:	016d      	lsls	r5, r5, #5
 8019240:	f8d8 6000 	ldr.w	r6, [r8]
 8019244:	1a2d      	subs	r5, r5, r0
 8019246:	42b5      	cmp	r5, r6
 8019248:	dd54      	ble.n	80192f4 <__gethex+0x228>
 801924a:	1bad      	subs	r5, r5, r6
 801924c:	4629      	mov	r1, r5
 801924e:	4620      	mov	r0, r4
 8019250:	f7fe fc3e 	bl	8017ad0 <__any_on>
 8019254:	4681      	mov	r9, r0
 8019256:	b178      	cbz	r0, 8019278 <__gethex+0x1ac>
 8019258:	1e6b      	subs	r3, r5, #1
 801925a:	1159      	asrs	r1, r3, #5
 801925c:	f003 021f 	and.w	r2, r3, #31
 8019260:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019264:	f04f 0901 	mov.w	r9, #1
 8019268:	fa09 f202 	lsl.w	r2, r9, r2
 801926c:	420a      	tst	r2, r1
 801926e:	d003      	beq.n	8019278 <__gethex+0x1ac>
 8019270:	454b      	cmp	r3, r9
 8019272:	dc36      	bgt.n	80192e2 <__gethex+0x216>
 8019274:	f04f 0902 	mov.w	r9, #2
 8019278:	4629      	mov	r1, r5
 801927a:	4620      	mov	r0, r4
 801927c:	f7ff febe 	bl	8018ffc <rshift>
 8019280:	442f      	add	r7, r5
 8019282:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019286:	42bb      	cmp	r3, r7
 8019288:	da42      	bge.n	8019310 <__gethex+0x244>
 801928a:	9801      	ldr	r0, [sp, #4]
 801928c:	4621      	mov	r1, r4
 801928e:	f7fd ffd1 	bl	8017234 <_Bfree>
 8019292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019294:	2300      	movs	r3, #0
 8019296:	6013      	str	r3, [r2, #0]
 8019298:	25a3      	movs	r5, #163	@ 0xa3
 801929a:	e793      	b.n	80191c4 <__gethex+0xf8>
 801929c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80192a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80192a2:	d012      	beq.n	80192ca <__gethex+0x1fe>
 80192a4:	2b20      	cmp	r3, #32
 80192a6:	d104      	bne.n	80192b2 <__gethex+0x1e6>
 80192a8:	f845 bb04 	str.w	fp, [r5], #4
 80192ac:	f04f 0b00 	mov.w	fp, #0
 80192b0:	465b      	mov	r3, fp
 80192b2:	7830      	ldrb	r0, [r6, #0]
 80192b4:	9303      	str	r3, [sp, #12]
 80192b6:	f7ff fef3 	bl	80190a0 <__hexdig_fun>
 80192ba:	9b03      	ldr	r3, [sp, #12]
 80192bc:	f000 000f 	and.w	r0, r0, #15
 80192c0:	4098      	lsls	r0, r3
 80192c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80192c6:	3304      	adds	r3, #4
 80192c8:	e7ae      	b.n	8019228 <__gethex+0x15c>
 80192ca:	45b1      	cmp	r9, r6
 80192cc:	d8ea      	bhi.n	80192a4 <__gethex+0x1d8>
 80192ce:	492b      	ldr	r1, [pc, #172]	@ (801937c <__gethex+0x2b0>)
 80192d0:	9303      	str	r3, [sp, #12]
 80192d2:	2201      	movs	r2, #1
 80192d4:	4630      	mov	r0, r6
 80192d6:	f7ff fe11 	bl	8018efc <strncmp>
 80192da:	9b03      	ldr	r3, [sp, #12]
 80192dc:	2800      	cmp	r0, #0
 80192de:	d1e1      	bne.n	80192a4 <__gethex+0x1d8>
 80192e0:	e7a2      	b.n	8019228 <__gethex+0x15c>
 80192e2:	1ea9      	subs	r1, r5, #2
 80192e4:	4620      	mov	r0, r4
 80192e6:	f7fe fbf3 	bl	8017ad0 <__any_on>
 80192ea:	2800      	cmp	r0, #0
 80192ec:	d0c2      	beq.n	8019274 <__gethex+0x1a8>
 80192ee:	f04f 0903 	mov.w	r9, #3
 80192f2:	e7c1      	b.n	8019278 <__gethex+0x1ac>
 80192f4:	da09      	bge.n	801930a <__gethex+0x23e>
 80192f6:	1b75      	subs	r5, r6, r5
 80192f8:	4621      	mov	r1, r4
 80192fa:	9801      	ldr	r0, [sp, #4]
 80192fc:	462a      	mov	r2, r5
 80192fe:	f7fe f9b1 	bl	8017664 <__lshift>
 8019302:	1b7f      	subs	r7, r7, r5
 8019304:	4604      	mov	r4, r0
 8019306:	f100 0a14 	add.w	sl, r0, #20
 801930a:	f04f 0900 	mov.w	r9, #0
 801930e:	e7b8      	b.n	8019282 <__gethex+0x1b6>
 8019310:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019314:	42bd      	cmp	r5, r7
 8019316:	dd6f      	ble.n	80193f8 <__gethex+0x32c>
 8019318:	1bed      	subs	r5, r5, r7
 801931a:	42ae      	cmp	r6, r5
 801931c:	dc34      	bgt.n	8019388 <__gethex+0x2bc>
 801931e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019322:	2b02      	cmp	r3, #2
 8019324:	d022      	beq.n	801936c <__gethex+0x2a0>
 8019326:	2b03      	cmp	r3, #3
 8019328:	d024      	beq.n	8019374 <__gethex+0x2a8>
 801932a:	2b01      	cmp	r3, #1
 801932c:	d115      	bne.n	801935a <__gethex+0x28e>
 801932e:	42ae      	cmp	r6, r5
 8019330:	d113      	bne.n	801935a <__gethex+0x28e>
 8019332:	2e01      	cmp	r6, #1
 8019334:	d10b      	bne.n	801934e <__gethex+0x282>
 8019336:	9a02      	ldr	r2, [sp, #8]
 8019338:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801933c:	6013      	str	r3, [r2, #0]
 801933e:	2301      	movs	r3, #1
 8019340:	6123      	str	r3, [r4, #16]
 8019342:	f8ca 3000 	str.w	r3, [sl]
 8019346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019348:	2562      	movs	r5, #98	@ 0x62
 801934a:	601c      	str	r4, [r3, #0]
 801934c:	e73a      	b.n	80191c4 <__gethex+0xf8>
 801934e:	1e71      	subs	r1, r6, #1
 8019350:	4620      	mov	r0, r4
 8019352:	f7fe fbbd 	bl	8017ad0 <__any_on>
 8019356:	2800      	cmp	r0, #0
 8019358:	d1ed      	bne.n	8019336 <__gethex+0x26a>
 801935a:	9801      	ldr	r0, [sp, #4]
 801935c:	4621      	mov	r1, r4
 801935e:	f7fd ff69 	bl	8017234 <_Bfree>
 8019362:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019364:	2300      	movs	r3, #0
 8019366:	6013      	str	r3, [r2, #0]
 8019368:	2550      	movs	r5, #80	@ 0x50
 801936a:	e72b      	b.n	80191c4 <__gethex+0xf8>
 801936c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801936e:	2b00      	cmp	r3, #0
 8019370:	d1f3      	bne.n	801935a <__gethex+0x28e>
 8019372:	e7e0      	b.n	8019336 <__gethex+0x26a>
 8019374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019376:	2b00      	cmp	r3, #0
 8019378:	d1dd      	bne.n	8019336 <__gethex+0x26a>
 801937a:	e7ee      	b.n	801935a <__gethex+0x28e>
 801937c:	0801a128 	.word	0x0801a128
 8019380:	08019fc1 	.word	0x08019fc1
 8019384:	0801a2d6 	.word	0x0801a2d6
 8019388:	1e6f      	subs	r7, r5, #1
 801938a:	f1b9 0f00 	cmp.w	r9, #0
 801938e:	d130      	bne.n	80193f2 <__gethex+0x326>
 8019390:	b127      	cbz	r7, 801939c <__gethex+0x2d0>
 8019392:	4639      	mov	r1, r7
 8019394:	4620      	mov	r0, r4
 8019396:	f7fe fb9b 	bl	8017ad0 <__any_on>
 801939a:	4681      	mov	r9, r0
 801939c:	117a      	asrs	r2, r7, #5
 801939e:	2301      	movs	r3, #1
 80193a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80193a4:	f007 071f 	and.w	r7, r7, #31
 80193a8:	40bb      	lsls	r3, r7
 80193aa:	4213      	tst	r3, r2
 80193ac:	4629      	mov	r1, r5
 80193ae:	4620      	mov	r0, r4
 80193b0:	bf18      	it	ne
 80193b2:	f049 0902 	orrne.w	r9, r9, #2
 80193b6:	f7ff fe21 	bl	8018ffc <rshift>
 80193ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80193be:	1b76      	subs	r6, r6, r5
 80193c0:	2502      	movs	r5, #2
 80193c2:	f1b9 0f00 	cmp.w	r9, #0
 80193c6:	d047      	beq.n	8019458 <__gethex+0x38c>
 80193c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80193cc:	2b02      	cmp	r3, #2
 80193ce:	d015      	beq.n	80193fc <__gethex+0x330>
 80193d0:	2b03      	cmp	r3, #3
 80193d2:	d017      	beq.n	8019404 <__gethex+0x338>
 80193d4:	2b01      	cmp	r3, #1
 80193d6:	d109      	bne.n	80193ec <__gethex+0x320>
 80193d8:	f019 0f02 	tst.w	r9, #2
 80193dc:	d006      	beq.n	80193ec <__gethex+0x320>
 80193de:	f8da 3000 	ldr.w	r3, [sl]
 80193e2:	ea49 0903 	orr.w	r9, r9, r3
 80193e6:	f019 0f01 	tst.w	r9, #1
 80193ea:	d10e      	bne.n	801940a <__gethex+0x33e>
 80193ec:	f045 0510 	orr.w	r5, r5, #16
 80193f0:	e032      	b.n	8019458 <__gethex+0x38c>
 80193f2:	f04f 0901 	mov.w	r9, #1
 80193f6:	e7d1      	b.n	801939c <__gethex+0x2d0>
 80193f8:	2501      	movs	r5, #1
 80193fa:	e7e2      	b.n	80193c2 <__gethex+0x2f6>
 80193fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80193fe:	f1c3 0301 	rsb	r3, r3, #1
 8019402:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019406:	2b00      	cmp	r3, #0
 8019408:	d0f0      	beq.n	80193ec <__gethex+0x320>
 801940a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801940e:	f104 0314 	add.w	r3, r4, #20
 8019412:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019416:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801941a:	f04f 0c00 	mov.w	ip, #0
 801941e:	4618      	mov	r0, r3
 8019420:	f853 2b04 	ldr.w	r2, [r3], #4
 8019424:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019428:	d01b      	beq.n	8019462 <__gethex+0x396>
 801942a:	3201      	adds	r2, #1
 801942c:	6002      	str	r2, [r0, #0]
 801942e:	2d02      	cmp	r5, #2
 8019430:	f104 0314 	add.w	r3, r4, #20
 8019434:	d13c      	bne.n	80194b0 <__gethex+0x3e4>
 8019436:	f8d8 2000 	ldr.w	r2, [r8]
 801943a:	3a01      	subs	r2, #1
 801943c:	42b2      	cmp	r2, r6
 801943e:	d109      	bne.n	8019454 <__gethex+0x388>
 8019440:	1171      	asrs	r1, r6, #5
 8019442:	2201      	movs	r2, #1
 8019444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019448:	f006 061f 	and.w	r6, r6, #31
 801944c:	fa02 f606 	lsl.w	r6, r2, r6
 8019450:	421e      	tst	r6, r3
 8019452:	d13a      	bne.n	80194ca <__gethex+0x3fe>
 8019454:	f045 0520 	orr.w	r5, r5, #32
 8019458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801945a:	601c      	str	r4, [r3, #0]
 801945c:	9b02      	ldr	r3, [sp, #8]
 801945e:	601f      	str	r7, [r3, #0]
 8019460:	e6b0      	b.n	80191c4 <__gethex+0xf8>
 8019462:	4299      	cmp	r1, r3
 8019464:	f843 cc04 	str.w	ip, [r3, #-4]
 8019468:	d8d9      	bhi.n	801941e <__gethex+0x352>
 801946a:	68a3      	ldr	r3, [r4, #8]
 801946c:	459b      	cmp	fp, r3
 801946e:	db17      	blt.n	80194a0 <__gethex+0x3d4>
 8019470:	6861      	ldr	r1, [r4, #4]
 8019472:	9801      	ldr	r0, [sp, #4]
 8019474:	3101      	adds	r1, #1
 8019476:	f7fd fe9d 	bl	80171b4 <_Balloc>
 801947a:	4681      	mov	r9, r0
 801947c:	b918      	cbnz	r0, 8019486 <__gethex+0x3ba>
 801947e:	4b1a      	ldr	r3, [pc, #104]	@ (80194e8 <__gethex+0x41c>)
 8019480:	4602      	mov	r2, r0
 8019482:	2184      	movs	r1, #132	@ 0x84
 8019484:	e6c5      	b.n	8019212 <__gethex+0x146>
 8019486:	6922      	ldr	r2, [r4, #16]
 8019488:	3202      	adds	r2, #2
 801948a:	f104 010c 	add.w	r1, r4, #12
 801948e:	0092      	lsls	r2, r2, #2
 8019490:	300c      	adds	r0, #12
 8019492:	f7fc ff9a 	bl	80163ca <memcpy>
 8019496:	4621      	mov	r1, r4
 8019498:	9801      	ldr	r0, [sp, #4]
 801949a:	f7fd fecb 	bl	8017234 <_Bfree>
 801949e:	464c      	mov	r4, r9
 80194a0:	6923      	ldr	r3, [r4, #16]
 80194a2:	1c5a      	adds	r2, r3, #1
 80194a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80194a8:	6122      	str	r2, [r4, #16]
 80194aa:	2201      	movs	r2, #1
 80194ac:	615a      	str	r2, [r3, #20]
 80194ae:	e7be      	b.n	801942e <__gethex+0x362>
 80194b0:	6922      	ldr	r2, [r4, #16]
 80194b2:	455a      	cmp	r2, fp
 80194b4:	dd0b      	ble.n	80194ce <__gethex+0x402>
 80194b6:	2101      	movs	r1, #1
 80194b8:	4620      	mov	r0, r4
 80194ba:	f7ff fd9f 	bl	8018ffc <rshift>
 80194be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80194c2:	3701      	adds	r7, #1
 80194c4:	42bb      	cmp	r3, r7
 80194c6:	f6ff aee0 	blt.w	801928a <__gethex+0x1be>
 80194ca:	2501      	movs	r5, #1
 80194cc:	e7c2      	b.n	8019454 <__gethex+0x388>
 80194ce:	f016 061f 	ands.w	r6, r6, #31
 80194d2:	d0fa      	beq.n	80194ca <__gethex+0x3fe>
 80194d4:	4453      	add	r3, sl
 80194d6:	f1c6 0620 	rsb	r6, r6, #32
 80194da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80194de:	f7fd ff5b 	bl	8017398 <__hi0bits>
 80194e2:	42b0      	cmp	r0, r6
 80194e4:	dbe7      	blt.n	80194b6 <__gethex+0x3ea>
 80194e6:	e7f0      	b.n	80194ca <__gethex+0x3fe>
 80194e8:	08019fc1 	.word	0x08019fc1

080194ec <L_shift>:
 80194ec:	f1c2 0208 	rsb	r2, r2, #8
 80194f0:	0092      	lsls	r2, r2, #2
 80194f2:	b570      	push	{r4, r5, r6, lr}
 80194f4:	f1c2 0620 	rsb	r6, r2, #32
 80194f8:	6843      	ldr	r3, [r0, #4]
 80194fa:	6804      	ldr	r4, [r0, #0]
 80194fc:	fa03 f506 	lsl.w	r5, r3, r6
 8019500:	432c      	orrs	r4, r5
 8019502:	40d3      	lsrs	r3, r2
 8019504:	6004      	str	r4, [r0, #0]
 8019506:	f840 3f04 	str.w	r3, [r0, #4]!
 801950a:	4288      	cmp	r0, r1
 801950c:	d3f4      	bcc.n	80194f8 <L_shift+0xc>
 801950e:	bd70      	pop	{r4, r5, r6, pc}

08019510 <__match>:
 8019510:	b530      	push	{r4, r5, lr}
 8019512:	6803      	ldr	r3, [r0, #0]
 8019514:	3301      	adds	r3, #1
 8019516:	f811 4b01 	ldrb.w	r4, [r1], #1
 801951a:	b914      	cbnz	r4, 8019522 <__match+0x12>
 801951c:	6003      	str	r3, [r0, #0]
 801951e:	2001      	movs	r0, #1
 8019520:	bd30      	pop	{r4, r5, pc}
 8019522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019526:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801952a:	2d19      	cmp	r5, #25
 801952c:	bf98      	it	ls
 801952e:	3220      	addls	r2, #32
 8019530:	42a2      	cmp	r2, r4
 8019532:	d0f0      	beq.n	8019516 <__match+0x6>
 8019534:	2000      	movs	r0, #0
 8019536:	e7f3      	b.n	8019520 <__match+0x10>

08019538 <__hexnan>:
 8019538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801953c:	680b      	ldr	r3, [r1, #0]
 801953e:	6801      	ldr	r1, [r0, #0]
 8019540:	115e      	asrs	r6, r3, #5
 8019542:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019546:	f013 031f 	ands.w	r3, r3, #31
 801954a:	b087      	sub	sp, #28
 801954c:	bf18      	it	ne
 801954e:	3604      	addne	r6, #4
 8019550:	2500      	movs	r5, #0
 8019552:	1f37      	subs	r7, r6, #4
 8019554:	4682      	mov	sl, r0
 8019556:	4690      	mov	r8, r2
 8019558:	9301      	str	r3, [sp, #4]
 801955a:	f846 5c04 	str.w	r5, [r6, #-4]
 801955e:	46b9      	mov	r9, r7
 8019560:	463c      	mov	r4, r7
 8019562:	9502      	str	r5, [sp, #8]
 8019564:	46ab      	mov	fp, r5
 8019566:	784a      	ldrb	r2, [r1, #1]
 8019568:	1c4b      	adds	r3, r1, #1
 801956a:	9303      	str	r3, [sp, #12]
 801956c:	b342      	cbz	r2, 80195c0 <__hexnan+0x88>
 801956e:	4610      	mov	r0, r2
 8019570:	9105      	str	r1, [sp, #20]
 8019572:	9204      	str	r2, [sp, #16]
 8019574:	f7ff fd94 	bl	80190a0 <__hexdig_fun>
 8019578:	2800      	cmp	r0, #0
 801957a:	d151      	bne.n	8019620 <__hexnan+0xe8>
 801957c:	9a04      	ldr	r2, [sp, #16]
 801957e:	9905      	ldr	r1, [sp, #20]
 8019580:	2a20      	cmp	r2, #32
 8019582:	d818      	bhi.n	80195b6 <__hexnan+0x7e>
 8019584:	9b02      	ldr	r3, [sp, #8]
 8019586:	459b      	cmp	fp, r3
 8019588:	dd13      	ble.n	80195b2 <__hexnan+0x7a>
 801958a:	454c      	cmp	r4, r9
 801958c:	d206      	bcs.n	801959c <__hexnan+0x64>
 801958e:	2d07      	cmp	r5, #7
 8019590:	dc04      	bgt.n	801959c <__hexnan+0x64>
 8019592:	462a      	mov	r2, r5
 8019594:	4649      	mov	r1, r9
 8019596:	4620      	mov	r0, r4
 8019598:	f7ff ffa8 	bl	80194ec <L_shift>
 801959c:	4544      	cmp	r4, r8
 801959e:	d952      	bls.n	8019646 <__hexnan+0x10e>
 80195a0:	2300      	movs	r3, #0
 80195a2:	f1a4 0904 	sub.w	r9, r4, #4
 80195a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80195aa:	f8cd b008 	str.w	fp, [sp, #8]
 80195ae:	464c      	mov	r4, r9
 80195b0:	461d      	mov	r5, r3
 80195b2:	9903      	ldr	r1, [sp, #12]
 80195b4:	e7d7      	b.n	8019566 <__hexnan+0x2e>
 80195b6:	2a29      	cmp	r2, #41	@ 0x29
 80195b8:	d157      	bne.n	801966a <__hexnan+0x132>
 80195ba:	3102      	adds	r1, #2
 80195bc:	f8ca 1000 	str.w	r1, [sl]
 80195c0:	f1bb 0f00 	cmp.w	fp, #0
 80195c4:	d051      	beq.n	801966a <__hexnan+0x132>
 80195c6:	454c      	cmp	r4, r9
 80195c8:	d206      	bcs.n	80195d8 <__hexnan+0xa0>
 80195ca:	2d07      	cmp	r5, #7
 80195cc:	dc04      	bgt.n	80195d8 <__hexnan+0xa0>
 80195ce:	462a      	mov	r2, r5
 80195d0:	4649      	mov	r1, r9
 80195d2:	4620      	mov	r0, r4
 80195d4:	f7ff ff8a 	bl	80194ec <L_shift>
 80195d8:	4544      	cmp	r4, r8
 80195da:	d936      	bls.n	801964a <__hexnan+0x112>
 80195dc:	f1a8 0204 	sub.w	r2, r8, #4
 80195e0:	4623      	mov	r3, r4
 80195e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80195e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80195ea:	429f      	cmp	r7, r3
 80195ec:	d2f9      	bcs.n	80195e2 <__hexnan+0xaa>
 80195ee:	1b3b      	subs	r3, r7, r4
 80195f0:	f023 0303 	bic.w	r3, r3, #3
 80195f4:	3304      	adds	r3, #4
 80195f6:	3401      	adds	r4, #1
 80195f8:	3e03      	subs	r6, #3
 80195fa:	42b4      	cmp	r4, r6
 80195fc:	bf88      	it	hi
 80195fe:	2304      	movhi	r3, #4
 8019600:	4443      	add	r3, r8
 8019602:	2200      	movs	r2, #0
 8019604:	f843 2b04 	str.w	r2, [r3], #4
 8019608:	429f      	cmp	r7, r3
 801960a:	d2fb      	bcs.n	8019604 <__hexnan+0xcc>
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	b91b      	cbnz	r3, 8019618 <__hexnan+0xe0>
 8019610:	4547      	cmp	r7, r8
 8019612:	d128      	bne.n	8019666 <__hexnan+0x12e>
 8019614:	2301      	movs	r3, #1
 8019616:	603b      	str	r3, [r7, #0]
 8019618:	2005      	movs	r0, #5
 801961a:	b007      	add	sp, #28
 801961c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019620:	3501      	adds	r5, #1
 8019622:	2d08      	cmp	r5, #8
 8019624:	f10b 0b01 	add.w	fp, fp, #1
 8019628:	dd06      	ble.n	8019638 <__hexnan+0x100>
 801962a:	4544      	cmp	r4, r8
 801962c:	d9c1      	bls.n	80195b2 <__hexnan+0x7a>
 801962e:	2300      	movs	r3, #0
 8019630:	f844 3c04 	str.w	r3, [r4, #-4]
 8019634:	2501      	movs	r5, #1
 8019636:	3c04      	subs	r4, #4
 8019638:	6822      	ldr	r2, [r4, #0]
 801963a:	f000 000f 	and.w	r0, r0, #15
 801963e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019642:	6020      	str	r0, [r4, #0]
 8019644:	e7b5      	b.n	80195b2 <__hexnan+0x7a>
 8019646:	2508      	movs	r5, #8
 8019648:	e7b3      	b.n	80195b2 <__hexnan+0x7a>
 801964a:	9b01      	ldr	r3, [sp, #4]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d0dd      	beq.n	801960c <__hexnan+0xd4>
 8019650:	f1c3 0320 	rsb	r3, r3, #32
 8019654:	f04f 32ff 	mov.w	r2, #4294967295
 8019658:	40da      	lsrs	r2, r3
 801965a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801965e:	4013      	ands	r3, r2
 8019660:	f846 3c04 	str.w	r3, [r6, #-4]
 8019664:	e7d2      	b.n	801960c <__hexnan+0xd4>
 8019666:	3f04      	subs	r7, #4
 8019668:	e7d0      	b.n	801960c <__hexnan+0xd4>
 801966a:	2004      	movs	r0, #4
 801966c:	e7d5      	b.n	801961a <__hexnan+0xe2>

0801966e <__ascii_mbtowc>:
 801966e:	b082      	sub	sp, #8
 8019670:	b901      	cbnz	r1, 8019674 <__ascii_mbtowc+0x6>
 8019672:	a901      	add	r1, sp, #4
 8019674:	b142      	cbz	r2, 8019688 <__ascii_mbtowc+0x1a>
 8019676:	b14b      	cbz	r3, 801968c <__ascii_mbtowc+0x1e>
 8019678:	7813      	ldrb	r3, [r2, #0]
 801967a:	600b      	str	r3, [r1, #0]
 801967c:	7812      	ldrb	r2, [r2, #0]
 801967e:	1e10      	subs	r0, r2, #0
 8019680:	bf18      	it	ne
 8019682:	2001      	movne	r0, #1
 8019684:	b002      	add	sp, #8
 8019686:	4770      	bx	lr
 8019688:	4610      	mov	r0, r2
 801968a:	e7fb      	b.n	8019684 <__ascii_mbtowc+0x16>
 801968c:	f06f 0001 	mvn.w	r0, #1
 8019690:	e7f8      	b.n	8019684 <__ascii_mbtowc+0x16>

08019692 <_realloc_r>:
 8019692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019696:	4680      	mov	r8, r0
 8019698:	4615      	mov	r5, r2
 801969a:	460c      	mov	r4, r1
 801969c:	b921      	cbnz	r1, 80196a8 <_realloc_r+0x16>
 801969e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196a2:	4611      	mov	r1, r2
 80196a4:	f7fd bcfa 	b.w	801709c <_malloc_r>
 80196a8:	b92a      	cbnz	r2, 80196b6 <_realloc_r+0x24>
 80196aa:	f7fd fc83 	bl	8016fb4 <_free_r>
 80196ae:	2400      	movs	r4, #0
 80196b0:	4620      	mov	r0, r4
 80196b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196b6:	f000 f840 	bl	801973a <_malloc_usable_size_r>
 80196ba:	4285      	cmp	r5, r0
 80196bc:	4606      	mov	r6, r0
 80196be:	d802      	bhi.n	80196c6 <_realloc_r+0x34>
 80196c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80196c4:	d8f4      	bhi.n	80196b0 <_realloc_r+0x1e>
 80196c6:	4629      	mov	r1, r5
 80196c8:	4640      	mov	r0, r8
 80196ca:	f7fd fce7 	bl	801709c <_malloc_r>
 80196ce:	4607      	mov	r7, r0
 80196d0:	2800      	cmp	r0, #0
 80196d2:	d0ec      	beq.n	80196ae <_realloc_r+0x1c>
 80196d4:	42b5      	cmp	r5, r6
 80196d6:	462a      	mov	r2, r5
 80196d8:	4621      	mov	r1, r4
 80196da:	bf28      	it	cs
 80196dc:	4632      	movcs	r2, r6
 80196de:	f7fc fe74 	bl	80163ca <memcpy>
 80196e2:	4621      	mov	r1, r4
 80196e4:	4640      	mov	r0, r8
 80196e6:	f7fd fc65 	bl	8016fb4 <_free_r>
 80196ea:	463c      	mov	r4, r7
 80196ec:	e7e0      	b.n	80196b0 <_realloc_r+0x1e>

080196ee <__ascii_wctomb>:
 80196ee:	4603      	mov	r3, r0
 80196f0:	4608      	mov	r0, r1
 80196f2:	b141      	cbz	r1, 8019706 <__ascii_wctomb+0x18>
 80196f4:	2aff      	cmp	r2, #255	@ 0xff
 80196f6:	d904      	bls.n	8019702 <__ascii_wctomb+0x14>
 80196f8:	228a      	movs	r2, #138	@ 0x8a
 80196fa:	601a      	str	r2, [r3, #0]
 80196fc:	f04f 30ff 	mov.w	r0, #4294967295
 8019700:	4770      	bx	lr
 8019702:	700a      	strb	r2, [r1, #0]
 8019704:	2001      	movs	r0, #1
 8019706:	4770      	bx	lr

08019708 <fiprintf>:
 8019708:	b40e      	push	{r1, r2, r3}
 801970a:	b503      	push	{r0, r1, lr}
 801970c:	4601      	mov	r1, r0
 801970e:	ab03      	add	r3, sp, #12
 8019710:	4805      	ldr	r0, [pc, #20]	@ (8019728 <fiprintf+0x20>)
 8019712:	f853 2b04 	ldr.w	r2, [r3], #4
 8019716:	6800      	ldr	r0, [r0, #0]
 8019718:	9301      	str	r3, [sp, #4]
 801971a:	f7ff f9af 	bl	8018a7c <_vfiprintf_r>
 801971e:	b002      	add	sp, #8
 8019720:	f85d eb04 	ldr.w	lr, [sp], #4
 8019724:	b003      	add	sp, #12
 8019726:	4770      	bx	lr
 8019728:	24000194 	.word	0x24000194

0801972c <abort>:
 801972c:	b508      	push	{r3, lr}
 801972e:	2006      	movs	r0, #6
 8019730:	f000 f834 	bl	801979c <raise>
 8019734:	2001      	movs	r0, #1
 8019736:	f7f0 ff12 	bl	800a55e <_exit>

0801973a <_malloc_usable_size_r>:
 801973a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801973e:	1f18      	subs	r0, r3, #4
 8019740:	2b00      	cmp	r3, #0
 8019742:	bfbc      	itt	lt
 8019744:	580b      	ldrlt	r3, [r1, r0]
 8019746:	18c0      	addlt	r0, r0, r3
 8019748:	4770      	bx	lr

0801974a <_raise_r>:
 801974a:	291f      	cmp	r1, #31
 801974c:	b538      	push	{r3, r4, r5, lr}
 801974e:	4605      	mov	r5, r0
 8019750:	460c      	mov	r4, r1
 8019752:	d904      	bls.n	801975e <_raise_r+0x14>
 8019754:	2316      	movs	r3, #22
 8019756:	6003      	str	r3, [r0, #0]
 8019758:	f04f 30ff 	mov.w	r0, #4294967295
 801975c:	bd38      	pop	{r3, r4, r5, pc}
 801975e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019760:	b112      	cbz	r2, 8019768 <_raise_r+0x1e>
 8019762:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019766:	b94b      	cbnz	r3, 801977c <_raise_r+0x32>
 8019768:	4628      	mov	r0, r5
 801976a:	f000 f831 	bl	80197d0 <_getpid_r>
 801976e:	4622      	mov	r2, r4
 8019770:	4601      	mov	r1, r0
 8019772:	4628      	mov	r0, r5
 8019774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019778:	f000 b818 	b.w	80197ac <_kill_r>
 801977c:	2b01      	cmp	r3, #1
 801977e:	d00a      	beq.n	8019796 <_raise_r+0x4c>
 8019780:	1c59      	adds	r1, r3, #1
 8019782:	d103      	bne.n	801978c <_raise_r+0x42>
 8019784:	2316      	movs	r3, #22
 8019786:	6003      	str	r3, [r0, #0]
 8019788:	2001      	movs	r0, #1
 801978a:	e7e7      	b.n	801975c <_raise_r+0x12>
 801978c:	2100      	movs	r1, #0
 801978e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019792:	4620      	mov	r0, r4
 8019794:	4798      	blx	r3
 8019796:	2000      	movs	r0, #0
 8019798:	e7e0      	b.n	801975c <_raise_r+0x12>
	...

0801979c <raise>:
 801979c:	4b02      	ldr	r3, [pc, #8]	@ (80197a8 <raise+0xc>)
 801979e:	4601      	mov	r1, r0
 80197a0:	6818      	ldr	r0, [r3, #0]
 80197a2:	f7ff bfd2 	b.w	801974a <_raise_r>
 80197a6:	bf00      	nop
 80197a8:	24000194 	.word	0x24000194

080197ac <_kill_r>:
 80197ac:	b538      	push	{r3, r4, r5, lr}
 80197ae:	4d07      	ldr	r5, [pc, #28]	@ (80197cc <_kill_r+0x20>)
 80197b0:	2300      	movs	r3, #0
 80197b2:	4604      	mov	r4, r0
 80197b4:	4608      	mov	r0, r1
 80197b6:	4611      	mov	r1, r2
 80197b8:	602b      	str	r3, [r5, #0]
 80197ba:	f7f0 fec0 	bl	800a53e <_kill>
 80197be:	1c43      	adds	r3, r0, #1
 80197c0:	d102      	bne.n	80197c8 <_kill_r+0x1c>
 80197c2:	682b      	ldr	r3, [r5, #0]
 80197c4:	b103      	cbz	r3, 80197c8 <_kill_r+0x1c>
 80197c6:	6023      	str	r3, [r4, #0]
 80197c8:	bd38      	pop	{r3, r4, r5, pc}
 80197ca:	bf00      	nop
 80197cc:	24001acc 	.word	0x24001acc

080197d0 <_getpid_r>:
 80197d0:	f7f0 bead 	b.w	800a52e <_getpid>

080197d4 <_init>:
 80197d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197d6:	bf00      	nop
 80197d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197da:	bc08      	pop	{r3}
 80197dc:	469e      	mov	lr, r3
 80197de:	4770      	bx	lr

080197e0 <_fini>:
 80197e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197e2:	bf00      	nop
 80197e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197e6:	bc08      	pop	{r3}
 80197e8:	469e      	mov	lr, r3
 80197ea:	4770      	bx	lr
